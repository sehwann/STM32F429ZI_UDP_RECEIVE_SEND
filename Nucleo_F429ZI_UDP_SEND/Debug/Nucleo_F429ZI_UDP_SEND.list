
Nucleo_F429ZI_UDP_SEND.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000f7ec  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002bf8  0800f99c  0800f99c  0001f99c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08012594  08012594  00030088  2**0
                  CONTENTS
  4 .ARM          00000008  08012594  08012594  00022594  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801259c  0801259c  00030088  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801259c  0801259c  0002259c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080125a0  080125a0  000225a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000088  20000000  080125a4  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00030088  2**0
                  CONTENTS
 10 .bss          0000850c  20000088  20000088  00030088  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20008594  20008594  00030088  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00030088  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  000300b8  2**0
                  CONTENTS, READONLY
 14 .debug_info   0001adee  00000000  00000000  000300fb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00004ef4  00000000  00000000  0004aee9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 000013b8  00000000  00000000  0004fde0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000fc6  00000000  00000000  00051198  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0002f9af  00000000  00000000  0005215e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00023ae7  00000000  00000000  00081b0d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000eafea  00000000  00000000  000a55f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00005978  00000000  00000000  001905e0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000078  00000000  00000000  00195f58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000088 	.word	0x20000088
 80001cc:	00000000 	.word	0x00000000
 80001d0:	0800f984 	.word	0x0800f984

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	2000008c 	.word	0x2000008c
 80001ec:	0800f984 	.word	0x0800f984

080001f0 <strlen>:
 80001f0:	4603      	mov	r3, r0
 80001f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f6:	2a00      	cmp	r2, #0
 80001f8:	d1fb      	bne.n	80001f2 <strlen+0x2>
 80001fa:	1a18      	subs	r0, r3, r0
 80001fc:	3801      	subs	r0, #1
 80001fe:	4770      	bx	lr

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_uldivmod>:
 80002a0:	b953      	cbnz	r3, 80002b8 <__aeabi_uldivmod+0x18>
 80002a2:	b94a      	cbnz	r2, 80002b8 <__aeabi_uldivmod+0x18>
 80002a4:	2900      	cmp	r1, #0
 80002a6:	bf08      	it	eq
 80002a8:	2800      	cmpeq	r0, #0
 80002aa:	bf1c      	itt	ne
 80002ac:	f04f 31ff 	movne.w	r1, #4294967295
 80002b0:	f04f 30ff 	movne.w	r0, #4294967295
 80002b4:	f000 b970 	b.w	8000598 <__aeabi_idiv0>
 80002b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002c0:	f000 f806 	bl	80002d0 <__udivmoddi4>
 80002c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002cc:	b004      	add	sp, #16
 80002ce:	4770      	bx	lr

080002d0 <__udivmoddi4>:
 80002d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002d4:	9e08      	ldr	r6, [sp, #32]
 80002d6:	460d      	mov	r5, r1
 80002d8:	4604      	mov	r4, r0
 80002da:	460f      	mov	r7, r1
 80002dc:	2b00      	cmp	r3, #0
 80002de:	d14a      	bne.n	8000376 <__udivmoddi4+0xa6>
 80002e0:	428a      	cmp	r2, r1
 80002e2:	4694      	mov	ip, r2
 80002e4:	d965      	bls.n	80003b2 <__udivmoddi4+0xe2>
 80002e6:	fab2 f382 	clz	r3, r2
 80002ea:	b143      	cbz	r3, 80002fe <__udivmoddi4+0x2e>
 80002ec:	fa02 fc03 	lsl.w	ip, r2, r3
 80002f0:	f1c3 0220 	rsb	r2, r3, #32
 80002f4:	409f      	lsls	r7, r3
 80002f6:	fa20 f202 	lsr.w	r2, r0, r2
 80002fa:	4317      	orrs	r7, r2
 80002fc:	409c      	lsls	r4, r3
 80002fe:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000302:	fa1f f58c 	uxth.w	r5, ip
 8000306:	fbb7 f1fe 	udiv	r1, r7, lr
 800030a:	0c22      	lsrs	r2, r4, #16
 800030c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000310:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000314:	fb01 f005 	mul.w	r0, r1, r5
 8000318:	4290      	cmp	r0, r2
 800031a:	d90a      	bls.n	8000332 <__udivmoddi4+0x62>
 800031c:	eb1c 0202 	adds.w	r2, ip, r2
 8000320:	f101 37ff 	add.w	r7, r1, #4294967295
 8000324:	f080 811c 	bcs.w	8000560 <__udivmoddi4+0x290>
 8000328:	4290      	cmp	r0, r2
 800032a:	f240 8119 	bls.w	8000560 <__udivmoddi4+0x290>
 800032e:	3902      	subs	r1, #2
 8000330:	4462      	add	r2, ip
 8000332:	1a12      	subs	r2, r2, r0
 8000334:	b2a4      	uxth	r4, r4
 8000336:	fbb2 f0fe 	udiv	r0, r2, lr
 800033a:	fb0e 2210 	mls	r2, lr, r0, r2
 800033e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000342:	fb00 f505 	mul.w	r5, r0, r5
 8000346:	42a5      	cmp	r5, r4
 8000348:	d90a      	bls.n	8000360 <__udivmoddi4+0x90>
 800034a:	eb1c 0404 	adds.w	r4, ip, r4
 800034e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000352:	f080 8107 	bcs.w	8000564 <__udivmoddi4+0x294>
 8000356:	42a5      	cmp	r5, r4
 8000358:	f240 8104 	bls.w	8000564 <__udivmoddi4+0x294>
 800035c:	4464      	add	r4, ip
 800035e:	3802      	subs	r0, #2
 8000360:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000364:	1b64      	subs	r4, r4, r5
 8000366:	2100      	movs	r1, #0
 8000368:	b11e      	cbz	r6, 8000372 <__udivmoddi4+0xa2>
 800036a:	40dc      	lsrs	r4, r3
 800036c:	2300      	movs	r3, #0
 800036e:	e9c6 4300 	strd	r4, r3, [r6]
 8000372:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000376:	428b      	cmp	r3, r1
 8000378:	d908      	bls.n	800038c <__udivmoddi4+0xbc>
 800037a:	2e00      	cmp	r6, #0
 800037c:	f000 80ed 	beq.w	800055a <__udivmoddi4+0x28a>
 8000380:	2100      	movs	r1, #0
 8000382:	e9c6 0500 	strd	r0, r5, [r6]
 8000386:	4608      	mov	r0, r1
 8000388:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800038c:	fab3 f183 	clz	r1, r3
 8000390:	2900      	cmp	r1, #0
 8000392:	d149      	bne.n	8000428 <__udivmoddi4+0x158>
 8000394:	42ab      	cmp	r3, r5
 8000396:	d302      	bcc.n	800039e <__udivmoddi4+0xce>
 8000398:	4282      	cmp	r2, r0
 800039a:	f200 80f8 	bhi.w	800058e <__udivmoddi4+0x2be>
 800039e:	1a84      	subs	r4, r0, r2
 80003a0:	eb65 0203 	sbc.w	r2, r5, r3
 80003a4:	2001      	movs	r0, #1
 80003a6:	4617      	mov	r7, r2
 80003a8:	2e00      	cmp	r6, #0
 80003aa:	d0e2      	beq.n	8000372 <__udivmoddi4+0xa2>
 80003ac:	e9c6 4700 	strd	r4, r7, [r6]
 80003b0:	e7df      	b.n	8000372 <__udivmoddi4+0xa2>
 80003b2:	b902      	cbnz	r2, 80003b6 <__udivmoddi4+0xe6>
 80003b4:	deff      	udf	#255	; 0xff
 80003b6:	fab2 f382 	clz	r3, r2
 80003ba:	2b00      	cmp	r3, #0
 80003bc:	f040 8090 	bne.w	80004e0 <__udivmoddi4+0x210>
 80003c0:	1a8a      	subs	r2, r1, r2
 80003c2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003c6:	fa1f fe8c 	uxth.w	lr, ip
 80003ca:	2101      	movs	r1, #1
 80003cc:	fbb2 f5f7 	udiv	r5, r2, r7
 80003d0:	fb07 2015 	mls	r0, r7, r5, r2
 80003d4:	0c22      	lsrs	r2, r4, #16
 80003d6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003da:	fb0e f005 	mul.w	r0, lr, r5
 80003de:	4290      	cmp	r0, r2
 80003e0:	d908      	bls.n	80003f4 <__udivmoddi4+0x124>
 80003e2:	eb1c 0202 	adds.w	r2, ip, r2
 80003e6:	f105 38ff 	add.w	r8, r5, #4294967295
 80003ea:	d202      	bcs.n	80003f2 <__udivmoddi4+0x122>
 80003ec:	4290      	cmp	r0, r2
 80003ee:	f200 80cb 	bhi.w	8000588 <__udivmoddi4+0x2b8>
 80003f2:	4645      	mov	r5, r8
 80003f4:	1a12      	subs	r2, r2, r0
 80003f6:	b2a4      	uxth	r4, r4
 80003f8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003fc:	fb07 2210 	mls	r2, r7, r0, r2
 8000400:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000404:	fb0e fe00 	mul.w	lr, lr, r0
 8000408:	45a6      	cmp	lr, r4
 800040a:	d908      	bls.n	800041e <__udivmoddi4+0x14e>
 800040c:	eb1c 0404 	adds.w	r4, ip, r4
 8000410:	f100 32ff 	add.w	r2, r0, #4294967295
 8000414:	d202      	bcs.n	800041c <__udivmoddi4+0x14c>
 8000416:	45a6      	cmp	lr, r4
 8000418:	f200 80bb 	bhi.w	8000592 <__udivmoddi4+0x2c2>
 800041c:	4610      	mov	r0, r2
 800041e:	eba4 040e 	sub.w	r4, r4, lr
 8000422:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000426:	e79f      	b.n	8000368 <__udivmoddi4+0x98>
 8000428:	f1c1 0720 	rsb	r7, r1, #32
 800042c:	408b      	lsls	r3, r1
 800042e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000432:	ea4c 0c03 	orr.w	ip, ip, r3
 8000436:	fa05 f401 	lsl.w	r4, r5, r1
 800043a:	fa20 f307 	lsr.w	r3, r0, r7
 800043e:	40fd      	lsrs	r5, r7
 8000440:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000444:	4323      	orrs	r3, r4
 8000446:	fbb5 f8f9 	udiv	r8, r5, r9
 800044a:	fa1f fe8c 	uxth.w	lr, ip
 800044e:	fb09 5518 	mls	r5, r9, r8, r5
 8000452:	0c1c      	lsrs	r4, r3, #16
 8000454:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000458:	fb08 f50e 	mul.w	r5, r8, lr
 800045c:	42a5      	cmp	r5, r4
 800045e:	fa02 f201 	lsl.w	r2, r2, r1
 8000462:	fa00 f001 	lsl.w	r0, r0, r1
 8000466:	d90b      	bls.n	8000480 <__udivmoddi4+0x1b0>
 8000468:	eb1c 0404 	adds.w	r4, ip, r4
 800046c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000470:	f080 8088 	bcs.w	8000584 <__udivmoddi4+0x2b4>
 8000474:	42a5      	cmp	r5, r4
 8000476:	f240 8085 	bls.w	8000584 <__udivmoddi4+0x2b4>
 800047a:	f1a8 0802 	sub.w	r8, r8, #2
 800047e:	4464      	add	r4, ip
 8000480:	1b64      	subs	r4, r4, r5
 8000482:	b29d      	uxth	r5, r3
 8000484:	fbb4 f3f9 	udiv	r3, r4, r9
 8000488:	fb09 4413 	mls	r4, r9, r3, r4
 800048c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000490:	fb03 fe0e 	mul.w	lr, r3, lr
 8000494:	45a6      	cmp	lr, r4
 8000496:	d908      	bls.n	80004aa <__udivmoddi4+0x1da>
 8000498:	eb1c 0404 	adds.w	r4, ip, r4
 800049c:	f103 35ff 	add.w	r5, r3, #4294967295
 80004a0:	d26c      	bcs.n	800057c <__udivmoddi4+0x2ac>
 80004a2:	45a6      	cmp	lr, r4
 80004a4:	d96a      	bls.n	800057c <__udivmoddi4+0x2ac>
 80004a6:	3b02      	subs	r3, #2
 80004a8:	4464      	add	r4, ip
 80004aa:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80004ae:	fba3 9502 	umull	r9, r5, r3, r2
 80004b2:	eba4 040e 	sub.w	r4, r4, lr
 80004b6:	42ac      	cmp	r4, r5
 80004b8:	46c8      	mov	r8, r9
 80004ba:	46ae      	mov	lr, r5
 80004bc:	d356      	bcc.n	800056c <__udivmoddi4+0x29c>
 80004be:	d053      	beq.n	8000568 <__udivmoddi4+0x298>
 80004c0:	b156      	cbz	r6, 80004d8 <__udivmoddi4+0x208>
 80004c2:	ebb0 0208 	subs.w	r2, r0, r8
 80004c6:	eb64 040e 	sbc.w	r4, r4, lr
 80004ca:	fa04 f707 	lsl.w	r7, r4, r7
 80004ce:	40ca      	lsrs	r2, r1
 80004d0:	40cc      	lsrs	r4, r1
 80004d2:	4317      	orrs	r7, r2
 80004d4:	e9c6 7400 	strd	r7, r4, [r6]
 80004d8:	4618      	mov	r0, r3
 80004da:	2100      	movs	r1, #0
 80004dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004e0:	f1c3 0120 	rsb	r1, r3, #32
 80004e4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004e8:	fa20 f201 	lsr.w	r2, r0, r1
 80004ec:	fa25 f101 	lsr.w	r1, r5, r1
 80004f0:	409d      	lsls	r5, r3
 80004f2:	432a      	orrs	r2, r5
 80004f4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004f8:	fa1f fe8c 	uxth.w	lr, ip
 80004fc:	fbb1 f0f7 	udiv	r0, r1, r7
 8000500:	fb07 1510 	mls	r5, r7, r0, r1
 8000504:	0c11      	lsrs	r1, r2, #16
 8000506:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800050a:	fb00 f50e 	mul.w	r5, r0, lr
 800050e:	428d      	cmp	r5, r1
 8000510:	fa04 f403 	lsl.w	r4, r4, r3
 8000514:	d908      	bls.n	8000528 <__udivmoddi4+0x258>
 8000516:	eb1c 0101 	adds.w	r1, ip, r1
 800051a:	f100 38ff 	add.w	r8, r0, #4294967295
 800051e:	d22f      	bcs.n	8000580 <__udivmoddi4+0x2b0>
 8000520:	428d      	cmp	r5, r1
 8000522:	d92d      	bls.n	8000580 <__udivmoddi4+0x2b0>
 8000524:	3802      	subs	r0, #2
 8000526:	4461      	add	r1, ip
 8000528:	1b49      	subs	r1, r1, r5
 800052a:	b292      	uxth	r2, r2
 800052c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000530:	fb07 1115 	mls	r1, r7, r5, r1
 8000534:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000538:	fb05 f10e 	mul.w	r1, r5, lr
 800053c:	4291      	cmp	r1, r2
 800053e:	d908      	bls.n	8000552 <__udivmoddi4+0x282>
 8000540:	eb1c 0202 	adds.w	r2, ip, r2
 8000544:	f105 38ff 	add.w	r8, r5, #4294967295
 8000548:	d216      	bcs.n	8000578 <__udivmoddi4+0x2a8>
 800054a:	4291      	cmp	r1, r2
 800054c:	d914      	bls.n	8000578 <__udivmoddi4+0x2a8>
 800054e:	3d02      	subs	r5, #2
 8000550:	4462      	add	r2, ip
 8000552:	1a52      	subs	r2, r2, r1
 8000554:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000558:	e738      	b.n	80003cc <__udivmoddi4+0xfc>
 800055a:	4631      	mov	r1, r6
 800055c:	4630      	mov	r0, r6
 800055e:	e708      	b.n	8000372 <__udivmoddi4+0xa2>
 8000560:	4639      	mov	r1, r7
 8000562:	e6e6      	b.n	8000332 <__udivmoddi4+0x62>
 8000564:	4610      	mov	r0, r2
 8000566:	e6fb      	b.n	8000360 <__udivmoddi4+0x90>
 8000568:	4548      	cmp	r0, r9
 800056a:	d2a9      	bcs.n	80004c0 <__udivmoddi4+0x1f0>
 800056c:	ebb9 0802 	subs.w	r8, r9, r2
 8000570:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000574:	3b01      	subs	r3, #1
 8000576:	e7a3      	b.n	80004c0 <__udivmoddi4+0x1f0>
 8000578:	4645      	mov	r5, r8
 800057a:	e7ea      	b.n	8000552 <__udivmoddi4+0x282>
 800057c:	462b      	mov	r3, r5
 800057e:	e794      	b.n	80004aa <__udivmoddi4+0x1da>
 8000580:	4640      	mov	r0, r8
 8000582:	e7d1      	b.n	8000528 <__udivmoddi4+0x258>
 8000584:	46d0      	mov	r8, sl
 8000586:	e77b      	b.n	8000480 <__udivmoddi4+0x1b0>
 8000588:	3d02      	subs	r5, #2
 800058a:	4462      	add	r2, ip
 800058c:	e732      	b.n	80003f4 <__udivmoddi4+0x124>
 800058e:	4608      	mov	r0, r1
 8000590:	e70a      	b.n	80003a8 <__udivmoddi4+0xd8>
 8000592:	4464      	add	r4, ip
 8000594:	3802      	subs	r0, #2
 8000596:	e742      	b.n	800041e <__udivmoddi4+0x14e>

08000598 <__aeabi_idiv0>:
 8000598:	4770      	bx	lr
 800059a:	bf00      	nop

0800059c <_write>:

/* Private variables ---------------------------------------------------------*/
UART_HandleTypeDef huart3;

/* USER CODE BEGIN PV */
int _write(int file, char *ptr, int len) {
 800059c:	b580      	push	{r7, lr}
 800059e:	b084      	sub	sp, #16
 80005a0:	af00      	add	r7, sp, #0
 80005a2:	60f8      	str	r0, [r7, #12]
 80005a4:	60b9      	str	r1, [r7, #8]
 80005a6:	607a      	str	r2, [r7, #4]
	if (HAL_UART_Transmit(&huart3, (uint8_t*) ptr, len, 1000) == HAL_OK)
 80005a8:	687b      	ldr	r3, [r7, #4]
 80005aa:	b29a      	uxth	r2, r3
 80005ac:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80005b0:	68b9      	ldr	r1, [r7, #8]
 80005b2:	4807      	ldr	r0, [pc, #28]	; (80005d0 <_write+0x34>)
 80005b4:	f002 fe5d 	bl	8003272 <HAL_UART_Transmit>
 80005b8:	4603      	mov	r3, r0
 80005ba:	2b00      	cmp	r3, #0
 80005bc:	d101      	bne.n	80005c2 <_write+0x26>
		return len;
 80005be:	687b      	ldr	r3, [r7, #4]
 80005c0:	e001      	b.n	80005c6 <_write+0x2a>
	return -1;
 80005c2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80005c6:	4618      	mov	r0, r3
 80005c8:	3710      	adds	r7, #16
 80005ca:	46bd      	mov	sp, r7
 80005cc:	bd80      	pop	{r7, pc}
 80005ce:	bf00      	nop
 80005d0:	200000a4 	.word	0x200000a4

080005d4 <HAL_GPIO_EXTI_Callback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80005d4:	b580      	push	{r7, lr}
 80005d6:	b082      	sub	sp, #8
 80005d8:	af00      	add	r7, sp, #0
 80005da:	4603      	mov	r3, r0
 80005dc:	80fb      	strh	r3, [r7, #6]
   switch(GPIO_Pin)
 80005de:	88fb      	ldrh	r3, [r7, #6]
 80005e0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80005e4:	d105      	bne.n	80005f2 <HAL_GPIO_EXTI_Callback+0x1e>
   {
      case GPIO_PIN_13:
    	  	  printf("udp_send\n");
 80005e6:	4805      	ldr	r0, [pc, #20]	; (80005fc <HAL_GPIO_EXTI_Callback+0x28>)
 80005e8:	f00e f900 	bl	800e7ec <puts>
			  /*Send udp data */
			  udp_echoclient_send();
 80005ec:	f000 fb08 	bl	8000c00 <udp_echoclient_send>

      break;
 80005f0:	bf00      	nop
   }
}
 80005f2:	bf00      	nop
 80005f4:	3708      	adds	r7, #8
 80005f6:	46bd      	mov	sp, r7
 80005f8:	bd80      	pop	{r7, pc}
 80005fa:	bf00      	nop
 80005fc:	0800f99c 	.word	0x0800f99c

08000600 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000600:	b580      	push	{r7, lr}
 8000602:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000604:	f000 fcd4 	bl	8000fb0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000608:	f000 f818 	bl	800063c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800060c:	f000 f8b6 	bl	800077c <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8000610:	f000 f88a 	bl	8000728 <MX_USART3_UART_Init>
  MX_LWIP_Init();
 8000614:	f003 f9a2 	bl	800395c <MX_LWIP_Init>

  /* Initialize interrupts */
  MX_NVIC_Init();
 8000618:	f000 f87a 	bl	8000710 <MX_NVIC_Init>
  /* USER CODE BEGIN 2 */

  /* udp client connect */
      udp_echoclient_connect();
 800061c:	f000 fac4 	bl	8000ba8 <udp_echoclient_connect>
      printf("Ready!\n");
 8000620:	4804      	ldr	r0, [pc, #16]	; (8000634 <main+0x34>)
 8000622:	f00e f8e3 	bl	800e7ec <puts>
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  /* Read a received packet from the Ethernet buffers and send it
	     to the lwIP for handling */
	  ethernetif_input(&gnetif);
 8000626:	4804      	ldr	r0, [pc, #16]	; (8000638 <main+0x38>)
 8000628:	f003 fc08 	bl	8003e3c <ethernetif_input>

	  /* Handle timeouts */
	  sys_check_timeouts();
 800062c:	f00a ff78 	bl	800b520 <sys_check_timeouts>
	  ethernetif_input(&gnetif);
 8000630:	e7f9      	b.n	8000626 <main+0x26>
 8000632:	bf00      	nop
 8000634:	0800f9a8 	.word	0x0800f9a8
 8000638:	2000015c 	.word	0x2000015c

0800063c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800063c:	b580      	push	{r7, lr}
 800063e:	b094      	sub	sp, #80	; 0x50
 8000640:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000642:	f107 0320 	add.w	r3, r7, #32
 8000646:	2230      	movs	r2, #48	; 0x30
 8000648:	2100      	movs	r1, #0
 800064a:	4618      	mov	r0, r3
 800064c:	f00e f9f8 	bl	800ea40 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000650:	f107 030c 	add.w	r3, r7, #12
 8000654:	2200      	movs	r2, #0
 8000656:	601a      	str	r2, [r3, #0]
 8000658:	605a      	str	r2, [r3, #4]
 800065a:	609a      	str	r2, [r3, #8]
 800065c:	60da      	str	r2, [r3, #12]
 800065e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000660:	2300      	movs	r3, #0
 8000662:	60bb      	str	r3, [r7, #8]
 8000664:	4b28      	ldr	r3, [pc, #160]	; (8000708 <SystemClock_Config+0xcc>)
 8000666:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000668:	4a27      	ldr	r2, [pc, #156]	; (8000708 <SystemClock_Config+0xcc>)
 800066a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800066e:	6413      	str	r3, [r2, #64]	; 0x40
 8000670:	4b25      	ldr	r3, [pc, #148]	; (8000708 <SystemClock_Config+0xcc>)
 8000672:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000674:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000678:	60bb      	str	r3, [r7, #8]
 800067a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800067c:	2300      	movs	r3, #0
 800067e:	607b      	str	r3, [r7, #4]
 8000680:	4b22      	ldr	r3, [pc, #136]	; (800070c <SystemClock_Config+0xd0>)
 8000682:	681b      	ldr	r3, [r3, #0]
 8000684:	4a21      	ldr	r2, [pc, #132]	; (800070c <SystemClock_Config+0xd0>)
 8000686:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800068a:	6013      	str	r3, [r2, #0]
 800068c:	4b1f      	ldr	r3, [pc, #124]	; (800070c <SystemClock_Config+0xd0>)
 800068e:	681b      	ldr	r3, [r3, #0]
 8000690:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000694:	607b      	str	r3, [r7, #4]
 8000696:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000698:	2301      	movs	r3, #1
 800069a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 800069c:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80006a0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006a2:	2302      	movs	r3, #2
 80006a4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80006a6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80006aa:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80006ac:	2304      	movs	r3, #4
 80006ae:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80006b0:	23a8      	movs	r3, #168	; 0xa8
 80006b2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80006b4:	2302      	movs	r3, #2
 80006b6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80006b8:	2307      	movs	r3, #7
 80006ba:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006bc:	f107 0320 	add.w	r3, r7, #32
 80006c0:	4618      	mov	r0, r3
 80006c2:	f002 f8f1 	bl	80028a8 <HAL_RCC_OscConfig>
 80006c6:	4603      	mov	r3, r0
 80006c8:	2b00      	cmp	r3, #0
 80006ca:	d001      	beq.n	80006d0 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80006cc:	f000 f904 	bl	80008d8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006d0:	230f      	movs	r3, #15
 80006d2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006d4:	2302      	movs	r3, #2
 80006d6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006d8:	2300      	movs	r3, #0
 80006da:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80006dc:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80006e0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80006e2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006e6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80006e8:	f107 030c 	add.w	r3, r7, #12
 80006ec:	2105      	movs	r1, #5
 80006ee:	4618      	mov	r0, r3
 80006f0:	f002 fb52 	bl	8002d98 <HAL_RCC_ClockConfig>
 80006f4:	4603      	mov	r3, r0
 80006f6:	2b00      	cmp	r3, #0
 80006f8:	d001      	beq.n	80006fe <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80006fa:	f000 f8ed 	bl	80008d8 <Error_Handler>
  }
}
 80006fe:	bf00      	nop
 8000700:	3750      	adds	r7, #80	; 0x50
 8000702:	46bd      	mov	sp, r7
 8000704:	bd80      	pop	{r7, pc}
 8000706:	bf00      	nop
 8000708:	40023800 	.word	0x40023800
 800070c:	40007000 	.word	0x40007000

08000710 <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 8000710:	b580      	push	{r7, lr}
 8000712:	af00      	add	r7, sp, #0
  /* EXTI15_10_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000714:	2200      	movs	r2, #0
 8000716:	2100      	movs	r1, #0
 8000718:	2028      	movs	r0, #40	; 0x28
 800071a:	f000 fdba 	bl	8001292 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800071e:	2028      	movs	r0, #40	; 0x28
 8000720:	f000 fdd3 	bl	80012ca <HAL_NVIC_EnableIRQ>
}
 8000724:	bf00      	nop
 8000726:	bd80      	pop	{r7, pc}

08000728 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000728:	b580      	push	{r7, lr}
 800072a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800072c:	4b11      	ldr	r3, [pc, #68]	; (8000774 <MX_USART3_UART_Init+0x4c>)
 800072e:	4a12      	ldr	r2, [pc, #72]	; (8000778 <MX_USART3_UART_Init+0x50>)
 8000730:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000732:	4b10      	ldr	r3, [pc, #64]	; (8000774 <MX_USART3_UART_Init+0x4c>)
 8000734:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000738:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800073a:	4b0e      	ldr	r3, [pc, #56]	; (8000774 <MX_USART3_UART_Init+0x4c>)
 800073c:	2200      	movs	r2, #0
 800073e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000740:	4b0c      	ldr	r3, [pc, #48]	; (8000774 <MX_USART3_UART_Init+0x4c>)
 8000742:	2200      	movs	r2, #0
 8000744:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000746:	4b0b      	ldr	r3, [pc, #44]	; (8000774 <MX_USART3_UART_Init+0x4c>)
 8000748:	2200      	movs	r2, #0
 800074a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800074c:	4b09      	ldr	r3, [pc, #36]	; (8000774 <MX_USART3_UART_Init+0x4c>)
 800074e:	220c      	movs	r2, #12
 8000750:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000752:	4b08      	ldr	r3, [pc, #32]	; (8000774 <MX_USART3_UART_Init+0x4c>)
 8000754:	2200      	movs	r2, #0
 8000756:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000758:	4b06      	ldr	r3, [pc, #24]	; (8000774 <MX_USART3_UART_Init+0x4c>)
 800075a:	2200      	movs	r2, #0
 800075c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800075e:	4805      	ldr	r0, [pc, #20]	; (8000774 <MX_USART3_UART_Init+0x4c>)
 8000760:	f002 fd3a 	bl	80031d8 <HAL_UART_Init>
 8000764:	4603      	mov	r3, r0
 8000766:	2b00      	cmp	r3, #0
 8000768:	d001      	beq.n	800076e <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 800076a:	f000 f8b5 	bl	80008d8 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800076e:	bf00      	nop
 8000770:	bd80      	pop	{r7, pc}
 8000772:	bf00      	nop
 8000774:	200000a4 	.word	0x200000a4
 8000778:	40004800 	.word	0x40004800

0800077c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800077c:	b580      	push	{r7, lr}
 800077e:	b08c      	sub	sp, #48	; 0x30
 8000780:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000782:	f107 031c 	add.w	r3, r7, #28
 8000786:	2200      	movs	r2, #0
 8000788:	601a      	str	r2, [r3, #0]
 800078a:	605a      	str	r2, [r3, #4]
 800078c:	609a      	str	r2, [r3, #8]
 800078e:	60da      	str	r2, [r3, #12]
 8000790:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000792:	2300      	movs	r3, #0
 8000794:	61bb      	str	r3, [r7, #24]
 8000796:	4b4c      	ldr	r3, [pc, #304]	; (80008c8 <MX_GPIO_Init+0x14c>)
 8000798:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800079a:	4a4b      	ldr	r2, [pc, #300]	; (80008c8 <MX_GPIO_Init+0x14c>)
 800079c:	f043 0304 	orr.w	r3, r3, #4
 80007a0:	6313      	str	r3, [r2, #48]	; 0x30
 80007a2:	4b49      	ldr	r3, [pc, #292]	; (80008c8 <MX_GPIO_Init+0x14c>)
 80007a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007a6:	f003 0304 	and.w	r3, r3, #4
 80007aa:	61bb      	str	r3, [r7, #24]
 80007ac:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80007ae:	2300      	movs	r3, #0
 80007b0:	617b      	str	r3, [r7, #20]
 80007b2:	4b45      	ldr	r3, [pc, #276]	; (80008c8 <MX_GPIO_Init+0x14c>)
 80007b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007b6:	4a44      	ldr	r2, [pc, #272]	; (80008c8 <MX_GPIO_Init+0x14c>)
 80007b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80007bc:	6313      	str	r3, [r2, #48]	; 0x30
 80007be:	4b42      	ldr	r3, [pc, #264]	; (80008c8 <MX_GPIO_Init+0x14c>)
 80007c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80007c6:	617b      	str	r3, [r7, #20]
 80007c8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007ca:	2300      	movs	r3, #0
 80007cc:	613b      	str	r3, [r7, #16]
 80007ce:	4b3e      	ldr	r3, [pc, #248]	; (80008c8 <MX_GPIO_Init+0x14c>)
 80007d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007d2:	4a3d      	ldr	r2, [pc, #244]	; (80008c8 <MX_GPIO_Init+0x14c>)
 80007d4:	f043 0301 	orr.w	r3, r3, #1
 80007d8:	6313      	str	r3, [r2, #48]	; 0x30
 80007da:	4b3b      	ldr	r3, [pc, #236]	; (80008c8 <MX_GPIO_Init+0x14c>)
 80007dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007de:	f003 0301 	and.w	r3, r3, #1
 80007e2:	613b      	str	r3, [r7, #16]
 80007e4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007e6:	2300      	movs	r3, #0
 80007e8:	60fb      	str	r3, [r7, #12]
 80007ea:	4b37      	ldr	r3, [pc, #220]	; (80008c8 <MX_GPIO_Init+0x14c>)
 80007ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ee:	4a36      	ldr	r2, [pc, #216]	; (80008c8 <MX_GPIO_Init+0x14c>)
 80007f0:	f043 0302 	orr.w	r3, r3, #2
 80007f4:	6313      	str	r3, [r2, #48]	; 0x30
 80007f6:	4b34      	ldr	r3, [pc, #208]	; (80008c8 <MX_GPIO_Init+0x14c>)
 80007f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007fa:	f003 0302 	and.w	r3, r3, #2
 80007fe:	60fb      	str	r3, [r7, #12]
 8000800:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000802:	2300      	movs	r3, #0
 8000804:	60bb      	str	r3, [r7, #8]
 8000806:	4b30      	ldr	r3, [pc, #192]	; (80008c8 <MX_GPIO_Init+0x14c>)
 8000808:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800080a:	4a2f      	ldr	r2, [pc, #188]	; (80008c8 <MX_GPIO_Init+0x14c>)
 800080c:	f043 0308 	orr.w	r3, r3, #8
 8000810:	6313      	str	r3, [r2, #48]	; 0x30
 8000812:	4b2d      	ldr	r3, [pc, #180]	; (80008c8 <MX_GPIO_Init+0x14c>)
 8000814:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000816:	f003 0308 	and.w	r3, r3, #8
 800081a:	60bb      	str	r3, [r7, #8]
 800081c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800081e:	2300      	movs	r3, #0
 8000820:	607b      	str	r3, [r7, #4]
 8000822:	4b29      	ldr	r3, [pc, #164]	; (80008c8 <MX_GPIO_Init+0x14c>)
 8000824:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000826:	4a28      	ldr	r2, [pc, #160]	; (80008c8 <MX_GPIO_Init+0x14c>)
 8000828:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800082c:	6313      	str	r3, [r2, #48]	; 0x30
 800082e:	4b26      	ldr	r3, [pc, #152]	; (80008c8 <MX_GPIO_Init+0x14c>)
 8000830:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000832:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000836:	607b      	str	r3, [r7, #4]
 8000838:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 800083a:	2200      	movs	r2, #0
 800083c:	f244 0181 	movw	r1, #16513	; 0x4081
 8000840:	4822      	ldr	r0, [pc, #136]	; (80008cc <MX_GPIO_Init+0x150>)
 8000842:	f001 ffff 	bl	8002844 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000846:	2200      	movs	r2, #0
 8000848:	2140      	movs	r1, #64	; 0x40
 800084a:	4821      	ldr	r0, [pc, #132]	; (80008d0 <MX_GPIO_Init+0x154>)
 800084c:	f001 fffa 	bl	8002844 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000850:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000854:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000856:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800085a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800085c:	2300      	movs	r3, #0
 800085e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000860:	f107 031c 	add.w	r3, r7, #28
 8000864:	4619      	mov	r1, r3
 8000866:	481b      	ldr	r0, [pc, #108]	; (80008d4 <MX_GPIO_Init+0x158>)
 8000868:	f001 fe40 	bl	80024ec <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 800086c:	f244 0381 	movw	r3, #16513	; 0x4081
 8000870:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000872:	2301      	movs	r3, #1
 8000874:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000876:	2300      	movs	r3, #0
 8000878:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800087a:	2300      	movs	r3, #0
 800087c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800087e:	f107 031c 	add.w	r3, r7, #28
 8000882:	4619      	mov	r1, r3
 8000884:	4811      	ldr	r0, [pc, #68]	; (80008cc <MX_GPIO_Init+0x150>)
 8000886:	f001 fe31 	bl	80024ec <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 800088a:	2340      	movs	r3, #64	; 0x40
 800088c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800088e:	2301      	movs	r3, #1
 8000890:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000892:	2300      	movs	r3, #0
 8000894:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000896:	2300      	movs	r3, #0
 8000898:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 800089a:	f107 031c 	add.w	r3, r7, #28
 800089e:	4619      	mov	r1, r3
 80008a0:	480b      	ldr	r0, [pc, #44]	; (80008d0 <MX_GPIO_Init+0x154>)
 80008a2:	f001 fe23 	bl	80024ec <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 80008a6:	2380      	movs	r3, #128	; 0x80
 80008a8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008aa:	2300      	movs	r3, #0
 80008ac:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ae:	2300      	movs	r3, #0
 80008b0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80008b2:	f107 031c 	add.w	r3, r7, #28
 80008b6:	4619      	mov	r1, r3
 80008b8:	4805      	ldr	r0, [pc, #20]	; (80008d0 <MX_GPIO_Init+0x154>)
 80008ba:	f001 fe17 	bl	80024ec <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80008be:	bf00      	nop
 80008c0:	3730      	adds	r7, #48	; 0x30
 80008c2:	46bd      	mov	sp, r7
 80008c4:	bd80      	pop	{r7, pc}
 80008c6:	bf00      	nop
 80008c8:	40023800 	.word	0x40023800
 80008cc:	40020400 	.word	0x40020400
 80008d0:	40021800 	.word	0x40021800
 80008d4:	40020800 	.word	0x40020800

080008d8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008d8:	b480      	push	{r7}
 80008da:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008dc:	b672      	cpsid	i
}
 80008de:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80008e0:	e7fe      	b.n	80008e0 <Error_Handler+0x8>
	...

080008e4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008e4:	b480      	push	{r7}
 80008e6:	b083      	sub	sp, #12
 80008e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008ea:	2300      	movs	r3, #0
 80008ec:	607b      	str	r3, [r7, #4]
 80008ee:	4b10      	ldr	r3, [pc, #64]	; (8000930 <HAL_MspInit+0x4c>)
 80008f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008f2:	4a0f      	ldr	r2, [pc, #60]	; (8000930 <HAL_MspInit+0x4c>)
 80008f4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80008f8:	6453      	str	r3, [r2, #68]	; 0x44
 80008fa:	4b0d      	ldr	r3, [pc, #52]	; (8000930 <HAL_MspInit+0x4c>)
 80008fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008fe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000902:	607b      	str	r3, [r7, #4]
 8000904:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000906:	2300      	movs	r3, #0
 8000908:	603b      	str	r3, [r7, #0]
 800090a:	4b09      	ldr	r3, [pc, #36]	; (8000930 <HAL_MspInit+0x4c>)
 800090c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800090e:	4a08      	ldr	r2, [pc, #32]	; (8000930 <HAL_MspInit+0x4c>)
 8000910:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000914:	6413      	str	r3, [r2, #64]	; 0x40
 8000916:	4b06      	ldr	r3, [pc, #24]	; (8000930 <HAL_MspInit+0x4c>)
 8000918:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800091a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800091e:	603b      	str	r3, [r7, #0]
 8000920:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000922:	bf00      	nop
 8000924:	370c      	adds	r7, #12
 8000926:	46bd      	mov	sp, r7
 8000928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800092c:	4770      	bx	lr
 800092e:	bf00      	nop
 8000930:	40023800 	.word	0x40023800

08000934 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000934:	b580      	push	{r7, lr}
 8000936:	b08a      	sub	sp, #40	; 0x28
 8000938:	af00      	add	r7, sp, #0
 800093a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800093c:	f107 0314 	add.w	r3, r7, #20
 8000940:	2200      	movs	r2, #0
 8000942:	601a      	str	r2, [r3, #0]
 8000944:	605a      	str	r2, [r3, #4]
 8000946:	609a      	str	r2, [r3, #8]
 8000948:	60da      	str	r2, [r3, #12]
 800094a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 800094c:	687b      	ldr	r3, [r7, #4]
 800094e:	681b      	ldr	r3, [r3, #0]
 8000950:	4a19      	ldr	r2, [pc, #100]	; (80009b8 <HAL_UART_MspInit+0x84>)
 8000952:	4293      	cmp	r3, r2
 8000954:	d12c      	bne.n	80009b0 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000956:	2300      	movs	r3, #0
 8000958:	613b      	str	r3, [r7, #16]
 800095a:	4b18      	ldr	r3, [pc, #96]	; (80009bc <HAL_UART_MspInit+0x88>)
 800095c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800095e:	4a17      	ldr	r2, [pc, #92]	; (80009bc <HAL_UART_MspInit+0x88>)
 8000960:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000964:	6413      	str	r3, [r2, #64]	; 0x40
 8000966:	4b15      	ldr	r3, [pc, #84]	; (80009bc <HAL_UART_MspInit+0x88>)
 8000968:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800096a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800096e:	613b      	str	r3, [r7, #16]
 8000970:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000972:	2300      	movs	r3, #0
 8000974:	60fb      	str	r3, [r7, #12]
 8000976:	4b11      	ldr	r3, [pc, #68]	; (80009bc <HAL_UART_MspInit+0x88>)
 8000978:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800097a:	4a10      	ldr	r2, [pc, #64]	; (80009bc <HAL_UART_MspInit+0x88>)
 800097c:	f043 0308 	orr.w	r3, r3, #8
 8000980:	6313      	str	r3, [r2, #48]	; 0x30
 8000982:	4b0e      	ldr	r3, [pc, #56]	; (80009bc <HAL_UART_MspInit+0x88>)
 8000984:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000986:	f003 0308 	and.w	r3, r3, #8
 800098a:	60fb      	str	r3, [r7, #12]
 800098c:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 800098e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000992:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000994:	2302      	movs	r3, #2
 8000996:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000998:	2300      	movs	r3, #0
 800099a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800099c:	2303      	movs	r3, #3
 800099e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80009a0:	2307      	movs	r3, #7
 80009a2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80009a4:	f107 0314 	add.w	r3, r7, #20
 80009a8:	4619      	mov	r1, r3
 80009aa:	4805      	ldr	r0, [pc, #20]	; (80009c0 <HAL_UART_MspInit+0x8c>)
 80009ac:	f001 fd9e 	bl	80024ec <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80009b0:	bf00      	nop
 80009b2:	3728      	adds	r7, #40	; 0x28
 80009b4:	46bd      	mov	sp, r7
 80009b6:	bd80      	pop	{r7, pc}
 80009b8:	40004800 	.word	0x40004800
 80009bc:	40023800 	.word	0x40023800
 80009c0:	40020c00 	.word	0x40020c00

080009c4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80009c4:	b480      	push	{r7}
 80009c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80009c8:	e7fe      	b.n	80009c8 <NMI_Handler+0x4>

080009ca <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80009ca:	b480      	push	{r7}
 80009cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80009ce:	e7fe      	b.n	80009ce <HardFault_Handler+0x4>

080009d0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80009d0:	b480      	push	{r7}
 80009d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80009d4:	e7fe      	b.n	80009d4 <MemManage_Handler+0x4>

080009d6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80009d6:	b480      	push	{r7}
 80009d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80009da:	e7fe      	b.n	80009da <BusFault_Handler+0x4>

080009dc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80009dc:	b480      	push	{r7}
 80009de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80009e0:	e7fe      	b.n	80009e0 <UsageFault_Handler+0x4>

080009e2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80009e2:	b480      	push	{r7}
 80009e4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80009e6:	bf00      	nop
 80009e8:	46bd      	mov	sp, r7
 80009ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ee:	4770      	bx	lr

080009f0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80009f0:	b480      	push	{r7}
 80009f2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80009f4:	bf00      	nop
 80009f6:	46bd      	mov	sp, r7
 80009f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009fc:	4770      	bx	lr

080009fe <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80009fe:	b480      	push	{r7}
 8000a00:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a02:	bf00      	nop
 8000a04:	46bd      	mov	sp, r7
 8000a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a0a:	4770      	bx	lr

08000a0c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a0c:	b580      	push	{r7, lr}
 8000a0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a10:	f000 fb20 	bl	8001054 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a14:	bf00      	nop
 8000a16:	bd80      	pop	{r7, pc}

08000a18 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000a18:	b580      	push	{r7, lr}
 8000a1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(USER_Btn_Pin);
 8000a1c:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000a20:	f001 ff2a 	bl	8002878 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000a24:	bf00      	nop
 8000a26:	bd80      	pop	{r7, pc}

08000a28 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000a28:	b480      	push	{r7}
 8000a2a:	af00      	add	r7, sp, #0
  return 1;
 8000a2c:	2301      	movs	r3, #1
}
 8000a2e:	4618      	mov	r0, r3
 8000a30:	46bd      	mov	sp, r7
 8000a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a36:	4770      	bx	lr

08000a38 <_kill>:

int _kill(int pid, int sig)
{
 8000a38:	b480      	push	{r7}
 8000a3a:	b083      	sub	sp, #12
 8000a3c:	af00      	add	r7, sp, #0
 8000a3e:	6078      	str	r0, [r7, #4]
 8000a40:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8000a42:	4b05      	ldr	r3, [pc, #20]	; (8000a58 <_kill+0x20>)
 8000a44:	2216      	movs	r2, #22
 8000a46:	601a      	str	r2, [r3, #0]
  return -1;
 8000a48:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000a4c:	4618      	mov	r0, r3
 8000a4e:	370c      	adds	r7, #12
 8000a50:	46bd      	mov	sp, r7
 8000a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a56:	4770      	bx	lr
 8000a58:	20008584 	.word	0x20008584

08000a5c <_exit>:

void _exit (int status)
{
 8000a5c:	b580      	push	{r7, lr}
 8000a5e:	b082      	sub	sp, #8
 8000a60:	af00      	add	r7, sp, #0
 8000a62:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8000a64:	f04f 31ff 	mov.w	r1, #4294967295
 8000a68:	6878      	ldr	r0, [r7, #4]
 8000a6a:	f7ff ffe5 	bl	8000a38 <_kill>
  while (1) {}    /* Make sure we hang here */
 8000a6e:	e7fe      	b.n	8000a6e <_exit+0x12>

08000a70 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000a70:	b580      	push	{r7, lr}
 8000a72:	b086      	sub	sp, #24
 8000a74:	af00      	add	r7, sp, #0
 8000a76:	60f8      	str	r0, [r7, #12]
 8000a78:	60b9      	str	r1, [r7, #8]
 8000a7a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a7c:	2300      	movs	r3, #0
 8000a7e:	617b      	str	r3, [r7, #20]
 8000a80:	e00a      	b.n	8000a98 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000a82:	f3af 8000 	nop.w
 8000a86:	4601      	mov	r1, r0
 8000a88:	68bb      	ldr	r3, [r7, #8]
 8000a8a:	1c5a      	adds	r2, r3, #1
 8000a8c:	60ba      	str	r2, [r7, #8]
 8000a8e:	b2ca      	uxtb	r2, r1
 8000a90:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a92:	697b      	ldr	r3, [r7, #20]
 8000a94:	3301      	adds	r3, #1
 8000a96:	617b      	str	r3, [r7, #20]
 8000a98:	697a      	ldr	r2, [r7, #20]
 8000a9a:	687b      	ldr	r3, [r7, #4]
 8000a9c:	429a      	cmp	r2, r3
 8000a9e:	dbf0      	blt.n	8000a82 <_read+0x12>
  }

  return len;
 8000aa0:	687b      	ldr	r3, [r7, #4]
}
 8000aa2:	4618      	mov	r0, r3
 8000aa4:	3718      	adds	r7, #24
 8000aa6:	46bd      	mov	sp, r7
 8000aa8:	bd80      	pop	{r7, pc}

08000aaa <_close>:
  }
  return len;
}

int _close(int file)
{
 8000aaa:	b480      	push	{r7}
 8000aac:	b083      	sub	sp, #12
 8000aae:	af00      	add	r7, sp, #0
 8000ab0:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000ab2:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000ab6:	4618      	mov	r0, r3
 8000ab8:	370c      	adds	r7, #12
 8000aba:	46bd      	mov	sp, r7
 8000abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac0:	4770      	bx	lr

08000ac2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000ac2:	b480      	push	{r7}
 8000ac4:	b083      	sub	sp, #12
 8000ac6:	af00      	add	r7, sp, #0
 8000ac8:	6078      	str	r0, [r7, #4]
 8000aca:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000acc:	683b      	ldr	r3, [r7, #0]
 8000ace:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000ad2:	605a      	str	r2, [r3, #4]
  return 0;
 8000ad4:	2300      	movs	r3, #0
}
 8000ad6:	4618      	mov	r0, r3
 8000ad8:	370c      	adds	r7, #12
 8000ada:	46bd      	mov	sp, r7
 8000adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae0:	4770      	bx	lr

08000ae2 <_isatty>:

int _isatty(int file)
{
 8000ae2:	b480      	push	{r7}
 8000ae4:	b083      	sub	sp, #12
 8000ae6:	af00      	add	r7, sp, #0
 8000ae8:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000aea:	2301      	movs	r3, #1
}
 8000aec:	4618      	mov	r0, r3
 8000aee:	370c      	adds	r7, #12
 8000af0:	46bd      	mov	sp, r7
 8000af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af6:	4770      	bx	lr

08000af8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000af8:	b480      	push	{r7}
 8000afa:	b085      	sub	sp, #20
 8000afc:	af00      	add	r7, sp, #0
 8000afe:	60f8      	str	r0, [r7, #12]
 8000b00:	60b9      	str	r1, [r7, #8]
 8000b02:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000b04:	2300      	movs	r3, #0
}
 8000b06:	4618      	mov	r0, r3
 8000b08:	3714      	adds	r7, #20
 8000b0a:	46bd      	mov	sp, r7
 8000b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b10:	4770      	bx	lr
	...

08000b14 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000b14:	b480      	push	{r7}
 8000b16:	b087      	sub	sp, #28
 8000b18:	af00      	add	r7, sp, #0
 8000b1a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000b1c:	4a14      	ldr	r2, [pc, #80]	; (8000b70 <_sbrk+0x5c>)
 8000b1e:	4b15      	ldr	r3, [pc, #84]	; (8000b74 <_sbrk+0x60>)
 8000b20:	1ad3      	subs	r3, r2, r3
 8000b22:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000b24:	697b      	ldr	r3, [r7, #20]
 8000b26:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000b28:	4b13      	ldr	r3, [pc, #76]	; (8000b78 <_sbrk+0x64>)
 8000b2a:	681b      	ldr	r3, [r3, #0]
 8000b2c:	2b00      	cmp	r3, #0
 8000b2e:	d102      	bne.n	8000b36 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000b30:	4b11      	ldr	r3, [pc, #68]	; (8000b78 <_sbrk+0x64>)
 8000b32:	4a12      	ldr	r2, [pc, #72]	; (8000b7c <_sbrk+0x68>)
 8000b34:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000b36:	4b10      	ldr	r3, [pc, #64]	; (8000b78 <_sbrk+0x64>)
 8000b38:	681a      	ldr	r2, [r3, #0]
 8000b3a:	687b      	ldr	r3, [r7, #4]
 8000b3c:	4413      	add	r3, r2
 8000b3e:	693a      	ldr	r2, [r7, #16]
 8000b40:	429a      	cmp	r2, r3
 8000b42:	d205      	bcs.n	8000b50 <_sbrk+0x3c>
  {
    errno = ENOMEM;
 8000b44:	4b0e      	ldr	r3, [pc, #56]	; (8000b80 <_sbrk+0x6c>)
 8000b46:	220c      	movs	r2, #12
 8000b48:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000b4a:	f04f 33ff 	mov.w	r3, #4294967295
 8000b4e:	e009      	b.n	8000b64 <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 8000b50:	4b09      	ldr	r3, [pc, #36]	; (8000b78 <_sbrk+0x64>)
 8000b52:	681b      	ldr	r3, [r3, #0]
 8000b54:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000b56:	4b08      	ldr	r3, [pc, #32]	; (8000b78 <_sbrk+0x64>)
 8000b58:	681a      	ldr	r2, [r3, #0]
 8000b5a:	687b      	ldr	r3, [r7, #4]
 8000b5c:	4413      	add	r3, r2
 8000b5e:	4a06      	ldr	r2, [pc, #24]	; (8000b78 <_sbrk+0x64>)
 8000b60:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000b62:	68fb      	ldr	r3, [r7, #12]
}
 8000b64:	4618      	mov	r0, r3
 8000b66:	371c      	adds	r7, #28
 8000b68:	46bd      	mov	sp, r7
 8000b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b6e:	4770      	bx	lr
 8000b70:	20030000 	.word	0x20030000
 8000b74:	00000400 	.word	0x00000400
 8000b78:	200000e8 	.word	0x200000e8
 8000b7c:	20008598 	.word	0x20008598
 8000b80:	20008584 	.word	0x20008584

08000b84 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000b84:	b480      	push	{r7}
 8000b86:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000b88:	4b06      	ldr	r3, [pc, #24]	; (8000ba4 <SystemInit+0x20>)
 8000b8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000b8e:	4a05      	ldr	r2, [pc, #20]	; (8000ba4 <SystemInit+0x20>)
 8000b90:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000b94:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000b98:	bf00      	nop
 8000b9a:	46bd      	mov	sp, r7
 8000b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba0:	4770      	bx	lr
 8000ba2:	bf00      	nop
 8000ba4:	e000ed00 	.word	0xe000ed00

08000ba8 <udp_echoclient_connect>:
  * @brief  Connect to UDP echo server
  * @param  None
  * @retval None
  */
void udp_echoclient_connect(void)
{
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	b082      	sub	sp, #8
 8000bac:	af00      	add	r7, sp, #0
  ip_addr_t DestIPaddr;
  err_t err;
  
  /* Create a new UDP control block  */
  upcb = udp_new();
 8000bae:	f00b f9bb 	bl	800bf28 <udp_new>
 8000bb2:	4603      	mov	r3, r0
 8000bb4:	4a0f      	ldr	r2, [pc, #60]	; (8000bf4 <udp_echoclient_connect+0x4c>)
 8000bb6:	6013      	str	r3, [r2, #0]
  
  if (upcb!=NULL)
 8000bb8:	4b0e      	ldr	r3, [pc, #56]	; (8000bf4 <udp_echoclient_connect+0x4c>)
 8000bba:	681b      	ldr	r3, [r3, #0]
 8000bbc:	2b00      	cmp	r3, #0
 8000bbe:	d015      	beq.n	8000bec <udp_echoclient_connect+0x44>
  {
    /*assign destination IP address */
    IP4_ADDR( &DestIPaddr, DEST_IP_ADDR0, DEST_IP_ADDR1, DEST_IP_ADDR2, DEST_IP_ADDR3 );
 8000bc0:	4b0d      	ldr	r3, [pc, #52]	; (8000bf8 <udp_echoclient_connect+0x50>)
 8000bc2:	603b      	str	r3, [r7, #0]
    
    /* configure destination IP address and port */
    err= udp_connect(upcb, &DestIPaddr, UDP_SERVER_PORT);
 8000bc4:	4b0b      	ldr	r3, [pc, #44]	; (8000bf4 <udp_echoclient_connect+0x4c>)
 8000bc6:	681b      	ldr	r3, [r3, #0]
 8000bc8:	4639      	mov	r1, r7
 8000bca:	2207      	movs	r2, #7
 8000bcc:	4618      	mov	r0, r3
 8000bce:	f00b f91d 	bl	800be0c <udp_connect>
 8000bd2:	4603      	mov	r3, r0
 8000bd4:	71fb      	strb	r3, [r7, #7]
    
    if (err == ERR_OK)
 8000bd6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bda:	2b00      	cmp	r3, #0
 8000bdc:	d106      	bne.n	8000bec <udp_echoclient_connect+0x44>
    {
      /* Set a receive callback for the upcb */
      udp_recv(upcb, udp_receive_callback, NULL);  
 8000bde:	4b05      	ldr	r3, [pc, #20]	; (8000bf4 <udp_echoclient_connect+0x4c>)
 8000be0:	681b      	ldr	r3, [r3, #0]
 8000be2:	2200      	movs	r2, #0
 8000be4:	4905      	ldr	r1, [pc, #20]	; (8000bfc <udp_echoclient_connect+0x54>)
 8000be6:	4618      	mov	r0, r3
 8000be8:	f00b f97e 	bl	800bee8 <udp_recv>
    }
  }
}
 8000bec:	bf00      	nop
 8000bee:	3708      	adds	r7, #8
 8000bf0:	46bd      	mov	sp, r7
 8000bf2:	bd80      	pop	{r7, pc}
 8000bf4:	20000154 	.word	0x20000154
 8000bf8:	97a2fea9 	.word	0x97a2fea9
 8000bfc:	08000c71 	.word	0x08000c71

08000c00 <udp_echoclient_send>:
  * @param addr the remote IP address from which the packet was received
  * @param port the remote port from which the packet was received
  * @retval None
  */
void udp_echoclient_send(void)
{
 8000c00:	b580      	push	{r7, lr}
 8000c02:	b082      	sub	sp, #8
 8000c04:	af00      	add	r7, sp, #0
  struct pbuf *p;
  
  sprintf((char*)data, "sending udp client message %d", (int)message_count);
 8000c06:	4b16      	ldr	r3, [pc, #88]	; (8000c60 <udp_echoclient_send+0x60>)
 8000c08:	681b      	ldr	r3, [r3, #0]
 8000c0a:	461a      	mov	r2, r3
 8000c0c:	4915      	ldr	r1, [pc, #84]	; (8000c64 <udp_echoclient_send+0x64>)
 8000c0e:	4816      	ldr	r0, [pc, #88]	; (8000c68 <udp_echoclient_send+0x68>)
 8000c10:	f00d fdf4 	bl	800e7fc <siprintf>
  
  /* allocate pbuf from pool*/
  p = pbuf_alloc(PBUF_TRANSPORT,strlen((char*)data), PBUF_POOL);
 8000c14:	4814      	ldr	r0, [pc, #80]	; (8000c68 <udp_echoclient_send+0x68>)
 8000c16:	f7ff faeb 	bl	80001f0 <strlen>
 8000c1a:	4603      	mov	r3, r0
 8000c1c:	b29b      	uxth	r3, r3
 8000c1e:	f44f 72c1 	mov.w	r2, #386	; 0x182
 8000c22:	4619      	mov	r1, r3
 8000c24:	2036      	movs	r0, #54	; 0x36
 8000c26:	f004 fc03 	bl	8005430 <pbuf_alloc>
 8000c2a:	6078      	str	r0, [r7, #4]
  
  if (p != NULL)
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	2b00      	cmp	r3, #0
 8000c30:	d012      	beq.n	8000c58 <udp_echoclient_send+0x58>
  {
    /* copy data to pbuf */
    pbuf_take(p, (char*)data, strlen((char*)data));
 8000c32:	480d      	ldr	r0, [pc, #52]	; (8000c68 <udp_echoclient_send+0x68>)
 8000c34:	f7ff fadc 	bl	80001f0 <strlen>
 8000c38:	4603      	mov	r3, r0
 8000c3a:	b29b      	uxth	r3, r3
 8000c3c:	461a      	mov	r2, r3
 8000c3e:	490a      	ldr	r1, [pc, #40]	; (8000c68 <udp_echoclient_send+0x68>)
 8000c40:	6878      	ldr	r0, [r7, #4]
 8000c42:	f005 f945 	bl	8005ed0 <pbuf_take>
    
    /* send udp data */
    udp_send(upcb, p); 
 8000c46:	4b09      	ldr	r3, [pc, #36]	; (8000c6c <udp_echoclient_send+0x6c>)
 8000c48:	681b      	ldr	r3, [r3, #0]
 8000c4a:	6879      	ldr	r1, [r7, #4]
 8000c4c:	4618      	mov	r0, r3
 8000c4e:	f00a fe6b 	bl	800b928 <udp_send>
    
    /* free pbuf */
    pbuf_free(p);
 8000c52:	6878      	ldr	r0, [r7, #4]
 8000c54:	f004 fed0 	bl	80059f8 <pbuf_free>
  }
}
 8000c58:	bf00      	nop
 8000c5a:	3708      	adds	r7, #8
 8000c5c:	46bd      	mov	sp, r7
 8000c5e:	bd80      	pop	{r7, pc}
 8000c60:	20000150 	.word	0x20000150
 8000c64:	0800f9b0 	.word	0x0800f9b0
 8000c68:	200000ec 	.word	0x200000ec
 8000c6c:	20000154 	.word	0x20000154

08000c70 <udp_receive_callback>:
  * @param addr the remote IP address from which the packet was received
  * @param port the remote port from which the packet was received
  * @retval None
  */
void udp_receive_callback(void *arg, struct udp_pcb *upcb, struct pbuf *p, const ip_addr_t *addr, u16_t port)
{
 8000c70:	b580      	push	{r7, lr}
 8000c72:	b084      	sub	sp, #16
 8000c74:	af00      	add	r7, sp, #0
 8000c76:	60f8      	str	r0, [r7, #12]
 8000c78:	60b9      	str	r1, [r7, #8]
 8000c7a:	607a      	str	r2, [r7, #4]
 8000c7c:	603b      	str	r3, [r7, #0]

  /*increment message count */
  message_count++;
 8000c7e:	4b06      	ldr	r3, [pc, #24]	; (8000c98 <udp_receive_callback+0x28>)
 8000c80:	681b      	ldr	r3, [r3, #0]
 8000c82:	3301      	adds	r3, #1
 8000c84:	4a04      	ldr	r2, [pc, #16]	; (8000c98 <udp_receive_callback+0x28>)
 8000c86:	6013      	str	r3, [r2, #0]
  
  /* Free receive pbuf */
  pbuf_free(p);
 8000c88:	6878      	ldr	r0, [r7, #4]
 8000c8a:	f004 feb5 	bl	80059f8 <pbuf_free>
}
 8000c8e:	bf00      	nop
 8000c90:	3710      	adds	r7, #16
 8000c92:	46bd      	mov	sp, r7
 8000c94:	bd80      	pop	{r7, pc}
 8000c96:	bf00      	nop
 8000c98:	20000150 	.word	0x20000150

08000c9c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8000c9c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000cd4 <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000ca0:	480d      	ldr	r0, [pc, #52]	; (8000cd8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000ca2:	490e      	ldr	r1, [pc, #56]	; (8000cdc <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000ca4:	4a0e      	ldr	r2, [pc, #56]	; (8000ce0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000ca6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ca8:	e002      	b.n	8000cb0 <LoopCopyDataInit>

08000caa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000caa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000cac:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000cae:	3304      	adds	r3, #4

08000cb0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000cb0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000cb2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000cb4:	d3f9      	bcc.n	8000caa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000cb6:	4a0b      	ldr	r2, [pc, #44]	; (8000ce4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000cb8:	4c0b      	ldr	r4, [pc, #44]	; (8000ce8 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000cba:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000cbc:	e001      	b.n	8000cc2 <LoopFillZerobss>

08000cbe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000cbe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000cc0:	3204      	adds	r2, #4

08000cc2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000cc2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000cc4:	d3fb      	bcc.n	8000cbe <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000cc6:	f7ff ff5d 	bl	8000b84 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000cca:	f00d ff07 	bl	800eadc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000cce:	f7ff fc97 	bl	8000600 <main>
  bx  lr    
 8000cd2:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8000cd4:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8000cd8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000cdc:	20000088 	.word	0x20000088
  ldr r2, =_sidata
 8000ce0:	080125a4 	.word	0x080125a4
  ldr r2, =_sbss
 8000ce4:	20000088 	.word	0x20000088
  ldr r4, =_ebss
 8000ce8:	20008594 	.word	0x20008594

08000cec <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000cec:	e7fe      	b.n	8000cec <ADC_IRQHandler>

08000cee <LAN8742_RegisterBusIO>:
  * @param  ioctx: holds device IO functions.  
  * @retval LAN8742_STATUS_OK  if OK
  *         LAN8742_STATUS_ERROR if missing mandatory function
  */
int32_t  LAN8742_RegisterBusIO(lan8742_Object_t *pObj, lan8742_IOCtx_t *ioctx)
{
 8000cee:	b480      	push	{r7}
 8000cf0:	b083      	sub	sp, #12
 8000cf2:	af00      	add	r7, sp, #0
 8000cf4:	6078      	str	r0, [r7, #4]
 8000cf6:	6039      	str	r1, [r7, #0]
  if(!pObj || !ioctx->ReadReg || !ioctx->WriteReg || !ioctx->GetTick)
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	2b00      	cmp	r3, #0
 8000cfc:	d00b      	beq.n	8000d16 <LAN8742_RegisterBusIO+0x28>
 8000cfe:	683b      	ldr	r3, [r7, #0]
 8000d00:	68db      	ldr	r3, [r3, #12]
 8000d02:	2b00      	cmp	r3, #0
 8000d04:	d007      	beq.n	8000d16 <LAN8742_RegisterBusIO+0x28>
 8000d06:	683b      	ldr	r3, [r7, #0]
 8000d08:	689b      	ldr	r3, [r3, #8]
 8000d0a:	2b00      	cmp	r3, #0
 8000d0c:	d003      	beq.n	8000d16 <LAN8742_RegisterBusIO+0x28>
 8000d0e:	683b      	ldr	r3, [r7, #0]
 8000d10:	691b      	ldr	r3, [r3, #16]
 8000d12:	2b00      	cmp	r3, #0
 8000d14:	d102      	bne.n	8000d1c <LAN8742_RegisterBusIO+0x2e>
  {
    return LAN8742_STATUS_ERROR;
 8000d16:	f04f 33ff 	mov.w	r3, #4294967295
 8000d1a:	e014      	b.n	8000d46 <LAN8742_RegisterBusIO+0x58>
  }
  
  pObj->IO.Init = ioctx->Init;
 8000d1c:	683b      	ldr	r3, [r7, #0]
 8000d1e:	681a      	ldr	r2, [r3, #0]
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	609a      	str	r2, [r3, #8]
  pObj->IO.DeInit = ioctx->DeInit;
 8000d24:	683b      	ldr	r3, [r7, #0]
 8000d26:	685a      	ldr	r2, [r3, #4]
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	60da      	str	r2, [r3, #12]
  pObj->IO.ReadReg = ioctx->ReadReg;
 8000d2c:	683b      	ldr	r3, [r7, #0]
 8000d2e:	68da      	ldr	r2, [r3, #12]
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	615a      	str	r2, [r3, #20]
  pObj->IO.WriteReg = ioctx->WriteReg;
 8000d34:	683b      	ldr	r3, [r7, #0]
 8000d36:	689a      	ldr	r2, [r3, #8]
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	611a      	str	r2, [r3, #16]
  pObj->IO.GetTick = ioctx->GetTick;
 8000d3c:	683b      	ldr	r3, [r7, #0]
 8000d3e:	691a      	ldr	r2, [r3, #16]
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	619a      	str	r2, [r3, #24]
  
  return LAN8742_STATUS_OK;
 8000d44:	2300      	movs	r3, #0
}
 8000d46:	4618      	mov	r0, r3
 8000d48:	370c      	adds	r7, #12
 8000d4a:	46bd      	mov	sp, r7
 8000d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d50:	4770      	bx	lr

08000d52 <LAN8742_Init>:
  *         LAN8742_STATUS_READ_ERROR if connot read register
  *         LAN8742_STATUS_WRITE_ERROR if connot write to register
  *         LAN8742_STATUS_RESET_TIMEOUT if cannot perform a software reset
  */
 int32_t LAN8742_Init(lan8742_Object_t *pObj)
 {
 8000d52:	b580      	push	{r7, lr}
 8000d54:	b086      	sub	sp, #24
 8000d56:	af00      	add	r7, sp, #0
 8000d58:	6078      	str	r0, [r7, #4]
   uint32_t tickstart = 0, regvalue = 0, addr = 0;
 8000d5a:	2300      	movs	r3, #0
 8000d5c:	60fb      	str	r3, [r7, #12]
 8000d5e:	2300      	movs	r3, #0
 8000d60:	60bb      	str	r3, [r7, #8]
 8000d62:	2300      	movs	r3, #0
 8000d64:	617b      	str	r3, [r7, #20]
   int32_t status = LAN8742_STATUS_OK;
 8000d66:	2300      	movs	r3, #0
 8000d68:	613b      	str	r3, [r7, #16]
   
   if(pObj->Is_Initialized == 0)
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	685b      	ldr	r3, [r3, #4]
 8000d6e:	2b00      	cmp	r3, #0
 8000d70:	d17c      	bne.n	8000e6c <LAN8742_Init+0x11a>
   {
     if(pObj->IO.Init != 0)
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	689b      	ldr	r3, [r3, #8]
 8000d76:	2b00      	cmp	r3, #0
 8000d78:	d002      	beq.n	8000d80 <LAN8742_Init+0x2e>
     {
       /* GPIO and Clocks initialization */
       pObj->IO.Init();
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	689b      	ldr	r3, [r3, #8]
 8000d7e:	4798      	blx	r3
     }
   
     /* for later check */
     pObj->DevAddr = LAN8742_MAX_DEV_ADDR + 1;
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	2220      	movs	r2, #32
 8000d84:	601a      	str	r2, [r3, #0]
   
     /* Get the device address from special mode register */  
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 8000d86:	2300      	movs	r3, #0
 8000d88:	617b      	str	r3, [r7, #20]
 8000d8a:	e01c      	b.n	8000dc6 <LAN8742_Init+0x74>
     {
       if(pObj->IO.ReadReg(addr, LAN8742_SMR, &regvalue) < 0)
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	695b      	ldr	r3, [r3, #20]
 8000d90:	f107 0208 	add.w	r2, r7, #8
 8000d94:	2112      	movs	r1, #18
 8000d96:	6978      	ldr	r0, [r7, #20]
 8000d98:	4798      	blx	r3
 8000d9a:	4603      	mov	r3, r0
 8000d9c:	2b00      	cmp	r3, #0
 8000d9e:	da03      	bge.n	8000da8 <LAN8742_Init+0x56>
       { 
         status = LAN8742_STATUS_READ_ERROR;
 8000da0:	f06f 0304 	mvn.w	r3, #4
 8000da4:	613b      	str	r3, [r7, #16]
         /* Can't read from this device address 
            continue with next address */
         continue;
 8000da6:	e00b      	b.n	8000dc0 <LAN8742_Init+0x6e>
       }
     
       if((regvalue & LAN8742_SMR_PHY_ADDR) == addr)
 8000da8:	68bb      	ldr	r3, [r7, #8]
 8000daa:	f003 031f 	and.w	r3, r3, #31
 8000dae:	697a      	ldr	r2, [r7, #20]
 8000db0:	429a      	cmp	r2, r3
 8000db2:	d105      	bne.n	8000dc0 <LAN8742_Init+0x6e>
       {
         pObj->DevAddr = addr;
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	697a      	ldr	r2, [r7, #20]
 8000db8:	601a      	str	r2, [r3, #0]
         status = LAN8742_STATUS_OK;
 8000dba:	2300      	movs	r3, #0
 8000dbc:	613b      	str	r3, [r7, #16]
         break;
 8000dbe:	e005      	b.n	8000dcc <LAN8742_Init+0x7a>
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 8000dc0:	697b      	ldr	r3, [r7, #20]
 8000dc2:	3301      	adds	r3, #1
 8000dc4:	617b      	str	r3, [r7, #20]
 8000dc6:	697b      	ldr	r3, [r7, #20]
 8000dc8:	2b1f      	cmp	r3, #31
 8000dca:	d9df      	bls.n	8000d8c <LAN8742_Init+0x3a>
       }
     }
   
     if(pObj->DevAddr > LAN8742_MAX_DEV_ADDR)
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	681b      	ldr	r3, [r3, #0]
 8000dd0:	2b1f      	cmp	r3, #31
 8000dd2:	d902      	bls.n	8000dda <LAN8742_Init+0x88>
     {
       status = LAN8742_STATUS_ADDRESS_ERROR;
 8000dd4:	f06f 0302 	mvn.w	r3, #2
 8000dd8:	613b      	str	r3, [r7, #16]
     }
     
     /* if device address is matched */
     if(status == LAN8742_STATUS_OK)
 8000dda:	693b      	ldr	r3, [r7, #16]
 8000ddc:	2b00      	cmp	r3, #0
 8000dde:	d145      	bne.n	8000e6c <LAN8742_Init+0x11a>
     {
       /* set a software reset  */
       if(pObj->IO.WriteReg(pObj->DevAddr, LAN8742_BCR, LAN8742_BCR_SOFT_RESET) >= 0)
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	691b      	ldr	r3, [r3, #16]
 8000de4:	687a      	ldr	r2, [r7, #4]
 8000de6:	6810      	ldr	r0, [r2, #0]
 8000de8:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000dec:	2100      	movs	r1, #0
 8000dee:	4798      	blx	r3
 8000df0:	4603      	mov	r3, r0
 8000df2:	2b00      	cmp	r3, #0
 8000df4:	db37      	blt.n	8000e66 <LAN8742_Init+0x114>
       { 
         /* get software reset status */
         if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &regvalue) >= 0)
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	695b      	ldr	r3, [r3, #20]
 8000dfa:	687a      	ldr	r2, [r7, #4]
 8000dfc:	6810      	ldr	r0, [r2, #0]
 8000dfe:	f107 0208 	add.w	r2, r7, #8
 8000e02:	2100      	movs	r1, #0
 8000e04:	4798      	blx	r3
 8000e06:	4603      	mov	r3, r0
 8000e08:	2b00      	cmp	r3, #0
 8000e0a:	db28      	blt.n	8000e5e <LAN8742_Init+0x10c>
         { 
           tickstart = pObj->IO.GetTick();
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	699b      	ldr	r3, [r3, #24]
 8000e10:	4798      	blx	r3
 8000e12:	4603      	mov	r3, r0
 8000e14:	60fb      	str	r3, [r7, #12]
           
           /* wait until software reset is done or timeout occured  */
           while(regvalue & LAN8742_BCR_SOFT_RESET)
 8000e16:	e01c      	b.n	8000e52 <LAN8742_Init+0x100>
           {
             if((pObj->IO.GetTick() - tickstart) <= LAN8742_SW_RESET_TO)
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	699b      	ldr	r3, [r3, #24]
 8000e1c:	4798      	blx	r3
 8000e1e:	4603      	mov	r3, r0
 8000e20:	461a      	mov	r2, r3
 8000e22:	68fb      	ldr	r3, [r7, #12]
 8000e24:	1ad3      	subs	r3, r2, r3
 8000e26:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8000e2a:	d80e      	bhi.n	8000e4a <LAN8742_Init+0xf8>
             {
               if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &regvalue) < 0)
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	695b      	ldr	r3, [r3, #20]
 8000e30:	687a      	ldr	r2, [r7, #4]
 8000e32:	6810      	ldr	r0, [r2, #0]
 8000e34:	f107 0208 	add.w	r2, r7, #8
 8000e38:	2100      	movs	r1, #0
 8000e3a:	4798      	blx	r3
 8000e3c:	4603      	mov	r3, r0
 8000e3e:	2b00      	cmp	r3, #0
 8000e40:	da07      	bge.n	8000e52 <LAN8742_Init+0x100>
               { 
                 status = LAN8742_STATUS_READ_ERROR;
 8000e42:	f06f 0304 	mvn.w	r3, #4
 8000e46:	613b      	str	r3, [r7, #16]
                 break;
 8000e48:	e010      	b.n	8000e6c <LAN8742_Init+0x11a>
               }
             }
             else
             {
               status = LAN8742_STATUS_RESET_TIMEOUT;
 8000e4a:	f06f 0301 	mvn.w	r3, #1
 8000e4e:	613b      	str	r3, [r7, #16]
               break;
 8000e50:	e00c      	b.n	8000e6c <LAN8742_Init+0x11a>
           while(regvalue & LAN8742_BCR_SOFT_RESET)
 8000e52:	68bb      	ldr	r3, [r7, #8]
 8000e54:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000e58:	2b00      	cmp	r3, #0
 8000e5a:	d1dd      	bne.n	8000e18 <LAN8742_Init+0xc6>
 8000e5c:	e006      	b.n	8000e6c <LAN8742_Init+0x11a>
             }
           } 
         }
         else
         {
           status = LAN8742_STATUS_READ_ERROR;
 8000e5e:	f06f 0304 	mvn.w	r3, #4
 8000e62:	613b      	str	r3, [r7, #16]
 8000e64:	e002      	b.n	8000e6c <LAN8742_Init+0x11a>
         }
       }
       else
       {
         status = LAN8742_STATUS_WRITE_ERROR;
 8000e66:	f06f 0303 	mvn.w	r3, #3
 8000e6a:	613b      	str	r3, [r7, #16]
       }
     }
   }
      
   if(status == LAN8742_STATUS_OK)
 8000e6c:	693b      	ldr	r3, [r7, #16]
 8000e6e:	2b00      	cmp	r3, #0
 8000e70:	d112      	bne.n	8000e98 <LAN8742_Init+0x146>
   {
     tickstart =  pObj->IO.GetTick();
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	699b      	ldr	r3, [r3, #24]
 8000e76:	4798      	blx	r3
 8000e78:	4603      	mov	r3, r0
 8000e7a:	60fb      	str	r3, [r7, #12]
     
     /* Wait for 2s to perform initialization */
     while((pObj->IO.GetTick() - tickstart) <= LAN8742_INIT_TO)
 8000e7c:	bf00      	nop
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	699b      	ldr	r3, [r3, #24]
 8000e82:	4798      	blx	r3
 8000e84:	4603      	mov	r3, r0
 8000e86:	461a      	mov	r2, r3
 8000e88:	68fb      	ldr	r3, [r7, #12]
 8000e8a:	1ad3      	subs	r3, r2, r3
 8000e8c:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8000e90:	d9f5      	bls.n	8000e7e <LAN8742_Init+0x12c>
     {
     }
     pObj->Is_Initialized = 1;
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	2201      	movs	r2, #1
 8000e96:	605a      	str	r2, [r3, #4]
   }
   
   return status;
 8000e98:	693b      	ldr	r3, [r7, #16]
 }
 8000e9a:	4618      	mov	r0, r3
 8000e9c:	3718      	adds	r7, #24
 8000e9e:	46bd      	mov	sp, r7
 8000ea0:	bd80      	pop	{r7, pc}

08000ea2 <LAN8742_GetLinkState>:
  *         LAN8742_STATUS_10MBITS_HALFDUPLEX  if 10Mb/s HD       
  *         LAN8742_STATUS_READ_ERROR if connot read register
  *         LAN8742_STATUS_WRITE_ERROR if connot write to register
  */
int32_t LAN8742_GetLinkState(lan8742_Object_t *pObj)
{
 8000ea2:	b580      	push	{r7, lr}
 8000ea4:	b084      	sub	sp, #16
 8000ea6:	af00      	add	r7, sp, #0
 8000ea8:	6078      	str	r0, [r7, #4]
  uint32_t readval = 0;
 8000eaa:	2300      	movs	r3, #0
 8000eac:	60fb      	str	r3, [r7, #12]
  
  /* Read Status register  */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	695b      	ldr	r3, [r3, #20]
 8000eb2:	687a      	ldr	r2, [r7, #4]
 8000eb4:	6810      	ldr	r0, [r2, #0]
 8000eb6:	f107 020c 	add.w	r2, r7, #12
 8000eba:	2101      	movs	r1, #1
 8000ebc:	4798      	blx	r3
 8000ebe:	4603      	mov	r3, r0
 8000ec0:	2b00      	cmp	r3, #0
 8000ec2:	da02      	bge.n	8000eca <LAN8742_GetLinkState+0x28>
  {
    return LAN8742_STATUS_READ_ERROR;
 8000ec4:	f06f 0304 	mvn.w	r3, #4
 8000ec8:	e06e      	b.n	8000fa8 <LAN8742_GetLinkState+0x106>
  }
  
  /* Read Status register again */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	695b      	ldr	r3, [r3, #20]
 8000ece:	687a      	ldr	r2, [r7, #4]
 8000ed0:	6810      	ldr	r0, [r2, #0]
 8000ed2:	f107 020c 	add.w	r2, r7, #12
 8000ed6:	2101      	movs	r1, #1
 8000ed8:	4798      	blx	r3
 8000eda:	4603      	mov	r3, r0
 8000edc:	2b00      	cmp	r3, #0
 8000ede:	da02      	bge.n	8000ee6 <LAN8742_GetLinkState+0x44>
  {
    return LAN8742_STATUS_READ_ERROR;
 8000ee0:	f06f 0304 	mvn.w	r3, #4
 8000ee4:	e060      	b.n	8000fa8 <LAN8742_GetLinkState+0x106>
  }
  
  if((readval & LAN8742_BSR_LINK_STATUS) == 0)
 8000ee6:	68fb      	ldr	r3, [r7, #12]
 8000ee8:	f003 0304 	and.w	r3, r3, #4
 8000eec:	2b00      	cmp	r3, #0
 8000eee:	d101      	bne.n	8000ef4 <LAN8742_GetLinkState+0x52>
  {
    /* Return Link Down status */
    return LAN8742_STATUS_LINK_DOWN;    
 8000ef0:	2301      	movs	r3, #1
 8000ef2:	e059      	b.n	8000fa8 <LAN8742_GetLinkState+0x106>
  }
  
  /* Check Auto negotiaition */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &readval) < 0)
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	695b      	ldr	r3, [r3, #20]
 8000ef8:	687a      	ldr	r2, [r7, #4]
 8000efa:	6810      	ldr	r0, [r2, #0]
 8000efc:	f107 020c 	add.w	r2, r7, #12
 8000f00:	2100      	movs	r1, #0
 8000f02:	4798      	blx	r3
 8000f04:	4603      	mov	r3, r0
 8000f06:	2b00      	cmp	r3, #0
 8000f08:	da02      	bge.n	8000f10 <LAN8742_GetLinkState+0x6e>
  {
    return LAN8742_STATUS_READ_ERROR;
 8000f0a:	f06f 0304 	mvn.w	r3, #4
 8000f0e:	e04b      	b.n	8000fa8 <LAN8742_GetLinkState+0x106>
  }
  
  if((readval & LAN8742_BCR_AUTONEGO_EN) != LAN8742_BCR_AUTONEGO_EN)
 8000f10:	68fb      	ldr	r3, [r7, #12]
 8000f12:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000f16:	2b00      	cmp	r3, #0
 8000f18:	d11b      	bne.n	8000f52 <LAN8742_GetLinkState+0xb0>
  {
    if(((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT) && ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)) 
 8000f1a:	68fb      	ldr	r3, [r7, #12]
 8000f1c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000f20:	2b00      	cmp	r3, #0
 8000f22:	d006      	beq.n	8000f32 <LAN8742_GetLinkState+0x90>
 8000f24:	68fb      	ldr	r3, [r7, #12]
 8000f26:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000f2a:	2b00      	cmp	r3, #0
 8000f2c:	d001      	beq.n	8000f32 <LAN8742_GetLinkState+0x90>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 8000f2e:	2302      	movs	r3, #2
 8000f30:	e03a      	b.n	8000fa8 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT)
 8000f32:	68fb      	ldr	r3, [r7, #12]
 8000f34:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000f38:	2b00      	cmp	r3, #0
 8000f3a:	d001      	beq.n	8000f40 <LAN8742_GetLinkState+0x9e>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 8000f3c:	2303      	movs	r3, #3
 8000f3e:	e033      	b.n	8000fa8 <LAN8742_GetLinkState+0x106>
    }        
    else if ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)
 8000f40:	68fb      	ldr	r3, [r7, #12]
 8000f42:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000f46:	2b00      	cmp	r3, #0
 8000f48:	d001      	beq.n	8000f4e <LAN8742_GetLinkState+0xac>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 8000f4a:	2304      	movs	r3, #4
 8000f4c:	e02c      	b.n	8000fa8 <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 8000f4e:	2305      	movs	r3, #5
 8000f50:	e02a      	b.n	8000fa8 <LAN8742_GetLinkState+0x106>
    }  		
  }
  else /* Auto Nego enabled */
  {
    if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_PHYSCSR, &readval) < 0)
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	695b      	ldr	r3, [r3, #20]
 8000f56:	687a      	ldr	r2, [r7, #4]
 8000f58:	6810      	ldr	r0, [r2, #0]
 8000f5a:	f107 020c 	add.w	r2, r7, #12
 8000f5e:	211f      	movs	r1, #31
 8000f60:	4798      	blx	r3
 8000f62:	4603      	mov	r3, r0
 8000f64:	2b00      	cmp	r3, #0
 8000f66:	da02      	bge.n	8000f6e <LAN8742_GetLinkState+0xcc>
    {
      return LAN8742_STATUS_READ_ERROR;
 8000f68:	f06f 0304 	mvn.w	r3, #4
 8000f6c:	e01c      	b.n	8000fa8 <LAN8742_GetLinkState+0x106>
    }
    
    /* Check if auto nego not done */
    if((readval & LAN8742_PHYSCSR_AUTONEGO_DONE) == 0)
 8000f6e:	68fb      	ldr	r3, [r7, #12]
 8000f70:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000f74:	2b00      	cmp	r3, #0
 8000f76:	d101      	bne.n	8000f7c <LAN8742_GetLinkState+0xda>
    {
      return LAN8742_STATUS_AUTONEGO_NOTDONE;
 8000f78:	2306      	movs	r3, #6
 8000f7a:	e015      	b.n	8000fa8 <LAN8742_GetLinkState+0x106>
    }
    
    if((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_FD)
 8000f7c:	68fb      	ldr	r3, [r7, #12]
 8000f7e:	f003 031c 	and.w	r3, r3, #28
 8000f82:	2b18      	cmp	r3, #24
 8000f84:	d101      	bne.n	8000f8a <LAN8742_GetLinkState+0xe8>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 8000f86:	2302      	movs	r3, #2
 8000f88:	e00e      	b.n	8000fa8 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_HD)
 8000f8a:	68fb      	ldr	r3, [r7, #12]
 8000f8c:	f003 031c 	and.w	r3, r3, #28
 8000f90:	2b08      	cmp	r3, #8
 8000f92:	d101      	bne.n	8000f98 <LAN8742_GetLinkState+0xf6>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 8000f94:	2303      	movs	r3, #3
 8000f96:	e007      	b.n	8000fa8 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_10BT_FD)
 8000f98:	68fb      	ldr	r3, [r7, #12]
 8000f9a:	f003 031c 	and.w	r3, r3, #28
 8000f9e:	2b14      	cmp	r3, #20
 8000fa0:	d101      	bne.n	8000fa6 <LAN8742_GetLinkState+0x104>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 8000fa2:	2304      	movs	r3, #4
 8000fa4:	e000      	b.n	8000fa8 <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 8000fa6:	2305      	movs	r3, #5
    }				
  }
}
 8000fa8:	4618      	mov	r0, r3
 8000faa:	3710      	adds	r7, #16
 8000fac:	46bd      	mov	sp, r7
 8000fae:	bd80      	pop	{r7, pc}

08000fb0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000fb4:	4b0e      	ldr	r3, [pc, #56]	; (8000ff0 <HAL_Init+0x40>)
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	4a0d      	ldr	r2, [pc, #52]	; (8000ff0 <HAL_Init+0x40>)
 8000fba:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000fbe:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000fc0:	4b0b      	ldr	r3, [pc, #44]	; (8000ff0 <HAL_Init+0x40>)
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	4a0a      	ldr	r2, [pc, #40]	; (8000ff0 <HAL_Init+0x40>)
 8000fc6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000fca:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000fcc:	4b08      	ldr	r3, [pc, #32]	; (8000ff0 <HAL_Init+0x40>)
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	4a07      	ldr	r2, [pc, #28]	; (8000ff0 <HAL_Init+0x40>)
 8000fd2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000fd6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000fd8:	2003      	movs	r0, #3
 8000fda:	f000 f94f 	bl	800127c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000fde:	2000      	movs	r0, #0
 8000fe0:	f000 f808 	bl	8000ff4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000fe4:	f7ff fc7e 	bl	80008e4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000fe8:	2300      	movs	r3, #0
}
 8000fea:	4618      	mov	r0, r3
 8000fec:	bd80      	pop	{r7, pc}
 8000fee:	bf00      	nop
 8000ff0:	40023c00 	.word	0x40023c00

08000ff4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	b082      	sub	sp, #8
 8000ff8:	af00      	add	r7, sp, #0
 8000ffa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000ffc:	4b12      	ldr	r3, [pc, #72]	; (8001048 <HAL_InitTick+0x54>)
 8000ffe:	681a      	ldr	r2, [r3, #0]
 8001000:	4b12      	ldr	r3, [pc, #72]	; (800104c <HAL_InitTick+0x58>)
 8001002:	781b      	ldrb	r3, [r3, #0]
 8001004:	4619      	mov	r1, r3
 8001006:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800100a:	fbb3 f3f1 	udiv	r3, r3, r1
 800100e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001012:	4618      	mov	r0, r3
 8001014:	f000 f967 	bl	80012e6 <HAL_SYSTICK_Config>
 8001018:	4603      	mov	r3, r0
 800101a:	2b00      	cmp	r3, #0
 800101c:	d001      	beq.n	8001022 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800101e:	2301      	movs	r3, #1
 8001020:	e00e      	b.n	8001040 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	2b0f      	cmp	r3, #15
 8001026:	d80a      	bhi.n	800103e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001028:	2200      	movs	r2, #0
 800102a:	6879      	ldr	r1, [r7, #4]
 800102c:	f04f 30ff 	mov.w	r0, #4294967295
 8001030:	f000 f92f 	bl	8001292 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001034:	4a06      	ldr	r2, [pc, #24]	; (8001050 <HAL_InitTick+0x5c>)
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800103a:	2300      	movs	r3, #0
 800103c:	e000      	b.n	8001040 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800103e:	2301      	movs	r3, #1
}
 8001040:	4618      	mov	r0, r3
 8001042:	3708      	adds	r7, #8
 8001044:	46bd      	mov	sp, r7
 8001046:	bd80      	pop	{r7, pc}
 8001048:	20000000 	.word	0x20000000
 800104c:	20000008 	.word	0x20000008
 8001050:	20000004 	.word	0x20000004

08001054 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001054:	b480      	push	{r7}
 8001056:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001058:	4b06      	ldr	r3, [pc, #24]	; (8001074 <HAL_IncTick+0x20>)
 800105a:	781b      	ldrb	r3, [r3, #0]
 800105c:	461a      	mov	r2, r3
 800105e:	4b06      	ldr	r3, [pc, #24]	; (8001078 <HAL_IncTick+0x24>)
 8001060:	681b      	ldr	r3, [r3, #0]
 8001062:	4413      	add	r3, r2
 8001064:	4a04      	ldr	r2, [pc, #16]	; (8001078 <HAL_IncTick+0x24>)
 8001066:	6013      	str	r3, [r2, #0]
}
 8001068:	bf00      	nop
 800106a:	46bd      	mov	sp, r7
 800106c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001070:	4770      	bx	lr
 8001072:	bf00      	nop
 8001074:	20000008 	.word	0x20000008
 8001078:	20000158 	.word	0x20000158

0800107c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800107c:	b480      	push	{r7}
 800107e:	af00      	add	r7, sp, #0
  return uwTick;
 8001080:	4b03      	ldr	r3, [pc, #12]	; (8001090 <HAL_GetTick+0x14>)
 8001082:	681b      	ldr	r3, [r3, #0]
}
 8001084:	4618      	mov	r0, r3
 8001086:	46bd      	mov	sp, r7
 8001088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800108c:	4770      	bx	lr
 800108e:	bf00      	nop
 8001090:	20000158 	.word	0x20000158

08001094 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001094:	b580      	push	{r7, lr}
 8001096:	b084      	sub	sp, #16
 8001098:	af00      	add	r7, sp, #0
 800109a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800109c:	f7ff ffee 	bl	800107c <HAL_GetTick>
 80010a0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80010a6:	68fb      	ldr	r3, [r7, #12]
 80010a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80010ac:	d005      	beq.n	80010ba <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80010ae:	4b0a      	ldr	r3, [pc, #40]	; (80010d8 <HAL_Delay+0x44>)
 80010b0:	781b      	ldrb	r3, [r3, #0]
 80010b2:	461a      	mov	r2, r3
 80010b4:	68fb      	ldr	r3, [r7, #12]
 80010b6:	4413      	add	r3, r2
 80010b8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80010ba:	bf00      	nop
 80010bc:	f7ff ffde 	bl	800107c <HAL_GetTick>
 80010c0:	4602      	mov	r2, r0
 80010c2:	68bb      	ldr	r3, [r7, #8]
 80010c4:	1ad3      	subs	r3, r2, r3
 80010c6:	68fa      	ldr	r2, [r7, #12]
 80010c8:	429a      	cmp	r2, r3
 80010ca:	d8f7      	bhi.n	80010bc <HAL_Delay+0x28>
  {
  }
}
 80010cc:	bf00      	nop
 80010ce:	bf00      	nop
 80010d0:	3710      	adds	r7, #16
 80010d2:	46bd      	mov	sp, r7
 80010d4:	bd80      	pop	{r7, pc}
 80010d6:	bf00      	nop
 80010d8:	20000008 	.word	0x20000008

080010dc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010dc:	b480      	push	{r7}
 80010de:	b085      	sub	sp, #20
 80010e0:	af00      	add	r7, sp, #0
 80010e2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	f003 0307 	and.w	r3, r3, #7
 80010ea:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80010ec:	4b0c      	ldr	r3, [pc, #48]	; (8001120 <__NVIC_SetPriorityGrouping+0x44>)
 80010ee:	68db      	ldr	r3, [r3, #12]
 80010f0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80010f2:	68ba      	ldr	r2, [r7, #8]
 80010f4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80010f8:	4013      	ands	r3, r2
 80010fa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80010fc:	68fb      	ldr	r3, [r7, #12]
 80010fe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001100:	68bb      	ldr	r3, [r7, #8]
 8001102:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001104:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001108:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800110c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800110e:	4a04      	ldr	r2, [pc, #16]	; (8001120 <__NVIC_SetPriorityGrouping+0x44>)
 8001110:	68bb      	ldr	r3, [r7, #8]
 8001112:	60d3      	str	r3, [r2, #12]
}
 8001114:	bf00      	nop
 8001116:	3714      	adds	r7, #20
 8001118:	46bd      	mov	sp, r7
 800111a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800111e:	4770      	bx	lr
 8001120:	e000ed00 	.word	0xe000ed00

08001124 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001124:	b480      	push	{r7}
 8001126:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001128:	4b04      	ldr	r3, [pc, #16]	; (800113c <__NVIC_GetPriorityGrouping+0x18>)
 800112a:	68db      	ldr	r3, [r3, #12]
 800112c:	0a1b      	lsrs	r3, r3, #8
 800112e:	f003 0307 	and.w	r3, r3, #7
}
 8001132:	4618      	mov	r0, r3
 8001134:	46bd      	mov	sp, r7
 8001136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800113a:	4770      	bx	lr
 800113c:	e000ed00 	.word	0xe000ed00

08001140 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001140:	b480      	push	{r7}
 8001142:	b083      	sub	sp, #12
 8001144:	af00      	add	r7, sp, #0
 8001146:	4603      	mov	r3, r0
 8001148:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800114a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800114e:	2b00      	cmp	r3, #0
 8001150:	db0b      	blt.n	800116a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001152:	79fb      	ldrb	r3, [r7, #7]
 8001154:	f003 021f 	and.w	r2, r3, #31
 8001158:	4907      	ldr	r1, [pc, #28]	; (8001178 <__NVIC_EnableIRQ+0x38>)
 800115a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800115e:	095b      	lsrs	r3, r3, #5
 8001160:	2001      	movs	r0, #1
 8001162:	fa00 f202 	lsl.w	r2, r0, r2
 8001166:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800116a:	bf00      	nop
 800116c:	370c      	adds	r7, #12
 800116e:	46bd      	mov	sp, r7
 8001170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001174:	4770      	bx	lr
 8001176:	bf00      	nop
 8001178:	e000e100 	.word	0xe000e100

0800117c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800117c:	b480      	push	{r7}
 800117e:	b083      	sub	sp, #12
 8001180:	af00      	add	r7, sp, #0
 8001182:	4603      	mov	r3, r0
 8001184:	6039      	str	r1, [r7, #0]
 8001186:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001188:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800118c:	2b00      	cmp	r3, #0
 800118e:	db0a      	blt.n	80011a6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001190:	683b      	ldr	r3, [r7, #0]
 8001192:	b2da      	uxtb	r2, r3
 8001194:	490c      	ldr	r1, [pc, #48]	; (80011c8 <__NVIC_SetPriority+0x4c>)
 8001196:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800119a:	0112      	lsls	r2, r2, #4
 800119c:	b2d2      	uxtb	r2, r2
 800119e:	440b      	add	r3, r1
 80011a0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80011a4:	e00a      	b.n	80011bc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011a6:	683b      	ldr	r3, [r7, #0]
 80011a8:	b2da      	uxtb	r2, r3
 80011aa:	4908      	ldr	r1, [pc, #32]	; (80011cc <__NVIC_SetPriority+0x50>)
 80011ac:	79fb      	ldrb	r3, [r7, #7]
 80011ae:	f003 030f 	and.w	r3, r3, #15
 80011b2:	3b04      	subs	r3, #4
 80011b4:	0112      	lsls	r2, r2, #4
 80011b6:	b2d2      	uxtb	r2, r2
 80011b8:	440b      	add	r3, r1
 80011ba:	761a      	strb	r2, [r3, #24]
}
 80011bc:	bf00      	nop
 80011be:	370c      	adds	r7, #12
 80011c0:	46bd      	mov	sp, r7
 80011c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c6:	4770      	bx	lr
 80011c8:	e000e100 	.word	0xe000e100
 80011cc:	e000ed00 	.word	0xe000ed00

080011d0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80011d0:	b480      	push	{r7}
 80011d2:	b089      	sub	sp, #36	; 0x24
 80011d4:	af00      	add	r7, sp, #0
 80011d6:	60f8      	str	r0, [r7, #12]
 80011d8:	60b9      	str	r1, [r7, #8]
 80011da:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80011dc:	68fb      	ldr	r3, [r7, #12]
 80011de:	f003 0307 	and.w	r3, r3, #7
 80011e2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80011e4:	69fb      	ldr	r3, [r7, #28]
 80011e6:	f1c3 0307 	rsb	r3, r3, #7
 80011ea:	2b04      	cmp	r3, #4
 80011ec:	bf28      	it	cs
 80011ee:	2304      	movcs	r3, #4
 80011f0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80011f2:	69fb      	ldr	r3, [r7, #28]
 80011f4:	3304      	adds	r3, #4
 80011f6:	2b06      	cmp	r3, #6
 80011f8:	d902      	bls.n	8001200 <NVIC_EncodePriority+0x30>
 80011fa:	69fb      	ldr	r3, [r7, #28]
 80011fc:	3b03      	subs	r3, #3
 80011fe:	e000      	b.n	8001202 <NVIC_EncodePriority+0x32>
 8001200:	2300      	movs	r3, #0
 8001202:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001204:	f04f 32ff 	mov.w	r2, #4294967295
 8001208:	69bb      	ldr	r3, [r7, #24]
 800120a:	fa02 f303 	lsl.w	r3, r2, r3
 800120e:	43da      	mvns	r2, r3
 8001210:	68bb      	ldr	r3, [r7, #8]
 8001212:	401a      	ands	r2, r3
 8001214:	697b      	ldr	r3, [r7, #20]
 8001216:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001218:	f04f 31ff 	mov.w	r1, #4294967295
 800121c:	697b      	ldr	r3, [r7, #20]
 800121e:	fa01 f303 	lsl.w	r3, r1, r3
 8001222:	43d9      	mvns	r1, r3
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001228:	4313      	orrs	r3, r2
         );
}
 800122a:	4618      	mov	r0, r3
 800122c:	3724      	adds	r7, #36	; 0x24
 800122e:	46bd      	mov	sp, r7
 8001230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001234:	4770      	bx	lr
	...

08001238 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001238:	b580      	push	{r7, lr}
 800123a:	b082      	sub	sp, #8
 800123c:	af00      	add	r7, sp, #0
 800123e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	3b01      	subs	r3, #1
 8001244:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001248:	d301      	bcc.n	800124e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800124a:	2301      	movs	r3, #1
 800124c:	e00f      	b.n	800126e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800124e:	4a0a      	ldr	r2, [pc, #40]	; (8001278 <SysTick_Config+0x40>)
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	3b01      	subs	r3, #1
 8001254:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001256:	210f      	movs	r1, #15
 8001258:	f04f 30ff 	mov.w	r0, #4294967295
 800125c:	f7ff ff8e 	bl	800117c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001260:	4b05      	ldr	r3, [pc, #20]	; (8001278 <SysTick_Config+0x40>)
 8001262:	2200      	movs	r2, #0
 8001264:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001266:	4b04      	ldr	r3, [pc, #16]	; (8001278 <SysTick_Config+0x40>)
 8001268:	2207      	movs	r2, #7
 800126a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800126c:	2300      	movs	r3, #0
}
 800126e:	4618      	mov	r0, r3
 8001270:	3708      	adds	r7, #8
 8001272:	46bd      	mov	sp, r7
 8001274:	bd80      	pop	{r7, pc}
 8001276:	bf00      	nop
 8001278:	e000e010 	.word	0xe000e010

0800127c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800127c:	b580      	push	{r7, lr}
 800127e:	b082      	sub	sp, #8
 8001280:	af00      	add	r7, sp, #0
 8001282:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001284:	6878      	ldr	r0, [r7, #4]
 8001286:	f7ff ff29 	bl	80010dc <__NVIC_SetPriorityGrouping>
}
 800128a:	bf00      	nop
 800128c:	3708      	adds	r7, #8
 800128e:	46bd      	mov	sp, r7
 8001290:	bd80      	pop	{r7, pc}

08001292 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001292:	b580      	push	{r7, lr}
 8001294:	b086      	sub	sp, #24
 8001296:	af00      	add	r7, sp, #0
 8001298:	4603      	mov	r3, r0
 800129a:	60b9      	str	r1, [r7, #8]
 800129c:	607a      	str	r2, [r7, #4]
 800129e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80012a0:	2300      	movs	r3, #0
 80012a2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80012a4:	f7ff ff3e 	bl	8001124 <__NVIC_GetPriorityGrouping>
 80012a8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80012aa:	687a      	ldr	r2, [r7, #4]
 80012ac:	68b9      	ldr	r1, [r7, #8]
 80012ae:	6978      	ldr	r0, [r7, #20]
 80012b0:	f7ff ff8e 	bl	80011d0 <NVIC_EncodePriority>
 80012b4:	4602      	mov	r2, r0
 80012b6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80012ba:	4611      	mov	r1, r2
 80012bc:	4618      	mov	r0, r3
 80012be:	f7ff ff5d 	bl	800117c <__NVIC_SetPriority>
}
 80012c2:	bf00      	nop
 80012c4:	3718      	adds	r7, #24
 80012c6:	46bd      	mov	sp, r7
 80012c8:	bd80      	pop	{r7, pc}

080012ca <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80012ca:	b580      	push	{r7, lr}
 80012cc:	b082      	sub	sp, #8
 80012ce:	af00      	add	r7, sp, #0
 80012d0:	4603      	mov	r3, r0
 80012d2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80012d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012d8:	4618      	mov	r0, r3
 80012da:	f7ff ff31 	bl	8001140 <__NVIC_EnableIRQ>
}
 80012de:	bf00      	nop
 80012e0:	3708      	adds	r7, #8
 80012e2:	46bd      	mov	sp, r7
 80012e4:	bd80      	pop	{r7, pc}

080012e6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80012e6:	b580      	push	{r7, lr}
 80012e8:	b082      	sub	sp, #8
 80012ea:	af00      	add	r7, sp, #0
 80012ec:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80012ee:	6878      	ldr	r0, [r7, #4]
 80012f0:	f7ff ffa2 	bl	8001238 <SysTick_Config>
 80012f4:	4603      	mov	r3, r0
}
 80012f6:	4618      	mov	r0, r3
 80012f8:	3708      	adds	r7, #8
 80012fa:	46bd      	mov	sp, r7
 80012fc:	bd80      	pop	{r7, pc}
	...

08001300 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8001300:	b580      	push	{r7, lr}
 8001302:	b084      	sub	sp, #16
 8001304:	af00      	add	r7, sp, #0
 8001306:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	2b00      	cmp	r3, #0
 800130c:	d101      	bne.n	8001312 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 800130e:	2301      	movs	r3, #1
 8001310:	e06c      	b.n	80013ec <HAL_ETH_Init+0xec>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001318:	2b00      	cmp	r3, #0
 800131a:	d106      	bne.n	800132a <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	2223      	movs	r2, #35	; 0x23
 8001320:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8001324:	6878      	ldr	r0, [r7, #4]
 8001326:	f002 fdf9 	bl	8003f1c <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800132a:	2300      	movs	r3, #0
 800132c:	60bb      	str	r3, [r7, #8]
 800132e:	4b31      	ldr	r3, [pc, #196]	; (80013f4 <HAL_ETH_Init+0xf4>)
 8001330:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001332:	4a30      	ldr	r2, [pc, #192]	; (80013f4 <HAL_ETH_Init+0xf4>)
 8001334:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001338:	6453      	str	r3, [r2, #68]	; 0x44
 800133a:	4b2e      	ldr	r3, [pc, #184]	; (80013f4 <HAL_ETH_Init+0xf4>)
 800133c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800133e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001342:	60bb      	str	r3, [r7, #8]
 8001344:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8001346:	4b2c      	ldr	r3, [pc, #176]	; (80013f8 <HAL_ETH_Init+0xf8>)
 8001348:	685b      	ldr	r3, [r3, #4]
 800134a:	4a2b      	ldr	r2, [pc, #172]	; (80013f8 <HAL_ETH_Init+0xf8>)
 800134c:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8001350:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8001352:	4b29      	ldr	r3, [pc, #164]	; (80013f8 <HAL_ETH_Init+0xf8>)
 8001354:	685a      	ldr	r2, [r3, #4]
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	689b      	ldr	r3, [r3, #8]
 800135a:	4927      	ldr	r1, [pc, #156]	; (80013f8 <HAL_ETH_Init+0xf8>)
 800135c:	4313      	orrs	r3, r2
 800135e:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 8001360:	4b25      	ldr	r3, [pc, #148]	; (80013f8 <HAL_ETH_Init+0xf8>)
 8001362:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	687a      	ldr	r2, [r7, #4]
 8001370:	6812      	ldr	r2, [r2, #0]
 8001372:	f043 0301 	orr.w	r3, r3, #1
 8001376:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800137a:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800137c:	f7ff fe7e 	bl	800107c <HAL_GetTick>
 8001380:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8001382:	e011      	b.n	80013a8 <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8001384:	f7ff fe7a 	bl	800107c <HAL_GetTick>
 8001388:	4602      	mov	r2, r0
 800138a:	68fb      	ldr	r3, [r7, #12]
 800138c:	1ad3      	subs	r3, r2, r3
 800138e:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001392:	d909      	bls.n	80013a8 <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	2204      	movs	r2, #4
 8001398:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	22e0      	movs	r2, #224	; 0xe0
 80013a0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 80013a4:	2301      	movs	r3, #1
 80013a6:	e021      	b.n	80013ec <HAL_ETH_Init+0xec>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	f003 0301 	and.w	r3, r3, #1
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d1e4      	bne.n	8001384 <HAL_ETH_Init+0x84>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 80013ba:	6878      	ldr	r0, [r7, #4]
 80013bc:	f000 fdf0 	bl	8001fa0 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 80013c0:	6878      	ldr	r0, [r7, #4]
 80013c2:	f000 fe97 	bl	80020f4 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 80013c6:	6878      	ldr	r0, [r7, #4]
 80013c8:	f000 feed 	bl	80021a6 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	685b      	ldr	r3, [r3, #4]
 80013d0:	461a      	mov	r2, r3
 80013d2:	2100      	movs	r1, #0
 80013d4:	6878      	ldr	r0, [r7, #4]
 80013d6:	f000 fe55 	bl	8002084 <ETH_MACAddressConfig>

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	2200      	movs	r2, #0
 80013de:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	2210      	movs	r2, #16
 80013e6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80013ea:	2300      	movs	r3, #0
}
 80013ec:	4618      	mov	r0, r3
 80013ee:	3710      	adds	r7, #16
 80013f0:	46bd      	mov	sp, r7
 80013f2:	bd80      	pop	{r7, pc}
 80013f4:	40023800 	.word	0x40023800
 80013f8:	40013800 	.word	0x40013800

080013fc <HAL_ETH_Start>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start(ETH_HandleTypeDef *heth)
{
 80013fc:	b580      	push	{r7, lr}
 80013fe:	b084      	sub	sp, #16
 8001400:	af00      	add	r7, sp, #0
 8001402:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1;

  if (heth->gState == HAL_ETH_STATE_READY)
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800140a:	2b10      	cmp	r3, #16
 800140c:	d150      	bne.n	80014b0 <HAL_ETH_Start+0xb4>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	2223      	movs	r2, #35	; 0x23
 8001412:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Set nombre of descriptors to build */
    heth->RxDescList.RxBuildDescCnt = ETH_RX_DESC_CNT;
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	2204      	movs	r2, #4
 800141a:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Build all descriptors */
    ETH_UpdateDescriptor(heth);
 800141c:	6878      	ldr	r0, [r7, #4]
 800141e:	f000 f9fd 	bl	800181c <ETH_UpdateDescriptor>

    /* Enable the MAC transmission */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	681a      	ldr	r2, [r3, #0]
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	f042 0208 	orr.w	r2, r2, #8
 8001430:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 800143a:	2001      	movs	r0, #1
 800143c:	f7ff fe2a 	bl	8001094 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	68fa      	ldr	r2, [r7, #12]
 8001446:	601a      	str	r2, [r3, #0]

    /* Enable the MAC reception */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	681a      	ldr	r2, [r3, #0]
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	f042 0204 	orr.w	r2, r2, #4
 8001456:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8001460:	2001      	movs	r0, #1
 8001462:	f7ff fe17 	bl	8001094 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	68fa      	ldr	r2, [r7, #12]
 800146c:	601a      	str	r2, [r3, #0]

    /* Flush Transmit FIFO */
    ETH_FlushTransmitFIFO(heth);
 800146e:	6878      	ldr	r0, [r7, #4]
 8001470:	f000 fc36 	bl	8001ce0 <ETH_FlushTransmitFIFO>

    /* Enable the DMA transmission */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800147c:	699b      	ldr	r3, [r3, #24]
 800147e:	687a      	ldr	r2, [r7, #4]
 8001480:	6812      	ldr	r2, [r2, #0]
 8001482:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001486:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800148a:	6193      	str	r3, [r2, #24]

    /* Enable the DMA reception */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001494:	699b      	ldr	r3, [r3, #24]
 8001496:	687a      	ldr	r2, [r7, #4]
 8001498:	6812      	ldr	r2, [r2, #0]
 800149a:	f043 0302 	orr.w	r3, r3, #2
 800149e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80014a2:	6193      	str	r3, [r2, #24]

    heth->gState = HAL_ETH_STATE_STARTED;
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	2223      	movs	r2, #35	; 0x23
 80014a8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 80014ac:	2300      	movs	r3, #0
 80014ae:	e000      	b.n	80014b2 <HAL_ETH_Start+0xb6>
  }
  else
  {
    return HAL_ERROR;
 80014b0:	2301      	movs	r3, #1
  }
}
 80014b2:	4618      	mov	r0, r3
 80014b4:	3710      	adds	r7, #16
 80014b6:	46bd      	mov	sp, r7
 80014b8:	bd80      	pop	{r7, pc}

080014ba <HAL_ETH_Stop>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop(ETH_HandleTypeDef *heth)
{
 80014ba:	b580      	push	{r7, lr}
 80014bc:	b084      	sub	sp, #16
 80014be:	af00      	add	r7, sp, #0
 80014c0:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1;

  if (heth->gState == HAL_ETH_STATE_STARTED)
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80014c8:	2b23      	cmp	r3, #35	; 0x23
 80014ca:	d14a      	bne.n	8001562 <HAL_ETH_Stop+0xa8>
  {
    /* Set the ETH peripheral state to BUSY */
    heth->gState = HAL_ETH_STATE_BUSY;
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	2223      	movs	r2, #35	; 0x23
 80014d0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    /* Disable the DMA transmission */
    CLEAR_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80014dc:	699b      	ldr	r3, [r3, #24]
 80014de:	687a      	ldr	r2, [r7, #4]
 80014e0:	6812      	ldr	r2, [r2, #0]
 80014e2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80014e6:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80014ea:	6193      	str	r3, [r2, #24]

    /* Disable the DMA reception */
    CLEAR_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80014f4:	699b      	ldr	r3, [r3, #24]
 80014f6:	687a      	ldr	r2, [r7, #4]
 80014f8:	6812      	ldr	r2, [r2, #0]
 80014fa:	f023 0302 	bic.w	r3, r3, #2
 80014fe:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001502:	6193      	str	r3, [r2, #24]

    /* Disable the MAC reception */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	681a      	ldr	r2, [r3, #0]
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	f022 0204 	bic.w	r2, r2, #4
 8001512:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 800151c:	2001      	movs	r0, #1
 800151e:	f7ff fdb9 	bl	8001094 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	68fa      	ldr	r2, [r7, #12]
 8001528:	601a      	str	r2, [r3, #0]

    /* Flush Transmit FIFO */
    ETH_FlushTransmitFIFO(heth);
 800152a:	6878      	ldr	r0, [r7, #4]
 800152c:	f000 fbd8 	bl	8001ce0 <ETH_FlushTransmitFIFO>

    /* Disable the MAC transmission */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	681a      	ldr	r2, [r3, #0]
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	f022 0208 	bic.w	r2, r2, #8
 800153e:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8001548:	2001      	movs	r0, #1
 800154a:	f7ff fda3 	bl	8001094 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	68fa      	ldr	r2, [r7, #12]
 8001554:	601a      	str	r2, [r3, #0]

    heth->gState = HAL_ETH_STATE_READY;
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	2210      	movs	r2, #16
 800155a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Return function status */
    return HAL_OK;
 800155e:	2300      	movs	r3, #0
 8001560:	e000      	b.n	8001564 <HAL_ETH_Stop+0xaa>
  }
  else
  {
    return HAL_ERROR;
 8001562:	2301      	movs	r3, #1
  }
}
 8001564:	4618      	mov	r0, r3
 8001566:	3710      	adds	r7, #16
 8001568:	46bd      	mov	sp, r7
 800156a:	bd80      	pop	{r7, pc}

0800156c <HAL_ETH_Transmit>:
  * @param  pTxConfig: Hold the configuration of packet to be transmitted
  * @param  Timeout: timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Transmit(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig, uint32_t Timeout)
{
 800156c:	b580      	push	{r7, lr}
 800156e:	b086      	sub	sp, #24
 8001570:	af00      	add	r7, sp, #0
 8001572:	60f8      	str	r0, [r7, #12]
 8001574:	60b9      	str	r1, [r7, #8]
 8001576:	607a      	str	r2, [r7, #4]
  uint32_t tickstart;
  ETH_DMADescTypeDef *dmatxdesc;

  if (pTxConfig == NULL)
 8001578:	68bb      	ldr	r3, [r7, #8]
 800157a:	2b00      	cmp	r3, #0
 800157c:	d109      	bne.n	8001592 <HAL_ETH_Transmit+0x26>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 800157e:	68fb      	ldr	r3, [r7, #12]
 8001580:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001584:	f043 0201 	orr.w	r2, r3, #1
 8001588:	68fb      	ldr	r3, [r7, #12]
 800158a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    return HAL_ERROR;
 800158e:	2301      	movs	r3, #1
 8001590:	e07c      	b.n	800168c <HAL_ETH_Transmit+0x120>
  }

  if (heth->gState == HAL_ETH_STATE_STARTED)
 8001592:	68fb      	ldr	r3, [r7, #12]
 8001594:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001598:	2b23      	cmp	r3, #35	; 0x23
 800159a:	d176      	bne.n	800168a <HAL_ETH_Transmit+0x11e>
  {
    /* Config DMA Tx descriptor by Tx Packet info */
    if (ETH_Prepare_Tx_Descriptors(heth, pTxConfig, 0) != HAL_ETH_ERROR_NONE)
 800159c:	2200      	movs	r2, #0
 800159e:	68b9      	ldr	r1, [r7, #8]
 80015a0:	68f8      	ldr	r0, [r7, #12]
 80015a2:	f000 fe6d 	bl	8002280 <ETH_Prepare_Tx_Descriptors>
 80015a6:	4603      	mov	r3, r0
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	d009      	beq.n	80015c0 <HAL_ETH_Transmit+0x54>
    {
      /* Set the ETH error code */
      heth->ErrorCode |= HAL_ETH_ERROR_BUSY;
 80015ac:	68fb      	ldr	r3, [r7, #12]
 80015ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80015b2:	f043 0202 	orr.w	r2, r3, #2
 80015b6:	68fb      	ldr	r3, [r7, #12]
 80015b8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      return HAL_ERROR;
 80015bc:	2301      	movs	r3, #1
 80015be:	e065      	b.n	800168c <HAL_ETH_Transmit+0x120>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80015c0:	f3bf 8f4f 	dsb	sy
}
 80015c4:	bf00      	nop
    }

    /* Ensure completion of descriptor preparation before transmission start */
    __DSB();

    dmatxdesc = (ETH_DMADescTypeDef *)(&heth->TxDescList)->TxDesc[heth->TxDescList.CurTxDesc];
 80015c6:	68fb      	ldr	r3, [r7, #12]
 80015c8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80015ca:	68fb      	ldr	r3, [r7, #12]
 80015cc:	3206      	adds	r2, #6
 80015ce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80015d2:	617b      	str	r3, [r7, #20]

    /* Incr current tx desc index */
    INCR_TX_DESC_INDEX(heth->TxDescList.CurTxDesc, 1U);
 80015d4:	68fb      	ldr	r3, [r7, #12]
 80015d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015d8:	1c5a      	adds	r2, r3, #1
 80015da:	68fb      	ldr	r3, [r7, #12]
 80015dc:	629a      	str	r2, [r3, #40]	; 0x28
 80015de:	68fb      	ldr	r3, [r7, #12]
 80015e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015e2:	2b03      	cmp	r3, #3
 80015e4:	d904      	bls.n	80015f0 <HAL_ETH_Transmit+0x84>
 80015e6:	68fb      	ldr	r3, [r7, #12]
 80015e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015ea:	1f1a      	subs	r2, r3, #4
 80015ec:	68fb      	ldr	r3, [r7, #12]
 80015ee:	629a      	str	r2, [r3, #40]	; 0x28

    /* Start transmission */
    /* issue a poll command to Tx DMA by writing address of next immediate free descriptor */
    WRITE_REG(heth->Instance->DMATPDR, (uint32_t)(heth->TxDescList.TxDesc[heth->TxDescList.CurTxDesc]));
 80015f0:	68fb      	ldr	r3, [r7, #12]
 80015f2:	6a99      	ldr	r1, [r3, #40]	; 0x28
 80015f4:	68fb      	ldr	r3, [r7, #12]
 80015f6:	681a      	ldr	r2, [r3, #0]
 80015f8:	68fb      	ldr	r3, [r7, #12]
 80015fa:	3106      	adds	r1, #6
 80015fc:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8001600:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001604:	6053      	str	r3, [r2, #4]

    tickstart = HAL_GetTick();
 8001606:	f7ff fd39 	bl	800107c <HAL_GetTick>
 800160a:	6138      	str	r0, [r7, #16]

    /* Wait for data to be transmitted or timeout occurred */
    while ((dmatxdesc->DESC0 & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 800160c:	e037      	b.n	800167e <HAL_ETH_Transmit+0x112>
    {
      if ((heth->Instance->DMASR & ETH_DMASR_FBES) != (uint32_t)RESET)
 800160e:	68fb      	ldr	r3, [r7, #12]
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001616:	695b      	ldr	r3, [r3, #20]
 8001618:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800161c:	2b00      	cmp	r3, #0
 800161e:	d011      	beq.n	8001644 <HAL_ETH_Transmit+0xd8>
      {
        heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 8001620:	68fb      	ldr	r3, [r7, #12]
 8001622:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001626:	f043 0208 	orr.w	r2, r3, #8
 800162a:	68fb      	ldr	r3, [r7, #12]
 800162c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        heth->DMAErrorCode = heth->Instance->DMASR;
 8001630:	68fb      	ldr	r3, [r7, #12]
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001638:	695a      	ldr	r2, [r3, #20]
 800163a:	68fb      	ldr	r3, [r7, #12]
 800163c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        /* Return function status */
        return HAL_ERROR;
 8001640:	2301      	movs	r3, #1
 8001642:	e023      	b.n	800168c <HAL_ETH_Transmit+0x120>
      }

      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	f1b3 3fff 	cmp.w	r3, #4294967295
 800164a:	d018      	beq.n	800167e <HAL_ETH_Transmit+0x112>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800164c:	f7ff fd16 	bl	800107c <HAL_GetTick>
 8001650:	4602      	mov	r2, r0
 8001652:	693b      	ldr	r3, [r7, #16]
 8001654:	1ad3      	subs	r3, r2, r3
 8001656:	687a      	ldr	r2, [r7, #4]
 8001658:	429a      	cmp	r2, r3
 800165a:	d302      	bcc.n	8001662 <HAL_ETH_Transmit+0xf6>
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	2b00      	cmp	r3, #0
 8001660:	d10d      	bne.n	800167e <HAL_ETH_Transmit+0x112>
        {
          heth->ErrorCode |= HAL_ETH_ERROR_TIMEOUT;
 8001662:	68fb      	ldr	r3, [r7, #12]
 8001664:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001668:	f043 0204 	orr.w	r2, r3, #4
 800166c:	68fb      	ldr	r3, [r7, #12]
 800166e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          /* Clear TX descriptor so that we can proceed */
          dmatxdesc->DESC0 = (ETH_DMATXDESC_FS | ETH_DMATXDESC_LS);
 8001672:	697b      	ldr	r3, [r7, #20]
 8001674:	f04f 5240 	mov.w	r2, #805306368	; 0x30000000
 8001678:	601a      	str	r2, [r3, #0]
          return HAL_ERROR;
 800167a:	2301      	movs	r3, #1
 800167c:	e006      	b.n	800168c <HAL_ETH_Transmit+0x120>
    while ((dmatxdesc->DESC0 & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 800167e:	697b      	ldr	r3, [r7, #20]
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	2b00      	cmp	r3, #0
 8001684:	dbc3      	blt.n	800160e <HAL_ETH_Transmit+0xa2>
        }
      }
    }

    /* Return function status */
    return HAL_OK;
 8001686:	2300      	movs	r3, #0
 8001688:	e000      	b.n	800168c <HAL_ETH_Transmit+0x120>
  }
  else
  {
    return HAL_ERROR;
 800168a:	2301      	movs	r3, #1
  }
}
 800168c:	4618      	mov	r0, r3
 800168e:	3718      	adds	r7, #24
 8001690:	46bd      	mov	sp, r7
 8001692:	bd80      	pop	{r7, pc}

08001694 <HAL_ETH_ReadData>:
  *         the configuration information for ETHERNET module
  * @param  pAppBuff: Pointer to an application buffer to receive the packet.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadData(ETH_HandleTypeDef *heth, void **pAppBuff)
{
 8001694:	b580      	push	{r7, lr}
 8001696:	b088      	sub	sp, #32
 8001698:	af00      	add	r7, sp, #0
 800169a:	6078      	str	r0, [r7, #4]
 800169c:	6039      	str	r1, [r7, #0]
  uint32_t descidx;
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t desccnt = 0U;
 800169e:	2300      	movs	r3, #0
 80016a0:	617b      	str	r3, [r7, #20]
  uint32_t desccntmax;
  uint32_t bufflength;
  uint8_t rxdataready = 0U;
 80016a2:	2300      	movs	r3, #0
 80016a4:	73fb      	strb	r3, [r7, #15]


  if (pAppBuff == NULL)
 80016a6:	683b      	ldr	r3, [r7, #0]
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d109      	bne.n	80016c0 <HAL_ETH_ReadData+0x2c>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80016b2:	f043 0201 	orr.w	r2, r3, #1
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    return HAL_ERROR;
 80016bc:	2301      	movs	r3, #1
 80016be:	e0a8      	b.n	8001812 <HAL_ETH_ReadData+0x17e>
  }

  if (heth->gState != HAL_ETH_STATE_STARTED)
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80016c6:	2b23      	cmp	r3, #35	; 0x23
 80016c8:	d001      	beq.n	80016ce <HAL_ETH_ReadData+0x3a>
  {
    return HAL_ERROR;
 80016ca:	2301      	movs	r3, #1
 80016cc:	e0a1      	b.n	8001812 <HAL_ETH_ReadData+0x17e>
  }

  descidx = heth->RxDescList.RxDescIdx;
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80016d2:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	69fa      	ldr	r2, [r7, #28]
 80016d8:	3212      	adds	r2, #18
 80016da:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80016de:	61bb      	str	r3, [r7, #24]
  desccntmax = ETH_RX_DESC_CNT - heth->RxDescList.RxBuildDescCnt;
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80016e4:	f1c3 0304 	rsb	r3, r3, #4
 80016e8:	60bb      	str	r3, [r7, #8]

  /* Check if descriptor is not owned by DMA */
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 80016ea:	e06a      	b.n	80017c2 <HAL_ETH_ReadData+0x12e>
         && (rxdataready == 0U))
  {
    if (READ_BIT(dmarxdesc->DESC0,  ETH_DMARXDESC_LS)  != (uint32_t)RESET)
 80016ec:	69bb      	ldr	r3, [r7, #24]
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	d007      	beq.n	8001708 <HAL_ETH_ReadData+0x74>
    {
      /* Get timestamp high */
      heth->RxDescList.TimeStamp.TimeStampHigh = dmarxdesc->DESC6;
 80016f8:	69bb      	ldr	r3, [r7, #24]
 80016fa:	699a      	ldr	r2, [r3, #24]
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	679a      	str	r2, [r3, #120]	; 0x78
      /* Get timestamp low */
      heth->RxDescList.TimeStamp.TimeStampLow  = dmarxdesc->DESC7;
 8001700:	69bb      	ldr	r3, [r7, #24]
 8001702:	69da      	ldr	r2, [r3, #28]
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	675a      	str	r2, [r3, #116]	; 0x74
    }
    if ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_FS) != (uint32_t)RESET) || (heth->RxDescList.pRxStart != NULL))
 8001708:	69bb      	ldr	r3, [r7, #24]
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001710:	2b00      	cmp	r3, #0
 8001712:	d103      	bne.n	800171c <HAL_ETH_ReadData+0x88>
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8001718:	2b00      	cmp	r3, #0
 800171a:	d040      	beq.n	800179e <HAL_ETH_ReadData+0x10a>
    {
      /* Check first descriptor */
      if (READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_FS) != (uint32_t)RESET)
 800171c:	69bb      	ldr	r3, [r7, #24]
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001724:	2b00      	cmp	r3, #0
 8001726:	d005      	beq.n	8001734 <HAL_ETH_ReadData+0xa0>
      {
        heth->RxDescList.RxDescCnt = 0;
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	2200      	movs	r2, #0
 800172c:	661a      	str	r2, [r3, #96]	; 0x60
        heth->RxDescList.RxDataLength = 0;
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	2200      	movs	r2, #0
 8001732:	665a      	str	r2, [r3, #100]	; 0x64
      }

      /* Check if last descriptor */
      bufflength = heth->Init.RxBuffLen;
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	695b      	ldr	r3, [r3, #20]
 8001738:	613b      	str	r3, [r7, #16]
      if (READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_LS) != (uint32_t)RESET)
 800173a:	69bb      	ldr	r3, [r7, #24]
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001742:	2b00      	cmp	r3, #0
 8001744:	d00c      	beq.n	8001760 <HAL_ETH_ReadData+0xcc>
      {
        /* Get the Frame Length of the received packet: substruct 4 bytes of the CRC */
        bufflength = ((dmarxdesc->DESC0 & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT) - 4U;
 8001746:	69bb      	ldr	r3, [r7, #24]
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	0c1b      	lsrs	r3, r3, #16
 800174c:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8001750:	3b04      	subs	r3, #4
 8001752:	613b      	str	r3, [r7, #16]

        /* Save Last descriptor index */
        heth->RxDescList.pRxLastRxDesc = dmarxdesc->DESC0;
 8001754:	69bb      	ldr	r3, [r7, #24]
 8001756:	681a      	ldr	r2, [r3, #0]
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	671a      	str	r2, [r3, #112]	; 0x70

        /* Packet ready */
        rxdataready = 1;
 800175c:	2301      	movs	r3, #1
 800175e:	73fb      	strb	r3, [r7, #15]
      }

      /* Link data */
      WRITE_REG(dmarxdesc->BackupAddr0, dmarxdesc->DESC2);
 8001760:	69bb      	ldr	r3, [r7, #24]
 8001762:	689a      	ldr	r2, [r3, #8]
 8001764:	69bb      	ldr	r3, [r7, #24]
 8001766:	621a      	str	r2, [r3, #32]
      /*Call registered Link callback*/
      heth->rxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
                           (uint8_t *)dmarxdesc->BackupAddr0, bufflength);
#else
      /* Link callback */
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	f103 007c 	add.w	r0, r3, #124	; 0x7c
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	f103 0180 	add.w	r1, r3, #128	; 0x80
                             (uint8_t *)dmarxdesc->BackupAddr0, (uint16_t) bufflength);
 8001774:	69bb      	ldr	r3, [r7, #24]
 8001776:	6a1b      	ldr	r3, [r3, #32]
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 8001778:	461a      	mov	r2, r3
 800177a:	693b      	ldr	r3, [r7, #16]
 800177c:	b29b      	uxth	r3, r3
 800177e:	f002 fd9d 	bl	80042bc <HAL_ETH_RxLinkCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      heth->RxDescList.RxDescCnt++;
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001786:	1c5a      	adds	r2, r3, #1
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	661a      	str	r2, [r3, #96]	; 0x60
      heth->RxDescList.RxDataLength += bufflength;
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8001790:	693b      	ldr	r3, [r7, #16]
 8001792:	441a      	add	r2, r3
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	665a      	str	r2, [r3, #100]	; 0x64

      /* Clear buffer pointer */
      dmarxdesc->BackupAddr0 = 0;
 8001798:	69bb      	ldr	r3, [r7, #24]
 800179a:	2200      	movs	r2, #0
 800179c:	621a      	str	r2, [r3, #32]
    }

    /* Increment current rx descriptor index */
    INCR_RX_DESC_INDEX(descidx, 1U);
 800179e:	69fb      	ldr	r3, [r7, #28]
 80017a0:	3301      	adds	r3, #1
 80017a2:	61fb      	str	r3, [r7, #28]
 80017a4:	69fb      	ldr	r3, [r7, #28]
 80017a6:	2b03      	cmp	r3, #3
 80017a8:	d902      	bls.n	80017b0 <HAL_ETH_ReadData+0x11c>
 80017aa:	69fb      	ldr	r3, [r7, #28]
 80017ac:	3b04      	subs	r3, #4
 80017ae:	61fb      	str	r3, [r7, #28]
    /* Get current descriptor address */
    dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	69fa      	ldr	r2, [r7, #28]
 80017b4:	3212      	adds	r2, #18
 80017b6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80017ba:	61bb      	str	r3, [r7, #24]
    desccnt++;
 80017bc:	697b      	ldr	r3, [r7, #20]
 80017be:	3301      	adds	r3, #1
 80017c0:	617b      	str	r3, [r7, #20]
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 80017c2:	69bb      	ldr	r3, [r7, #24]
 80017c4:	681b      	ldr	r3, [r3, #0]
         && (rxdataready == 0U))
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	db06      	blt.n	80017d8 <HAL_ETH_ReadData+0x144>
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 80017ca:	697a      	ldr	r2, [r7, #20]
 80017cc:	68bb      	ldr	r3, [r7, #8]
 80017ce:	429a      	cmp	r2, r3
 80017d0:	d202      	bcs.n	80017d8 <HAL_ETH_ReadData+0x144>
         && (rxdataready == 0U))
 80017d2:	7bfb      	ldrb	r3, [r7, #15]
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	d089      	beq.n	80016ec <HAL_ETH_ReadData+0x58>
  }

  heth->RxDescList.RxBuildDescCnt += desccnt;
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80017dc:	697b      	ldr	r3, [r7, #20]
 80017de:	441a      	add	r2, r3
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	66da      	str	r2, [r3, #108]	; 0x6c
  if ((heth->RxDescList.RxBuildDescCnt) != 0U)
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d002      	beq.n	80017f2 <HAL_ETH_ReadData+0x15e>
  {
    /* Update Descriptors */
    ETH_UpdateDescriptor(heth);
 80017ec:	6878      	ldr	r0, [r7, #4]
 80017ee:	f000 f815 	bl	800181c <ETH_UpdateDescriptor>
  }

  heth->RxDescList.RxDescIdx = descidx;
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	69fa      	ldr	r2, [r7, #28]
 80017f6:	65da      	str	r2, [r3, #92]	; 0x5c

  if (rxdataready == 1U)
 80017f8:	7bfb      	ldrb	r3, [r7, #15]
 80017fa:	2b01      	cmp	r3, #1
 80017fc:	d108      	bne.n	8001810 <HAL_ETH_ReadData+0x17c>
  {
    /* Return received packet */
    *pAppBuff = heth->RxDescList.pRxStart;
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8001802:	683b      	ldr	r3, [r7, #0]
 8001804:	601a      	str	r2, [r3, #0]
    /* Reset first element */
    heth->RxDescList.pRxStart = NULL;
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	2200      	movs	r2, #0
 800180a:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 800180c:	2300      	movs	r3, #0
 800180e:	e000      	b.n	8001812 <HAL_ETH_ReadData+0x17e>
  }

  /* Packet not ready */
  return HAL_ERROR;
 8001810:	2301      	movs	r3, #1
}
 8001812:	4618      	mov	r0, r3
 8001814:	3720      	adds	r7, #32
 8001816:	46bd      	mov	sp, r7
 8001818:	bd80      	pop	{r7, pc}
	...

0800181c <ETH_UpdateDescriptor>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_UpdateDescriptor(ETH_HandleTypeDef *heth)
{
 800181c:	b580      	push	{r7, lr}
 800181e:	b088      	sub	sp, #32
 8001820:	af00      	add	r7, sp, #0
 8001822:	6078      	str	r0, [r7, #4]
  uint32_t descidx;
  uint32_t desccount;
  ETH_DMADescTypeDef *dmarxdesc;
  uint8_t *buff = NULL;
 8001824:	2300      	movs	r3, #0
 8001826:	60fb      	str	r3, [r7, #12]
  uint8_t allocStatus = 1U;
 8001828:	2301      	movs	r3, #1
 800182a:	74fb      	strb	r3, [r7, #19]

  descidx = heth->RxDescList.RxBuildDescIdx;
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001830:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	69fa      	ldr	r2, [r7, #28]
 8001836:	3212      	adds	r2, #18
 8001838:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800183c:	617b      	str	r3, [r7, #20]
  desccount = heth->RxDescList.RxBuildDescCnt;
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001842:	61bb      	str	r3, [r7, #24]

  while ((desccount > 0U) && (allocStatus != 0U))
 8001844:	e040      	b.n	80018c8 <ETH_UpdateDescriptor+0xac>
  {
    /* Check if a buffer's attached the descriptor */
    if (READ_REG(dmarxdesc->BackupAddr0) == 0U)
 8001846:	697b      	ldr	r3, [r7, #20]
 8001848:	6a1b      	ldr	r3, [r3, #32]
 800184a:	2b00      	cmp	r3, #0
 800184c:	d112      	bne.n	8001874 <ETH_UpdateDescriptor+0x58>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Allocate callback*/
      heth->rxAllocateCallback(&buff);
#else
      /* Allocate callback */
      HAL_ETH_RxAllocateCallback(&buff);
 800184e:	f107 030c 	add.w	r3, r7, #12
 8001852:	4618      	mov	r0, r3
 8001854:	f002 fd02 	bl	800425c <HAL_ETH_RxAllocateCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      if (buff == NULL)
 8001858:	68fb      	ldr	r3, [r7, #12]
 800185a:	2b00      	cmp	r3, #0
 800185c:	d102      	bne.n	8001864 <ETH_UpdateDescriptor+0x48>
      {
        allocStatus = 0U;
 800185e:	2300      	movs	r3, #0
 8001860:	74fb      	strb	r3, [r7, #19]
 8001862:	e007      	b.n	8001874 <ETH_UpdateDescriptor+0x58>
      }
      else
      {
        WRITE_REG(dmarxdesc->BackupAddr0, (uint32_t)buff);
 8001864:	68fb      	ldr	r3, [r7, #12]
 8001866:	461a      	mov	r2, r3
 8001868:	697b      	ldr	r3, [r7, #20]
 800186a:	621a      	str	r2, [r3, #32]
        WRITE_REG(dmarxdesc->DESC2, (uint32_t)buff);
 800186c:	68fb      	ldr	r3, [r7, #12]
 800186e:	461a      	mov	r2, r3
 8001870:	697b      	ldr	r3, [r7, #20]
 8001872:	609a      	str	r2, [r3, #8]
      }
    }

    if (allocStatus != 0U)
 8001874:	7cfb      	ldrb	r3, [r7, #19]
 8001876:	2b00      	cmp	r3, #0
 8001878:	d026      	beq.n	80018c8 <ETH_UpdateDescriptor+0xac>
    {
      if (heth->RxDescList.ItMode == 0U)
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800187e:	2b00      	cmp	r3, #0
 8001880:	d103      	bne.n	800188a <ETH_UpdateDescriptor+0x6e>
      {
        WRITE_REG(dmarxdesc->DESC1, ETH_DMARXDESC_DIC | ETH_RX_BUF_SIZE | ETH_DMARXDESC_RCH);
 8001882:	697b      	ldr	r3, [r7, #20]
 8001884:	4a1e      	ldr	r2, [pc, #120]	; (8001900 <ETH_UpdateDescriptor+0xe4>)
 8001886:	605a      	str	r2, [r3, #4]
 8001888:	e003      	b.n	8001892 <ETH_UpdateDescriptor+0x76>
      }
      else
      {
        WRITE_REG(dmarxdesc->DESC1, ETH_RX_BUF_SIZE | ETH_DMARXDESC_RCH);
 800188a:	697b      	ldr	r3, [r7, #20]
 800188c:	f44f 428c 	mov.w	r2, #17920	; 0x4600
 8001890:	605a      	str	r2, [r3, #4]
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8001892:	f3bf 8f5f 	dmb	sy
}
 8001896:	bf00      	nop
         is fully performed.
         The __DMB() instruction is added to avoid any potential compiler optimization that
         may lead to abnormal behavior. */
      __DMB();

      SET_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN);
 8001898:	697b      	ldr	r3, [r7, #20]
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80018a0:	697b      	ldr	r3, [r7, #20]
 80018a2:	601a      	str	r2, [r3, #0]

      /* Increment current rx descriptor index */
      INCR_RX_DESC_INDEX(descidx, 1U);
 80018a4:	69fb      	ldr	r3, [r7, #28]
 80018a6:	3301      	adds	r3, #1
 80018a8:	61fb      	str	r3, [r7, #28]
 80018aa:	69fb      	ldr	r3, [r7, #28]
 80018ac:	2b03      	cmp	r3, #3
 80018ae:	d902      	bls.n	80018b6 <ETH_UpdateDescriptor+0x9a>
 80018b0:	69fb      	ldr	r3, [r7, #28]
 80018b2:	3b04      	subs	r3, #4
 80018b4:	61fb      	str	r3, [r7, #28]
      /* Get current descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	69fa      	ldr	r2, [r7, #28]
 80018ba:	3212      	adds	r2, #18
 80018bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80018c0:	617b      	str	r3, [r7, #20]
      desccount--;
 80018c2:	69bb      	ldr	r3, [r7, #24]
 80018c4:	3b01      	subs	r3, #1
 80018c6:	61bb      	str	r3, [r7, #24]
  while ((desccount > 0U) && (allocStatus != 0U))
 80018c8:	69bb      	ldr	r3, [r7, #24]
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d002      	beq.n	80018d4 <ETH_UpdateDescriptor+0xb8>
 80018ce:	7cfb      	ldrb	r3, [r7, #19]
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	d1b8      	bne.n	8001846 <ETH_UpdateDescriptor+0x2a>
    }
  }

  if (heth->RxDescList.RxBuildDescCnt != desccount)
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80018d8:	69ba      	ldr	r2, [r7, #24]
 80018da:	429a      	cmp	r2, r3
 80018dc:	d00c      	beq.n	80018f8 <ETH_UpdateDescriptor+0xdc>
  {
    /* Set the Tail pointer address */
    WRITE_REG(heth->Instance->DMARPDR, 0);
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80018e6:	461a      	mov	r2, r3
 80018e8:	2300      	movs	r3, #0
 80018ea:	6093      	str	r3, [r2, #8]

    heth->RxDescList.RxBuildDescIdx = descidx;
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	69fa      	ldr	r2, [r7, #28]
 80018f0:	669a      	str	r2, [r3, #104]	; 0x68
    heth->RxDescList.RxBuildDescCnt = desccount;
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	69ba      	ldr	r2, [r7, #24]
 80018f6:	66da      	str	r2, [r3, #108]	; 0x6c
  }
}
 80018f8:	bf00      	nop
 80018fa:	3720      	adds	r7, #32
 80018fc:	46bd      	mov	sp, r7
 80018fe:	bd80      	pop	{r7, pc}
 8001900:	80004600 	.word	0x80004600

08001904 <HAL_ETH_ReadPHYRegister>:
  * @param pRegValue: parameter to hold read value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                          uint32_t *pRegValue)
{
 8001904:	b580      	push	{r7, lr}
 8001906:	b086      	sub	sp, #24
 8001908:	af00      	add	r7, sp, #0
 800190a:	60f8      	str	r0, [r7, #12]
 800190c:	60b9      	str	r1, [r7, #8]
 800190e:	607a      	str	r2, [r7, #4]
 8001910:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg1;
  uint32_t tickstart;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 8001912:	68fb      	ldr	r3, [r7, #12]
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	691b      	ldr	r3, [r3, #16]
 8001918:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 800191a:	697b      	ldr	r3, [r7, #20]
 800191c:	f003 031c 	and.w	r3, r3, #28
 8001920:	617b      	str	r3, [r7, #20]

  /* Prepare the MII address register value */
  tmpreg1 |= ((PHYAddr << 11U) & ETH_MACMIIAR_PA);                        /* Set the PHY device address   */
 8001922:	68bb      	ldr	r3, [r7, #8]
 8001924:	02db      	lsls	r3, r3, #11
 8001926:	b29b      	uxth	r3, r3
 8001928:	697a      	ldr	r2, [r7, #20]
 800192a:	4313      	orrs	r3, r2
 800192c:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);                /* Set the PHY register address */
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	019b      	lsls	r3, r3, #6
 8001932:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8001936:	697a      	ldr	r2, [r7, #20]
 8001938:	4313      	orrs	r3, r2
 800193a:	617b      	str	r3, [r7, #20]
  tmpreg1 &= ~ETH_MACMIIAR_MW;                                            /* Set the read mode            */
 800193c:	697b      	ldr	r3, [r7, #20]
 800193e:	f023 0302 	bic.w	r3, r3, #2
 8001942:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                             /* Set the MII Busy bit         */
 8001944:	697b      	ldr	r3, [r7, #20]
 8001946:	f043 0301 	orr.w	r3, r3, #1
 800194a:	617b      	str	r3, [r7, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 800194c:	68fb      	ldr	r3, [r7, #12]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	697a      	ldr	r2, [r7, #20]
 8001952:	611a      	str	r2, [r3, #16]


  tickstart = HAL_GetTick();
 8001954:	f7ff fb92 	bl	800107c <HAL_GetTick>
 8001958:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 800195a:	e00d      	b.n	8001978 <HAL_ETH_ReadPHYRegister+0x74>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_READ_TO)
 800195c:	f7ff fb8e 	bl	800107c <HAL_GetTick>
 8001960:	4602      	mov	r2, r0
 8001962:	693b      	ldr	r3, [r7, #16]
 8001964:	1ad3      	subs	r3, r2, r3
 8001966:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800196a:	d301      	bcc.n	8001970 <HAL_ETH_ReadPHYRegister+0x6c>
    {
      return HAL_ERROR;
 800196c:	2301      	movs	r3, #1
 800196e:	e010      	b.n	8001992 <HAL_ETH_ReadPHYRegister+0x8e>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 8001970:	68fb      	ldr	r3, [r7, #12]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	691b      	ldr	r3, [r3, #16]
 8001976:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001978:	697b      	ldr	r3, [r7, #20]
 800197a:	f003 0301 	and.w	r3, r3, #1
 800197e:	2b00      	cmp	r3, #0
 8001980:	d1ec      	bne.n	800195c <HAL_ETH_ReadPHYRegister+0x58>
  }

  /* Get MACMIIDR value */
  *pRegValue = (uint16_t)(heth->Instance->MACMIIDR);
 8001982:	68fb      	ldr	r3, [r7, #12]
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	695b      	ldr	r3, [r3, #20]
 8001988:	b29b      	uxth	r3, r3
 800198a:	461a      	mov	r2, r3
 800198c:	683b      	ldr	r3, [r7, #0]
 800198e:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8001990:	2300      	movs	r3, #0
}
 8001992:	4618      	mov	r0, r3
 8001994:	3718      	adds	r7, #24
 8001996:	46bd      	mov	sp, r7
 8001998:	bd80      	pop	{r7, pc}

0800199a <HAL_ETH_WritePHYRegister>:
  * @param  RegValue: the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                           uint32_t RegValue)
{
 800199a:	b580      	push	{r7, lr}
 800199c:	b086      	sub	sp, #24
 800199e:	af00      	add	r7, sp, #0
 80019a0:	60f8      	str	r0, [r7, #12]
 80019a2:	60b9      	str	r1, [r7, #8]
 80019a4:	607a      	str	r2, [r7, #4]
 80019a6:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg1;
  uint32_t tickstart;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 80019a8:	68fb      	ldr	r3, [r7, #12]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	691b      	ldr	r3, [r3, #16]
 80019ae:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 80019b0:	697b      	ldr	r3, [r7, #20]
 80019b2:	f003 031c 	and.w	r3, r3, #28
 80019b6:	617b      	str	r3, [r7, #20]

  /* Prepare the MII register address value */
  tmpreg1 |= ((PHYAddr << 11U) & ETH_MACMIIAR_PA);                      /* Set the PHY device address */
 80019b8:	68bb      	ldr	r3, [r7, #8]
 80019ba:	02db      	lsls	r3, r3, #11
 80019bc:	b29b      	uxth	r3, r3
 80019be:	697a      	ldr	r2, [r7, #20]
 80019c0:	4313      	orrs	r3, r2
 80019c2:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);              /* Set the PHY register address */
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	019b      	lsls	r3, r3, #6
 80019c8:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 80019cc:	697a      	ldr	r2, [r7, #20]
 80019ce:	4313      	orrs	r3, r2
 80019d0:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MW;                                           /* Set the write mode */
 80019d2:	697b      	ldr	r3, [r7, #20]
 80019d4:	f043 0302 	orr.w	r3, r3, #2
 80019d8:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                           /* Set the MII Busy bit */
 80019da:	697b      	ldr	r3, [r7, #20]
 80019dc:	f043 0301 	orr.w	r3, r3, #1
 80019e0:	617b      	str	r3, [r7, #20]

  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 80019e2:	683b      	ldr	r3, [r7, #0]
 80019e4:	b29a      	uxth	r2, r3
 80019e6:	68fb      	ldr	r3, [r7, #12]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	615a      	str	r2, [r3, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 80019ec:	68fb      	ldr	r3, [r7, #12]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	697a      	ldr	r2, [r7, #20]
 80019f2:	611a      	str	r2, [r3, #16]

  /* Get tick */
  tickstart = HAL_GetTick();
 80019f4:	f7ff fb42 	bl	800107c <HAL_GetTick>
 80019f8:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 80019fa:	e00d      	b.n	8001a18 <HAL_ETH_WritePHYRegister+0x7e>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_WRITE_TO)
 80019fc:	f7ff fb3e 	bl	800107c <HAL_GetTick>
 8001a00:	4602      	mov	r2, r0
 8001a02:	693b      	ldr	r3, [r7, #16]
 8001a04:	1ad3      	subs	r3, r2, r3
 8001a06:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001a0a:	d301      	bcc.n	8001a10 <HAL_ETH_WritePHYRegister+0x76>
    {
      return HAL_ERROR;
 8001a0c:	2301      	movs	r3, #1
 8001a0e:	e009      	b.n	8001a24 <HAL_ETH_WritePHYRegister+0x8a>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 8001a10:	68fb      	ldr	r3, [r7, #12]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	691b      	ldr	r3, [r3, #16]
 8001a16:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001a18:	697b      	ldr	r3, [r7, #20]
 8001a1a:	f003 0301 	and.w	r3, r3, #1
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d1ec      	bne.n	80019fc <HAL_ETH_WritePHYRegister+0x62>
  }

  return HAL_OK;
 8001a22:	2300      	movs	r3, #0
}
 8001a24:	4618      	mov	r0, r3
 8001a26:	3718      	adds	r7, #24
 8001a28:	46bd      	mov	sp, r7
 8001a2a:	bd80      	pop	{r7, pc}

08001a2c <HAL_ETH_GetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that will hold
  *         the configuration of the MAC.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_ETH_GetMACConfig(ETH_HandleTypeDef *heth, ETH_MACConfigTypeDef *macconf)
{
 8001a2c:	b480      	push	{r7}
 8001a2e:	b083      	sub	sp, #12
 8001a30:	af00      	add	r7, sp, #0
 8001a32:	6078      	str	r0, [r7, #4]
 8001a34:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 8001a36:	683b      	ldr	r3, [r7, #0]
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d101      	bne.n	8001a40 <HAL_ETH_GetMACConfig+0x14>
  {
    return HAL_ERROR;
 8001a3c:	2301      	movs	r3, #1
 8001a3e:	e0d9      	b.n	8001bf4 <HAL_ETH_GetMACConfig+0x1c8>
  }

  /* Get MAC parameters */
  macconf->DeferralCheck = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DC) >> 4) > 0U) ? ENABLE : DISABLE;
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	f003 0310 	and.w	r3, r3, #16
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	bf14      	ite	ne
 8001a4e:	2301      	movne	r3, #1
 8001a50:	2300      	moveq	r3, #0
 8001a52:	b2db      	uxtb	r3, r3
 8001a54:	461a      	mov	r2, r3
 8001a56:	683b      	ldr	r3, [r7, #0]
 8001a58:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  macconf->BackOffLimit = READ_BIT(heth->Instance->MACCR, ETH_MACCR_BL);
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	f003 0260 	and.w	r2, r3, #96	; 0x60
 8001a66:	683b      	ldr	r3, [r7, #0]
 8001a68:	625a      	str	r2, [r3, #36]	; 0x24
  macconf->RetryTransmission = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_RD) >> 9) == 0U) ? ENABLE : DISABLE;
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	bf0c      	ite	eq
 8001a78:	2301      	moveq	r3, #1
 8001a7a:	2300      	movne	r3, #0
 8001a7c:	b2db      	uxtb	r3, r3
 8001a7e:	461a      	mov	r2, r3
 8001a80:	683b      	ldr	r3, [r7, #0]
 8001a82:	f883 2020 	strb.w	r2, [r3, #32]
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSD) >> 16) > 0U)
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
                                        ? ENABLE : DISABLE;
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	bf14      	ite	ne
 8001a94:	2301      	movne	r3, #1
 8001a96:	2300      	moveq	r3, #0
 8001a98:	b2db      	uxtb	r3, r3
 8001a9a:	461a      	mov	r2, r3
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSD) >> 16) > 0U)
 8001a9c:	683b      	ldr	r3, [r7, #0]
 8001a9e:	77da      	strb	r2, [r3, #31]
  macconf->ReceiveOwn = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_ROD) >> 13) == 0U) ? ENABLE : DISABLE;
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	bf0c      	ite	eq
 8001aae:	2301      	moveq	r3, #1
 8001ab0:	2300      	movne	r3, #0
 8001ab2:	b2db      	uxtb	r3, r3
 8001ab4:	461a      	mov	r2, r3
 8001ab6:	683b      	ldr	r3, [r7, #0]
 8001ab8:	779a      	strb	r2, [r3, #30]
  macconf->LoopbackMode = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_LM) >> 12) > 0U) ? ENABLE : DISABLE;
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	bf14      	ite	ne
 8001ac8:	2301      	movne	r3, #1
 8001aca:	2300      	moveq	r3, #0
 8001acc:	b2db      	uxtb	r3, r3
 8001ace:	461a      	mov	r2, r3
 8001ad0:	683b      	ldr	r3, [r7, #0]
 8001ad2:	771a      	strb	r2, [r3, #28]
  macconf->DuplexMode = READ_BIT(heth->Instance->MACCR, ETH_MACCR_DM);
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	f403 6200 	and.w	r2, r3, #2048	; 0x800
 8001ade:	683b      	ldr	r3, [r7, #0]
 8001ae0:	619a      	str	r2, [r3, #24]
  macconf->Speed = READ_BIT(heth->Instance->MACCR, ETH_MACCR_FES);
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	f403 4280 	and.w	r2, r3, #16384	; 0x4000
 8001aec:	683b      	ldr	r3, [r7, #0]
 8001aee:	615a      	str	r2, [r3, #20]
  macconf->Jabber = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JD) >> 22) == 0U) ? ENABLE : DISABLE;
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	bf0c      	ite	eq
 8001afe:	2301      	moveq	r3, #1
 8001b00:	2300      	movne	r3, #0
 8001b02:	b2db      	uxtb	r3, r3
 8001b04:	461a      	mov	r2, r3
 8001b06:	683b      	ldr	r3, [r7, #0]
 8001b08:	745a      	strb	r2, [r3, #17]
  macconf->Watchdog = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_WD) >> 23) == 0U) ? ENABLE : DISABLE;
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	bf0c      	ite	eq
 8001b18:	2301      	moveq	r3, #1
 8001b1a:	2300      	movne	r3, #0
 8001b1c:	b2db      	uxtb	r3, r3
 8001b1e:	461a      	mov	r2, r3
 8001b20:	683b      	ldr	r3, [r7, #0]
 8001b22:	741a      	strb	r2, [r3, #16]
  macconf->AutomaticPadCRCStrip = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_APCS) >> 7) > 0U) ? ENABLE : DISABLE;
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	bf14      	ite	ne
 8001b32:	2301      	movne	r3, #1
 8001b34:	2300      	moveq	r3, #0
 8001b36:	b2db      	uxtb	r3, r3
 8001b38:	461a      	mov	r2, r3
 8001b3a:	683b      	ldr	r3, [r7, #0]
 8001b3c:	73da      	strb	r2, [r3, #15]
  macconf->InterPacketGapVal = READ_BIT(heth->Instance->MACCR, ETH_MACCR_IFG);
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	f403 2260 	and.w	r2, r3, #917504	; 0xe0000
 8001b48:	683b      	ldr	r3, [r7, #0]
 8001b4a:	609a      	str	r2, [r3, #8]
  macconf->ChecksumOffload = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPCO) >> 10U) > 0U) ? ENABLE : DISABLE;
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	bf14      	ite	ne
 8001b5a:	2301      	movne	r3, #1
 8001b5c:	2300      	moveq	r3, #0
 8001b5e:	b2db      	uxtb	r3, r3
 8001b60:	461a      	mov	r2, r3
 8001b62:	683b      	ldr	r3, [r7, #0]
 8001b64:	711a      	strb	r2, [r3, #4]


  macconf->TransmitFlowControl = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_TFCE) >> 1) > 0U) ? ENABLE : DISABLE;
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	699b      	ldr	r3, [r3, #24]
 8001b6c:	f003 0302 	and.w	r3, r3, #2
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	bf14      	ite	ne
 8001b74:	2301      	movne	r3, #1
 8001b76:	2300      	moveq	r3, #0
 8001b78:	b2db      	uxtb	r3, r3
 8001b7a:	461a      	mov	r2, r3
 8001b7c:	683b      	ldr	r3, [r7, #0]
 8001b7e:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  macconf->ZeroQuantaPause = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_ZQPD) >> 7) == 0U) ? ENABLE : DISABLE;
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	699b      	ldr	r3, [r3, #24]
 8001b88:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	bf0c      	ite	eq
 8001b90:	2301      	moveq	r3, #1
 8001b92:	2300      	movne	r3, #0
 8001b94:	b2db      	uxtb	r3, r3
 8001b96:	461a      	mov	r2, r3
 8001b98:	683b      	ldr	r3, [r7, #0]
 8001b9a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
  macconf->PauseLowThreshold = READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_PLT);
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	699b      	ldr	r3, [r3, #24]
 8001ba4:	f003 0230 	and.w	r2, r3, #48	; 0x30
 8001ba8:	683b      	ldr	r3, [r7, #0]
 8001baa:	651a      	str	r2, [r3, #80]	; 0x50
  macconf->PauseTime = (READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_PT) >> 16);
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	699b      	ldr	r3, [r3, #24]
 8001bb2:	0c1b      	lsrs	r3, r3, #16
 8001bb4:	b29a      	uxth	r2, r3
 8001bb6:	683b      	ldr	r3, [r7, #0]
 8001bb8:	649a      	str	r2, [r3, #72]	; 0x48
  macconf->ReceiveFlowControl = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_RFCE) >> 2U) > 0U) ? ENABLE : DISABLE;
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	699b      	ldr	r3, [r3, #24]
 8001bc0:	f003 0304 	and.w	r3, r3, #4
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	bf14      	ite	ne
 8001bc8:	2301      	movne	r3, #1
 8001bca:	2300      	moveq	r3, #0
 8001bcc:	b2db      	uxtb	r3, r3
 8001bce:	461a      	mov	r2, r3
 8001bd0:	683b      	ldr	r3, [r7, #0]
 8001bd2:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_UPFD) >> 3U) > 0U)
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	699b      	ldr	r3, [r3, #24]
 8001bdc:	f003 0308 	and.w	r3, r3, #8
                                      ? ENABLE : DISABLE;
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	bf14      	ite	ne
 8001be4:	2301      	movne	r3, #1
 8001be6:	2300      	moveq	r3, #0
 8001be8:	b2db      	uxtb	r3, r3
 8001bea:	461a      	mov	r2, r3
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_UPFD) >> 3U) > 0U)
 8001bec:	683b      	ldr	r3, [r7, #0]
 8001bee:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55

  return HAL_OK;
 8001bf2:	2300      	movs	r3, #0
}
 8001bf4:	4618      	mov	r0, r3
 8001bf6:	370c      	adds	r7, #12
 8001bf8:	46bd      	mov	sp, r7
 8001bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bfe:	4770      	bx	lr

08001c00 <HAL_ETH_SetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that contains
  *         the configuration of the MAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8001c00:	b580      	push	{r7, lr}
 8001c02:	b082      	sub	sp, #8
 8001c04:	af00      	add	r7, sp, #0
 8001c06:	6078      	str	r0, [r7, #4]
 8001c08:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 8001c0a:	683b      	ldr	r3, [r7, #0]
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d101      	bne.n	8001c14 <HAL_ETH_SetMACConfig+0x14>
  {
    return HAL_ERROR;
 8001c10:	2301      	movs	r3, #1
 8001c12:	e00b      	b.n	8001c2c <HAL_ETH_SetMACConfig+0x2c>
  }

  if (heth->gState == HAL_ETH_STATE_READY)
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001c1a:	2b10      	cmp	r3, #16
 8001c1c:	d105      	bne.n	8001c2a <HAL_ETH_SetMACConfig+0x2a>
  {
    ETH_SetMACConfig(heth, macconf);
 8001c1e:	6839      	ldr	r1, [r7, #0]
 8001c20:	6878      	ldr	r0, [r7, #4]
 8001c22:	f000 f883 	bl	8001d2c <ETH_SetMACConfig>

    return HAL_OK;
 8001c26:	2300      	movs	r3, #0
 8001c28:	e000      	b.n	8001c2c <HAL_ETH_SetMACConfig+0x2c>
  }
  else
  {
    return HAL_ERROR;
 8001c2a:	2301      	movs	r3, #1
  }
}
 8001c2c:	4618      	mov	r0, r3
 8001c2e:	3708      	adds	r7, #8
 8001c30:	46bd      	mov	sp, r7
 8001c32:	bd80      	pop	{r7, pc}

08001c34 <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 8001c34:	b580      	push	{r7, lr}
 8001c36:	b084      	sub	sp, #16
 8001c38:	af00      	add	r7, sp, #0
 8001c3a:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg = (heth->Instance)->MACMIIAR;
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	691b      	ldr	r3, [r3, #16]
 8001c42:	60fb      	str	r3, [r7, #12]
  /* Clear CSR Clock Range CR[2:0] bits */
  tmpreg &= ETH_MACMIIAR_CR_MASK;
 8001c44:	68fb      	ldr	r3, [r7, #12]
 8001c46:	f023 031c 	bic.w	r3, r3, #28
 8001c4a:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8001c4c:	f001 fa90 	bl	8003170 <HAL_RCC_GetHCLKFreq>
 8001c50:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if ((hclk >= 20000000U) && (hclk < 35000000U))
 8001c52:	68bb      	ldr	r3, [r7, #8]
 8001c54:	4a1d      	ldr	r2, [pc, #116]	; (8001ccc <HAL_ETH_SetMDIOClockRange+0x98>)
 8001c56:	4293      	cmp	r3, r2
 8001c58:	d908      	bls.n	8001c6c <HAL_ETH_SetMDIOClockRange+0x38>
 8001c5a:	68bb      	ldr	r3, [r7, #8]
 8001c5c:	4a1c      	ldr	r2, [pc, #112]	; (8001cd0 <HAL_ETH_SetMDIOClockRange+0x9c>)
 8001c5e:	4293      	cmp	r3, r2
 8001c60:	d804      	bhi.n	8001c6c <HAL_ETH_SetMDIOClockRange+0x38>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 8001c62:	68fb      	ldr	r3, [r7, #12]
 8001c64:	f043 0308 	orr.w	r3, r3, #8
 8001c68:	60fb      	str	r3, [r7, #12]
 8001c6a:	e027      	b.n	8001cbc <HAL_ETH_SetMDIOClockRange+0x88>
  }
  else if ((hclk >= 35000000U) && (hclk < 60000000U))
 8001c6c:	68bb      	ldr	r3, [r7, #8]
 8001c6e:	4a18      	ldr	r2, [pc, #96]	; (8001cd0 <HAL_ETH_SetMDIOClockRange+0x9c>)
 8001c70:	4293      	cmp	r3, r2
 8001c72:	d908      	bls.n	8001c86 <HAL_ETH_SetMDIOClockRange+0x52>
 8001c74:	68bb      	ldr	r3, [r7, #8]
 8001c76:	4a17      	ldr	r2, [pc, #92]	; (8001cd4 <HAL_ETH_SetMDIOClockRange+0xa0>)
 8001c78:	4293      	cmp	r3, r2
 8001c7a:	d204      	bcs.n	8001c86 <HAL_ETH_SetMDIOClockRange+0x52>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 8001c7c:	68fb      	ldr	r3, [r7, #12]
 8001c7e:	f043 030c 	orr.w	r3, r3, #12
 8001c82:	60fb      	str	r3, [r7, #12]
 8001c84:	e01a      	b.n	8001cbc <HAL_ETH_SetMDIOClockRange+0x88>
  }
  else if ((hclk >= 60000000U) && (hclk < 100000000U))
 8001c86:	68bb      	ldr	r3, [r7, #8]
 8001c88:	4a12      	ldr	r2, [pc, #72]	; (8001cd4 <HAL_ETH_SetMDIOClockRange+0xa0>)
 8001c8a:	4293      	cmp	r3, r2
 8001c8c:	d303      	bcc.n	8001c96 <HAL_ETH_SetMDIOClockRange+0x62>
 8001c8e:	68bb      	ldr	r3, [r7, #8]
 8001c90:	4a11      	ldr	r2, [pc, #68]	; (8001cd8 <HAL_ETH_SetMDIOClockRange+0xa4>)
 8001c92:	4293      	cmp	r3, r2
 8001c94:	d911      	bls.n	8001cba <HAL_ETH_SetMDIOClockRange+0x86>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }
  else if ((hclk >= 100000000U) && (hclk < 150000000U))
 8001c96:	68bb      	ldr	r3, [r7, #8]
 8001c98:	4a0f      	ldr	r2, [pc, #60]	; (8001cd8 <HAL_ETH_SetMDIOClockRange+0xa4>)
 8001c9a:	4293      	cmp	r3, r2
 8001c9c:	d908      	bls.n	8001cb0 <HAL_ETH_SetMDIOClockRange+0x7c>
 8001c9e:	68bb      	ldr	r3, [r7, #8]
 8001ca0:	4a0e      	ldr	r2, [pc, #56]	; (8001cdc <HAL_ETH_SetMDIOClockRange+0xa8>)
 8001ca2:	4293      	cmp	r3, r2
 8001ca4:	d804      	bhi.n	8001cb0 <HAL_ETH_SetMDIOClockRange+0x7c>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 8001ca6:	68fb      	ldr	r3, [r7, #12]
 8001ca8:	f043 0304 	orr.w	r3, r3, #4
 8001cac:	60fb      	str	r3, [r7, #12]
 8001cae:	e005      	b.n	8001cbc <HAL_ETH_SetMDIOClockRange+0x88>
  }
  else /* ((hclk >= 150000000)&&(hclk <= 183000000))*/
  {
    /* CSR Clock Range between 150-183 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div102;
 8001cb0:	68fb      	ldr	r3, [r7, #12]
 8001cb2:	f043 0310 	orr.w	r3, r3, #16
 8001cb6:	60fb      	str	r3, [r7, #12]
 8001cb8:	e000      	b.n	8001cbc <HAL_ETH_SetMDIOClockRange+0x88>
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
 8001cba:	bf00      	nop
  }

  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tmpreg;
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	68fa      	ldr	r2, [r7, #12]
 8001cc2:	611a      	str	r2, [r3, #16]
}
 8001cc4:	bf00      	nop
 8001cc6:	3710      	adds	r7, #16
 8001cc8:	46bd      	mov	sp, r7
 8001cca:	bd80      	pop	{r7, pc}
 8001ccc:	01312cff 	.word	0x01312cff
 8001cd0:	02160ebf 	.word	0x02160ebf
 8001cd4:	03938700 	.word	0x03938700
 8001cd8:	05f5e0ff 	.word	0x05f5e0ff
 8001cdc:	08f0d17f 	.word	0x08f0d17f

08001ce0 <ETH_FlushTransmitFIFO>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_FlushTransmitFIFO(ETH_HandleTypeDef *heth)
{
 8001ce0:	b580      	push	{r7, lr}
 8001ce2:	b084      	sub	sp, #16
 8001ce4:	af00      	add	r7, sp, #0
 8001ce6:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 8001ce8:	2300      	movs	r3, #0
 8001cea:	60fb      	str	r3, [r7, #12]

  /* Set the Flush Transmit FIFO bit */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001cf4:	699b      	ldr	r3, [r3, #24]
 8001cf6:	687a      	ldr	r2, [r7, #4]
 8001cf8:	6812      	ldr	r2, [r2, #0]
 8001cfa:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001cfe:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001d02:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->DMAOMR;
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001d0c:	699b      	ldr	r3, [r3, #24]
 8001d0e:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001d10:	2001      	movs	r0, #1
 8001d12:	f7ff f9bf 	bl	8001094 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg;
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	681a      	ldr	r2, [r3, #0]
 8001d1a:	68fb      	ldr	r3, [r7, #12]
 8001d1c:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001d20:	6193      	str	r3, [r2, #24]
}
 8001d22:	bf00      	nop
 8001d24:	3710      	adds	r7, #16
 8001d26:	46bd      	mov	sp, r7
 8001d28:	bd80      	pop	{r7, pc}
	...

08001d2c <ETH_SetMACConfig>:

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8001d2c:	b580      	push	{r7, lr}
 8001d2e:	b084      	sub	sp, #16
 8001d30:	af00      	add	r7, sp, #0
 8001d32:	6078      	str	r0, [r7, #4]
 8001d34:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	60fb      	str	r3, [r7, #12]
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8001d3e:	68fa      	ldr	r2, [r7, #12]
 8001d40:	4b51      	ldr	r3, [pc, #324]	; (8001e88 <ETH_SetMACConfig+0x15c>)
 8001d42:	4013      	ands	r3, r2
 8001d44:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8001d46:	683b      	ldr	r3, [r7, #0]
 8001d48:	7c1b      	ldrb	r3, [r3, #16]
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d102      	bne.n	8001d54 <ETH_SetMACConfig+0x28>
 8001d4e:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8001d52:	e000      	b.n	8001d56 <ETH_SetMACConfig+0x2a>
 8001d54:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8001d56:	683b      	ldr	r3, [r7, #0]
 8001d58:	7c5b      	ldrb	r3, [r3, #17]
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d102      	bne.n	8001d64 <ETH_SetMACConfig+0x38>
 8001d5e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001d62:	e000      	b.n	8001d66 <ETH_SetMACConfig+0x3a>
 8001d64:	2300      	movs	r3, #0
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8001d66:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 8001d68:	683b      	ldr	r3, [r7, #0]
 8001d6a:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8001d6c:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8001d6e:	683b      	ldr	r3, [r7, #0]
 8001d70:	7fdb      	ldrb	r3, [r3, #31]
 8001d72:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 8001d74:	431a      	orrs	r2, r3
                        macconf->Speed |
 8001d76:	683b      	ldr	r3, [r7, #0]
 8001d78:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8001d7a:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8001d7c:	683a      	ldr	r2, [r7, #0]
 8001d7e:	7f92      	ldrb	r2, [r2, #30]
 8001d80:	2a00      	cmp	r2, #0
 8001d82:	d102      	bne.n	8001d8a <ETH_SetMACConfig+0x5e>
 8001d84:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001d88:	e000      	b.n	8001d8c <ETH_SetMACConfig+0x60>
 8001d8a:	2200      	movs	r2, #0
                        macconf->Speed |
 8001d8c:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8001d8e:	683b      	ldr	r3, [r7, #0]
 8001d90:	7f1b      	ldrb	r3, [r3, #28]
 8001d92:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8001d94:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 8001d96:	683b      	ldr	r3, [r7, #0]
 8001d98:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8001d9a:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8001d9c:	683b      	ldr	r3, [r7, #0]
 8001d9e:	791b      	ldrb	r3, [r3, #4]
 8001da0:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 8001da2:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8001da4:	683a      	ldr	r2, [r7, #0]
 8001da6:	f892 2020 	ldrb.w	r2, [r2, #32]
 8001daa:	2a00      	cmp	r2, #0
 8001dac:	d102      	bne.n	8001db4 <ETH_SetMACConfig+0x88>
 8001dae:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001db2:	e000      	b.n	8001db6 <ETH_SetMACConfig+0x8a>
 8001db4:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8001db6:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8001db8:	683b      	ldr	r3, [r7, #0]
 8001dba:	7bdb      	ldrb	r3, [r3, #15]
 8001dbc:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8001dbe:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 8001dc0:	683b      	ldr	r3, [r7, #0]
 8001dc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8001dc4:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 8001dc6:	683b      	ldr	r3, [r7, #0]
 8001dc8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8001dcc:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8001dce:	4313      	orrs	r3, r2
 8001dd0:	68fa      	ldr	r2, [r7, #12]
 8001dd2:	4313      	orrs	r3, r2
 8001dd4:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	68fa      	ldr	r2, [r7, #12]
 8001ddc:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001de6:	2001      	movs	r0, #1
 8001de8:	f7ff f954 	bl	8001094 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	68fa      	ldr	r2, [r7, #12]
 8001df2:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	699b      	ldr	r3, [r3, #24]
 8001dfa:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8001dfc:	68fa      	ldr	r2, [r7, #12]
 8001dfe:	f64f 7341 	movw	r3, #65345	; 0xff41
 8001e02:	4013      	ands	r3, r2
 8001e04:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8001e06:	683b      	ldr	r3, [r7, #0]
 8001e08:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001e0a:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8001e0c:	683a      	ldr	r2, [r7, #0]
 8001e0e:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 8001e12:	2a00      	cmp	r2, #0
 8001e14:	d101      	bne.n	8001e1a <ETH_SetMACConfig+0xee>
 8001e16:	2280      	movs	r2, #128	; 0x80
 8001e18:	e000      	b.n	8001e1c <ETH_SetMACConfig+0xf0>
 8001e1a:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8001e1c:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 8001e1e:	683b      	ldr	r3, [r7, #0]
 8001e20:	6d1b      	ldr	r3, [r3, #80]	; 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8001e22:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8001e24:	683a      	ldr	r2, [r7, #0]
 8001e26:	f892 2055 	ldrb.w	r2, [r2, #85]	; 0x55
 8001e2a:	2a01      	cmp	r2, #1
 8001e2c:	d101      	bne.n	8001e32 <ETH_SetMACConfig+0x106>
 8001e2e:	2208      	movs	r2, #8
 8001e30:	e000      	b.n	8001e34 <ETH_SetMACConfig+0x108>
 8001e32:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 8001e34:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 8001e36:	683a      	ldr	r2, [r7, #0]
 8001e38:	f892 2056 	ldrb.w	r2, [r2, #86]	; 0x56
 8001e3c:	2a01      	cmp	r2, #1
 8001e3e:	d101      	bne.n	8001e44 <ETH_SetMACConfig+0x118>
 8001e40:	2204      	movs	r2, #4
 8001e42:	e000      	b.n	8001e46 <ETH_SetMACConfig+0x11a>
 8001e44:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8001e46:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 8001e48:	683a      	ldr	r2, [r7, #0]
 8001e4a:	f892 2054 	ldrb.w	r2, [r2, #84]	; 0x54
 8001e4e:	2a01      	cmp	r2, #1
 8001e50:	d101      	bne.n	8001e56 <ETH_SetMACConfig+0x12a>
 8001e52:	2202      	movs	r2, #2
 8001e54:	e000      	b.n	8001e58 <ETH_SetMACConfig+0x12c>
 8001e56:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8001e58:	4313      	orrs	r3, r2
 8001e5a:	68fa      	ldr	r2, [r7, #12]
 8001e5c:	4313      	orrs	r3, r2
 8001e5e:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	68fa      	ldr	r2, [r7, #12]
 8001e66:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	699b      	ldr	r3, [r3, #24]
 8001e6e:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001e70:	2001      	movs	r0, #1
 8001e72:	f7ff f90f 	bl	8001094 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	68fa      	ldr	r2, [r7, #12]
 8001e7c:	619a      	str	r2, [r3, #24]
}
 8001e7e:	bf00      	nop
 8001e80:	3710      	adds	r7, #16
 8001e82:	46bd      	mov	sp, r7
 8001e84:	bd80      	pop	{r7, pc}
 8001e86:	bf00      	nop
 8001e88:	ff20810f 	.word	0xff20810f

08001e8c <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8001e8c:	b580      	push	{r7, lr}
 8001e8e:	b084      	sub	sp, #16
 8001e90:	af00      	add	r7, sp, #0
 8001e92:	6078      	str	r0, [r7, #4]
 8001e94:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001e9e:	699b      	ldr	r3, [r3, #24]
 8001ea0:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 8001ea2:	68fa      	ldr	r2, [r7, #12]
 8001ea4:	4b3d      	ldr	r3, [pc, #244]	; (8001f9c <ETH_SetDMAConfig+0x110>)
 8001ea6:	4013      	ands	r3, r2
 8001ea8:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8001eaa:	683b      	ldr	r3, [r7, #0]
 8001eac:	7b1b      	ldrb	r3, [r3, #12]
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d102      	bne.n	8001eb8 <ETH_SetDMAConfig+0x2c>
 8001eb2:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001eb6:	e000      	b.n	8001eba <ETH_SetDMAConfig+0x2e>
 8001eb8:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8001eba:	683b      	ldr	r3, [r7, #0]
 8001ebc:	7b5b      	ldrb	r3, [r3, #13]
 8001ebe:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8001ec0:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8001ec2:	683a      	ldr	r2, [r7, #0]
 8001ec4:	7f52      	ldrb	r2, [r2, #29]
 8001ec6:	2a00      	cmp	r2, #0
 8001ec8:	d102      	bne.n	8001ed0 <ETH_SetDMAConfig+0x44>
 8001eca:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8001ece:	e000      	b.n	8001ed2 <ETH_SetDMAConfig+0x46>
 8001ed0:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8001ed2:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8001ed4:	683b      	ldr	r3, [r7, #0]
 8001ed6:	7b9b      	ldrb	r3, [r3, #14]
 8001ed8:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8001eda:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 8001edc:	683b      	ldr	r3, [r7, #0]
 8001ede:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8001ee0:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8001ee2:	683b      	ldr	r3, [r7, #0]
 8001ee4:	7f1b      	ldrb	r3, [r3, #28]
 8001ee6:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 8001ee8:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8001eea:	683b      	ldr	r3, [r7, #0]
 8001eec:	7f9b      	ldrb	r3, [r3, #30]
 8001eee:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8001ef0:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 8001ef2:	683b      	ldr	r3, [r7, #0]
 8001ef4:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8001ef6:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 8001ef8:	683b      	ldr	r3, [r7, #0]
 8001efa:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001efe:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8001f00:	4313      	orrs	r3, r2
 8001f02:	68fa      	ldr	r2, [r7, #12]
 8001f04:	4313      	orrs	r3, r2
 8001f06:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001f10:	461a      	mov	r2, r3
 8001f12:	68fb      	ldr	r3, [r7, #12]
 8001f14:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001f1e:	699b      	ldr	r3, [r3, #24]
 8001f20:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001f22:	2001      	movs	r0, #1
 8001f24:	f7ff f8b6 	bl	8001094 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001f30:	461a      	mov	r2, r3
 8001f32:	68fb      	ldr	r3, [r7, #12]
 8001f34:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8001f36:	683b      	ldr	r3, [r7, #0]
 8001f38:	791b      	ldrb	r3, [r3, #4]
 8001f3a:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 8001f3c:	683b      	ldr	r3, [r7, #0]
 8001f3e:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8001f40:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8001f42:	683b      	ldr	r3, [r7, #0]
 8001f44:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 8001f46:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 8001f48:	683b      	ldr	r3, [r7, #0]
 8001f4a:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8001f4c:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8001f4e:	683b      	ldr	r3, [r7, #0]
 8001f50:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001f54:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 8001f56:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8001f58:	683b      	ldr	r3, [r7, #0]
 8001f5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f5c:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8001f5e:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 8001f60:	683b      	ldr	r3, [r7, #0]
 8001f62:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8001f64:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8001f66:	687a      	ldr	r2, [r7, #4]
 8001f68:	6812      	ldr	r2, [r2, #0]
 8001f6a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001f6e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001f72:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001f80:	2001      	movs	r0, #1
 8001f82:	f7ff f887 	bl	8001094 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001f8e:	461a      	mov	r2, r3
 8001f90:	68fb      	ldr	r3, [r7, #12]
 8001f92:	6013      	str	r3, [r2, #0]
}
 8001f94:	bf00      	nop
 8001f96:	3710      	adds	r7, #16
 8001f98:	46bd      	mov	sp, r7
 8001f9a:	bd80      	pop	{r7, pc}
 8001f9c:	f8de3f23 	.word	0xf8de3f23

08001fa0 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8001fa0:	b580      	push	{r7, lr}
 8001fa2:	b0a6      	sub	sp, #152	; 0x98
 8001fa4:	af00      	add	r7, sp, #0
 8001fa6:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 8001fa8:	2301      	movs	r3, #1
 8001faa:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
  macDefaultConf.Jabber = ENABLE;
 8001fae:	2301      	movs	r3, #1
 8001fb0:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 8001fb4:	2300      	movs	r3, #0
 8001fb6:	63fb      	str	r3, [r7, #60]	; 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8001fb8:	2300      	movs	r3, #0
 8001fba:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 8001fbe:	2301      	movs	r3, #1
 8001fc0:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 8001fc4:	2300      	movs	r3, #0
 8001fc6:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
  macDefaultConf.ChecksumOffload = ENABLE;
 8001fca:	2301      	movs	r3, #1
 8001fcc:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 8001fd0:	2300      	movs	r3, #0
 8001fd2:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 8001fd6:	2300      	movs	r3, #0
 8001fd8:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8001fdc:	2300      	movs	r3, #0
 8001fde:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 8001fe0:	2300      	movs	r3, #0
 8001fe2:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.PauseTime = 0x0U;
 8001fe6:	2300      	movs	r3, #0
 8001fe8:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 8001fea:	2300      	movs	r3, #0
 8001fec:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8001ff0:	2300      	movs	r3, #0
 8001ff2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8001ff6:	2300      	movs	r3, #0
 8001ff8:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 8001ffc:	2300      	movs	r3, #0
 8001ffe:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 8002002:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002006:	64bb      	str	r3, [r7, #72]	; 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8002008:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800200c:	64fb      	str	r3, [r7, #76]	; 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 800200e:	2300      	movs	r3, #0
 8002010:	f887 3089 	strb.w	r3, [r7, #137]	; 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8002014:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002018:	4619      	mov	r1, r3
 800201a:	6878      	ldr	r0, [r7, #4]
 800201c:	f7ff fe86 	bl	8001d2c <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 8002020:	2301      	movs	r3, #1
 8002022:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 8002024:	2301      	movs	r3, #1
 8002026:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 8002028:	2301      	movs	r3, #1
 800202a:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 800202e:	2301      	movs	r3, #1
 8002030:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8002032:	2300      	movs	r3, #0
 8002034:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 8002036:	2300      	movs	r3, #0
 8002038:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 800203c:	2300      	movs	r3, #0
 800203e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8002042:	2300      	movs	r3, #0
 8002044:	62bb      	str	r3, [r7, #40]	; 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 8002046:	2301      	movs	r3, #1
 8002048:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 800204c:	2301      	movs	r3, #1
 800204e:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8002050:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002054:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8002056:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800205a:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 800205c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002060:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 8002062:	2301      	movs	r3, #1
 8002064:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 8002068:	2300      	movs	r3, #0
 800206a:	633b      	str	r3, [r7, #48]	; 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 800206c:	2300      	movs	r3, #0
 800206e:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8002070:	f107 0308 	add.w	r3, r7, #8
 8002074:	4619      	mov	r1, r3
 8002076:	6878      	ldr	r0, [r7, #4]
 8002078:	f7ff ff08 	bl	8001e8c <ETH_SetDMAConfig>
}
 800207c:	bf00      	nop
 800207e:	3798      	adds	r7, #152	; 0x98
 8002080:	46bd      	mov	sp, r7
 8002082:	bd80      	pop	{r7, pc}

08002084 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8002084:	b480      	push	{r7}
 8002086:	b087      	sub	sp, #28
 8002088:	af00      	add	r7, sp, #0
 800208a:	60f8      	str	r0, [r7, #12]
 800208c:	60b9      	str	r1, [r7, #8]
 800208e:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	3305      	adds	r3, #5
 8002094:	781b      	ldrb	r3, [r3, #0]
 8002096:	021b      	lsls	r3, r3, #8
 8002098:	687a      	ldr	r2, [r7, #4]
 800209a:	3204      	adds	r2, #4
 800209c:	7812      	ldrb	r2, [r2, #0]
 800209e:	4313      	orrs	r3, r2
 80020a0:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 80020a2:	68ba      	ldr	r2, [r7, #8]
 80020a4:	4b11      	ldr	r3, [pc, #68]	; (80020ec <ETH_MACAddressConfig+0x68>)
 80020a6:	4413      	add	r3, r2
 80020a8:	461a      	mov	r2, r3
 80020aa:	697b      	ldr	r3, [r7, #20]
 80020ac:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	3303      	adds	r3, #3
 80020b2:	781b      	ldrb	r3, [r3, #0]
 80020b4:	061a      	lsls	r2, r3, #24
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	3302      	adds	r3, #2
 80020ba:	781b      	ldrb	r3, [r3, #0]
 80020bc:	041b      	lsls	r3, r3, #16
 80020be:	431a      	orrs	r2, r3
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	3301      	adds	r3, #1
 80020c4:	781b      	ldrb	r3, [r3, #0]
 80020c6:	021b      	lsls	r3, r3, #8
 80020c8:	4313      	orrs	r3, r2
 80020ca:	687a      	ldr	r2, [r7, #4]
 80020cc:	7812      	ldrb	r2, [r2, #0]
 80020ce:	4313      	orrs	r3, r2
 80020d0:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 80020d2:	68ba      	ldr	r2, [r7, #8]
 80020d4:	4b06      	ldr	r3, [pc, #24]	; (80020f0 <ETH_MACAddressConfig+0x6c>)
 80020d6:	4413      	add	r3, r2
 80020d8:	461a      	mov	r2, r3
 80020da:	697b      	ldr	r3, [r7, #20]
 80020dc:	6013      	str	r3, [r2, #0]
}
 80020de:	bf00      	nop
 80020e0:	371c      	adds	r7, #28
 80020e2:	46bd      	mov	sp, r7
 80020e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e8:	4770      	bx	lr
 80020ea:	bf00      	nop
 80020ec:	40028040 	.word	0x40028040
 80020f0:	40028044 	.word	0x40028044

080020f4 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 80020f4:	b480      	push	{r7}
 80020f6:	b085      	sub	sp, #20
 80020f8:	af00      	add	r7, sp, #0
 80020fa:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80020fc:	2300      	movs	r3, #0
 80020fe:	60fb      	str	r3, [r7, #12]
 8002100:	e03e      	b.n	8002180 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	68d9      	ldr	r1, [r3, #12]
 8002106:	68fa      	ldr	r2, [r7, #12]
 8002108:	4613      	mov	r3, r2
 800210a:	009b      	lsls	r3, r3, #2
 800210c:	4413      	add	r3, r2
 800210e:	00db      	lsls	r3, r3, #3
 8002110:	440b      	add	r3, r1
 8002112:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 8002114:	68bb      	ldr	r3, [r7, #8]
 8002116:	2200      	movs	r2, #0
 8002118:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 800211a:	68bb      	ldr	r3, [r7, #8]
 800211c:	2200      	movs	r2, #0
 800211e:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 8002120:	68bb      	ldr	r3, [r7, #8]
 8002122:	2200      	movs	r2, #0
 8002124:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 8002126:	68bb      	ldr	r3, [r7, #8]
 8002128:	2200      	movs	r2, #0
 800212a:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 800212c:	68b9      	ldr	r1, [r7, #8]
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	68fa      	ldr	r2, [r7, #12]
 8002132:	3206      	adds	r2, #6
 8002134:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 8002138:	68bb      	ldr	r3, [r7, #8]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8002140:	68bb      	ldr	r3, [r7, #8]
 8002142:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	2b02      	cmp	r3, #2
 8002148:	d80c      	bhi.n	8002164 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	68d9      	ldr	r1, [r3, #12]
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	1c5a      	adds	r2, r3, #1
 8002152:	4613      	mov	r3, r2
 8002154:	009b      	lsls	r3, r3, #2
 8002156:	4413      	add	r3, r2
 8002158:	00db      	lsls	r3, r3, #3
 800215a:	440b      	add	r3, r1
 800215c:	461a      	mov	r2, r3
 800215e:	68bb      	ldr	r3, [r7, #8]
 8002160:	60da      	str	r2, [r3, #12]
 8002162:	e004      	b.n	800216e <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	68db      	ldr	r3, [r3, #12]
 8002168:	461a      	mov	r2, r3
 800216a:	68bb      	ldr	r3, [r7, #8]
 800216c:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 800216e:	68bb      	ldr	r3, [r7, #8]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 8002176:	68bb      	ldr	r3, [r7, #8]
 8002178:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 800217a:	68fb      	ldr	r3, [r7, #12]
 800217c:	3301      	adds	r3, #1
 800217e:	60fb      	str	r3, [r7, #12]
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	2b03      	cmp	r3, #3
 8002184:	d9bd      	bls.n	8002102 <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	2200      	movs	r2, #0
 800218a:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	68da      	ldr	r2, [r3, #12]
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002198:	611a      	str	r2, [r3, #16]
}
 800219a:	bf00      	nop
 800219c:	3714      	adds	r7, #20
 800219e:	46bd      	mov	sp, r7
 80021a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a4:	4770      	bx	lr

080021a6 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 80021a6:	b480      	push	{r7}
 80021a8:	b085      	sub	sp, #20
 80021aa:	af00      	add	r7, sp, #0
 80021ac:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80021ae:	2300      	movs	r3, #0
 80021b0:	60fb      	str	r3, [r7, #12]
 80021b2:	e046      	b.n	8002242 <ETH_DMARxDescListInit+0x9c>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	6919      	ldr	r1, [r3, #16]
 80021b8:	68fa      	ldr	r2, [r7, #12]
 80021ba:	4613      	mov	r3, r2
 80021bc:	009b      	lsls	r3, r3, #2
 80021be:	4413      	add	r3, r2
 80021c0:	00db      	lsls	r3, r3, #3
 80021c2:	440b      	add	r3, r1
 80021c4:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 80021c6:	68bb      	ldr	r3, [r7, #8]
 80021c8:	2200      	movs	r2, #0
 80021ca:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 80021cc:	68bb      	ldr	r3, [r7, #8]
 80021ce:	2200      	movs	r2, #0
 80021d0:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 80021d2:	68bb      	ldr	r3, [r7, #8]
 80021d4:	2200      	movs	r2, #0
 80021d6:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 80021d8:	68bb      	ldr	r3, [r7, #8]
 80021da:	2200      	movs	r2, #0
 80021dc:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 80021de:	68bb      	ldr	r3, [r7, #8]
 80021e0:	2200      	movs	r2, #0
 80021e2:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 80021e4:	68bb      	ldr	r3, [r7, #8]
 80021e6:	2200      	movs	r2, #0
 80021e8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 80021ea:	68bb      	ldr	r3, [r7, #8]
 80021ec:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80021f0:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 80021f2:	68bb      	ldr	r3, [r7, #8]
 80021f4:	f44f 428c 	mov.w	r2, #17920	; 0x4600
 80021f8:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 80021fa:	68bb      	ldr	r3, [r7, #8]
 80021fc:	685b      	ldr	r3, [r3, #4]
 80021fe:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002202:	68bb      	ldr	r3, [r7, #8]
 8002204:	605a      	str	r2, [r3, #4]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8002206:	68b9      	ldr	r1, [r7, #8]
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	68fa      	ldr	r2, [r7, #12]
 800220c:	3212      	adds	r2, #18
 800220e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	2b02      	cmp	r3, #2
 8002216:	d80c      	bhi.n	8002232 <ETH_DMARxDescListInit+0x8c>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	6919      	ldr	r1, [r3, #16]
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	1c5a      	adds	r2, r3, #1
 8002220:	4613      	mov	r3, r2
 8002222:	009b      	lsls	r3, r3, #2
 8002224:	4413      	add	r3, r2
 8002226:	00db      	lsls	r3, r3, #3
 8002228:	440b      	add	r3, r1
 800222a:	461a      	mov	r2, r3
 800222c:	68bb      	ldr	r3, [r7, #8]
 800222e:	60da      	str	r2, [r3, #12]
 8002230:	e004      	b.n	800223c <ETH_DMARxDescListInit+0x96>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	691b      	ldr	r3, [r3, #16]
 8002236:	461a      	mov	r2, r3
 8002238:	68bb      	ldr	r3, [r7, #8]
 800223a:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	3301      	adds	r3, #1
 8002240:	60fb      	str	r3, [r7, #12]
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	2b03      	cmp	r3, #3
 8002246:	d9b5      	bls.n	80021b4 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	2200      	movs	r2, #0
 800224c:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	2200      	movs	r2, #0
 8002252:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	2200      	movs	r2, #0
 8002258:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	2200      	movs	r2, #0
 800225e:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	2200      	movs	r2, #0
 8002264:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	691a      	ldr	r2, [r3, #16]
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002272:	60da      	str	r2, [r3, #12]
}
 8002274:	bf00      	nop
 8002276:	3714      	adds	r7, #20
 8002278:	46bd      	mov	sp, r7
 800227a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800227e:	4770      	bx	lr

08002280 <ETH_Prepare_Tx_Descriptors>:
  * @param  pTxConfig: Tx packet configuration
  * @param  ItMode: Enable or disable Tx EOT interrept
  * @retval Status
  */
static uint32_t ETH_Prepare_Tx_Descriptors(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig, uint32_t ItMode)
{
 8002280:	b480      	push	{r7}
 8002282:	b08d      	sub	sp, #52	; 0x34
 8002284:	af00      	add	r7, sp, #0
 8002286:	60f8      	str	r0, [r7, #12]
 8002288:	60b9      	str	r1, [r7, #8]
 800228a:	607a      	str	r2, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	3318      	adds	r3, #24
 8002290:	617b      	str	r3, [r7, #20]
  uint32_t descidx = dmatxdesclist->CurTxDesc;
 8002292:	697b      	ldr	r3, [r7, #20]
 8002294:	691b      	ldr	r3, [r3, #16]
 8002296:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t firstdescidx = dmatxdesclist->CurTxDesc;
 8002298:	697b      	ldr	r3, [r7, #20]
 800229a:	691b      	ldr	r3, [r3, #16]
 800229c:	613b      	str	r3, [r7, #16]
  uint32_t idx;
  uint32_t descnbr = 0;
 800229e:	2300      	movs	r3, #0
 80022a0:	627b      	str	r3, [r7, #36]	; 0x24
  ETH_DMADescTypeDef *dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 80022a2:	697b      	ldr	r3, [r7, #20]
 80022a4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80022a6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80022aa:	623b      	str	r3, [r7, #32]

  ETH_BufferTypeDef  *txbuffer = pTxConfig->TxBuffer;
 80022ac:	68bb      	ldr	r3, [r7, #8]
 80022ae:	689b      	ldr	r3, [r3, #8]
 80022b0:	61fb      	str	r3, [r7, #28]
  uint32_t           bd_count = 0;
 80022b2:	2300      	movs	r3, #0
 80022b4:	61bb      	str	r3, [r7, #24]

  /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
  if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 80022b6:	6a3b      	ldr	r3, [r7, #32]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80022be:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80022c2:	d007      	beq.n	80022d4 <ETH_Prepare_Tx_Descriptors+0x54>
      || (dmatxdesclist->PacketAddress[descidx] != NULL))
 80022c4:	697a      	ldr	r2, [r7, #20]
 80022c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80022c8:	3304      	adds	r3, #4
 80022ca:	009b      	lsls	r3, r3, #2
 80022cc:	4413      	add	r3, r2
 80022ce:	685b      	ldr	r3, [r3, #4]
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d001      	beq.n	80022d8 <ETH_Prepare_Tx_Descriptors+0x58>
  {
    return HAL_ETH_ERROR_BUSY;
 80022d4:	2302      	movs	r3, #2
 80022d6:	e103      	b.n	80024e0 <ETH_Prepare_Tx_Descriptors+0x260>
  }


  descnbr += 1U;
 80022d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022da:	3301      	adds	r3, #1
 80022dc:	627b      	str	r3, [r7, #36]	; 0x24

  /* Set header or buffer 1 address */
  WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 80022de:	69fb      	ldr	r3, [r7, #28]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	461a      	mov	r2, r3
 80022e4:	6a3b      	ldr	r3, [r7, #32]
 80022e6:	609a      	str	r2, [r3, #8]

  /* Set header or buffer 1 Length */
  MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 80022e8:	6a3b      	ldr	r3, [r7, #32]
 80022ea:	685b      	ldr	r3, [r3, #4]
 80022ec:	f423 53ff 	bic.w	r3, r3, #8160	; 0x1fe0
 80022f0:	f023 031f 	bic.w	r3, r3, #31
 80022f4:	69fa      	ldr	r2, [r7, #28]
 80022f6:	6852      	ldr	r2, [r2, #4]
 80022f8:	431a      	orrs	r2, r3
 80022fa:	6a3b      	ldr	r3, [r7, #32]
 80022fc:	605a      	str	r2, [r3, #4]

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != 0U)
 80022fe:	68bb      	ldr	r3, [r7, #8]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	f003 0301 	and.w	r3, r3, #1
 8002306:	2b00      	cmp	r3, #0
 8002308:	d008      	beq.n	800231c <ETH_Prepare_Tx_Descriptors+0x9c>
  {
    MODIFY_REG(dmatxdesc->DESC0, ETH_DMATXDESC_CIC, pTxConfig->ChecksumCtrl);
 800230a:	6a3b      	ldr	r3, [r7, #32]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002312:	68bb      	ldr	r3, [r7, #8]
 8002314:	695b      	ldr	r3, [r3, #20]
 8002316:	431a      	orrs	r2, r3
 8002318:	6a3b      	ldr	r3, [r7, #32]
 800231a:	601a      	str	r2, [r3, #0]
  }

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CRCPAD) != 0U)
 800231c:	68bb      	ldr	r3, [r7, #8]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	f003 0320 	and.w	r3, r3, #32
 8002324:	2b00      	cmp	r3, #0
 8002326:	d008      	beq.n	800233a <ETH_Prepare_Tx_Descriptors+0xba>
  {
    MODIFY_REG(dmatxdesc->DESC0, ETH_CRC_PAD_DISABLE, pTxConfig->CRCPadCtrl);
 8002328:	6a3b      	ldr	r3, [r7, #32]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002330:	68bb      	ldr	r3, [r7, #8]
 8002332:	691b      	ldr	r3, [r3, #16]
 8002334:	431a      	orrs	r2, r3
 8002336:	6a3b      	ldr	r3, [r7, #32]
 8002338:	601a      	str	r2, [r3, #0]
  }


  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != 0U)
 800233a:	68bb      	ldr	r3, [r7, #8]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	f003 0304 	and.w	r3, r3, #4
 8002342:	2b00      	cmp	r3, #0
 8002344:	d005      	beq.n	8002352 <ETH_Prepare_Tx_Descriptors+0xd2>
  {
    /* Set Vlan Type */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_VF);
 8002346:	6a3b      	ldr	r3, [r7, #32]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800234e:	6a3b      	ldr	r3, [r7, #32]
 8002350:	601a      	str	r2, [r3, #0]
  }

  /* Mark it as First Descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 8002352:	6a3b      	ldr	r3, [r7, #32]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800235a:	6a3b      	ldr	r3, [r7, #32]
 800235c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("dmb 0xF":::"memory");
 800235e:	f3bf 8f5f 	dmb	sy
}
 8002362:	bf00      	nop

  /* Ensure rest of descriptor is written to RAM before the OWN bit */
  __DMB();
  /* set OWN bit of FIRST descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 8002364:	6a3b      	ldr	r3, [r7, #32]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800236c:	6a3b      	ldr	r3, [r7, #32]
 800236e:	601a      	str	r2, [r3, #0]

  /* only if the packet is split into more than one descriptors > 1 */
  while (txbuffer->next != NULL)
 8002370:	e084      	b.n	800247c <ETH_Prepare_Tx_Descriptors+0x1fc>
  {
    /* Clear the LD bit of previous descriptor */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 8002372:	6a3b      	ldr	r3, [r7, #32]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 800237a:	6a3b      	ldr	r3, [r7, #32]
 800237c:	601a      	str	r2, [r3, #0]
    if (ItMode != ((uint32_t)RESET))
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	2b00      	cmp	r3, #0
 8002382:	d006      	beq.n	8002392 <ETH_Prepare_Tx_Descriptors+0x112>
    {
      /* Set Interrupt on completion bit */
      SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8002384:	6a3b      	ldr	r3, [r7, #32]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800238c:	6a3b      	ldr	r3, [r7, #32]
 800238e:	601a      	str	r2, [r3, #0]
 8002390:	e005      	b.n	800239e <ETH_Prepare_Tx_Descriptors+0x11e>
    }
    else
    {
      /* Clear Interrupt on completion bit */
      CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8002392:	6a3b      	ldr	r3, [r7, #32]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 800239a:	6a3b      	ldr	r3, [r7, #32]
 800239c:	601a      	str	r2, [r3, #0]
    }
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 800239e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80023a0:	3301      	adds	r3, #1
 80023a2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80023a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80023a6:	2b03      	cmp	r3, #3
 80023a8:	d902      	bls.n	80023b0 <ETH_Prepare_Tx_Descriptors+0x130>
 80023aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80023ac:	3b04      	subs	r3, #4
 80023ae:	62fb      	str	r3, [r7, #44]	; 0x2c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 80023b0:	697b      	ldr	r3, [r7, #20]
 80023b2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80023b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80023b8:	623b      	str	r3, [r7, #32]

    /* Clear the FD bit of new Descriptor */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 80023ba:	6a3b      	ldr	r3, [r7, #32]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80023c2:	6a3b      	ldr	r3, [r7, #32]
 80023c4:	601a      	str	r2, [r3, #0]

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 80023c6:	6a3b      	ldr	r3, [r7, #32]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80023ce:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80023d2:	d007      	beq.n	80023e4 <ETH_Prepare_Tx_Descriptors+0x164>
        || (dmatxdesclist->PacketAddress[descidx] != NULL))
 80023d4:	697a      	ldr	r2, [r7, #20]
 80023d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80023d8:	3304      	adds	r3, #4
 80023da:	009b      	lsls	r3, r3, #2
 80023dc:	4413      	add	r3, r2
 80023de:	685b      	ldr	r3, [r3, #4]
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d029      	beq.n	8002438 <ETH_Prepare_Tx_Descriptors+0x1b8>
    {
      descidx = firstdescidx;
 80023e4:	693b      	ldr	r3, [r7, #16]
 80023e6:	62fb      	str	r3, [r7, #44]	; 0x2c
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 80023e8:	697b      	ldr	r3, [r7, #20]
 80023ea:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80023ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80023f0:	623b      	str	r3, [r7, #32]

      /* clear previous desc own bit */
      for (idx = 0; idx < descnbr; idx ++)
 80023f2:	2300      	movs	r3, #0
 80023f4:	62bb      	str	r3, [r7, #40]	; 0x28
 80023f6:	e019      	b.n	800242c <ETH_Prepare_Tx_Descriptors+0x1ac>
  __ASM volatile ("dmb 0xF":::"memory");
 80023f8:	f3bf 8f5f 	dmb	sy
}
 80023fc:	bf00      	nop
      {
        /* Ensure rest of descriptor is written to RAM before the OWN bit */
        __DMB();

        CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 80023fe:	6a3b      	ldr	r3, [r7, #32]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002406:	6a3b      	ldr	r3, [r7, #32]
 8002408:	601a      	str	r2, [r3, #0]

        /* Increment current tx descriptor index */
        INCR_TX_DESC_INDEX(descidx, 1U);
 800240a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800240c:	3301      	adds	r3, #1
 800240e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002410:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002412:	2b03      	cmp	r3, #3
 8002414:	d902      	bls.n	800241c <ETH_Prepare_Tx_Descriptors+0x19c>
 8002416:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002418:	3b04      	subs	r3, #4
 800241a:	62fb      	str	r3, [r7, #44]	; 0x2c
        /* Get current descriptor address */
        dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 800241c:	697b      	ldr	r3, [r7, #20]
 800241e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002420:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002424:	623b      	str	r3, [r7, #32]
      for (idx = 0; idx < descnbr; idx ++)
 8002426:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002428:	3301      	adds	r3, #1
 800242a:	62bb      	str	r3, [r7, #40]	; 0x28
 800242c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800242e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002430:	429a      	cmp	r2, r3
 8002432:	d3e1      	bcc.n	80023f8 <ETH_Prepare_Tx_Descriptors+0x178>
      }

      return HAL_ETH_ERROR_BUSY;
 8002434:	2302      	movs	r3, #2
 8002436:	e053      	b.n	80024e0 <ETH_Prepare_Tx_Descriptors+0x260>
    }

    descnbr += 1U;
 8002438:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800243a:	3301      	adds	r3, #1
 800243c:	627b      	str	r3, [r7, #36]	; 0x24

    /* Get the next Tx buffer in the list */
    txbuffer = txbuffer->next;
 800243e:	69fb      	ldr	r3, [r7, #28]
 8002440:	689b      	ldr	r3, [r3, #8]
 8002442:	61fb      	str	r3, [r7, #28]

    /* Set header or buffer 1 address */
    WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 8002444:	69fb      	ldr	r3, [r7, #28]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	461a      	mov	r2, r3
 800244a:	6a3b      	ldr	r3, [r7, #32]
 800244c:	609a      	str	r2, [r3, #8]

    /* Set header or buffer 1 Length */
    MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 800244e:	6a3b      	ldr	r3, [r7, #32]
 8002450:	685b      	ldr	r3, [r3, #4]
 8002452:	f423 53ff 	bic.w	r3, r3, #8160	; 0x1fe0
 8002456:	f023 031f 	bic.w	r3, r3, #31
 800245a:	69fa      	ldr	r2, [r7, #28]
 800245c:	6852      	ldr	r2, [r2, #4]
 800245e:	431a      	orrs	r2, r3
 8002460:	6a3b      	ldr	r3, [r7, #32]
 8002462:	605a      	str	r2, [r3, #4]

    bd_count += 1U;
 8002464:	69bb      	ldr	r3, [r7, #24]
 8002466:	3301      	adds	r3, #1
 8002468:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("dmb 0xF":::"memory");
 800246a:	f3bf 8f5f 	dmb	sy
}
 800246e:	bf00      	nop

    /* Ensure rest of descriptor is written to RAM before the OWN bit */
    __DMB();
    /* Set Own bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 8002470:	6a3b      	ldr	r3, [r7, #32]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002478:	6a3b      	ldr	r3, [r7, #32]
 800247a:	601a      	str	r2, [r3, #0]
  while (txbuffer->next != NULL)
 800247c:	69fb      	ldr	r3, [r7, #28]
 800247e:	689b      	ldr	r3, [r3, #8]
 8002480:	2b00      	cmp	r3, #0
 8002482:	f47f af76 	bne.w	8002372 <ETH_Prepare_Tx_Descriptors+0xf2>
  }

  if (ItMode != ((uint32_t)RESET))
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	2b00      	cmp	r3, #0
 800248a:	d006      	beq.n	800249a <ETH_Prepare_Tx_Descriptors+0x21a>
  {
    /* Set Interrupt on completion bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 800248c:	6a3b      	ldr	r3, [r7, #32]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8002494:	6a3b      	ldr	r3, [r7, #32]
 8002496:	601a      	str	r2, [r3, #0]
 8002498:	e005      	b.n	80024a6 <ETH_Prepare_Tx_Descriptors+0x226>
  }
  else
  {
    /* Clear Interrupt on completion bit */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 800249a:	6a3b      	ldr	r3, [r7, #32]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80024a2:	6a3b      	ldr	r3, [r7, #32]
 80024a4:	601a      	str	r2, [r3, #0]
  }

  /* Mark it as LAST descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 80024a6:	6a3b      	ldr	r3, [r7, #32]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80024ae:	6a3b      	ldr	r3, [r7, #32]
 80024b0:	601a      	str	r2, [r3, #0]
  /* Save the current packet address to expose it to the application */
  dmatxdesclist->PacketAddress[descidx] = dmatxdesclist->CurrentPacketAddress;
 80024b2:	697b      	ldr	r3, [r7, #20]
 80024b4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80024b6:	6979      	ldr	r1, [r7, #20]
 80024b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80024ba:	3304      	adds	r3, #4
 80024bc:	009b      	lsls	r3, r3, #2
 80024be:	440b      	add	r3, r1
 80024c0:	605a      	str	r2, [r3, #4]

  dmatxdesclist->CurTxDesc = descidx;
 80024c2:	697b      	ldr	r3, [r7, #20]
 80024c4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80024c6:	611a      	str	r2, [r3, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 80024c8:	b672      	cpsid	i
}
 80024ca:	bf00      	nop

  /* disable the interrupt */
  __disable_irq();

  dmatxdesclist->BuffersInUse += bd_count + 1U;
 80024cc:	697b      	ldr	r3, [r7, #20]
 80024ce:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80024d0:	69bb      	ldr	r3, [r7, #24]
 80024d2:	4413      	add	r3, r2
 80024d4:	1c5a      	adds	r2, r3, #1
 80024d6:	697b      	ldr	r3, [r7, #20]
 80024d8:	629a      	str	r2, [r3, #40]	; 0x28
  __ASM volatile ("cpsie i" : : : "memory");
 80024da:	b662      	cpsie	i
}
 80024dc:	bf00      	nop
  /* Enable interrupts back */
  __enable_irq();


  /* Return function status */
  return HAL_ETH_ERROR_NONE;
 80024de:	2300      	movs	r3, #0
}
 80024e0:	4618      	mov	r0, r3
 80024e2:	3734      	adds	r7, #52	; 0x34
 80024e4:	46bd      	mov	sp, r7
 80024e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ea:	4770      	bx	lr

080024ec <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80024ec:	b480      	push	{r7}
 80024ee:	b089      	sub	sp, #36	; 0x24
 80024f0:	af00      	add	r7, sp, #0
 80024f2:	6078      	str	r0, [r7, #4]
 80024f4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80024f6:	2300      	movs	r3, #0
 80024f8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80024fa:	2300      	movs	r3, #0
 80024fc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80024fe:	2300      	movs	r3, #0
 8002500:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002502:	2300      	movs	r3, #0
 8002504:	61fb      	str	r3, [r7, #28]
 8002506:	e177      	b.n	80027f8 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002508:	2201      	movs	r2, #1
 800250a:	69fb      	ldr	r3, [r7, #28]
 800250c:	fa02 f303 	lsl.w	r3, r2, r3
 8002510:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002512:	683b      	ldr	r3, [r7, #0]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	697a      	ldr	r2, [r7, #20]
 8002518:	4013      	ands	r3, r2
 800251a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800251c:	693a      	ldr	r2, [r7, #16]
 800251e:	697b      	ldr	r3, [r7, #20]
 8002520:	429a      	cmp	r2, r3
 8002522:	f040 8166 	bne.w	80027f2 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002526:	683b      	ldr	r3, [r7, #0]
 8002528:	685b      	ldr	r3, [r3, #4]
 800252a:	f003 0303 	and.w	r3, r3, #3
 800252e:	2b01      	cmp	r3, #1
 8002530:	d005      	beq.n	800253e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002532:	683b      	ldr	r3, [r7, #0]
 8002534:	685b      	ldr	r3, [r3, #4]
 8002536:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800253a:	2b02      	cmp	r3, #2
 800253c:	d130      	bne.n	80025a0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	689b      	ldr	r3, [r3, #8]
 8002542:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002544:	69fb      	ldr	r3, [r7, #28]
 8002546:	005b      	lsls	r3, r3, #1
 8002548:	2203      	movs	r2, #3
 800254a:	fa02 f303 	lsl.w	r3, r2, r3
 800254e:	43db      	mvns	r3, r3
 8002550:	69ba      	ldr	r2, [r7, #24]
 8002552:	4013      	ands	r3, r2
 8002554:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002556:	683b      	ldr	r3, [r7, #0]
 8002558:	68da      	ldr	r2, [r3, #12]
 800255a:	69fb      	ldr	r3, [r7, #28]
 800255c:	005b      	lsls	r3, r3, #1
 800255e:	fa02 f303 	lsl.w	r3, r2, r3
 8002562:	69ba      	ldr	r2, [r7, #24]
 8002564:	4313      	orrs	r3, r2
 8002566:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	69ba      	ldr	r2, [r7, #24]
 800256c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	685b      	ldr	r3, [r3, #4]
 8002572:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002574:	2201      	movs	r2, #1
 8002576:	69fb      	ldr	r3, [r7, #28]
 8002578:	fa02 f303 	lsl.w	r3, r2, r3
 800257c:	43db      	mvns	r3, r3
 800257e:	69ba      	ldr	r2, [r7, #24]
 8002580:	4013      	ands	r3, r2
 8002582:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002584:	683b      	ldr	r3, [r7, #0]
 8002586:	685b      	ldr	r3, [r3, #4]
 8002588:	091b      	lsrs	r3, r3, #4
 800258a:	f003 0201 	and.w	r2, r3, #1
 800258e:	69fb      	ldr	r3, [r7, #28]
 8002590:	fa02 f303 	lsl.w	r3, r2, r3
 8002594:	69ba      	ldr	r2, [r7, #24]
 8002596:	4313      	orrs	r3, r2
 8002598:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	69ba      	ldr	r2, [r7, #24]
 800259e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80025a0:	683b      	ldr	r3, [r7, #0]
 80025a2:	685b      	ldr	r3, [r3, #4]
 80025a4:	f003 0303 	and.w	r3, r3, #3
 80025a8:	2b03      	cmp	r3, #3
 80025aa:	d017      	beq.n	80025dc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	68db      	ldr	r3, [r3, #12]
 80025b0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80025b2:	69fb      	ldr	r3, [r7, #28]
 80025b4:	005b      	lsls	r3, r3, #1
 80025b6:	2203      	movs	r2, #3
 80025b8:	fa02 f303 	lsl.w	r3, r2, r3
 80025bc:	43db      	mvns	r3, r3
 80025be:	69ba      	ldr	r2, [r7, #24]
 80025c0:	4013      	ands	r3, r2
 80025c2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80025c4:	683b      	ldr	r3, [r7, #0]
 80025c6:	689a      	ldr	r2, [r3, #8]
 80025c8:	69fb      	ldr	r3, [r7, #28]
 80025ca:	005b      	lsls	r3, r3, #1
 80025cc:	fa02 f303 	lsl.w	r3, r2, r3
 80025d0:	69ba      	ldr	r2, [r7, #24]
 80025d2:	4313      	orrs	r3, r2
 80025d4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	69ba      	ldr	r2, [r7, #24]
 80025da:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80025dc:	683b      	ldr	r3, [r7, #0]
 80025de:	685b      	ldr	r3, [r3, #4]
 80025e0:	f003 0303 	and.w	r3, r3, #3
 80025e4:	2b02      	cmp	r3, #2
 80025e6:	d123      	bne.n	8002630 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80025e8:	69fb      	ldr	r3, [r7, #28]
 80025ea:	08da      	lsrs	r2, r3, #3
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	3208      	adds	r2, #8
 80025f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80025f4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80025f6:	69fb      	ldr	r3, [r7, #28]
 80025f8:	f003 0307 	and.w	r3, r3, #7
 80025fc:	009b      	lsls	r3, r3, #2
 80025fe:	220f      	movs	r2, #15
 8002600:	fa02 f303 	lsl.w	r3, r2, r3
 8002604:	43db      	mvns	r3, r3
 8002606:	69ba      	ldr	r2, [r7, #24]
 8002608:	4013      	ands	r3, r2
 800260a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800260c:	683b      	ldr	r3, [r7, #0]
 800260e:	691a      	ldr	r2, [r3, #16]
 8002610:	69fb      	ldr	r3, [r7, #28]
 8002612:	f003 0307 	and.w	r3, r3, #7
 8002616:	009b      	lsls	r3, r3, #2
 8002618:	fa02 f303 	lsl.w	r3, r2, r3
 800261c:	69ba      	ldr	r2, [r7, #24]
 800261e:	4313      	orrs	r3, r2
 8002620:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002622:	69fb      	ldr	r3, [r7, #28]
 8002624:	08da      	lsrs	r2, r3, #3
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	3208      	adds	r2, #8
 800262a:	69b9      	ldr	r1, [r7, #24]
 800262c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002636:	69fb      	ldr	r3, [r7, #28]
 8002638:	005b      	lsls	r3, r3, #1
 800263a:	2203      	movs	r2, #3
 800263c:	fa02 f303 	lsl.w	r3, r2, r3
 8002640:	43db      	mvns	r3, r3
 8002642:	69ba      	ldr	r2, [r7, #24]
 8002644:	4013      	ands	r3, r2
 8002646:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002648:	683b      	ldr	r3, [r7, #0]
 800264a:	685b      	ldr	r3, [r3, #4]
 800264c:	f003 0203 	and.w	r2, r3, #3
 8002650:	69fb      	ldr	r3, [r7, #28]
 8002652:	005b      	lsls	r3, r3, #1
 8002654:	fa02 f303 	lsl.w	r3, r2, r3
 8002658:	69ba      	ldr	r2, [r7, #24]
 800265a:	4313      	orrs	r3, r2
 800265c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	69ba      	ldr	r2, [r7, #24]
 8002662:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002664:	683b      	ldr	r3, [r7, #0]
 8002666:	685b      	ldr	r3, [r3, #4]
 8002668:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800266c:	2b00      	cmp	r3, #0
 800266e:	f000 80c0 	beq.w	80027f2 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002672:	2300      	movs	r3, #0
 8002674:	60fb      	str	r3, [r7, #12]
 8002676:	4b66      	ldr	r3, [pc, #408]	; (8002810 <HAL_GPIO_Init+0x324>)
 8002678:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800267a:	4a65      	ldr	r2, [pc, #404]	; (8002810 <HAL_GPIO_Init+0x324>)
 800267c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002680:	6453      	str	r3, [r2, #68]	; 0x44
 8002682:	4b63      	ldr	r3, [pc, #396]	; (8002810 <HAL_GPIO_Init+0x324>)
 8002684:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002686:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800268a:	60fb      	str	r3, [r7, #12]
 800268c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800268e:	4a61      	ldr	r2, [pc, #388]	; (8002814 <HAL_GPIO_Init+0x328>)
 8002690:	69fb      	ldr	r3, [r7, #28]
 8002692:	089b      	lsrs	r3, r3, #2
 8002694:	3302      	adds	r3, #2
 8002696:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800269a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800269c:	69fb      	ldr	r3, [r7, #28]
 800269e:	f003 0303 	and.w	r3, r3, #3
 80026a2:	009b      	lsls	r3, r3, #2
 80026a4:	220f      	movs	r2, #15
 80026a6:	fa02 f303 	lsl.w	r3, r2, r3
 80026aa:	43db      	mvns	r3, r3
 80026ac:	69ba      	ldr	r2, [r7, #24]
 80026ae:	4013      	ands	r3, r2
 80026b0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	4a58      	ldr	r2, [pc, #352]	; (8002818 <HAL_GPIO_Init+0x32c>)
 80026b6:	4293      	cmp	r3, r2
 80026b8:	d037      	beq.n	800272a <HAL_GPIO_Init+0x23e>
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	4a57      	ldr	r2, [pc, #348]	; (800281c <HAL_GPIO_Init+0x330>)
 80026be:	4293      	cmp	r3, r2
 80026c0:	d031      	beq.n	8002726 <HAL_GPIO_Init+0x23a>
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	4a56      	ldr	r2, [pc, #344]	; (8002820 <HAL_GPIO_Init+0x334>)
 80026c6:	4293      	cmp	r3, r2
 80026c8:	d02b      	beq.n	8002722 <HAL_GPIO_Init+0x236>
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	4a55      	ldr	r2, [pc, #340]	; (8002824 <HAL_GPIO_Init+0x338>)
 80026ce:	4293      	cmp	r3, r2
 80026d0:	d025      	beq.n	800271e <HAL_GPIO_Init+0x232>
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	4a54      	ldr	r2, [pc, #336]	; (8002828 <HAL_GPIO_Init+0x33c>)
 80026d6:	4293      	cmp	r3, r2
 80026d8:	d01f      	beq.n	800271a <HAL_GPIO_Init+0x22e>
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	4a53      	ldr	r2, [pc, #332]	; (800282c <HAL_GPIO_Init+0x340>)
 80026de:	4293      	cmp	r3, r2
 80026e0:	d019      	beq.n	8002716 <HAL_GPIO_Init+0x22a>
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	4a52      	ldr	r2, [pc, #328]	; (8002830 <HAL_GPIO_Init+0x344>)
 80026e6:	4293      	cmp	r3, r2
 80026e8:	d013      	beq.n	8002712 <HAL_GPIO_Init+0x226>
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	4a51      	ldr	r2, [pc, #324]	; (8002834 <HAL_GPIO_Init+0x348>)
 80026ee:	4293      	cmp	r3, r2
 80026f0:	d00d      	beq.n	800270e <HAL_GPIO_Init+0x222>
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	4a50      	ldr	r2, [pc, #320]	; (8002838 <HAL_GPIO_Init+0x34c>)
 80026f6:	4293      	cmp	r3, r2
 80026f8:	d007      	beq.n	800270a <HAL_GPIO_Init+0x21e>
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	4a4f      	ldr	r2, [pc, #316]	; (800283c <HAL_GPIO_Init+0x350>)
 80026fe:	4293      	cmp	r3, r2
 8002700:	d101      	bne.n	8002706 <HAL_GPIO_Init+0x21a>
 8002702:	2309      	movs	r3, #9
 8002704:	e012      	b.n	800272c <HAL_GPIO_Init+0x240>
 8002706:	230a      	movs	r3, #10
 8002708:	e010      	b.n	800272c <HAL_GPIO_Init+0x240>
 800270a:	2308      	movs	r3, #8
 800270c:	e00e      	b.n	800272c <HAL_GPIO_Init+0x240>
 800270e:	2307      	movs	r3, #7
 8002710:	e00c      	b.n	800272c <HAL_GPIO_Init+0x240>
 8002712:	2306      	movs	r3, #6
 8002714:	e00a      	b.n	800272c <HAL_GPIO_Init+0x240>
 8002716:	2305      	movs	r3, #5
 8002718:	e008      	b.n	800272c <HAL_GPIO_Init+0x240>
 800271a:	2304      	movs	r3, #4
 800271c:	e006      	b.n	800272c <HAL_GPIO_Init+0x240>
 800271e:	2303      	movs	r3, #3
 8002720:	e004      	b.n	800272c <HAL_GPIO_Init+0x240>
 8002722:	2302      	movs	r3, #2
 8002724:	e002      	b.n	800272c <HAL_GPIO_Init+0x240>
 8002726:	2301      	movs	r3, #1
 8002728:	e000      	b.n	800272c <HAL_GPIO_Init+0x240>
 800272a:	2300      	movs	r3, #0
 800272c:	69fa      	ldr	r2, [r7, #28]
 800272e:	f002 0203 	and.w	r2, r2, #3
 8002732:	0092      	lsls	r2, r2, #2
 8002734:	4093      	lsls	r3, r2
 8002736:	69ba      	ldr	r2, [r7, #24]
 8002738:	4313      	orrs	r3, r2
 800273a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800273c:	4935      	ldr	r1, [pc, #212]	; (8002814 <HAL_GPIO_Init+0x328>)
 800273e:	69fb      	ldr	r3, [r7, #28]
 8002740:	089b      	lsrs	r3, r3, #2
 8002742:	3302      	adds	r3, #2
 8002744:	69ba      	ldr	r2, [r7, #24]
 8002746:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800274a:	4b3d      	ldr	r3, [pc, #244]	; (8002840 <HAL_GPIO_Init+0x354>)
 800274c:	689b      	ldr	r3, [r3, #8]
 800274e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002750:	693b      	ldr	r3, [r7, #16]
 8002752:	43db      	mvns	r3, r3
 8002754:	69ba      	ldr	r2, [r7, #24]
 8002756:	4013      	ands	r3, r2
 8002758:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800275a:	683b      	ldr	r3, [r7, #0]
 800275c:	685b      	ldr	r3, [r3, #4]
 800275e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002762:	2b00      	cmp	r3, #0
 8002764:	d003      	beq.n	800276e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002766:	69ba      	ldr	r2, [r7, #24]
 8002768:	693b      	ldr	r3, [r7, #16]
 800276a:	4313      	orrs	r3, r2
 800276c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800276e:	4a34      	ldr	r2, [pc, #208]	; (8002840 <HAL_GPIO_Init+0x354>)
 8002770:	69bb      	ldr	r3, [r7, #24]
 8002772:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002774:	4b32      	ldr	r3, [pc, #200]	; (8002840 <HAL_GPIO_Init+0x354>)
 8002776:	68db      	ldr	r3, [r3, #12]
 8002778:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800277a:	693b      	ldr	r3, [r7, #16]
 800277c:	43db      	mvns	r3, r3
 800277e:	69ba      	ldr	r2, [r7, #24]
 8002780:	4013      	ands	r3, r2
 8002782:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002784:	683b      	ldr	r3, [r7, #0]
 8002786:	685b      	ldr	r3, [r3, #4]
 8002788:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800278c:	2b00      	cmp	r3, #0
 800278e:	d003      	beq.n	8002798 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002790:	69ba      	ldr	r2, [r7, #24]
 8002792:	693b      	ldr	r3, [r7, #16]
 8002794:	4313      	orrs	r3, r2
 8002796:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002798:	4a29      	ldr	r2, [pc, #164]	; (8002840 <HAL_GPIO_Init+0x354>)
 800279a:	69bb      	ldr	r3, [r7, #24]
 800279c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800279e:	4b28      	ldr	r3, [pc, #160]	; (8002840 <HAL_GPIO_Init+0x354>)
 80027a0:	685b      	ldr	r3, [r3, #4]
 80027a2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80027a4:	693b      	ldr	r3, [r7, #16]
 80027a6:	43db      	mvns	r3, r3
 80027a8:	69ba      	ldr	r2, [r7, #24]
 80027aa:	4013      	ands	r3, r2
 80027ac:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80027ae:	683b      	ldr	r3, [r7, #0]
 80027b0:	685b      	ldr	r3, [r3, #4]
 80027b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d003      	beq.n	80027c2 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80027ba:	69ba      	ldr	r2, [r7, #24]
 80027bc:	693b      	ldr	r3, [r7, #16]
 80027be:	4313      	orrs	r3, r2
 80027c0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80027c2:	4a1f      	ldr	r2, [pc, #124]	; (8002840 <HAL_GPIO_Init+0x354>)
 80027c4:	69bb      	ldr	r3, [r7, #24]
 80027c6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80027c8:	4b1d      	ldr	r3, [pc, #116]	; (8002840 <HAL_GPIO_Init+0x354>)
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80027ce:	693b      	ldr	r3, [r7, #16]
 80027d0:	43db      	mvns	r3, r3
 80027d2:	69ba      	ldr	r2, [r7, #24]
 80027d4:	4013      	ands	r3, r2
 80027d6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80027d8:	683b      	ldr	r3, [r7, #0]
 80027da:	685b      	ldr	r3, [r3, #4]
 80027dc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d003      	beq.n	80027ec <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80027e4:	69ba      	ldr	r2, [r7, #24]
 80027e6:	693b      	ldr	r3, [r7, #16]
 80027e8:	4313      	orrs	r3, r2
 80027ea:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80027ec:	4a14      	ldr	r2, [pc, #80]	; (8002840 <HAL_GPIO_Init+0x354>)
 80027ee:	69bb      	ldr	r3, [r7, #24]
 80027f0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80027f2:	69fb      	ldr	r3, [r7, #28]
 80027f4:	3301      	adds	r3, #1
 80027f6:	61fb      	str	r3, [r7, #28]
 80027f8:	69fb      	ldr	r3, [r7, #28]
 80027fa:	2b0f      	cmp	r3, #15
 80027fc:	f67f ae84 	bls.w	8002508 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002800:	bf00      	nop
 8002802:	bf00      	nop
 8002804:	3724      	adds	r7, #36	; 0x24
 8002806:	46bd      	mov	sp, r7
 8002808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800280c:	4770      	bx	lr
 800280e:	bf00      	nop
 8002810:	40023800 	.word	0x40023800
 8002814:	40013800 	.word	0x40013800
 8002818:	40020000 	.word	0x40020000
 800281c:	40020400 	.word	0x40020400
 8002820:	40020800 	.word	0x40020800
 8002824:	40020c00 	.word	0x40020c00
 8002828:	40021000 	.word	0x40021000
 800282c:	40021400 	.word	0x40021400
 8002830:	40021800 	.word	0x40021800
 8002834:	40021c00 	.word	0x40021c00
 8002838:	40022000 	.word	0x40022000
 800283c:	40022400 	.word	0x40022400
 8002840:	40013c00 	.word	0x40013c00

08002844 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002844:	b480      	push	{r7}
 8002846:	b083      	sub	sp, #12
 8002848:	af00      	add	r7, sp, #0
 800284a:	6078      	str	r0, [r7, #4]
 800284c:	460b      	mov	r3, r1
 800284e:	807b      	strh	r3, [r7, #2]
 8002850:	4613      	mov	r3, r2
 8002852:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002854:	787b      	ldrb	r3, [r7, #1]
 8002856:	2b00      	cmp	r3, #0
 8002858:	d003      	beq.n	8002862 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800285a:	887a      	ldrh	r2, [r7, #2]
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002860:	e003      	b.n	800286a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002862:	887b      	ldrh	r3, [r7, #2]
 8002864:	041a      	lsls	r2, r3, #16
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	619a      	str	r2, [r3, #24]
}
 800286a:	bf00      	nop
 800286c:	370c      	adds	r7, #12
 800286e:	46bd      	mov	sp, r7
 8002870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002874:	4770      	bx	lr
	...

08002878 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002878:	b580      	push	{r7, lr}
 800287a:	b082      	sub	sp, #8
 800287c:	af00      	add	r7, sp, #0
 800287e:	4603      	mov	r3, r0
 8002880:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8002882:	4b08      	ldr	r3, [pc, #32]	; (80028a4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002884:	695a      	ldr	r2, [r3, #20]
 8002886:	88fb      	ldrh	r3, [r7, #6]
 8002888:	4013      	ands	r3, r2
 800288a:	2b00      	cmp	r3, #0
 800288c:	d006      	beq.n	800289c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800288e:	4a05      	ldr	r2, [pc, #20]	; (80028a4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002890:	88fb      	ldrh	r3, [r7, #6]
 8002892:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002894:	88fb      	ldrh	r3, [r7, #6]
 8002896:	4618      	mov	r0, r3
 8002898:	f7fd fe9c 	bl	80005d4 <HAL_GPIO_EXTI_Callback>
  }
}
 800289c:	bf00      	nop
 800289e:	3708      	adds	r7, #8
 80028a0:	46bd      	mov	sp, r7
 80028a2:	bd80      	pop	{r7, pc}
 80028a4:	40013c00 	.word	0x40013c00

080028a8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80028a8:	b580      	push	{r7, lr}
 80028aa:	b086      	sub	sp, #24
 80028ac:	af00      	add	r7, sp, #0
 80028ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d101      	bne.n	80028ba <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80028b6:	2301      	movs	r3, #1
 80028b8:	e267      	b.n	8002d8a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	f003 0301 	and.w	r3, r3, #1
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d075      	beq.n	80029b2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80028c6:	4b88      	ldr	r3, [pc, #544]	; (8002ae8 <HAL_RCC_OscConfig+0x240>)
 80028c8:	689b      	ldr	r3, [r3, #8]
 80028ca:	f003 030c 	and.w	r3, r3, #12
 80028ce:	2b04      	cmp	r3, #4
 80028d0:	d00c      	beq.n	80028ec <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80028d2:	4b85      	ldr	r3, [pc, #532]	; (8002ae8 <HAL_RCC_OscConfig+0x240>)
 80028d4:	689b      	ldr	r3, [r3, #8]
 80028d6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80028da:	2b08      	cmp	r3, #8
 80028dc:	d112      	bne.n	8002904 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80028de:	4b82      	ldr	r3, [pc, #520]	; (8002ae8 <HAL_RCC_OscConfig+0x240>)
 80028e0:	685b      	ldr	r3, [r3, #4]
 80028e2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80028e6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80028ea:	d10b      	bne.n	8002904 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80028ec:	4b7e      	ldr	r3, [pc, #504]	; (8002ae8 <HAL_RCC_OscConfig+0x240>)
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d05b      	beq.n	80029b0 <HAL_RCC_OscConfig+0x108>
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	685b      	ldr	r3, [r3, #4]
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d157      	bne.n	80029b0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002900:	2301      	movs	r3, #1
 8002902:	e242      	b.n	8002d8a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	685b      	ldr	r3, [r3, #4]
 8002908:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800290c:	d106      	bne.n	800291c <HAL_RCC_OscConfig+0x74>
 800290e:	4b76      	ldr	r3, [pc, #472]	; (8002ae8 <HAL_RCC_OscConfig+0x240>)
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	4a75      	ldr	r2, [pc, #468]	; (8002ae8 <HAL_RCC_OscConfig+0x240>)
 8002914:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002918:	6013      	str	r3, [r2, #0]
 800291a:	e01d      	b.n	8002958 <HAL_RCC_OscConfig+0xb0>
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	685b      	ldr	r3, [r3, #4]
 8002920:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002924:	d10c      	bne.n	8002940 <HAL_RCC_OscConfig+0x98>
 8002926:	4b70      	ldr	r3, [pc, #448]	; (8002ae8 <HAL_RCC_OscConfig+0x240>)
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	4a6f      	ldr	r2, [pc, #444]	; (8002ae8 <HAL_RCC_OscConfig+0x240>)
 800292c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002930:	6013      	str	r3, [r2, #0]
 8002932:	4b6d      	ldr	r3, [pc, #436]	; (8002ae8 <HAL_RCC_OscConfig+0x240>)
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	4a6c      	ldr	r2, [pc, #432]	; (8002ae8 <HAL_RCC_OscConfig+0x240>)
 8002938:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800293c:	6013      	str	r3, [r2, #0]
 800293e:	e00b      	b.n	8002958 <HAL_RCC_OscConfig+0xb0>
 8002940:	4b69      	ldr	r3, [pc, #420]	; (8002ae8 <HAL_RCC_OscConfig+0x240>)
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	4a68      	ldr	r2, [pc, #416]	; (8002ae8 <HAL_RCC_OscConfig+0x240>)
 8002946:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800294a:	6013      	str	r3, [r2, #0]
 800294c:	4b66      	ldr	r3, [pc, #408]	; (8002ae8 <HAL_RCC_OscConfig+0x240>)
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	4a65      	ldr	r2, [pc, #404]	; (8002ae8 <HAL_RCC_OscConfig+0x240>)
 8002952:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002956:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	685b      	ldr	r3, [r3, #4]
 800295c:	2b00      	cmp	r3, #0
 800295e:	d013      	beq.n	8002988 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002960:	f7fe fb8c 	bl	800107c <HAL_GetTick>
 8002964:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002966:	e008      	b.n	800297a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002968:	f7fe fb88 	bl	800107c <HAL_GetTick>
 800296c:	4602      	mov	r2, r0
 800296e:	693b      	ldr	r3, [r7, #16]
 8002970:	1ad3      	subs	r3, r2, r3
 8002972:	2b64      	cmp	r3, #100	; 0x64
 8002974:	d901      	bls.n	800297a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002976:	2303      	movs	r3, #3
 8002978:	e207      	b.n	8002d8a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800297a:	4b5b      	ldr	r3, [pc, #364]	; (8002ae8 <HAL_RCC_OscConfig+0x240>)
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002982:	2b00      	cmp	r3, #0
 8002984:	d0f0      	beq.n	8002968 <HAL_RCC_OscConfig+0xc0>
 8002986:	e014      	b.n	80029b2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002988:	f7fe fb78 	bl	800107c <HAL_GetTick>
 800298c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800298e:	e008      	b.n	80029a2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002990:	f7fe fb74 	bl	800107c <HAL_GetTick>
 8002994:	4602      	mov	r2, r0
 8002996:	693b      	ldr	r3, [r7, #16]
 8002998:	1ad3      	subs	r3, r2, r3
 800299a:	2b64      	cmp	r3, #100	; 0x64
 800299c:	d901      	bls.n	80029a2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800299e:	2303      	movs	r3, #3
 80029a0:	e1f3      	b.n	8002d8a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80029a2:	4b51      	ldr	r3, [pc, #324]	; (8002ae8 <HAL_RCC_OscConfig+0x240>)
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d1f0      	bne.n	8002990 <HAL_RCC_OscConfig+0xe8>
 80029ae:	e000      	b.n	80029b2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80029b0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	f003 0302 	and.w	r3, r3, #2
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d063      	beq.n	8002a86 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80029be:	4b4a      	ldr	r3, [pc, #296]	; (8002ae8 <HAL_RCC_OscConfig+0x240>)
 80029c0:	689b      	ldr	r3, [r3, #8]
 80029c2:	f003 030c 	and.w	r3, r3, #12
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d00b      	beq.n	80029e2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80029ca:	4b47      	ldr	r3, [pc, #284]	; (8002ae8 <HAL_RCC_OscConfig+0x240>)
 80029cc:	689b      	ldr	r3, [r3, #8]
 80029ce:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80029d2:	2b08      	cmp	r3, #8
 80029d4:	d11c      	bne.n	8002a10 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80029d6:	4b44      	ldr	r3, [pc, #272]	; (8002ae8 <HAL_RCC_OscConfig+0x240>)
 80029d8:	685b      	ldr	r3, [r3, #4]
 80029da:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d116      	bne.n	8002a10 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80029e2:	4b41      	ldr	r3, [pc, #260]	; (8002ae8 <HAL_RCC_OscConfig+0x240>)
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	f003 0302 	and.w	r3, r3, #2
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d005      	beq.n	80029fa <HAL_RCC_OscConfig+0x152>
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	68db      	ldr	r3, [r3, #12]
 80029f2:	2b01      	cmp	r3, #1
 80029f4:	d001      	beq.n	80029fa <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80029f6:	2301      	movs	r3, #1
 80029f8:	e1c7      	b.n	8002d8a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80029fa:	4b3b      	ldr	r3, [pc, #236]	; (8002ae8 <HAL_RCC_OscConfig+0x240>)
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	691b      	ldr	r3, [r3, #16]
 8002a06:	00db      	lsls	r3, r3, #3
 8002a08:	4937      	ldr	r1, [pc, #220]	; (8002ae8 <HAL_RCC_OscConfig+0x240>)
 8002a0a:	4313      	orrs	r3, r2
 8002a0c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002a0e:	e03a      	b.n	8002a86 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	68db      	ldr	r3, [r3, #12]
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d020      	beq.n	8002a5a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002a18:	4b34      	ldr	r3, [pc, #208]	; (8002aec <HAL_RCC_OscConfig+0x244>)
 8002a1a:	2201      	movs	r2, #1
 8002a1c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a1e:	f7fe fb2d 	bl	800107c <HAL_GetTick>
 8002a22:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a24:	e008      	b.n	8002a38 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002a26:	f7fe fb29 	bl	800107c <HAL_GetTick>
 8002a2a:	4602      	mov	r2, r0
 8002a2c:	693b      	ldr	r3, [r7, #16]
 8002a2e:	1ad3      	subs	r3, r2, r3
 8002a30:	2b02      	cmp	r3, #2
 8002a32:	d901      	bls.n	8002a38 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002a34:	2303      	movs	r3, #3
 8002a36:	e1a8      	b.n	8002d8a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a38:	4b2b      	ldr	r3, [pc, #172]	; (8002ae8 <HAL_RCC_OscConfig+0x240>)
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	f003 0302 	and.w	r3, r3, #2
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d0f0      	beq.n	8002a26 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a44:	4b28      	ldr	r3, [pc, #160]	; (8002ae8 <HAL_RCC_OscConfig+0x240>)
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	691b      	ldr	r3, [r3, #16]
 8002a50:	00db      	lsls	r3, r3, #3
 8002a52:	4925      	ldr	r1, [pc, #148]	; (8002ae8 <HAL_RCC_OscConfig+0x240>)
 8002a54:	4313      	orrs	r3, r2
 8002a56:	600b      	str	r3, [r1, #0]
 8002a58:	e015      	b.n	8002a86 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002a5a:	4b24      	ldr	r3, [pc, #144]	; (8002aec <HAL_RCC_OscConfig+0x244>)
 8002a5c:	2200      	movs	r2, #0
 8002a5e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a60:	f7fe fb0c 	bl	800107c <HAL_GetTick>
 8002a64:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002a66:	e008      	b.n	8002a7a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002a68:	f7fe fb08 	bl	800107c <HAL_GetTick>
 8002a6c:	4602      	mov	r2, r0
 8002a6e:	693b      	ldr	r3, [r7, #16]
 8002a70:	1ad3      	subs	r3, r2, r3
 8002a72:	2b02      	cmp	r3, #2
 8002a74:	d901      	bls.n	8002a7a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002a76:	2303      	movs	r3, #3
 8002a78:	e187      	b.n	8002d8a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002a7a:	4b1b      	ldr	r3, [pc, #108]	; (8002ae8 <HAL_RCC_OscConfig+0x240>)
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	f003 0302 	and.w	r3, r3, #2
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d1f0      	bne.n	8002a68 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	f003 0308 	and.w	r3, r3, #8
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d036      	beq.n	8002b00 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	695b      	ldr	r3, [r3, #20]
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d016      	beq.n	8002ac8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002a9a:	4b15      	ldr	r3, [pc, #84]	; (8002af0 <HAL_RCC_OscConfig+0x248>)
 8002a9c:	2201      	movs	r2, #1
 8002a9e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002aa0:	f7fe faec 	bl	800107c <HAL_GetTick>
 8002aa4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002aa6:	e008      	b.n	8002aba <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002aa8:	f7fe fae8 	bl	800107c <HAL_GetTick>
 8002aac:	4602      	mov	r2, r0
 8002aae:	693b      	ldr	r3, [r7, #16]
 8002ab0:	1ad3      	subs	r3, r2, r3
 8002ab2:	2b02      	cmp	r3, #2
 8002ab4:	d901      	bls.n	8002aba <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002ab6:	2303      	movs	r3, #3
 8002ab8:	e167      	b.n	8002d8a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002aba:	4b0b      	ldr	r3, [pc, #44]	; (8002ae8 <HAL_RCC_OscConfig+0x240>)
 8002abc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002abe:	f003 0302 	and.w	r3, r3, #2
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d0f0      	beq.n	8002aa8 <HAL_RCC_OscConfig+0x200>
 8002ac6:	e01b      	b.n	8002b00 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002ac8:	4b09      	ldr	r3, [pc, #36]	; (8002af0 <HAL_RCC_OscConfig+0x248>)
 8002aca:	2200      	movs	r2, #0
 8002acc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002ace:	f7fe fad5 	bl	800107c <HAL_GetTick>
 8002ad2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002ad4:	e00e      	b.n	8002af4 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002ad6:	f7fe fad1 	bl	800107c <HAL_GetTick>
 8002ada:	4602      	mov	r2, r0
 8002adc:	693b      	ldr	r3, [r7, #16]
 8002ade:	1ad3      	subs	r3, r2, r3
 8002ae0:	2b02      	cmp	r3, #2
 8002ae2:	d907      	bls.n	8002af4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002ae4:	2303      	movs	r3, #3
 8002ae6:	e150      	b.n	8002d8a <HAL_RCC_OscConfig+0x4e2>
 8002ae8:	40023800 	.word	0x40023800
 8002aec:	42470000 	.word	0x42470000
 8002af0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002af4:	4b88      	ldr	r3, [pc, #544]	; (8002d18 <HAL_RCC_OscConfig+0x470>)
 8002af6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002af8:	f003 0302 	and.w	r3, r3, #2
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d1ea      	bne.n	8002ad6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	f003 0304 	and.w	r3, r3, #4
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	f000 8097 	beq.w	8002c3c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002b0e:	2300      	movs	r3, #0
 8002b10:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002b12:	4b81      	ldr	r3, [pc, #516]	; (8002d18 <HAL_RCC_OscConfig+0x470>)
 8002b14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b16:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d10f      	bne.n	8002b3e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002b1e:	2300      	movs	r3, #0
 8002b20:	60bb      	str	r3, [r7, #8]
 8002b22:	4b7d      	ldr	r3, [pc, #500]	; (8002d18 <HAL_RCC_OscConfig+0x470>)
 8002b24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b26:	4a7c      	ldr	r2, [pc, #496]	; (8002d18 <HAL_RCC_OscConfig+0x470>)
 8002b28:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002b2c:	6413      	str	r3, [r2, #64]	; 0x40
 8002b2e:	4b7a      	ldr	r3, [pc, #488]	; (8002d18 <HAL_RCC_OscConfig+0x470>)
 8002b30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b32:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b36:	60bb      	str	r3, [r7, #8]
 8002b38:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002b3a:	2301      	movs	r3, #1
 8002b3c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b3e:	4b77      	ldr	r3, [pc, #476]	; (8002d1c <HAL_RCC_OscConfig+0x474>)
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d118      	bne.n	8002b7c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002b4a:	4b74      	ldr	r3, [pc, #464]	; (8002d1c <HAL_RCC_OscConfig+0x474>)
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	4a73      	ldr	r2, [pc, #460]	; (8002d1c <HAL_RCC_OscConfig+0x474>)
 8002b50:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002b54:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002b56:	f7fe fa91 	bl	800107c <HAL_GetTick>
 8002b5a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b5c:	e008      	b.n	8002b70 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002b5e:	f7fe fa8d 	bl	800107c <HAL_GetTick>
 8002b62:	4602      	mov	r2, r0
 8002b64:	693b      	ldr	r3, [r7, #16]
 8002b66:	1ad3      	subs	r3, r2, r3
 8002b68:	2b02      	cmp	r3, #2
 8002b6a:	d901      	bls.n	8002b70 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002b6c:	2303      	movs	r3, #3
 8002b6e:	e10c      	b.n	8002d8a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b70:	4b6a      	ldr	r3, [pc, #424]	; (8002d1c <HAL_RCC_OscConfig+0x474>)
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d0f0      	beq.n	8002b5e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	689b      	ldr	r3, [r3, #8]
 8002b80:	2b01      	cmp	r3, #1
 8002b82:	d106      	bne.n	8002b92 <HAL_RCC_OscConfig+0x2ea>
 8002b84:	4b64      	ldr	r3, [pc, #400]	; (8002d18 <HAL_RCC_OscConfig+0x470>)
 8002b86:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b88:	4a63      	ldr	r2, [pc, #396]	; (8002d18 <HAL_RCC_OscConfig+0x470>)
 8002b8a:	f043 0301 	orr.w	r3, r3, #1
 8002b8e:	6713      	str	r3, [r2, #112]	; 0x70
 8002b90:	e01c      	b.n	8002bcc <HAL_RCC_OscConfig+0x324>
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	689b      	ldr	r3, [r3, #8]
 8002b96:	2b05      	cmp	r3, #5
 8002b98:	d10c      	bne.n	8002bb4 <HAL_RCC_OscConfig+0x30c>
 8002b9a:	4b5f      	ldr	r3, [pc, #380]	; (8002d18 <HAL_RCC_OscConfig+0x470>)
 8002b9c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b9e:	4a5e      	ldr	r2, [pc, #376]	; (8002d18 <HAL_RCC_OscConfig+0x470>)
 8002ba0:	f043 0304 	orr.w	r3, r3, #4
 8002ba4:	6713      	str	r3, [r2, #112]	; 0x70
 8002ba6:	4b5c      	ldr	r3, [pc, #368]	; (8002d18 <HAL_RCC_OscConfig+0x470>)
 8002ba8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002baa:	4a5b      	ldr	r2, [pc, #364]	; (8002d18 <HAL_RCC_OscConfig+0x470>)
 8002bac:	f043 0301 	orr.w	r3, r3, #1
 8002bb0:	6713      	str	r3, [r2, #112]	; 0x70
 8002bb2:	e00b      	b.n	8002bcc <HAL_RCC_OscConfig+0x324>
 8002bb4:	4b58      	ldr	r3, [pc, #352]	; (8002d18 <HAL_RCC_OscConfig+0x470>)
 8002bb6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002bb8:	4a57      	ldr	r2, [pc, #348]	; (8002d18 <HAL_RCC_OscConfig+0x470>)
 8002bba:	f023 0301 	bic.w	r3, r3, #1
 8002bbe:	6713      	str	r3, [r2, #112]	; 0x70
 8002bc0:	4b55      	ldr	r3, [pc, #340]	; (8002d18 <HAL_RCC_OscConfig+0x470>)
 8002bc2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002bc4:	4a54      	ldr	r2, [pc, #336]	; (8002d18 <HAL_RCC_OscConfig+0x470>)
 8002bc6:	f023 0304 	bic.w	r3, r3, #4
 8002bca:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	689b      	ldr	r3, [r3, #8]
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d015      	beq.n	8002c00 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002bd4:	f7fe fa52 	bl	800107c <HAL_GetTick>
 8002bd8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002bda:	e00a      	b.n	8002bf2 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002bdc:	f7fe fa4e 	bl	800107c <HAL_GetTick>
 8002be0:	4602      	mov	r2, r0
 8002be2:	693b      	ldr	r3, [r7, #16]
 8002be4:	1ad3      	subs	r3, r2, r3
 8002be6:	f241 3288 	movw	r2, #5000	; 0x1388
 8002bea:	4293      	cmp	r3, r2
 8002bec:	d901      	bls.n	8002bf2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002bee:	2303      	movs	r3, #3
 8002bf0:	e0cb      	b.n	8002d8a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002bf2:	4b49      	ldr	r3, [pc, #292]	; (8002d18 <HAL_RCC_OscConfig+0x470>)
 8002bf4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002bf6:	f003 0302 	and.w	r3, r3, #2
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d0ee      	beq.n	8002bdc <HAL_RCC_OscConfig+0x334>
 8002bfe:	e014      	b.n	8002c2a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c00:	f7fe fa3c 	bl	800107c <HAL_GetTick>
 8002c04:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002c06:	e00a      	b.n	8002c1e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002c08:	f7fe fa38 	bl	800107c <HAL_GetTick>
 8002c0c:	4602      	mov	r2, r0
 8002c0e:	693b      	ldr	r3, [r7, #16]
 8002c10:	1ad3      	subs	r3, r2, r3
 8002c12:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c16:	4293      	cmp	r3, r2
 8002c18:	d901      	bls.n	8002c1e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002c1a:	2303      	movs	r3, #3
 8002c1c:	e0b5      	b.n	8002d8a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002c1e:	4b3e      	ldr	r3, [pc, #248]	; (8002d18 <HAL_RCC_OscConfig+0x470>)
 8002c20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c22:	f003 0302 	and.w	r3, r3, #2
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d1ee      	bne.n	8002c08 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002c2a:	7dfb      	ldrb	r3, [r7, #23]
 8002c2c:	2b01      	cmp	r3, #1
 8002c2e:	d105      	bne.n	8002c3c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002c30:	4b39      	ldr	r3, [pc, #228]	; (8002d18 <HAL_RCC_OscConfig+0x470>)
 8002c32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c34:	4a38      	ldr	r2, [pc, #224]	; (8002d18 <HAL_RCC_OscConfig+0x470>)
 8002c36:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002c3a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	699b      	ldr	r3, [r3, #24]
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	f000 80a1 	beq.w	8002d88 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002c46:	4b34      	ldr	r3, [pc, #208]	; (8002d18 <HAL_RCC_OscConfig+0x470>)
 8002c48:	689b      	ldr	r3, [r3, #8]
 8002c4a:	f003 030c 	and.w	r3, r3, #12
 8002c4e:	2b08      	cmp	r3, #8
 8002c50:	d05c      	beq.n	8002d0c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	699b      	ldr	r3, [r3, #24]
 8002c56:	2b02      	cmp	r3, #2
 8002c58:	d141      	bne.n	8002cde <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c5a:	4b31      	ldr	r3, [pc, #196]	; (8002d20 <HAL_RCC_OscConfig+0x478>)
 8002c5c:	2200      	movs	r2, #0
 8002c5e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c60:	f7fe fa0c 	bl	800107c <HAL_GetTick>
 8002c64:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002c66:	e008      	b.n	8002c7a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002c68:	f7fe fa08 	bl	800107c <HAL_GetTick>
 8002c6c:	4602      	mov	r2, r0
 8002c6e:	693b      	ldr	r3, [r7, #16]
 8002c70:	1ad3      	subs	r3, r2, r3
 8002c72:	2b02      	cmp	r3, #2
 8002c74:	d901      	bls.n	8002c7a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002c76:	2303      	movs	r3, #3
 8002c78:	e087      	b.n	8002d8a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002c7a:	4b27      	ldr	r3, [pc, #156]	; (8002d18 <HAL_RCC_OscConfig+0x470>)
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d1f0      	bne.n	8002c68 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	69da      	ldr	r2, [r3, #28]
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	6a1b      	ldr	r3, [r3, #32]
 8002c8e:	431a      	orrs	r2, r3
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c94:	019b      	lsls	r3, r3, #6
 8002c96:	431a      	orrs	r2, r3
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c9c:	085b      	lsrs	r3, r3, #1
 8002c9e:	3b01      	subs	r3, #1
 8002ca0:	041b      	lsls	r3, r3, #16
 8002ca2:	431a      	orrs	r2, r3
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ca8:	061b      	lsls	r3, r3, #24
 8002caa:	491b      	ldr	r1, [pc, #108]	; (8002d18 <HAL_RCC_OscConfig+0x470>)
 8002cac:	4313      	orrs	r3, r2
 8002cae:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002cb0:	4b1b      	ldr	r3, [pc, #108]	; (8002d20 <HAL_RCC_OscConfig+0x478>)
 8002cb2:	2201      	movs	r2, #1
 8002cb4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002cb6:	f7fe f9e1 	bl	800107c <HAL_GetTick>
 8002cba:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002cbc:	e008      	b.n	8002cd0 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002cbe:	f7fe f9dd 	bl	800107c <HAL_GetTick>
 8002cc2:	4602      	mov	r2, r0
 8002cc4:	693b      	ldr	r3, [r7, #16]
 8002cc6:	1ad3      	subs	r3, r2, r3
 8002cc8:	2b02      	cmp	r3, #2
 8002cca:	d901      	bls.n	8002cd0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002ccc:	2303      	movs	r3, #3
 8002cce:	e05c      	b.n	8002d8a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002cd0:	4b11      	ldr	r3, [pc, #68]	; (8002d18 <HAL_RCC_OscConfig+0x470>)
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d0f0      	beq.n	8002cbe <HAL_RCC_OscConfig+0x416>
 8002cdc:	e054      	b.n	8002d88 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002cde:	4b10      	ldr	r3, [pc, #64]	; (8002d20 <HAL_RCC_OscConfig+0x478>)
 8002ce0:	2200      	movs	r2, #0
 8002ce2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ce4:	f7fe f9ca 	bl	800107c <HAL_GetTick>
 8002ce8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002cea:	e008      	b.n	8002cfe <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002cec:	f7fe f9c6 	bl	800107c <HAL_GetTick>
 8002cf0:	4602      	mov	r2, r0
 8002cf2:	693b      	ldr	r3, [r7, #16]
 8002cf4:	1ad3      	subs	r3, r2, r3
 8002cf6:	2b02      	cmp	r3, #2
 8002cf8:	d901      	bls.n	8002cfe <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002cfa:	2303      	movs	r3, #3
 8002cfc:	e045      	b.n	8002d8a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002cfe:	4b06      	ldr	r3, [pc, #24]	; (8002d18 <HAL_RCC_OscConfig+0x470>)
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d1f0      	bne.n	8002cec <HAL_RCC_OscConfig+0x444>
 8002d0a:	e03d      	b.n	8002d88 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	699b      	ldr	r3, [r3, #24]
 8002d10:	2b01      	cmp	r3, #1
 8002d12:	d107      	bne.n	8002d24 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002d14:	2301      	movs	r3, #1
 8002d16:	e038      	b.n	8002d8a <HAL_RCC_OscConfig+0x4e2>
 8002d18:	40023800 	.word	0x40023800
 8002d1c:	40007000 	.word	0x40007000
 8002d20:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002d24:	4b1b      	ldr	r3, [pc, #108]	; (8002d94 <HAL_RCC_OscConfig+0x4ec>)
 8002d26:	685b      	ldr	r3, [r3, #4]
 8002d28:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	699b      	ldr	r3, [r3, #24]
 8002d2e:	2b01      	cmp	r3, #1
 8002d30:	d028      	beq.n	8002d84 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002d3c:	429a      	cmp	r2, r3
 8002d3e:	d121      	bne.n	8002d84 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002d4a:	429a      	cmp	r2, r3
 8002d4c:	d11a      	bne.n	8002d84 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002d4e:	68fa      	ldr	r2, [r7, #12]
 8002d50:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002d54:	4013      	ands	r3, r2
 8002d56:	687a      	ldr	r2, [r7, #4]
 8002d58:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002d5a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002d5c:	4293      	cmp	r3, r2
 8002d5e:	d111      	bne.n	8002d84 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d6a:	085b      	lsrs	r3, r3, #1
 8002d6c:	3b01      	subs	r3, #1
 8002d6e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002d70:	429a      	cmp	r2, r3
 8002d72:	d107      	bne.n	8002d84 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d7e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002d80:	429a      	cmp	r2, r3
 8002d82:	d001      	beq.n	8002d88 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002d84:	2301      	movs	r3, #1
 8002d86:	e000      	b.n	8002d8a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002d88:	2300      	movs	r3, #0
}
 8002d8a:	4618      	mov	r0, r3
 8002d8c:	3718      	adds	r7, #24
 8002d8e:	46bd      	mov	sp, r7
 8002d90:	bd80      	pop	{r7, pc}
 8002d92:	bf00      	nop
 8002d94:	40023800 	.word	0x40023800

08002d98 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002d98:	b580      	push	{r7, lr}
 8002d9a:	b084      	sub	sp, #16
 8002d9c:	af00      	add	r7, sp, #0
 8002d9e:	6078      	str	r0, [r7, #4]
 8002da0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d101      	bne.n	8002dac <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002da8:	2301      	movs	r3, #1
 8002daa:	e0cc      	b.n	8002f46 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002dac:	4b68      	ldr	r3, [pc, #416]	; (8002f50 <HAL_RCC_ClockConfig+0x1b8>)
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	f003 030f 	and.w	r3, r3, #15
 8002db4:	683a      	ldr	r2, [r7, #0]
 8002db6:	429a      	cmp	r2, r3
 8002db8:	d90c      	bls.n	8002dd4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002dba:	4b65      	ldr	r3, [pc, #404]	; (8002f50 <HAL_RCC_ClockConfig+0x1b8>)
 8002dbc:	683a      	ldr	r2, [r7, #0]
 8002dbe:	b2d2      	uxtb	r2, r2
 8002dc0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002dc2:	4b63      	ldr	r3, [pc, #396]	; (8002f50 <HAL_RCC_ClockConfig+0x1b8>)
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	f003 030f 	and.w	r3, r3, #15
 8002dca:	683a      	ldr	r2, [r7, #0]
 8002dcc:	429a      	cmp	r2, r3
 8002dce:	d001      	beq.n	8002dd4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002dd0:	2301      	movs	r3, #1
 8002dd2:	e0b8      	b.n	8002f46 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	f003 0302 	and.w	r3, r3, #2
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d020      	beq.n	8002e22 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	f003 0304 	and.w	r3, r3, #4
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d005      	beq.n	8002df8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002dec:	4b59      	ldr	r3, [pc, #356]	; (8002f54 <HAL_RCC_ClockConfig+0x1bc>)
 8002dee:	689b      	ldr	r3, [r3, #8]
 8002df0:	4a58      	ldr	r2, [pc, #352]	; (8002f54 <HAL_RCC_ClockConfig+0x1bc>)
 8002df2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002df6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	f003 0308 	and.w	r3, r3, #8
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d005      	beq.n	8002e10 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002e04:	4b53      	ldr	r3, [pc, #332]	; (8002f54 <HAL_RCC_ClockConfig+0x1bc>)
 8002e06:	689b      	ldr	r3, [r3, #8]
 8002e08:	4a52      	ldr	r2, [pc, #328]	; (8002f54 <HAL_RCC_ClockConfig+0x1bc>)
 8002e0a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002e0e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002e10:	4b50      	ldr	r3, [pc, #320]	; (8002f54 <HAL_RCC_ClockConfig+0x1bc>)
 8002e12:	689b      	ldr	r3, [r3, #8]
 8002e14:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	689b      	ldr	r3, [r3, #8]
 8002e1c:	494d      	ldr	r1, [pc, #308]	; (8002f54 <HAL_RCC_ClockConfig+0x1bc>)
 8002e1e:	4313      	orrs	r3, r2
 8002e20:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	f003 0301 	and.w	r3, r3, #1
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d044      	beq.n	8002eb8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	685b      	ldr	r3, [r3, #4]
 8002e32:	2b01      	cmp	r3, #1
 8002e34:	d107      	bne.n	8002e46 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e36:	4b47      	ldr	r3, [pc, #284]	; (8002f54 <HAL_RCC_ClockConfig+0x1bc>)
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d119      	bne.n	8002e76 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002e42:	2301      	movs	r3, #1
 8002e44:	e07f      	b.n	8002f46 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	685b      	ldr	r3, [r3, #4]
 8002e4a:	2b02      	cmp	r3, #2
 8002e4c:	d003      	beq.n	8002e56 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002e52:	2b03      	cmp	r3, #3
 8002e54:	d107      	bne.n	8002e66 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002e56:	4b3f      	ldr	r3, [pc, #252]	; (8002f54 <HAL_RCC_ClockConfig+0x1bc>)
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d109      	bne.n	8002e76 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002e62:	2301      	movs	r3, #1
 8002e64:	e06f      	b.n	8002f46 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e66:	4b3b      	ldr	r3, [pc, #236]	; (8002f54 <HAL_RCC_ClockConfig+0x1bc>)
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	f003 0302 	and.w	r3, r3, #2
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d101      	bne.n	8002e76 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002e72:	2301      	movs	r3, #1
 8002e74:	e067      	b.n	8002f46 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002e76:	4b37      	ldr	r3, [pc, #220]	; (8002f54 <HAL_RCC_ClockConfig+0x1bc>)
 8002e78:	689b      	ldr	r3, [r3, #8]
 8002e7a:	f023 0203 	bic.w	r2, r3, #3
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	685b      	ldr	r3, [r3, #4]
 8002e82:	4934      	ldr	r1, [pc, #208]	; (8002f54 <HAL_RCC_ClockConfig+0x1bc>)
 8002e84:	4313      	orrs	r3, r2
 8002e86:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002e88:	f7fe f8f8 	bl	800107c <HAL_GetTick>
 8002e8c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e8e:	e00a      	b.n	8002ea6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002e90:	f7fe f8f4 	bl	800107c <HAL_GetTick>
 8002e94:	4602      	mov	r2, r0
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	1ad3      	subs	r3, r2, r3
 8002e9a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e9e:	4293      	cmp	r3, r2
 8002ea0:	d901      	bls.n	8002ea6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002ea2:	2303      	movs	r3, #3
 8002ea4:	e04f      	b.n	8002f46 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002ea6:	4b2b      	ldr	r3, [pc, #172]	; (8002f54 <HAL_RCC_ClockConfig+0x1bc>)
 8002ea8:	689b      	ldr	r3, [r3, #8]
 8002eaa:	f003 020c 	and.w	r2, r3, #12
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	685b      	ldr	r3, [r3, #4]
 8002eb2:	009b      	lsls	r3, r3, #2
 8002eb4:	429a      	cmp	r2, r3
 8002eb6:	d1eb      	bne.n	8002e90 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002eb8:	4b25      	ldr	r3, [pc, #148]	; (8002f50 <HAL_RCC_ClockConfig+0x1b8>)
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	f003 030f 	and.w	r3, r3, #15
 8002ec0:	683a      	ldr	r2, [r7, #0]
 8002ec2:	429a      	cmp	r2, r3
 8002ec4:	d20c      	bcs.n	8002ee0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002ec6:	4b22      	ldr	r3, [pc, #136]	; (8002f50 <HAL_RCC_ClockConfig+0x1b8>)
 8002ec8:	683a      	ldr	r2, [r7, #0]
 8002eca:	b2d2      	uxtb	r2, r2
 8002ecc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002ece:	4b20      	ldr	r3, [pc, #128]	; (8002f50 <HAL_RCC_ClockConfig+0x1b8>)
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	f003 030f 	and.w	r3, r3, #15
 8002ed6:	683a      	ldr	r2, [r7, #0]
 8002ed8:	429a      	cmp	r2, r3
 8002eda:	d001      	beq.n	8002ee0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002edc:	2301      	movs	r3, #1
 8002ede:	e032      	b.n	8002f46 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	f003 0304 	and.w	r3, r3, #4
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d008      	beq.n	8002efe <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002eec:	4b19      	ldr	r3, [pc, #100]	; (8002f54 <HAL_RCC_ClockConfig+0x1bc>)
 8002eee:	689b      	ldr	r3, [r3, #8]
 8002ef0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	68db      	ldr	r3, [r3, #12]
 8002ef8:	4916      	ldr	r1, [pc, #88]	; (8002f54 <HAL_RCC_ClockConfig+0x1bc>)
 8002efa:	4313      	orrs	r3, r2
 8002efc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	f003 0308 	and.w	r3, r3, #8
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d009      	beq.n	8002f1e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002f0a:	4b12      	ldr	r3, [pc, #72]	; (8002f54 <HAL_RCC_ClockConfig+0x1bc>)
 8002f0c:	689b      	ldr	r3, [r3, #8]
 8002f0e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	691b      	ldr	r3, [r3, #16]
 8002f16:	00db      	lsls	r3, r3, #3
 8002f18:	490e      	ldr	r1, [pc, #56]	; (8002f54 <HAL_RCC_ClockConfig+0x1bc>)
 8002f1a:	4313      	orrs	r3, r2
 8002f1c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002f1e:	f000 f821 	bl	8002f64 <HAL_RCC_GetSysClockFreq>
 8002f22:	4602      	mov	r2, r0
 8002f24:	4b0b      	ldr	r3, [pc, #44]	; (8002f54 <HAL_RCC_ClockConfig+0x1bc>)
 8002f26:	689b      	ldr	r3, [r3, #8]
 8002f28:	091b      	lsrs	r3, r3, #4
 8002f2a:	f003 030f 	and.w	r3, r3, #15
 8002f2e:	490a      	ldr	r1, [pc, #40]	; (8002f58 <HAL_RCC_ClockConfig+0x1c0>)
 8002f30:	5ccb      	ldrb	r3, [r1, r3]
 8002f32:	fa22 f303 	lsr.w	r3, r2, r3
 8002f36:	4a09      	ldr	r2, [pc, #36]	; (8002f5c <HAL_RCC_ClockConfig+0x1c4>)
 8002f38:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002f3a:	4b09      	ldr	r3, [pc, #36]	; (8002f60 <HAL_RCC_ClockConfig+0x1c8>)
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	4618      	mov	r0, r3
 8002f40:	f7fe f858 	bl	8000ff4 <HAL_InitTick>

  return HAL_OK;
 8002f44:	2300      	movs	r3, #0
}
 8002f46:	4618      	mov	r0, r3
 8002f48:	3710      	adds	r7, #16
 8002f4a:	46bd      	mov	sp, r7
 8002f4c:	bd80      	pop	{r7, pc}
 8002f4e:	bf00      	nop
 8002f50:	40023c00 	.word	0x40023c00
 8002f54:	40023800 	.word	0x40023800
 8002f58:	080123b0 	.word	0x080123b0
 8002f5c:	20000000 	.word	0x20000000
 8002f60:	20000004 	.word	0x20000004

08002f64 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002f64:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002f68:	b094      	sub	sp, #80	; 0x50
 8002f6a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002f6c:	2300      	movs	r3, #0
 8002f6e:	647b      	str	r3, [r7, #68]	; 0x44
 8002f70:	2300      	movs	r3, #0
 8002f72:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002f74:	2300      	movs	r3, #0
 8002f76:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8002f78:	2300      	movs	r3, #0
 8002f7a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002f7c:	4b79      	ldr	r3, [pc, #484]	; (8003164 <HAL_RCC_GetSysClockFreq+0x200>)
 8002f7e:	689b      	ldr	r3, [r3, #8]
 8002f80:	f003 030c 	and.w	r3, r3, #12
 8002f84:	2b08      	cmp	r3, #8
 8002f86:	d00d      	beq.n	8002fa4 <HAL_RCC_GetSysClockFreq+0x40>
 8002f88:	2b08      	cmp	r3, #8
 8002f8a:	f200 80e1 	bhi.w	8003150 <HAL_RCC_GetSysClockFreq+0x1ec>
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d002      	beq.n	8002f98 <HAL_RCC_GetSysClockFreq+0x34>
 8002f92:	2b04      	cmp	r3, #4
 8002f94:	d003      	beq.n	8002f9e <HAL_RCC_GetSysClockFreq+0x3a>
 8002f96:	e0db      	b.n	8003150 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002f98:	4b73      	ldr	r3, [pc, #460]	; (8003168 <HAL_RCC_GetSysClockFreq+0x204>)
 8002f9a:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8002f9c:	e0db      	b.n	8003156 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002f9e:	4b73      	ldr	r3, [pc, #460]	; (800316c <HAL_RCC_GetSysClockFreq+0x208>)
 8002fa0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002fa2:	e0d8      	b.n	8003156 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002fa4:	4b6f      	ldr	r3, [pc, #444]	; (8003164 <HAL_RCC_GetSysClockFreq+0x200>)
 8002fa6:	685b      	ldr	r3, [r3, #4]
 8002fa8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002fac:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002fae:	4b6d      	ldr	r3, [pc, #436]	; (8003164 <HAL_RCC_GetSysClockFreq+0x200>)
 8002fb0:	685b      	ldr	r3, [r3, #4]
 8002fb2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d063      	beq.n	8003082 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002fba:	4b6a      	ldr	r3, [pc, #424]	; (8003164 <HAL_RCC_GetSysClockFreq+0x200>)
 8002fbc:	685b      	ldr	r3, [r3, #4]
 8002fbe:	099b      	lsrs	r3, r3, #6
 8002fc0:	2200      	movs	r2, #0
 8002fc2:	63bb      	str	r3, [r7, #56]	; 0x38
 8002fc4:	63fa      	str	r2, [r7, #60]	; 0x3c
 8002fc6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002fc8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002fcc:	633b      	str	r3, [r7, #48]	; 0x30
 8002fce:	2300      	movs	r3, #0
 8002fd0:	637b      	str	r3, [r7, #52]	; 0x34
 8002fd2:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8002fd6:	4622      	mov	r2, r4
 8002fd8:	462b      	mov	r3, r5
 8002fda:	f04f 0000 	mov.w	r0, #0
 8002fde:	f04f 0100 	mov.w	r1, #0
 8002fe2:	0159      	lsls	r1, r3, #5
 8002fe4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002fe8:	0150      	lsls	r0, r2, #5
 8002fea:	4602      	mov	r2, r0
 8002fec:	460b      	mov	r3, r1
 8002fee:	4621      	mov	r1, r4
 8002ff0:	1a51      	subs	r1, r2, r1
 8002ff2:	6139      	str	r1, [r7, #16]
 8002ff4:	4629      	mov	r1, r5
 8002ff6:	eb63 0301 	sbc.w	r3, r3, r1
 8002ffa:	617b      	str	r3, [r7, #20]
 8002ffc:	f04f 0200 	mov.w	r2, #0
 8003000:	f04f 0300 	mov.w	r3, #0
 8003004:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003008:	4659      	mov	r1, fp
 800300a:	018b      	lsls	r3, r1, #6
 800300c:	4651      	mov	r1, sl
 800300e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003012:	4651      	mov	r1, sl
 8003014:	018a      	lsls	r2, r1, #6
 8003016:	4651      	mov	r1, sl
 8003018:	ebb2 0801 	subs.w	r8, r2, r1
 800301c:	4659      	mov	r1, fp
 800301e:	eb63 0901 	sbc.w	r9, r3, r1
 8003022:	f04f 0200 	mov.w	r2, #0
 8003026:	f04f 0300 	mov.w	r3, #0
 800302a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800302e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003032:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003036:	4690      	mov	r8, r2
 8003038:	4699      	mov	r9, r3
 800303a:	4623      	mov	r3, r4
 800303c:	eb18 0303 	adds.w	r3, r8, r3
 8003040:	60bb      	str	r3, [r7, #8]
 8003042:	462b      	mov	r3, r5
 8003044:	eb49 0303 	adc.w	r3, r9, r3
 8003048:	60fb      	str	r3, [r7, #12]
 800304a:	f04f 0200 	mov.w	r2, #0
 800304e:	f04f 0300 	mov.w	r3, #0
 8003052:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003056:	4629      	mov	r1, r5
 8003058:	024b      	lsls	r3, r1, #9
 800305a:	4621      	mov	r1, r4
 800305c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003060:	4621      	mov	r1, r4
 8003062:	024a      	lsls	r2, r1, #9
 8003064:	4610      	mov	r0, r2
 8003066:	4619      	mov	r1, r3
 8003068:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800306a:	2200      	movs	r2, #0
 800306c:	62bb      	str	r3, [r7, #40]	; 0x28
 800306e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003070:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003074:	f7fd f914 	bl	80002a0 <__aeabi_uldivmod>
 8003078:	4602      	mov	r2, r0
 800307a:	460b      	mov	r3, r1
 800307c:	4613      	mov	r3, r2
 800307e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003080:	e058      	b.n	8003134 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003082:	4b38      	ldr	r3, [pc, #224]	; (8003164 <HAL_RCC_GetSysClockFreq+0x200>)
 8003084:	685b      	ldr	r3, [r3, #4]
 8003086:	099b      	lsrs	r3, r3, #6
 8003088:	2200      	movs	r2, #0
 800308a:	4618      	mov	r0, r3
 800308c:	4611      	mov	r1, r2
 800308e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003092:	623b      	str	r3, [r7, #32]
 8003094:	2300      	movs	r3, #0
 8003096:	627b      	str	r3, [r7, #36]	; 0x24
 8003098:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800309c:	4642      	mov	r2, r8
 800309e:	464b      	mov	r3, r9
 80030a0:	f04f 0000 	mov.w	r0, #0
 80030a4:	f04f 0100 	mov.w	r1, #0
 80030a8:	0159      	lsls	r1, r3, #5
 80030aa:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80030ae:	0150      	lsls	r0, r2, #5
 80030b0:	4602      	mov	r2, r0
 80030b2:	460b      	mov	r3, r1
 80030b4:	4641      	mov	r1, r8
 80030b6:	ebb2 0a01 	subs.w	sl, r2, r1
 80030ba:	4649      	mov	r1, r9
 80030bc:	eb63 0b01 	sbc.w	fp, r3, r1
 80030c0:	f04f 0200 	mov.w	r2, #0
 80030c4:	f04f 0300 	mov.w	r3, #0
 80030c8:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80030cc:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80030d0:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80030d4:	ebb2 040a 	subs.w	r4, r2, sl
 80030d8:	eb63 050b 	sbc.w	r5, r3, fp
 80030dc:	f04f 0200 	mov.w	r2, #0
 80030e0:	f04f 0300 	mov.w	r3, #0
 80030e4:	00eb      	lsls	r3, r5, #3
 80030e6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80030ea:	00e2      	lsls	r2, r4, #3
 80030ec:	4614      	mov	r4, r2
 80030ee:	461d      	mov	r5, r3
 80030f0:	4643      	mov	r3, r8
 80030f2:	18e3      	adds	r3, r4, r3
 80030f4:	603b      	str	r3, [r7, #0]
 80030f6:	464b      	mov	r3, r9
 80030f8:	eb45 0303 	adc.w	r3, r5, r3
 80030fc:	607b      	str	r3, [r7, #4]
 80030fe:	f04f 0200 	mov.w	r2, #0
 8003102:	f04f 0300 	mov.w	r3, #0
 8003106:	e9d7 4500 	ldrd	r4, r5, [r7]
 800310a:	4629      	mov	r1, r5
 800310c:	028b      	lsls	r3, r1, #10
 800310e:	4621      	mov	r1, r4
 8003110:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003114:	4621      	mov	r1, r4
 8003116:	028a      	lsls	r2, r1, #10
 8003118:	4610      	mov	r0, r2
 800311a:	4619      	mov	r1, r3
 800311c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800311e:	2200      	movs	r2, #0
 8003120:	61bb      	str	r3, [r7, #24]
 8003122:	61fa      	str	r2, [r7, #28]
 8003124:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003128:	f7fd f8ba 	bl	80002a0 <__aeabi_uldivmod>
 800312c:	4602      	mov	r2, r0
 800312e:	460b      	mov	r3, r1
 8003130:	4613      	mov	r3, r2
 8003132:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003134:	4b0b      	ldr	r3, [pc, #44]	; (8003164 <HAL_RCC_GetSysClockFreq+0x200>)
 8003136:	685b      	ldr	r3, [r3, #4]
 8003138:	0c1b      	lsrs	r3, r3, #16
 800313a:	f003 0303 	and.w	r3, r3, #3
 800313e:	3301      	adds	r3, #1
 8003140:	005b      	lsls	r3, r3, #1
 8003142:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8003144:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003146:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003148:	fbb2 f3f3 	udiv	r3, r2, r3
 800314c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800314e:	e002      	b.n	8003156 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003150:	4b05      	ldr	r3, [pc, #20]	; (8003168 <HAL_RCC_GetSysClockFreq+0x204>)
 8003152:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003154:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003156:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8003158:	4618      	mov	r0, r3
 800315a:	3750      	adds	r7, #80	; 0x50
 800315c:	46bd      	mov	sp, r7
 800315e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003162:	bf00      	nop
 8003164:	40023800 	.word	0x40023800
 8003168:	00f42400 	.word	0x00f42400
 800316c:	007a1200 	.word	0x007a1200

08003170 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003170:	b480      	push	{r7}
 8003172:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003174:	4b03      	ldr	r3, [pc, #12]	; (8003184 <HAL_RCC_GetHCLKFreq+0x14>)
 8003176:	681b      	ldr	r3, [r3, #0]
}
 8003178:	4618      	mov	r0, r3
 800317a:	46bd      	mov	sp, r7
 800317c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003180:	4770      	bx	lr
 8003182:	bf00      	nop
 8003184:	20000000 	.word	0x20000000

08003188 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003188:	b580      	push	{r7, lr}
 800318a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800318c:	f7ff fff0 	bl	8003170 <HAL_RCC_GetHCLKFreq>
 8003190:	4602      	mov	r2, r0
 8003192:	4b05      	ldr	r3, [pc, #20]	; (80031a8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003194:	689b      	ldr	r3, [r3, #8]
 8003196:	0a9b      	lsrs	r3, r3, #10
 8003198:	f003 0307 	and.w	r3, r3, #7
 800319c:	4903      	ldr	r1, [pc, #12]	; (80031ac <HAL_RCC_GetPCLK1Freq+0x24>)
 800319e:	5ccb      	ldrb	r3, [r1, r3]
 80031a0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80031a4:	4618      	mov	r0, r3
 80031a6:	bd80      	pop	{r7, pc}
 80031a8:	40023800 	.word	0x40023800
 80031ac:	080123c0 	.word	0x080123c0

080031b0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80031b0:	b580      	push	{r7, lr}
 80031b2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80031b4:	f7ff ffdc 	bl	8003170 <HAL_RCC_GetHCLKFreq>
 80031b8:	4602      	mov	r2, r0
 80031ba:	4b05      	ldr	r3, [pc, #20]	; (80031d0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80031bc:	689b      	ldr	r3, [r3, #8]
 80031be:	0b5b      	lsrs	r3, r3, #13
 80031c0:	f003 0307 	and.w	r3, r3, #7
 80031c4:	4903      	ldr	r1, [pc, #12]	; (80031d4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80031c6:	5ccb      	ldrb	r3, [r1, r3]
 80031c8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80031cc:	4618      	mov	r0, r3
 80031ce:	bd80      	pop	{r7, pc}
 80031d0:	40023800 	.word	0x40023800
 80031d4:	080123c0 	.word	0x080123c0

080031d8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80031d8:	b580      	push	{r7, lr}
 80031da:	b082      	sub	sp, #8
 80031dc:	af00      	add	r7, sp, #0
 80031de:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d101      	bne.n	80031ea <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80031e6:	2301      	movs	r3, #1
 80031e8:	e03f      	b.n	800326a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80031f0:	b2db      	uxtb	r3, r3
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d106      	bne.n	8003204 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	2200      	movs	r2, #0
 80031fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80031fe:	6878      	ldr	r0, [r7, #4]
 8003200:	f7fd fb98 	bl	8000934 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	2224      	movs	r2, #36	; 0x24
 8003208:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	68da      	ldr	r2, [r3, #12]
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800321a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800321c:	6878      	ldr	r0, [r7, #4]
 800321e:	f000 f929 	bl	8003474 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	691a      	ldr	r2, [r3, #16]
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003230:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	695a      	ldr	r2, [r3, #20]
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003240:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	68da      	ldr	r2, [r3, #12]
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003250:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	2200      	movs	r2, #0
 8003256:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	2220      	movs	r2, #32
 800325c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	2220      	movs	r2, #32
 8003264:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003268:	2300      	movs	r3, #0
}
 800326a:	4618      	mov	r0, r3
 800326c:	3708      	adds	r7, #8
 800326e:	46bd      	mov	sp, r7
 8003270:	bd80      	pop	{r7, pc}

08003272 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003272:	b580      	push	{r7, lr}
 8003274:	b08a      	sub	sp, #40	; 0x28
 8003276:	af02      	add	r7, sp, #8
 8003278:	60f8      	str	r0, [r7, #12]
 800327a:	60b9      	str	r1, [r7, #8]
 800327c:	603b      	str	r3, [r7, #0]
 800327e:	4613      	mov	r3, r2
 8003280:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003282:	2300      	movs	r3, #0
 8003284:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800328c:	b2db      	uxtb	r3, r3
 800328e:	2b20      	cmp	r3, #32
 8003290:	d17c      	bne.n	800338c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003292:	68bb      	ldr	r3, [r7, #8]
 8003294:	2b00      	cmp	r3, #0
 8003296:	d002      	beq.n	800329e <HAL_UART_Transmit+0x2c>
 8003298:	88fb      	ldrh	r3, [r7, #6]
 800329a:	2b00      	cmp	r3, #0
 800329c:	d101      	bne.n	80032a2 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800329e:	2301      	movs	r3, #1
 80032a0:	e075      	b.n	800338e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80032a8:	2b01      	cmp	r3, #1
 80032aa:	d101      	bne.n	80032b0 <HAL_UART_Transmit+0x3e>
 80032ac:	2302      	movs	r3, #2
 80032ae:	e06e      	b.n	800338e <HAL_UART_Transmit+0x11c>
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	2201      	movs	r2, #1
 80032b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	2200      	movs	r2, #0
 80032bc:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	2221      	movs	r2, #33	; 0x21
 80032c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80032c6:	f7fd fed9 	bl	800107c <HAL_GetTick>
 80032ca:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	88fa      	ldrh	r2, [r7, #6]
 80032d0:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	88fa      	ldrh	r2, [r7, #6]
 80032d6:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	689b      	ldr	r3, [r3, #8]
 80032dc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80032e0:	d108      	bne.n	80032f4 <HAL_UART_Transmit+0x82>
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	691b      	ldr	r3, [r3, #16]
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d104      	bne.n	80032f4 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80032ea:	2300      	movs	r3, #0
 80032ec:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80032ee:	68bb      	ldr	r3, [r7, #8]
 80032f0:	61bb      	str	r3, [r7, #24]
 80032f2:	e003      	b.n	80032fc <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80032f4:	68bb      	ldr	r3, [r7, #8]
 80032f6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80032f8:	2300      	movs	r3, #0
 80032fa:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	2200      	movs	r2, #0
 8003300:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8003304:	e02a      	b.n	800335c <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003306:	683b      	ldr	r3, [r7, #0]
 8003308:	9300      	str	r3, [sp, #0]
 800330a:	697b      	ldr	r3, [r7, #20]
 800330c:	2200      	movs	r2, #0
 800330e:	2180      	movs	r1, #128	; 0x80
 8003310:	68f8      	ldr	r0, [r7, #12]
 8003312:	f000 f840 	bl	8003396 <UART_WaitOnFlagUntilTimeout>
 8003316:	4603      	mov	r3, r0
 8003318:	2b00      	cmp	r3, #0
 800331a:	d001      	beq.n	8003320 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800331c:	2303      	movs	r3, #3
 800331e:	e036      	b.n	800338e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8003320:	69fb      	ldr	r3, [r7, #28]
 8003322:	2b00      	cmp	r3, #0
 8003324:	d10b      	bne.n	800333e <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003326:	69bb      	ldr	r3, [r7, #24]
 8003328:	881b      	ldrh	r3, [r3, #0]
 800332a:	461a      	mov	r2, r3
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003334:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003336:	69bb      	ldr	r3, [r7, #24]
 8003338:	3302      	adds	r3, #2
 800333a:	61bb      	str	r3, [r7, #24]
 800333c:	e007      	b.n	800334e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800333e:	69fb      	ldr	r3, [r7, #28]
 8003340:	781a      	ldrb	r2, [r3, #0]
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003348:	69fb      	ldr	r3, [r7, #28]
 800334a:	3301      	adds	r3, #1
 800334c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003352:	b29b      	uxth	r3, r3
 8003354:	3b01      	subs	r3, #1
 8003356:	b29a      	uxth	r2, r3
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003360:	b29b      	uxth	r3, r3
 8003362:	2b00      	cmp	r3, #0
 8003364:	d1cf      	bne.n	8003306 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003366:	683b      	ldr	r3, [r7, #0]
 8003368:	9300      	str	r3, [sp, #0]
 800336a:	697b      	ldr	r3, [r7, #20]
 800336c:	2200      	movs	r2, #0
 800336e:	2140      	movs	r1, #64	; 0x40
 8003370:	68f8      	ldr	r0, [r7, #12]
 8003372:	f000 f810 	bl	8003396 <UART_WaitOnFlagUntilTimeout>
 8003376:	4603      	mov	r3, r0
 8003378:	2b00      	cmp	r3, #0
 800337a:	d001      	beq.n	8003380 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800337c:	2303      	movs	r3, #3
 800337e:	e006      	b.n	800338e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	2220      	movs	r2, #32
 8003384:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003388:	2300      	movs	r3, #0
 800338a:	e000      	b.n	800338e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800338c:	2302      	movs	r3, #2
  }
}
 800338e:	4618      	mov	r0, r3
 8003390:	3720      	adds	r7, #32
 8003392:	46bd      	mov	sp, r7
 8003394:	bd80      	pop	{r7, pc}

08003396 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003396:	b580      	push	{r7, lr}
 8003398:	b090      	sub	sp, #64	; 0x40
 800339a:	af00      	add	r7, sp, #0
 800339c:	60f8      	str	r0, [r7, #12]
 800339e:	60b9      	str	r1, [r7, #8]
 80033a0:	603b      	str	r3, [r7, #0]
 80033a2:	4613      	mov	r3, r2
 80033a4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80033a6:	e050      	b.n	800344a <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80033a8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80033aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80033ae:	d04c      	beq.n	800344a <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80033b0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d007      	beq.n	80033c6 <UART_WaitOnFlagUntilTimeout+0x30>
 80033b6:	f7fd fe61 	bl	800107c <HAL_GetTick>
 80033ba:	4602      	mov	r2, r0
 80033bc:	683b      	ldr	r3, [r7, #0]
 80033be:	1ad3      	subs	r3, r2, r3
 80033c0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80033c2:	429a      	cmp	r2, r3
 80033c4:	d241      	bcs.n	800344a <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	330c      	adds	r3, #12
 80033cc:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80033ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033d0:	e853 3f00 	ldrex	r3, [r3]
 80033d4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80033d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033d8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80033dc:	63fb      	str	r3, [r7, #60]	; 0x3c
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	330c      	adds	r3, #12
 80033e4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80033e6:	637a      	str	r2, [r7, #52]	; 0x34
 80033e8:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80033ea:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80033ec:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80033ee:	e841 2300 	strex	r3, r2, [r1]
 80033f2:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80033f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d1e5      	bne.n	80033c6 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	3314      	adds	r3, #20
 8003400:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003402:	697b      	ldr	r3, [r7, #20]
 8003404:	e853 3f00 	ldrex	r3, [r3]
 8003408:	613b      	str	r3, [r7, #16]
   return(result);
 800340a:	693b      	ldr	r3, [r7, #16]
 800340c:	f023 0301 	bic.w	r3, r3, #1
 8003410:	63bb      	str	r3, [r7, #56]	; 0x38
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	3314      	adds	r3, #20
 8003418:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800341a:	623a      	str	r2, [r7, #32]
 800341c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800341e:	69f9      	ldr	r1, [r7, #28]
 8003420:	6a3a      	ldr	r2, [r7, #32]
 8003422:	e841 2300 	strex	r3, r2, [r1]
 8003426:	61bb      	str	r3, [r7, #24]
   return(result);
 8003428:	69bb      	ldr	r3, [r7, #24]
 800342a:	2b00      	cmp	r3, #0
 800342c:	d1e5      	bne.n	80033fa <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	2220      	movs	r2, #32
 8003432:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	2220      	movs	r2, #32
 800343a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	2200      	movs	r2, #0
 8003442:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8003446:	2303      	movs	r3, #3
 8003448:	e00f      	b.n	800346a <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	681a      	ldr	r2, [r3, #0]
 8003450:	68bb      	ldr	r3, [r7, #8]
 8003452:	4013      	ands	r3, r2
 8003454:	68ba      	ldr	r2, [r7, #8]
 8003456:	429a      	cmp	r2, r3
 8003458:	bf0c      	ite	eq
 800345a:	2301      	moveq	r3, #1
 800345c:	2300      	movne	r3, #0
 800345e:	b2db      	uxtb	r3, r3
 8003460:	461a      	mov	r2, r3
 8003462:	79fb      	ldrb	r3, [r7, #7]
 8003464:	429a      	cmp	r2, r3
 8003466:	d09f      	beq.n	80033a8 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003468:	2300      	movs	r3, #0
}
 800346a:	4618      	mov	r0, r3
 800346c:	3740      	adds	r7, #64	; 0x40
 800346e:	46bd      	mov	sp, r7
 8003470:	bd80      	pop	{r7, pc}
	...

08003474 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003474:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003478:	b0c0      	sub	sp, #256	; 0x100
 800347a:	af00      	add	r7, sp, #0
 800347c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003480:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	691b      	ldr	r3, [r3, #16]
 8003488:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800348c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003490:	68d9      	ldr	r1, [r3, #12]
 8003492:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003496:	681a      	ldr	r2, [r3, #0]
 8003498:	ea40 0301 	orr.w	r3, r0, r1
 800349c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800349e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80034a2:	689a      	ldr	r2, [r3, #8]
 80034a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80034a8:	691b      	ldr	r3, [r3, #16]
 80034aa:	431a      	orrs	r2, r3
 80034ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80034b0:	695b      	ldr	r3, [r3, #20]
 80034b2:	431a      	orrs	r2, r3
 80034b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80034b8:	69db      	ldr	r3, [r3, #28]
 80034ba:	4313      	orrs	r3, r2
 80034bc:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80034c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	68db      	ldr	r3, [r3, #12]
 80034c8:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80034cc:	f021 010c 	bic.w	r1, r1, #12
 80034d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80034d4:	681a      	ldr	r2, [r3, #0]
 80034d6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80034da:	430b      	orrs	r3, r1
 80034dc:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80034de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	695b      	ldr	r3, [r3, #20]
 80034e6:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80034ea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80034ee:	6999      	ldr	r1, [r3, #24]
 80034f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80034f4:	681a      	ldr	r2, [r3, #0]
 80034f6:	ea40 0301 	orr.w	r3, r0, r1
 80034fa:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80034fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003500:	681a      	ldr	r2, [r3, #0]
 8003502:	4b8f      	ldr	r3, [pc, #572]	; (8003740 <UART_SetConfig+0x2cc>)
 8003504:	429a      	cmp	r2, r3
 8003506:	d005      	beq.n	8003514 <UART_SetConfig+0xa0>
 8003508:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800350c:	681a      	ldr	r2, [r3, #0]
 800350e:	4b8d      	ldr	r3, [pc, #564]	; (8003744 <UART_SetConfig+0x2d0>)
 8003510:	429a      	cmp	r2, r3
 8003512:	d104      	bne.n	800351e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003514:	f7ff fe4c 	bl	80031b0 <HAL_RCC_GetPCLK2Freq>
 8003518:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800351c:	e003      	b.n	8003526 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800351e:	f7ff fe33 	bl	8003188 <HAL_RCC_GetPCLK1Freq>
 8003522:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003526:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800352a:	69db      	ldr	r3, [r3, #28]
 800352c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003530:	f040 810c 	bne.w	800374c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003534:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003538:	2200      	movs	r2, #0
 800353a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800353e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8003542:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8003546:	4622      	mov	r2, r4
 8003548:	462b      	mov	r3, r5
 800354a:	1891      	adds	r1, r2, r2
 800354c:	65b9      	str	r1, [r7, #88]	; 0x58
 800354e:	415b      	adcs	r3, r3
 8003550:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003552:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003556:	4621      	mov	r1, r4
 8003558:	eb12 0801 	adds.w	r8, r2, r1
 800355c:	4629      	mov	r1, r5
 800355e:	eb43 0901 	adc.w	r9, r3, r1
 8003562:	f04f 0200 	mov.w	r2, #0
 8003566:	f04f 0300 	mov.w	r3, #0
 800356a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800356e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003572:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003576:	4690      	mov	r8, r2
 8003578:	4699      	mov	r9, r3
 800357a:	4623      	mov	r3, r4
 800357c:	eb18 0303 	adds.w	r3, r8, r3
 8003580:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8003584:	462b      	mov	r3, r5
 8003586:	eb49 0303 	adc.w	r3, r9, r3
 800358a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800358e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003592:	685b      	ldr	r3, [r3, #4]
 8003594:	2200      	movs	r2, #0
 8003596:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800359a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800359e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80035a2:	460b      	mov	r3, r1
 80035a4:	18db      	adds	r3, r3, r3
 80035a6:	653b      	str	r3, [r7, #80]	; 0x50
 80035a8:	4613      	mov	r3, r2
 80035aa:	eb42 0303 	adc.w	r3, r2, r3
 80035ae:	657b      	str	r3, [r7, #84]	; 0x54
 80035b0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80035b4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80035b8:	f7fc fe72 	bl	80002a0 <__aeabi_uldivmod>
 80035bc:	4602      	mov	r2, r0
 80035be:	460b      	mov	r3, r1
 80035c0:	4b61      	ldr	r3, [pc, #388]	; (8003748 <UART_SetConfig+0x2d4>)
 80035c2:	fba3 2302 	umull	r2, r3, r3, r2
 80035c6:	095b      	lsrs	r3, r3, #5
 80035c8:	011c      	lsls	r4, r3, #4
 80035ca:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80035ce:	2200      	movs	r2, #0
 80035d0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80035d4:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80035d8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80035dc:	4642      	mov	r2, r8
 80035de:	464b      	mov	r3, r9
 80035e0:	1891      	adds	r1, r2, r2
 80035e2:	64b9      	str	r1, [r7, #72]	; 0x48
 80035e4:	415b      	adcs	r3, r3
 80035e6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80035e8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80035ec:	4641      	mov	r1, r8
 80035ee:	eb12 0a01 	adds.w	sl, r2, r1
 80035f2:	4649      	mov	r1, r9
 80035f4:	eb43 0b01 	adc.w	fp, r3, r1
 80035f8:	f04f 0200 	mov.w	r2, #0
 80035fc:	f04f 0300 	mov.w	r3, #0
 8003600:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003604:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003608:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800360c:	4692      	mov	sl, r2
 800360e:	469b      	mov	fp, r3
 8003610:	4643      	mov	r3, r8
 8003612:	eb1a 0303 	adds.w	r3, sl, r3
 8003616:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800361a:	464b      	mov	r3, r9
 800361c:	eb4b 0303 	adc.w	r3, fp, r3
 8003620:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8003624:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003628:	685b      	ldr	r3, [r3, #4]
 800362a:	2200      	movs	r2, #0
 800362c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003630:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8003634:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8003638:	460b      	mov	r3, r1
 800363a:	18db      	adds	r3, r3, r3
 800363c:	643b      	str	r3, [r7, #64]	; 0x40
 800363e:	4613      	mov	r3, r2
 8003640:	eb42 0303 	adc.w	r3, r2, r3
 8003644:	647b      	str	r3, [r7, #68]	; 0x44
 8003646:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800364a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800364e:	f7fc fe27 	bl	80002a0 <__aeabi_uldivmod>
 8003652:	4602      	mov	r2, r0
 8003654:	460b      	mov	r3, r1
 8003656:	4611      	mov	r1, r2
 8003658:	4b3b      	ldr	r3, [pc, #236]	; (8003748 <UART_SetConfig+0x2d4>)
 800365a:	fba3 2301 	umull	r2, r3, r3, r1
 800365e:	095b      	lsrs	r3, r3, #5
 8003660:	2264      	movs	r2, #100	; 0x64
 8003662:	fb02 f303 	mul.w	r3, r2, r3
 8003666:	1acb      	subs	r3, r1, r3
 8003668:	00db      	lsls	r3, r3, #3
 800366a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800366e:	4b36      	ldr	r3, [pc, #216]	; (8003748 <UART_SetConfig+0x2d4>)
 8003670:	fba3 2302 	umull	r2, r3, r3, r2
 8003674:	095b      	lsrs	r3, r3, #5
 8003676:	005b      	lsls	r3, r3, #1
 8003678:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800367c:	441c      	add	r4, r3
 800367e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003682:	2200      	movs	r2, #0
 8003684:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003688:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800368c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8003690:	4642      	mov	r2, r8
 8003692:	464b      	mov	r3, r9
 8003694:	1891      	adds	r1, r2, r2
 8003696:	63b9      	str	r1, [r7, #56]	; 0x38
 8003698:	415b      	adcs	r3, r3
 800369a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800369c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80036a0:	4641      	mov	r1, r8
 80036a2:	1851      	adds	r1, r2, r1
 80036a4:	6339      	str	r1, [r7, #48]	; 0x30
 80036a6:	4649      	mov	r1, r9
 80036a8:	414b      	adcs	r3, r1
 80036aa:	637b      	str	r3, [r7, #52]	; 0x34
 80036ac:	f04f 0200 	mov.w	r2, #0
 80036b0:	f04f 0300 	mov.w	r3, #0
 80036b4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80036b8:	4659      	mov	r1, fp
 80036ba:	00cb      	lsls	r3, r1, #3
 80036bc:	4651      	mov	r1, sl
 80036be:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80036c2:	4651      	mov	r1, sl
 80036c4:	00ca      	lsls	r2, r1, #3
 80036c6:	4610      	mov	r0, r2
 80036c8:	4619      	mov	r1, r3
 80036ca:	4603      	mov	r3, r0
 80036cc:	4642      	mov	r2, r8
 80036ce:	189b      	adds	r3, r3, r2
 80036d0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80036d4:	464b      	mov	r3, r9
 80036d6:	460a      	mov	r2, r1
 80036d8:	eb42 0303 	adc.w	r3, r2, r3
 80036dc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80036e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80036e4:	685b      	ldr	r3, [r3, #4]
 80036e6:	2200      	movs	r2, #0
 80036e8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80036ec:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80036f0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80036f4:	460b      	mov	r3, r1
 80036f6:	18db      	adds	r3, r3, r3
 80036f8:	62bb      	str	r3, [r7, #40]	; 0x28
 80036fa:	4613      	mov	r3, r2
 80036fc:	eb42 0303 	adc.w	r3, r2, r3
 8003700:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003702:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003706:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800370a:	f7fc fdc9 	bl	80002a0 <__aeabi_uldivmod>
 800370e:	4602      	mov	r2, r0
 8003710:	460b      	mov	r3, r1
 8003712:	4b0d      	ldr	r3, [pc, #52]	; (8003748 <UART_SetConfig+0x2d4>)
 8003714:	fba3 1302 	umull	r1, r3, r3, r2
 8003718:	095b      	lsrs	r3, r3, #5
 800371a:	2164      	movs	r1, #100	; 0x64
 800371c:	fb01 f303 	mul.w	r3, r1, r3
 8003720:	1ad3      	subs	r3, r2, r3
 8003722:	00db      	lsls	r3, r3, #3
 8003724:	3332      	adds	r3, #50	; 0x32
 8003726:	4a08      	ldr	r2, [pc, #32]	; (8003748 <UART_SetConfig+0x2d4>)
 8003728:	fba2 2303 	umull	r2, r3, r2, r3
 800372c:	095b      	lsrs	r3, r3, #5
 800372e:	f003 0207 	and.w	r2, r3, #7
 8003732:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	4422      	add	r2, r4
 800373a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800373c:	e106      	b.n	800394c <UART_SetConfig+0x4d8>
 800373e:	bf00      	nop
 8003740:	40011000 	.word	0x40011000
 8003744:	40011400 	.word	0x40011400
 8003748:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800374c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003750:	2200      	movs	r2, #0
 8003752:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8003756:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800375a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800375e:	4642      	mov	r2, r8
 8003760:	464b      	mov	r3, r9
 8003762:	1891      	adds	r1, r2, r2
 8003764:	6239      	str	r1, [r7, #32]
 8003766:	415b      	adcs	r3, r3
 8003768:	627b      	str	r3, [r7, #36]	; 0x24
 800376a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800376e:	4641      	mov	r1, r8
 8003770:	1854      	adds	r4, r2, r1
 8003772:	4649      	mov	r1, r9
 8003774:	eb43 0501 	adc.w	r5, r3, r1
 8003778:	f04f 0200 	mov.w	r2, #0
 800377c:	f04f 0300 	mov.w	r3, #0
 8003780:	00eb      	lsls	r3, r5, #3
 8003782:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003786:	00e2      	lsls	r2, r4, #3
 8003788:	4614      	mov	r4, r2
 800378a:	461d      	mov	r5, r3
 800378c:	4643      	mov	r3, r8
 800378e:	18e3      	adds	r3, r4, r3
 8003790:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003794:	464b      	mov	r3, r9
 8003796:	eb45 0303 	adc.w	r3, r5, r3
 800379a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800379e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80037a2:	685b      	ldr	r3, [r3, #4]
 80037a4:	2200      	movs	r2, #0
 80037a6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80037aa:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80037ae:	f04f 0200 	mov.w	r2, #0
 80037b2:	f04f 0300 	mov.w	r3, #0
 80037b6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80037ba:	4629      	mov	r1, r5
 80037bc:	008b      	lsls	r3, r1, #2
 80037be:	4621      	mov	r1, r4
 80037c0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80037c4:	4621      	mov	r1, r4
 80037c6:	008a      	lsls	r2, r1, #2
 80037c8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80037cc:	f7fc fd68 	bl	80002a0 <__aeabi_uldivmod>
 80037d0:	4602      	mov	r2, r0
 80037d2:	460b      	mov	r3, r1
 80037d4:	4b60      	ldr	r3, [pc, #384]	; (8003958 <UART_SetConfig+0x4e4>)
 80037d6:	fba3 2302 	umull	r2, r3, r3, r2
 80037da:	095b      	lsrs	r3, r3, #5
 80037dc:	011c      	lsls	r4, r3, #4
 80037de:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80037e2:	2200      	movs	r2, #0
 80037e4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80037e8:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80037ec:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80037f0:	4642      	mov	r2, r8
 80037f2:	464b      	mov	r3, r9
 80037f4:	1891      	adds	r1, r2, r2
 80037f6:	61b9      	str	r1, [r7, #24]
 80037f8:	415b      	adcs	r3, r3
 80037fa:	61fb      	str	r3, [r7, #28]
 80037fc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003800:	4641      	mov	r1, r8
 8003802:	1851      	adds	r1, r2, r1
 8003804:	6139      	str	r1, [r7, #16]
 8003806:	4649      	mov	r1, r9
 8003808:	414b      	adcs	r3, r1
 800380a:	617b      	str	r3, [r7, #20]
 800380c:	f04f 0200 	mov.w	r2, #0
 8003810:	f04f 0300 	mov.w	r3, #0
 8003814:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003818:	4659      	mov	r1, fp
 800381a:	00cb      	lsls	r3, r1, #3
 800381c:	4651      	mov	r1, sl
 800381e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003822:	4651      	mov	r1, sl
 8003824:	00ca      	lsls	r2, r1, #3
 8003826:	4610      	mov	r0, r2
 8003828:	4619      	mov	r1, r3
 800382a:	4603      	mov	r3, r0
 800382c:	4642      	mov	r2, r8
 800382e:	189b      	adds	r3, r3, r2
 8003830:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003834:	464b      	mov	r3, r9
 8003836:	460a      	mov	r2, r1
 8003838:	eb42 0303 	adc.w	r3, r2, r3
 800383c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003840:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003844:	685b      	ldr	r3, [r3, #4]
 8003846:	2200      	movs	r2, #0
 8003848:	67bb      	str	r3, [r7, #120]	; 0x78
 800384a:	67fa      	str	r2, [r7, #124]	; 0x7c
 800384c:	f04f 0200 	mov.w	r2, #0
 8003850:	f04f 0300 	mov.w	r3, #0
 8003854:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8003858:	4649      	mov	r1, r9
 800385a:	008b      	lsls	r3, r1, #2
 800385c:	4641      	mov	r1, r8
 800385e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003862:	4641      	mov	r1, r8
 8003864:	008a      	lsls	r2, r1, #2
 8003866:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800386a:	f7fc fd19 	bl	80002a0 <__aeabi_uldivmod>
 800386e:	4602      	mov	r2, r0
 8003870:	460b      	mov	r3, r1
 8003872:	4611      	mov	r1, r2
 8003874:	4b38      	ldr	r3, [pc, #224]	; (8003958 <UART_SetConfig+0x4e4>)
 8003876:	fba3 2301 	umull	r2, r3, r3, r1
 800387a:	095b      	lsrs	r3, r3, #5
 800387c:	2264      	movs	r2, #100	; 0x64
 800387e:	fb02 f303 	mul.w	r3, r2, r3
 8003882:	1acb      	subs	r3, r1, r3
 8003884:	011b      	lsls	r3, r3, #4
 8003886:	3332      	adds	r3, #50	; 0x32
 8003888:	4a33      	ldr	r2, [pc, #204]	; (8003958 <UART_SetConfig+0x4e4>)
 800388a:	fba2 2303 	umull	r2, r3, r2, r3
 800388e:	095b      	lsrs	r3, r3, #5
 8003890:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003894:	441c      	add	r4, r3
 8003896:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800389a:	2200      	movs	r2, #0
 800389c:	673b      	str	r3, [r7, #112]	; 0x70
 800389e:	677a      	str	r2, [r7, #116]	; 0x74
 80038a0:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80038a4:	4642      	mov	r2, r8
 80038a6:	464b      	mov	r3, r9
 80038a8:	1891      	adds	r1, r2, r2
 80038aa:	60b9      	str	r1, [r7, #8]
 80038ac:	415b      	adcs	r3, r3
 80038ae:	60fb      	str	r3, [r7, #12]
 80038b0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80038b4:	4641      	mov	r1, r8
 80038b6:	1851      	adds	r1, r2, r1
 80038b8:	6039      	str	r1, [r7, #0]
 80038ba:	4649      	mov	r1, r9
 80038bc:	414b      	adcs	r3, r1
 80038be:	607b      	str	r3, [r7, #4]
 80038c0:	f04f 0200 	mov.w	r2, #0
 80038c4:	f04f 0300 	mov.w	r3, #0
 80038c8:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80038cc:	4659      	mov	r1, fp
 80038ce:	00cb      	lsls	r3, r1, #3
 80038d0:	4651      	mov	r1, sl
 80038d2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80038d6:	4651      	mov	r1, sl
 80038d8:	00ca      	lsls	r2, r1, #3
 80038da:	4610      	mov	r0, r2
 80038dc:	4619      	mov	r1, r3
 80038de:	4603      	mov	r3, r0
 80038e0:	4642      	mov	r2, r8
 80038e2:	189b      	adds	r3, r3, r2
 80038e4:	66bb      	str	r3, [r7, #104]	; 0x68
 80038e6:	464b      	mov	r3, r9
 80038e8:	460a      	mov	r2, r1
 80038ea:	eb42 0303 	adc.w	r3, r2, r3
 80038ee:	66fb      	str	r3, [r7, #108]	; 0x6c
 80038f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80038f4:	685b      	ldr	r3, [r3, #4]
 80038f6:	2200      	movs	r2, #0
 80038f8:	663b      	str	r3, [r7, #96]	; 0x60
 80038fa:	667a      	str	r2, [r7, #100]	; 0x64
 80038fc:	f04f 0200 	mov.w	r2, #0
 8003900:	f04f 0300 	mov.w	r3, #0
 8003904:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8003908:	4649      	mov	r1, r9
 800390a:	008b      	lsls	r3, r1, #2
 800390c:	4641      	mov	r1, r8
 800390e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003912:	4641      	mov	r1, r8
 8003914:	008a      	lsls	r2, r1, #2
 8003916:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800391a:	f7fc fcc1 	bl	80002a0 <__aeabi_uldivmod>
 800391e:	4602      	mov	r2, r0
 8003920:	460b      	mov	r3, r1
 8003922:	4b0d      	ldr	r3, [pc, #52]	; (8003958 <UART_SetConfig+0x4e4>)
 8003924:	fba3 1302 	umull	r1, r3, r3, r2
 8003928:	095b      	lsrs	r3, r3, #5
 800392a:	2164      	movs	r1, #100	; 0x64
 800392c:	fb01 f303 	mul.w	r3, r1, r3
 8003930:	1ad3      	subs	r3, r2, r3
 8003932:	011b      	lsls	r3, r3, #4
 8003934:	3332      	adds	r3, #50	; 0x32
 8003936:	4a08      	ldr	r2, [pc, #32]	; (8003958 <UART_SetConfig+0x4e4>)
 8003938:	fba2 2303 	umull	r2, r3, r2, r3
 800393c:	095b      	lsrs	r3, r3, #5
 800393e:	f003 020f 	and.w	r2, r3, #15
 8003942:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	4422      	add	r2, r4
 800394a:	609a      	str	r2, [r3, #8]
}
 800394c:	bf00      	nop
 800394e:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8003952:	46bd      	mov	sp, r7
 8003954:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003958:	51eb851f 	.word	0x51eb851f

0800395c <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 800395c:	b580      	push	{r7, lr}
 800395e:	b084      	sub	sp, #16
 8003960:	af04      	add	r7, sp, #16
  /* IP addresses initialization */
  IP_ADDRESS[0] = 192;
 8003962:	4b8d      	ldr	r3, [pc, #564]	; (8003b98 <MX_LWIP_Init+0x23c>)
 8003964:	22c0      	movs	r2, #192	; 0xc0
 8003966:	701a      	strb	r2, [r3, #0]
  IP_ADDRESS[1] = 168;
 8003968:	4b8b      	ldr	r3, [pc, #556]	; (8003b98 <MX_LWIP_Init+0x23c>)
 800396a:	22a8      	movs	r2, #168	; 0xa8
 800396c:	705a      	strb	r2, [r3, #1]
  IP_ADDRESS[2] = 0;
 800396e:	4b8a      	ldr	r3, [pc, #552]	; (8003b98 <MX_LWIP_Init+0x23c>)
 8003970:	2200      	movs	r2, #0
 8003972:	709a      	strb	r2, [r3, #2]
  IP_ADDRESS[3] = 25;
 8003974:	4b88      	ldr	r3, [pc, #544]	; (8003b98 <MX_LWIP_Init+0x23c>)
 8003976:	2219      	movs	r2, #25
 8003978:	70da      	strb	r2, [r3, #3]
  NETMASK_ADDRESS[0] = 255;
 800397a:	4b88      	ldr	r3, [pc, #544]	; (8003b9c <MX_LWIP_Init+0x240>)
 800397c:	22ff      	movs	r2, #255	; 0xff
 800397e:	701a      	strb	r2, [r3, #0]
  NETMASK_ADDRESS[1] = 255;
 8003980:	4b86      	ldr	r3, [pc, #536]	; (8003b9c <MX_LWIP_Init+0x240>)
 8003982:	22ff      	movs	r2, #255	; 0xff
 8003984:	705a      	strb	r2, [r3, #1]
  NETMASK_ADDRESS[2] = 255;
 8003986:	4b85      	ldr	r3, [pc, #532]	; (8003b9c <MX_LWIP_Init+0x240>)
 8003988:	22ff      	movs	r2, #255	; 0xff
 800398a:	709a      	strb	r2, [r3, #2]
  NETMASK_ADDRESS[3] = 0;
 800398c:	4b83      	ldr	r3, [pc, #524]	; (8003b9c <MX_LWIP_Init+0x240>)
 800398e:	2200      	movs	r2, #0
 8003990:	70da      	strb	r2, [r3, #3]
  GATEWAY_ADDRESS[0] = 192;
 8003992:	4b83      	ldr	r3, [pc, #524]	; (8003ba0 <MX_LWIP_Init+0x244>)
 8003994:	22c0      	movs	r2, #192	; 0xc0
 8003996:	701a      	strb	r2, [r3, #0]
  GATEWAY_ADDRESS[1] = 168;
 8003998:	4b81      	ldr	r3, [pc, #516]	; (8003ba0 <MX_LWIP_Init+0x244>)
 800399a:	22a8      	movs	r2, #168	; 0xa8
 800399c:	705a      	strb	r2, [r3, #1]
  GATEWAY_ADDRESS[2] = 0;
 800399e:	4b80      	ldr	r3, [pc, #512]	; (8003ba0 <MX_LWIP_Init+0x244>)
 80039a0:	2200      	movs	r2, #0
 80039a2:	709a      	strb	r2, [r3, #2]
  GATEWAY_ADDRESS[3] = 1;
 80039a4:	4b7e      	ldr	r3, [pc, #504]	; (8003ba0 <MX_LWIP_Init+0x244>)
 80039a6:	2201      	movs	r2, #1
 80039a8:	70da      	strb	r2, [r3, #3]

/* USER CODE BEGIN IP_ADDRESSES */
/* USER CODE END IP_ADDRESSES */

  /* Initilialize the LwIP stack without RTOS */
  lwip_init();
 80039aa:	f000 fcf5 	bl	8004398 <lwip_init>

  /* IP addresses initialization without DHCP (IPv4) */
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 80039ae:	4b7a      	ldr	r3, [pc, #488]	; (8003b98 <MX_LWIP_Init+0x23c>)
 80039b0:	781b      	ldrb	r3, [r3, #0]
 80039b2:	061a      	lsls	r2, r3, #24
 80039b4:	4b78      	ldr	r3, [pc, #480]	; (8003b98 <MX_LWIP_Init+0x23c>)
 80039b6:	785b      	ldrb	r3, [r3, #1]
 80039b8:	041b      	lsls	r3, r3, #16
 80039ba:	431a      	orrs	r2, r3
 80039bc:	4b76      	ldr	r3, [pc, #472]	; (8003b98 <MX_LWIP_Init+0x23c>)
 80039be:	789b      	ldrb	r3, [r3, #2]
 80039c0:	021b      	lsls	r3, r3, #8
 80039c2:	4313      	orrs	r3, r2
 80039c4:	4a74      	ldr	r2, [pc, #464]	; (8003b98 <MX_LWIP_Init+0x23c>)
 80039c6:	78d2      	ldrb	r2, [r2, #3]
 80039c8:	4313      	orrs	r3, r2
 80039ca:	061a      	lsls	r2, r3, #24
 80039cc:	4b72      	ldr	r3, [pc, #456]	; (8003b98 <MX_LWIP_Init+0x23c>)
 80039ce:	781b      	ldrb	r3, [r3, #0]
 80039d0:	0619      	lsls	r1, r3, #24
 80039d2:	4b71      	ldr	r3, [pc, #452]	; (8003b98 <MX_LWIP_Init+0x23c>)
 80039d4:	785b      	ldrb	r3, [r3, #1]
 80039d6:	041b      	lsls	r3, r3, #16
 80039d8:	4319      	orrs	r1, r3
 80039da:	4b6f      	ldr	r3, [pc, #444]	; (8003b98 <MX_LWIP_Init+0x23c>)
 80039dc:	789b      	ldrb	r3, [r3, #2]
 80039de:	021b      	lsls	r3, r3, #8
 80039e0:	430b      	orrs	r3, r1
 80039e2:	496d      	ldr	r1, [pc, #436]	; (8003b98 <MX_LWIP_Init+0x23c>)
 80039e4:	78c9      	ldrb	r1, [r1, #3]
 80039e6:	430b      	orrs	r3, r1
 80039e8:	021b      	lsls	r3, r3, #8
 80039ea:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80039ee:	431a      	orrs	r2, r3
 80039f0:	4b69      	ldr	r3, [pc, #420]	; (8003b98 <MX_LWIP_Init+0x23c>)
 80039f2:	781b      	ldrb	r3, [r3, #0]
 80039f4:	0619      	lsls	r1, r3, #24
 80039f6:	4b68      	ldr	r3, [pc, #416]	; (8003b98 <MX_LWIP_Init+0x23c>)
 80039f8:	785b      	ldrb	r3, [r3, #1]
 80039fa:	041b      	lsls	r3, r3, #16
 80039fc:	4319      	orrs	r1, r3
 80039fe:	4b66      	ldr	r3, [pc, #408]	; (8003b98 <MX_LWIP_Init+0x23c>)
 8003a00:	789b      	ldrb	r3, [r3, #2]
 8003a02:	021b      	lsls	r3, r3, #8
 8003a04:	430b      	orrs	r3, r1
 8003a06:	4964      	ldr	r1, [pc, #400]	; (8003b98 <MX_LWIP_Init+0x23c>)
 8003a08:	78c9      	ldrb	r1, [r1, #3]
 8003a0a:	430b      	orrs	r3, r1
 8003a0c:	0a1b      	lsrs	r3, r3, #8
 8003a0e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8003a12:	431a      	orrs	r2, r3
 8003a14:	4b60      	ldr	r3, [pc, #384]	; (8003b98 <MX_LWIP_Init+0x23c>)
 8003a16:	781b      	ldrb	r3, [r3, #0]
 8003a18:	0619      	lsls	r1, r3, #24
 8003a1a:	4b5f      	ldr	r3, [pc, #380]	; (8003b98 <MX_LWIP_Init+0x23c>)
 8003a1c:	785b      	ldrb	r3, [r3, #1]
 8003a1e:	041b      	lsls	r3, r3, #16
 8003a20:	4319      	orrs	r1, r3
 8003a22:	4b5d      	ldr	r3, [pc, #372]	; (8003b98 <MX_LWIP_Init+0x23c>)
 8003a24:	789b      	ldrb	r3, [r3, #2]
 8003a26:	021b      	lsls	r3, r3, #8
 8003a28:	430b      	orrs	r3, r1
 8003a2a:	495b      	ldr	r1, [pc, #364]	; (8003b98 <MX_LWIP_Init+0x23c>)
 8003a2c:	78c9      	ldrb	r1, [r1, #3]
 8003a2e:	430b      	orrs	r3, r1
 8003a30:	0e1b      	lsrs	r3, r3, #24
 8003a32:	4313      	orrs	r3, r2
 8003a34:	4a5b      	ldr	r2, [pc, #364]	; (8003ba4 <MX_LWIP_Init+0x248>)
 8003a36:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 8003a38:	4b58      	ldr	r3, [pc, #352]	; (8003b9c <MX_LWIP_Init+0x240>)
 8003a3a:	781b      	ldrb	r3, [r3, #0]
 8003a3c:	061a      	lsls	r2, r3, #24
 8003a3e:	4b57      	ldr	r3, [pc, #348]	; (8003b9c <MX_LWIP_Init+0x240>)
 8003a40:	785b      	ldrb	r3, [r3, #1]
 8003a42:	041b      	lsls	r3, r3, #16
 8003a44:	431a      	orrs	r2, r3
 8003a46:	4b55      	ldr	r3, [pc, #340]	; (8003b9c <MX_LWIP_Init+0x240>)
 8003a48:	789b      	ldrb	r3, [r3, #2]
 8003a4a:	021b      	lsls	r3, r3, #8
 8003a4c:	4313      	orrs	r3, r2
 8003a4e:	4a53      	ldr	r2, [pc, #332]	; (8003b9c <MX_LWIP_Init+0x240>)
 8003a50:	78d2      	ldrb	r2, [r2, #3]
 8003a52:	4313      	orrs	r3, r2
 8003a54:	061a      	lsls	r2, r3, #24
 8003a56:	4b51      	ldr	r3, [pc, #324]	; (8003b9c <MX_LWIP_Init+0x240>)
 8003a58:	781b      	ldrb	r3, [r3, #0]
 8003a5a:	0619      	lsls	r1, r3, #24
 8003a5c:	4b4f      	ldr	r3, [pc, #316]	; (8003b9c <MX_LWIP_Init+0x240>)
 8003a5e:	785b      	ldrb	r3, [r3, #1]
 8003a60:	041b      	lsls	r3, r3, #16
 8003a62:	4319      	orrs	r1, r3
 8003a64:	4b4d      	ldr	r3, [pc, #308]	; (8003b9c <MX_LWIP_Init+0x240>)
 8003a66:	789b      	ldrb	r3, [r3, #2]
 8003a68:	021b      	lsls	r3, r3, #8
 8003a6a:	430b      	orrs	r3, r1
 8003a6c:	494b      	ldr	r1, [pc, #300]	; (8003b9c <MX_LWIP_Init+0x240>)
 8003a6e:	78c9      	ldrb	r1, [r1, #3]
 8003a70:	430b      	orrs	r3, r1
 8003a72:	021b      	lsls	r3, r3, #8
 8003a74:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8003a78:	431a      	orrs	r2, r3
 8003a7a:	4b48      	ldr	r3, [pc, #288]	; (8003b9c <MX_LWIP_Init+0x240>)
 8003a7c:	781b      	ldrb	r3, [r3, #0]
 8003a7e:	0619      	lsls	r1, r3, #24
 8003a80:	4b46      	ldr	r3, [pc, #280]	; (8003b9c <MX_LWIP_Init+0x240>)
 8003a82:	785b      	ldrb	r3, [r3, #1]
 8003a84:	041b      	lsls	r3, r3, #16
 8003a86:	4319      	orrs	r1, r3
 8003a88:	4b44      	ldr	r3, [pc, #272]	; (8003b9c <MX_LWIP_Init+0x240>)
 8003a8a:	789b      	ldrb	r3, [r3, #2]
 8003a8c:	021b      	lsls	r3, r3, #8
 8003a8e:	430b      	orrs	r3, r1
 8003a90:	4942      	ldr	r1, [pc, #264]	; (8003b9c <MX_LWIP_Init+0x240>)
 8003a92:	78c9      	ldrb	r1, [r1, #3]
 8003a94:	430b      	orrs	r3, r1
 8003a96:	0a1b      	lsrs	r3, r3, #8
 8003a98:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8003a9c:	431a      	orrs	r2, r3
 8003a9e:	4b3f      	ldr	r3, [pc, #252]	; (8003b9c <MX_LWIP_Init+0x240>)
 8003aa0:	781b      	ldrb	r3, [r3, #0]
 8003aa2:	0619      	lsls	r1, r3, #24
 8003aa4:	4b3d      	ldr	r3, [pc, #244]	; (8003b9c <MX_LWIP_Init+0x240>)
 8003aa6:	785b      	ldrb	r3, [r3, #1]
 8003aa8:	041b      	lsls	r3, r3, #16
 8003aaa:	4319      	orrs	r1, r3
 8003aac:	4b3b      	ldr	r3, [pc, #236]	; (8003b9c <MX_LWIP_Init+0x240>)
 8003aae:	789b      	ldrb	r3, [r3, #2]
 8003ab0:	021b      	lsls	r3, r3, #8
 8003ab2:	430b      	orrs	r3, r1
 8003ab4:	4939      	ldr	r1, [pc, #228]	; (8003b9c <MX_LWIP_Init+0x240>)
 8003ab6:	78c9      	ldrb	r1, [r1, #3]
 8003ab8:	430b      	orrs	r3, r1
 8003aba:	0e1b      	lsrs	r3, r3, #24
 8003abc:	4313      	orrs	r3, r2
 8003abe:	4a3a      	ldr	r2, [pc, #232]	; (8003ba8 <MX_LWIP_Init+0x24c>)
 8003ac0:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 8003ac2:	4b37      	ldr	r3, [pc, #220]	; (8003ba0 <MX_LWIP_Init+0x244>)
 8003ac4:	781b      	ldrb	r3, [r3, #0]
 8003ac6:	061a      	lsls	r2, r3, #24
 8003ac8:	4b35      	ldr	r3, [pc, #212]	; (8003ba0 <MX_LWIP_Init+0x244>)
 8003aca:	785b      	ldrb	r3, [r3, #1]
 8003acc:	041b      	lsls	r3, r3, #16
 8003ace:	431a      	orrs	r2, r3
 8003ad0:	4b33      	ldr	r3, [pc, #204]	; (8003ba0 <MX_LWIP_Init+0x244>)
 8003ad2:	789b      	ldrb	r3, [r3, #2]
 8003ad4:	021b      	lsls	r3, r3, #8
 8003ad6:	4313      	orrs	r3, r2
 8003ad8:	4a31      	ldr	r2, [pc, #196]	; (8003ba0 <MX_LWIP_Init+0x244>)
 8003ada:	78d2      	ldrb	r2, [r2, #3]
 8003adc:	4313      	orrs	r3, r2
 8003ade:	061a      	lsls	r2, r3, #24
 8003ae0:	4b2f      	ldr	r3, [pc, #188]	; (8003ba0 <MX_LWIP_Init+0x244>)
 8003ae2:	781b      	ldrb	r3, [r3, #0]
 8003ae4:	0619      	lsls	r1, r3, #24
 8003ae6:	4b2e      	ldr	r3, [pc, #184]	; (8003ba0 <MX_LWIP_Init+0x244>)
 8003ae8:	785b      	ldrb	r3, [r3, #1]
 8003aea:	041b      	lsls	r3, r3, #16
 8003aec:	4319      	orrs	r1, r3
 8003aee:	4b2c      	ldr	r3, [pc, #176]	; (8003ba0 <MX_LWIP_Init+0x244>)
 8003af0:	789b      	ldrb	r3, [r3, #2]
 8003af2:	021b      	lsls	r3, r3, #8
 8003af4:	430b      	orrs	r3, r1
 8003af6:	492a      	ldr	r1, [pc, #168]	; (8003ba0 <MX_LWIP_Init+0x244>)
 8003af8:	78c9      	ldrb	r1, [r1, #3]
 8003afa:	430b      	orrs	r3, r1
 8003afc:	021b      	lsls	r3, r3, #8
 8003afe:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8003b02:	431a      	orrs	r2, r3
 8003b04:	4b26      	ldr	r3, [pc, #152]	; (8003ba0 <MX_LWIP_Init+0x244>)
 8003b06:	781b      	ldrb	r3, [r3, #0]
 8003b08:	0619      	lsls	r1, r3, #24
 8003b0a:	4b25      	ldr	r3, [pc, #148]	; (8003ba0 <MX_LWIP_Init+0x244>)
 8003b0c:	785b      	ldrb	r3, [r3, #1]
 8003b0e:	041b      	lsls	r3, r3, #16
 8003b10:	4319      	orrs	r1, r3
 8003b12:	4b23      	ldr	r3, [pc, #140]	; (8003ba0 <MX_LWIP_Init+0x244>)
 8003b14:	789b      	ldrb	r3, [r3, #2]
 8003b16:	021b      	lsls	r3, r3, #8
 8003b18:	430b      	orrs	r3, r1
 8003b1a:	4921      	ldr	r1, [pc, #132]	; (8003ba0 <MX_LWIP_Init+0x244>)
 8003b1c:	78c9      	ldrb	r1, [r1, #3]
 8003b1e:	430b      	orrs	r3, r1
 8003b20:	0a1b      	lsrs	r3, r3, #8
 8003b22:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8003b26:	431a      	orrs	r2, r3
 8003b28:	4b1d      	ldr	r3, [pc, #116]	; (8003ba0 <MX_LWIP_Init+0x244>)
 8003b2a:	781b      	ldrb	r3, [r3, #0]
 8003b2c:	0619      	lsls	r1, r3, #24
 8003b2e:	4b1c      	ldr	r3, [pc, #112]	; (8003ba0 <MX_LWIP_Init+0x244>)
 8003b30:	785b      	ldrb	r3, [r3, #1]
 8003b32:	041b      	lsls	r3, r3, #16
 8003b34:	4319      	orrs	r1, r3
 8003b36:	4b1a      	ldr	r3, [pc, #104]	; (8003ba0 <MX_LWIP_Init+0x244>)
 8003b38:	789b      	ldrb	r3, [r3, #2]
 8003b3a:	021b      	lsls	r3, r3, #8
 8003b3c:	430b      	orrs	r3, r1
 8003b3e:	4918      	ldr	r1, [pc, #96]	; (8003ba0 <MX_LWIP_Init+0x244>)
 8003b40:	78c9      	ldrb	r1, [r1, #3]
 8003b42:	430b      	orrs	r3, r1
 8003b44:	0e1b      	lsrs	r3, r3, #24
 8003b46:	4313      	orrs	r3, r2
 8003b48:	4a18      	ldr	r2, [pc, #96]	; (8003bac <MX_LWIP_Init+0x250>)
 8003b4a:	6013      	str	r3, [r2, #0]

  /* add the network interface (IPv4/IPv6) without RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &ethernet_input);
 8003b4c:	4b18      	ldr	r3, [pc, #96]	; (8003bb0 <MX_LWIP_Init+0x254>)
 8003b4e:	9302      	str	r3, [sp, #8]
 8003b50:	4b18      	ldr	r3, [pc, #96]	; (8003bb4 <MX_LWIP_Init+0x258>)
 8003b52:	9301      	str	r3, [sp, #4]
 8003b54:	2300      	movs	r3, #0
 8003b56:	9300      	str	r3, [sp, #0]
 8003b58:	4b14      	ldr	r3, [pc, #80]	; (8003bac <MX_LWIP_Init+0x250>)
 8003b5a:	4a13      	ldr	r2, [pc, #76]	; (8003ba8 <MX_LWIP_Init+0x24c>)
 8003b5c:	4911      	ldr	r1, [pc, #68]	; (8003ba4 <MX_LWIP_Init+0x248>)
 8003b5e:	4816      	ldr	r0, [pc, #88]	; (8003bb8 <MX_LWIP_Init+0x25c>)
 8003b60:	f001 f906 	bl	8004d70 <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 8003b64:	4814      	ldr	r0, [pc, #80]	; (8003bb8 <MX_LWIP_Init+0x25c>)
 8003b66:	f001 fab5 	bl	80050d4 <netif_set_default>

  if (netif_is_link_up(&gnetif))
 8003b6a:	4b13      	ldr	r3, [pc, #76]	; (8003bb8 <MX_LWIP_Init+0x25c>)
 8003b6c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8003b70:	089b      	lsrs	r3, r3, #2
 8003b72:	f003 0301 	and.w	r3, r3, #1
 8003b76:	b2db      	uxtb	r3, r3
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d003      	beq.n	8003b84 <MX_LWIP_Init+0x228>
  {
    /* When the netif is fully configured this function must be called */
    netif_set_up(&gnetif);
 8003b7c:	480e      	ldr	r0, [pc, #56]	; (8003bb8 <MX_LWIP_Init+0x25c>)
 8003b7e:	f001 fab9 	bl	80050f4 <netif_set_up>
 8003b82:	e002      	b.n	8003b8a <MX_LWIP_Init+0x22e>
  }
  else
  {
    /* When the netif link is down this function must be called */
    netif_set_down(&gnetif);
 8003b84:	480c      	ldr	r0, [pc, #48]	; (8003bb8 <MX_LWIP_Init+0x25c>)
 8003b86:	f001 fb21 	bl	80051cc <netif_set_down>
  }

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernet_link_status_updated);
 8003b8a:	490c      	ldr	r1, [pc, #48]	; (8003bbc <MX_LWIP_Init+0x260>)
 8003b8c:	480a      	ldr	r0, [pc, #40]	; (8003bb8 <MX_LWIP_Init+0x25c>)
 8003b8e:	f001 fbb3 	bl	80052f8 <netif_set_link_callback>
  /* Create the Ethernet link handler thread */

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 8003b92:	bf00      	nop
 8003b94:	46bd      	mov	sp, r7
 8003b96:	bd80      	pop	{r7, pc}
 8003b98:	2000019c 	.word	0x2000019c
 8003b9c:	200001a0 	.word	0x200001a0
 8003ba0:	200001a4 	.word	0x200001a4
 8003ba4:	20000190 	.word	0x20000190
 8003ba8:	20000194 	.word	0x20000194
 8003bac:	20000198 	.word	0x20000198
 8003bb0:	0800e399 	.word	0x0800e399
 8003bb4:	08003e7d 	.word	0x08003e7d
 8003bb8:	2000015c 	.word	0x2000015c
 8003bbc:	08003bc1 	.word	0x08003bc1

08003bc0 <ethernet_link_status_updated>:
  * @brief  Notify the User about the network interface config status
  * @param  netif: the network interface
  * @retval None
  */
static void ethernet_link_status_updated(struct netif *netif)
{
 8003bc0:	b480      	push	{r7}
 8003bc2:	b083      	sub	sp, #12
 8003bc4:	af00      	add	r7, sp, #0
 8003bc6:	6078      	str	r0, [r7, #4]
  else /* netif is down */
  {
/* USER CODE BEGIN 6 */
/* USER CODE END 6 */
  }
}
 8003bc8:	bf00      	nop
 8003bca:	370c      	adds	r7, #12
 8003bcc:	46bd      	mov	sp, r7
 8003bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bd2:	4770      	bx	lr

08003bd4 <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 8003bd4:	b580      	push	{r7, lr}
 8003bd6:	b084      	sub	sp, #16
 8003bd8:	af00      	add	r7, sp, #0
 8003bda:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_eth_init_status = HAL_OK;
 8003bdc:	2300      	movs	r3, #0
 8003bde:	73fb      	strb	r3, [r7, #15]
  /* Start ETH HAL Init */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 8003be0:	4b40      	ldr	r3, [pc, #256]	; (8003ce4 <low_level_init+0x110>)
 8003be2:	4a41      	ldr	r2, [pc, #260]	; (8003ce8 <low_level_init+0x114>)
 8003be4:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8003be6:	2300      	movs	r3, #0
 8003be8:	723b      	strb	r3, [r7, #8]
  MACAddr[1] = 0x80;
 8003bea:	2380      	movs	r3, #128	; 0x80
 8003bec:	727b      	strb	r3, [r7, #9]
  MACAddr[2] = 0xE1;
 8003bee:	23e1      	movs	r3, #225	; 0xe1
 8003bf0:	72bb      	strb	r3, [r7, #10]
  MACAddr[3] = 0x00;
 8003bf2:	2300      	movs	r3, #0
 8003bf4:	72fb      	strb	r3, [r7, #11]
  MACAddr[4] = 0x00;
 8003bf6:	2300      	movs	r3, #0
 8003bf8:	733b      	strb	r3, [r7, #12]
  MACAddr[5] = 0x00;
 8003bfa:	2300      	movs	r3, #0
 8003bfc:	737b      	strb	r3, [r7, #13]
  heth.Init.MACAddr = &MACAddr[0];
 8003bfe:	4a39      	ldr	r2, [pc, #228]	; (8003ce4 <low_level_init+0x110>)
 8003c00:	f107 0308 	add.w	r3, r7, #8
 8003c04:	6053      	str	r3, [r2, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8003c06:	4b37      	ldr	r3, [pc, #220]	; (8003ce4 <low_level_init+0x110>)
 8003c08:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8003c0c:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8003c0e:	4b35      	ldr	r3, [pc, #212]	; (8003ce4 <low_level_init+0x110>)
 8003c10:	4a36      	ldr	r2, [pc, #216]	; (8003cec <low_level_init+0x118>)
 8003c12:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8003c14:	4b33      	ldr	r3, [pc, #204]	; (8003ce4 <low_level_init+0x110>)
 8003c16:	4a36      	ldr	r2, [pc, #216]	; (8003cf0 <low_level_init+0x11c>)
 8003c18:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1536;
 8003c1a:	4b32      	ldr	r3, [pc, #200]	; (8003ce4 <low_level_init+0x110>)
 8003c1c:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 8003c20:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 8003c22:	4830      	ldr	r0, [pc, #192]	; (8003ce4 <low_level_init+0x110>)
 8003c24:	f7fd fb6c 	bl	8001300 <HAL_ETH_Init>
 8003c28:	4603      	mov	r3, r0
 8003c2a:	73fb      	strb	r3, [r7, #15]

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8003c2c:	2238      	movs	r2, #56	; 0x38
 8003c2e:	2100      	movs	r1, #0
 8003c30:	4830      	ldr	r0, [pc, #192]	; (8003cf4 <low_level_init+0x120>)
 8003c32:	f00a ff05 	bl	800ea40 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8003c36:	4b2f      	ldr	r3, [pc, #188]	; (8003cf4 <low_level_init+0x120>)
 8003c38:	2221      	movs	r2, #33	; 0x21
 8003c3a:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8003c3c:	4b2d      	ldr	r3, [pc, #180]	; (8003cf4 <low_level_init+0x120>)
 8003c3e:	f44f 0240 	mov.w	r2, #12582912	; 0xc00000
 8003c42:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8003c44:	4b2b      	ldr	r3, [pc, #172]	; (8003cf4 <low_level_init+0x120>)
 8003c46:	2200      	movs	r2, #0
 8003c48:	611a      	str	r2, [r3, #16]

  /* End ETH HAL Init */

  /* Initialize the RX POOL */
  LWIP_MEMPOOL_INIT(RX_POOL);
 8003c4a:	482b      	ldr	r0, [pc, #172]	; (8003cf8 <low_level_init+0x124>)
 8003c4c:	f000 ff58 	bl	8004b00 <memp_init_pool>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	2206      	movs	r2, #6
 8003c54:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 8003c58:	4b22      	ldr	r3, [pc, #136]	; (8003ce4 <low_level_init+0x110>)
 8003c5a:	685b      	ldr	r3, [r3, #4]
 8003c5c:	781a      	ldrb	r2, [r3, #0]
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 8003c64:	4b1f      	ldr	r3, [pc, #124]	; (8003ce4 <low_level_init+0x110>)
 8003c66:	685b      	ldr	r3, [r3, #4]
 8003c68:	785a      	ldrb	r2, [r3, #1]
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 8003c70:	4b1c      	ldr	r3, [pc, #112]	; (8003ce4 <low_level_init+0x110>)
 8003c72:	685b      	ldr	r3, [r3, #4]
 8003c74:	789a      	ldrb	r2, [r3, #2]
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 8003c7c:	4b19      	ldr	r3, [pc, #100]	; (8003ce4 <low_level_init+0x110>)
 8003c7e:	685b      	ldr	r3, [r3, #4]
 8003c80:	78da      	ldrb	r2, [r3, #3]
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 8003c88:	4b16      	ldr	r3, [pc, #88]	; (8003ce4 <low_level_init+0x110>)
 8003c8a:	685b      	ldr	r3, [r3, #4]
 8003c8c:	791a      	ldrb	r2, [r3, #4]
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 8003c94:	4b13      	ldr	r3, [pc, #76]	; (8003ce4 <low_level_init+0x110>)
 8003c96:	685b      	ldr	r3, [r3, #4]
 8003c98:	795a      	ldrb	r2, [r3, #5]
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b

  /* maximum transfer unit */
  netif->mtu = ETH_MAX_PAYLOAD;
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8003ca6:	849a      	strh	r2, [r3, #36]	; 0x24

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8003cae:	f043 030a 	orr.w	r3, r3, #10
 8003cb2:	b2da      	uxtb	r2, r3
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

/* USER CODE BEGIN PHY_PRE_CONFIG */

/* USER CODE END PHY_PRE_CONFIG */
  /* Set PHY IO functions */
  LAN8742_RegisterBusIO(&LAN8742, &LAN8742_IOCtx);
 8003cba:	4910      	ldr	r1, [pc, #64]	; (8003cfc <low_level_init+0x128>)
 8003cbc:	4810      	ldr	r0, [pc, #64]	; (8003d00 <low_level_init+0x12c>)
 8003cbe:	f7fd f816 	bl	8000cee <LAN8742_RegisterBusIO>

  /* Initialize the LAN8742 ETH PHY */
  LAN8742_Init(&LAN8742);
 8003cc2:	480f      	ldr	r0, [pc, #60]	; (8003d00 <low_level_init+0x12c>)
 8003cc4:	f7fd f845 	bl	8000d52 <LAN8742_Init>

  if (hal_eth_init_status == HAL_OK)
 8003cc8:	7bfb      	ldrb	r3, [r7, #15]
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d103      	bne.n	8003cd6 <low_level_init+0x102>
  {
  /* Get link state */
  ethernet_link_check_state(netif);
 8003cce:	6878      	ldr	r0, [r7, #4]
 8003cd0:	f000 fa38 	bl	8004144 <ethernet_link_check_state>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */
}
 8003cd4:	e001      	b.n	8003cda <low_level_init+0x106>
    Error_Handler();
 8003cd6:	f7fc fdff 	bl	80008d8 <Error_Handler>
}
 8003cda:	bf00      	nop
 8003cdc:	3710      	adds	r7, #16
 8003cde:	46bd      	mov	sp, r7
 8003ce0:	bd80      	pop	{r7, pc}
 8003ce2:	bf00      	nop
 8003ce4:	20004c74 	.word	0x20004c74
 8003ce8:	40028000 	.word	0x40028000
 8003cec:	20004bd4 	.word	0x20004bd4
 8003cf0:	20004b34 	.word	0x20004b34
 8003cf4:	20004d24 	.word	0x20004d24
 8003cf8:	080123c8 	.word	0x080123c8
 8003cfc:	2000000c 	.word	0x2000000c
 8003d00:	20004d5c 	.word	0x20004d5c

08003d04 <low_level_output>:
 *       to become available since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 8003d04:	b580      	push	{r7, lr}
 8003d06:	b092      	sub	sp, #72	; 0x48
 8003d08:	af00      	add	r7, sp, #0
 8003d0a:	6078      	str	r0, [r7, #4]
 8003d0c:	6039      	str	r1, [r7, #0]
  uint32_t i = 0U;
 8003d0e:	2300      	movs	r3, #0
 8003d10:	647b      	str	r3, [r7, #68]	; 0x44
  struct pbuf *q = NULL;
 8003d12:	2300      	movs	r3, #0
 8003d14:	643b      	str	r3, [r7, #64]	; 0x40
  err_t errval = ERR_OK;
 8003d16:	2300      	movs	r3, #0
 8003d18:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  ETH_BufferTypeDef Txbuffer[ETH_TX_DESC_CNT] = {0};
 8003d1c:	f107 030c 	add.w	r3, r7, #12
 8003d20:	2230      	movs	r2, #48	; 0x30
 8003d22:	2100      	movs	r1, #0
 8003d24:	4618      	mov	r0, r3
 8003d26:	f00a fe8b 	bl	800ea40 <memset>

  memset(Txbuffer, 0 , ETH_TX_DESC_CNT*sizeof(ETH_BufferTypeDef));
 8003d2a:	f107 030c 	add.w	r3, r7, #12
 8003d2e:	2230      	movs	r2, #48	; 0x30
 8003d30:	2100      	movs	r1, #0
 8003d32:	4618      	mov	r0, r3
 8003d34:	f00a fe84 	bl	800ea40 <memset>

  for(q = p; q != NULL; q = q->next)
 8003d38:	683b      	ldr	r3, [r7, #0]
 8003d3a:	643b      	str	r3, [r7, #64]	; 0x40
 8003d3c:	e045      	b.n	8003dca <low_level_output+0xc6>
  {
    if(i >= ETH_TX_DESC_CNT)
 8003d3e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003d40:	2b03      	cmp	r3, #3
 8003d42:	d902      	bls.n	8003d4a <low_level_output+0x46>
      return ERR_IF;
 8003d44:	f06f 030b 	mvn.w	r3, #11
 8003d48:	e055      	b.n	8003df6 <low_level_output+0xf2>

    Txbuffer[i].buffer = q->payload;
 8003d4a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003d4c:	6859      	ldr	r1, [r3, #4]
 8003d4e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003d50:	4613      	mov	r3, r2
 8003d52:	005b      	lsls	r3, r3, #1
 8003d54:	4413      	add	r3, r2
 8003d56:	009b      	lsls	r3, r3, #2
 8003d58:	3348      	adds	r3, #72	; 0x48
 8003d5a:	443b      	add	r3, r7
 8003d5c:	3b3c      	subs	r3, #60	; 0x3c
 8003d5e:	6019      	str	r1, [r3, #0]
    Txbuffer[i].len = q->len;
 8003d60:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003d62:	895b      	ldrh	r3, [r3, #10]
 8003d64:	4619      	mov	r1, r3
 8003d66:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003d68:	4613      	mov	r3, r2
 8003d6a:	005b      	lsls	r3, r3, #1
 8003d6c:	4413      	add	r3, r2
 8003d6e:	009b      	lsls	r3, r3, #2
 8003d70:	3348      	adds	r3, #72	; 0x48
 8003d72:	443b      	add	r3, r7
 8003d74:	3b38      	subs	r3, #56	; 0x38
 8003d76:	6019      	str	r1, [r3, #0]

    if(i>0)
 8003d78:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d011      	beq.n	8003da2 <low_level_output+0x9e>
    {
      Txbuffer[i-1].next = &Txbuffer[i];
 8003d7e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003d80:	1e5a      	subs	r2, r3, #1
 8003d82:	f107 000c 	add.w	r0, r7, #12
 8003d86:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8003d88:	460b      	mov	r3, r1
 8003d8a:	005b      	lsls	r3, r3, #1
 8003d8c:	440b      	add	r3, r1
 8003d8e:	009b      	lsls	r3, r3, #2
 8003d90:	18c1      	adds	r1, r0, r3
 8003d92:	4613      	mov	r3, r2
 8003d94:	005b      	lsls	r3, r3, #1
 8003d96:	4413      	add	r3, r2
 8003d98:	009b      	lsls	r3, r3, #2
 8003d9a:	3348      	adds	r3, #72	; 0x48
 8003d9c:	443b      	add	r3, r7
 8003d9e:	3b34      	subs	r3, #52	; 0x34
 8003da0:	6019      	str	r1, [r3, #0]
    }

    if(q->next == NULL)
 8003da2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d109      	bne.n	8003dbe <low_level_output+0xba>
    {
      Txbuffer[i].next = NULL;
 8003daa:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003dac:	4613      	mov	r3, r2
 8003dae:	005b      	lsls	r3, r3, #1
 8003db0:	4413      	add	r3, r2
 8003db2:	009b      	lsls	r3, r3, #2
 8003db4:	3348      	adds	r3, #72	; 0x48
 8003db6:	443b      	add	r3, r7
 8003db8:	3b34      	subs	r3, #52	; 0x34
 8003dba:	2200      	movs	r2, #0
 8003dbc:	601a      	str	r2, [r3, #0]
    }

    i++;
 8003dbe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003dc0:	3301      	adds	r3, #1
 8003dc2:	647b      	str	r3, [r7, #68]	; 0x44
  for(q = p; q != NULL; q = q->next)
 8003dc4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	643b      	str	r3, [r7, #64]	; 0x40
 8003dca:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d1b6      	bne.n	8003d3e <low_level_output+0x3a>
  }

  TxConfig.Length = p->tot_len;
 8003dd0:	683b      	ldr	r3, [r7, #0]
 8003dd2:	891b      	ldrh	r3, [r3, #8]
 8003dd4:	461a      	mov	r2, r3
 8003dd6:	4b0a      	ldr	r3, [pc, #40]	; (8003e00 <low_level_output+0xfc>)
 8003dd8:	605a      	str	r2, [r3, #4]
  TxConfig.TxBuffer = Txbuffer;
 8003dda:	4a09      	ldr	r2, [pc, #36]	; (8003e00 <low_level_output+0xfc>)
 8003ddc:	f107 030c 	add.w	r3, r7, #12
 8003de0:	6093      	str	r3, [r2, #8]
  TxConfig.pData = p;
 8003de2:	4a07      	ldr	r2, [pc, #28]	; (8003e00 <low_level_output+0xfc>)
 8003de4:	683b      	ldr	r3, [r7, #0]
 8003de6:	6353      	str	r3, [r2, #52]	; 0x34

  HAL_ETH_Transmit(&heth, &TxConfig, ETH_DMA_TRANSMIT_TIMEOUT);
 8003de8:	2214      	movs	r2, #20
 8003dea:	4905      	ldr	r1, [pc, #20]	; (8003e00 <low_level_output+0xfc>)
 8003dec:	4805      	ldr	r0, [pc, #20]	; (8003e04 <low_level_output+0x100>)
 8003dee:	f7fd fbbd 	bl	800156c <HAL_ETH_Transmit>

  return errval;
 8003df2:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 8003df6:	4618      	mov	r0, r3
 8003df8:	3748      	adds	r7, #72	; 0x48
 8003dfa:	46bd      	mov	sp, r7
 8003dfc:	bd80      	pop	{r7, pc}
 8003dfe:	bf00      	nop
 8003e00:	20004d24 	.word	0x20004d24
 8003e04:	20004c74 	.word	0x20004c74

08003e08 <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 8003e08:	b580      	push	{r7, lr}
 8003e0a:	b084      	sub	sp, #16
 8003e0c:	af00      	add	r7, sp, #0
 8003e0e:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 8003e10:	2300      	movs	r3, #0
 8003e12:	60fb      	str	r3, [r7, #12]

  if(RxAllocStatus == RX_ALLOC_OK)
 8003e14:	4b07      	ldr	r3, [pc, #28]	; (8003e34 <low_level_input+0x2c>)
 8003e16:	781b      	ldrb	r3, [r3, #0]
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	d105      	bne.n	8003e28 <low_level_input+0x20>
  {
    HAL_ETH_ReadData(&heth, (void **)&p);
 8003e1c:	f107 030c 	add.w	r3, r7, #12
 8003e20:	4619      	mov	r1, r3
 8003e22:	4805      	ldr	r0, [pc, #20]	; (8003e38 <low_level_input+0x30>)
 8003e24:	f7fd fc36 	bl	8001694 <HAL_ETH_ReadData>
  }

  return p;
 8003e28:	68fb      	ldr	r3, [r7, #12]
}
 8003e2a:	4618      	mov	r0, r3
 8003e2c:	3710      	adds	r7, #16
 8003e2e:	46bd      	mov	sp, r7
 8003e30:	bd80      	pop	{r7, pc}
 8003e32:	bf00      	nop
 8003e34:	20004b30 	.word	0x20004b30
 8003e38:	20004c74 	.word	0x20004c74

08003e3c <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input(struct netif *netif)
{
 8003e3c:	b580      	push	{r7, lr}
 8003e3e:	b084      	sub	sp, #16
 8003e40:	af00      	add	r7, sp, #0
 8003e42:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 8003e44:	2300      	movs	r3, #0
 8003e46:	60fb      	str	r3, [r7, #12]

  do
  {
    p = low_level_input( netif );
 8003e48:	6878      	ldr	r0, [r7, #4]
 8003e4a:	f7ff ffdd 	bl	8003e08 <low_level_input>
 8003e4e:	60f8      	str	r0, [r7, #12]
    if (p != NULL)
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d00a      	beq.n	8003e6c <ethernetif_input+0x30>
    {
      if (netif->input( p, netif) != ERR_OK )
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	691b      	ldr	r3, [r3, #16]
 8003e5a:	6879      	ldr	r1, [r7, #4]
 8003e5c:	68f8      	ldr	r0, [r7, #12]
 8003e5e:	4798      	blx	r3
 8003e60:	4603      	mov	r3, r0
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d002      	beq.n	8003e6c <ethernetif_input+0x30>
      {
        pbuf_free(p);
 8003e66:	68f8      	ldr	r0, [r7, #12]
 8003e68:	f001 fdc6 	bl	80059f8 <pbuf_free>
      }
    }
  } while(p!=NULL);
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d1ea      	bne.n	8003e48 <ethernetif_input+0xc>
}
 8003e72:	bf00      	nop
 8003e74:	bf00      	nop
 8003e76:	3710      	adds	r7, #16
 8003e78:	46bd      	mov	sp, r7
 8003e7a:	bd80      	pop	{r7, pc}

08003e7c <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 8003e7c:	b580      	push	{r7, lr}
 8003e7e:	b082      	sub	sp, #8
 8003e80:	af00      	add	r7, sp, #0
 8003e82:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d106      	bne.n	8003e98 <ethernetif_init+0x1c>
 8003e8a:	4b0e      	ldr	r3, [pc, #56]	; (8003ec4 <ethernetif_init+0x48>)
 8003e8c:	f44f 72b5 	mov.w	r2, #362	; 0x16a
 8003e90:	490d      	ldr	r1, [pc, #52]	; (8003ec8 <ethernetif_init+0x4c>)
 8003e92:	480e      	ldr	r0, [pc, #56]	; (8003ecc <ethernetif_init+0x50>)
 8003e94:	f00a fc44 	bl	800e720 <iprintf>
   * The last argument should be replaced with your link speed, in units
   * of bits per second.
   */
  // MIB2_INIT_NETIF(netif, snmp_ifType_ethernet_csmacd, LINK_SPEED_OF_YOUR_NETIF_IN_BPS);

  netif->name[0] = IFNAME0;
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	2273      	movs	r2, #115	; 0x73
 8003e9c:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
  netif->name[1] = IFNAME1;
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	2274      	movs	r2, #116	; 0x74
 8003ea4:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	4a09      	ldr	r2, [pc, #36]	; (8003ed0 <ethernetif_init+0x54>)
 8003eac:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	4a08      	ldr	r2, [pc, #32]	; (8003ed4 <ethernetif_init+0x58>)
 8003eb2:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 8003eb4:	6878      	ldr	r0, [r7, #4]
 8003eb6:	f7ff fe8d 	bl	8003bd4 <low_level_init>

  return ERR_OK;
 8003eba:	2300      	movs	r3, #0
}
 8003ebc:	4618      	mov	r0, r3
 8003ebe:	3708      	adds	r7, #8
 8003ec0:	46bd      	mov	sp, r7
 8003ec2:	bd80      	pop	{r7, pc}
 8003ec4:	0800f9d0 	.word	0x0800f9d0
 8003ec8:	0800f9ec 	.word	0x0800f9ec
 8003ecc:	0800f9fc 	.word	0x0800f9fc
 8003ed0:	0800c851 	.word	0x0800c851
 8003ed4:	08003d05 	.word	0x08003d05

08003ed8 <pbuf_free_custom>:
  * @brief  Custom Rx pbuf free callback
  * @param  pbuf: pbuf to be freed
  * @retval None
  */
void pbuf_free_custom(struct pbuf *p)
{
 8003ed8:	b580      	push	{r7, lr}
 8003eda:	b084      	sub	sp, #16
 8003edc:	af00      	add	r7, sp, #0
 8003ede:	6078      	str	r0, [r7, #4]
  struct pbuf_custom* custom_pbuf = (struct pbuf_custom*)p;
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	60fb      	str	r3, [r7, #12]
  LWIP_MEMPOOL_FREE(RX_POOL, custom_pbuf);
 8003ee4:	68f9      	ldr	r1, [r7, #12]
 8003ee6:	4807      	ldr	r0, [pc, #28]	; (8003f04 <pbuf_free_custom+0x2c>)
 8003ee8:	f000 feec 	bl	8004cc4 <memp_free_pool>

  /* If the Rx Buffer Pool was exhausted, signal the ethernetif_input task to
   * call HAL_ETH_GetRxDataBuffer to rebuild the Rx descriptors. */

  if (RxAllocStatus == RX_ALLOC_ERROR)
 8003eec:	4b06      	ldr	r3, [pc, #24]	; (8003f08 <pbuf_free_custom+0x30>)
 8003eee:	781b      	ldrb	r3, [r3, #0]
 8003ef0:	2b01      	cmp	r3, #1
 8003ef2:	d102      	bne.n	8003efa <pbuf_free_custom+0x22>
  {
    RxAllocStatus = RX_ALLOC_OK;
 8003ef4:	4b04      	ldr	r3, [pc, #16]	; (8003f08 <pbuf_free_custom+0x30>)
 8003ef6:	2200      	movs	r2, #0
 8003ef8:	701a      	strb	r2, [r3, #0]
  }
}
 8003efa:	bf00      	nop
 8003efc:	3710      	adds	r7, #16
 8003efe:	46bd      	mov	sp, r7
 8003f00:	bd80      	pop	{r7, pc}
 8003f02:	bf00      	nop
 8003f04:	080123c8 	.word	0x080123c8
 8003f08:	20004b30 	.word	0x20004b30

08003f0c <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Current Time value
*/
u32_t sys_now(void)
{
 8003f0c:	b580      	push	{r7, lr}
 8003f0e:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8003f10:	f7fd f8b4 	bl	800107c <HAL_GetTick>
 8003f14:	4603      	mov	r3, r0
}
 8003f16:	4618      	mov	r0, r3
 8003f18:	bd80      	pop	{r7, pc}
	...

08003f1c <HAL_ETH_MspInit>:
  * @param  ethHandle: ETH handle
  * @retval None
  */

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 8003f1c:	b580      	push	{r7, lr}
 8003f1e:	b08e      	sub	sp, #56	; 0x38
 8003f20:	af00      	add	r7, sp, #0
 8003f22:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003f24:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003f28:	2200      	movs	r2, #0
 8003f2a:	601a      	str	r2, [r3, #0]
 8003f2c:	605a      	str	r2, [r3, #4]
 8003f2e:	609a      	str	r2, [r3, #8]
 8003f30:	60da      	str	r2, [r3, #12]
 8003f32:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	4a55      	ldr	r2, [pc, #340]	; (8004090 <HAL_ETH_MspInit+0x174>)
 8003f3a:	4293      	cmp	r3, r2
 8003f3c:	f040 80a4 	bne.w	8004088 <HAL_ETH_MspInit+0x16c>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH_CLK_ENABLE();
 8003f40:	2300      	movs	r3, #0
 8003f42:	623b      	str	r3, [r7, #32]
 8003f44:	4b53      	ldr	r3, [pc, #332]	; (8004094 <HAL_ETH_MspInit+0x178>)
 8003f46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f48:	4a52      	ldr	r2, [pc, #328]	; (8004094 <HAL_ETH_MspInit+0x178>)
 8003f4a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003f4e:	6313      	str	r3, [r2, #48]	; 0x30
 8003f50:	4b50      	ldr	r3, [pc, #320]	; (8004094 <HAL_ETH_MspInit+0x178>)
 8003f52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f54:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f58:	623b      	str	r3, [r7, #32]
 8003f5a:	6a3b      	ldr	r3, [r7, #32]
 8003f5c:	2300      	movs	r3, #0
 8003f5e:	61fb      	str	r3, [r7, #28]
 8003f60:	4b4c      	ldr	r3, [pc, #304]	; (8004094 <HAL_ETH_MspInit+0x178>)
 8003f62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f64:	4a4b      	ldr	r2, [pc, #300]	; (8004094 <HAL_ETH_MspInit+0x178>)
 8003f66:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003f6a:	6313      	str	r3, [r2, #48]	; 0x30
 8003f6c:	4b49      	ldr	r3, [pc, #292]	; (8004094 <HAL_ETH_MspInit+0x178>)
 8003f6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f70:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003f74:	61fb      	str	r3, [r7, #28]
 8003f76:	69fb      	ldr	r3, [r7, #28]
 8003f78:	2300      	movs	r3, #0
 8003f7a:	61bb      	str	r3, [r7, #24]
 8003f7c:	4b45      	ldr	r3, [pc, #276]	; (8004094 <HAL_ETH_MspInit+0x178>)
 8003f7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f80:	4a44      	ldr	r2, [pc, #272]	; (8004094 <HAL_ETH_MspInit+0x178>)
 8003f82:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003f86:	6313      	str	r3, [r2, #48]	; 0x30
 8003f88:	4b42      	ldr	r3, [pc, #264]	; (8004094 <HAL_ETH_MspInit+0x178>)
 8003f8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f8c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003f90:	61bb      	str	r3, [r7, #24]
 8003f92:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003f94:	2300      	movs	r3, #0
 8003f96:	617b      	str	r3, [r7, #20]
 8003f98:	4b3e      	ldr	r3, [pc, #248]	; (8004094 <HAL_ETH_MspInit+0x178>)
 8003f9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f9c:	4a3d      	ldr	r2, [pc, #244]	; (8004094 <HAL_ETH_MspInit+0x178>)
 8003f9e:	f043 0304 	orr.w	r3, r3, #4
 8003fa2:	6313      	str	r3, [r2, #48]	; 0x30
 8003fa4:	4b3b      	ldr	r3, [pc, #236]	; (8004094 <HAL_ETH_MspInit+0x178>)
 8003fa6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fa8:	f003 0304 	and.w	r3, r3, #4
 8003fac:	617b      	str	r3, [r7, #20]
 8003fae:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003fb0:	2300      	movs	r3, #0
 8003fb2:	613b      	str	r3, [r7, #16]
 8003fb4:	4b37      	ldr	r3, [pc, #220]	; (8004094 <HAL_ETH_MspInit+0x178>)
 8003fb6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fb8:	4a36      	ldr	r2, [pc, #216]	; (8004094 <HAL_ETH_MspInit+0x178>)
 8003fba:	f043 0301 	orr.w	r3, r3, #1
 8003fbe:	6313      	str	r3, [r2, #48]	; 0x30
 8003fc0:	4b34      	ldr	r3, [pc, #208]	; (8004094 <HAL_ETH_MspInit+0x178>)
 8003fc2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fc4:	f003 0301 	and.w	r3, r3, #1
 8003fc8:	613b      	str	r3, [r7, #16]
 8003fca:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003fcc:	2300      	movs	r3, #0
 8003fce:	60fb      	str	r3, [r7, #12]
 8003fd0:	4b30      	ldr	r3, [pc, #192]	; (8004094 <HAL_ETH_MspInit+0x178>)
 8003fd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fd4:	4a2f      	ldr	r2, [pc, #188]	; (8004094 <HAL_ETH_MspInit+0x178>)
 8003fd6:	f043 0302 	orr.w	r3, r3, #2
 8003fda:	6313      	str	r3, [r2, #48]	; 0x30
 8003fdc:	4b2d      	ldr	r3, [pc, #180]	; (8004094 <HAL_ETH_MspInit+0x178>)
 8003fde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fe0:	f003 0302 	and.w	r3, r3, #2
 8003fe4:	60fb      	str	r3, [r7, #12]
 8003fe6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8003fe8:	2300      	movs	r3, #0
 8003fea:	60bb      	str	r3, [r7, #8]
 8003fec:	4b29      	ldr	r3, [pc, #164]	; (8004094 <HAL_ETH_MspInit+0x178>)
 8003fee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ff0:	4a28      	ldr	r2, [pc, #160]	; (8004094 <HAL_ETH_MspInit+0x178>)
 8003ff2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003ff6:	6313      	str	r3, [r2, #48]	; 0x30
 8003ff8:	4b26      	ldr	r3, [pc, #152]	; (8004094 <HAL_ETH_MspInit+0x178>)
 8003ffa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ffc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004000:	60bb      	str	r3, [r7, #8]
 8004002:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8004004:	2332      	movs	r3, #50	; 0x32
 8004006:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004008:	2302      	movs	r3, #2
 800400a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800400c:	2300      	movs	r3, #0
 800400e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004010:	2303      	movs	r3, #3
 8004012:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8004014:	230b      	movs	r3, #11
 8004016:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004018:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800401c:	4619      	mov	r1, r3
 800401e:	481e      	ldr	r0, [pc, #120]	; (8004098 <HAL_ETH_MspInit+0x17c>)
 8004020:	f7fe fa64 	bl	80024ec <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8004024:	2386      	movs	r3, #134	; 0x86
 8004026:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004028:	2302      	movs	r3, #2
 800402a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800402c:	2300      	movs	r3, #0
 800402e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004030:	2303      	movs	r3, #3
 8004032:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8004034:	230b      	movs	r3, #11
 8004036:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004038:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800403c:	4619      	mov	r1, r3
 800403e:	4817      	ldr	r0, [pc, #92]	; (800409c <HAL_ETH_MspInit+0x180>)
 8004040:	f7fe fa54 	bl	80024ec <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8004044:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004048:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800404a:	2302      	movs	r3, #2
 800404c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800404e:	2300      	movs	r3, #0
 8004050:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004052:	2303      	movs	r3, #3
 8004054:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8004056:	230b      	movs	r3, #11
 8004058:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 800405a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800405e:	4619      	mov	r1, r3
 8004060:	480f      	ldr	r0, [pc, #60]	; (80040a0 <HAL_ETH_MspInit+0x184>)
 8004062:	f7fe fa43 	bl	80024ec <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8004066:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800406a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800406c:	2302      	movs	r3, #2
 800406e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004070:	2300      	movs	r3, #0
 8004072:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004074:	2303      	movs	r3, #3
 8004076:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8004078:	230b      	movs	r3, #11
 800407a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800407c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004080:	4619      	mov	r1, r3
 8004082:	4808      	ldr	r0, [pc, #32]	; (80040a4 <HAL_ETH_MspInit+0x188>)
 8004084:	f7fe fa32 	bl	80024ec <HAL_GPIO_Init>

  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 8004088:	bf00      	nop
 800408a:	3738      	adds	r7, #56	; 0x38
 800408c:	46bd      	mov	sp, r7
 800408e:	bd80      	pop	{r7, pc}
 8004090:	40028000 	.word	0x40028000
 8004094:	40023800 	.word	0x40023800
 8004098:	40020800 	.word	0x40020800
 800409c:	40020000 	.word	0x40020000
 80040a0:	40020400 	.word	0x40020400
 80040a4:	40021800 	.word	0x40021800

080040a8 <ETH_PHY_IO_Init>:
  * @brief  Initializes the MDIO interface GPIO and clocks.
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_Init(void)
{
 80040a8:	b580      	push	{r7, lr}
 80040aa:	af00      	add	r7, sp, #0
  /* We assume that MDIO GPIO configuration is already done
     in the ETH_MspInit() else it should be done here
  */

  /* Configure the MDIO Clock */
  HAL_ETH_SetMDIOClockRange(&heth);
 80040ac:	4802      	ldr	r0, [pc, #8]	; (80040b8 <ETH_PHY_IO_Init+0x10>)
 80040ae:	f7fd fdc1 	bl	8001c34 <HAL_ETH_SetMDIOClockRange>

  return 0;
 80040b2:	2300      	movs	r3, #0
}
 80040b4:	4618      	mov	r0, r3
 80040b6:	bd80      	pop	{r7, pc}
 80040b8:	20004c74 	.word	0x20004c74

080040bc <ETH_PHY_IO_DeInit>:
  * @brief  De-Initializes the MDIO interface .
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_DeInit (void)
{
 80040bc:	b480      	push	{r7}
 80040be:	af00      	add	r7, sp, #0
  return 0;
 80040c0:	2300      	movs	r3, #0
}
 80040c2:	4618      	mov	r0, r3
 80040c4:	46bd      	mov	sp, r7
 80040c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ca:	4770      	bx	lr

080040cc <ETH_PHY_IO_ReadReg>:
  * @param  RegAddr: PHY register address
  * @param  pRegVal: pointer to hold the register value
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_ReadReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t *pRegVal)
{
 80040cc:	b580      	push	{r7, lr}
 80040ce:	b084      	sub	sp, #16
 80040d0:	af00      	add	r7, sp, #0
 80040d2:	60f8      	str	r0, [r7, #12]
 80040d4:	60b9      	str	r1, [r7, #8]
 80040d6:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_ReadPHYRegister(&heth, DevAddr, RegAddr, pRegVal) != HAL_OK)
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	68ba      	ldr	r2, [r7, #8]
 80040dc:	68f9      	ldr	r1, [r7, #12]
 80040de:	4807      	ldr	r0, [pc, #28]	; (80040fc <ETH_PHY_IO_ReadReg+0x30>)
 80040e0:	f7fd fc10 	bl	8001904 <HAL_ETH_ReadPHYRegister>
 80040e4:	4603      	mov	r3, r0
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d002      	beq.n	80040f0 <ETH_PHY_IO_ReadReg+0x24>
  {
    return -1;
 80040ea:	f04f 33ff 	mov.w	r3, #4294967295
 80040ee:	e000      	b.n	80040f2 <ETH_PHY_IO_ReadReg+0x26>
  }

  return 0;
 80040f0:	2300      	movs	r3, #0
}
 80040f2:	4618      	mov	r0, r3
 80040f4:	3710      	adds	r7, #16
 80040f6:	46bd      	mov	sp, r7
 80040f8:	bd80      	pop	{r7, pc}
 80040fa:	bf00      	nop
 80040fc:	20004c74 	.word	0x20004c74

08004100 <ETH_PHY_IO_WriteReg>:
  * @param  RegAddr: PHY register address
  * @param  RegVal: Value to be written
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_WriteReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t RegVal)
{
 8004100:	b580      	push	{r7, lr}
 8004102:	b084      	sub	sp, #16
 8004104:	af00      	add	r7, sp, #0
 8004106:	60f8      	str	r0, [r7, #12]
 8004108:	60b9      	str	r1, [r7, #8]
 800410a:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_WritePHYRegister(&heth, DevAddr, RegAddr, RegVal) != HAL_OK)
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	68ba      	ldr	r2, [r7, #8]
 8004110:	68f9      	ldr	r1, [r7, #12]
 8004112:	4807      	ldr	r0, [pc, #28]	; (8004130 <ETH_PHY_IO_WriteReg+0x30>)
 8004114:	f7fd fc41 	bl	800199a <HAL_ETH_WritePHYRegister>
 8004118:	4603      	mov	r3, r0
 800411a:	2b00      	cmp	r3, #0
 800411c:	d002      	beq.n	8004124 <ETH_PHY_IO_WriteReg+0x24>
  {
    return -1;
 800411e:	f04f 33ff 	mov.w	r3, #4294967295
 8004122:	e000      	b.n	8004126 <ETH_PHY_IO_WriteReg+0x26>
  }

  return 0;
 8004124:	2300      	movs	r3, #0
}
 8004126:	4618      	mov	r0, r3
 8004128:	3710      	adds	r7, #16
 800412a:	46bd      	mov	sp, r7
 800412c:	bd80      	pop	{r7, pc}
 800412e:	bf00      	nop
 8004130:	20004c74 	.word	0x20004c74

08004134 <ETH_PHY_IO_GetTick>:
/**
  * @brief  Get the time in millisecons used for internal PHY driver process.
  * @retval Time value
  */
int32_t ETH_PHY_IO_GetTick(void)
{
 8004134:	b580      	push	{r7, lr}
 8004136:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8004138:	f7fc ffa0 	bl	800107c <HAL_GetTick>
 800413c:	4603      	mov	r3, r0
}
 800413e:	4618      	mov	r0, r3
 8004140:	bd80      	pop	{r7, pc}
	...

08004144 <ethernet_link_check_state>:
/**
  * @brief  Check the ETH link state then update ETH driver and netif link accordingly.
  * @retval None
  */
void ethernet_link_check_state(struct netif *netif)
{
 8004144:	b580      	push	{r7, lr}
 8004146:	b0a0      	sub	sp, #128	; 0x80
 8004148:	af00      	add	r7, sp, #0
 800414a:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef MACConf = {0};
 800414c:	f107 030c 	add.w	r3, r7, #12
 8004150:	2264      	movs	r2, #100	; 0x64
 8004152:	2100      	movs	r1, #0
 8004154:	4618      	mov	r0, r3
 8004156:	f00a fc73 	bl	800ea40 <memset>
  int32_t PHYLinkState = 0;
 800415a:	2300      	movs	r3, #0
 800415c:	673b      	str	r3, [r7, #112]	; 0x70
  uint32_t linkchanged = 0U, speed = 0U, duplex = 0U;
 800415e:	2300      	movs	r3, #0
 8004160:	67fb      	str	r3, [r7, #124]	; 0x7c
 8004162:	2300      	movs	r3, #0
 8004164:	67bb      	str	r3, [r7, #120]	; 0x78
 8004166:	2300      	movs	r3, #0
 8004168:	677b      	str	r3, [r7, #116]	; 0x74

  PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 800416a:	483a      	ldr	r0, [pc, #232]	; (8004254 <ethernet_link_check_state+0x110>)
 800416c:	f7fc fe99 	bl	8000ea2 <LAN8742_GetLinkState>
 8004170:	6738      	str	r0, [r7, #112]	; 0x70

  if(netif_is_link_up(netif) && (PHYLinkState <= LAN8742_STATUS_LINK_DOWN))
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8004178:	089b      	lsrs	r3, r3, #2
 800417a:	f003 0301 	and.w	r3, r3, #1
 800417e:	b2db      	uxtb	r3, r3
 8004180:	2b00      	cmp	r3, #0
 8004182:	d00c      	beq.n	800419e <ethernet_link_check_state+0x5a>
 8004184:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004186:	2b01      	cmp	r3, #1
 8004188:	dc09      	bgt.n	800419e <ethernet_link_check_state+0x5a>
  {
    HAL_ETH_Stop(&heth);
 800418a:	4833      	ldr	r0, [pc, #204]	; (8004258 <ethernet_link_check_state+0x114>)
 800418c:	f7fd f995 	bl	80014ba <HAL_ETH_Stop>
    netif_set_down(netif);
 8004190:	6878      	ldr	r0, [r7, #4]
 8004192:	f001 f81b 	bl	80051cc <netif_set_down>
    netif_set_link_down(netif);
 8004196:	6878      	ldr	r0, [r7, #4]
 8004198:	f001 f87e 	bl	8005298 <netif_set_link_down>
      netif_set_up(netif);
      netif_set_link_up(netif);
    }
  }

}
 800419c:	e055      	b.n	800424a <ethernet_link_check_state+0x106>
  else if(!netif_is_link_up(netif) && (PHYLinkState > LAN8742_STATUS_LINK_DOWN))
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80041a4:	f003 0304 	and.w	r3, r3, #4
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d14e      	bne.n	800424a <ethernet_link_check_state+0x106>
 80041ac:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80041ae:	2b01      	cmp	r3, #1
 80041b0:	dd4b      	ble.n	800424a <ethernet_link_check_state+0x106>
    switch (PHYLinkState)
 80041b2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80041b4:	3b02      	subs	r3, #2
 80041b6:	2b03      	cmp	r3, #3
 80041b8:	d82a      	bhi.n	8004210 <ethernet_link_check_state+0xcc>
 80041ba:	a201      	add	r2, pc, #4	; (adr r2, 80041c0 <ethernet_link_check_state+0x7c>)
 80041bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80041c0:	080041d1 	.word	0x080041d1
 80041c4:	080041e3 	.word	0x080041e3
 80041c8:	080041f3 	.word	0x080041f3
 80041cc:	08004203 	.word	0x08004203
      duplex = ETH_FULLDUPLEX_MODE;
 80041d0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80041d4:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_100M;
 80041d6:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80041da:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 80041dc:	2301      	movs	r3, #1
 80041de:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 80041e0:	e017      	b.n	8004212 <ethernet_link_check_state+0xce>
      duplex = ETH_HALFDUPLEX_MODE;
 80041e2:	2300      	movs	r3, #0
 80041e4:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_100M;
 80041e6:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80041ea:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 80041ec:	2301      	movs	r3, #1
 80041ee:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 80041f0:	e00f      	b.n	8004212 <ethernet_link_check_state+0xce>
      duplex = ETH_FULLDUPLEX_MODE;
 80041f2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80041f6:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_10M;
 80041f8:	2300      	movs	r3, #0
 80041fa:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 80041fc:	2301      	movs	r3, #1
 80041fe:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 8004200:	e007      	b.n	8004212 <ethernet_link_check_state+0xce>
      duplex = ETH_HALFDUPLEX_MODE;
 8004202:	2300      	movs	r3, #0
 8004204:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_10M;
 8004206:	2300      	movs	r3, #0
 8004208:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 800420a:	2301      	movs	r3, #1
 800420c:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 800420e:	e000      	b.n	8004212 <ethernet_link_check_state+0xce>
      break;
 8004210:	bf00      	nop
    if(linkchanged)
 8004212:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004214:	2b00      	cmp	r3, #0
 8004216:	d018      	beq.n	800424a <ethernet_link_check_state+0x106>
      HAL_ETH_GetMACConfig(&heth, &MACConf);
 8004218:	f107 030c 	add.w	r3, r7, #12
 800421c:	4619      	mov	r1, r3
 800421e:	480e      	ldr	r0, [pc, #56]	; (8004258 <ethernet_link_check_state+0x114>)
 8004220:	f7fd fc04 	bl	8001a2c <HAL_ETH_GetMACConfig>
      MACConf.DuplexMode = duplex;
 8004224:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004226:	627b      	str	r3, [r7, #36]	; 0x24
      MACConf.Speed = speed;
 8004228:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800422a:	623b      	str	r3, [r7, #32]
      HAL_ETH_SetMACConfig(&heth, &MACConf);
 800422c:	f107 030c 	add.w	r3, r7, #12
 8004230:	4619      	mov	r1, r3
 8004232:	4809      	ldr	r0, [pc, #36]	; (8004258 <ethernet_link_check_state+0x114>)
 8004234:	f7fd fce4 	bl	8001c00 <HAL_ETH_SetMACConfig>
      HAL_ETH_Start(&heth);
 8004238:	4807      	ldr	r0, [pc, #28]	; (8004258 <ethernet_link_check_state+0x114>)
 800423a:	f7fd f8df 	bl	80013fc <HAL_ETH_Start>
      netif_set_up(netif);
 800423e:	6878      	ldr	r0, [r7, #4]
 8004240:	f000 ff58 	bl	80050f4 <netif_set_up>
      netif_set_link_up(netif);
 8004244:	6878      	ldr	r0, [r7, #4]
 8004246:	f000 fff3 	bl	8005230 <netif_set_link_up>
}
 800424a:	bf00      	nop
 800424c:	3780      	adds	r7, #128	; 0x80
 800424e:	46bd      	mov	sp, r7
 8004250:	bd80      	pop	{r7, pc}
 8004252:	bf00      	nop
 8004254:	20004d5c 	.word	0x20004d5c
 8004258:	20004c74 	.word	0x20004c74

0800425c <HAL_ETH_RxAllocateCallback>:

void HAL_ETH_RxAllocateCallback(uint8_t **buff)
{
 800425c:	b580      	push	{r7, lr}
 800425e:	b086      	sub	sp, #24
 8004260:	af02      	add	r7, sp, #8
 8004262:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN HAL ETH RxAllocateCallback */
  struct pbuf_custom *p = LWIP_MEMPOOL_ALLOC(RX_POOL);
 8004264:	4812      	ldr	r0, [pc, #72]	; (80042b0 <HAL_ETH_RxAllocateCallback+0x54>)
 8004266:	f000 fcbf 	bl	8004be8 <memp_malloc_pool>
 800426a:	60f8      	str	r0, [r7, #12]
  if (p)
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	2b00      	cmp	r3, #0
 8004270:	d014      	beq.n	800429c <HAL_ETH_RxAllocateCallback+0x40>
  {
    /* Get the buff from the struct pbuf address. */
    *buff = (uint8_t *)p + offsetof(RxBuff_t, buff);
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	f103 0220 	add.w	r2, r3, #32
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	601a      	str	r2, [r3, #0]
    p->custom_free_function = pbuf_free_custom;
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	4a0d      	ldr	r2, [pc, #52]	; (80042b4 <HAL_ETH_RxAllocateCallback+0x58>)
 8004280:	611a      	str	r2, [r3, #16]
    /* Initialize the struct pbuf.
    * This must be performed whenever a buffer's allocated because it may be
    * changed by lwIP or the app, e.g., pbuf_free decrements ref. */
    pbuf_alloced_custom(PBUF_RAW, 0, PBUF_REF, p, *buff, ETH_RX_BUF_SIZE);
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 800428a:	9201      	str	r2, [sp, #4]
 800428c:	9300      	str	r3, [sp, #0]
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	2241      	movs	r2, #65	; 0x41
 8004292:	2100      	movs	r1, #0
 8004294:	2000      	movs	r0, #0
 8004296:	f001 f9f5 	bl	8005684 <pbuf_alloced_custom>
  {
    RxAllocStatus = RX_ALLOC_ERROR;
    *buff = NULL;
  }
/* USER CODE END HAL ETH RxAllocateCallback */
}
 800429a:	e005      	b.n	80042a8 <HAL_ETH_RxAllocateCallback+0x4c>
    RxAllocStatus = RX_ALLOC_ERROR;
 800429c:	4b06      	ldr	r3, [pc, #24]	; (80042b8 <HAL_ETH_RxAllocateCallback+0x5c>)
 800429e:	2201      	movs	r2, #1
 80042a0:	701a      	strb	r2, [r3, #0]
    *buff = NULL;
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	2200      	movs	r2, #0
 80042a6:	601a      	str	r2, [r3, #0]
}
 80042a8:	bf00      	nop
 80042aa:	3710      	adds	r7, #16
 80042ac:	46bd      	mov	sp, r7
 80042ae:	bd80      	pop	{r7, pc}
 80042b0:	080123c8 	.word	0x080123c8
 80042b4:	08003ed9 	.word	0x08003ed9
 80042b8:	20004b30 	.word	0x20004b30

080042bc <HAL_ETH_RxLinkCallback>:

void HAL_ETH_RxLinkCallback(void **pStart, void **pEnd, uint8_t *buff, uint16_t Length)
{
 80042bc:	b480      	push	{r7}
 80042be:	b089      	sub	sp, #36	; 0x24
 80042c0:	af00      	add	r7, sp, #0
 80042c2:	60f8      	str	r0, [r7, #12]
 80042c4:	60b9      	str	r1, [r7, #8]
 80042c6:	607a      	str	r2, [r7, #4]
 80042c8:	807b      	strh	r3, [r7, #2]
/* USER CODE BEGIN HAL ETH RxLinkCallback */

  struct pbuf **ppStart = (struct pbuf **)pStart;
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	61bb      	str	r3, [r7, #24]
  struct pbuf **ppEnd = (struct pbuf **)pEnd;
 80042ce:	68bb      	ldr	r3, [r7, #8]
 80042d0:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 80042d2:	2300      	movs	r3, #0
 80042d4:	61fb      	str	r3, [r7, #28]

  /* Get the struct pbuf from the buff address. */
  p = (struct pbuf *)(buff - offsetof(RxBuff_t, buff));
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	3b20      	subs	r3, #32
 80042da:	61fb      	str	r3, [r7, #28]
  p->next = NULL;
 80042dc:	69fb      	ldr	r3, [r7, #28]
 80042de:	2200      	movs	r2, #0
 80042e0:	601a      	str	r2, [r3, #0]
  p->tot_len = 0;
 80042e2:	69fb      	ldr	r3, [r7, #28]
 80042e4:	2200      	movs	r2, #0
 80042e6:	811a      	strh	r2, [r3, #8]
  p->len = Length;
 80042e8:	69fb      	ldr	r3, [r7, #28]
 80042ea:	887a      	ldrh	r2, [r7, #2]
 80042ec:	815a      	strh	r2, [r3, #10]

  /* Chain the buffer. */
  if (!*ppStart)
 80042ee:	69bb      	ldr	r3, [r7, #24]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d103      	bne.n	80042fe <HAL_ETH_RxLinkCallback+0x42>
  {
    /* The first buffer of the packet. */
    *ppStart = p;
 80042f6:	69bb      	ldr	r3, [r7, #24]
 80042f8:	69fa      	ldr	r2, [r7, #28]
 80042fa:	601a      	str	r2, [r3, #0]
 80042fc:	e003      	b.n	8004306 <HAL_ETH_RxLinkCallback+0x4a>
  }
  else
  {
    /* Chain the buffer to the end of the packet. */
    (*ppEnd)->next = p;
 80042fe:	697b      	ldr	r3, [r7, #20]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	69fa      	ldr	r2, [r7, #28]
 8004304:	601a      	str	r2, [r3, #0]
  }
  *ppEnd  = p;
 8004306:	697b      	ldr	r3, [r7, #20]
 8004308:	69fa      	ldr	r2, [r7, #28]
 800430a:	601a      	str	r2, [r3, #0]

  /* Update the total length of all the buffers of the chain. Each pbuf in the chain should have its tot_len
   * set to its own length, plus the length of all the following pbufs in the chain. */
  for (p = *ppStart; p != NULL; p = p->next)
 800430c:	69bb      	ldr	r3, [r7, #24]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	61fb      	str	r3, [r7, #28]
 8004312:	e009      	b.n	8004328 <HAL_ETH_RxLinkCallback+0x6c>
  {
    p->tot_len += Length;
 8004314:	69fb      	ldr	r3, [r7, #28]
 8004316:	891a      	ldrh	r2, [r3, #8]
 8004318:	887b      	ldrh	r3, [r7, #2]
 800431a:	4413      	add	r3, r2
 800431c:	b29a      	uxth	r2, r3
 800431e:	69fb      	ldr	r3, [r7, #28]
 8004320:	811a      	strh	r2, [r3, #8]
  for (p = *ppStart; p != NULL; p = p->next)
 8004322:	69fb      	ldr	r3, [r7, #28]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	61fb      	str	r3, [r7, #28]
 8004328:	69fb      	ldr	r3, [r7, #28]
 800432a:	2b00      	cmp	r3, #0
 800432c:	d1f2      	bne.n	8004314 <HAL_ETH_RxLinkCallback+0x58>
  }

/* USER CODE END HAL ETH RxLinkCallback */
}
 800432e:	bf00      	nop
 8004330:	bf00      	nop
 8004332:	3724      	adds	r7, #36	; 0x24
 8004334:	46bd      	mov	sp, r7
 8004336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800433a:	4770      	bx	lr

0800433c <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 800433c:	b480      	push	{r7}
 800433e:	b083      	sub	sp, #12
 8004340:	af00      	add	r7, sp, #0
 8004342:	4603      	mov	r3, r0
 8004344:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 8004346:	88fb      	ldrh	r3, [r7, #6]
 8004348:	021b      	lsls	r3, r3, #8
 800434a:	b21a      	sxth	r2, r3
 800434c:	88fb      	ldrh	r3, [r7, #6]
 800434e:	0a1b      	lsrs	r3, r3, #8
 8004350:	b29b      	uxth	r3, r3
 8004352:	b21b      	sxth	r3, r3
 8004354:	4313      	orrs	r3, r2
 8004356:	b21b      	sxth	r3, r3
 8004358:	b29b      	uxth	r3, r3
}
 800435a:	4618      	mov	r0, r3
 800435c:	370c      	adds	r7, #12
 800435e:	46bd      	mov	sp, r7
 8004360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004364:	4770      	bx	lr

08004366 <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 8004366:	b480      	push	{r7}
 8004368:	b083      	sub	sp, #12
 800436a:	af00      	add	r7, sp, #0
 800436c:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	061a      	lsls	r2, r3, #24
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	021b      	lsls	r3, r3, #8
 8004376:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800437a:	431a      	orrs	r2, r3
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	0a1b      	lsrs	r3, r3, #8
 8004380:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8004384:	431a      	orrs	r2, r3
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	0e1b      	lsrs	r3, r3, #24
 800438a:	4313      	orrs	r3, r2
}
 800438c:	4618      	mov	r0, r3
 800438e:	370c      	adds	r7, #12
 8004390:	46bd      	mov	sp, r7
 8004392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004396:	4770      	bx	lr

08004398 <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 8004398:	b580      	push	{r7, lr}
 800439a:	b082      	sub	sp, #8
 800439c:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 800439e:	2300      	movs	r3, #0
 80043a0:	607b      	str	r3, [r7, #4]
  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
#endif /* !NO_SYS */
  mem_init();
 80043a2:	f000 f8d5 	bl	8004550 <mem_init>
  memp_init();
 80043a6:	f000 fbdb 	bl	8004b60 <memp_init>
  pbuf_init();
  netif_init();
 80043aa:	f000 fcd9 	bl	8004d60 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 80043ae:	f007 f8f9 	bl	800b5a4 <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 80043b2:	f001 fe51 	bl	8006058 <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 80043b6:	f007 f86b 	bl	800b490 <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 80043ba:	bf00      	nop
 80043bc:	3708      	adds	r7, #8
 80043be:	46bd      	mov	sp, r7
 80043c0:	bd80      	pop	{r7, pc}
	...

080043c4 <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 80043c4:	b480      	push	{r7}
 80043c6:	b083      	sub	sp, #12
 80043c8:	af00      	add	r7, sp, #0
 80043ca:	4603      	mov	r3, r0
 80043cc:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 80043ce:	4b05      	ldr	r3, [pc, #20]	; (80043e4 <ptr_to_mem+0x20>)
 80043d0:	681a      	ldr	r2, [r3, #0]
 80043d2:	88fb      	ldrh	r3, [r7, #6]
 80043d4:	4413      	add	r3, r2
}
 80043d6:	4618      	mov	r0, r3
 80043d8:	370c      	adds	r7, #12
 80043da:	46bd      	mov	sp, r7
 80043dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043e0:	4770      	bx	lr
 80043e2:	bf00      	nop
 80043e4:	200053e8 	.word	0x200053e8

080043e8 <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 80043e8:	b480      	push	{r7}
 80043ea:	b083      	sub	sp, #12
 80043ec:	af00      	add	r7, sp, #0
 80043ee:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 80043f0:	4b05      	ldr	r3, [pc, #20]	; (8004408 <mem_to_ptr+0x20>)
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	687a      	ldr	r2, [r7, #4]
 80043f6:	1ad3      	subs	r3, r2, r3
 80043f8:	b29b      	uxth	r3, r3
}
 80043fa:	4618      	mov	r0, r3
 80043fc:	370c      	adds	r7, #12
 80043fe:	46bd      	mov	sp, r7
 8004400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004404:	4770      	bx	lr
 8004406:	bf00      	nop
 8004408:	200053e8 	.word	0x200053e8

0800440c <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 800440c:	b590      	push	{r4, r7, lr}
 800440e:	b085      	sub	sp, #20
 8004410:	af00      	add	r7, sp, #0
 8004412:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 8004414:	4b45      	ldr	r3, [pc, #276]	; (800452c <plug_holes+0x120>)
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	687a      	ldr	r2, [r7, #4]
 800441a:	429a      	cmp	r2, r3
 800441c:	d206      	bcs.n	800442c <plug_holes+0x20>
 800441e:	4b44      	ldr	r3, [pc, #272]	; (8004530 <plug_holes+0x124>)
 8004420:	f240 12df 	movw	r2, #479	; 0x1df
 8004424:	4943      	ldr	r1, [pc, #268]	; (8004534 <plug_holes+0x128>)
 8004426:	4844      	ldr	r0, [pc, #272]	; (8004538 <plug_holes+0x12c>)
 8004428:	f00a f97a 	bl	800e720 <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 800442c:	4b43      	ldr	r3, [pc, #268]	; (800453c <plug_holes+0x130>)
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	687a      	ldr	r2, [r7, #4]
 8004432:	429a      	cmp	r2, r3
 8004434:	d306      	bcc.n	8004444 <plug_holes+0x38>
 8004436:	4b3e      	ldr	r3, [pc, #248]	; (8004530 <plug_holes+0x124>)
 8004438:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800443c:	4940      	ldr	r1, [pc, #256]	; (8004540 <plug_holes+0x134>)
 800443e:	483e      	ldr	r0, [pc, #248]	; (8004538 <plug_holes+0x12c>)
 8004440:	f00a f96e 	bl	800e720 <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	791b      	ldrb	r3, [r3, #4]
 8004448:	2b00      	cmp	r3, #0
 800444a:	d006      	beq.n	800445a <plug_holes+0x4e>
 800444c:	4b38      	ldr	r3, [pc, #224]	; (8004530 <plug_holes+0x124>)
 800444e:	f240 12e1 	movw	r2, #481	; 0x1e1
 8004452:	493c      	ldr	r1, [pc, #240]	; (8004544 <plug_holes+0x138>)
 8004454:	4838      	ldr	r0, [pc, #224]	; (8004538 <plug_holes+0x12c>)
 8004456:	f00a f963 	bl	800e720 <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	881b      	ldrh	r3, [r3, #0]
 800445e:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8004462:	d906      	bls.n	8004472 <plug_holes+0x66>
 8004464:	4b32      	ldr	r3, [pc, #200]	; (8004530 <plug_holes+0x124>)
 8004466:	f44f 72f2 	mov.w	r2, #484	; 0x1e4
 800446a:	4937      	ldr	r1, [pc, #220]	; (8004548 <plug_holes+0x13c>)
 800446c:	4832      	ldr	r0, [pc, #200]	; (8004538 <plug_holes+0x12c>)
 800446e:	f00a f957 	bl	800e720 <iprintf>

  nmem = ptr_to_mem(mem->next);
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	881b      	ldrh	r3, [r3, #0]
 8004476:	4618      	mov	r0, r3
 8004478:	f7ff ffa4 	bl	80043c4 <ptr_to_mem>
 800447c:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 800447e:	687a      	ldr	r2, [r7, #4]
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	429a      	cmp	r2, r3
 8004484:	d024      	beq.n	80044d0 <plug_holes+0xc4>
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	791b      	ldrb	r3, [r3, #4]
 800448a:	2b00      	cmp	r3, #0
 800448c:	d120      	bne.n	80044d0 <plug_holes+0xc4>
 800448e:	4b2b      	ldr	r3, [pc, #172]	; (800453c <plug_holes+0x130>)
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	68fa      	ldr	r2, [r7, #12]
 8004494:	429a      	cmp	r2, r3
 8004496:	d01b      	beq.n	80044d0 <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 8004498:	4b2c      	ldr	r3, [pc, #176]	; (800454c <plug_holes+0x140>)
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	68fa      	ldr	r2, [r7, #12]
 800449e:	429a      	cmp	r2, r3
 80044a0:	d102      	bne.n	80044a8 <plug_holes+0x9c>
      lfree = mem;
 80044a2:	4a2a      	ldr	r2, [pc, #168]	; (800454c <plug_holes+0x140>)
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	881a      	ldrh	r2, [r3, #0]
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	881b      	ldrh	r3, [r3, #0]
 80044b4:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 80044b8:	d00a      	beq.n	80044d0 <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	881b      	ldrh	r3, [r3, #0]
 80044be:	4618      	mov	r0, r3
 80044c0:	f7ff ff80 	bl	80043c4 <ptr_to_mem>
 80044c4:	4604      	mov	r4, r0
 80044c6:	6878      	ldr	r0, [r7, #4]
 80044c8:	f7ff ff8e 	bl	80043e8 <mem_to_ptr>
 80044cc:	4603      	mov	r3, r0
 80044ce:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	885b      	ldrh	r3, [r3, #2]
 80044d4:	4618      	mov	r0, r3
 80044d6:	f7ff ff75 	bl	80043c4 <ptr_to_mem>
 80044da:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 80044dc:	68ba      	ldr	r2, [r7, #8]
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	429a      	cmp	r2, r3
 80044e2:	d01f      	beq.n	8004524 <plug_holes+0x118>
 80044e4:	68bb      	ldr	r3, [r7, #8]
 80044e6:	791b      	ldrb	r3, [r3, #4]
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	d11b      	bne.n	8004524 <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 80044ec:	4b17      	ldr	r3, [pc, #92]	; (800454c <plug_holes+0x140>)
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	687a      	ldr	r2, [r7, #4]
 80044f2:	429a      	cmp	r2, r3
 80044f4:	d102      	bne.n	80044fc <plug_holes+0xf0>
      lfree = pmem;
 80044f6:	4a15      	ldr	r2, [pc, #84]	; (800454c <plug_holes+0x140>)
 80044f8:	68bb      	ldr	r3, [r7, #8]
 80044fa:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	881a      	ldrh	r2, [r3, #0]
 8004500:	68bb      	ldr	r3, [r7, #8]
 8004502:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	881b      	ldrh	r3, [r3, #0]
 8004508:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800450c:	d00a      	beq.n	8004524 <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	881b      	ldrh	r3, [r3, #0]
 8004512:	4618      	mov	r0, r3
 8004514:	f7ff ff56 	bl	80043c4 <ptr_to_mem>
 8004518:	4604      	mov	r4, r0
 800451a:	68b8      	ldr	r0, [r7, #8]
 800451c:	f7ff ff64 	bl	80043e8 <mem_to_ptr>
 8004520:	4603      	mov	r3, r0
 8004522:	8063      	strh	r3, [r4, #2]
    }
  }
}
 8004524:	bf00      	nop
 8004526:	3714      	adds	r7, #20
 8004528:	46bd      	mov	sp, r7
 800452a:	bd90      	pop	{r4, r7, pc}
 800452c:	200053e8 	.word	0x200053e8
 8004530:	0800fa24 	.word	0x0800fa24
 8004534:	0800fa54 	.word	0x0800fa54
 8004538:	0800fa6c 	.word	0x0800fa6c
 800453c:	200053ec 	.word	0x200053ec
 8004540:	0800fa94 	.word	0x0800fa94
 8004544:	0800fab0 	.word	0x0800fab0
 8004548:	0800facc 	.word	0x0800facc
 800454c:	200053f0 	.word	0x200053f0

08004550 <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 8004550:	b580      	push	{r7, lr}
 8004552:	b082      	sub	sp, #8
 8004554:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 8004556:	4b18      	ldr	r3, [pc, #96]	; (80045b8 <mem_init+0x68>)
 8004558:	3303      	adds	r3, #3
 800455a:	f023 0303 	bic.w	r3, r3, #3
 800455e:	461a      	mov	r2, r3
 8004560:	4b16      	ldr	r3, [pc, #88]	; (80045bc <mem_init+0x6c>)
 8004562:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 8004564:	4b15      	ldr	r3, [pc, #84]	; (80045bc <mem_init+0x6c>)
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 8004570:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	2200      	movs	r2, #0
 8004576:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	2200      	movs	r2, #0
 800457c:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 800457e:	f44f 60c8 	mov.w	r0, #1600	; 0x640
 8004582:	f7ff ff1f 	bl	80043c4 <ptr_to_mem>
 8004586:	4603      	mov	r3, r0
 8004588:	4a0d      	ldr	r2, [pc, #52]	; (80045c0 <mem_init+0x70>)
 800458a:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 800458c:	4b0c      	ldr	r3, [pc, #48]	; (80045c0 <mem_init+0x70>)
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	2201      	movs	r2, #1
 8004592:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 8004594:	4b0a      	ldr	r3, [pc, #40]	; (80045c0 <mem_init+0x70>)
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800459c:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 800459e:	4b08      	ldr	r3, [pc, #32]	; (80045c0 <mem_init+0x70>)
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 80045a6:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 80045a8:	4b04      	ldr	r3, [pc, #16]	; (80045bc <mem_init+0x6c>)
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	4a05      	ldr	r2, [pc, #20]	; (80045c4 <mem_init+0x74>)
 80045ae:	6013      	str	r3, [r2, #0]
  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
    LWIP_ASSERT("failed to create mem_mutex", 0);
  }
}
 80045b0:	bf00      	nop
 80045b2:	3708      	adds	r7, #8
 80045b4:	46bd      	mov	sp, r7
 80045b6:	bd80      	pop	{r7, pc}
 80045b8:	20004d94 	.word	0x20004d94
 80045bc:	200053e8 	.word	0x200053e8
 80045c0:	200053ec 	.word	0x200053ec
 80045c4:	200053f0 	.word	0x200053f0

080045c8 <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 80045c8:	b580      	push	{r7, lr}
 80045ca:	b086      	sub	sp, #24
 80045cc:	af00      	add	r7, sp, #0
 80045ce:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 80045d0:	6878      	ldr	r0, [r7, #4]
 80045d2:	f7ff ff09 	bl	80043e8 <mem_to_ptr>
 80045d6:	4603      	mov	r3, r0
 80045d8:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	881b      	ldrh	r3, [r3, #0]
 80045de:	4618      	mov	r0, r3
 80045e0:	f7ff fef0 	bl	80043c4 <ptr_to_mem>
 80045e4:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	885b      	ldrh	r3, [r3, #2]
 80045ea:	4618      	mov	r0, r3
 80045ec:	f7ff feea 	bl	80043c4 <ptr_to_mem>
 80045f0:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	881b      	ldrh	r3, [r3, #0]
 80045f6:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 80045fa:	d818      	bhi.n	800462e <mem_link_valid+0x66>
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	885b      	ldrh	r3, [r3, #2]
 8004600:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8004604:	d813      	bhi.n	800462e <mem_link_valid+0x66>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800460a:	8afa      	ldrh	r2, [r7, #22]
 800460c:	429a      	cmp	r2, r3
 800460e:	d004      	beq.n	800461a <mem_link_valid+0x52>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	881b      	ldrh	r3, [r3, #0]
 8004614:	8afa      	ldrh	r2, [r7, #22]
 8004616:	429a      	cmp	r2, r3
 8004618:	d109      	bne.n	800462e <mem_link_valid+0x66>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800461a:	4b08      	ldr	r3, [pc, #32]	; (800463c <mem_link_valid+0x74>)
 800461c:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800461e:	693a      	ldr	r2, [r7, #16]
 8004620:	429a      	cmp	r2, r3
 8004622:	d006      	beq.n	8004632 <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 8004624:	693b      	ldr	r3, [r7, #16]
 8004626:	885b      	ldrh	r3, [r3, #2]
 8004628:	8afa      	ldrh	r2, [r7, #22]
 800462a:	429a      	cmp	r2, r3
 800462c:	d001      	beq.n	8004632 <mem_link_valid+0x6a>
    return 0;
 800462e:	2300      	movs	r3, #0
 8004630:	e000      	b.n	8004634 <mem_link_valid+0x6c>
  }
  return 1;
 8004632:	2301      	movs	r3, #1
}
 8004634:	4618      	mov	r0, r3
 8004636:	3718      	adds	r7, #24
 8004638:	46bd      	mov	sp, r7
 800463a:	bd80      	pop	{r7, pc}
 800463c:	200053ec 	.word	0x200053ec

08004640 <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 8004640:	b580      	push	{r7, lr}
 8004642:	b084      	sub	sp, #16
 8004644:	af00      	add	r7, sp, #0
 8004646:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	2b00      	cmp	r3, #0
 800464c:	d04c      	beq.n	80046e8 <mem_free+0xa8>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	f003 0303 	and.w	r3, r3, #3
 8004654:	2b00      	cmp	r3, #0
 8004656:	d007      	beq.n	8004668 <mem_free+0x28>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 8004658:	4b25      	ldr	r3, [pc, #148]	; (80046f0 <mem_free+0xb0>)
 800465a:	f240 2273 	movw	r2, #627	; 0x273
 800465e:	4925      	ldr	r1, [pc, #148]	; (80046f4 <mem_free+0xb4>)
 8004660:	4825      	ldr	r0, [pc, #148]	; (80046f8 <mem_free+0xb8>)
 8004662:	f00a f85d 	bl	800e720 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 8004666:	e040      	b.n	80046ea <mem_free+0xaa>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	3b08      	subs	r3, #8
 800466c:	60fb      	str	r3, [r7, #12]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 800466e:	4b23      	ldr	r3, [pc, #140]	; (80046fc <mem_free+0xbc>)
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	68fa      	ldr	r2, [r7, #12]
 8004674:	429a      	cmp	r2, r3
 8004676:	d306      	bcc.n	8004686 <mem_free+0x46>
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	f103 020c 	add.w	r2, r3, #12
 800467e:	4b20      	ldr	r3, [pc, #128]	; (8004700 <mem_free+0xc0>)
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	429a      	cmp	r2, r3
 8004684:	d907      	bls.n	8004696 <mem_free+0x56>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 8004686:	4b1a      	ldr	r3, [pc, #104]	; (80046f0 <mem_free+0xb0>)
 8004688:	f240 227f 	movw	r2, #639	; 0x27f
 800468c:	491d      	ldr	r1, [pc, #116]	; (8004704 <mem_free+0xc4>)
 800468e:	481a      	ldr	r0, [pc, #104]	; (80046f8 <mem_free+0xb8>)
 8004690:	f00a f846 	bl	800e720 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 8004694:	e029      	b.n	80046ea <mem_free+0xaa>
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
  /* mem has to be in a used state */
  if (!mem->used) {
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	791b      	ldrb	r3, [r3, #4]
 800469a:	2b00      	cmp	r3, #0
 800469c:	d107      	bne.n	80046ae <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 800469e:	4b14      	ldr	r3, [pc, #80]	; (80046f0 <mem_free+0xb0>)
 80046a0:	f44f 7223 	mov.w	r2, #652	; 0x28c
 80046a4:	4918      	ldr	r1, [pc, #96]	; (8004708 <mem_free+0xc8>)
 80046a6:	4814      	ldr	r0, [pc, #80]	; (80046f8 <mem_free+0xb8>)
 80046a8:	f00a f83a 	bl	800e720 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 80046ac:	e01d      	b.n	80046ea <mem_free+0xaa>
  }

  if (!mem_link_valid(mem)) {
 80046ae:	68f8      	ldr	r0, [r7, #12]
 80046b0:	f7ff ff8a 	bl	80045c8 <mem_link_valid>
 80046b4:	4603      	mov	r3, r0
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d107      	bne.n	80046ca <mem_free+0x8a>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 80046ba:	4b0d      	ldr	r3, [pc, #52]	; (80046f0 <mem_free+0xb0>)
 80046bc:	f240 2295 	movw	r2, #661	; 0x295
 80046c0:	4912      	ldr	r1, [pc, #72]	; (800470c <mem_free+0xcc>)
 80046c2:	480d      	ldr	r0, [pc, #52]	; (80046f8 <mem_free+0xb8>)
 80046c4:	f00a f82c 	bl	800e720 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 80046c8:	e00f      	b.n	80046ea <mem_free+0xaa>
  }

  /* mem is now unused. */
  mem->used = 0;
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	2200      	movs	r2, #0
 80046ce:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 80046d0:	4b0f      	ldr	r3, [pc, #60]	; (8004710 <mem_free+0xd0>)
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	68fa      	ldr	r2, [r7, #12]
 80046d6:	429a      	cmp	r2, r3
 80046d8:	d202      	bcs.n	80046e0 <mem_free+0xa0>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 80046da:	4a0d      	ldr	r2, [pc, #52]	; (8004710 <mem_free+0xd0>)
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 80046e0:	68f8      	ldr	r0, [r7, #12]
 80046e2:	f7ff fe93 	bl	800440c <plug_holes>
 80046e6:	e000      	b.n	80046ea <mem_free+0xaa>
    return;
 80046e8:	bf00      	nop
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
}
 80046ea:	3710      	adds	r7, #16
 80046ec:	46bd      	mov	sp, r7
 80046ee:	bd80      	pop	{r7, pc}
 80046f0:	0800fa24 	.word	0x0800fa24
 80046f4:	0800faf8 	.word	0x0800faf8
 80046f8:	0800fa6c 	.word	0x0800fa6c
 80046fc:	200053e8 	.word	0x200053e8
 8004700:	200053ec 	.word	0x200053ec
 8004704:	0800fb1c 	.word	0x0800fb1c
 8004708:	0800fb38 	.word	0x0800fb38
 800470c:	0800fb60 	.word	0x0800fb60
 8004710:	200053f0 	.word	0x200053f0

08004714 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 8004714:	b580      	push	{r7, lr}
 8004716:	b088      	sub	sp, #32
 8004718:	af00      	add	r7, sp, #0
 800471a:	6078      	str	r0, [r7, #4]
 800471c:	460b      	mov	r3, r1
 800471e:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 8004720:	887b      	ldrh	r3, [r7, #2]
 8004722:	3303      	adds	r3, #3
 8004724:	b29b      	uxth	r3, r3
 8004726:	f023 0303 	bic.w	r3, r3, #3
 800472a:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 800472c:	8bfb      	ldrh	r3, [r7, #30]
 800472e:	2b0b      	cmp	r3, #11
 8004730:	d801      	bhi.n	8004736 <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 8004732:	230c      	movs	r3, #12
 8004734:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 8004736:	8bfb      	ldrh	r3, [r7, #30]
 8004738:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800473c:	d803      	bhi.n	8004746 <mem_trim+0x32>
 800473e:	8bfa      	ldrh	r2, [r7, #30]
 8004740:	887b      	ldrh	r3, [r7, #2]
 8004742:	429a      	cmp	r2, r3
 8004744:	d201      	bcs.n	800474a <mem_trim+0x36>
    return NULL;
 8004746:	2300      	movs	r3, #0
 8004748:	e0cc      	b.n	80048e4 <mem_trim+0x1d0>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 800474a:	4b68      	ldr	r3, [pc, #416]	; (80048ec <mem_trim+0x1d8>)
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	687a      	ldr	r2, [r7, #4]
 8004750:	429a      	cmp	r2, r3
 8004752:	d304      	bcc.n	800475e <mem_trim+0x4a>
 8004754:	4b66      	ldr	r3, [pc, #408]	; (80048f0 <mem_trim+0x1dc>)
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	687a      	ldr	r2, [r7, #4]
 800475a:	429a      	cmp	r2, r3
 800475c:	d306      	bcc.n	800476c <mem_trim+0x58>
 800475e:	4b65      	ldr	r3, [pc, #404]	; (80048f4 <mem_trim+0x1e0>)
 8004760:	f240 22d1 	movw	r2, #721	; 0x2d1
 8004764:	4964      	ldr	r1, [pc, #400]	; (80048f8 <mem_trim+0x1e4>)
 8004766:	4865      	ldr	r0, [pc, #404]	; (80048fc <mem_trim+0x1e8>)
 8004768:	f009 ffda 	bl	800e720 <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 800476c:	4b5f      	ldr	r3, [pc, #380]	; (80048ec <mem_trim+0x1d8>)
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	687a      	ldr	r2, [r7, #4]
 8004772:	429a      	cmp	r2, r3
 8004774:	d304      	bcc.n	8004780 <mem_trim+0x6c>
 8004776:	4b5e      	ldr	r3, [pc, #376]	; (80048f0 <mem_trim+0x1dc>)
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	687a      	ldr	r2, [r7, #4]
 800477c:	429a      	cmp	r2, r3
 800477e:	d301      	bcc.n	8004784 <mem_trim+0x70>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return rmem;
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	e0af      	b.n	80048e4 <mem_trim+0x1d0>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	3b08      	subs	r3, #8
 8004788:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 800478a:	69b8      	ldr	r0, [r7, #24]
 800478c:	f7ff fe2c 	bl	80043e8 <mem_to_ptr>
 8004790:	4603      	mov	r3, r0
 8004792:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 8004794:	69bb      	ldr	r3, [r7, #24]
 8004796:	881a      	ldrh	r2, [r3, #0]
 8004798:	8afb      	ldrh	r3, [r7, #22]
 800479a:	1ad3      	subs	r3, r2, r3
 800479c:	b29b      	uxth	r3, r3
 800479e:	3b08      	subs	r3, #8
 80047a0:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 80047a2:	8bfa      	ldrh	r2, [r7, #30]
 80047a4:	8abb      	ldrh	r3, [r7, #20]
 80047a6:	429a      	cmp	r2, r3
 80047a8:	d906      	bls.n	80047b8 <mem_trim+0xa4>
 80047aa:	4b52      	ldr	r3, [pc, #328]	; (80048f4 <mem_trim+0x1e0>)
 80047ac:	f44f 7239 	mov.w	r2, #740	; 0x2e4
 80047b0:	4953      	ldr	r1, [pc, #332]	; (8004900 <mem_trim+0x1ec>)
 80047b2:	4852      	ldr	r0, [pc, #328]	; (80048fc <mem_trim+0x1e8>)
 80047b4:	f009 ffb4 	bl	800e720 <iprintf>
  if (newsize > size) {
 80047b8:	8bfa      	ldrh	r2, [r7, #30]
 80047ba:	8abb      	ldrh	r3, [r7, #20]
 80047bc:	429a      	cmp	r2, r3
 80047be:	d901      	bls.n	80047c4 <mem_trim+0xb0>
    /* not supported */
    return NULL;
 80047c0:	2300      	movs	r3, #0
 80047c2:	e08f      	b.n	80048e4 <mem_trim+0x1d0>
  }
  if (newsize == size) {
 80047c4:	8bfa      	ldrh	r2, [r7, #30]
 80047c6:	8abb      	ldrh	r3, [r7, #20]
 80047c8:	429a      	cmp	r2, r3
 80047ca:	d101      	bne.n	80047d0 <mem_trim+0xbc>
    /* No change in size, simply return */
    return rmem;
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	e089      	b.n	80048e4 <mem_trim+0x1d0>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();

  mem2 = ptr_to_mem(mem->next);
 80047d0:	69bb      	ldr	r3, [r7, #24]
 80047d2:	881b      	ldrh	r3, [r3, #0]
 80047d4:	4618      	mov	r0, r3
 80047d6:	f7ff fdf5 	bl	80043c4 <ptr_to_mem>
 80047da:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 80047dc:	693b      	ldr	r3, [r7, #16]
 80047de:	791b      	ldrb	r3, [r3, #4]
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	d13f      	bne.n	8004864 <mem_trim+0x150>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 80047e4:	69bb      	ldr	r3, [r7, #24]
 80047e6:	881b      	ldrh	r3, [r3, #0]
 80047e8:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 80047ec:	d106      	bne.n	80047fc <mem_trim+0xe8>
 80047ee:	4b41      	ldr	r3, [pc, #260]	; (80048f4 <mem_trim+0x1e0>)
 80047f0:	f240 22f5 	movw	r2, #757	; 0x2f5
 80047f4:	4943      	ldr	r1, [pc, #268]	; (8004904 <mem_trim+0x1f0>)
 80047f6:	4841      	ldr	r0, [pc, #260]	; (80048fc <mem_trim+0x1e8>)
 80047f8:	f009 ff92 	bl	800e720 <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 80047fc:	693b      	ldr	r3, [r7, #16]
 80047fe:	881b      	ldrh	r3, [r3, #0]
 8004800:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 8004802:	8afa      	ldrh	r2, [r7, #22]
 8004804:	8bfb      	ldrh	r3, [r7, #30]
 8004806:	4413      	add	r3, r2
 8004808:	b29b      	uxth	r3, r3
 800480a:	3308      	adds	r3, #8
 800480c:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 800480e:	4b3e      	ldr	r3, [pc, #248]	; (8004908 <mem_trim+0x1f4>)
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	693a      	ldr	r2, [r7, #16]
 8004814:	429a      	cmp	r2, r3
 8004816:	d106      	bne.n	8004826 <mem_trim+0x112>
      lfree = ptr_to_mem(ptr2);
 8004818:	89fb      	ldrh	r3, [r7, #14]
 800481a:	4618      	mov	r0, r3
 800481c:	f7ff fdd2 	bl	80043c4 <ptr_to_mem>
 8004820:	4603      	mov	r3, r0
 8004822:	4a39      	ldr	r2, [pc, #228]	; (8004908 <mem_trim+0x1f4>)
 8004824:	6013      	str	r3, [r2, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 8004826:	89fb      	ldrh	r3, [r7, #14]
 8004828:	4618      	mov	r0, r3
 800482a:	f7ff fdcb 	bl	80043c4 <ptr_to_mem>
 800482e:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 8004830:	693b      	ldr	r3, [r7, #16]
 8004832:	2200      	movs	r2, #0
 8004834:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 8004836:	693b      	ldr	r3, [r7, #16]
 8004838:	89ba      	ldrh	r2, [r7, #12]
 800483a:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 800483c:	693b      	ldr	r3, [r7, #16]
 800483e:	8afa      	ldrh	r2, [r7, #22]
 8004840:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 8004842:	69bb      	ldr	r3, [r7, #24]
 8004844:	89fa      	ldrh	r2, [r7, #14]
 8004846:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8004848:	693b      	ldr	r3, [r7, #16]
 800484a:	881b      	ldrh	r3, [r3, #0]
 800484c:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8004850:	d047      	beq.n	80048e2 <mem_trim+0x1ce>
      ptr_to_mem(mem2->next)->prev = ptr2;
 8004852:	693b      	ldr	r3, [r7, #16]
 8004854:	881b      	ldrh	r3, [r3, #0]
 8004856:	4618      	mov	r0, r3
 8004858:	f7ff fdb4 	bl	80043c4 <ptr_to_mem>
 800485c:	4602      	mov	r2, r0
 800485e:	89fb      	ldrh	r3, [r7, #14]
 8004860:	8053      	strh	r3, [r2, #2]
 8004862:	e03e      	b.n	80048e2 <mem_trim+0x1ce>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 8004864:	8bfb      	ldrh	r3, [r7, #30]
 8004866:	f103 0214 	add.w	r2, r3, #20
 800486a:	8abb      	ldrh	r3, [r7, #20]
 800486c:	429a      	cmp	r2, r3
 800486e:	d838      	bhi.n	80048e2 <mem_trim+0x1ce>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 8004870:	8afa      	ldrh	r2, [r7, #22]
 8004872:	8bfb      	ldrh	r3, [r7, #30]
 8004874:	4413      	add	r3, r2
 8004876:	b29b      	uxth	r3, r3
 8004878:	3308      	adds	r3, #8
 800487a:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800487c:	69bb      	ldr	r3, [r7, #24]
 800487e:	881b      	ldrh	r3, [r3, #0]
 8004880:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8004884:	d106      	bne.n	8004894 <mem_trim+0x180>
 8004886:	4b1b      	ldr	r3, [pc, #108]	; (80048f4 <mem_trim+0x1e0>)
 8004888:	f240 3216 	movw	r2, #790	; 0x316
 800488c:	491d      	ldr	r1, [pc, #116]	; (8004904 <mem_trim+0x1f0>)
 800488e:	481b      	ldr	r0, [pc, #108]	; (80048fc <mem_trim+0x1e8>)
 8004890:	f009 ff46 	bl	800e720 <iprintf>
    mem2 = ptr_to_mem(ptr2);
 8004894:	89fb      	ldrh	r3, [r7, #14]
 8004896:	4618      	mov	r0, r3
 8004898:	f7ff fd94 	bl	80043c4 <ptr_to_mem>
 800489c:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 800489e:	4b1a      	ldr	r3, [pc, #104]	; (8004908 <mem_trim+0x1f4>)
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	693a      	ldr	r2, [r7, #16]
 80048a4:	429a      	cmp	r2, r3
 80048a6:	d202      	bcs.n	80048ae <mem_trim+0x19a>
      lfree = mem2;
 80048a8:	4a17      	ldr	r2, [pc, #92]	; (8004908 <mem_trim+0x1f4>)
 80048aa:	693b      	ldr	r3, [r7, #16]
 80048ac:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 80048ae:	693b      	ldr	r3, [r7, #16]
 80048b0:	2200      	movs	r2, #0
 80048b2:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 80048b4:	69bb      	ldr	r3, [r7, #24]
 80048b6:	881a      	ldrh	r2, [r3, #0]
 80048b8:	693b      	ldr	r3, [r7, #16]
 80048ba:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 80048bc:	693b      	ldr	r3, [r7, #16]
 80048be:	8afa      	ldrh	r2, [r7, #22]
 80048c0:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 80048c2:	69bb      	ldr	r3, [r7, #24]
 80048c4:	89fa      	ldrh	r2, [r7, #14]
 80048c6:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 80048c8:	693b      	ldr	r3, [r7, #16]
 80048ca:	881b      	ldrh	r3, [r3, #0]
 80048cc:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 80048d0:	d007      	beq.n	80048e2 <mem_trim+0x1ce>
      ptr_to_mem(mem2->next)->prev = ptr2;
 80048d2:	693b      	ldr	r3, [r7, #16]
 80048d4:	881b      	ldrh	r3, [r3, #0]
 80048d6:	4618      	mov	r0, r3
 80048d8:	f7ff fd74 	bl	80043c4 <ptr_to_mem>
 80048dc:	4602      	mov	r2, r0
 80048de:	89fb      	ldrh	r3, [r7, #14]
 80048e0:	8053      	strh	r3, [r2, #2]
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
  return rmem;
 80048e2:	687b      	ldr	r3, [r7, #4]
}
 80048e4:	4618      	mov	r0, r3
 80048e6:	3720      	adds	r7, #32
 80048e8:	46bd      	mov	sp, r7
 80048ea:	bd80      	pop	{r7, pc}
 80048ec:	200053e8 	.word	0x200053e8
 80048f0:	200053ec 	.word	0x200053ec
 80048f4:	0800fa24 	.word	0x0800fa24
 80048f8:	0800fb94 	.word	0x0800fb94
 80048fc:	0800fa6c 	.word	0x0800fa6c
 8004900:	0800fbac 	.word	0x0800fbac
 8004904:	0800fbcc 	.word	0x0800fbcc
 8004908:	200053f0 	.word	0x200053f0

0800490c <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 800490c:	b580      	push	{r7, lr}
 800490e:	b088      	sub	sp, #32
 8004910:	af00      	add	r7, sp, #0
 8004912:	4603      	mov	r3, r0
 8004914:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 8004916:	88fb      	ldrh	r3, [r7, #6]
 8004918:	2b00      	cmp	r3, #0
 800491a:	d101      	bne.n	8004920 <mem_malloc+0x14>
    return NULL;
 800491c:	2300      	movs	r3, #0
 800491e:	e0d9      	b.n	8004ad4 <mem_malloc+0x1c8>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 8004920:	88fb      	ldrh	r3, [r7, #6]
 8004922:	3303      	adds	r3, #3
 8004924:	b29b      	uxth	r3, r3
 8004926:	f023 0303 	bic.w	r3, r3, #3
 800492a:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 800492c:	8bbb      	ldrh	r3, [r7, #28]
 800492e:	2b0b      	cmp	r3, #11
 8004930:	d801      	bhi.n	8004936 <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 8004932:	230c      	movs	r3, #12
 8004934:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 8004936:	8bbb      	ldrh	r3, [r7, #28]
 8004938:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800493c:	d803      	bhi.n	8004946 <mem_malloc+0x3a>
 800493e:	8bba      	ldrh	r2, [r7, #28]
 8004940:	88fb      	ldrh	r3, [r7, #6]
 8004942:	429a      	cmp	r2, r3
 8004944:	d201      	bcs.n	800494a <mem_malloc+0x3e>
    return NULL;
 8004946:	2300      	movs	r3, #0
 8004948:	e0c4      	b.n	8004ad4 <mem_malloc+0x1c8>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800494a:	4b64      	ldr	r3, [pc, #400]	; (8004adc <mem_malloc+0x1d0>)
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	4618      	mov	r0, r3
 8004950:	f7ff fd4a 	bl	80043e8 <mem_to_ptr>
 8004954:	4603      	mov	r3, r0
 8004956:	83fb      	strh	r3, [r7, #30]
 8004958:	e0b4      	b.n	8004ac4 <mem_malloc+0x1b8>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 800495a:	8bfb      	ldrh	r3, [r7, #30]
 800495c:	4618      	mov	r0, r3
 800495e:	f7ff fd31 	bl	80043c4 <ptr_to_mem>
 8004962:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 8004964:	697b      	ldr	r3, [r7, #20]
 8004966:	791b      	ldrb	r3, [r3, #4]
 8004968:	2b00      	cmp	r3, #0
 800496a:	f040 80a4 	bne.w	8004ab6 <mem_malloc+0x1aa>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 800496e:	697b      	ldr	r3, [r7, #20]
 8004970:	881b      	ldrh	r3, [r3, #0]
 8004972:	461a      	mov	r2, r3
 8004974:	8bfb      	ldrh	r3, [r7, #30]
 8004976:	1ad3      	subs	r3, r2, r3
 8004978:	f1a3 0208 	sub.w	r2, r3, #8
 800497c:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 800497e:	429a      	cmp	r2, r3
 8004980:	f0c0 8099 	bcc.w	8004ab6 <mem_malloc+0x1aa>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 8004984:	697b      	ldr	r3, [r7, #20]
 8004986:	881b      	ldrh	r3, [r3, #0]
 8004988:	461a      	mov	r2, r3
 800498a:	8bfb      	ldrh	r3, [r7, #30]
 800498c:	1ad3      	subs	r3, r2, r3
 800498e:	f1a3 0208 	sub.w	r2, r3, #8
 8004992:	8bbb      	ldrh	r3, [r7, #28]
 8004994:	3314      	adds	r3, #20
 8004996:	429a      	cmp	r2, r3
 8004998:	d333      	bcc.n	8004a02 <mem_malloc+0xf6>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 800499a:	8bfa      	ldrh	r2, [r7, #30]
 800499c:	8bbb      	ldrh	r3, [r7, #28]
 800499e:	4413      	add	r3, r2
 80049a0:	b29b      	uxth	r3, r3
 80049a2:	3308      	adds	r3, #8
 80049a4:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 80049a6:	8a7b      	ldrh	r3, [r7, #18]
 80049a8:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 80049ac:	d106      	bne.n	80049bc <mem_malloc+0xb0>
 80049ae:	4b4c      	ldr	r3, [pc, #304]	; (8004ae0 <mem_malloc+0x1d4>)
 80049b0:	f240 3287 	movw	r2, #903	; 0x387
 80049b4:	494b      	ldr	r1, [pc, #300]	; (8004ae4 <mem_malloc+0x1d8>)
 80049b6:	484c      	ldr	r0, [pc, #304]	; (8004ae8 <mem_malloc+0x1dc>)
 80049b8:	f009 feb2 	bl	800e720 <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 80049bc:	8a7b      	ldrh	r3, [r7, #18]
 80049be:	4618      	mov	r0, r3
 80049c0:	f7ff fd00 	bl	80043c4 <ptr_to_mem>
 80049c4:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	2200      	movs	r2, #0
 80049ca:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 80049cc:	697b      	ldr	r3, [r7, #20]
 80049ce:	881a      	ldrh	r2, [r3, #0]
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	8bfa      	ldrh	r2, [r7, #30]
 80049d8:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 80049da:	697b      	ldr	r3, [r7, #20]
 80049dc:	8a7a      	ldrh	r2, [r7, #18]
 80049de:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 80049e0:	697b      	ldr	r3, [r7, #20]
 80049e2:	2201      	movs	r2, #1
 80049e4:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	881b      	ldrh	r3, [r3, #0]
 80049ea:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 80049ee:	d00b      	beq.n	8004a08 <mem_malloc+0xfc>
            ptr_to_mem(mem2->next)->prev = ptr2;
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	881b      	ldrh	r3, [r3, #0]
 80049f4:	4618      	mov	r0, r3
 80049f6:	f7ff fce5 	bl	80043c4 <ptr_to_mem>
 80049fa:	4602      	mov	r2, r0
 80049fc:	8a7b      	ldrh	r3, [r7, #18]
 80049fe:	8053      	strh	r3, [r2, #2]
 8004a00:	e002      	b.n	8004a08 <mem_malloc+0xfc>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 8004a02:	697b      	ldr	r3, [r7, #20]
 8004a04:	2201      	movs	r2, #1
 8004a06:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 8004a08:	4b34      	ldr	r3, [pc, #208]	; (8004adc <mem_malloc+0x1d0>)
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	697a      	ldr	r2, [r7, #20]
 8004a0e:	429a      	cmp	r2, r3
 8004a10:	d127      	bne.n	8004a62 <mem_malloc+0x156>
          struct mem *cur = lfree;
 8004a12:	4b32      	ldr	r3, [pc, #200]	; (8004adc <mem_malloc+0x1d0>)
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 8004a18:	e005      	b.n	8004a26 <mem_malloc+0x11a>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 8004a1a:	69bb      	ldr	r3, [r7, #24]
 8004a1c:	881b      	ldrh	r3, [r3, #0]
 8004a1e:	4618      	mov	r0, r3
 8004a20:	f7ff fcd0 	bl	80043c4 <ptr_to_mem>
 8004a24:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 8004a26:	69bb      	ldr	r3, [r7, #24]
 8004a28:	791b      	ldrb	r3, [r3, #4]
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d004      	beq.n	8004a38 <mem_malloc+0x12c>
 8004a2e:	4b2f      	ldr	r3, [pc, #188]	; (8004aec <mem_malloc+0x1e0>)
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	69ba      	ldr	r2, [r7, #24]
 8004a34:	429a      	cmp	r2, r3
 8004a36:	d1f0      	bne.n	8004a1a <mem_malloc+0x10e>
          }
          lfree = cur;
 8004a38:	4a28      	ldr	r2, [pc, #160]	; (8004adc <mem_malloc+0x1d0>)
 8004a3a:	69bb      	ldr	r3, [r7, #24]
 8004a3c:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 8004a3e:	4b27      	ldr	r3, [pc, #156]	; (8004adc <mem_malloc+0x1d0>)
 8004a40:	681a      	ldr	r2, [r3, #0]
 8004a42:	4b2a      	ldr	r3, [pc, #168]	; (8004aec <mem_malloc+0x1e0>)
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	429a      	cmp	r2, r3
 8004a48:	d00b      	beq.n	8004a62 <mem_malloc+0x156>
 8004a4a:	4b24      	ldr	r3, [pc, #144]	; (8004adc <mem_malloc+0x1d0>)
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	791b      	ldrb	r3, [r3, #4]
 8004a50:	2b00      	cmp	r3, #0
 8004a52:	d006      	beq.n	8004a62 <mem_malloc+0x156>
 8004a54:	4b22      	ldr	r3, [pc, #136]	; (8004ae0 <mem_malloc+0x1d4>)
 8004a56:	f240 32b5 	movw	r2, #949	; 0x3b5
 8004a5a:	4925      	ldr	r1, [pc, #148]	; (8004af0 <mem_malloc+0x1e4>)
 8004a5c:	4822      	ldr	r0, [pc, #136]	; (8004ae8 <mem_malloc+0x1dc>)
 8004a5e:	f009 fe5f 	bl	800e720 <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 8004a62:	8bba      	ldrh	r2, [r7, #28]
 8004a64:	697b      	ldr	r3, [r7, #20]
 8004a66:	4413      	add	r3, r2
 8004a68:	3308      	adds	r3, #8
 8004a6a:	4a20      	ldr	r2, [pc, #128]	; (8004aec <mem_malloc+0x1e0>)
 8004a6c:	6812      	ldr	r2, [r2, #0]
 8004a6e:	4293      	cmp	r3, r2
 8004a70:	d906      	bls.n	8004a80 <mem_malloc+0x174>
 8004a72:	4b1b      	ldr	r3, [pc, #108]	; (8004ae0 <mem_malloc+0x1d4>)
 8004a74:	f240 32b9 	movw	r2, #953	; 0x3b9
 8004a78:	491e      	ldr	r1, [pc, #120]	; (8004af4 <mem_malloc+0x1e8>)
 8004a7a:	481b      	ldr	r0, [pc, #108]	; (8004ae8 <mem_malloc+0x1dc>)
 8004a7c:	f009 fe50 	bl	800e720 <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 8004a80:	697b      	ldr	r3, [r7, #20]
 8004a82:	f003 0303 	and.w	r3, r3, #3
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	d006      	beq.n	8004a98 <mem_malloc+0x18c>
 8004a8a:	4b15      	ldr	r3, [pc, #84]	; (8004ae0 <mem_malloc+0x1d4>)
 8004a8c:	f240 32bb 	movw	r2, #955	; 0x3bb
 8004a90:	4919      	ldr	r1, [pc, #100]	; (8004af8 <mem_malloc+0x1ec>)
 8004a92:	4815      	ldr	r0, [pc, #84]	; (8004ae8 <mem_malloc+0x1dc>)
 8004a94:	f009 fe44 	bl	800e720 <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 8004a98:	697b      	ldr	r3, [r7, #20]
 8004a9a:	f003 0303 	and.w	r3, r3, #3
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d006      	beq.n	8004ab0 <mem_malloc+0x1a4>
 8004aa2:	4b0f      	ldr	r3, [pc, #60]	; (8004ae0 <mem_malloc+0x1d4>)
 8004aa4:	f240 32bd 	movw	r2, #957	; 0x3bd
 8004aa8:	4914      	ldr	r1, [pc, #80]	; (8004afc <mem_malloc+0x1f0>)
 8004aaa:	480f      	ldr	r0, [pc, #60]	; (8004ae8 <mem_malloc+0x1dc>)
 8004aac:	f009 fe38 	bl	800e720 <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 8004ab0:	697b      	ldr	r3, [r7, #20]
 8004ab2:	3308      	adds	r3, #8
 8004ab4:	e00e      	b.n	8004ad4 <mem_malloc+0x1c8>
         ptr = ptr_to_mem(ptr)->next) {
 8004ab6:	8bfb      	ldrh	r3, [r7, #30]
 8004ab8:	4618      	mov	r0, r3
 8004aba:	f7ff fc83 	bl	80043c4 <ptr_to_mem>
 8004abe:	4603      	mov	r3, r0
 8004ac0:	881b      	ldrh	r3, [r3, #0]
 8004ac2:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 8004ac4:	8bfa      	ldrh	r2, [r7, #30]
 8004ac6:	8bbb      	ldrh	r3, [r7, #28]
 8004ac8:	f5c3 63c8 	rsb	r3, r3, #1600	; 0x640
 8004acc:	429a      	cmp	r2, r3
 8004ace:	f4ff af44 	bcc.w	800495a <mem_malloc+0x4e>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 8004ad2:	2300      	movs	r3, #0
}
 8004ad4:	4618      	mov	r0, r3
 8004ad6:	3720      	adds	r7, #32
 8004ad8:	46bd      	mov	sp, r7
 8004ada:	bd80      	pop	{r7, pc}
 8004adc:	200053f0 	.word	0x200053f0
 8004ae0:	0800fa24 	.word	0x0800fa24
 8004ae4:	0800fbcc 	.word	0x0800fbcc
 8004ae8:	0800fa6c 	.word	0x0800fa6c
 8004aec:	200053ec 	.word	0x200053ec
 8004af0:	0800fbe0 	.word	0x0800fbe0
 8004af4:	0800fbfc 	.word	0x0800fbfc
 8004af8:	0800fc2c 	.word	0x0800fc2c
 8004afc:	0800fc5c 	.word	0x0800fc5c

08004b00 <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 8004b00:	b480      	push	{r7}
 8004b02:	b085      	sub	sp, #20
 8004b04:	af00      	add	r7, sp, #0
 8004b06:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	689b      	ldr	r3, [r3, #8]
 8004b0c:	2200      	movs	r2, #0
 8004b0e:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	685b      	ldr	r3, [r3, #4]
 8004b14:	3303      	adds	r3, #3
 8004b16:	f023 0303 	bic.w	r3, r3, #3
 8004b1a:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 8004b1c:	2300      	movs	r3, #0
 8004b1e:	60fb      	str	r3, [r7, #12]
 8004b20:	e011      	b.n	8004b46 <memp_init_pool+0x46>
    memp->next = *desc->tab;
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	689b      	ldr	r3, [r3, #8]
 8004b26:	681a      	ldr	r2, [r3, #0]
 8004b28:	68bb      	ldr	r3, [r7, #8]
 8004b2a:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	689b      	ldr	r3, [r3, #8]
 8004b30:	68ba      	ldr	r2, [r7, #8]
 8004b32:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	881b      	ldrh	r3, [r3, #0]
 8004b38:	461a      	mov	r2, r3
 8004b3a:	68bb      	ldr	r3, [r7, #8]
 8004b3c:	4413      	add	r3, r2
 8004b3e:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	3301      	adds	r3, #1
 8004b44:	60fb      	str	r3, [r7, #12]
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	885b      	ldrh	r3, [r3, #2]
 8004b4a:	461a      	mov	r2, r3
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	4293      	cmp	r3, r2
 8004b50:	dbe7      	blt.n	8004b22 <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 8004b52:	bf00      	nop
 8004b54:	bf00      	nop
 8004b56:	3714      	adds	r7, #20
 8004b58:	46bd      	mov	sp, r7
 8004b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b5e:	4770      	bx	lr

08004b60 <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 8004b60:	b580      	push	{r7, lr}
 8004b62:	b082      	sub	sp, #8
 8004b64:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 8004b66:	2300      	movs	r3, #0
 8004b68:	80fb      	strh	r3, [r7, #6]
 8004b6a:	e009      	b.n	8004b80 <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 8004b6c:	88fb      	ldrh	r3, [r7, #6]
 8004b6e:	4a08      	ldr	r2, [pc, #32]	; (8004b90 <memp_init+0x30>)
 8004b70:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004b74:	4618      	mov	r0, r3
 8004b76:	f7ff ffc3 	bl	8004b00 <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 8004b7a:	88fb      	ldrh	r3, [r7, #6]
 8004b7c:	3301      	adds	r3, #1
 8004b7e:	80fb      	strh	r3, [r7, #6]
 8004b80:	88fb      	ldrh	r3, [r7, #6]
 8004b82:	2b08      	cmp	r3, #8
 8004b84:	d9f2      	bls.n	8004b6c <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 8004b86:	bf00      	nop
 8004b88:	bf00      	nop
 8004b8a:	3708      	adds	r7, #8
 8004b8c:	46bd      	mov	sp, r7
 8004b8e:	bd80      	pop	{r7, pc}
 8004b90:	08012440 	.word	0x08012440

08004b94 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 8004b94:	b580      	push	{r7, lr}
 8004b96:	b084      	sub	sp, #16
 8004b98:	af00      	add	r7, sp, #0
 8004b9a:	6078      	str	r0, [r7, #4]
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);

  memp = *desc->tab;
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	689b      	ldr	r3, [r3, #8]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	60fb      	str	r3, [r7, #12]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	d012      	beq.n	8004bd0 <do_memp_malloc_pool+0x3c>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	689b      	ldr	r3, [r3, #8]
 8004bae:	68fa      	ldr	r2, [r7, #12]
 8004bb0:	6812      	ldr	r2, [r2, #0]
 8004bb2:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	f003 0303 	and.w	r3, r3, #3
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	d006      	beq.n	8004bcc <do_memp_malloc_pool+0x38>
 8004bbe:	4b07      	ldr	r3, [pc, #28]	; (8004bdc <do_memp_malloc_pool+0x48>)
 8004bc0:	f44f 728c 	mov.w	r2, #280	; 0x118
 8004bc4:	4906      	ldr	r1, [pc, #24]	; (8004be0 <do_memp_malloc_pool+0x4c>)
 8004bc6:	4807      	ldr	r0, [pc, #28]	; (8004be4 <do_memp_malloc_pool+0x50>)
 8004bc8:	f009 fdaa 	bl	800e720 <iprintf>
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	e000      	b.n	8004bd2 <do_memp_malloc_pool+0x3e>
#endif
    SYS_ARCH_UNPROTECT(old_level);
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 8004bd0:	2300      	movs	r3, #0
}
 8004bd2:	4618      	mov	r0, r3
 8004bd4:	3710      	adds	r7, #16
 8004bd6:	46bd      	mov	sp, r7
 8004bd8:	bd80      	pop	{r7, pc}
 8004bda:	bf00      	nop
 8004bdc:	0800fc80 	.word	0x0800fc80
 8004be0:	0800fcb0 	.word	0x0800fcb0
 8004be4:	0800fcd4 	.word	0x0800fcd4

08004be8 <memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc_pool(const struct memp_desc *desc)
#else
memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 8004be8:	b580      	push	{r7, lr}
 8004bea:	b082      	sub	sp, #8
 8004bec:	af00      	add	r7, sp, #0
 8004bee:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	d106      	bne.n	8004c04 <memp_malloc_pool+0x1c>
 8004bf6:	4b0a      	ldr	r3, [pc, #40]	; (8004c20 <memp_malloc_pool+0x38>)
 8004bf8:	f44f 729e 	mov.w	r2, #316	; 0x13c
 8004bfc:	4909      	ldr	r1, [pc, #36]	; (8004c24 <memp_malloc_pool+0x3c>)
 8004bfe:	480a      	ldr	r0, [pc, #40]	; (8004c28 <memp_malloc_pool+0x40>)
 8004c00:	f009 fd8e 	bl	800e720 <iprintf>
  if (desc == NULL) {
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	d101      	bne.n	8004c0e <memp_malloc_pool+0x26>
    return NULL;
 8004c0a:	2300      	movs	r3, #0
 8004c0c:	e003      	b.n	8004c16 <memp_malloc_pool+0x2e>
  }

#if !MEMP_OVERFLOW_CHECK
  return do_memp_malloc_pool(desc);
 8004c0e:	6878      	ldr	r0, [r7, #4]
 8004c10:	f7ff ffc0 	bl	8004b94 <do_memp_malloc_pool>
 8004c14:	4603      	mov	r3, r0
#else
  return do_memp_malloc_pool_fn(desc, file, line);
#endif
}
 8004c16:	4618      	mov	r0, r3
 8004c18:	3708      	adds	r7, #8
 8004c1a:	46bd      	mov	sp, r7
 8004c1c:	bd80      	pop	{r7, pc}
 8004c1e:	bf00      	nop
 8004c20:	0800fc80 	.word	0x0800fc80
 8004c24:	0800fcfc 	.word	0x0800fcfc
 8004c28:	0800fcd4 	.word	0x0800fcd4

08004c2c <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 8004c2c:	b580      	push	{r7, lr}
 8004c2e:	b084      	sub	sp, #16
 8004c30:	af00      	add	r7, sp, #0
 8004c32:	4603      	mov	r3, r0
 8004c34:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 8004c36:	79fb      	ldrb	r3, [r7, #7]
 8004c38:	2b08      	cmp	r3, #8
 8004c3a:	d908      	bls.n	8004c4e <memp_malloc+0x22>
 8004c3c:	4b0a      	ldr	r3, [pc, #40]	; (8004c68 <memp_malloc+0x3c>)
 8004c3e:	f240 1257 	movw	r2, #343	; 0x157
 8004c42:	490a      	ldr	r1, [pc, #40]	; (8004c6c <memp_malloc+0x40>)
 8004c44:	480a      	ldr	r0, [pc, #40]	; (8004c70 <memp_malloc+0x44>)
 8004c46:	f009 fd6b 	bl	800e720 <iprintf>
 8004c4a:	2300      	movs	r3, #0
 8004c4c:	e008      	b.n	8004c60 <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 8004c4e:	79fb      	ldrb	r3, [r7, #7]
 8004c50:	4a08      	ldr	r2, [pc, #32]	; (8004c74 <memp_malloc+0x48>)
 8004c52:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004c56:	4618      	mov	r0, r3
 8004c58:	f7ff ff9c 	bl	8004b94 <do_memp_malloc_pool>
 8004c5c:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 8004c5e:	68fb      	ldr	r3, [r7, #12]
}
 8004c60:	4618      	mov	r0, r3
 8004c62:	3710      	adds	r7, #16
 8004c64:	46bd      	mov	sp, r7
 8004c66:	bd80      	pop	{r7, pc}
 8004c68:	0800fc80 	.word	0x0800fc80
 8004c6c:	0800fd10 	.word	0x0800fd10
 8004c70:	0800fcd4 	.word	0x0800fcd4
 8004c74:	08012440 	.word	0x08012440

08004c78 <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 8004c78:	b580      	push	{r7, lr}
 8004c7a:	b084      	sub	sp, #16
 8004c7c:	af00      	add	r7, sp, #0
 8004c7e:	6078      	str	r0, [r7, #4]
 8004c80:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 8004c82:	683b      	ldr	r3, [r7, #0]
 8004c84:	f003 0303 	and.w	r3, r3, #3
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	d006      	beq.n	8004c9a <do_memp_free_pool+0x22>
 8004c8c:	4b0a      	ldr	r3, [pc, #40]	; (8004cb8 <do_memp_free_pool+0x40>)
 8004c8e:	f44f 72b6 	mov.w	r2, #364	; 0x16c
 8004c92:	490a      	ldr	r1, [pc, #40]	; (8004cbc <do_memp_free_pool+0x44>)
 8004c94:	480a      	ldr	r0, [pc, #40]	; (8004cc0 <do_memp_free_pool+0x48>)
 8004c96:	f009 fd43 	bl	800e720 <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 8004c9a:	683b      	ldr	r3, [r7, #0]
 8004c9c:	60fb      	str	r3, [r7, #12]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	689b      	ldr	r3, [r3, #8]
 8004ca2:	681a      	ldr	r2, [r3, #0]
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	689b      	ldr	r3, [r3, #8]
 8004cac:	68fa      	ldr	r2, [r7, #12]
 8004cae:	601a      	str	r2, [r3, #0]
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
#endif /* !MEMP_MEM_MALLOC */
}
 8004cb0:	bf00      	nop
 8004cb2:	3710      	adds	r7, #16
 8004cb4:	46bd      	mov	sp, r7
 8004cb6:	bd80      	pop	{r7, pc}
 8004cb8:	0800fc80 	.word	0x0800fc80
 8004cbc:	0800fd30 	.word	0x0800fd30
 8004cc0:	0800fcd4 	.word	0x0800fcd4

08004cc4 <memp_free_pool>:
 * @param desc the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free_pool(const struct memp_desc *desc, void *mem)
{
 8004cc4:	b580      	push	{r7, lr}
 8004cc6:	b082      	sub	sp, #8
 8004cc8:	af00      	add	r7, sp, #0
 8004cca:	6078      	str	r0, [r7, #4]
 8004ccc:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	d106      	bne.n	8004ce2 <memp_free_pool+0x1e>
 8004cd4:	4b0a      	ldr	r3, [pc, #40]	; (8004d00 <memp_free_pool+0x3c>)
 8004cd6:	f240 1295 	movw	r2, #405	; 0x195
 8004cda:	490a      	ldr	r1, [pc, #40]	; (8004d04 <memp_free_pool+0x40>)
 8004cdc:	480a      	ldr	r0, [pc, #40]	; (8004d08 <memp_free_pool+0x44>)
 8004cde:	f009 fd1f 	bl	800e720 <iprintf>
  if ((desc == NULL) || (mem == NULL)) {
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	d007      	beq.n	8004cf8 <memp_free_pool+0x34>
 8004ce8:	683b      	ldr	r3, [r7, #0]
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	d004      	beq.n	8004cf8 <memp_free_pool+0x34>
    return;
  }

  do_memp_free_pool(desc, mem);
 8004cee:	6839      	ldr	r1, [r7, #0]
 8004cf0:	6878      	ldr	r0, [r7, #4]
 8004cf2:	f7ff ffc1 	bl	8004c78 <do_memp_free_pool>
 8004cf6:	e000      	b.n	8004cfa <memp_free_pool+0x36>
    return;
 8004cf8:	bf00      	nop
}
 8004cfa:	3708      	adds	r7, #8
 8004cfc:	46bd      	mov	sp, r7
 8004cfe:	bd80      	pop	{r7, pc}
 8004d00:	0800fc80 	.word	0x0800fc80
 8004d04:	0800fcfc 	.word	0x0800fcfc
 8004d08:	0800fcd4 	.word	0x0800fcd4

08004d0c <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 8004d0c:	b580      	push	{r7, lr}
 8004d0e:	b082      	sub	sp, #8
 8004d10:	af00      	add	r7, sp, #0
 8004d12:	4603      	mov	r3, r0
 8004d14:	6039      	str	r1, [r7, #0]
 8004d16:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 8004d18:	79fb      	ldrb	r3, [r7, #7]
 8004d1a:	2b08      	cmp	r3, #8
 8004d1c:	d907      	bls.n	8004d2e <memp_free+0x22>
 8004d1e:	4b0c      	ldr	r3, [pc, #48]	; (8004d50 <memp_free+0x44>)
 8004d20:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 8004d24:	490b      	ldr	r1, [pc, #44]	; (8004d54 <memp_free+0x48>)
 8004d26:	480c      	ldr	r0, [pc, #48]	; (8004d58 <memp_free+0x4c>)
 8004d28:	f009 fcfa 	bl	800e720 <iprintf>
 8004d2c:	e00c      	b.n	8004d48 <memp_free+0x3c>

  if (mem == NULL) {
 8004d2e:	683b      	ldr	r3, [r7, #0]
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	d008      	beq.n	8004d46 <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 8004d34:	79fb      	ldrb	r3, [r7, #7]
 8004d36:	4a09      	ldr	r2, [pc, #36]	; (8004d5c <memp_free+0x50>)
 8004d38:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004d3c:	6839      	ldr	r1, [r7, #0]
 8004d3e:	4618      	mov	r0, r3
 8004d40:	f7ff ff9a 	bl	8004c78 <do_memp_free_pool>
 8004d44:	e000      	b.n	8004d48 <memp_free+0x3c>
    return;
 8004d46:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 8004d48:	3708      	adds	r7, #8
 8004d4a:	46bd      	mov	sp, r7
 8004d4c:	bd80      	pop	{r7, pc}
 8004d4e:	bf00      	nop
 8004d50:	0800fc80 	.word	0x0800fc80
 8004d54:	0800fd50 	.word	0x0800fd50
 8004d58:	0800fcd4 	.word	0x0800fcd4
 8004d5c:	08012440 	.word	0x08012440

08004d60 <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 8004d60:	b480      	push	{r7}
 8004d62:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 8004d64:	bf00      	nop
 8004d66:	46bd      	mov	sp, r7
 8004d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d6c:	4770      	bx	lr
	...

08004d70 <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 8004d70:	b580      	push	{r7, lr}
 8004d72:	b086      	sub	sp, #24
 8004d74:	af00      	add	r7, sp, #0
 8004d76:	60f8      	str	r0, [r7, #12]
 8004d78:	60b9      	str	r1, [r7, #8]
 8004d7a:	607a      	str	r2, [r7, #4]
 8004d7c:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	2b00      	cmp	r3, #0
 8004d82:	d108      	bne.n	8004d96 <netif_add+0x26>
 8004d84:	4b57      	ldr	r3, [pc, #348]	; (8004ee4 <netif_add+0x174>)
 8004d86:	f240 1227 	movw	r2, #295	; 0x127
 8004d8a:	4957      	ldr	r1, [pc, #348]	; (8004ee8 <netif_add+0x178>)
 8004d8c:	4857      	ldr	r0, [pc, #348]	; (8004eec <netif_add+0x17c>)
 8004d8e:	f009 fcc7 	bl	800e720 <iprintf>
 8004d92:	2300      	movs	r3, #0
 8004d94:	e0a2      	b.n	8004edc <netif_add+0x16c>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 8004d96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	d108      	bne.n	8004dae <netif_add+0x3e>
 8004d9c:	4b51      	ldr	r3, [pc, #324]	; (8004ee4 <netif_add+0x174>)
 8004d9e:	f44f 7294 	mov.w	r2, #296	; 0x128
 8004da2:	4953      	ldr	r1, [pc, #332]	; (8004ef0 <netif_add+0x180>)
 8004da4:	4851      	ldr	r0, [pc, #324]	; (8004eec <netif_add+0x17c>)
 8004da6:	f009 fcbb 	bl	800e720 <iprintf>
 8004daa:	2300      	movs	r3, #0
 8004dac:	e096      	b.n	8004edc <netif_add+0x16c>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 8004dae:	68bb      	ldr	r3, [r7, #8]
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	d101      	bne.n	8004db8 <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 8004db4:	4b4f      	ldr	r3, [pc, #316]	; (8004ef4 <netif_add+0x184>)
 8004db6:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	d101      	bne.n	8004dc2 <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 8004dbe:	4b4d      	ldr	r3, [pc, #308]	; (8004ef4 <netif_add+0x184>)
 8004dc0:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 8004dc2:	683b      	ldr	r3, [r7, #0]
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	d101      	bne.n	8004dcc <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 8004dc8:	4b4a      	ldr	r3, [pc, #296]	; (8004ef4 <netif_add+0x184>)
 8004dca:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	2200      	movs	r2, #0
 8004dd0:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	2200      	movs	r2, #0
 8004dd6:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	2200      	movs	r2, #0
 8004ddc:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	4a45      	ldr	r2, [pc, #276]	; (8004ef8 <netif_add+0x188>)
 8004de2:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	2200      	movs	r2, #0
 8004de8:	849a      	strh	r2, [r3, #36]	; 0x24
  netif->flags = 0;
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	2200      	movs	r2, #0
 8004dee:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	2200      	movs	r2, #0
 8004df6:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	6a3a      	ldr	r2, [r7, #32]
 8004dfc:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
 8004dfe:	4b3f      	ldr	r3, [pc, #252]	; (8004efc <netif_add+0x18c>)
 8004e00:	781a      	ldrb	r2, [r3, #0]
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  netif->input = input;
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004e0c:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 8004e0e:	683b      	ldr	r3, [r7, #0]
 8004e10:	687a      	ldr	r2, [r7, #4]
 8004e12:	68b9      	ldr	r1, [r7, #8]
 8004e14:	68f8      	ldr	r0, [r7, #12]
 8004e16:	f000 f913 	bl	8005040 <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 8004e1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e1c:	68f8      	ldr	r0, [r7, #12]
 8004e1e:	4798      	blx	r3
 8004e20:	4603      	mov	r3, r0
 8004e22:	2b00      	cmp	r3, #0
 8004e24:	d001      	beq.n	8004e2a <netif_add+0xba>
    return NULL;
 8004e26:	2300      	movs	r3, #0
 8004e28:	e058      	b.n	8004edc <netif_add+0x16c>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8004e30:	2bff      	cmp	r3, #255	; 0xff
 8004e32:	d103      	bne.n	8004e3c <netif_add+0xcc>
        netif->num = 0;
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	2200      	movs	r2, #0
 8004e38:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      }
      num_netifs = 0;
 8004e3c:	2300      	movs	r3, #0
 8004e3e:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 8004e40:	4b2f      	ldr	r3, [pc, #188]	; (8004f00 <netif_add+0x190>)
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	617b      	str	r3, [r7, #20]
 8004e46:	e02b      	b.n	8004ea0 <netif_add+0x130>
        LWIP_ASSERT("netif already added", netif2 != netif);
 8004e48:	697a      	ldr	r2, [r7, #20]
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	429a      	cmp	r2, r3
 8004e4e:	d106      	bne.n	8004e5e <netif_add+0xee>
 8004e50:	4b24      	ldr	r3, [pc, #144]	; (8004ee4 <netif_add+0x174>)
 8004e52:	f240 128b 	movw	r2, #395	; 0x18b
 8004e56:	492b      	ldr	r1, [pc, #172]	; (8004f04 <netif_add+0x194>)
 8004e58:	4824      	ldr	r0, [pc, #144]	; (8004eec <netif_add+0x17c>)
 8004e5a:	f009 fc61 	bl	800e720 <iprintf>
        num_netifs++;
 8004e5e:	693b      	ldr	r3, [r7, #16]
 8004e60:	3301      	adds	r3, #1
 8004e62:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 8004e64:	693b      	ldr	r3, [r7, #16]
 8004e66:	2bff      	cmp	r3, #255	; 0xff
 8004e68:	dd06      	ble.n	8004e78 <netif_add+0x108>
 8004e6a:	4b1e      	ldr	r3, [pc, #120]	; (8004ee4 <netif_add+0x174>)
 8004e6c:	f240 128d 	movw	r2, #397	; 0x18d
 8004e70:	4925      	ldr	r1, [pc, #148]	; (8004f08 <netif_add+0x198>)
 8004e72:	481e      	ldr	r0, [pc, #120]	; (8004eec <netif_add+0x17c>)
 8004e74:	f009 fc54 	bl	800e720 <iprintf>
        if (netif2->num == netif->num) {
 8004e78:	697b      	ldr	r3, [r7, #20]
 8004e7a:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8004e84:	429a      	cmp	r2, r3
 8004e86:	d108      	bne.n	8004e9a <netif_add+0x12a>
          netif->num++;
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8004e8e:	3301      	adds	r3, #1
 8004e90:	b2da      	uxtb	r2, r3
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
          break;
 8004e98:	e005      	b.n	8004ea6 <netif_add+0x136>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 8004e9a:	697b      	ldr	r3, [r7, #20]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	617b      	str	r3, [r7, #20]
 8004ea0:	697b      	ldr	r3, [r7, #20]
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	d1d0      	bne.n	8004e48 <netif_add+0xd8>
        }
      }
    } while (netif2 != NULL);
 8004ea6:	697b      	ldr	r3, [r7, #20]
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	d1be      	bne.n	8004e2a <netif_add+0xba>
  }
  if (netif->num == 254) {
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8004eb2:	2bfe      	cmp	r3, #254	; 0xfe
 8004eb4:	d103      	bne.n	8004ebe <netif_add+0x14e>
    netif_num = 0;
 8004eb6:	4b11      	ldr	r3, [pc, #68]	; (8004efc <netif_add+0x18c>)
 8004eb8:	2200      	movs	r2, #0
 8004eba:	701a      	strb	r2, [r3, #0]
 8004ebc:	e006      	b.n	8004ecc <netif_add+0x15c>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8004ec4:	3301      	adds	r3, #1
 8004ec6:	b2da      	uxtb	r2, r3
 8004ec8:	4b0c      	ldr	r3, [pc, #48]	; (8004efc <netif_add+0x18c>)
 8004eca:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 8004ecc:	4b0c      	ldr	r3, [pc, #48]	; (8004f00 <netif_add+0x190>)
 8004ece:	681a      	ldr	r2, [r3, #0]
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 8004ed4:	4a0a      	ldr	r2, [pc, #40]	; (8004f00 <netif_add+0x190>)
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 8004eda:	68fb      	ldr	r3, [r7, #12]
}
 8004edc:	4618      	mov	r0, r3
 8004ede:	3718      	adds	r7, #24
 8004ee0:	46bd      	mov	sp, r7
 8004ee2:	bd80      	pop	{r7, pc}
 8004ee4:	0800fd6c 	.word	0x0800fd6c
 8004ee8:	0800fe00 	.word	0x0800fe00
 8004eec:	0800fdbc 	.word	0x0800fdbc
 8004ef0:	0800fe1c 	.word	0x0800fe1c
 8004ef4:	080124a4 	.word	0x080124a4
 8004ef8:	0800531b 	.word	0x0800531b
 8004efc:	200082e8 	.word	0x200082e8
 8004f00:	200082e0 	.word	0x200082e0
 8004f04:	0800fe40 	.word	0x0800fe40
 8004f08:	0800fe54 	.word	0x0800fe54

08004f0c <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8004f0c:	b580      	push	{r7, lr}
 8004f0e:	b082      	sub	sp, #8
 8004f10:	af00      	add	r7, sp, #0
 8004f12:	6078      	str	r0, [r7, #4]
 8004f14:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 8004f16:	6839      	ldr	r1, [r7, #0]
 8004f18:	6878      	ldr	r0, [r7, #4]
 8004f1a:	f002 fbe5 	bl	80076e8 <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 8004f1e:	6839      	ldr	r1, [r7, #0]
 8004f20:	6878      	ldr	r0, [r7, #4]
 8004f22:	f007 f819 	bl	800bf58 <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 8004f26:	bf00      	nop
 8004f28:	3708      	adds	r7, #8
 8004f2a:	46bd      	mov	sp, r7
 8004f2c:	bd80      	pop	{r7, pc}
	...

08004f30 <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 8004f30:	b580      	push	{r7, lr}
 8004f32:	b086      	sub	sp, #24
 8004f34:	af00      	add	r7, sp, #0
 8004f36:	60f8      	str	r0, [r7, #12]
 8004f38:	60b9      	str	r1, [r7, #8]
 8004f3a:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 8004f3c:	68bb      	ldr	r3, [r7, #8]
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d106      	bne.n	8004f50 <netif_do_set_ipaddr+0x20>
 8004f42:	4b1d      	ldr	r3, [pc, #116]	; (8004fb8 <netif_do_set_ipaddr+0x88>)
 8004f44:	f240 12cb 	movw	r2, #459	; 0x1cb
 8004f48:	491c      	ldr	r1, [pc, #112]	; (8004fbc <netif_do_set_ipaddr+0x8c>)
 8004f4a:	481d      	ldr	r0, [pc, #116]	; (8004fc0 <netif_do_set_ipaddr+0x90>)
 8004f4c:	f009 fbe8 	bl	800e720 <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	d106      	bne.n	8004f64 <netif_do_set_ipaddr+0x34>
 8004f56:	4b18      	ldr	r3, [pc, #96]	; (8004fb8 <netif_do_set_ipaddr+0x88>)
 8004f58:	f44f 72e6 	mov.w	r2, #460	; 0x1cc
 8004f5c:	4917      	ldr	r1, [pc, #92]	; (8004fbc <netif_do_set_ipaddr+0x8c>)
 8004f5e:	4818      	ldr	r0, [pc, #96]	; (8004fc0 <netif_do_set_ipaddr+0x90>)
 8004f60:	f009 fbde 	bl	800e720 <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 8004f64:	68bb      	ldr	r3, [r7, #8]
 8004f66:	681a      	ldr	r2, [r3, #0]
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	3304      	adds	r3, #4
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	429a      	cmp	r2, r3
 8004f70:	d01c      	beq.n	8004fac <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 8004f72:	68bb      	ldr	r3, [r7, #8]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	3304      	adds	r3, #4
 8004f7c:	681a      	ldr	r2, [r3, #0]
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 8004f82:	f107 0314 	add.w	r3, r7, #20
 8004f86:	4619      	mov	r1, r3
 8004f88:	6878      	ldr	r0, [r7, #4]
 8004f8a:	f7ff ffbf 	bl	8004f0c <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 8004f8e:	68bb      	ldr	r3, [r7, #8]
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	d002      	beq.n	8004f9a <netif_do_set_ipaddr+0x6a>
 8004f94:	68bb      	ldr	r3, [r7, #8]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	e000      	b.n	8004f9c <netif_do_set_ipaddr+0x6c>
 8004f9a:	2300      	movs	r3, #0
 8004f9c:	68fa      	ldr	r2, [r7, #12]
 8004f9e:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 8004fa0:	2101      	movs	r1, #1
 8004fa2:	68f8      	ldr	r0, [r7, #12]
 8004fa4:	f000 f8d2 	bl	800514c <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 8004fa8:	2301      	movs	r3, #1
 8004faa:	e000      	b.n	8004fae <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 8004fac:	2300      	movs	r3, #0
}
 8004fae:	4618      	mov	r0, r3
 8004fb0:	3718      	adds	r7, #24
 8004fb2:	46bd      	mov	sp, r7
 8004fb4:	bd80      	pop	{r7, pc}
 8004fb6:	bf00      	nop
 8004fb8:	0800fd6c 	.word	0x0800fd6c
 8004fbc:	0800fe84 	.word	0x0800fe84
 8004fc0:	0800fdbc 	.word	0x0800fdbc

08004fc4 <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 8004fc4:	b480      	push	{r7}
 8004fc6:	b085      	sub	sp, #20
 8004fc8:	af00      	add	r7, sp, #0
 8004fca:	60f8      	str	r0, [r7, #12]
 8004fcc:	60b9      	str	r1, [r7, #8]
 8004fce:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 8004fd0:	68bb      	ldr	r3, [r7, #8]
 8004fd2:	681a      	ldr	r2, [r3, #0]
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	3308      	adds	r3, #8
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	429a      	cmp	r2, r3
 8004fdc:	d00a      	beq.n	8004ff4 <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 8004fde:	68bb      	ldr	r3, [r7, #8]
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	d002      	beq.n	8004fea <netif_do_set_netmask+0x26>
 8004fe4:	68bb      	ldr	r3, [r7, #8]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	e000      	b.n	8004fec <netif_do_set_netmask+0x28>
 8004fea:	2300      	movs	r3, #0
 8004fec:	68fa      	ldr	r2, [r7, #12]
 8004fee:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 8004ff0:	2301      	movs	r3, #1
 8004ff2:	e000      	b.n	8004ff6 <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 8004ff4:	2300      	movs	r3, #0
}
 8004ff6:	4618      	mov	r0, r3
 8004ff8:	3714      	adds	r7, #20
 8004ffa:	46bd      	mov	sp, r7
 8004ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005000:	4770      	bx	lr

08005002 <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 8005002:	b480      	push	{r7}
 8005004:	b085      	sub	sp, #20
 8005006:	af00      	add	r7, sp, #0
 8005008:	60f8      	str	r0, [r7, #12]
 800500a:	60b9      	str	r1, [r7, #8]
 800500c:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 800500e:	68bb      	ldr	r3, [r7, #8]
 8005010:	681a      	ldr	r2, [r3, #0]
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	330c      	adds	r3, #12
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	429a      	cmp	r2, r3
 800501a:	d00a      	beq.n	8005032 <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 800501c:	68bb      	ldr	r3, [r7, #8]
 800501e:	2b00      	cmp	r3, #0
 8005020:	d002      	beq.n	8005028 <netif_do_set_gw+0x26>
 8005022:	68bb      	ldr	r3, [r7, #8]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	e000      	b.n	800502a <netif_do_set_gw+0x28>
 8005028:	2300      	movs	r3, #0
 800502a:	68fa      	ldr	r2, [r7, #12]
 800502c:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 800502e:	2301      	movs	r3, #1
 8005030:	e000      	b.n	8005034 <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 8005032:	2300      	movs	r3, #0
}
 8005034:	4618      	mov	r0, r3
 8005036:	3714      	adds	r7, #20
 8005038:	46bd      	mov	sp, r7
 800503a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800503e:	4770      	bx	lr

08005040 <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 8005040:	b580      	push	{r7, lr}
 8005042:	b088      	sub	sp, #32
 8005044:	af00      	add	r7, sp, #0
 8005046:	60f8      	str	r0, [r7, #12]
 8005048:	60b9      	str	r1, [r7, #8]
 800504a:	607a      	str	r2, [r7, #4]
 800504c:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 800504e:	2300      	movs	r3, #0
 8005050:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 8005052:	2300      	movs	r3, #0
 8005054:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 8005056:	68bb      	ldr	r3, [r7, #8]
 8005058:	2b00      	cmp	r3, #0
 800505a:	d101      	bne.n	8005060 <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 800505c:	4b1c      	ldr	r3, [pc, #112]	; (80050d0 <netif_set_addr+0x90>)
 800505e:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	2b00      	cmp	r3, #0
 8005064:	d101      	bne.n	800506a <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 8005066:	4b1a      	ldr	r3, [pc, #104]	; (80050d0 <netif_set_addr+0x90>)
 8005068:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800506a:	683b      	ldr	r3, [r7, #0]
 800506c:	2b00      	cmp	r3, #0
 800506e:	d101      	bne.n	8005074 <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 8005070:	4b17      	ldr	r3, [pc, #92]	; (80050d0 <netif_set_addr+0x90>)
 8005072:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 8005074:	68bb      	ldr	r3, [r7, #8]
 8005076:	2b00      	cmp	r3, #0
 8005078:	d003      	beq.n	8005082 <netif_set_addr+0x42>
 800507a:	68bb      	ldr	r3, [r7, #8]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	2b00      	cmp	r3, #0
 8005080:	d101      	bne.n	8005086 <netif_set_addr+0x46>
 8005082:	2301      	movs	r3, #1
 8005084:	e000      	b.n	8005088 <netif_set_addr+0x48>
 8005086:	2300      	movs	r3, #0
 8005088:	617b      	str	r3, [r7, #20]
  if (remove) {
 800508a:	697b      	ldr	r3, [r7, #20]
 800508c:	2b00      	cmp	r3, #0
 800508e:	d006      	beq.n	800509e <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 8005090:	f107 0310 	add.w	r3, r7, #16
 8005094:	461a      	mov	r2, r3
 8005096:	68b9      	ldr	r1, [r7, #8]
 8005098:	68f8      	ldr	r0, [r7, #12]
 800509a:	f7ff ff49 	bl	8004f30 <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 800509e:	69fa      	ldr	r2, [r7, #28]
 80050a0:	6879      	ldr	r1, [r7, #4]
 80050a2:	68f8      	ldr	r0, [r7, #12]
 80050a4:	f7ff ff8e 	bl	8004fc4 <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 80050a8:	69ba      	ldr	r2, [r7, #24]
 80050aa:	6839      	ldr	r1, [r7, #0]
 80050ac:	68f8      	ldr	r0, [r7, #12]
 80050ae:	f7ff ffa8 	bl	8005002 <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 80050b2:	697b      	ldr	r3, [r7, #20]
 80050b4:	2b00      	cmp	r3, #0
 80050b6:	d106      	bne.n	80050c6 <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 80050b8:	f107 0310 	add.w	r3, r7, #16
 80050bc:	461a      	mov	r2, r3
 80050be:	68b9      	ldr	r1, [r7, #8]
 80050c0:	68f8      	ldr	r0, [r7, #12]
 80050c2:	f7ff ff35 	bl	8004f30 <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 80050c6:	bf00      	nop
 80050c8:	3720      	adds	r7, #32
 80050ca:	46bd      	mov	sp, r7
 80050cc:	bd80      	pop	{r7, pc}
 80050ce:	bf00      	nop
 80050d0:	080124a4 	.word	0x080124a4

080050d4 <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 80050d4:	b480      	push	{r7}
 80050d6:	b083      	sub	sp, #12
 80050d8:	af00      	add	r7, sp, #0
 80050da:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 80050dc:	4a04      	ldr	r2, [pc, #16]	; (80050f0 <netif_set_default+0x1c>)
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 80050e2:	bf00      	nop
 80050e4:	370c      	adds	r7, #12
 80050e6:	46bd      	mov	sp, r7
 80050e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ec:	4770      	bx	lr
 80050ee:	bf00      	nop
 80050f0:	200082e4 	.word	0x200082e4

080050f4 <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 80050f4:	b580      	push	{r7, lr}
 80050f6:	b082      	sub	sp, #8
 80050f8:	af00      	add	r7, sp, #0
 80050fa:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	2b00      	cmp	r3, #0
 8005100:	d107      	bne.n	8005112 <netif_set_up+0x1e>
 8005102:	4b0f      	ldr	r3, [pc, #60]	; (8005140 <netif_set_up+0x4c>)
 8005104:	f44f 7254 	mov.w	r2, #848	; 0x350
 8005108:	490e      	ldr	r1, [pc, #56]	; (8005144 <netif_set_up+0x50>)
 800510a:	480f      	ldr	r0, [pc, #60]	; (8005148 <netif_set_up+0x54>)
 800510c:	f009 fb08 	bl	800e720 <iprintf>
 8005110:	e013      	b.n	800513a <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8005118:	f003 0301 	and.w	r3, r3, #1
 800511c:	2b00      	cmp	r3, #0
 800511e:	d10c      	bne.n	800513a <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8005126:	f043 0301 	orr.w	r3, r3, #1
 800512a:	b2da      	uxtb	r2, r3
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 8005132:	2103      	movs	r1, #3
 8005134:	6878      	ldr	r0, [r7, #4]
 8005136:	f000 f809 	bl	800514c <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 800513a:	3708      	adds	r7, #8
 800513c:	46bd      	mov	sp, r7
 800513e:	bd80      	pop	{r7, pc}
 8005140:	0800fd6c 	.word	0x0800fd6c
 8005144:	0800fef4 	.word	0x0800fef4
 8005148:	0800fdbc 	.word	0x0800fdbc

0800514c <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 800514c:	b580      	push	{r7, lr}
 800514e:	b082      	sub	sp, #8
 8005150:	af00      	add	r7, sp, #0
 8005152:	6078      	str	r0, [r7, #4]
 8005154:	460b      	mov	r3, r1
 8005156:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	2b00      	cmp	r3, #0
 800515c:	d106      	bne.n	800516c <netif_issue_reports+0x20>
 800515e:	4b18      	ldr	r3, [pc, #96]	; (80051c0 <netif_issue_reports+0x74>)
 8005160:	f240 326d 	movw	r2, #877	; 0x36d
 8005164:	4917      	ldr	r1, [pc, #92]	; (80051c4 <netif_issue_reports+0x78>)
 8005166:	4818      	ldr	r0, [pc, #96]	; (80051c8 <netif_issue_reports+0x7c>)
 8005168:	f009 fada 	bl	800e720 <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8005172:	f003 0304 	and.w	r3, r3, #4
 8005176:	2b00      	cmp	r3, #0
 8005178:	d01e      	beq.n	80051b8 <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8005180:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 8005184:	2b00      	cmp	r3, #0
 8005186:	d017      	beq.n	80051b8 <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 8005188:	78fb      	ldrb	r3, [r7, #3]
 800518a:	f003 0301 	and.w	r3, r3, #1
 800518e:	2b00      	cmp	r3, #0
 8005190:	d013      	beq.n	80051ba <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	3304      	adds	r3, #4
 8005196:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 8005198:	2b00      	cmp	r3, #0
 800519a:	d00e      	beq.n	80051ba <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80051a2:	f003 0308 	and.w	r3, r3, #8
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	d007      	beq.n	80051ba <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	3304      	adds	r3, #4
 80051ae:	4619      	mov	r1, r3
 80051b0:	6878      	ldr	r0, [r7, #4]
 80051b2:	f007 fe3b 	bl	800ce2c <etharp_request>
 80051b6:	e000      	b.n	80051ba <netif_issue_reports+0x6e>
    return;
 80051b8:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 80051ba:	3708      	adds	r7, #8
 80051bc:	46bd      	mov	sp, r7
 80051be:	bd80      	pop	{r7, pc}
 80051c0:	0800fd6c 	.word	0x0800fd6c
 80051c4:	0800ff10 	.word	0x0800ff10
 80051c8:	0800fdbc 	.word	0x0800fdbc

080051cc <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 80051cc:	b580      	push	{r7, lr}
 80051ce:	b082      	sub	sp, #8
 80051d0:	af00      	add	r7, sp, #0
 80051d2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	2b00      	cmp	r3, #0
 80051d8:	d107      	bne.n	80051ea <netif_set_down+0x1e>
 80051da:	4b12      	ldr	r3, [pc, #72]	; (8005224 <netif_set_down+0x58>)
 80051dc:	f240 329b 	movw	r2, #923	; 0x39b
 80051e0:	4911      	ldr	r1, [pc, #68]	; (8005228 <netif_set_down+0x5c>)
 80051e2:	4812      	ldr	r0, [pc, #72]	; (800522c <netif_set_down+0x60>)
 80051e4:	f009 fa9c 	bl	800e720 <iprintf>
 80051e8:	e019      	b.n	800521e <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80051f0:	f003 0301 	and.w	r3, r3, #1
 80051f4:	2b00      	cmp	r3, #0
 80051f6:	d012      	beq.n	800521e <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80051fe:	f023 0301 	bic.w	r3, r3, #1
 8005202:	b2da      	uxtb	r2, r3
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8005210:	f003 0308 	and.w	r3, r3, #8
 8005214:	2b00      	cmp	r3, #0
 8005216:	d002      	beq.n	800521e <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 8005218:	6878      	ldr	r0, [r7, #4]
 800521a:	f007 f9c5 	bl	800c5a8 <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 800521e:	3708      	adds	r7, #8
 8005220:	46bd      	mov	sp, r7
 8005222:	bd80      	pop	{r7, pc}
 8005224:	0800fd6c 	.word	0x0800fd6c
 8005228:	0800ff34 	.word	0x0800ff34
 800522c:	0800fdbc 	.word	0x0800fdbc

08005230 <netif_set_link_up>:
 * @ingroup netif
 * Called by a driver when its link goes up
 */
void
netif_set_link_up(struct netif *netif)
{
 8005230:	b580      	push	{r7, lr}
 8005232:	b082      	sub	sp, #8
 8005234:	af00      	add	r7, sp, #0
 8005236:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	2b00      	cmp	r3, #0
 800523c:	d107      	bne.n	800524e <netif_set_link_up+0x1e>
 800523e:	4b13      	ldr	r3, [pc, #76]	; (800528c <netif_set_link_up+0x5c>)
 8005240:	f44f 7278 	mov.w	r2, #992	; 0x3e0
 8005244:	4912      	ldr	r1, [pc, #72]	; (8005290 <netif_set_link_up+0x60>)
 8005246:	4813      	ldr	r0, [pc, #76]	; (8005294 <netif_set_link_up+0x64>)
 8005248:	f009 fa6a 	bl	800e720 <iprintf>
 800524c:	e01b      	b.n	8005286 <netif_set_link_up+0x56>

  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8005254:	f003 0304 	and.w	r3, r3, #4
 8005258:	2b00      	cmp	r3, #0
 800525a:	d114      	bne.n	8005286 <netif_set_link_up+0x56>
    netif_set_flags(netif, NETIF_FLAG_LINK_UP);
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8005262:	f043 0304 	orr.w	r3, r3, #4
 8005266:	b2da      	uxtb	r2, r3
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

#if LWIP_AUTOIP
    autoip_network_changed(netif);
#endif /* LWIP_AUTOIP */

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800526e:	2103      	movs	r1, #3
 8005270:	6878      	ldr	r0, [r7, #4]
 8005272:	f7ff ff6b 	bl	800514c <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_LINK_CALLBACK(netif);
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	69db      	ldr	r3, [r3, #28]
 800527a:	2b00      	cmp	r3, #0
 800527c:	d003      	beq.n	8005286 <netif_set_link_up+0x56>
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	69db      	ldr	r3, [r3, #28]
 8005282:	6878      	ldr	r0, [r7, #4]
 8005284:	4798      	blx	r3
      args.link_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 8005286:	3708      	adds	r7, #8
 8005288:	46bd      	mov	sp, r7
 800528a:	bd80      	pop	{r7, pc}
 800528c:	0800fd6c 	.word	0x0800fd6c
 8005290:	0800ff54 	.word	0x0800ff54
 8005294:	0800fdbc 	.word	0x0800fdbc

08005298 <netif_set_link_down>:
 * @ingroup netif
 * Called by a driver when its link goes down
 */
void
netif_set_link_down(struct netif *netif)
{
 8005298:	b580      	push	{r7, lr}
 800529a:	b082      	sub	sp, #8
 800529c:	af00      	add	r7, sp, #0
 800529e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	2b00      	cmp	r3, #0
 80052a4:	d107      	bne.n	80052b6 <netif_set_link_down+0x1e>
 80052a6:	4b11      	ldr	r3, [pc, #68]	; (80052ec <netif_set_link_down+0x54>)
 80052a8:	f240 4206 	movw	r2, #1030	; 0x406
 80052ac:	4910      	ldr	r1, [pc, #64]	; (80052f0 <netif_set_link_down+0x58>)
 80052ae:	4811      	ldr	r0, [pc, #68]	; (80052f4 <netif_set_link_down+0x5c>)
 80052b0:	f009 fa36 	bl	800e720 <iprintf>
 80052b4:	e017      	b.n	80052e6 <netif_set_link_down+0x4e>

  if (netif->flags & NETIF_FLAG_LINK_UP) {
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80052bc:	f003 0304 	and.w	r3, r3, #4
 80052c0:	2b00      	cmp	r3, #0
 80052c2:	d010      	beq.n	80052e6 <netif_set_link_down+0x4e>
    netif_clear_flags(netif, NETIF_FLAG_LINK_UP);
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80052ca:	f023 0304 	bic.w	r3, r3, #4
 80052ce:	b2da      	uxtb	r2, r3
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    NETIF_LINK_CALLBACK(netif);
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	69db      	ldr	r3, [r3, #28]
 80052da:	2b00      	cmp	r3, #0
 80052dc:	d003      	beq.n	80052e6 <netif_set_link_down+0x4e>
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	69db      	ldr	r3, [r3, #28]
 80052e2:	6878      	ldr	r0, [r7, #4]
 80052e4:	4798      	blx	r3
      args.link_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 80052e6:	3708      	adds	r7, #8
 80052e8:	46bd      	mov	sp, r7
 80052ea:	bd80      	pop	{r7, pc}
 80052ec:	0800fd6c 	.word	0x0800fd6c
 80052f0:	0800ff78 	.word	0x0800ff78
 80052f4:	0800fdbc 	.word	0x0800fdbc

080052f8 <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 80052f8:	b480      	push	{r7}
 80052fa:	b083      	sub	sp, #12
 80052fc:	af00      	add	r7, sp, #0
 80052fe:	6078      	str	r0, [r7, #4]
 8005300:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	2b00      	cmp	r3, #0
 8005306:	d002      	beq.n	800530e <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	683a      	ldr	r2, [r7, #0]
 800530c:	61da      	str	r2, [r3, #28]
  }
}
 800530e:	bf00      	nop
 8005310:	370c      	adds	r7, #12
 8005312:	46bd      	mov	sp, r7
 8005314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005318:	4770      	bx	lr

0800531a <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 800531a:	b480      	push	{r7}
 800531c:	b085      	sub	sp, #20
 800531e:	af00      	add	r7, sp, #0
 8005320:	60f8      	str	r0, [r7, #12]
 8005322:	60b9      	str	r1, [r7, #8]
 8005324:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 8005326:	f06f 030b 	mvn.w	r3, #11
}
 800532a:	4618      	mov	r0, r3
 800532c:	3714      	adds	r7, #20
 800532e:	46bd      	mov	sp, r7
 8005330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005334:	4770      	bx	lr
	...

08005338 <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 8005338:	b480      	push	{r7}
 800533a:	b085      	sub	sp, #20
 800533c:	af00      	add	r7, sp, #0
 800533e:	4603      	mov	r3, r0
 8005340:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 8005342:	79fb      	ldrb	r3, [r7, #7]
 8005344:	2b00      	cmp	r3, #0
 8005346:	d013      	beq.n	8005370 <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 8005348:	4b0d      	ldr	r3, [pc, #52]	; (8005380 <netif_get_by_index+0x48>)
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	60fb      	str	r3, [r7, #12]
 800534e:	e00c      	b.n	800536a <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8005356:	3301      	adds	r3, #1
 8005358:	b2db      	uxtb	r3, r3
 800535a:	79fa      	ldrb	r2, [r7, #7]
 800535c:	429a      	cmp	r2, r3
 800535e:	d101      	bne.n	8005364 <netif_get_by_index+0x2c>
        return netif; /* found! */
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	e006      	b.n	8005372 <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	60fb      	str	r3, [r7, #12]
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	2b00      	cmp	r3, #0
 800536e:	d1ef      	bne.n	8005350 <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 8005370:	2300      	movs	r3, #0
}
 8005372:	4618      	mov	r0, r3
 8005374:	3714      	adds	r7, #20
 8005376:	46bd      	mov	sp, r7
 8005378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800537c:	4770      	bx	lr
 800537e:	bf00      	nop
 8005380:	200082e0 	.word	0x200082e0

08005384 <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 8005384:	b580      	push	{r7, lr}
 8005386:	b082      	sub	sp, #8
 8005388:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 800538a:	4b0c      	ldr	r3, [pc, #48]	; (80053bc <pbuf_free_ooseq+0x38>)
 800538c:	2200      	movs	r2, #0
 800538e:	701a      	strb	r2, [r3, #0]

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 8005390:	4b0b      	ldr	r3, [pc, #44]	; (80053c0 <pbuf_free_ooseq+0x3c>)
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	607b      	str	r3, [r7, #4]
 8005396:	e00a      	b.n	80053ae <pbuf_free_ooseq+0x2a>
    if (pcb->ooseq != NULL) {
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800539c:	2b00      	cmp	r3, #0
 800539e:	d003      	beq.n	80053a8 <pbuf_free_ooseq+0x24>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_free_ooseq(pcb);
 80053a0:	6878      	ldr	r0, [r7, #4]
 80053a2:	f002 f9df 	bl	8007764 <tcp_free_ooseq>
      return;
 80053a6:	e005      	b.n	80053b4 <pbuf_free_ooseq+0x30>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	68db      	ldr	r3, [r3, #12]
 80053ac:	607b      	str	r3, [r7, #4]
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	2b00      	cmp	r3, #0
 80053b2:	d1f1      	bne.n	8005398 <pbuf_free_ooseq+0x14>
    }
  }
}
 80053b4:	3708      	adds	r7, #8
 80053b6:	46bd      	mov	sp, r7
 80053b8:	bd80      	pop	{r7, pc}
 80053ba:	bf00      	nop
 80053bc:	200082e9 	.word	0x200082e9
 80053c0:	200082f8 	.word	0x200082f8

080053c4 <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 80053c4:	b480      	push	{r7}
 80053c6:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
 80053c8:	4b03      	ldr	r3, [pc, #12]	; (80053d8 <pbuf_pool_is_empty+0x14>)
 80053ca:	2201      	movs	r2, #1
 80053cc:	701a      	strb	r2, [r3, #0]
  if (!queued) {
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 80053ce:	bf00      	nop
 80053d0:	46bd      	mov	sp, r7
 80053d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053d6:	4770      	bx	lr
 80053d8:	200082e9 	.word	0x200082e9

080053dc <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 80053dc:	b480      	push	{r7}
 80053de:	b085      	sub	sp, #20
 80053e0:	af00      	add	r7, sp, #0
 80053e2:	60f8      	str	r0, [r7, #12]
 80053e4:	60b9      	str	r1, [r7, #8]
 80053e6:	4611      	mov	r1, r2
 80053e8:	461a      	mov	r2, r3
 80053ea:	460b      	mov	r3, r1
 80053ec:	80fb      	strh	r3, [r7, #6]
 80053ee:	4613      	mov	r3, r2
 80053f0:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	2200      	movs	r2, #0
 80053f6:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	68ba      	ldr	r2, [r7, #8]
 80053fc:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	88fa      	ldrh	r2, [r7, #6]
 8005402:	811a      	strh	r2, [r3, #8]
  p->len = len;
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	88ba      	ldrh	r2, [r7, #4]
 8005408:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 800540a:	8b3b      	ldrh	r3, [r7, #24]
 800540c:	b2da      	uxtb	r2, r3
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	7f3a      	ldrb	r2, [r7, #28]
 8005416:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	2201      	movs	r2, #1
 800541c:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	2200      	movs	r2, #0
 8005422:	73da      	strb	r2, [r3, #15]
}
 8005424:	bf00      	nop
 8005426:	3714      	adds	r7, #20
 8005428:	46bd      	mov	sp, r7
 800542a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800542e:	4770      	bx	lr

08005430 <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 8005430:	b580      	push	{r7, lr}
 8005432:	b08c      	sub	sp, #48	; 0x30
 8005434:	af02      	add	r7, sp, #8
 8005436:	4603      	mov	r3, r0
 8005438:	71fb      	strb	r3, [r7, #7]
 800543a:	460b      	mov	r3, r1
 800543c:	80bb      	strh	r3, [r7, #4]
 800543e:	4613      	mov	r3, r2
 8005440:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 8005442:	79fb      	ldrb	r3, [r7, #7]
 8005444:	847b      	strh	r3, [r7, #34]	; 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 8005446:	887b      	ldrh	r3, [r7, #2]
 8005448:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 800544c:	d07f      	beq.n	800554e <pbuf_alloc+0x11e>
 800544e:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 8005452:	f300 80c8 	bgt.w	80055e6 <pbuf_alloc+0x1b6>
 8005456:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 800545a:	d010      	beq.n	800547e <pbuf_alloc+0x4e>
 800545c:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 8005460:	f300 80c1 	bgt.w	80055e6 <pbuf_alloc+0x1b6>
 8005464:	2b01      	cmp	r3, #1
 8005466:	d002      	beq.n	800546e <pbuf_alloc+0x3e>
 8005468:	2b41      	cmp	r3, #65	; 0x41
 800546a:	f040 80bc 	bne.w	80055e6 <pbuf_alloc+0x1b6>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 800546e:	887a      	ldrh	r2, [r7, #2]
 8005470:	88bb      	ldrh	r3, [r7, #4]
 8005472:	4619      	mov	r1, r3
 8005474:	2000      	movs	r0, #0
 8005476:	f000 f8d1 	bl	800561c <pbuf_alloc_reference>
 800547a:	6278      	str	r0, [r7, #36]	; 0x24
      break;
 800547c:	e0bd      	b.n	80055fa <pbuf_alloc+0x1ca>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 800547e:	2300      	movs	r3, #0
 8005480:	627b      	str	r3, [r7, #36]	; 0x24
      last = NULL;
 8005482:	2300      	movs	r3, #0
 8005484:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 8005486:	88bb      	ldrh	r3, [r7, #4]
 8005488:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 800548a:	2008      	movs	r0, #8
 800548c:	f7ff fbce 	bl	8004c2c <memp_malloc>
 8005490:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 8005492:	693b      	ldr	r3, [r7, #16]
 8005494:	2b00      	cmp	r3, #0
 8005496:	d109      	bne.n	80054ac <pbuf_alloc+0x7c>
          PBUF_POOL_IS_EMPTY();
 8005498:	f7ff ff94 	bl	80053c4 <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 800549c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800549e:	2b00      	cmp	r3, #0
 80054a0:	d002      	beq.n	80054a8 <pbuf_alloc+0x78>
            pbuf_free(p);
 80054a2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80054a4:	f000 faa8 	bl	80059f8 <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 80054a8:	2300      	movs	r3, #0
 80054aa:	e0a7      	b.n	80055fc <pbuf_alloc+0x1cc>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 80054ac:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80054ae:	3303      	adds	r3, #3
 80054b0:	b29b      	uxth	r3, r3
 80054b2:	f023 0303 	bic.w	r3, r3, #3
 80054b6:	b29b      	uxth	r3, r3
 80054b8:	f5c3 7314 	rsb	r3, r3, #592	; 0x250
 80054bc:	b29b      	uxth	r3, r3
 80054be:	8b7a      	ldrh	r2, [r7, #26]
 80054c0:	4293      	cmp	r3, r2
 80054c2:	bf28      	it	cs
 80054c4:	4613      	movcs	r3, r2
 80054c6:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 80054c8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80054ca:	3310      	adds	r3, #16
 80054cc:	693a      	ldr	r2, [r7, #16]
 80054ce:	4413      	add	r3, r2
 80054d0:	3303      	adds	r3, #3
 80054d2:	f023 0303 	bic.w	r3, r3, #3
 80054d6:	4618      	mov	r0, r3
 80054d8:	89f9      	ldrh	r1, [r7, #14]
 80054da:	8b7a      	ldrh	r2, [r7, #26]
 80054dc:	2300      	movs	r3, #0
 80054de:	9301      	str	r3, [sp, #4]
 80054e0:	887b      	ldrh	r3, [r7, #2]
 80054e2:	9300      	str	r3, [sp, #0]
 80054e4:	460b      	mov	r3, r1
 80054e6:	4601      	mov	r1, r0
 80054e8:	6938      	ldr	r0, [r7, #16]
 80054ea:	f7ff ff77 	bl	80053dc <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 80054ee:	693b      	ldr	r3, [r7, #16]
 80054f0:	685b      	ldr	r3, [r3, #4]
 80054f2:	f003 0303 	and.w	r3, r3, #3
 80054f6:	2b00      	cmp	r3, #0
 80054f8:	d006      	beq.n	8005508 <pbuf_alloc+0xd8>
 80054fa:	4b42      	ldr	r3, [pc, #264]	; (8005604 <pbuf_alloc+0x1d4>)
 80054fc:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005500:	4941      	ldr	r1, [pc, #260]	; (8005608 <pbuf_alloc+0x1d8>)
 8005502:	4842      	ldr	r0, [pc, #264]	; (800560c <pbuf_alloc+0x1dc>)
 8005504:	f009 f90c 	bl	800e720 <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 8005508:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800550a:	3303      	adds	r3, #3
 800550c:	f023 0303 	bic.w	r3, r3, #3
 8005510:	f5b3 7f14 	cmp.w	r3, #592	; 0x250
 8005514:	d106      	bne.n	8005524 <pbuf_alloc+0xf4>
 8005516:	4b3b      	ldr	r3, [pc, #236]	; (8005604 <pbuf_alloc+0x1d4>)
 8005518:	f44f 7281 	mov.w	r2, #258	; 0x102
 800551c:	493c      	ldr	r1, [pc, #240]	; (8005610 <pbuf_alloc+0x1e0>)
 800551e:	483b      	ldr	r0, [pc, #236]	; (800560c <pbuf_alloc+0x1dc>)
 8005520:	f009 f8fe 	bl	800e720 <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 8005524:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005526:	2b00      	cmp	r3, #0
 8005528:	d102      	bne.n	8005530 <pbuf_alloc+0x100>
          /* allocated head of pbuf chain (into p) */
          p = q;
 800552a:	693b      	ldr	r3, [r7, #16]
 800552c:	627b      	str	r3, [r7, #36]	; 0x24
 800552e:	e002      	b.n	8005536 <pbuf_alloc+0x106>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 8005530:	69fb      	ldr	r3, [r7, #28]
 8005532:	693a      	ldr	r2, [r7, #16]
 8005534:	601a      	str	r2, [r3, #0]
        }
        last = q;
 8005536:	693b      	ldr	r3, [r7, #16]
 8005538:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 800553a:	8b7a      	ldrh	r2, [r7, #26]
 800553c:	89fb      	ldrh	r3, [r7, #14]
 800553e:	1ad3      	subs	r3, r2, r3
 8005540:	837b      	strh	r3, [r7, #26]
        offset = 0;
 8005542:	2300      	movs	r3, #0
 8005544:	847b      	strh	r3, [r7, #34]	; 0x22
      } while (rem_len > 0);
 8005546:	8b7b      	ldrh	r3, [r7, #26]
 8005548:	2b00      	cmp	r3, #0
 800554a:	d19e      	bne.n	800548a <pbuf_alloc+0x5a>
      break;
 800554c:	e055      	b.n	80055fa <pbuf_alloc+0x1ca>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 800554e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8005550:	3303      	adds	r3, #3
 8005552:	b29b      	uxth	r3, r3
 8005554:	f023 0303 	bic.w	r3, r3, #3
 8005558:	b29a      	uxth	r2, r3
 800555a:	88bb      	ldrh	r3, [r7, #4]
 800555c:	3303      	adds	r3, #3
 800555e:	b29b      	uxth	r3, r3
 8005560:	f023 0303 	bic.w	r3, r3, #3
 8005564:	b29b      	uxth	r3, r3
 8005566:	4413      	add	r3, r2
 8005568:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 800556a:	8b3b      	ldrh	r3, [r7, #24]
 800556c:	3310      	adds	r3, #16
 800556e:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 8005570:	8b3a      	ldrh	r2, [r7, #24]
 8005572:	88bb      	ldrh	r3, [r7, #4]
 8005574:	3303      	adds	r3, #3
 8005576:	f023 0303 	bic.w	r3, r3, #3
 800557a:	429a      	cmp	r2, r3
 800557c:	d306      	bcc.n	800558c <pbuf_alloc+0x15c>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 800557e:	8afa      	ldrh	r2, [r7, #22]
 8005580:	88bb      	ldrh	r3, [r7, #4]
 8005582:	3303      	adds	r3, #3
 8005584:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 8005588:	429a      	cmp	r2, r3
 800558a:	d201      	bcs.n	8005590 <pbuf_alloc+0x160>
        return NULL;
 800558c:	2300      	movs	r3, #0
 800558e:	e035      	b.n	80055fc <pbuf_alloc+0x1cc>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 8005590:	8afb      	ldrh	r3, [r7, #22]
 8005592:	4618      	mov	r0, r3
 8005594:	f7ff f9ba 	bl	800490c <mem_malloc>
 8005598:	6278      	str	r0, [r7, #36]	; 0x24
      if (p == NULL) {
 800559a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800559c:	2b00      	cmp	r3, #0
 800559e:	d101      	bne.n	80055a4 <pbuf_alloc+0x174>
        return NULL;
 80055a0:	2300      	movs	r3, #0
 80055a2:	e02b      	b.n	80055fc <pbuf_alloc+0x1cc>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 80055a4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80055a6:	3310      	adds	r3, #16
 80055a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80055aa:	4413      	add	r3, r2
 80055ac:	3303      	adds	r3, #3
 80055ae:	f023 0303 	bic.w	r3, r3, #3
 80055b2:	4618      	mov	r0, r3
 80055b4:	88b9      	ldrh	r1, [r7, #4]
 80055b6:	88ba      	ldrh	r2, [r7, #4]
 80055b8:	2300      	movs	r3, #0
 80055ba:	9301      	str	r3, [sp, #4]
 80055bc:	887b      	ldrh	r3, [r7, #2]
 80055be:	9300      	str	r3, [sp, #0]
 80055c0:	460b      	mov	r3, r1
 80055c2:	4601      	mov	r1, r0
 80055c4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80055c6:	f7ff ff09 	bl	80053dc <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 80055ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055cc:	685b      	ldr	r3, [r3, #4]
 80055ce:	f003 0303 	and.w	r3, r3, #3
 80055d2:	2b00      	cmp	r3, #0
 80055d4:	d010      	beq.n	80055f8 <pbuf_alloc+0x1c8>
 80055d6:	4b0b      	ldr	r3, [pc, #44]	; (8005604 <pbuf_alloc+0x1d4>)
 80055d8:	f44f 7291 	mov.w	r2, #290	; 0x122
 80055dc:	490d      	ldr	r1, [pc, #52]	; (8005614 <pbuf_alloc+0x1e4>)
 80055de:	480b      	ldr	r0, [pc, #44]	; (800560c <pbuf_alloc+0x1dc>)
 80055e0:	f009 f89e 	bl	800e720 <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 80055e4:	e008      	b.n	80055f8 <pbuf_alloc+0x1c8>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 80055e6:	4b07      	ldr	r3, [pc, #28]	; (8005604 <pbuf_alloc+0x1d4>)
 80055e8:	f240 1227 	movw	r2, #295	; 0x127
 80055ec:	490a      	ldr	r1, [pc, #40]	; (8005618 <pbuf_alloc+0x1e8>)
 80055ee:	4807      	ldr	r0, [pc, #28]	; (800560c <pbuf_alloc+0x1dc>)
 80055f0:	f009 f896 	bl	800e720 <iprintf>
      return NULL;
 80055f4:	2300      	movs	r3, #0
 80055f6:	e001      	b.n	80055fc <pbuf_alloc+0x1cc>
      break;
 80055f8:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 80055fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80055fc:	4618      	mov	r0, r3
 80055fe:	3728      	adds	r7, #40	; 0x28
 8005600:	46bd      	mov	sp, r7
 8005602:	bd80      	pop	{r7, pc}
 8005604:	0800ff9c 	.word	0x0800ff9c
 8005608:	0800ffcc 	.word	0x0800ffcc
 800560c:	0800fffc 	.word	0x0800fffc
 8005610:	08010024 	.word	0x08010024
 8005614:	08010058 	.word	0x08010058
 8005618:	08010084 	.word	0x08010084

0800561c <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 800561c:	b580      	push	{r7, lr}
 800561e:	b086      	sub	sp, #24
 8005620:	af02      	add	r7, sp, #8
 8005622:	6078      	str	r0, [r7, #4]
 8005624:	460b      	mov	r3, r1
 8005626:	807b      	strh	r3, [r7, #2]
 8005628:	4613      	mov	r3, r2
 800562a:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 800562c:	883b      	ldrh	r3, [r7, #0]
 800562e:	2b41      	cmp	r3, #65	; 0x41
 8005630:	d009      	beq.n	8005646 <pbuf_alloc_reference+0x2a>
 8005632:	883b      	ldrh	r3, [r7, #0]
 8005634:	2b01      	cmp	r3, #1
 8005636:	d006      	beq.n	8005646 <pbuf_alloc_reference+0x2a>
 8005638:	4b0f      	ldr	r3, [pc, #60]	; (8005678 <pbuf_alloc_reference+0x5c>)
 800563a:	f44f 72a5 	mov.w	r2, #330	; 0x14a
 800563e:	490f      	ldr	r1, [pc, #60]	; (800567c <pbuf_alloc_reference+0x60>)
 8005640:	480f      	ldr	r0, [pc, #60]	; (8005680 <pbuf_alloc_reference+0x64>)
 8005642:	f009 f86d 	bl	800e720 <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 8005646:	2007      	movs	r0, #7
 8005648:	f7ff faf0 	bl	8004c2c <memp_malloc>
 800564c:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	2b00      	cmp	r3, #0
 8005652:	d101      	bne.n	8005658 <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 8005654:	2300      	movs	r3, #0
 8005656:	e00b      	b.n	8005670 <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 8005658:	8879      	ldrh	r1, [r7, #2]
 800565a:	887a      	ldrh	r2, [r7, #2]
 800565c:	2300      	movs	r3, #0
 800565e:	9301      	str	r3, [sp, #4]
 8005660:	883b      	ldrh	r3, [r7, #0]
 8005662:	9300      	str	r3, [sp, #0]
 8005664:	460b      	mov	r3, r1
 8005666:	6879      	ldr	r1, [r7, #4]
 8005668:	68f8      	ldr	r0, [r7, #12]
 800566a:	f7ff feb7 	bl	80053dc <pbuf_init_alloced_pbuf>
  return p;
 800566e:	68fb      	ldr	r3, [r7, #12]
}
 8005670:	4618      	mov	r0, r3
 8005672:	3710      	adds	r7, #16
 8005674:	46bd      	mov	sp, r7
 8005676:	bd80      	pop	{r7, pc}
 8005678:	0800ff9c 	.word	0x0800ff9c
 800567c:	080100a0 	.word	0x080100a0
 8005680:	0800fffc 	.word	0x0800fffc

08005684 <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 8005684:	b580      	push	{r7, lr}
 8005686:	b088      	sub	sp, #32
 8005688:	af02      	add	r7, sp, #8
 800568a:	607b      	str	r3, [r7, #4]
 800568c:	4603      	mov	r3, r0
 800568e:	73fb      	strb	r3, [r7, #15]
 8005690:	460b      	mov	r3, r1
 8005692:	81bb      	strh	r3, [r7, #12]
 8005694:	4613      	mov	r3, r2
 8005696:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 8005698:	7bfb      	ldrb	r3, [r7, #15]
 800569a:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 800569c:	8a7b      	ldrh	r3, [r7, #18]
 800569e:	3303      	adds	r3, #3
 80056a0:	f023 0203 	bic.w	r2, r3, #3
 80056a4:	89bb      	ldrh	r3, [r7, #12]
 80056a6:	441a      	add	r2, r3
 80056a8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80056aa:	429a      	cmp	r2, r3
 80056ac:	d901      	bls.n	80056b2 <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 80056ae:	2300      	movs	r3, #0
 80056b0:	e018      	b.n	80056e4 <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 80056b2:	6a3b      	ldr	r3, [r7, #32]
 80056b4:	2b00      	cmp	r3, #0
 80056b6:	d007      	beq.n	80056c8 <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 80056b8:	8a7b      	ldrh	r3, [r7, #18]
 80056ba:	3303      	adds	r3, #3
 80056bc:	f023 0303 	bic.w	r3, r3, #3
 80056c0:	6a3a      	ldr	r2, [r7, #32]
 80056c2:	4413      	add	r3, r2
 80056c4:	617b      	str	r3, [r7, #20]
 80056c6:	e001      	b.n	80056cc <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 80056c8:	2300      	movs	r3, #0
 80056ca:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 80056cc:	6878      	ldr	r0, [r7, #4]
 80056ce:	89b9      	ldrh	r1, [r7, #12]
 80056d0:	89ba      	ldrh	r2, [r7, #12]
 80056d2:	2302      	movs	r3, #2
 80056d4:	9301      	str	r3, [sp, #4]
 80056d6:	897b      	ldrh	r3, [r7, #10]
 80056d8:	9300      	str	r3, [sp, #0]
 80056da:	460b      	mov	r3, r1
 80056dc:	6979      	ldr	r1, [r7, #20]
 80056de:	f7ff fe7d 	bl	80053dc <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 80056e2:	687b      	ldr	r3, [r7, #4]
}
 80056e4:	4618      	mov	r0, r3
 80056e6:	3718      	adds	r7, #24
 80056e8:	46bd      	mov	sp, r7
 80056ea:	bd80      	pop	{r7, pc}

080056ec <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 80056ec:	b580      	push	{r7, lr}
 80056ee:	b084      	sub	sp, #16
 80056f0:	af00      	add	r7, sp, #0
 80056f2:	6078      	str	r0, [r7, #4]
 80056f4:	460b      	mov	r3, r1
 80056f6:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	2b00      	cmp	r3, #0
 80056fc:	d106      	bne.n	800570c <pbuf_realloc+0x20>
 80056fe:	4b3a      	ldr	r3, [pc, #232]	; (80057e8 <pbuf_realloc+0xfc>)
 8005700:	f44f 72cc 	mov.w	r2, #408	; 0x198
 8005704:	4939      	ldr	r1, [pc, #228]	; (80057ec <pbuf_realloc+0x100>)
 8005706:	483a      	ldr	r0, [pc, #232]	; (80057f0 <pbuf_realloc+0x104>)
 8005708:	f009 f80a 	bl	800e720 <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	891b      	ldrh	r3, [r3, #8]
 8005710:	887a      	ldrh	r2, [r7, #2]
 8005712:	429a      	cmp	r2, r3
 8005714:	d263      	bcs.n	80057de <pbuf_realloc+0xf2>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	891a      	ldrh	r2, [r3, #8]
 800571a:	887b      	ldrh	r3, [r7, #2]
 800571c:	1ad3      	subs	r3, r2, r3
 800571e:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 8005720:	887b      	ldrh	r3, [r7, #2]
 8005722:	817b      	strh	r3, [r7, #10]
  q = p;
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 8005728:	e018      	b.n	800575c <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	895b      	ldrh	r3, [r3, #10]
 800572e:	897a      	ldrh	r2, [r7, #10]
 8005730:	1ad3      	subs	r3, r2, r3
 8005732:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	891a      	ldrh	r2, [r3, #8]
 8005738:	893b      	ldrh	r3, [r7, #8]
 800573a:	1ad3      	subs	r3, r2, r3
 800573c:	b29a      	uxth	r2, r3
 800573e:	68fb      	ldr	r3, [r7, #12]
 8005740:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	2b00      	cmp	r3, #0
 800574c:	d106      	bne.n	800575c <pbuf_realloc+0x70>
 800574e:	4b26      	ldr	r3, [pc, #152]	; (80057e8 <pbuf_realloc+0xfc>)
 8005750:	f240 12af 	movw	r2, #431	; 0x1af
 8005754:	4927      	ldr	r1, [pc, #156]	; (80057f4 <pbuf_realloc+0x108>)
 8005756:	4826      	ldr	r0, [pc, #152]	; (80057f0 <pbuf_realloc+0x104>)
 8005758:	f008 ffe2 	bl	800e720 <iprintf>
  while (rem_len > q->len) {
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	895b      	ldrh	r3, [r3, #10]
 8005760:	897a      	ldrh	r2, [r7, #10]
 8005762:	429a      	cmp	r2, r3
 8005764:	d8e1      	bhi.n	800572a <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	7b1b      	ldrb	r3, [r3, #12]
 800576a:	f003 030f 	and.w	r3, r3, #15
 800576e:	2b00      	cmp	r3, #0
 8005770:	d121      	bne.n	80057b6 <pbuf_realloc+0xca>
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	895b      	ldrh	r3, [r3, #10]
 8005776:	897a      	ldrh	r2, [r7, #10]
 8005778:	429a      	cmp	r2, r3
 800577a:	d01c      	beq.n	80057b6 <pbuf_realloc+0xca>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 800577c:	68fb      	ldr	r3, [r7, #12]
 800577e:	7b5b      	ldrb	r3, [r3, #13]
 8005780:	f003 0302 	and.w	r3, r3, #2
 8005784:	2b00      	cmp	r3, #0
 8005786:	d116      	bne.n	80057b6 <pbuf_realloc+0xca>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	685a      	ldr	r2, [r3, #4]
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	1ad3      	subs	r3, r2, r3
 8005790:	b29a      	uxth	r2, r3
 8005792:	897b      	ldrh	r3, [r7, #10]
 8005794:	4413      	add	r3, r2
 8005796:	b29b      	uxth	r3, r3
 8005798:	4619      	mov	r1, r3
 800579a:	68f8      	ldr	r0, [r7, #12]
 800579c:	f7fe ffba 	bl	8004714 <mem_trim>
 80057a0:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 80057a2:	68fb      	ldr	r3, [r7, #12]
 80057a4:	2b00      	cmp	r3, #0
 80057a6:	d106      	bne.n	80057b6 <pbuf_realloc+0xca>
 80057a8:	4b0f      	ldr	r3, [pc, #60]	; (80057e8 <pbuf_realloc+0xfc>)
 80057aa:	f240 12bd 	movw	r2, #445	; 0x1bd
 80057ae:	4912      	ldr	r1, [pc, #72]	; (80057f8 <pbuf_realloc+0x10c>)
 80057b0:	480f      	ldr	r0, [pc, #60]	; (80057f0 <pbuf_realloc+0x104>)
 80057b2:	f008 ffb5 	bl	800e720 <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	897a      	ldrh	r2, [r7, #10]
 80057ba:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	895a      	ldrh	r2, [r3, #10]
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	2b00      	cmp	r3, #0
 80057ca:	d004      	beq.n	80057d6 <pbuf_realloc+0xea>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	4618      	mov	r0, r3
 80057d2:	f000 f911 	bl	80059f8 <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	2200      	movs	r2, #0
 80057da:	601a      	str	r2, [r3, #0]
 80057dc:	e000      	b.n	80057e0 <pbuf_realloc+0xf4>
    return;
 80057de:	bf00      	nop

}
 80057e0:	3710      	adds	r7, #16
 80057e2:	46bd      	mov	sp, r7
 80057e4:	bd80      	pop	{r7, pc}
 80057e6:	bf00      	nop
 80057e8:	0800ff9c 	.word	0x0800ff9c
 80057ec:	080100b4 	.word	0x080100b4
 80057f0:	0800fffc 	.word	0x0800fffc
 80057f4:	080100cc 	.word	0x080100cc
 80057f8:	080100e4 	.word	0x080100e4

080057fc <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 80057fc:	b580      	push	{r7, lr}
 80057fe:	b086      	sub	sp, #24
 8005800:	af00      	add	r7, sp, #0
 8005802:	60f8      	str	r0, [r7, #12]
 8005804:	60b9      	str	r1, [r7, #8]
 8005806:	4613      	mov	r3, r2
 8005808:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	2b00      	cmp	r3, #0
 800580e:	d106      	bne.n	800581e <pbuf_add_header_impl+0x22>
 8005810:	4b2b      	ldr	r3, [pc, #172]	; (80058c0 <pbuf_add_header_impl+0xc4>)
 8005812:	f240 12df 	movw	r2, #479	; 0x1df
 8005816:	492b      	ldr	r1, [pc, #172]	; (80058c4 <pbuf_add_header_impl+0xc8>)
 8005818:	482b      	ldr	r0, [pc, #172]	; (80058c8 <pbuf_add_header_impl+0xcc>)
 800581a:	f008 ff81 	bl	800e720 <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	2b00      	cmp	r3, #0
 8005822:	d003      	beq.n	800582c <pbuf_add_header_impl+0x30>
 8005824:	68bb      	ldr	r3, [r7, #8]
 8005826:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800582a:	d301      	bcc.n	8005830 <pbuf_add_header_impl+0x34>
    return 1;
 800582c:	2301      	movs	r3, #1
 800582e:	e043      	b.n	80058b8 <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 8005830:	68bb      	ldr	r3, [r7, #8]
 8005832:	2b00      	cmp	r3, #0
 8005834:	d101      	bne.n	800583a <pbuf_add_header_impl+0x3e>
    return 0;
 8005836:	2300      	movs	r3, #0
 8005838:	e03e      	b.n	80058b8 <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 800583a:	68bb      	ldr	r3, [r7, #8]
 800583c:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 800583e:	68fb      	ldr	r3, [r7, #12]
 8005840:	891a      	ldrh	r2, [r3, #8]
 8005842:	8a7b      	ldrh	r3, [r7, #18]
 8005844:	4413      	add	r3, r2
 8005846:	b29b      	uxth	r3, r3
 8005848:	8a7a      	ldrh	r2, [r7, #18]
 800584a:	429a      	cmp	r2, r3
 800584c:	d901      	bls.n	8005852 <pbuf_add_header_impl+0x56>
    return 1;
 800584e:	2301      	movs	r3, #1
 8005850:	e032      	b.n	80058b8 <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	7b1b      	ldrb	r3, [r3, #12]
 8005856:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 8005858:	8a3b      	ldrh	r3, [r7, #16]
 800585a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800585e:	2b00      	cmp	r3, #0
 8005860:	d00c      	beq.n	800587c <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	685a      	ldr	r2, [r3, #4]
 8005866:	68bb      	ldr	r3, [r7, #8]
 8005868:	425b      	negs	r3, r3
 800586a:	4413      	add	r3, r2
 800586c:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	3310      	adds	r3, #16
 8005872:	697a      	ldr	r2, [r7, #20]
 8005874:	429a      	cmp	r2, r3
 8005876:	d20d      	bcs.n	8005894 <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 8005878:	2301      	movs	r3, #1
 800587a:	e01d      	b.n	80058b8 <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 800587c:	79fb      	ldrb	r3, [r7, #7]
 800587e:	2b00      	cmp	r3, #0
 8005880:	d006      	beq.n	8005890 <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 8005882:	68fb      	ldr	r3, [r7, #12]
 8005884:	685a      	ldr	r2, [r3, #4]
 8005886:	68bb      	ldr	r3, [r7, #8]
 8005888:	425b      	negs	r3, r3
 800588a:	4413      	add	r3, r2
 800588c:	617b      	str	r3, [r7, #20]
 800588e:	e001      	b.n	8005894 <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 8005890:	2301      	movs	r3, #1
 8005892:	e011      	b.n	80058b8 <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	697a      	ldr	r2, [r7, #20]
 8005898:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 800589a:	68fb      	ldr	r3, [r7, #12]
 800589c:	895a      	ldrh	r2, [r3, #10]
 800589e:	8a7b      	ldrh	r3, [r7, #18]
 80058a0:	4413      	add	r3, r2
 80058a2:	b29a      	uxth	r2, r3
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 80058a8:	68fb      	ldr	r3, [r7, #12]
 80058aa:	891a      	ldrh	r2, [r3, #8]
 80058ac:	8a7b      	ldrh	r3, [r7, #18]
 80058ae:	4413      	add	r3, r2
 80058b0:	b29a      	uxth	r2, r3
 80058b2:	68fb      	ldr	r3, [r7, #12]
 80058b4:	811a      	strh	r2, [r3, #8]


  return 0;
 80058b6:	2300      	movs	r3, #0
}
 80058b8:	4618      	mov	r0, r3
 80058ba:	3718      	adds	r7, #24
 80058bc:	46bd      	mov	sp, r7
 80058be:	bd80      	pop	{r7, pc}
 80058c0:	0800ff9c 	.word	0x0800ff9c
 80058c4:	08010100 	.word	0x08010100
 80058c8:	0800fffc 	.word	0x0800fffc

080058cc <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 80058cc:	b580      	push	{r7, lr}
 80058ce:	b082      	sub	sp, #8
 80058d0:	af00      	add	r7, sp, #0
 80058d2:	6078      	str	r0, [r7, #4]
 80058d4:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 80058d6:	2200      	movs	r2, #0
 80058d8:	6839      	ldr	r1, [r7, #0]
 80058da:	6878      	ldr	r0, [r7, #4]
 80058dc:	f7ff ff8e 	bl	80057fc <pbuf_add_header_impl>
 80058e0:	4603      	mov	r3, r0
}
 80058e2:	4618      	mov	r0, r3
 80058e4:	3708      	adds	r7, #8
 80058e6:	46bd      	mov	sp, r7
 80058e8:	bd80      	pop	{r7, pc}
	...

080058ec <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 80058ec:	b580      	push	{r7, lr}
 80058ee:	b084      	sub	sp, #16
 80058f0:	af00      	add	r7, sp, #0
 80058f2:	6078      	str	r0, [r7, #4]
 80058f4:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	2b00      	cmp	r3, #0
 80058fa:	d106      	bne.n	800590a <pbuf_remove_header+0x1e>
 80058fc:	4b20      	ldr	r3, [pc, #128]	; (8005980 <pbuf_remove_header+0x94>)
 80058fe:	f240 224b 	movw	r2, #587	; 0x24b
 8005902:	4920      	ldr	r1, [pc, #128]	; (8005984 <pbuf_remove_header+0x98>)
 8005904:	4820      	ldr	r0, [pc, #128]	; (8005988 <pbuf_remove_header+0x9c>)
 8005906:	f008 ff0b 	bl	800e720 <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	2b00      	cmp	r3, #0
 800590e:	d003      	beq.n	8005918 <pbuf_remove_header+0x2c>
 8005910:	683b      	ldr	r3, [r7, #0]
 8005912:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005916:	d301      	bcc.n	800591c <pbuf_remove_header+0x30>
    return 1;
 8005918:	2301      	movs	r3, #1
 800591a:	e02c      	b.n	8005976 <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 800591c:	683b      	ldr	r3, [r7, #0]
 800591e:	2b00      	cmp	r3, #0
 8005920:	d101      	bne.n	8005926 <pbuf_remove_header+0x3a>
    return 0;
 8005922:	2300      	movs	r3, #0
 8005924:	e027      	b.n	8005976 <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 8005926:	683b      	ldr	r3, [r7, #0]
 8005928:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	895b      	ldrh	r3, [r3, #10]
 800592e:	89fa      	ldrh	r2, [r7, #14]
 8005930:	429a      	cmp	r2, r3
 8005932:	d908      	bls.n	8005946 <pbuf_remove_header+0x5a>
 8005934:	4b12      	ldr	r3, [pc, #72]	; (8005980 <pbuf_remove_header+0x94>)
 8005936:	f240 2255 	movw	r2, #597	; 0x255
 800593a:	4914      	ldr	r1, [pc, #80]	; (800598c <pbuf_remove_header+0xa0>)
 800593c:	4812      	ldr	r0, [pc, #72]	; (8005988 <pbuf_remove_header+0x9c>)
 800593e:	f008 feef 	bl	800e720 <iprintf>
 8005942:	2301      	movs	r3, #1
 8005944:	e017      	b.n	8005976 <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	685b      	ldr	r3, [r3, #4]
 800594a:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	685a      	ldr	r2, [r3, #4]
 8005950:	683b      	ldr	r3, [r7, #0]
 8005952:	441a      	add	r2, r3
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	895a      	ldrh	r2, [r3, #10]
 800595c:	89fb      	ldrh	r3, [r7, #14]
 800595e:	1ad3      	subs	r3, r2, r3
 8005960:	b29a      	uxth	r2, r3
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	891a      	ldrh	r2, [r3, #8]
 800596a:	89fb      	ldrh	r3, [r7, #14]
 800596c:	1ad3      	subs	r3, r2, r3
 800596e:	b29a      	uxth	r2, r3
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 8005974:	2300      	movs	r3, #0
}
 8005976:	4618      	mov	r0, r3
 8005978:	3710      	adds	r7, #16
 800597a:	46bd      	mov	sp, r7
 800597c:	bd80      	pop	{r7, pc}
 800597e:	bf00      	nop
 8005980:	0800ff9c 	.word	0x0800ff9c
 8005984:	08010100 	.word	0x08010100
 8005988:	0800fffc 	.word	0x0800fffc
 800598c:	0801010c 	.word	0x0801010c

08005990 <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 8005990:	b580      	push	{r7, lr}
 8005992:	b082      	sub	sp, #8
 8005994:	af00      	add	r7, sp, #0
 8005996:	6078      	str	r0, [r7, #4]
 8005998:	460b      	mov	r3, r1
 800599a:	807b      	strh	r3, [r7, #2]
 800599c:	4613      	mov	r3, r2
 800599e:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 80059a0:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80059a4:	2b00      	cmp	r3, #0
 80059a6:	da08      	bge.n	80059ba <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 80059a8:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80059ac:	425b      	negs	r3, r3
 80059ae:	4619      	mov	r1, r3
 80059b0:	6878      	ldr	r0, [r7, #4]
 80059b2:	f7ff ff9b 	bl	80058ec <pbuf_remove_header>
 80059b6:	4603      	mov	r3, r0
 80059b8:	e007      	b.n	80059ca <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 80059ba:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80059be:	787a      	ldrb	r2, [r7, #1]
 80059c0:	4619      	mov	r1, r3
 80059c2:	6878      	ldr	r0, [r7, #4]
 80059c4:	f7ff ff1a 	bl	80057fc <pbuf_add_header_impl>
 80059c8:	4603      	mov	r3, r0
  }
}
 80059ca:	4618      	mov	r0, r3
 80059cc:	3708      	adds	r7, #8
 80059ce:	46bd      	mov	sp, r7
 80059d0:	bd80      	pop	{r7, pc}

080059d2 <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 80059d2:	b580      	push	{r7, lr}
 80059d4:	b082      	sub	sp, #8
 80059d6:	af00      	add	r7, sp, #0
 80059d8:	6078      	str	r0, [r7, #4]
 80059da:	460b      	mov	r3, r1
 80059dc:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 80059de:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80059e2:	2201      	movs	r2, #1
 80059e4:	4619      	mov	r1, r3
 80059e6:	6878      	ldr	r0, [r7, #4]
 80059e8:	f7ff ffd2 	bl	8005990 <pbuf_header_impl>
 80059ec:	4603      	mov	r3, r0
}
 80059ee:	4618      	mov	r0, r3
 80059f0:	3708      	adds	r7, #8
 80059f2:	46bd      	mov	sp, r7
 80059f4:	bd80      	pop	{r7, pc}
	...

080059f8 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 80059f8:	b580      	push	{r7, lr}
 80059fa:	b086      	sub	sp, #24
 80059fc:	af00      	add	r7, sp, #0
 80059fe:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	2b00      	cmp	r3, #0
 8005a04:	d10b      	bne.n	8005a1e <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	2b00      	cmp	r3, #0
 8005a0a:	d106      	bne.n	8005a1a <pbuf_free+0x22>
 8005a0c:	4b38      	ldr	r3, [pc, #224]	; (8005af0 <pbuf_free+0xf8>)
 8005a0e:	f44f 7237 	mov.w	r2, #732	; 0x2dc
 8005a12:	4938      	ldr	r1, [pc, #224]	; (8005af4 <pbuf_free+0xfc>)
 8005a14:	4838      	ldr	r0, [pc, #224]	; (8005af8 <pbuf_free+0x100>)
 8005a16:	f008 fe83 	bl	800e720 <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 8005a1a:	2300      	movs	r3, #0
 8005a1c:	e063      	b.n	8005ae6 <pbuf_free+0xee>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 8005a1e:	2300      	movs	r3, #0
 8005a20:	75fb      	strb	r3, [r7, #23]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 8005a22:	e05c      	b.n	8005ade <pbuf_free+0xe6>
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	7b9b      	ldrb	r3, [r3, #14]
 8005a28:	2b00      	cmp	r3, #0
 8005a2a:	d106      	bne.n	8005a3a <pbuf_free+0x42>
 8005a2c:	4b30      	ldr	r3, [pc, #192]	; (8005af0 <pbuf_free+0xf8>)
 8005a2e:	f240 22f1 	movw	r2, #753	; 0x2f1
 8005a32:	4932      	ldr	r1, [pc, #200]	; (8005afc <pbuf_free+0x104>)
 8005a34:	4830      	ldr	r0, [pc, #192]	; (8005af8 <pbuf_free+0x100>)
 8005a36:	f008 fe73 	bl	800e720 <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	7b9b      	ldrb	r3, [r3, #14]
 8005a3e:	3b01      	subs	r3, #1
 8005a40:	b2da      	uxtb	r2, r3
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	739a      	strb	r2, [r3, #14]
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	7b9b      	ldrb	r3, [r3, #14]
 8005a4a:	75bb      	strb	r3, [r7, #22]
    SYS_ARCH_UNPROTECT(old_level);
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 8005a4c:	7dbb      	ldrb	r3, [r7, #22]
 8005a4e:	2b00      	cmp	r3, #0
 8005a50:	d143      	bne.n	8005ada <pbuf_free+0xe2>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	7b1b      	ldrb	r3, [r3, #12]
 8005a5c:	f003 030f 	and.w	r3, r3, #15
 8005a60:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	7b5b      	ldrb	r3, [r3, #13]
 8005a66:	f003 0302 	and.w	r3, r3, #2
 8005a6a:	2b00      	cmp	r3, #0
 8005a6c:	d011      	beq.n	8005a92 <pbuf_free+0x9a>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 8005a72:	68bb      	ldr	r3, [r7, #8]
 8005a74:	691b      	ldr	r3, [r3, #16]
 8005a76:	2b00      	cmp	r3, #0
 8005a78:	d106      	bne.n	8005a88 <pbuf_free+0x90>
 8005a7a:	4b1d      	ldr	r3, [pc, #116]	; (8005af0 <pbuf_free+0xf8>)
 8005a7c:	f240 22ff 	movw	r2, #767	; 0x2ff
 8005a80:	491f      	ldr	r1, [pc, #124]	; (8005b00 <pbuf_free+0x108>)
 8005a82:	481d      	ldr	r0, [pc, #116]	; (8005af8 <pbuf_free+0x100>)
 8005a84:	f008 fe4c 	bl	800e720 <iprintf>
        pc->custom_free_function(p);
 8005a88:	68bb      	ldr	r3, [r7, #8]
 8005a8a:	691b      	ldr	r3, [r3, #16]
 8005a8c:	6878      	ldr	r0, [r7, #4]
 8005a8e:	4798      	blx	r3
 8005a90:	e01d      	b.n	8005ace <pbuf_free+0xd6>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 8005a92:	7bfb      	ldrb	r3, [r7, #15]
 8005a94:	2b02      	cmp	r3, #2
 8005a96:	d104      	bne.n	8005aa2 <pbuf_free+0xaa>
          memp_free(MEMP_PBUF_POOL, p);
 8005a98:	6879      	ldr	r1, [r7, #4]
 8005a9a:	2008      	movs	r0, #8
 8005a9c:	f7ff f936 	bl	8004d0c <memp_free>
 8005aa0:	e015      	b.n	8005ace <pbuf_free+0xd6>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 8005aa2:	7bfb      	ldrb	r3, [r7, #15]
 8005aa4:	2b01      	cmp	r3, #1
 8005aa6:	d104      	bne.n	8005ab2 <pbuf_free+0xba>
          memp_free(MEMP_PBUF, p);
 8005aa8:	6879      	ldr	r1, [r7, #4]
 8005aaa:	2007      	movs	r0, #7
 8005aac:	f7ff f92e 	bl	8004d0c <memp_free>
 8005ab0:	e00d      	b.n	8005ace <pbuf_free+0xd6>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 8005ab2:	7bfb      	ldrb	r3, [r7, #15]
 8005ab4:	2b00      	cmp	r3, #0
 8005ab6:	d103      	bne.n	8005ac0 <pbuf_free+0xc8>
          mem_free(p);
 8005ab8:	6878      	ldr	r0, [r7, #4]
 8005aba:	f7fe fdc1 	bl	8004640 <mem_free>
 8005abe:	e006      	b.n	8005ace <pbuf_free+0xd6>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 8005ac0:	4b0b      	ldr	r3, [pc, #44]	; (8005af0 <pbuf_free+0xf8>)
 8005ac2:	f240 320f 	movw	r2, #783	; 0x30f
 8005ac6:	490f      	ldr	r1, [pc, #60]	; (8005b04 <pbuf_free+0x10c>)
 8005ac8:	480b      	ldr	r0, [pc, #44]	; (8005af8 <pbuf_free+0x100>)
 8005aca:	f008 fe29 	bl	800e720 <iprintf>
        }
      }
      count++;
 8005ace:	7dfb      	ldrb	r3, [r7, #23]
 8005ad0:	3301      	adds	r3, #1
 8005ad2:	75fb      	strb	r3, [r7, #23]
      /* proceed to next pbuf */
      p = q;
 8005ad4:	693b      	ldr	r3, [r7, #16]
 8005ad6:	607b      	str	r3, [r7, #4]
 8005ad8:	e001      	b.n	8005ade <pbuf_free+0xe6>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 8005ada:	2300      	movs	r3, #0
 8005adc:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	2b00      	cmp	r3, #0
 8005ae2:	d19f      	bne.n	8005a24 <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 8005ae4:	7dfb      	ldrb	r3, [r7, #23]
}
 8005ae6:	4618      	mov	r0, r3
 8005ae8:	3718      	adds	r7, #24
 8005aea:	46bd      	mov	sp, r7
 8005aec:	bd80      	pop	{r7, pc}
 8005aee:	bf00      	nop
 8005af0:	0800ff9c 	.word	0x0800ff9c
 8005af4:	08010100 	.word	0x08010100
 8005af8:	0800fffc 	.word	0x0800fffc
 8005afc:	0801012c 	.word	0x0801012c
 8005b00:	08010144 	.word	0x08010144
 8005b04:	08010168 	.word	0x08010168

08005b08 <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 8005b08:	b480      	push	{r7}
 8005b0a:	b085      	sub	sp, #20
 8005b0c:	af00      	add	r7, sp, #0
 8005b0e:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 8005b10:	2300      	movs	r3, #0
 8005b12:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 8005b14:	e005      	b.n	8005b22 <pbuf_clen+0x1a>
    ++len;
 8005b16:	89fb      	ldrh	r3, [r7, #14]
 8005b18:	3301      	adds	r3, #1
 8005b1a:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	2b00      	cmp	r3, #0
 8005b26:	d1f6      	bne.n	8005b16 <pbuf_clen+0xe>
  }
  return len;
 8005b28:	89fb      	ldrh	r3, [r7, #14]
}
 8005b2a:	4618      	mov	r0, r3
 8005b2c:	3714      	adds	r7, #20
 8005b2e:	46bd      	mov	sp, r7
 8005b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b34:	4770      	bx	lr
	...

08005b38 <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 8005b38:	b580      	push	{r7, lr}
 8005b3a:	b082      	sub	sp, #8
 8005b3c:	af00      	add	r7, sp, #0
 8005b3e:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	2b00      	cmp	r3, #0
 8005b44:	d010      	beq.n	8005b68 <pbuf_ref+0x30>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	7b9b      	ldrb	r3, [r3, #14]
 8005b4a:	3301      	adds	r3, #1
 8005b4c:	b2da      	uxtb	r2, r3
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	739a      	strb	r2, [r3, #14]
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	7b9b      	ldrb	r3, [r3, #14]
 8005b56:	2b00      	cmp	r3, #0
 8005b58:	d106      	bne.n	8005b68 <pbuf_ref+0x30>
 8005b5a:	4b05      	ldr	r3, [pc, #20]	; (8005b70 <pbuf_ref+0x38>)
 8005b5c:	f240 3242 	movw	r2, #834	; 0x342
 8005b60:	4904      	ldr	r1, [pc, #16]	; (8005b74 <pbuf_ref+0x3c>)
 8005b62:	4805      	ldr	r0, [pc, #20]	; (8005b78 <pbuf_ref+0x40>)
 8005b64:	f008 fddc 	bl	800e720 <iprintf>
  }
}
 8005b68:	bf00      	nop
 8005b6a:	3708      	adds	r7, #8
 8005b6c:	46bd      	mov	sp, r7
 8005b6e:	bd80      	pop	{r7, pc}
 8005b70:	0800ff9c 	.word	0x0800ff9c
 8005b74:	0801017c 	.word	0x0801017c
 8005b78:	0800fffc 	.word	0x0800fffc

08005b7c <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 8005b7c:	b580      	push	{r7, lr}
 8005b7e:	b084      	sub	sp, #16
 8005b80:	af00      	add	r7, sp, #0
 8005b82:	6078      	str	r0, [r7, #4]
 8005b84:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	2b00      	cmp	r3, #0
 8005b8a:	d002      	beq.n	8005b92 <pbuf_cat+0x16>
 8005b8c:	683b      	ldr	r3, [r7, #0]
 8005b8e:	2b00      	cmp	r3, #0
 8005b90:	d107      	bne.n	8005ba2 <pbuf_cat+0x26>
 8005b92:	4b20      	ldr	r3, [pc, #128]	; (8005c14 <pbuf_cat+0x98>)
 8005b94:	f240 3259 	movw	r2, #857	; 0x359
 8005b98:	491f      	ldr	r1, [pc, #124]	; (8005c18 <pbuf_cat+0x9c>)
 8005b9a:	4820      	ldr	r0, [pc, #128]	; (8005c1c <pbuf_cat+0xa0>)
 8005b9c:	f008 fdc0 	bl	800e720 <iprintf>
 8005ba0:	e034      	b.n	8005c0c <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	60fb      	str	r3, [r7, #12]
 8005ba6:	e00a      	b.n	8005bbe <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	891a      	ldrh	r2, [r3, #8]
 8005bac:	683b      	ldr	r3, [r7, #0]
 8005bae:	891b      	ldrh	r3, [r3, #8]
 8005bb0:	4413      	add	r3, r2
 8005bb2:	b29a      	uxth	r2, r3
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	60fb      	str	r3, [r7, #12]
 8005bbe:	68fb      	ldr	r3, [r7, #12]
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	2b00      	cmp	r3, #0
 8005bc4:	d1f0      	bne.n	8005ba8 <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 8005bc6:	68fb      	ldr	r3, [r7, #12]
 8005bc8:	891a      	ldrh	r2, [r3, #8]
 8005bca:	68fb      	ldr	r3, [r7, #12]
 8005bcc:	895b      	ldrh	r3, [r3, #10]
 8005bce:	429a      	cmp	r2, r3
 8005bd0:	d006      	beq.n	8005be0 <pbuf_cat+0x64>
 8005bd2:	4b10      	ldr	r3, [pc, #64]	; (8005c14 <pbuf_cat+0x98>)
 8005bd4:	f240 3262 	movw	r2, #866	; 0x362
 8005bd8:	4911      	ldr	r1, [pc, #68]	; (8005c20 <pbuf_cat+0xa4>)
 8005bda:	4810      	ldr	r0, [pc, #64]	; (8005c1c <pbuf_cat+0xa0>)
 8005bdc:	f008 fda0 	bl	800e720 <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	2b00      	cmp	r3, #0
 8005be6:	d006      	beq.n	8005bf6 <pbuf_cat+0x7a>
 8005be8:	4b0a      	ldr	r3, [pc, #40]	; (8005c14 <pbuf_cat+0x98>)
 8005bea:	f240 3263 	movw	r2, #867	; 0x363
 8005bee:	490d      	ldr	r1, [pc, #52]	; (8005c24 <pbuf_cat+0xa8>)
 8005bf0:	480a      	ldr	r0, [pc, #40]	; (8005c1c <pbuf_cat+0xa0>)
 8005bf2:	f008 fd95 	bl	800e720 <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 8005bf6:	68fb      	ldr	r3, [r7, #12]
 8005bf8:	891a      	ldrh	r2, [r3, #8]
 8005bfa:	683b      	ldr	r3, [r7, #0]
 8005bfc:	891b      	ldrh	r3, [r3, #8]
 8005bfe:	4413      	add	r3, r2
 8005c00:	b29a      	uxth	r2, r3
 8005c02:	68fb      	ldr	r3, [r7, #12]
 8005c04:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 8005c06:	68fb      	ldr	r3, [r7, #12]
 8005c08:	683a      	ldr	r2, [r7, #0]
 8005c0a:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 8005c0c:	3710      	adds	r7, #16
 8005c0e:	46bd      	mov	sp, r7
 8005c10:	bd80      	pop	{r7, pc}
 8005c12:	bf00      	nop
 8005c14:	0800ff9c 	.word	0x0800ff9c
 8005c18:	08010190 	.word	0x08010190
 8005c1c:	0800fffc 	.word	0x0800fffc
 8005c20:	080101c8 	.word	0x080101c8
 8005c24:	080101f8 	.word	0x080101f8

08005c28 <pbuf_chain>:
 * The ->ref field of the first pbuf of the tail chain is adjusted.
 *
 */
void
pbuf_chain(struct pbuf *h, struct pbuf *t)
{
 8005c28:	b580      	push	{r7, lr}
 8005c2a:	b082      	sub	sp, #8
 8005c2c:	af00      	add	r7, sp, #0
 8005c2e:	6078      	str	r0, [r7, #4]
 8005c30:	6039      	str	r1, [r7, #0]
  pbuf_cat(h, t);
 8005c32:	6839      	ldr	r1, [r7, #0]
 8005c34:	6878      	ldr	r0, [r7, #4]
 8005c36:	f7ff ffa1 	bl	8005b7c <pbuf_cat>
  /* t is now referenced by h */
  pbuf_ref(t);
 8005c3a:	6838      	ldr	r0, [r7, #0]
 8005c3c:	f7ff ff7c 	bl	8005b38 <pbuf_ref>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_chain: %p references %p\n", (void *)h, (void *)t));
}
 8005c40:	bf00      	nop
 8005c42:	3708      	adds	r7, #8
 8005c44:	46bd      	mov	sp, r7
 8005c46:	bd80      	pop	{r7, pc}

08005c48 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 8005c48:	b580      	push	{r7, lr}
 8005c4a:	b086      	sub	sp, #24
 8005c4c:	af00      	add	r7, sp, #0
 8005c4e:	6078      	str	r0, [r7, #4]
 8005c50:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 8005c52:	2300      	movs	r3, #0
 8005c54:	617b      	str	r3, [r7, #20]
 8005c56:	2300      	movs	r3, #0
 8005c58:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	2b00      	cmp	r3, #0
 8005c5e:	d008      	beq.n	8005c72 <pbuf_copy+0x2a>
 8005c60:	683b      	ldr	r3, [r7, #0]
 8005c62:	2b00      	cmp	r3, #0
 8005c64:	d005      	beq.n	8005c72 <pbuf_copy+0x2a>
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	891a      	ldrh	r2, [r3, #8]
 8005c6a:	683b      	ldr	r3, [r7, #0]
 8005c6c:	891b      	ldrh	r3, [r3, #8]
 8005c6e:	429a      	cmp	r2, r3
 8005c70:	d209      	bcs.n	8005c86 <pbuf_copy+0x3e>
 8005c72:	4b57      	ldr	r3, [pc, #348]	; (8005dd0 <pbuf_copy+0x188>)
 8005c74:	f240 32c9 	movw	r2, #969	; 0x3c9
 8005c78:	4956      	ldr	r1, [pc, #344]	; (8005dd4 <pbuf_copy+0x18c>)
 8005c7a:	4857      	ldr	r0, [pc, #348]	; (8005dd8 <pbuf_copy+0x190>)
 8005c7c:	f008 fd50 	bl	800e720 <iprintf>
 8005c80:	f06f 030f 	mvn.w	r3, #15
 8005c84:	e09f      	b.n	8005dc6 <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	895b      	ldrh	r3, [r3, #10]
 8005c8a:	461a      	mov	r2, r3
 8005c8c:	697b      	ldr	r3, [r7, #20]
 8005c8e:	1ad2      	subs	r2, r2, r3
 8005c90:	683b      	ldr	r3, [r7, #0]
 8005c92:	895b      	ldrh	r3, [r3, #10]
 8005c94:	4619      	mov	r1, r3
 8005c96:	693b      	ldr	r3, [r7, #16]
 8005c98:	1acb      	subs	r3, r1, r3
 8005c9a:	429a      	cmp	r2, r3
 8005c9c:	d306      	bcc.n	8005cac <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 8005c9e:	683b      	ldr	r3, [r7, #0]
 8005ca0:	895b      	ldrh	r3, [r3, #10]
 8005ca2:	461a      	mov	r2, r3
 8005ca4:	693b      	ldr	r3, [r7, #16]
 8005ca6:	1ad3      	subs	r3, r2, r3
 8005ca8:	60fb      	str	r3, [r7, #12]
 8005caa:	e005      	b.n	8005cb8 <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	895b      	ldrh	r3, [r3, #10]
 8005cb0:	461a      	mov	r2, r3
 8005cb2:	697b      	ldr	r3, [r7, #20]
 8005cb4:	1ad3      	subs	r3, r2, r3
 8005cb6:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	685a      	ldr	r2, [r3, #4]
 8005cbc:	697b      	ldr	r3, [r7, #20]
 8005cbe:	18d0      	adds	r0, r2, r3
 8005cc0:	683b      	ldr	r3, [r7, #0]
 8005cc2:	685a      	ldr	r2, [r3, #4]
 8005cc4:	693b      	ldr	r3, [r7, #16]
 8005cc6:	4413      	add	r3, r2
 8005cc8:	68fa      	ldr	r2, [r7, #12]
 8005cca:	4619      	mov	r1, r3
 8005ccc:	f008 ff2c 	bl	800eb28 <memcpy>
    offset_to += len;
 8005cd0:	697a      	ldr	r2, [r7, #20]
 8005cd2:	68fb      	ldr	r3, [r7, #12]
 8005cd4:	4413      	add	r3, r2
 8005cd6:	617b      	str	r3, [r7, #20]
    offset_from += len;
 8005cd8:	693a      	ldr	r2, [r7, #16]
 8005cda:	68fb      	ldr	r3, [r7, #12]
 8005cdc:	4413      	add	r3, r2
 8005cde:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	895b      	ldrh	r3, [r3, #10]
 8005ce4:	461a      	mov	r2, r3
 8005ce6:	697b      	ldr	r3, [r7, #20]
 8005ce8:	4293      	cmp	r3, r2
 8005cea:	d906      	bls.n	8005cfa <pbuf_copy+0xb2>
 8005cec:	4b38      	ldr	r3, [pc, #224]	; (8005dd0 <pbuf_copy+0x188>)
 8005cee:	f240 32d9 	movw	r2, #985	; 0x3d9
 8005cf2:	493a      	ldr	r1, [pc, #232]	; (8005ddc <pbuf_copy+0x194>)
 8005cf4:	4838      	ldr	r0, [pc, #224]	; (8005dd8 <pbuf_copy+0x190>)
 8005cf6:	f008 fd13 	bl	800e720 <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 8005cfa:	683b      	ldr	r3, [r7, #0]
 8005cfc:	895b      	ldrh	r3, [r3, #10]
 8005cfe:	461a      	mov	r2, r3
 8005d00:	693b      	ldr	r3, [r7, #16]
 8005d02:	4293      	cmp	r3, r2
 8005d04:	d906      	bls.n	8005d14 <pbuf_copy+0xcc>
 8005d06:	4b32      	ldr	r3, [pc, #200]	; (8005dd0 <pbuf_copy+0x188>)
 8005d08:	f240 32da 	movw	r2, #986	; 0x3da
 8005d0c:	4934      	ldr	r1, [pc, #208]	; (8005de0 <pbuf_copy+0x198>)
 8005d0e:	4832      	ldr	r0, [pc, #200]	; (8005dd8 <pbuf_copy+0x190>)
 8005d10:	f008 fd06 	bl	800e720 <iprintf>
    if (offset_from >= p_from->len) {
 8005d14:	683b      	ldr	r3, [r7, #0]
 8005d16:	895b      	ldrh	r3, [r3, #10]
 8005d18:	461a      	mov	r2, r3
 8005d1a:	693b      	ldr	r3, [r7, #16]
 8005d1c:	4293      	cmp	r3, r2
 8005d1e:	d304      	bcc.n	8005d2a <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 8005d20:	2300      	movs	r3, #0
 8005d22:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 8005d24:	683b      	ldr	r3, [r7, #0]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	895b      	ldrh	r3, [r3, #10]
 8005d2e:	461a      	mov	r2, r3
 8005d30:	697b      	ldr	r3, [r7, #20]
 8005d32:	4293      	cmp	r3, r2
 8005d34:	d114      	bne.n	8005d60 <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 8005d36:	2300      	movs	r3, #0
 8005d38:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	2b00      	cmp	r3, #0
 8005d44:	d10c      	bne.n	8005d60 <pbuf_copy+0x118>
 8005d46:	683b      	ldr	r3, [r7, #0]
 8005d48:	2b00      	cmp	r3, #0
 8005d4a:	d009      	beq.n	8005d60 <pbuf_copy+0x118>
 8005d4c:	4b20      	ldr	r3, [pc, #128]	; (8005dd0 <pbuf_copy+0x188>)
 8005d4e:	f44f 7279 	mov.w	r2, #996	; 0x3e4
 8005d52:	4924      	ldr	r1, [pc, #144]	; (8005de4 <pbuf_copy+0x19c>)
 8005d54:	4820      	ldr	r0, [pc, #128]	; (8005dd8 <pbuf_copy+0x190>)
 8005d56:	f008 fce3 	bl	800e720 <iprintf>
 8005d5a:	f06f 030f 	mvn.w	r3, #15
 8005d5e:	e032      	b.n	8005dc6 <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 8005d60:	683b      	ldr	r3, [r7, #0]
 8005d62:	2b00      	cmp	r3, #0
 8005d64:	d013      	beq.n	8005d8e <pbuf_copy+0x146>
 8005d66:	683b      	ldr	r3, [r7, #0]
 8005d68:	895a      	ldrh	r2, [r3, #10]
 8005d6a:	683b      	ldr	r3, [r7, #0]
 8005d6c:	891b      	ldrh	r3, [r3, #8]
 8005d6e:	429a      	cmp	r2, r3
 8005d70:	d10d      	bne.n	8005d8e <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 8005d72:	683b      	ldr	r3, [r7, #0]
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	2b00      	cmp	r3, #0
 8005d78:	d009      	beq.n	8005d8e <pbuf_copy+0x146>
 8005d7a:	4b15      	ldr	r3, [pc, #84]	; (8005dd0 <pbuf_copy+0x188>)
 8005d7c:	f240 32e9 	movw	r2, #1001	; 0x3e9
 8005d80:	4919      	ldr	r1, [pc, #100]	; (8005de8 <pbuf_copy+0x1a0>)
 8005d82:	4815      	ldr	r0, [pc, #84]	; (8005dd8 <pbuf_copy+0x190>)
 8005d84:	f008 fccc 	bl	800e720 <iprintf>
 8005d88:	f06f 0305 	mvn.w	r3, #5
 8005d8c:	e01b      	b.n	8005dc6 <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	2b00      	cmp	r3, #0
 8005d92:	d013      	beq.n	8005dbc <pbuf_copy+0x174>
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	895a      	ldrh	r2, [r3, #10]
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	891b      	ldrh	r3, [r3, #8]
 8005d9c:	429a      	cmp	r2, r3
 8005d9e:	d10d      	bne.n	8005dbc <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	2b00      	cmp	r3, #0
 8005da6:	d009      	beq.n	8005dbc <pbuf_copy+0x174>
 8005da8:	4b09      	ldr	r3, [pc, #36]	; (8005dd0 <pbuf_copy+0x188>)
 8005daa:	f240 32ee 	movw	r2, #1006	; 0x3ee
 8005dae:	490e      	ldr	r1, [pc, #56]	; (8005de8 <pbuf_copy+0x1a0>)
 8005db0:	4809      	ldr	r0, [pc, #36]	; (8005dd8 <pbuf_copy+0x190>)
 8005db2:	f008 fcb5 	bl	800e720 <iprintf>
 8005db6:	f06f 0305 	mvn.w	r3, #5
 8005dba:	e004      	b.n	8005dc6 <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 8005dbc:	683b      	ldr	r3, [r7, #0]
 8005dbe:	2b00      	cmp	r3, #0
 8005dc0:	f47f af61 	bne.w	8005c86 <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 8005dc4:	2300      	movs	r3, #0
}
 8005dc6:	4618      	mov	r0, r3
 8005dc8:	3718      	adds	r7, #24
 8005dca:	46bd      	mov	sp, r7
 8005dcc:	bd80      	pop	{r7, pc}
 8005dce:	bf00      	nop
 8005dd0:	0800ff9c 	.word	0x0800ff9c
 8005dd4:	08010244 	.word	0x08010244
 8005dd8:	0800fffc 	.word	0x0800fffc
 8005ddc:	08010274 	.word	0x08010274
 8005de0:	0801028c 	.word	0x0801028c
 8005de4:	080102a8 	.word	0x080102a8
 8005de8:	080102b8 	.word	0x080102b8

08005dec <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 8005dec:	b580      	push	{r7, lr}
 8005dee:	b088      	sub	sp, #32
 8005df0:	af00      	add	r7, sp, #0
 8005df2:	60f8      	str	r0, [r7, #12]
 8005df4:	60b9      	str	r1, [r7, #8]
 8005df6:	4611      	mov	r1, r2
 8005df8:	461a      	mov	r2, r3
 8005dfa:	460b      	mov	r3, r1
 8005dfc:	80fb      	strh	r3, [r7, #6]
 8005dfe:	4613      	mov	r3, r2
 8005e00:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 8005e02:	2300      	movs	r3, #0
 8005e04:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 8005e06:	2300      	movs	r3, #0
 8005e08:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 8005e0a:	68fb      	ldr	r3, [r7, #12]
 8005e0c:	2b00      	cmp	r3, #0
 8005e0e:	d108      	bne.n	8005e22 <pbuf_copy_partial+0x36>
 8005e10:	4b2b      	ldr	r3, [pc, #172]	; (8005ec0 <pbuf_copy_partial+0xd4>)
 8005e12:	f240 420a 	movw	r2, #1034	; 0x40a
 8005e16:	492b      	ldr	r1, [pc, #172]	; (8005ec4 <pbuf_copy_partial+0xd8>)
 8005e18:	482b      	ldr	r0, [pc, #172]	; (8005ec8 <pbuf_copy_partial+0xdc>)
 8005e1a:	f008 fc81 	bl	800e720 <iprintf>
 8005e1e:	2300      	movs	r3, #0
 8005e20:	e04a      	b.n	8005eb8 <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 8005e22:	68bb      	ldr	r3, [r7, #8]
 8005e24:	2b00      	cmp	r3, #0
 8005e26:	d108      	bne.n	8005e3a <pbuf_copy_partial+0x4e>
 8005e28:	4b25      	ldr	r3, [pc, #148]	; (8005ec0 <pbuf_copy_partial+0xd4>)
 8005e2a:	f240 420b 	movw	r2, #1035	; 0x40b
 8005e2e:	4927      	ldr	r1, [pc, #156]	; (8005ecc <pbuf_copy_partial+0xe0>)
 8005e30:	4825      	ldr	r0, [pc, #148]	; (8005ec8 <pbuf_copy_partial+0xdc>)
 8005e32:	f008 fc75 	bl	800e720 <iprintf>
 8005e36:	2300      	movs	r3, #0
 8005e38:	e03e      	b.n	8005eb8 <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 8005e3a:	68fb      	ldr	r3, [r7, #12]
 8005e3c:	61fb      	str	r3, [r7, #28]
 8005e3e:	e034      	b.n	8005eaa <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 8005e40:	88bb      	ldrh	r3, [r7, #4]
 8005e42:	2b00      	cmp	r3, #0
 8005e44:	d00a      	beq.n	8005e5c <pbuf_copy_partial+0x70>
 8005e46:	69fb      	ldr	r3, [r7, #28]
 8005e48:	895b      	ldrh	r3, [r3, #10]
 8005e4a:	88ba      	ldrh	r2, [r7, #4]
 8005e4c:	429a      	cmp	r2, r3
 8005e4e:	d305      	bcc.n	8005e5c <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 8005e50:	69fb      	ldr	r3, [r7, #28]
 8005e52:	895b      	ldrh	r3, [r3, #10]
 8005e54:	88ba      	ldrh	r2, [r7, #4]
 8005e56:	1ad3      	subs	r3, r2, r3
 8005e58:	80bb      	strh	r3, [r7, #4]
 8005e5a:	e023      	b.n	8005ea4 <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 8005e5c:	69fb      	ldr	r3, [r7, #28]
 8005e5e:	895a      	ldrh	r2, [r3, #10]
 8005e60:	88bb      	ldrh	r3, [r7, #4]
 8005e62:	1ad3      	subs	r3, r2, r3
 8005e64:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 8005e66:	8b3a      	ldrh	r2, [r7, #24]
 8005e68:	88fb      	ldrh	r3, [r7, #6]
 8005e6a:	429a      	cmp	r2, r3
 8005e6c:	d901      	bls.n	8005e72 <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 8005e6e:	88fb      	ldrh	r3, [r7, #6]
 8005e70:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 8005e72:	8b7b      	ldrh	r3, [r7, #26]
 8005e74:	68ba      	ldr	r2, [r7, #8]
 8005e76:	18d0      	adds	r0, r2, r3
 8005e78:	69fb      	ldr	r3, [r7, #28]
 8005e7a:	685a      	ldr	r2, [r3, #4]
 8005e7c:	88bb      	ldrh	r3, [r7, #4]
 8005e7e:	4413      	add	r3, r2
 8005e80:	8b3a      	ldrh	r2, [r7, #24]
 8005e82:	4619      	mov	r1, r3
 8005e84:	f008 fe50 	bl	800eb28 <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 8005e88:	8afa      	ldrh	r2, [r7, #22]
 8005e8a:	8b3b      	ldrh	r3, [r7, #24]
 8005e8c:	4413      	add	r3, r2
 8005e8e:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 8005e90:	8b7a      	ldrh	r2, [r7, #26]
 8005e92:	8b3b      	ldrh	r3, [r7, #24]
 8005e94:	4413      	add	r3, r2
 8005e96:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 8005e98:	88fa      	ldrh	r2, [r7, #6]
 8005e9a:	8b3b      	ldrh	r3, [r7, #24]
 8005e9c:	1ad3      	subs	r3, r2, r3
 8005e9e:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 8005ea0:	2300      	movs	r3, #0
 8005ea2:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 8005ea4:	69fb      	ldr	r3, [r7, #28]
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	61fb      	str	r3, [r7, #28]
 8005eaa:	88fb      	ldrh	r3, [r7, #6]
 8005eac:	2b00      	cmp	r3, #0
 8005eae:	d002      	beq.n	8005eb6 <pbuf_copy_partial+0xca>
 8005eb0:	69fb      	ldr	r3, [r7, #28]
 8005eb2:	2b00      	cmp	r3, #0
 8005eb4:	d1c4      	bne.n	8005e40 <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 8005eb6:	8afb      	ldrh	r3, [r7, #22]
}
 8005eb8:	4618      	mov	r0, r3
 8005eba:	3720      	adds	r7, #32
 8005ebc:	46bd      	mov	sp, r7
 8005ebe:	bd80      	pop	{r7, pc}
 8005ec0:	0800ff9c 	.word	0x0800ff9c
 8005ec4:	080102e4 	.word	0x080102e4
 8005ec8:	0800fffc 	.word	0x0800fffc
 8005ecc:	08010304 	.word	0x08010304

08005ed0 <pbuf_take>:
 *
 * @return ERR_OK if successful, ERR_MEM if the pbuf is not big enough
 */
err_t
pbuf_take(struct pbuf *buf, const void *dataptr, u16_t len)
{
 8005ed0:	b580      	push	{r7, lr}
 8005ed2:	b088      	sub	sp, #32
 8005ed4:	af00      	add	r7, sp, #0
 8005ed6:	60f8      	str	r0, [r7, #12]
 8005ed8:	60b9      	str	r1, [r7, #8]
 8005eda:	4613      	mov	r3, r2
 8005edc:	80fb      	strh	r3, [r7, #6]
  struct pbuf *p;
  size_t buf_copy_len;
  size_t total_copy_len = len;
 8005ede:	88fb      	ldrh	r3, [r7, #6]
 8005ee0:	617b      	str	r3, [r7, #20]
  size_t copied_total = 0;
 8005ee2:	2300      	movs	r3, #0
 8005ee4:	613b      	str	r3, [r7, #16]

  LWIP_ERROR("pbuf_take: invalid buf", (buf != NULL), return ERR_ARG;);
 8005ee6:	68fb      	ldr	r3, [r7, #12]
 8005ee8:	2b00      	cmp	r3, #0
 8005eea:	d109      	bne.n	8005f00 <pbuf_take+0x30>
 8005eec:	4b3a      	ldr	r3, [pc, #232]	; (8005fd8 <pbuf_take+0x108>)
 8005eee:	f240 42b3 	movw	r2, #1203	; 0x4b3
 8005ef2:	493a      	ldr	r1, [pc, #232]	; (8005fdc <pbuf_take+0x10c>)
 8005ef4:	483a      	ldr	r0, [pc, #232]	; (8005fe0 <pbuf_take+0x110>)
 8005ef6:	f008 fc13 	bl	800e720 <iprintf>
 8005efa:	f06f 030f 	mvn.w	r3, #15
 8005efe:	e067      	b.n	8005fd0 <pbuf_take+0x100>
  LWIP_ERROR("pbuf_take: invalid dataptr", (dataptr != NULL), return ERR_ARG;);
 8005f00:	68bb      	ldr	r3, [r7, #8]
 8005f02:	2b00      	cmp	r3, #0
 8005f04:	d109      	bne.n	8005f1a <pbuf_take+0x4a>
 8005f06:	4b34      	ldr	r3, [pc, #208]	; (8005fd8 <pbuf_take+0x108>)
 8005f08:	f240 42b4 	movw	r2, #1204	; 0x4b4
 8005f0c:	4935      	ldr	r1, [pc, #212]	; (8005fe4 <pbuf_take+0x114>)
 8005f0e:	4834      	ldr	r0, [pc, #208]	; (8005fe0 <pbuf_take+0x110>)
 8005f10:	f008 fc06 	bl	800e720 <iprintf>
 8005f14:	f06f 030f 	mvn.w	r3, #15
 8005f18:	e05a      	b.n	8005fd0 <pbuf_take+0x100>
  LWIP_ERROR("pbuf_take: buf not large enough", (buf->tot_len >= len), return ERR_MEM;);
 8005f1a:	68fb      	ldr	r3, [r7, #12]
 8005f1c:	891b      	ldrh	r3, [r3, #8]
 8005f1e:	88fa      	ldrh	r2, [r7, #6]
 8005f20:	429a      	cmp	r2, r3
 8005f22:	d909      	bls.n	8005f38 <pbuf_take+0x68>
 8005f24:	4b2c      	ldr	r3, [pc, #176]	; (8005fd8 <pbuf_take+0x108>)
 8005f26:	f240 42b5 	movw	r2, #1205	; 0x4b5
 8005f2a:	492f      	ldr	r1, [pc, #188]	; (8005fe8 <pbuf_take+0x118>)
 8005f2c:	482c      	ldr	r0, [pc, #176]	; (8005fe0 <pbuf_take+0x110>)
 8005f2e:	f008 fbf7 	bl	800e720 <iprintf>
 8005f32:	f04f 33ff 	mov.w	r3, #4294967295
 8005f36:	e04b      	b.n	8005fd0 <pbuf_take+0x100>

  if ((buf == NULL) || (dataptr == NULL) || (buf->tot_len < len)) {
 8005f38:	68fb      	ldr	r3, [r7, #12]
 8005f3a:	2b00      	cmp	r3, #0
 8005f3c:	d007      	beq.n	8005f4e <pbuf_take+0x7e>
 8005f3e:	68bb      	ldr	r3, [r7, #8]
 8005f40:	2b00      	cmp	r3, #0
 8005f42:	d004      	beq.n	8005f4e <pbuf_take+0x7e>
 8005f44:	68fb      	ldr	r3, [r7, #12]
 8005f46:	891b      	ldrh	r3, [r3, #8]
 8005f48:	88fa      	ldrh	r2, [r7, #6]
 8005f4a:	429a      	cmp	r2, r3
 8005f4c:	d902      	bls.n	8005f54 <pbuf_take+0x84>
    return ERR_ARG;
 8005f4e:	f06f 030f 	mvn.w	r3, #15
 8005f52:	e03d      	b.n	8005fd0 <pbuf_take+0x100>
  }

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; total_copy_len != 0; p = p->next) {
 8005f54:	68fb      	ldr	r3, [r7, #12]
 8005f56:	61fb      	str	r3, [r7, #28]
 8005f58:	e028      	b.n	8005fac <pbuf_take+0xdc>
    LWIP_ASSERT("pbuf_take: invalid pbuf", p != NULL);
 8005f5a:	69fb      	ldr	r3, [r7, #28]
 8005f5c:	2b00      	cmp	r3, #0
 8005f5e:	d106      	bne.n	8005f6e <pbuf_take+0x9e>
 8005f60:	4b1d      	ldr	r3, [pc, #116]	; (8005fd8 <pbuf_take+0x108>)
 8005f62:	f240 42bd 	movw	r2, #1213	; 0x4bd
 8005f66:	4921      	ldr	r1, [pc, #132]	; (8005fec <pbuf_take+0x11c>)
 8005f68:	481d      	ldr	r0, [pc, #116]	; (8005fe0 <pbuf_take+0x110>)
 8005f6a:	f008 fbd9 	bl	800e720 <iprintf>
    buf_copy_len = total_copy_len;
 8005f6e:	697b      	ldr	r3, [r7, #20]
 8005f70:	61bb      	str	r3, [r7, #24]
    if (buf_copy_len > p->len) {
 8005f72:	69fb      	ldr	r3, [r7, #28]
 8005f74:	895b      	ldrh	r3, [r3, #10]
 8005f76:	461a      	mov	r2, r3
 8005f78:	69bb      	ldr	r3, [r7, #24]
 8005f7a:	4293      	cmp	r3, r2
 8005f7c:	d902      	bls.n	8005f84 <pbuf_take+0xb4>
      /* this pbuf cannot hold all remaining data */
      buf_copy_len = p->len;
 8005f7e:	69fb      	ldr	r3, [r7, #28]
 8005f80:	895b      	ldrh	r3, [r3, #10]
 8005f82:	61bb      	str	r3, [r7, #24]
    }
    /* copy the necessary parts of the buffer */
    MEMCPY(p->payload, &((const char *)dataptr)[copied_total], buf_copy_len);
 8005f84:	69fb      	ldr	r3, [r7, #28]
 8005f86:	6858      	ldr	r0, [r3, #4]
 8005f88:	68ba      	ldr	r2, [r7, #8]
 8005f8a:	693b      	ldr	r3, [r7, #16]
 8005f8c:	4413      	add	r3, r2
 8005f8e:	69ba      	ldr	r2, [r7, #24]
 8005f90:	4619      	mov	r1, r3
 8005f92:	f008 fdc9 	bl	800eb28 <memcpy>
    total_copy_len -= buf_copy_len;
 8005f96:	697a      	ldr	r2, [r7, #20]
 8005f98:	69bb      	ldr	r3, [r7, #24]
 8005f9a:	1ad3      	subs	r3, r2, r3
 8005f9c:	617b      	str	r3, [r7, #20]
    copied_total += buf_copy_len;
 8005f9e:	693a      	ldr	r2, [r7, #16]
 8005fa0:	69bb      	ldr	r3, [r7, #24]
 8005fa2:	4413      	add	r3, r2
 8005fa4:	613b      	str	r3, [r7, #16]
  for (p = buf; total_copy_len != 0; p = p->next) {
 8005fa6:	69fb      	ldr	r3, [r7, #28]
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	61fb      	str	r3, [r7, #28]
 8005fac:	697b      	ldr	r3, [r7, #20]
 8005fae:	2b00      	cmp	r3, #0
 8005fb0:	d1d3      	bne.n	8005f5a <pbuf_take+0x8a>
  }
  LWIP_ASSERT("did not copy all data", total_copy_len == 0 && copied_total == len);
 8005fb2:	697b      	ldr	r3, [r7, #20]
 8005fb4:	2b00      	cmp	r3, #0
 8005fb6:	d103      	bne.n	8005fc0 <pbuf_take+0xf0>
 8005fb8:	88fb      	ldrh	r3, [r7, #6]
 8005fba:	693a      	ldr	r2, [r7, #16]
 8005fbc:	429a      	cmp	r2, r3
 8005fbe:	d006      	beq.n	8005fce <pbuf_take+0xfe>
 8005fc0:	4b05      	ldr	r3, [pc, #20]	; (8005fd8 <pbuf_take+0x108>)
 8005fc2:	f44f 6299 	mov.w	r2, #1224	; 0x4c8
 8005fc6:	490a      	ldr	r1, [pc, #40]	; (8005ff0 <pbuf_take+0x120>)
 8005fc8:	4805      	ldr	r0, [pc, #20]	; (8005fe0 <pbuf_take+0x110>)
 8005fca:	f008 fba9 	bl	800e720 <iprintf>
  return ERR_OK;
 8005fce:	2300      	movs	r3, #0
}
 8005fd0:	4618      	mov	r0, r3
 8005fd2:	3720      	adds	r7, #32
 8005fd4:	46bd      	mov	sp, r7
 8005fd6:	bd80      	pop	{r7, pc}
 8005fd8:	0800ff9c 	.word	0x0800ff9c
 8005fdc:	08010374 	.word	0x08010374
 8005fe0:	0800fffc 	.word	0x0800fffc
 8005fe4:	0801038c 	.word	0x0801038c
 8005fe8:	080103a8 	.word	0x080103a8
 8005fec:	080103c8 	.word	0x080103c8
 8005ff0:	080103e0 	.word	0x080103e0

08005ff4 <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 8005ff4:	b580      	push	{r7, lr}
 8005ff6:	b084      	sub	sp, #16
 8005ff8:	af00      	add	r7, sp, #0
 8005ffa:	4603      	mov	r3, r0
 8005ffc:	603a      	str	r2, [r7, #0]
 8005ffe:	71fb      	strb	r3, [r7, #7]
 8006000:	460b      	mov	r3, r1
 8006002:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 8006004:	683b      	ldr	r3, [r7, #0]
 8006006:	8919      	ldrh	r1, [r3, #8]
 8006008:	88ba      	ldrh	r2, [r7, #4]
 800600a:	79fb      	ldrb	r3, [r7, #7]
 800600c:	4618      	mov	r0, r3
 800600e:	f7ff fa0f 	bl	8005430 <pbuf_alloc>
 8006012:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 8006014:	68fb      	ldr	r3, [r7, #12]
 8006016:	2b00      	cmp	r3, #0
 8006018:	d101      	bne.n	800601e <pbuf_clone+0x2a>
    return NULL;
 800601a:	2300      	movs	r3, #0
 800601c:	e011      	b.n	8006042 <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 800601e:	6839      	ldr	r1, [r7, #0]
 8006020:	68f8      	ldr	r0, [r7, #12]
 8006022:	f7ff fe11 	bl	8005c48 <pbuf_copy>
 8006026:	4603      	mov	r3, r0
 8006028:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 800602a:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800602e:	2b00      	cmp	r3, #0
 8006030:	d006      	beq.n	8006040 <pbuf_clone+0x4c>
 8006032:	4b06      	ldr	r3, [pc, #24]	; (800604c <pbuf_clone+0x58>)
 8006034:	f240 5224 	movw	r2, #1316	; 0x524
 8006038:	4905      	ldr	r1, [pc, #20]	; (8006050 <pbuf_clone+0x5c>)
 800603a:	4806      	ldr	r0, [pc, #24]	; (8006054 <pbuf_clone+0x60>)
 800603c:	f008 fb70 	bl	800e720 <iprintf>
  return q;
 8006040:	68fb      	ldr	r3, [r7, #12]
}
 8006042:	4618      	mov	r0, r3
 8006044:	3710      	adds	r7, #16
 8006046:	46bd      	mov	sp, r7
 8006048:	bd80      	pop	{r7, pc}
 800604a:	bf00      	nop
 800604c:	0800ff9c 	.word	0x0800ff9c
 8006050:	08010410 	.word	0x08010410
 8006054:	0800fffc 	.word	0x0800fffc

08006058 <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 8006058:	b580      	push	{r7, lr}
 800605a:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 800605c:	f008 fa72 	bl	800e544 <rand>
 8006060:	4603      	mov	r3, r0
 8006062:	b29b      	uxth	r3, r3
 8006064:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8006068:	b29b      	uxth	r3, r3
 800606a:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 800606e:	b29a      	uxth	r2, r3
 8006070:	4b01      	ldr	r3, [pc, #4]	; (8006078 <tcp_init+0x20>)
 8006072:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 8006074:	bf00      	nop
 8006076:	bd80      	pop	{r7, pc}
 8006078:	20000020 	.word	0x20000020

0800607c <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 800607c:	b580      	push	{r7, lr}
 800607e:	b082      	sub	sp, #8
 8006080:	af00      	add	r7, sp, #0
 8006082:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	7d1b      	ldrb	r3, [r3, #20]
 8006088:	2b01      	cmp	r3, #1
 800608a:	d105      	bne.n	8006098 <tcp_free+0x1c>
 800608c:	4b06      	ldr	r3, [pc, #24]	; (80060a8 <tcp_free+0x2c>)
 800608e:	22d4      	movs	r2, #212	; 0xd4
 8006090:	4906      	ldr	r1, [pc, #24]	; (80060ac <tcp_free+0x30>)
 8006092:	4807      	ldr	r0, [pc, #28]	; (80060b0 <tcp_free+0x34>)
 8006094:	f008 fb44 	bl	800e720 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 8006098:	6879      	ldr	r1, [r7, #4]
 800609a:	2001      	movs	r0, #1
 800609c:	f7fe fe36 	bl	8004d0c <memp_free>
}
 80060a0:	bf00      	nop
 80060a2:	3708      	adds	r7, #8
 80060a4:	46bd      	mov	sp, r7
 80060a6:	bd80      	pop	{r7, pc}
 80060a8:	0801049c 	.word	0x0801049c
 80060ac:	080104cc 	.word	0x080104cc
 80060b0:	080104e0 	.word	0x080104e0

080060b4 <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 80060b4:	b580      	push	{r7, lr}
 80060b6:	b082      	sub	sp, #8
 80060b8:	af00      	add	r7, sp, #0
 80060ba:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	7d1b      	ldrb	r3, [r3, #20]
 80060c0:	2b01      	cmp	r3, #1
 80060c2:	d105      	bne.n	80060d0 <tcp_free_listen+0x1c>
 80060c4:	4b06      	ldr	r3, [pc, #24]	; (80060e0 <tcp_free_listen+0x2c>)
 80060c6:	22df      	movs	r2, #223	; 0xdf
 80060c8:	4906      	ldr	r1, [pc, #24]	; (80060e4 <tcp_free_listen+0x30>)
 80060ca:	4807      	ldr	r0, [pc, #28]	; (80060e8 <tcp_free_listen+0x34>)
 80060cc:	f008 fb28 	bl	800e720 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 80060d0:	6879      	ldr	r1, [r7, #4]
 80060d2:	2002      	movs	r0, #2
 80060d4:	f7fe fe1a 	bl	8004d0c <memp_free>
}
 80060d8:	bf00      	nop
 80060da:	3708      	adds	r7, #8
 80060dc:	46bd      	mov	sp, r7
 80060de:	bd80      	pop	{r7, pc}
 80060e0:	0801049c 	.word	0x0801049c
 80060e4:	08010508 	.word	0x08010508
 80060e8:	080104e0 	.word	0x080104e0

080060ec <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 80060ec:	b580      	push	{r7, lr}
 80060ee:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 80060f0:	f000 fea2 	bl	8006e38 <tcp_fasttmr>

  if (++tcp_timer & 1) {
 80060f4:	4b07      	ldr	r3, [pc, #28]	; (8006114 <tcp_tmr+0x28>)
 80060f6:	781b      	ldrb	r3, [r3, #0]
 80060f8:	3301      	adds	r3, #1
 80060fa:	b2da      	uxtb	r2, r3
 80060fc:	4b05      	ldr	r3, [pc, #20]	; (8006114 <tcp_tmr+0x28>)
 80060fe:	701a      	strb	r2, [r3, #0]
 8006100:	4b04      	ldr	r3, [pc, #16]	; (8006114 <tcp_tmr+0x28>)
 8006102:	781b      	ldrb	r3, [r3, #0]
 8006104:	f003 0301 	and.w	r3, r3, #1
 8006108:	2b00      	cmp	r3, #0
 800610a:	d001      	beq.n	8006110 <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 800610c:	f000 fb54 	bl	80067b8 <tcp_slowtmr>
  }
}
 8006110:	bf00      	nop
 8006112:	bd80      	pop	{r7, pc}
 8006114:	20008301 	.word	0x20008301

08006118 <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 8006118:	b580      	push	{r7, lr}
 800611a:	b084      	sub	sp, #16
 800611c:	af00      	add	r7, sp, #0
 800611e:	6078      	str	r0, [r7, #4]
 8006120:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 8006122:	683b      	ldr	r3, [r7, #0]
 8006124:	2b00      	cmp	r3, #0
 8006126:	d105      	bne.n	8006134 <tcp_remove_listener+0x1c>
 8006128:	4b0d      	ldr	r3, [pc, #52]	; (8006160 <tcp_remove_listener+0x48>)
 800612a:	22ff      	movs	r2, #255	; 0xff
 800612c:	490d      	ldr	r1, [pc, #52]	; (8006164 <tcp_remove_listener+0x4c>)
 800612e:	480e      	ldr	r0, [pc, #56]	; (8006168 <tcp_remove_listener+0x50>)
 8006130:	f008 faf6 	bl	800e720 <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	60fb      	str	r3, [r7, #12]
 8006138:	e00a      	b.n	8006150 <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 800613a:	68fb      	ldr	r3, [r7, #12]
 800613c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800613e:	683a      	ldr	r2, [r7, #0]
 8006140:	429a      	cmp	r2, r3
 8006142:	d102      	bne.n	800614a <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 8006144:	68fb      	ldr	r3, [r7, #12]
 8006146:	2200      	movs	r2, #0
 8006148:	67da      	str	r2, [r3, #124]	; 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800614a:	68fb      	ldr	r3, [r7, #12]
 800614c:	68db      	ldr	r3, [r3, #12]
 800614e:	60fb      	str	r3, [r7, #12]
 8006150:	68fb      	ldr	r3, [r7, #12]
 8006152:	2b00      	cmp	r3, #0
 8006154:	d1f1      	bne.n	800613a <tcp_remove_listener+0x22>
    }
  }
}
 8006156:	bf00      	nop
 8006158:	bf00      	nop
 800615a:	3710      	adds	r7, #16
 800615c:	46bd      	mov	sp, r7
 800615e:	bd80      	pop	{r7, pc}
 8006160:	0801049c 	.word	0x0801049c
 8006164:	08010524 	.word	0x08010524
 8006168:	080104e0 	.word	0x080104e0

0800616c <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 800616c:	b580      	push	{r7, lr}
 800616e:	b084      	sub	sp, #16
 8006170:	af00      	add	r7, sp, #0
 8006172:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	2b00      	cmp	r3, #0
 8006178:	d106      	bne.n	8006188 <tcp_listen_closed+0x1c>
 800617a:	4b14      	ldr	r3, [pc, #80]	; (80061cc <tcp_listen_closed+0x60>)
 800617c:	f240 1211 	movw	r2, #273	; 0x111
 8006180:	4913      	ldr	r1, [pc, #76]	; (80061d0 <tcp_listen_closed+0x64>)
 8006182:	4814      	ldr	r0, [pc, #80]	; (80061d4 <tcp_listen_closed+0x68>)
 8006184:	f008 facc 	bl	800e720 <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	7d1b      	ldrb	r3, [r3, #20]
 800618c:	2b01      	cmp	r3, #1
 800618e:	d006      	beq.n	800619e <tcp_listen_closed+0x32>
 8006190:	4b0e      	ldr	r3, [pc, #56]	; (80061cc <tcp_listen_closed+0x60>)
 8006192:	f44f 7289 	mov.w	r2, #274	; 0x112
 8006196:	4910      	ldr	r1, [pc, #64]	; (80061d8 <tcp_listen_closed+0x6c>)
 8006198:	480e      	ldr	r0, [pc, #56]	; (80061d4 <tcp_listen_closed+0x68>)
 800619a:	f008 fac1 	bl	800e720 <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800619e:	2301      	movs	r3, #1
 80061a0:	60fb      	str	r3, [r7, #12]
 80061a2:	e00b      	b.n	80061bc <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 80061a4:	4a0d      	ldr	r2, [pc, #52]	; (80061dc <tcp_listen_closed+0x70>)
 80061a6:	68fb      	ldr	r3, [r7, #12]
 80061a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	6879      	ldr	r1, [r7, #4]
 80061b0:	4618      	mov	r0, r3
 80061b2:	f7ff ffb1 	bl	8006118 <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 80061b6:	68fb      	ldr	r3, [r7, #12]
 80061b8:	3301      	adds	r3, #1
 80061ba:	60fb      	str	r3, [r7, #12]
 80061bc:	68fb      	ldr	r3, [r7, #12]
 80061be:	2b03      	cmp	r3, #3
 80061c0:	d9f0      	bls.n	80061a4 <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 80061c2:	bf00      	nop
 80061c4:	bf00      	nop
 80061c6:	3710      	adds	r7, #16
 80061c8:	46bd      	mov	sp, r7
 80061ca:	bd80      	pop	{r7, pc}
 80061cc:	0801049c 	.word	0x0801049c
 80061d0:	0801054c 	.word	0x0801054c
 80061d4:	080104e0 	.word	0x080104e0
 80061d8:	08010558 	.word	0x08010558
 80061dc:	0801247c 	.word	0x0801247c

080061e0 <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 80061e0:	b5b0      	push	{r4, r5, r7, lr}
 80061e2:	b088      	sub	sp, #32
 80061e4:	af04      	add	r7, sp, #16
 80061e6:	6078      	str	r0, [r7, #4]
 80061e8:	460b      	mov	r3, r1
 80061ea:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	2b00      	cmp	r3, #0
 80061f0:	d106      	bne.n	8006200 <tcp_close_shutdown+0x20>
 80061f2:	4b63      	ldr	r3, [pc, #396]	; (8006380 <tcp_close_shutdown+0x1a0>)
 80061f4:	f44f 72af 	mov.w	r2, #350	; 0x15e
 80061f8:	4962      	ldr	r1, [pc, #392]	; (8006384 <tcp_close_shutdown+0x1a4>)
 80061fa:	4863      	ldr	r0, [pc, #396]	; (8006388 <tcp_close_shutdown+0x1a8>)
 80061fc:	f008 fa90 	bl	800e720 <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 8006200:	78fb      	ldrb	r3, [r7, #3]
 8006202:	2b00      	cmp	r3, #0
 8006204:	d066      	beq.n	80062d4 <tcp_close_shutdown+0xf4>
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	7d1b      	ldrb	r3, [r3, #20]
 800620a:	2b04      	cmp	r3, #4
 800620c:	d003      	beq.n	8006216 <tcp_close_shutdown+0x36>
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	7d1b      	ldrb	r3, [r3, #20]
 8006212:	2b07      	cmp	r3, #7
 8006214:	d15e      	bne.n	80062d4 <tcp_close_shutdown+0xf4>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800621a:	2b00      	cmp	r3, #0
 800621c:	d104      	bne.n	8006228 <tcp_close_shutdown+0x48>
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006222:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8006226:	d055      	beq.n	80062d4 <tcp_close_shutdown+0xf4>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	8b5b      	ldrh	r3, [r3, #26]
 800622c:	f003 0310 	and.w	r3, r3, #16
 8006230:	2b00      	cmp	r3, #0
 8006232:	d106      	bne.n	8006242 <tcp_close_shutdown+0x62>
 8006234:	4b52      	ldr	r3, [pc, #328]	; (8006380 <tcp_close_shutdown+0x1a0>)
 8006236:	f44f 72b2 	mov.w	r2, #356	; 0x164
 800623a:	4954      	ldr	r1, [pc, #336]	; (800638c <tcp_close_shutdown+0x1ac>)
 800623c:	4852      	ldr	r0, [pc, #328]	; (8006388 <tcp_close_shutdown+0x1a8>)
 800623e:	f008 fa6f 	bl	800e720 <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	6d18      	ldr	r0, [r3, #80]	; 0x50
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800624a:	687d      	ldr	r5, [r7, #4]
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	3304      	adds	r3, #4
 8006250:	687a      	ldr	r2, [r7, #4]
 8006252:	8ad2      	ldrh	r2, [r2, #22]
 8006254:	6879      	ldr	r1, [r7, #4]
 8006256:	8b09      	ldrh	r1, [r1, #24]
 8006258:	9102      	str	r1, [sp, #8]
 800625a:	9201      	str	r2, [sp, #4]
 800625c:	9300      	str	r3, [sp, #0]
 800625e:	462b      	mov	r3, r5
 8006260:	4622      	mov	r2, r4
 8006262:	4601      	mov	r1, r0
 8006264:	6878      	ldr	r0, [r7, #4]
 8006266:	f004 fe91 	bl	800af8c <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 800626a:	6878      	ldr	r0, [r7, #4]
 800626c:	f001 f8c6 	bl	80073fc <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 8006270:	4b47      	ldr	r3, [pc, #284]	; (8006390 <tcp_close_shutdown+0x1b0>)
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	687a      	ldr	r2, [r7, #4]
 8006276:	429a      	cmp	r2, r3
 8006278:	d105      	bne.n	8006286 <tcp_close_shutdown+0xa6>
 800627a:	4b45      	ldr	r3, [pc, #276]	; (8006390 <tcp_close_shutdown+0x1b0>)
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	68db      	ldr	r3, [r3, #12]
 8006280:	4a43      	ldr	r2, [pc, #268]	; (8006390 <tcp_close_shutdown+0x1b0>)
 8006282:	6013      	str	r3, [r2, #0]
 8006284:	e013      	b.n	80062ae <tcp_close_shutdown+0xce>
 8006286:	4b42      	ldr	r3, [pc, #264]	; (8006390 <tcp_close_shutdown+0x1b0>)
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	60fb      	str	r3, [r7, #12]
 800628c:	e00c      	b.n	80062a8 <tcp_close_shutdown+0xc8>
 800628e:	68fb      	ldr	r3, [r7, #12]
 8006290:	68db      	ldr	r3, [r3, #12]
 8006292:	687a      	ldr	r2, [r7, #4]
 8006294:	429a      	cmp	r2, r3
 8006296:	d104      	bne.n	80062a2 <tcp_close_shutdown+0xc2>
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	68da      	ldr	r2, [r3, #12]
 800629c:	68fb      	ldr	r3, [r7, #12]
 800629e:	60da      	str	r2, [r3, #12]
 80062a0:	e005      	b.n	80062ae <tcp_close_shutdown+0xce>
 80062a2:	68fb      	ldr	r3, [r7, #12]
 80062a4:	68db      	ldr	r3, [r3, #12]
 80062a6:	60fb      	str	r3, [r7, #12]
 80062a8:	68fb      	ldr	r3, [r7, #12]
 80062aa:	2b00      	cmp	r3, #0
 80062ac:	d1ef      	bne.n	800628e <tcp_close_shutdown+0xae>
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	2200      	movs	r2, #0
 80062b2:	60da      	str	r2, [r3, #12]
 80062b4:	4b37      	ldr	r3, [pc, #220]	; (8006394 <tcp_close_shutdown+0x1b4>)
 80062b6:	2201      	movs	r2, #1
 80062b8:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 80062ba:	4b37      	ldr	r3, [pc, #220]	; (8006398 <tcp_close_shutdown+0x1b8>)
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	687a      	ldr	r2, [r7, #4]
 80062c0:	429a      	cmp	r2, r3
 80062c2:	d102      	bne.n	80062ca <tcp_close_shutdown+0xea>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 80062c4:	f003 fd5e 	bl	8009d84 <tcp_trigger_input_pcb_close>
 80062c8:	e002      	b.n	80062d0 <tcp_close_shutdown+0xf0>
      } else {
        tcp_free(pcb);
 80062ca:	6878      	ldr	r0, [r7, #4]
 80062cc:	f7ff fed6 	bl	800607c <tcp_free>
      }
      return ERR_OK;
 80062d0:	2300      	movs	r3, #0
 80062d2:	e050      	b.n	8006376 <tcp_close_shutdown+0x196>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	7d1b      	ldrb	r3, [r3, #20]
 80062d8:	2b02      	cmp	r3, #2
 80062da:	d03b      	beq.n	8006354 <tcp_close_shutdown+0x174>
 80062dc:	2b02      	cmp	r3, #2
 80062de:	dc44      	bgt.n	800636a <tcp_close_shutdown+0x18a>
 80062e0:	2b00      	cmp	r3, #0
 80062e2:	d002      	beq.n	80062ea <tcp_close_shutdown+0x10a>
 80062e4:	2b01      	cmp	r3, #1
 80062e6:	d02a      	beq.n	800633e <tcp_close_shutdown+0x15e>
 80062e8:	e03f      	b.n	800636a <tcp_close_shutdown+0x18a>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	8adb      	ldrh	r3, [r3, #22]
 80062ee:	2b00      	cmp	r3, #0
 80062f0:	d021      	beq.n	8006336 <tcp_close_shutdown+0x156>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 80062f2:	4b2a      	ldr	r3, [pc, #168]	; (800639c <tcp_close_shutdown+0x1bc>)
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	687a      	ldr	r2, [r7, #4]
 80062f8:	429a      	cmp	r2, r3
 80062fa:	d105      	bne.n	8006308 <tcp_close_shutdown+0x128>
 80062fc:	4b27      	ldr	r3, [pc, #156]	; (800639c <tcp_close_shutdown+0x1bc>)
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	68db      	ldr	r3, [r3, #12]
 8006302:	4a26      	ldr	r2, [pc, #152]	; (800639c <tcp_close_shutdown+0x1bc>)
 8006304:	6013      	str	r3, [r2, #0]
 8006306:	e013      	b.n	8006330 <tcp_close_shutdown+0x150>
 8006308:	4b24      	ldr	r3, [pc, #144]	; (800639c <tcp_close_shutdown+0x1bc>)
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	60bb      	str	r3, [r7, #8]
 800630e:	e00c      	b.n	800632a <tcp_close_shutdown+0x14a>
 8006310:	68bb      	ldr	r3, [r7, #8]
 8006312:	68db      	ldr	r3, [r3, #12]
 8006314:	687a      	ldr	r2, [r7, #4]
 8006316:	429a      	cmp	r2, r3
 8006318:	d104      	bne.n	8006324 <tcp_close_shutdown+0x144>
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	68da      	ldr	r2, [r3, #12]
 800631e:	68bb      	ldr	r3, [r7, #8]
 8006320:	60da      	str	r2, [r3, #12]
 8006322:	e005      	b.n	8006330 <tcp_close_shutdown+0x150>
 8006324:	68bb      	ldr	r3, [r7, #8]
 8006326:	68db      	ldr	r3, [r3, #12]
 8006328:	60bb      	str	r3, [r7, #8]
 800632a:	68bb      	ldr	r3, [r7, #8]
 800632c:	2b00      	cmp	r3, #0
 800632e:	d1ef      	bne.n	8006310 <tcp_close_shutdown+0x130>
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	2200      	movs	r2, #0
 8006334:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 8006336:	6878      	ldr	r0, [r7, #4]
 8006338:	f7ff fea0 	bl	800607c <tcp_free>
      break;
 800633c:	e01a      	b.n	8006374 <tcp_close_shutdown+0x194>
    case LISTEN:
      tcp_listen_closed(pcb);
 800633e:	6878      	ldr	r0, [r7, #4]
 8006340:	f7ff ff14 	bl	800616c <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 8006344:	6879      	ldr	r1, [r7, #4]
 8006346:	4816      	ldr	r0, [pc, #88]	; (80063a0 <tcp_close_shutdown+0x1c0>)
 8006348:	f001 f8a8 	bl	800749c <tcp_pcb_remove>
      tcp_free_listen(pcb);
 800634c:	6878      	ldr	r0, [r7, #4]
 800634e:	f7ff feb1 	bl	80060b4 <tcp_free_listen>
      break;
 8006352:	e00f      	b.n	8006374 <tcp_close_shutdown+0x194>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 8006354:	6879      	ldr	r1, [r7, #4]
 8006356:	480e      	ldr	r0, [pc, #56]	; (8006390 <tcp_close_shutdown+0x1b0>)
 8006358:	f001 f8a0 	bl	800749c <tcp_pcb_remove>
 800635c:	4b0d      	ldr	r3, [pc, #52]	; (8006394 <tcp_close_shutdown+0x1b4>)
 800635e:	2201      	movs	r2, #1
 8006360:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 8006362:	6878      	ldr	r0, [r7, #4]
 8006364:	f7ff fe8a 	bl	800607c <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 8006368:	e004      	b.n	8006374 <tcp_close_shutdown+0x194>
    default:
      return tcp_close_shutdown_fin(pcb);
 800636a:	6878      	ldr	r0, [r7, #4]
 800636c:	f000 f81a 	bl	80063a4 <tcp_close_shutdown_fin>
 8006370:	4603      	mov	r3, r0
 8006372:	e000      	b.n	8006376 <tcp_close_shutdown+0x196>
  }
  return ERR_OK;
 8006374:	2300      	movs	r3, #0
}
 8006376:	4618      	mov	r0, r3
 8006378:	3710      	adds	r7, #16
 800637a:	46bd      	mov	sp, r7
 800637c:	bdb0      	pop	{r4, r5, r7, pc}
 800637e:	bf00      	nop
 8006380:	0801049c 	.word	0x0801049c
 8006384:	08010570 	.word	0x08010570
 8006388:	080104e0 	.word	0x080104e0
 800638c:	08010590 	.word	0x08010590
 8006390:	200082f8 	.word	0x200082f8
 8006394:	20008300 	.word	0x20008300
 8006398:	20008338 	.word	0x20008338
 800639c:	200082f0 	.word	0x200082f0
 80063a0:	200082f4 	.word	0x200082f4

080063a4 <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 80063a4:	b580      	push	{r7, lr}
 80063a6:	b084      	sub	sp, #16
 80063a8:	af00      	add	r7, sp, #0
 80063aa:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	2b00      	cmp	r3, #0
 80063b0:	d106      	bne.n	80063c0 <tcp_close_shutdown_fin+0x1c>
 80063b2:	4b2e      	ldr	r3, [pc, #184]	; (800646c <tcp_close_shutdown_fin+0xc8>)
 80063b4:	f44f 72ce 	mov.w	r2, #412	; 0x19c
 80063b8:	492d      	ldr	r1, [pc, #180]	; (8006470 <tcp_close_shutdown_fin+0xcc>)
 80063ba:	482e      	ldr	r0, [pc, #184]	; (8006474 <tcp_close_shutdown_fin+0xd0>)
 80063bc:	f008 f9b0 	bl	800e720 <iprintf>

  switch (pcb->state) {
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	7d1b      	ldrb	r3, [r3, #20]
 80063c4:	2b07      	cmp	r3, #7
 80063c6:	d020      	beq.n	800640a <tcp_close_shutdown_fin+0x66>
 80063c8:	2b07      	cmp	r3, #7
 80063ca:	dc2b      	bgt.n	8006424 <tcp_close_shutdown_fin+0x80>
 80063cc:	2b03      	cmp	r3, #3
 80063ce:	d002      	beq.n	80063d6 <tcp_close_shutdown_fin+0x32>
 80063d0:	2b04      	cmp	r3, #4
 80063d2:	d00d      	beq.n	80063f0 <tcp_close_shutdown_fin+0x4c>
 80063d4:	e026      	b.n	8006424 <tcp_close_shutdown_fin+0x80>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 80063d6:	6878      	ldr	r0, [r7, #4]
 80063d8:	f003 fee6 	bl	800a1a8 <tcp_send_fin>
 80063dc:	4603      	mov	r3, r0
 80063de:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 80063e0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80063e4:	2b00      	cmp	r3, #0
 80063e6:	d11f      	bne.n	8006428 <tcp_close_shutdown_fin+0x84>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	2205      	movs	r2, #5
 80063ec:	751a      	strb	r2, [r3, #20]
      }
      break;
 80063ee:	e01b      	b.n	8006428 <tcp_close_shutdown_fin+0x84>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 80063f0:	6878      	ldr	r0, [r7, #4]
 80063f2:	f003 fed9 	bl	800a1a8 <tcp_send_fin>
 80063f6:	4603      	mov	r3, r0
 80063f8:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 80063fa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80063fe:	2b00      	cmp	r3, #0
 8006400:	d114      	bne.n	800642c <tcp_close_shutdown_fin+0x88>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	2205      	movs	r2, #5
 8006406:	751a      	strb	r2, [r3, #20]
      }
      break;
 8006408:	e010      	b.n	800642c <tcp_close_shutdown_fin+0x88>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 800640a:	6878      	ldr	r0, [r7, #4]
 800640c:	f003 fecc 	bl	800a1a8 <tcp_send_fin>
 8006410:	4603      	mov	r3, r0
 8006412:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8006414:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006418:	2b00      	cmp	r3, #0
 800641a:	d109      	bne.n	8006430 <tcp_close_shutdown_fin+0x8c>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	2209      	movs	r2, #9
 8006420:	751a      	strb	r2, [r3, #20]
      }
      break;
 8006422:	e005      	b.n	8006430 <tcp_close_shutdown_fin+0x8c>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 8006424:	2300      	movs	r3, #0
 8006426:	e01c      	b.n	8006462 <tcp_close_shutdown_fin+0xbe>
      break;
 8006428:	bf00      	nop
 800642a:	e002      	b.n	8006432 <tcp_close_shutdown_fin+0x8e>
      break;
 800642c:	bf00      	nop
 800642e:	e000      	b.n	8006432 <tcp_close_shutdown_fin+0x8e>
      break;
 8006430:	bf00      	nop
  }

  if (err == ERR_OK) {
 8006432:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006436:	2b00      	cmp	r3, #0
 8006438:	d103      	bne.n	8006442 <tcp_close_shutdown_fin+0x9e>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 800643a:	6878      	ldr	r0, [r7, #4]
 800643c:	f003 fff2 	bl	800a424 <tcp_output>
 8006440:	e00d      	b.n	800645e <tcp_close_shutdown_fin+0xba>
  } else if (err == ERR_MEM) {
 8006442:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006446:	f1b3 3fff 	cmp.w	r3, #4294967295
 800644a:	d108      	bne.n	800645e <tcp_close_shutdown_fin+0xba>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	8b5b      	ldrh	r3, [r3, #26]
 8006450:	f043 0308 	orr.w	r3, r3, #8
 8006454:	b29a      	uxth	r2, r3
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 800645a:	2300      	movs	r3, #0
 800645c:	e001      	b.n	8006462 <tcp_close_shutdown_fin+0xbe>
  }
  return err;
 800645e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8006462:	4618      	mov	r0, r3
 8006464:	3710      	adds	r7, #16
 8006466:	46bd      	mov	sp, r7
 8006468:	bd80      	pop	{r7, pc}
 800646a:	bf00      	nop
 800646c:	0801049c 	.word	0x0801049c
 8006470:	0801054c 	.word	0x0801054c
 8006474:	080104e0 	.word	0x080104e0

08006478 <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 8006478:	b580      	push	{r7, lr}
 800647a:	b082      	sub	sp, #8
 800647c:	af00      	add	r7, sp, #0
 800647e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	2b00      	cmp	r3, #0
 8006484:	d109      	bne.n	800649a <tcp_close+0x22>
 8006486:	4b0f      	ldr	r3, [pc, #60]	; (80064c4 <tcp_close+0x4c>)
 8006488:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 800648c:	490e      	ldr	r1, [pc, #56]	; (80064c8 <tcp_close+0x50>)
 800648e:	480f      	ldr	r0, [pc, #60]	; (80064cc <tcp_close+0x54>)
 8006490:	f008 f946 	bl	800e720 <iprintf>
 8006494:	f06f 030f 	mvn.w	r3, #15
 8006498:	e00f      	b.n	80064ba <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	7d1b      	ldrb	r3, [r3, #20]
 800649e:	2b01      	cmp	r3, #1
 80064a0:	d006      	beq.n	80064b0 <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	8b5b      	ldrh	r3, [r3, #26]
 80064a6:	f043 0310 	orr.w	r3, r3, #16
 80064aa:	b29a      	uxth	r2, r3
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 80064b0:	2101      	movs	r1, #1
 80064b2:	6878      	ldr	r0, [r7, #4]
 80064b4:	f7ff fe94 	bl	80061e0 <tcp_close_shutdown>
 80064b8:	4603      	mov	r3, r0
}
 80064ba:	4618      	mov	r0, r3
 80064bc:	3708      	adds	r7, #8
 80064be:	46bd      	mov	sp, r7
 80064c0:	bd80      	pop	{r7, pc}
 80064c2:	bf00      	nop
 80064c4:	0801049c 	.word	0x0801049c
 80064c8:	080105ac 	.word	0x080105ac
 80064cc:	080104e0 	.word	0x080104e0

080064d0 <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 80064d0:	b580      	push	{r7, lr}
 80064d2:	b08e      	sub	sp, #56	; 0x38
 80064d4:	af04      	add	r7, sp, #16
 80064d6:	6078      	str	r0, [r7, #4]
 80064d8:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	2b00      	cmp	r3, #0
 80064de:	d107      	bne.n	80064f0 <tcp_abandon+0x20>
 80064e0:	4b52      	ldr	r3, [pc, #328]	; (800662c <tcp_abandon+0x15c>)
 80064e2:	f240 223d 	movw	r2, #573	; 0x23d
 80064e6:	4952      	ldr	r1, [pc, #328]	; (8006630 <tcp_abandon+0x160>)
 80064e8:	4852      	ldr	r0, [pc, #328]	; (8006634 <tcp_abandon+0x164>)
 80064ea:	f008 f919 	bl	800e720 <iprintf>
 80064ee:	e099      	b.n	8006624 <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	7d1b      	ldrb	r3, [r3, #20]
 80064f4:	2b01      	cmp	r3, #1
 80064f6:	d106      	bne.n	8006506 <tcp_abandon+0x36>
 80064f8:	4b4c      	ldr	r3, [pc, #304]	; (800662c <tcp_abandon+0x15c>)
 80064fa:	f44f 7210 	mov.w	r2, #576	; 0x240
 80064fe:	494e      	ldr	r1, [pc, #312]	; (8006638 <tcp_abandon+0x168>)
 8006500:	484c      	ldr	r0, [pc, #304]	; (8006634 <tcp_abandon+0x164>)
 8006502:	f008 f90d 	bl	800e720 <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	7d1b      	ldrb	r3, [r3, #20]
 800650a:	2b0a      	cmp	r3, #10
 800650c:	d107      	bne.n	800651e <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 800650e:	6879      	ldr	r1, [r7, #4]
 8006510:	484a      	ldr	r0, [pc, #296]	; (800663c <tcp_abandon+0x16c>)
 8006512:	f000 ffc3 	bl	800749c <tcp_pcb_remove>
    tcp_free(pcb);
 8006516:	6878      	ldr	r0, [r7, #4]
 8006518:	f7ff fdb0 	bl	800607c <tcp_free>
 800651c:	e082      	b.n	8006624 <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 800651e:	2300      	movs	r3, #0
 8006520:	627b      	str	r3, [r7, #36]	; 0x24
    u16_t local_port = 0;
 8006522:	2300      	movs	r3, #0
 8006524:	847b      	strh	r3, [r7, #34]	; 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800652a:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006530:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006538:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	691b      	ldr	r3, [r3, #16]
 800653e:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	7d1b      	ldrb	r3, [r3, #20]
 8006544:	2b00      	cmp	r3, #0
 8006546:	d126      	bne.n	8006596 <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	8adb      	ldrh	r3, [r3, #22]
 800654c:	2b00      	cmp	r3, #0
 800654e:	d02e      	beq.n	80065ae <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 8006550:	4b3b      	ldr	r3, [pc, #236]	; (8006640 <tcp_abandon+0x170>)
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	687a      	ldr	r2, [r7, #4]
 8006556:	429a      	cmp	r2, r3
 8006558:	d105      	bne.n	8006566 <tcp_abandon+0x96>
 800655a:	4b39      	ldr	r3, [pc, #228]	; (8006640 <tcp_abandon+0x170>)
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	68db      	ldr	r3, [r3, #12]
 8006560:	4a37      	ldr	r2, [pc, #220]	; (8006640 <tcp_abandon+0x170>)
 8006562:	6013      	str	r3, [r2, #0]
 8006564:	e013      	b.n	800658e <tcp_abandon+0xbe>
 8006566:	4b36      	ldr	r3, [pc, #216]	; (8006640 <tcp_abandon+0x170>)
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	61fb      	str	r3, [r7, #28]
 800656c:	e00c      	b.n	8006588 <tcp_abandon+0xb8>
 800656e:	69fb      	ldr	r3, [r7, #28]
 8006570:	68db      	ldr	r3, [r3, #12]
 8006572:	687a      	ldr	r2, [r7, #4]
 8006574:	429a      	cmp	r2, r3
 8006576:	d104      	bne.n	8006582 <tcp_abandon+0xb2>
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	68da      	ldr	r2, [r3, #12]
 800657c:	69fb      	ldr	r3, [r7, #28]
 800657e:	60da      	str	r2, [r3, #12]
 8006580:	e005      	b.n	800658e <tcp_abandon+0xbe>
 8006582:	69fb      	ldr	r3, [r7, #28]
 8006584:	68db      	ldr	r3, [r3, #12]
 8006586:	61fb      	str	r3, [r7, #28]
 8006588:	69fb      	ldr	r3, [r7, #28]
 800658a:	2b00      	cmp	r3, #0
 800658c:	d1ef      	bne.n	800656e <tcp_abandon+0x9e>
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	2200      	movs	r2, #0
 8006592:	60da      	str	r2, [r3, #12]
 8006594:	e00b      	b.n	80065ae <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 8006596:	683b      	ldr	r3, [r7, #0]
 8006598:	627b      	str	r3, [r7, #36]	; 0x24
      local_port = pcb->local_port;
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	8adb      	ldrh	r3, [r3, #22]
 800659e:	847b      	strh	r3, [r7, #34]	; 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 80065a0:	6879      	ldr	r1, [r7, #4]
 80065a2:	4828      	ldr	r0, [pc, #160]	; (8006644 <tcp_abandon+0x174>)
 80065a4:	f000 ff7a 	bl	800749c <tcp_pcb_remove>
 80065a8:	4b27      	ldr	r3, [pc, #156]	; (8006648 <tcp_abandon+0x178>)
 80065aa:	2201      	movs	r2, #1
 80065ac:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80065b2:	2b00      	cmp	r3, #0
 80065b4:	d004      	beq.n	80065c0 <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80065ba:	4618      	mov	r0, r3
 80065bc:	f000 fd1c 	bl	8006ff8 <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80065c4:	2b00      	cmp	r3, #0
 80065c6:	d004      	beq.n	80065d2 <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80065cc:	4618      	mov	r0, r3
 80065ce:	f000 fd13 	bl	8006ff8 <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80065d6:	2b00      	cmp	r3, #0
 80065d8:	d004      	beq.n	80065e4 <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80065de:	4618      	mov	r0, r3
 80065e0:	f000 fd0a 	bl	8006ff8 <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 80065e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065e6:	2b00      	cmp	r3, #0
 80065e8:	d00e      	beq.n	8006608 <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 80065ea:	6879      	ldr	r1, [r7, #4]
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	3304      	adds	r3, #4
 80065f0:	687a      	ldr	r2, [r7, #4]
 80065f2:	8b12      	ldrh	r2, [r2, #24]
 80065f4:	9202      	str	r2, [sp, #8]
 80065f6:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 80065f8:	9201      	str	r2, [sp, #4]
 80065fa:	9300      	str	r3, [sp, #0]
 80065fc:	460b      	mov	r3, r1
 80065fe:	697a      	ldr	r2, [r7, #20]
 8006600:	69b9      	ldr	r1, [r7, #24]
 8006602:	6878      	ldr	r0, [r7, #4]
 8006604:	f004 fcc2 	bl	800af8c <tcp_rst>
    }
    last_state = pcb->state;
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	7d1b      	ldrb	r3, [r3, #20]
 800660c:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 800660e:	6878      	ldr	r0, [r7, #4]
 8006610:	f7ff fd34 	bl	800607c <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 8006614:	693b      	ldr	r3, [r7, #16]
 8006616:	2b00      	cmp	r3, #0
 8006618:	d004      	beq.n	8006624 <tcp_abandon+0x154>
 800661a:	693b      	ldr	r3, [r7, #16]
 800661c:	f06f 010c 	mvn.w	r1, #12
 8006620:	68f8      	ldr	r0, [r7, #12]
 8006622:	4798      	blx	r3
  }
}
 8006624:	3728      	adds	r7, #40	; 0x28
 8006626:	46bd      	mov	sp, r7
 8006628:	bd80      	pop	{r7, pc}
 800662a:	bf00      	nop
 800662c:	0801049c 	.word	0x0801049c
 8006630:	080105e0 	.word	0x080105e0
 8006634:	080104e0 	.word	0x080104e0
 8006638:	080105fc 	.word	0x080105fc
 800663c:	200082fc 	.word	0x200082fc
 8006640:	200082f0 	.word	0x200082f0
 8006644:	200082f8 	.word	0x200082f8
 8006648:	20008300 	.word	0x20008300

0800664c <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 800664c:	b580      	push	{r7, lr}
 800664e:	b082      	sub	sp, #8
 8006650:	af00      	add	r7, sp, #0
 8006652:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 8006654:	2101      	movs	r1, #1
 8006656:	6878      	ldr	r0, [r7, #4]
 8006658:	f7ff ff3a 	bl	80064d0 <tcp_abandon>
}
 800665c:	bf00      	nop
 800665e:	3708      	adds	r7, #8
 8006660:	46bd      	mov	sp, r7
 8006662:	bd80      	pop	{r7, pc}

08006664 <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 8006664:	b580      	push	{r7, lr}
 8006666:	b084      	sub	sp, #16
 8006668:	af00      	add	r7, sp, #0
 800666a:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	2b00      	cmp	r3, #0
 8006670:	d106      	bne.n	8006680 <tcp_update_rcv_ann_wnd+0x1c>
 8006672:	4b25      	ldr	r3, [pc, #148]	; (8006708 <tcp_update_rcv_ann_wnd+0xa4>)
 8006674:	f240 32a6 	movw	r2, #934	; 0x3a6
 8006678:	4924      	ldr	r1, [pc, #144]	; (800670c <tcp_update_rcv_ann_wnd+0xa8>)
 800667a:	4825      	ldr	r0, [pc, #148]	; (8006710 <tcp_update_rcv_ann_wnd+0xac>)
 800667c:	f008 f850 	bl	800e720 <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006684:	687a      	ldr	r2, [r7, #4]
 8006686:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 8006688:	4413      	add	r3, r2
 800668a:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006690:	687a      	ldr	r2, [r7, #4]
 8006692:	8e52      	ldrh	r2, [r2, #50]	; 0x32
 8006694:	f5b2 6f86 	cmp.w	r2, #1072	; 0x430
 8006698:	bf28      	it	cs
 800669a:	f44f 6286 	movcs.w	r2, #1072	; 0x430
 800669e:	b292      	uxth	r2, r2
 80066a0:	4413      	add	r3, r2
 80066a2:	68fa      	ldr	r2, [r7, #12]
 80066a4:	1ad3      	subs	r3, r2, r3
 80066a6:	2b00      	cmp	r3, #0
 80066a8:	db08      	blt.n	80066bc <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	855a      	strh	r2, [r3, #42]	; 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066b6:	68fa      	ldr	r2, [r7, #12]
 80066b8:	1ad3      	subs	r3, r2, r3
 80066ba:	e020      	b.n	80066fe <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066c4:	1ad3      	subs	r3, r2, r3
 80066c6:	2b00      	cmp	r3, #0
 80066c8:	dd03      	ble.n	80066d2 <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	2200      	movs	r2, #0
 80066ce:	855a      	strh	r2, [r3, #42]	; 0x2a
 80066d0:	e014      	b.n	80066fc <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066da:	1ad3      	subs	r3, r2, r3
 80066dc:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 80066de:	68bb      	ldr	r3, [r7, #8]
 80066e0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80066e4:	d306      	bcc.n	80066f4 <tcp_update_rcv_ann_wnd+0x90>
 80066e6:	4b08      	ldr	r3, [pc, #32]	; (8006708 <tcp_update_rcv_ann_wnd+0xa4>)
 80066e8:	f240 32b6 	movw	r2, #950	; 0x3b6
 80066ec:	4909      	ldr	r1, [pc, #36]	; (8006714 <tcp_update_rcv_ann_wnd+0xb0>)
 80066ee:	4808      	ldr	r0, [pc, #32]	; (8006710 <tcp_update_rcv_ann_wnd+0xac>)
 80066f0:	f008 f816 	bl	800e720 <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 80066f4:	68bb      	ldr	r3, [r7, #8]
 80066f6:	b29a      	uxth	r2, r3
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
    return 0;
 80066fc:	2300      	movs	r3, #0
  }
}
 80066fe:	4618      	mov	r0, r3
 8006700:	3710      	adds	r7, #16
 8006702:	46bd      	mov	sp, r7
 8006704:	bd80      	pop	{r7, pc}
 8006706:	bf00      	nop
 8006708:	0801049c 	.word	0x0801049c
 800670c:	080106f8 	.word	0x080106f8
 8006710:	080104e0 	.word	0x080104e0
 8006714:	0801071c 	.word	0x0801071c

08006718 <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 8006718:	b580      	push	{r7, lr}
 800671a:	b084      	sub	sp, #16
 800671c:	af00      	add	r7, sp, #0
 800671e:	6078      	str	r0, [r7, #4]
 8006720:	460b      	mov	r3, r1
 8006722:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	2b00      	cmp	r3, #0
 8006728:	d107      	bne.n	800673a <tcp_recved+0x22>
 800672a:	4b1f      	ldr	r3, [pc, #124]	; (80067a8 <tcp_recved+0x90>)
 800672c:	f240 32cf 	movw	r2, #975	; 0x3cf
 8006730:	491e      	ldr	r1, [pc, #120]	; (80067ac <tcp_recved+0x94>)
 8006732:	481f      	ldr	r0, [pc, #124]	; (80067b0 <tcp_recved+0x98>)
 8006734:	f007 fff4 	bl	800e720 <iprintf>
 8006738:	e032      	b.n	80067a0 <tcp_recved+0x88>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	7d1b      	ldrb	r3, [r3, #20]
 800673e:	2b01      	cmp	r3, #1
 8006740:	d106      	bne.n	8006750 <tcp_recved+0x38>
 8006742:	4b19      	ldr	r3, [pc, #100]	; (80067a8 <tcp_recved+0x90>)
 8006744:	f240 32d2 	movw	r2, #978	; 0x3d2
 8006748:	491a      	ldr	r1, [pc, #104]	; (80067b4 <tcp_recved+0x9c>)
 800674a:	4819      	ldr	r0, [pc, #100]	; (80067b0 <tcp_recved+0x98>)
 800674c:	f007 ffe8 	bl	800e720 <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8006754:	887b      	ldrh	r3, [r7, #2]
 8006756:	4413      	add	r3, r2
 8006758:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 800675a:	89fb      	ldrh	r3, [r7, #14]
 800675c:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8006760:	d804      	bhi.n	800676c <tcp_recved+0x54>
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006766:	89fa      	ldrh	r2, [r7, #14]
 8006768:	429a      	cmp	r2, r3
 800676a:	d204      	bcs.n	8006776 <tcp_recved+0x5e>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	f44f 6206 	mov.w	r2, #2144	; 0x860
 8006772:	851a      	strh	r2, [r3, #40]	; 0x28
 8006774:	e002      	b.n	800677c <tcp_recved+0x64>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	89fa      	ldrh	r2, [r7, #14]
 800677a:	851a      	strh	r2, [r3, #40]	; 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 800677c:	6878      	ldr	r0, [r7, #4]
 800677e:	f7ff ff71 	bl	8006664 <tcp_update_rcv_ann_wnd>
 8006782:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 8006784:	68bb      	ldr	r3, [r7, #8]
 8006786:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 800678a:	d309      	bcc.n	80067a0 <tcp_recved+0x88>
    tcp_ack_now(pcb);
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	8b5b      	ldrh	r3, [r3, #26]
 8006790:	f043 0302 	orr.w	r3, r3, #2
 8006794:	b29a      	uxth	r2, r3
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800679a:	6878      	ldr	r0, [r7, #4]
 800679c:	f003 fe42 	bl	800a424 <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 80067a0:	3710      	adds	r7, #16
 80067a2:	46bd      	mov	sp, r7
 80067a4:	bd80      	pop	{r7, pc}
 80067a6:	bf00      	nop
 80067a8:	0801049c 	.word	0x0801049c
 80067ac:	08010738 	.word	0x08010738
 80067b0:	080104e0 	.word	0x080104e0
 80067b4:	08010750 	.word	0x08010750

080067b8 <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 80067b8:	b5b0      	push	{r4, r5, r7, lr}
 80067ba:	b090      	sub	sp, #64	; 0x40
 80067bc:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 80067be:	2300      	movs	r3, #0
 80067c0:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

  ++tcp_ticks;
 80067c4:	4b94      	ldr	r3, [pc, #592]	; (8006a18 <tcp_slowtmr+0x260>)
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	3301      	adds	r3, #1
 80067ca:	4a93      	ldr	r2, [pc, #588]	; (8006a18 <tcp_slowtmr+0x260>)
 80067cc:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 80067ce:	4b93      	ldr	r3, [pc, #588]	; (8006a1c <tcp_slowtmr+0x264>)
 80067d0:	781b      	ldrb	r3, [r3, #0]
 80067d2:	3301      	adds	r3, #1
 80067d4:	b2da      	uxtb	r2, r3
 80067d6:	4b91      	ldr	r3, [pc, #580]	; (8006a1c <tcp_slowtmr+0x264>)
 80067d8:	701a      	strb	r2, [r3, #0]

tcp_slowtmr_start:
  /* Steps through all of the active PCBs. */
  prev = NULL;
 80067da:	2300      	movs	r3, #0
 80067dc:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_active_pcbs;
 80067de:	4b90      	ldr	r3, [pc, #576]	; (8006a20 <tcp_slowtmr+0x268>)
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (pcb == NULL) {
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: no active pcbs\n"));
  }
  while (pcb != NULL) {
 80067e4:	e29f      	b.n	8006d26 <tcp_slowtmr+0x56e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: processing active pcb\n"));
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 80067e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80067e8:	7d1b      	ldrb	r3, [r3, #20]
 80067ea:	2b00      	cmp	r3, #0
 80067ec:	d106      	bne.n	80067fc <tcp_slowtmr+0x44>
 80067ee:	4b8d      	ldr	r3, [pc, #564]	; (8006a24 <tcp_slowtmr+0x26c>)
 80067f0:	f240 42be 	movw	r2, #1214	; 0x4be
 80067f4:	498c      	ldr	r1, [pc, #560]	; (8006a28 <tcp_slowtmr+0x270>)
 80067f6:	488d      	ldr	r0, [pc, #564]	; (8006a2c <tcp_slowtmr+0x274>)
 80067f8:	f007 ff92 	bl	800e720 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 80067fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80067fe:	7d1b      	ldrb	r3, [r3, #20]
 8006800:	2b01      	cmp	r3, #1
 8006802:	d106      	bne.n	8006812 <tcp_slowtmr+0x5a>
 8006804:	4b87      	ldr	r3, [pc, #540]	; (8006a24 <tcp_slowtmr+0x26c>)
 8006806:	f240 42bf 	movw	r2, #1215	; 0x4bf
 800680a:	4989      	ldr	r1, [pc, #548]	; (8006a30 <tcp_slowtmr+0x278>)
 800680c:	4887      	ldr	r0, [pc, #540]	; (8006a2c <tcp_slowtmr+0x274>)
 800680e:	f007 ff87 	bl	800e720 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 8006812:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006814:	7d1b      	ldrb	r3, [r3, #20]
 8006816:	2b0a      	cmp	r3, #10
 8006818:	d106      	bne.n	8006828 <tcp_slowtmr+0x70>
 800681a:	4b82      	ldr	r3, [pc, #520]	; (8006a24 <tcp_slowtmr+0x26c>)
 800681c:	f44f 6298 	mov.w	r2, #1216	; 0x4c0
 8006820:	4984      	ldr	r1, [pc, #528]	; (8006a34 <tcp_slowtmr+0x27c>)
 8006822:	4882      	ldr	r0, [pc, #520]	; (8006a2c <tcp_slowtmr+0x274>)
 8006824:	f007 ff7c 	bl	800e720 <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 8006828:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800682a:	7f9a      	ldrb	r2, [r3, #30]
 800682c:	4b7b      	ldr	r3, [pc, #492]	; (8006a1c <tcp_slowtmr+0x264>)
 800682e:	781b      	ldrb	r3, [r3, #0]
 8006830:	429a      	cmp	r2, r3
 8006832:	d105      	bne.n	8006840 <tcp_slowtmr+0x88>
      /* skip this pcb, we have already processed it */
      prev = pcb;
 8006834:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006836:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 8006838:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800683a:	68db      	ldr	r3, [r3, #12]
 800683c:	62fb      	str	r3, [r7, #44]	; 0x2c
      continue;
 800683e:	e272      	b.n	8006d26 <tcp_slowtmr+0x56e>
    }
    pcb->last_timer = tcp_timer_ctr;
 8006840:	4b76      	ldr	r3, [pc, #472]	; (8006a1c <tcp_slowtmr+0x264>)
 8006842:	781a      	ldrb	r2, [r3, #0]
 8006844:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006846:	779a      	strb	r2, [r3, #30]

    pcb_remove = 0;
 8006848:	2300      	movs	r3, #0
 800684a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    pcb_reset = 0;
 800684e:	2300      	movs	r3, #0
 8006850:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 8006854:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006856:	7d1b      	ldrb	r3, [r3, #20]
 8006858:	2b02      	cmp	r3, #2
 800685a:	d10a      	bne.n	8006872 <tcp_slowtmr+0xba>
 800685c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800685e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8006862:	2b05      	cmp	r3, #5
 8006864:	d905      	bls.n	8006872 <tcp_slowtmr+0xba>
      ++pcb_remove;
 8006866:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800686a:	3301      	adds	r3, #1
 800686c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8006870:	e11e      	b.n	8006ab0 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max SYN retries reached\n"));
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 8006872:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006874:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8006878:	2b0b      	cmp	r3, #11
 800687a:	d905      	bls.n	8006888 <tcp_slowtmr+0xd0>
      ++pcb_remove;
 800687c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006880:	3301      	adds	r3, #1
 8006882:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8006886:	e113      	b.n	8006ab0 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max DATA retries reached\n"));
    } else {
      if (pcb->persist_backoff > 0) {
 8006888:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800688a:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800688e:	2b00      	cmp	r3, #0
 8006890:	d075      	beq.n	800697e <tcp_slowtmr+0x1c6>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 8006892:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006894:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006896:	2b00      	cmp	r3, #0
 8006898:	d006      	beq.n	80068a8 <tcp_slowtmr+0xf0>
 800689a:	4b62      	ldr	r3, [pc, #392]	; (8006a24 <tcp_slowtmr+0x26c>)
 800689c:	f240 42d4 	movw	r2, #1236	; 0x4d4
 80068a0:	4965      	ldr	r1, [pc, #404]	; (8006a38 <tcp_slowtmr+0x280>)
 80068a2:	4862      	ldr	r0, [pc, #392]	; (8006a2c <tcp_slowtmr+0x274>)
 80068a4:	f007 ff3c 	bl	800e720 <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 80068a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80068aa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80068ac:	2b00      	cmp	r3, #0
 80068ae:	d106      	bne.n	80068be <tcp_slowtmr+0x106>
 80068b0:	4b5c      	ldr	r3, [pc, #368]	; (8006a24 <tcp_slowtmr+0x26c>)
 80068b2:	f240 42d5 	movw	r2, #1237	; 0x4d5
 80068b6:	4961      	ldr	r1, [pc, #388]	; (8006a3c <tcp_slowtmr+0x284>)
 80068b8:	485c      	ldr	r0, [pc, #368]	; (8006a2c <tcp_slowtmr+0x274>)
 80068ba:	f007 ff31 	bl	800e720 <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 80068be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80068c0:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 80068c4:	2b0b      	cmp	r3, #11
 80068c6:	d905      	bls.n	80068d4 <tcp_slowtmr+0x11c>
          ++pcb_remove; /* max probes reached */
 80068c8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80068cc:	3301      	adds	r3, #1
 80068ce:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80068d2:	e0ed      	b.n	8006ab0 <tcp_slowtmr+0x2f8>
        } else {
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 80068d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80068d6:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 80068da:	3b01      	subs	r3, #1
 80068dc:	4a58      	ldr	r2, [pc, #352]	; (8006a40 <tcp_slowtmr+0x288>)
 80068de:	5cd3      	ldrb	r3, [r2, r3]
 80068e0:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 80068e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80068e4:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 80068e8:	7c7a      	ldrb	r2, [r7, #17]
 80068ea:	429a      	cmp	r2, r3
 80068ec:	d907      	bls.n	80068fe <tcp_slowtmr+0x146>
            pcb->persist_cnt++;
 80068ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80068f0:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 80068f4:	3301      	adds	r3, #1
 80068f6:	b2da      	uxtb	r2, r3
 80068f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80068fa:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
          }
          if (pcb->persist_cnt >= backoff_cnt) {
 80068fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006900:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8006904:	7c7a      	ldrb	r2, [r7, #17]
 8006906:	429a      	cmp	r2, r3
 8006908:	f200 80d2 	bhi.w	8006ab0 <tcp_slowtmr+0x2f8>
            int next_slot = 1; /* increment timer to next slot */
 800690c:	2301      	movs	r3, #1
 800690e:	623b      	str	r3, [r7, #32]
            /* If snd_wnd is zero, send 1 byte probes */
            if (pcb->snd_wnd == 0) {
 8006910:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006912:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8006916:	2b00      	cmp	r3, #0
 8006918:	d108      	bne.n	800692c <tcp_slowtmr+0x174>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 800691a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800691c:	f004 fc2a 	bl	800b174 <tcp_zero_window_probe>
 8006920:	4603      	mov	r3, r0
 8006922:	2b00      	cmp	r3, #0
 8006924:	d014      	beq.n	8006950 <tcp_slowtmr+0x198>
                next_slot = 0; /* try probe again with current slot */
 8006926:	2300      	movs	r3, #0
 8006928:	623b      	str	r3, [r7, #32]
 800692a:	e011      	b.n	8006950 <tcp_slowtmr+0x198>
              }
              /* snd_wnd not fully closed, split unsent head and fill window */
            } else {
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 800692c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800692e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8006932:	4619      	mov	r1, r3
 8006934:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006936:	f003 faef 	bl	8009f18 <tcp_split_unsent_seg>
 800693a:	4603      	mov	r3, r0
 800693c:	2b00      	cmp	r3, #0
 800693e:	d107      	bne.n	8006950 <tcp_slowtmr+0x198>
                if (tcp_output(pcb) == ERR_OK) {
 8006940:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006942:	f003 fd6f 	bl	800a424 <tcp_output>
 8006946:	4603      	mov	r3, r0
 8006948:	2b00      	cmp	r3, #0
 800694a:	d101      	bne.n	8006950 <tcp_slowtmr+0x198>
                  /* sending will cancel persist timer, else retry with current slot */
                  next_slot = 0;
 800694c:	2300      	movs	r3, #0
 800694e:	623b      	str	r3, [r7, #32]
                }
              }
            }
            if (next_slot) {
 8006950:	6a3b      	ldr	r3, [r7, #32]
 8006952:	2b00      	cmp	r3, #0
 8006954:	f000 80ac 	beq.w	8006ab0 <tcp_slowtmr+0x2f8>
              pcb->persist_cnt = 0;
 8006958:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800695a:	2200      	movs	r2, #0
 800695c:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 8006960:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006962:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8006966:	2b06      	cmp	r3, #6
 8006968:	f200 80a2 	bhi.w	8006ab0 <tcp_slowtmr+0x2f8>
                pcb->persist_backoff++;
 800696c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800696e:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8006972:	3301      	adds	r3, #1
 8006974:	b2da      	uxtb	r2, r3
 8006976:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006978:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
 800697c:	e098      	b.n	8006ab0 <tcp_slowtmr+0x2f8>
            }
          }
        }
      } else {
        /* Increase the retransmission timer if it is running */
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 800697e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006980:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8006984:	2b00      	cmp	r3, #0
 8006986:	db0f      	blt.n	80069a8 <tcp_slowtmr+0x1f0>
 8006988:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800698a:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800698e:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8006992:	4293      	cmp	r3, r2
 8006994:	d008      	beq.n	80069a8 <tcp_slowtmr+0x1f0>
          ++pcb->rtime;
 8006996:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006998:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800699c:	b29b      	uxth	r3, r3
 800699e:	3301      	adds	r3, #1
 80069a0:	b29b      	uxth	r3, r3
 80069a2:	b21a      	sxth	r2, r3
 80069a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80069a6:	861a      	strh	r2, [r3, #48]	; 0x30
        }

        if (pcb->rtime >= pcb->rto) {
 80069a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80069aa:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	; 0x30
 80069ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80069b0:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 80069b4:	429a      	cmp	r2, r3
 80069b6:	db7b      	blt.n	8006ab0 <tcp_slowtmr+0x2f8>
                                      " pcb->rto %"S16_F"\n",
                                      pcb->rtime, pcb->rto));
          /* If prepare phase fails but we have unsent data but no unacked data,
             still execute the backoff calculations below, as this means we somehow
             failed to send segment. */
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 80069b8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80069ba:	f004 f827 	bl	800aa0c <tcp_rexmit_rto_prepare>
 80069be:	4603      	mov	r3, r0
 80069c0:	2b00      	cmp	r3, #0
 80069c2:	d007      	beq.n	80069d4 <tcp_slowtmr+0x21c>
 80069c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80069c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80069c8:	2b00      	cmp	r3, #0
 80069ca:	d171      	bne.n	8006ab0 <tcp_slowtmr+0x2f8>
 80069cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80069ce:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80069d0:	2b00      	cmp	r3, #0
 80069d2:	d06d      	beq.n	8006ab0 <tcp_slowtmr+0x2f8>
            /* Double retransmission time-out unless we are trying to
             * connect to somebody (i.e., we are in SYN_SENT). */
            if (pcb->state != SYN_SENT) {
 80069d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80069d6:	7d1b      	ldrb	r3, [r3, #20]
 80069d8:	2b02      	cmp	r3, #2
 80069da:	d03a      	beq.n	8006a52 <tcp_slowtmr+0x29a>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 80069dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80069de:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80069e2:	2b0c      	cmp	r3, #12
 80069e4:	bf28      	it	cs
 80069e6:	230c      	movcs	r3, #12
 80069e8:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 80069ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80069ec:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 80069f0:	10db      	asrs	r3, r3, #3
 80069f2:	b21b      	sxth	r3, r3
 80069f4:	461a      	mov	r2, r3
 80069f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80069f8:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 80069fc:	4413      	add	r3, r2
 80069fe:	7efa      	ldrb	r2, [r7, #27]
 8006a00:	4910      	ldr	r1, [pc, #64]	; (8006a44 <tcp_slowtmr+0x28c>)
 8006a02:	5c8a      	ldrb	r2, [r1, r2]
 8006a04:	4093      	lsls	r3, r2
 8006a06:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 8006a08:	697b      	ldr	r3, [r7, #20]
 8006a0a:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 8006a0e:	4293      	cmp	r3, r2
 8006a10:	dc1a      	bgt.n	8006a48 <tcp_slowtmr+0x290>
 8006a12:	697b      	ldr	r3, [r7, #20]
 8006a14:	b21a      	sxth	r2, r3
 8006a16:	e019      	b.n	8006a4c <tcp_slowtmr+0x294>
 8006a18:	200082ec 	.word	0x200082ec
 8006a1c:	20008302 	.word	0x20008302
 8006a20:	200082f8 	.word	0x200082f8
 8006a24:	0801049c 	.word	0x0801049c
 8006a28:	080107e0 	.word	0x080107e0
 8006a2c:	080104e0 	.word	0x080104e0
 8006a30:	0801080c 	.word	0x0801080c
 8006a34:	08010838 	.word	0x08010838
 8006a38:	08010868 	.word	0x08010868
 8006a3c:	0801089c 	.word	0x0801089c
 8006a40:	08012474 	.word	0x08012474
 8006a44:	08012464 	.word	0x08012464
 8006a48:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8006a4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a4e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
            }

            /* Reset the retransmission timer. */
            pcb->rtime = 0;
 8006a52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a54:	2200      	movs	r2, #0
 8006a56:	861a      	strh	r2, [r3, #48]	; 0x30

            /* Reduce congestion window and ssthresh. */
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 8006a58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a5a:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8006a5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a60:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8006a64:	4293      	cmp	r3, r2
 8006a66:	bf28      	it	cs
 8006a68:	4613      	movcs	r3, r2
 8006a6a:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 8006a6c:	8a7b      	ldrh	r3, [r7, #18]
 8006a6e:	085b      	lsrs	r3, r3, #1
 8006a70:	b29a      	uxth	r2, r3
 8006a72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a74:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 8006a78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a7a:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8006a7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a80:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8006a82:	005b      	lsls	r3, r3, #1
 8006a84:	b29b      	uxth	r3, r3
 8006a86:	429a      	cmp	r2, r3
 8006a88:	d206      	bcs.n	8006a98 <tcp_slowtmr+0x2e0>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 8006a8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a8c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8006a8e:	005b      	lsls	r3, r3, #1
 8006a90:	b29a      	uxth	r2, r3
 8006a92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a94:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            }
            pcb->cwnd = pcb->mss;
 8006a98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a9a:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 8006a9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a9e:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
            LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: cwnd %"TCPWNDSIZE_F
                                         " ssthresh %"TCPWNDSIZE_F"\n",
                                         pcb->cwnd, pcb->ssthresh));
            pcb->bytes_acked = 0;
 8006aa2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006aa4:	2200      	movs	r2, #0
 8006aa6:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

            /* The following needs to be called AFTER cwnd is set to one
               mss - STJ */
            tcp_rexmit_rto_commit(pcb);
 8006aaa:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006aac:	f004 f81e 	bl	800aaec <tcp_rexmit_rto_commit>
          }
        }
      }
    }
    /* Check if this PCB has stayed too long in FIN-WAIT-2 */
    if (pcb->state == FIN_WAIT_2) {
 8006ab0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ab2:	7d1b      	ldrb	r3, [r3, #20]
 8006ab4:	2b06      	cmp	r3, #6
 8006ab6:	d111      	bne.n	8006adc <tcp_slowtmr+0x324>
      /* If this PCB is in FIN_WAIT_2 because of SHUT_WR don't let it time out. */
      if (pcb->flags & TF_RXCLOSED) {
 8006ab8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006aba:	8b5b      	ldrh	r3, [r3, #26]
 8006abc:	f003 0310 	and.w	r3, r3, #16
 8006ac0:	2b00      	cmp	r3, #0
 8006ac2:	d00b      	beq.n	8006adc <tcp_slowtmr+0x324>
        /* PCB was fully closed (either through close() or SHUT_RDWR):
           normal FIN-WAIT timeout handling. */
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 8006ac4:	4b9d      	ldr	r3, [pc, #628]	; (8006d3c <tcp_slowtmr+0x584>)
 8006ac6:	681a      	ldr	r2, [r3, #0]
 8006ac8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006aca:	6a1b      	ldr	r3, [r3, #32]
 8006acc:	1ad3      	subs	r3, r2, r3
 8006ace:	2b28      	cmp	r3, #40	; 0x28
 8006ad0:	d904      	bls.n	8006adc <tcp_slowtmr+0x324>
            TCP_FIN_WAIT_TIMEOUT / TCP_SLOW_INTERVAL) {
          ++pcb_remove;
 8006ad2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006ad6:	3301      	adds	r3, #1
 8006ad8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        }
      }
    }

    /* Check if KEEPALIVE should be sent */
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 8006adc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ade:	7a5b      	ldrb	r3, [r3, #9]
 8006ae0:	f003 0308 	and.w	r3, r3, #8
 8006ae4:	2b00      	cmp	r3, #0
 8006ae6:	d04c      	beq.n	8006b82 <tcp_slowtmr+0x3ca>
        ((pcb->state == ESTABLISHED) ||
 8006ae8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006aea:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 8006aec:	2b04      	cmp	r3, #4
 8006aee:	d003      	beq.n	8006af8 <tcp_slowtmr+0x340>
         (pcb->state == CLOSE_WAIT))) {
 8006af0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006af2:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 8006af4:	2b07      	cmp	r3, #7
 8006af6:	d144      	bne.n	8006b82 <tcp_slowtmr+0x3ca>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8006af8:	4b90      	ldr	r3, [pc, #576]	; (8006d3c <tcp_slowtmr+0x584>)
 8006afa:	681a      	ldr	r2, [r3, #0]
 8006afc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006afe:	6a1b      	ldr	r3, [r3, #32]
 8006b00:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 8006b02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b04:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006b08:	f503 2324 	add.w	r3, r3, #671744	; 0xa4000
 8006b0c:	f603 43b8 	addw	r3, r3, #3256	; 0xcb8
 8006b10:	498b      	ldr	r1, [pc, #556]	; (8006d40 <tcp_slowtmr+0x588>)
 8006b12:	fba1 1303 	umull	r1, r3, r1, r3
 8006b16:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8006b18:	429a      	cmp	r2, r3
 8006b1a:	d90a      	bls.n	8006b32 <tcp_slowtmr+0x37a>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: KEEPALIVE timeout. Aborting connection to "));
        ip_addr_debug_print_val(TCP_DEBUG, pcb->remote_ip);
        LWIP_DEBUGF(TCP_DEBUG, ("\n"));

        ++pcb_remove;
 8006b1c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006b20:	3301      	adds	r3, #1
 8006b22:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        ++pcb_reset;
 8006b26:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8006b2a:	3301      	adds	r3, #1
 8006b2c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8006b30:	e027      	b.n	8006b82 <tcp_slowtmr+0x3ca>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 8006b32:	4b82      	ldr	r3, [pc, #520]	; (8006d3c <tcp_slowtmr+0x584>)
 8006b34:	681a      	ldr	r2, [r3, #0]
 8006b36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b38:	6a1b      	ldr	r3, [r3, #32]
 8006b3a:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 8006b3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b3e:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 8006b42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b44:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 8006b48:	4618      	mov	r0, r3
 8006b4a:	4b7e      	ldr	r3, [pc, #504]	; (8006d44 <tcp_slowtmr+0x58c>)
 8006b4c:	fb00 f303 	mul.w	r3, r0, r3
 8006b50:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 8006b52:	497b      	ldr	r1, [pc, #492]	; (8006d40 <tcp_slowtmr+0x588>)
 8006b54:	fba1 1303 	umull	r1, r3, r1, r3
 8006b58:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 8006b5a:	429a      	cmp	r2, r3
 8006b5c:	d911      	bls.n	8006b82 <tcp_slowtmr+0x3ca>
        err = tcp_keepalive(pcb);
 8006b5e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006b60:	f004 fac8 	bl	800b0f4 <tcp_keepalive>
 8006b64:	4603      	mov	r3, r0
 8006b66:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (err == ERR_OK) {
 8006b6a:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 8006b6e:	2b00      	cmp	r3, #0
 8006b70:	d107      	bne.n	8006b82 <tcp_slowtmr+0x3ca>
          pcb->keep_cnt_sent++;
 8006b72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b74:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 8006b78:	3301      	adds	r3, #1
 8006b7a:	b2da      	uxtb	r2, r3
 8006b7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b7e:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b

    /* If this PCB has queued out of sequence data, but has been
       inactive for too long, will drop the data (it will eventually
       be retransmitted). */
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL &&
 8006b82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b84:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006b86:	2b00      	cmp	r3, #0
 8006b88:	d011      	beq.n	8006bae <tcp_slowtmr+0x3f6>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 8006b8a:	4b6c      	ldr	r3, [pc, #432]	; (8006d3c <tcp_slowtmr+0x584>)
 8006b8c:	681a      	ldr	r2, [r3, #0]
 8006b8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b90:	6a1b      	ldr	r3, [r3, #32]
 8006b92:	1ad2      	subs	r2, r2, r3
 8006b94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b96:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 8006b9a:	4619      	mov	r1, r3
 8006b9c:	460b      	mov	r3, r1
 8006b9e:	005b      	lsls	r3, r3, #1
 8006ba0:	440b      	add	r3, r1
 8006ba2:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 8006ba4:	429a      	cmp	r2, r3
 8006ba6:	d302      	bcc.n	8006bae <tcp_slowtmr+0x3f6>
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: dropping OOSEQ queued data\n"));
      tcp_free_ooseq(pcb);
 8006ba8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006baa:	f000 fddb 	bl	8007764 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Check if this PCB has stayed too long in SYN-RCVD */
    if (pcb->state == SYN_RCVD) {
 8006bae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006bb0:	7d1b      	ldrb	r3, [r3, #20]
 8006bb2:	2b03      	cmp	r3, #3
 8006bb4:	d10b      	bne.n	8006bce <tcp_slowtmr+0x416>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8006bb6:	4b61      	ldr	r3, [pc, #388]	; (8006d3c <tcp_slowtmr+0x584>)
 8006bb8:	681a      	ldr	r2, [r3, #0]
 8006bba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006bbc:	6a1b      	ldr	r3, [r3, #32]
 8006bbe:	1ad3      	subs	r3, r2, r3
 8006bc0:	2b28      	cmp	r3, #40	; 0x28
 8006bc2:	d904      	bls.n	8006bce <tcp_slowtmr+0x416>
          TCP_SYN_RCVD_TIMEOUT / TCP_SLOW_INTERVAL) {
        ++pcb_remove;
 8006bc4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006bc8:	3301      	adds	r3, #1
 8006bca:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in SYN-RCVD\n"));
      }
    }

    /* Check if this PCB has stayed too long in LAST-ACK */
    if (pcb->state == LAST_ACK) {
 8006bce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006bd0:	7d1b      	ldrb	r3, [r3, #20]
 8006bd2:	2b09      	cmp	r3, #9
 8006bd4:	d10b      	bne.n	8006bee <tcp_slowtmr+0x436>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 8006bd6:	4b59      	ldr	r3, [pc, #356]	; (8006d3c <tcp_slowtmr+0x584>)
 8006bd8:	681a      	ldr	r2, [r3, #0]
 8006bda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006bdc:	6a1b      	ldr	r3, [r3, #32]
 8006bde:	1ad3      	subs	r3, r2, r3
 8006be0:	2bf0      	cmp	r3, #240	; 0xf0
 8006be2:	d904      	bls.n	8006bee <tcp_slowtmr+0x436>
        ++pcb_remove;
 8006be4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006be8:	3301      	adds	r3, #1
 8006bea:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in LAST-ACK\n"));
      }
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 8006bee:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006bf2:	2b00      	cmp	r3, #0
 8006bf4:	d060      	beq.n	8006cb8 <tcp_slowtmr+0x500>
      struct tcp_pcb *pcb2;
#if LWIP_CALLBACK_API
      tcp_err_fn err_fn = pcb->errf;
 8006bf6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006bf8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006bfc:	60fb      	str	r3, [r7, #12]
#endif /* LWIP_CALLBACK_API */
      void *err_arg;
      enum tcp_state last_state;
      tcp_pcb_purge(pcb);
 8006bfe:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006c00:	f000 fbfc 	bl	80073fc <tcp_pcb_purge>
      /* Remove PCB from tcp_active_pcbs list. */
      if (prev != NULL) {
 8006c04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c06:	2b00      	cmp	r3, #0
 8006c08:	d010      	beq.n	8006c2c <tcp_slowtmr+0x474>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 8006c0a:	4b4f      	ldr	r3, [pc, #316]	; (8006d48 <tcp_slowtmr+0x590>)
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006c10:	429a      	cmp	r2, r3
 8006c12:	d106      	bne.n	8006c22 <tcp_slowtmr+0x46a>
 8006c14:	4b4d      	ldr	r3, [pc, #308]	; (8006d4c <tcp_slowtmr+0x594>)
 8006c16:	f240 526d 	movw	r2, #1389	; 0x56d
 8006c1a:	494d      	ldr	r1, [pc, #308]	; (8006d50 <tcp_slowtmr+0x598>)
 8006c1c:	484d      	ldr	r0, [pc, #308]	; (8006d54 <tcp_slowtmr+0x59c>)
 8006c1e:	f007 fd7f 	bl	800e720 <iprintf>
        prev->next = pcb->next;
 8006c22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c24:	68da      	ldr	r2, [r3, #12]
 8006c26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c28:	60da      	str	r2, [r3, #12]
 8006c2a:	e00f      	b.n	8006c4c <tcp_slowtmr+0x494>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 8006c2c:	4b46      	ldr	r3, [pc, #280]	; (8006d48 <tcp_slowtmr+0x590>)
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006c32:	429a      	cmp	r2, r3
 8006c34:	d006      	beq.n	8006c44 <tcp_slowtmr+0x48c>
 8006c36:	4b45      	ldr	r3, [pc, #276]	; (8006d4c <tcp_slowtmr+0x594>)
 8006c38:	f240 5271 	movw	r2, #1393	; 0x571
 8006c3c:	4946      	ldr	r1, [pc, #280]	; (8006d58 <tcp_slowtmr+0x5a0>)
 8006c3e:	4845      	ldr	r0, [pc, #276]	; (8006d54 <tcp_slowtmr+0x59c>)
 8006c40:	f007 fd6e 	bl	800e720 <iprintf>
        tcp_active_pcbs = pcb->next;
 8006c44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c46:	68db      	ldr	r3, [r3, #12]
 8006c48:	4a3f      	ldr	r2, [pc, #252]	; (8006d48 <tcp_slowtmr+0x590>)
 8006c4a:	6013      	str	r3, [r2, #0]
      }

      if (pcb_reset) {
 8006c4c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8006c50:	2b00      	cmp	r3, #0
 8006c52:	d013      	beq.n	8006c7c <tcp_slowtmr+0x4c4>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 8006c54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c56:	6d18      	ldr	r0, [r3, #80]	; 0x50
 8006c58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c5a:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8006c5c:	6afd      	ldr	r5, [r7, #44]	; 0x2c
 8006c5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c60:	3304      	adds	r3, #4
 8006c62:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006c64:	8ad2      	ldrh	r2, [r2, #22]
 8006c66:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006c68:	8b09      	ldrh	r1, [r1, #24]
 8006c6a:	9102      	str	r1, [sp, #8]
 8006c6c:	9201      	str	r2, [sp, #4]
 8006c6e:	9300      	str	r3, [sp, #0]
 8006c70:	462b      	mov	r3, r5
 8006c72:	4622      	mov	r2, r4
 8006c74:	4601      	mov	r1, r0
 8006c76:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006c78:	f004 f988 	bl	800af8c <tcp_rst>
                pcb->local_port, pcb->remote_port);
      }

      err_arg = pcb->callback_arg;
 8006c7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c7e:	691b      	ldr	r3, [r3, #16]
 8006c80:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 8006c82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c84:	7d1b      	ldrb	r3, [r3, #20]
 8006c86:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 8006c88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c8a:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 8006c8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c8e:	68db      	ldr	r3, [r3, #12]
 8006c90:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 8006c92:	6838      	ldr	r0, [r7, #0]
 8006c94:	f7ff f9f2 	bl	800607c <tcp_free>

      tcp_active_pcbs_changed = 0;
 8006c98:	4b30      	ldr	r3, [pc, #192]	; (8006d5c <tcp_slowtmr+0x5a4>)
 8006c9a:	2200      	movs	r2, #0
 8006c9c:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 8006c9e:	68fb      	ldr	r3, [r7, #12]
 8006ca0:	2b00      	cmp	r3, #0
 8006ca2:	d004      	beq.n	8006cae <tcp_slowtmr+0x4f6>
 8006ca4:	68fb      	ldr	r3, [r7, #12]
 8006ca6:	f06f 010c 	mvn.w	r1, #12
 8006caa:	68b8      	ldr	r0, [r7, #8]
 8006cac:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 8006cae:	4b2b      	ldr	r3, [pc, #172]	; (8006d5c <tcp_slowtmr+0x5a4>)
 8006cb0:	781b      	ldrb	r3, [r3, #0]
 8006cb2:	2b00      	cmp	r3, #0
 8006cb4:	d037      	beq.n	8006d26 <tcp_slowtmr+0x56e>
        goto tcp_slowtmr_start;
 8006cb6:	e590      	b.n	80067da <tcp_slowtmr+0x22>
      }
    } else {
      /* get the 'next' element now and work with 'prev' below (in case of abort) */
      prev = pcb;
 8006cb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006cba:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 8006cbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006cbe:	68db      	ldr	r3, [r3, #12]
 8006cc0:	62fb      	str	r3, [r7, #44]	; 0x2c

      /* We check if we should poll the connection. */
      ++prev->polltmr;
 8006cc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006cc4:	7f1b      	ldrb	r3, [r3, #28]
 8006cc6:	3301      	adds	r3, #1
 8006cc8:	b2da      	uxtb	r2, r3
 8006cca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ccc:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 8006cce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006cd0:	7f1a      	ldrb	r2, [r3, #28]
 8006cd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006cd4:	7f5b      	ldrb	r3, [r3, #29]
 8006cd6:	429a      	cmp	r2, r3
 8006cd8:	d325      	bcc.n	8006d26 <tcp_slowtmr+0x56e>
        prev->polltmr = 0;
 8006cda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006cdc:	2200      	movs	r2, #0
 8006cde:	771a      	strb	r2, [r3, #28]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
 8006ce0:	4b1e      	ldr	r3, [pc, #120]	; (8006d5c <tcp_slowtmr+0x5a4>)
 8006ce2:	2200      	movs	r2, #0
 8006ce4:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 8006ce6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ce8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006cec:	2b00      	cmp	r3, #0
 8006cee:	d00b      	beq.n	8006d08 <tcp_slowtmr+0x550>
 8006cf0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006cf2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006cf6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006cf8:	6912      	ldr	r2, [r2, #16]
 8006cfa:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006cfc:	4610      	mov	r0, r2
 8006cfe:	4798      	blx	r3
 8006d00:	4603      	mov	r3, r0
 8006d02:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 8006d06:	e002      	b.n	8006d0e <tcp_slowtmr+0x556>
 8006d08:	2300      	movs	r3, #0
 8006d0a:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (tcp_active_pcbs_changed) {
 8006d0e:	4b13      	ldr	r3, [pc, #76]	; (8006d5c <tcp_slowtmr+0x5a4>)
 8006d10:	781b      	ldrb	r3, [r3, #0]
 8006d12:	2b00      	cmp	r3, #0
 8006d14:	d000      	beq.n	8006d18 <tcp_slowtmr+0x560>
          goto tcp_slowtmr_start;
 8006d16:	e560      	b.n	80067da <tcp_slowtmr+0x22>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 8006d18:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 8006d1c:	2b00      	cmp	r3, #0
 8006d1e:	d102      	bne.n	8006d26 <tcp_slowtmr+0x56e>
          tcp_output(prev);
 8006d20:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006d22:	f003 fb7f 	bl	800a424 <tcp_output>
  while (pcb != NULL) {
 8006d26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d28:	2b00      	cmp	r3, #0
 8006d2a:	f47f ad5c 	bne.w	80067e6 <tcp_slowtmr+0x2e>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 8006d2e:	2300      	movs	r3, #0
 8006d30:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_tw_pcbs;
 8006d32:	4b0b      	ldr	r3, [pc, #44]	; (8006d60 <tcp_slowtmr+0x5a8>)
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 8006d38:	e067      	b.n	8006e0a <tcp_slowtmr+0x652>
 8006d3a:	bf00      	nop
 8006d3c:	200082ec 	.word	0x200082ec
 8006d40:	10624dd3 	.word	0x10624dd3
 8006d44:	000124f8 	.word	0x000124f8
 8006d48:	200082f8 	.word	0x200082f8
 8006d4c:	0801049c 	.word	0x0801049c
 8006d50:	080108d4 	.word	0x080108d4
 8006d54:	080104e0 	.word	0x080104e0
 8006d58:	08010900 	.word	0x08010900
 8006d5c:	20008300 	.word	0x20008300
 8006d60:	200082fc 	.word	0x200082fc
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8006d64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d66:	7d1b      	ldrb	r3, [r3, #20]
 8006d68:	2b0a      	cmp	r3, #10
 8006d6a:	d006      	beq.n	8006d7a <tcp_slowtmr+0x5c2>
 8006d6c:	4b2b      	ldr	r3, [pc, #172]	; (8006e1c <tcp_slowtmr+0x664>)
 8006d6e:	f240 52a1 	movw	r2, #1441	; 0x5a1
 8006d72:	492b      	ldr	r1, [pc, #172]	; (8006e20 <tcp_slowtmr+0x668>)
 8006d74:	482b      	ldr	r0, [pc, #172]	; (8006e24 <tcp_slowtmr+0x66c>)
 8006d76:	f007 fcd3 	bl	800e720 <iprintf>
    pcb_remove = 0;
 8006d7a:	2300      	movs	r3, #0
 8006d7c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 8006d80:	4b29      	ldr	r3, [pc, #164]	; (8006e28 <tcp_slowtmr+0x670>)
 8006d82:	681a      	ldr	r2, [r3, #0]
 8006d84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d86:	6a1b      	ldr	r3, [r3, #32]
 8006d88:	1ad3      	subs	r3, r2, r3
 8006d8a:	2bf0      	cmp	r3, #240	; 0xf0
 8006d8c:	d904      	bls.n	8006d98 <tcp_slowtmr+0x5e0>
      ++pcb_remove;
 8006d8e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006d92:	3301      	adds	r3, #1
 8006d94:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 8006d98:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006d9c:	2b00      	cmp	r3, #0
 8006d9e:	d02f      	beq.n	8006e00 <tcp_slowtmr+0x648>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 8006da0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006da2:	f000 fb2b 	bl	80073fc <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 8006da6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006da8:	2b00      	cmp	r3, #0
 8006daa:	d010      	beq.n	8006dce <tcp_slowtmr+0x616>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 8006dac:	4b1f      	ldr	r3, [pc, #124]	; (8006e2c <tcp_slowtmr+0x674>)
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006db2:	429a      	cmp	r2, r3
 8006db4:	d106      	bne.n	8006dc4 <tcp_slowtmr+0x60c>
 8006db6:	4b19      	ldr	r3, [pc, #100]	; (8006e1c <tcp_slowtmr+0x664>)
 8006db8:	f240 52af 	movw	r2, #1455	; 0x5af
 8006dbc:	491c      	ldr	r1, [pc, #112]	; (8006e30 <tcp_slowtmr+0x678>)
 8006dbe:	4819      	ldr	r0, [pc, #100]	; (8006e24 <tcp_slowtmr+0x66c>)
 8006dc0:	f007 fcae 	bl	800e720 <iprintf>
        prev->next = pcb->next;
 8006dc4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006dc6:	68da      	ldr	r2, [r3, #12]
 8006dc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006dca:	60da      	str	r2, [r3, #12]
 8006dcc:	e00f      	b.n	8006dee <tcp_slowtmr+0x636>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 8006dce:	4b17      	ldr	r3, [pc, #92]	; (8006e2c <tcp_slowtmr+0x674>)
 8006dd0:	681b      	ldr	r3, [r3, #0]
 8006dd2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006dd4:	429a      	cmp	r2, r3
 8006dd6:	d006      	beq.n	8006de6 <tcp_slowtmr+0x62e>
 8006dd8:	4b10      	ldr	r3, [pc, #64]	; (8006e1c <tcp_slowtmr+0x664>)
 8006dda:	f240 52b3 	movw	r2, #1459	; 0x5b3
 8006dde:	4915      	ldr	r1, [pc, #84]	; (8006e34 <tcp_slowtmr+0x67c>)
 8006de0:	4810      	ldr	r0, [pc, #64]	; (8006e24 <tcp_slowtmr+0x66c>)
 8006de2:	f007 fc9d 	bl	800e720 <iprintf>
        tcp_tw_pcbs = pcb->next;
 8006de6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006de8:	68db      	ldr	r3, [r3, #12]
 8006dea:	4a10      	ldr	r2, [pc, #64]	; (8006e2c <tcp_slowtmr+0x674>)
 8006dec:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 8006dee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006df0:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 8006df2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006df4:	68db      	ldr	r3, [r3, #12]
 8006df6:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 8006df8:	69f8      	ldr	r0, [r7, #28]
 8006dfa:	f7ff f93f 	bl	800607c <tcp_free>
 8006dfe:	e004      	b.n	8006e0a <tcp_slowtmr+0x652>
    } else {
      prev = pcb;
 8006e00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e02:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 8006e04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e06:	68db      	ldr	r3, [r3, #12]
 8006e08:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 8006e0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e0c:	2b00      	cmp	r3, #0
 8006e0e:	d1a9      	bne.n	8006d64 <tcp_slowtmr+0x5ac>
    }
  }
}
 8006e10:	bf00      	nop
 8006e12:	bf00      	nop
 8006e14:	3730      	adds	r7, #48	; 0x30
 8006e16:	46bd      	mov	sp, r7
 8006e18:	bdb0      	pop	{r4, r5, r7, pc}
 8006e1a:	bf00      	nop
 8006e1c:	0801049c 	.word	0x0801049c
 8006e20:	0801092c 	.word	0x0801092c
 8006e24:	080104e0 	.word	0x080104e0
 8006e28:	200082ec 	.word	0x200082ec
 8006e2c:	200082fc 	.word	0x200082fc
 8006e30:	0801095c 	.word	0x0801095c
 8006e34:	08010984 	.word	0x08010984

08006e38 <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 8006e38:	b580      	push	{r7, lr}
 8006e3a:	b082      	sub	sp, #8
 8006e3c:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 8006e3e:	4b2d      	ldr	r3, [pc, #180]	; (8006ef4 <tcp_fasttmr+0xbc>)
 8006e40:	781b      	ldrb	r3, [r3, #0]
 8006e42:	3301      	adds	r3, #1
 8006e44:	b2da      	uxtb	r2, r3
 8006e46:	4b2b      	ldr	r3, [pc, #172]	; (8006ef4 <tcp_fasttmr+0xbc>)
 8006e48:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 8006e4a:	4b2b      	ldr	r3, [pc, #172]	; (8006ef8 <tcp_fasttmr+0xc0>)
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 8006e50:	e048      	b.n	8006ee4 <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	7f9a      	ldrb	r2, [r3, #30]
 8006e56:	4b27      	ldr	r3, [pc, #156]	; (8006ef4 <tcp_fasttmr+0xbc>)
 8006e58:	781b      	ldrb	r3, [r3, #0]
 8006e5a:	429a      	cmp	r2, r3
 8006e5c:	d03f      	beq.n	8006ede <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 8006e5e:	4b25      	ldr	r3, [pc, #148]	; (8006ef4 <tcp_fasttmr+0xbc>)
 8006e60:	781a      	ldrb	r2, [r3, #0]
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	8b5b      	ldrh	r3, [r3, #26]
 8006e6a:	f003 0301 	and.w	r3, r3, #1
 8006e6e:	2b00      	cmp	r3, #0
 8006e70:	d010      	beq.n	8006e94 <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	8b5b      	ldrh	r3, [r3, #26]
 8006e76:	f043 0302 	orr.w	r3, r3, #2
 8006e7a:	b29a      	uxth	r2, r3
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 8006e80:	6878      	ldr	r0, [r7, #4]
 8006e82:	f003 facf 	bl	800a424 <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	8b5b      	ldrh	r3, [r3, #26]
 8006e8a:	f023 0303 	bic.w	r3, r3, #3
 8006e8e:	b29a      	uxth	r2, r3
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	8b5b      	ldrh	r3, [r3, #26]
 8006e98:	f003 0308 	and.w	r3, r3, #8
 8006e9c:	2b00      	cmp	r3, #0
 8006e9e:	d009      	beq.n	8006eb4 <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	8b5b      	ldrh	r3, [r3, #26]
 8006ea4:	f023 0308 	bic.w	r3, r3, #8
 8006ea8:	b29a      	uxth	r2, r3
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 8006eae:	6878      	ldr	r0, [r7, #4]
 8006eb0:	f7ff fa78 	bl	80063a4 <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	68db      	ldr	r3, [r3, #12]
 8006eb8:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006ebe:	2b00      	cmp	r3, #0
 8006ec0:	d00a      	beq.n	8006ed8 <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 8006ec2:	4b0e      	ldr	r3, [pc, #56]	; (8006efc <tcp_fasttmr+0xc4>)
 8006ec4:	2200      	movs	r2, #0
 8006ec6:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 8006ec8:	6878      	ldr	r0, [r7, #4]
 8006eca:	f000 f819 	bl	8006f00 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 8006ece:	4b0b      	ldr	r3, [pc, #44]	; (8006efc <tcp_fasttmr+0xc4>)
 8006ed0:	781b      	ldrb	r3, [r3, #0]
 8006ed2:	2b00      	cmp	r3, #0
 8006ed4:	d000      	beq.n	8006ed8 <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 8006ed6:	e7b8      	b.n	8006e4a <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 8006ed8:	683b      	ldr	r3, [r7, #0]
 8006eda:	607b      	str	r3, [r7, #4]
 8006edc:	e002      	b.n	8006ee4 <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	68db      	ldr	r3, [r3, #12]
 8006ee2:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	2b00      	cmp	r3, #0
 8006ee8:	d1b3      	bne.n	8006e52 <tcp_fasttmr+0x1a>
    }
  }
}
 8006eea:	bf00      	nop
 8006eec:	bf00      	nop
 8006eee:	3708      	adds	r7, #8
 8006ef0:	46bd      	mov	sp, r7
 8006ef2:	bd80      	pop	{r7, pc}
 8006ef4:	20008302 	.word	0x20008302
 8006ef8:	200082f8 	.word	0x200082f8
 8006efc:	20008300 	.word	0x20008300

08006f00 <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 8006f00:	b590      	push	{r4, r7, lr}
 8006f02:	b085      	sub	sp, #20
 8006f04:	af00      	add	r7, sp, #0
 8006f06:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	2b00      	cmp	r3, #0
 8006f0c:	d109      	bne.n	8006f22 <tcp_process_refused_data+0x22>
 8006f0e:	4b37      	ldr	r3, [pc, #220]	; (8006fec <tcp_process_refused_data+0xec>)
 8006f10:	f240 6209 	movw	r2, #1545	; 0x609
 8006f14:	4936      	ldr	r1, [pc, #216]	; (8006ff0 <tcp_process_refused_data+0xf0>)
 8006f16:	4837      	ldr	r0, [pc, #220]	; (8006ff4 <tcp_process_refused_data+0xf4>)
 8006f18:	f007 fc02 	bl	800e720 <iprintf>
 8006f1c:	f06f 030f 	mvn.w	r3, #15
 8006f20:	e060      	b.n	8006fe4 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006f26:	7b5b      	ldrb	r3, [r3, #13]
 8006f28:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006f2e:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	2200      	movs	r2, #0
 8006f34:	679a      	str	r2, [r3, #120]	; 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006f3c:	2b00      	cmp	r3, #0
 8006f3e:	d00b      	beq.n	8006f58 <tcp_process_refused_data+0x58>
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	6918      	ldr	r0, [r3, #16]
 8006f4a:	2300      	movs	r3, #0
 8006f4c:	68ba      	ldr	r2, [r7, #8]
 8006f4e:	6879      	ldr	r1, [r7, #4]
 8006f50:	47a0      	blx	r4
 8006f52:	4603      	mov	r3, r0
 8006f54:	73fb      	strb	r3, [r7, #15]
 8006f56:	e007      	b.n	8006f68 <tcp_process_refused_data+0x68>
 8006f58:	2300      	movs	r3, #0
 8006f5a:	68ba      	ldr	r2, [r7, #8]
 8006f5c:	6879      	ldr	r1, [r7, #4]
 8006f5e:	2000      	movs	r0, #0
 8006f60:	f000 f8a4 	bl	80070ac <tcp_recv_null>
 8006f64:	4603      	mov	r3, r0
 8006f66:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 8006f68:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006f6c:	2b00      	cmp	r3, #0
 8006f6e:	d12a      	bne.n	8006fc6 <tcp_process_refused_data+0xc6>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 8006f70:	7bbb      	ldrb	r3, [r7, #14]
 8006f72:	f003 0320 	and.w	r3, r3, #32
 8006f76:	2b00      	cmp	r3, #0
 8006f78:	d033      	beq.n	8006fe2 <tcp_process_refused_data+0xe2>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006f7e:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8006f82:	d005      	beq.n	8006f90 <tcp_process_refused_data+0x90>
          pcb->rcv_wnd++;
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006f88:	3301      	adds	r3, #1
 8006f8a:	b29a      	uxth	r2, r3
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	851a      	strh	r2, [r3, #40]	; 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006f96:	2b00      	cmp	r3, #0
 8006f98:	d00b      	beq.n	8006fb2 <tcp_process_refused_data+0xb2>
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	6918      	ldr	r0, [r3, #16]
 8006fa4:	2300      	movs	r3, #0
 8006fa6:	2200      	movs	r2, #0
 8006fa8:	6879      	ldr	r1, [r7, #4]
 8006faa:	47a0      	blx	r4
 8006fac:	4603      	mov	r3, r0
 8006fae:	73fb      	strb	r3, [r7, #15]
 8006fb0:	e001      	b.n	8006fb6 <tcp_process_refused_data+0xb6>
 8006fb2:	2300      	movs	r3, #0
 8006fb4:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 8006fb6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006fba:	f113 0f0d 	cmn.w	r3, #13
 8006fbe:	d110      	bne.n	8006fe2 <tcp_process_refused_data+0xe2>
          return ERR_ABRT;
 8006fc0:	f06f 030c 	mvn.w	r3, #12
 8006fc4:	e00e      	b.n	8006fe4 <tcp_process_refused_data+0xe4>
        }
      }
    } else if (err == ERR_ABRT) {
 8006fc6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006fca:	f113 0f0d 	cmn.w	r3, #13
 8006fce:	d102      	bne.n	8006fd6 <tcp_process_refused_data+0xd6>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 8006fd0:	f06f 030c 	mvn.w	r3, #12
 8006fd4:	e006      	b.n	8006fe4 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	68ba      	ldr	r2, [r7, #8]
 8006fda:	679a      	str	r2, [r3, #120]	; 0x78
      return ERR_INPROGRESS;
 8006fdc:	f06f 0304 	mvn.w	r3, #4
 8006fe0:	e000      	b.n	8006fe4 <tcp_process_refused_data+0xe4>
    }
  }
  return ERR_OK;
 8006fe2:	2300      	movs	r3, #0
}
 8006fe4:	4618      	mov	r0, r3
 8006fe6:	3714      	adds	r7, #20
 8006fe8:	46bd      	mov	sp, r7
 8006fea:	bd90      	pop	{r4, r7, pc}
 8006fec:	0801049c 	.word	0x0801049c
 8006ff0:	080109ac 	.word	0x080109ac
 8006ff4:	080104e0 	.word	0x080104e0

08006ff8 <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 8006ff8:	b580      	push	{r7, lr}
 8006ffa:	b084      	sub	sp, #16
 8006ffc:	af00      	add	r7, sp, #0
 8006ffe:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 8007000:	e007      	b.n	8007012 <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	681b      	ldr	r3, [r3, #0]
 8007006:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 8007008:	6878      	ldr	r0, [r7, #4]
 800700a:	f000 f80a 	bl	8007022 <tcp_seg_free>
    seg = next;
 800700e:	68fb      	ldr	r3, [r7, #12]
 8007010:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	2b00      	cmp	r3, #0
 8007016:	d1f4      	bne.n	8007002 <tcp_segs_free+0xa>
  }
}
 8007018:	bf00      	nop
 800701a:	bf00      	nop
 800701c:	3710      	adds	r7, #16
 800701e:	46bd      	mov	sp, r7
 8007020:	bd80      	pop	{r7, pc}

08007022 <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 8007022:	b580      	push	{r7, lr}
 8007024:	b082      	sub	sp, #8
 8007026:	af00      	add	r7, sp, #0
 8007028:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	2b00      	cmp	r3, #0
 800702e:	d00c      	beq.n	800704a <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	685b      	ldr	r3, [r3, #4]
 8007034:	2b00      	cmp	r3, #0
 8007036:	d004      	beq.n	8007042 <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	685b      	ldr	r3, [r3, #4]
 800703c:	4618      	mov	r0, r3
 800703e:	f7fe fcdb 	bl	80059f8 <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 8007042:	6879      	ldr	r1, [r7, #4]
 8007044:	2003      	movs	r0, #3
 8007046:	f7fd fe61 	bl	8004d0c <memp_free>
  }
}
 800704a:	bf00      	nop
 800704c:	3708      	adds	r7, #8
 800704e:	46bd      	mov	sp, r7
 8007050:	bd80      	pop	{r7, pc}
	...

08007054 <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 8007054:	b580      	push	{r7, lr}
 8007056:	b084      	sub	sp, #16
 8007058:	af00      	add	r7, sp, #0
 800705a:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	2b00      	cmp	r3, #0
 8007060:	d106      	bne.n	8007070 <tcp_seg_copy+0x1c>
 8007062:	4b0f      	ldr	r3, [pc, #60]	; (80070a0 <tcp_seg_copy+0x4c>)
 8007064:	f240 6282 	movw	r2, #1666	; 0x682
 8007068:	490e      	ldr	r1, [pc, #56]	; (80070a4 <tcp_seg_copy+0x50>)
 800706a:	480f      	ldr	r0, [pc, #60]	; (80070a8 <tcp_seg_copy+0x54>)
 800706c:	f007 fb58 	bl	800e720 <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 8007070:	2003      	movs	r0, #3
 8007072:	f7fd fddb 	bl	8004c2c <memp_malloc>
 8007076:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 8007078:	68fb      	ldr	r3, [r7, #12]
 800707a:	2b00      	cmp	r3, #0
 800707c:	d101      	bne.n	8007082 <tcp_seg_copy+0x2e>
    return NULL;
 800707e:	2300      	movs	r3, #0
 8007080:	e00a      	b.n	8007098 <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 8007082:	2210      	movs	r2, #16
 8007084:	6879      	ldr	r1, [r7, #4]
 8007086:	68f8      	ldr	r0, [r7, #12]
 8007088:	f007 fd4e 	bl	800eb28 <memcpy>
  pbuf_ref(cseg->p);
 800708c:	68fb      	ldr	r3, [r7, #12]
 800708e:	685b      	ldr	r3, [r3, #4]
 8007090:	4618      	mov	r0, r3
 8007092:	f7fe fd51 	bl	8005b38 <pbuf_ref>
  return cseg;
 8007096:	68fb      	ldr	r3, [r7, #12]
}
 8007098:	4618      	mov	r0, r3
 800709a:	3710      	adds	r7, #16
 800709c:	46bd      	mov	sp, r7
 800709e:	bd80      	pop	{r7, pc}
 80070a0:	0801049c 	.word	0x0801049c
 80070a4:	080109f0 	.word	0x080109f0
 80070a8:	080104e0 	.word	0x080104e0

080070ac <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 80070ac:	b580      	push	{r7, lr}
 80070ae:	b084      	sub	sp, #16
 80070b0:	af00      	add	r7, sp, #0
 80070b2:	60f8      	str	r0, [r7, #12]
 80070b4:	60b9      	str	r1, [r7, #8]
 80070b6:	607a      	str	r2, [r7, #4]
 80070b8:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 80070ba:	68bb      	ldr	r3, [r7, #8]
 80070bc:	2b00      	cmp	r3, #0
 80070be:	d109      	bne.n	80070d4 <tcp_recv_null+0x28>
 80070c0:	4b12      	ldr	r3, [pc, #72]	; (800710c <tcp_recv_null+0x60>)
 80070c2:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 80070c6:	4912      	ldr	r1, [pc, #72]	; (8007110 <tcp_recv_null+0x64>)
 80070c8:	4812      	ldr	r0, [pc, #72]	; (8007114 <tcp_recv_null+0x68>)
 80070ca:	f007 fb29 	bl	800e720 <iprintf>
 80070ce:	f06f 030f 	mvn.w	r3, #15
 80070d2:	e016      	b.n	8007102 <tcp_recv_null+0x56>

  if (p != NULL) {
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	2b00      	cmp	r3, #0
 80070d8:	d009      	beq.n	80070ee <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	891b      	ldrh	r3, [r3, #8]
 80070de:	4619      	mov	r1, r3
 80070e0:	68b8      	ldr	r0, [r7, #8]
 80070e2:	f7ff fb19 	bl	8006718 <tcp_recved>
    pbuf_free(p);
 80070e6:	6878      	ldr	r0, [r7, #4]
 80070e8:	f7fe fc86 	bl	80059f8 <pbuf_free>
 80070ec:	e008      	b.n	8007100 <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 80070ee:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80070f2:	2b00      	cmp	r3, #0
 80070f4:	d104      	bne.n	8007100 <tcp_recv_null+0x54>
    return tcp_close(pcb);
 80070f6:	68b8      	ldr	r0, [r7, #8]
 80070f8:	f7ff f9be 	bl	8006478 <tcp_close>
 80070fc:	4603      	mov	r3, r0
 80070fe:	e000      	b.n	8007102 <tcp_recv_null+0x56>
  }
  return ERR_OK;
 8007100:	2300      	movs	r3, #0
}
 8007102:	4618      	mov	r0, r3
 8007104:	3710      	adds	r7, #16
 8007106:	46bd      	mov	sp, r7
 8007108:	bd80      	pop	{r7, pc}
 800710a:	bf00      	nop
 800710c:	0801049c 	.word	0x0801049c
 8007110:	08010a0c 	.word	0x08010a0c
 8007114:	080104e0 	.word	0x080104e0

08007118 <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 8007118:	b580      	push	{r7, lr}
 800711a:	b086      	sub	sp, #24
 800711c:	af00      	add	r7, sp, #0
 800711e:	4603      	mov	r3, r0
 8007120:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 8007122:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007126:	2b00      	cmp	r3, #0
 8007128:	db01      	blt.n	800712e <tcp_kill_prio+0x16>
 800712a:	79fb      	ldrb	r3, [r7, #7]
 800712c:	e000      	b.n	8007130 <tcp_kill_prio+0x18>
 800712e:	237f      	movs	r3, #127	; 0x7f
 8007130:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 8007132:	7afb      	ldrb	r3, [r7, #11]
 8007134:	2b00      	cmp	r3, #0
 8007136:	d034      	beq.n	80071a2 <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 8007138:	7afb      	ldrb	r3, [r7, #11]
 800713a:	3b01      	subs	r3, #1
 800713c:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 800713e:	2300      	movs	r3, #0
 8007140:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 8007142:	2300      	movs	r3, #0
 8007144:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8007146:	4b19      	ldr	r3, [pc, #100]	; (80071ac <tcp_kill_prio+0x94>)
 8007148:	681b      	ldr	r3, [r3, #0]
 800714a:	617b      	str	r3, [r7, #20]
 800714c:	e01f      	b.n	800718e <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 800714e:	697b      	ldr	r3, [r7, #20]
 8007150:	7d5b      	ldrb	r3, [r3, #21]
 8007152:	7afa      	ldrb	r2, [r7, #11]
 8007154:	429a      	cmp	r2, r3
 8007156:	d80c      	bhi.n	8007172 <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 8007158:	697b      	ldr	r3, [r7, #20]
 800715a:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 800715c:	7afa      	ldrb	r2, [r7, #11]
 800715e:	429a      	cmp	r2, r3
 8007160:	d112      	bne.n	8007188 <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 8007162:	4b13      	ldr	r3, [pc, #76]	; (80071b0 <tcp_kill_prio+0x98>)
 8007164:	681a      	ldr	r2, [r3, #0]
 8007166:	697b      	ldr	r3, [r7, #20]
 8007168:	6a1b      	ldr	r3, [r3, #32]
 800716a:	1ad3      	subs	r3, r2, r3
 800716c:	68fa      	ldr	r2, [r7, #12]
 800716e:	429a      	cmp	r2, r3
 8007170:	d80a      	bhi.n	8007188 <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 8007172:	4b0f      	ldr	r3, [pc, #60]	; (80071b0 <tcp_kill_prio+0x98>)
 8007174:	681a      	ldr	r2, [r3, #0]
 8007176:	697b      	ldr	r3, [r7, #20]
 8007178:	6a1b      	ldr	r3, [r3, #32]
 800717a:	1ad3      	subs	r3, r2, r3
 800717c:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 800717e:	697b      	ldr	r3, [r7, #20]
 8007180:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 8007182:	697b      	ldr	r3, [r7, #20]
 8007184:	7d5b      	ldrb	r3, [r3, #21]
 8007186:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8007188:	697b      	ldr	r3, [r7, #20]
 800718a:	68db      	ldr	r3, [r3, #12]
 800718c:	617b      	str	r3, [r7, #20]
 800718e:	697b      	ldr	r3, [r7, #20]
 8007190:	2b00      	cmp	r3, #0
 8007192:	d1dc      	bne.n	800714e <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 8007194:	693b      	ldr	r3, [r7, #16]
 8007196:	2b00      	cmp	r3, #0
 8007198:	d004      	beq.n	80071a4 <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 800719a:	6938      	ldr	r0, [r7, #16]
 800719c:	f7ff fa56 	bl	800664c <tcp_abort>
 80071a0:	e000      	b.n	80071a4 <tcp_kill_prio+0x8c>
    return;
 80071a2:	bf00      	nop
  }
}
 80071a4:	3718      	adds	r7, #24
 80071a6:	46bd      	mov	sp, r7
 80071a8:	bd80      	pop	{r7, pc}
 80071aa:	bf00      	nop
 80071ac:	200082f8 	.word	0x200082f8
 80071b0:	200082ec 	.word	0x200082ec

080071b4 <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 80071b4:	b580      	push	{r7, lr}
 80071b6:	b086      	sub	sp, #24
 80071b8:	af00      	add	r7, sp, #0
 80071ba:	4603      	mov	r3, r0
 80071bc:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 80071be:	79fb      	ldrb	r3, [r7, #7]
 80071c0:	2b08      	cmp	r3, #8
 80071c2:	d009      	beq.n	80071d8 <tcp_kill_state+0x24>
 80071c4:	79fb      	ldrb	r3, [r7, #7]
 80071c6:	2b09      	cmp	r3, #9
 80071c8:	d006      	beq.n	80071d8 <tcp_kill_state+0x24>
 80071ca:	4b1a      	ldr	r3, [pc, #104]	; (8007234 <tcp_kill_state+0x80>)
 80071cc:	f240 62dd 	movw	r2, #1757	; 0x6dd
 80071d0:	4919      	ldr	r1, [pc, #100]	; (8007238 <tcp_kill_state+0x84>)
 80071d2:	481a      	ldr	r0, [pc, #104]	; (800723c <tcp_kill_state+0x88>)
 80071d4:	f007 faa4 	bl	800e720 <iprintf>

  inactivity = 0;
 80071d8:	2300      	movs	r3, #0
 80071da:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 80071dc:	2300      	movs	r3, #0
 80071de:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80071e0:	4b17      	ldr	r3, [pc, #92]	; (8007240 <tcp_kill_state+0x8c>)
 80071e2:	681b      	ldr	r3, [r3, #0]
 80071e4:	617b      	str	r3, [r7, #20]
 80071e6:	e017      	b.n	8007218 <tcp_kill_state+0x64>
    if (pcb->state == state) {
 80071e8:	697b      	ldr	r3, [r7, #20]
 80071ea:	7d1b      	ldrb	r3, [r3, #20]
 80071ec:	79fa      	ldrb	r2, [r7, #7]
 80071ee:	429a      	cmp	r2, r3
 80071f0:	d10f      	bne.n	8007212 <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 80071f2:	4b14      	ldr	r3, [pc, #80]	; (8007244 <tcp_kill_state+0x90>)
 80071f4:	681a      	ldr	r2, [r3, #0]
 80071f6:	697b      	ldr	r3, [r7, #20]
 80071f8:	6a1b      	ldr	r3, [r3, #32]
 80071fa:	1ad3      	subs	r3, r2, r3
 80071fc:	68fa      	ldr	r2, [r7, #12]
 80071fe:	429a      	cmp	r2, r3
 8007200:	d807      	bhi.n	8007212 <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 8007202:	4b10      	ldr	r3, [pc, #64]	; (8007244 <tcp_kill_state+0x90>)
 8007204:	681a      	ldr	r2, [r3, #0]
 8007206:	697b      	ldr	r3, [r7, #20]
 8007208:	6a1b      	ldr	r3, [r3, #32]
 800720a:	1ad3      	subs	r3, r2, r3
 800720c:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 800720e:	697b      	ldr	r3, [r7, #20]
 8007210:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8007212:	697b      	ldr	r3, [r7, #20]
 8007214:	68db      	ldr	r3, [r3, #12]
 8007216:	617b      	str	r3, [r7, #20]
 8007218:	697b      	ldr	r3, [r7, #20]
 800721a:	2b00      	cmp	r3, #0
 800721c:	d1e4      	bne.n	80071e8 <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 800721e:	693b      	ldr	r3, [r7, #16]
 8007220:	2b00      	cmp	r3, #0
 8007222:	d003      	beq.n	800722c <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 8007224:	2100      	movs	r1, #0
 8007226:	6938      	ldr	r0, [r7, #16]
 8007228:	f7ff f952 	bl	80064d0 <tcp_abandon>
  }
}
 800722c:	bf00      	nop
 800722e:	3718      	adds	r7, #24
 8007230:	46bd      	mov	sp, r7
 8007232:	bd80      	pop	{r7, pc}
 8007234:	0801049c 	.word	0x0801049c
 8007238:	08010a28 	.word	0x08010a28
 800723c:	080104e0 	.word	0x080104e0
 8007240:	200082f8 	.word	0x200082f8
 8007244:	200082ec 	.word	0x200082ec

08007248 <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 8007248:	b580      	push	{r7, lr}
 800724a:	b084      	sub	sp, #16
 800724c:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 800724e:	2300      	movs	r3, #0
 8007250:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 8007252:	2300      	movs	r3, #0
 8007254:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8007256:	4b12      	ldr	r3, [pc, #72]	; (80072a0 <tcp_kill_timewait+0x58>)
 8007258:	681b      	ldr	r3, [r3, #0]
 800725a:	60fb      	str	r3, [r7, #12]
 800725c:	e012      	b.n	8007284 <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800725e:	4b11      	ldr	r3, [pc, #68]	; (80072a4 <tcp_kill_timewait+0x5c>)
 8007260:	681a      	ldr	r2, [r3, #0]
 8007262:	68fb      	ldr	r3, [r7, #12]
 8007264:	6a1b      	ldr	r3, [r3, #32]
 8007266:	1ad3      	subs	r3, r2, r3
 8007268:	687a      	ldr	r2, [r7, #4]
 800726a:	429a      	cmp	r2, r3
 800726c:	d807      	bhi.n	800727e <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 800726e:	4b0d      	ldr	r3, [pc, #52]	; (80072a4 <tcp_kill_timewait+0x5c>)
 8007270:	681a      	ldr	r2, [r3, #0]
 8007272:	68fb      	ldr	r3, [r7, #12]
 8007274:	6a1b      	ldr	r3, [r3, #32]
 8007276:	1ad3      	subs	r3, r2, r3
 8007278:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 800727a:	68fb      	ldr	r3, [r7, #12]
 800727c:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800727e:	68fb      	ldr	r3, [r7, #12]
 8007280:	68db      	ldr	r3, [r3, #12]
 8007282:	60fb      	str	r3, [r7, #12]
 8007284:	68fb      	ldr	r3, [r7, #12]
 8007286:	2b00      	cmp	r3, #0
 8007288:	d1e9      	bne.n	800725e <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 800728a:	68bb      	ldr	r3, [r7, #8]
 800728c:	2b00      	cmp	r3, #0
 800728e:	d002      	beq.n	8007296 <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 8007290:	68b8      	ldr	r0, [r7, #8]
 8007292:	f7ff f9db 	bl	800664c <tcp_abort>
  }
}
 8007296:	bf00      	nop
 8007298:	3710      	adds	r7, #16
 800729a:	46bd      	mov	sp, r7
 800729c:	bd80      	pop	{r7, pc}
 800729e:	bf00      	nop
 80072a0:	200082fc 	.word	0x200082fc
 80072a4:	200082ec 	.word	0x200082ec

080072a8 <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 80072a8:	b580      	push	{r7, lr}
 80072aa:	b082      	sub	sp, #8
 80072ac:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 80072ae:	4b10      	ldr	r3, [pc, #64]	; (80072f0 <tcp_handle_closepend+0x48>)
 80072b0:	681b      	ldr	r3, [r3, #0]
 80072b2:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 80072b4:	e014      	b.n	80072e0 <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	68db      	ldr	r3, [r3, #12]
 80072ba:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	8b5b      	ldrh	r3, [r3, #26]
 80072c0:	f003 0308 	and.w	r3, r3, #8
 80072c4:	2b00      	cmp	r3, #0
 80072c6:	d009      	beq.n	80072dc <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	8b5b      	ldrh	r3, [r3, #26]
 80072cc:	f023 0308 	bic.w	r3, r3, #8
 80072d0:	b29a      	uxth	r2, r3
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 80072d6:	6878      	ldr	r0, [r7, #4]
 80072d8:	f7ff f864 	bl	80063a4 <tcp_close_shutdown_fin>
    }
    pcb = next;
 80072dc:	683b      	ldr	r3, [r7, #0]
 80072de:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	2b00      	cmp	r3, #0
 80072e4:	d1e7      	bne.n	80072b6 <tcp_handle_closepend+0xe>
  }
}
 80072e6:	bf00      	nop
 80072e8:	bf00      	nop
 80072ea:	3708      	adds	r7, #8
 80072ec:	46bd      	mov	sp, r7
 80072ee:	bd80      	pop	{r7, pc}
 80072f0:	200082f8 	.word	0x200082f8

080072f4 <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 80072f4:	b580      	push	{r7, lr}
 80072f6:	b084      	sub	sp, #16
 80072f8:	af00      	add	r7, sp, #0
 80072fa:	4603      	mov	r3, r0
 80072fc:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 80072fe:	2001      	movs	r0, #1
 8007300:	f7fd fc94 	bl	8004c2c <memp_malloc>
 8007304:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 8007306:	68fb      	ldr	r3, [r7, #12]
 8007308:	2b00      	cmp	r3, #0
 800730a:	d126      	bne.n	800735a <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 800730c:	f7ff ffcc 	bl	80072a8 <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 8007310:	f7ff ff9a 	bl	8007248 <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8007314:	2001      	movs	r0, #1
 8007316:	f7fd fc89 	bl	8004c2c <memp_malloc>
 800731a:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 800731c:	68fb      	ldr	r3, [r7, #12]
 800731e:	2b00      	cmp	r3, #0
 8007320:	d11b      	bne.n	800735a <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 8007322:	2009      	movs	r0, #9
 8007324:	f7ff ff46 	bl	80071b4 <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8007328:	2001      	movs	r0, #1
 800732a:	f7fd fc7f 	bl	8004c2c <memp_malloc>
 800732e:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 8007330:	68fb      	ldr	r3, [r7, #12]
 8007332:	2b00      	cmp	r3, #0
 8007334:	d111      	bne.n	800735a <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 8007336:	2008      	movs	r0, #8
 8007338:	f7ff ff3c 	bl	80071b4 <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800733c:	2001      	movs	r0, #1
 800733e:	f7fd fc75 	bl	8004c2c <memp_malloc>
 8007342:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 8007344:	68fb      	ldr	r3, [r7, #12]
 8007346:	2b00      	cmp	r3, #0
 8007348:	d107      	bne.n	800735a <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 800734a:	79fb      	ldrb	r3, [r7, #7]
 800734c:	4618      	mov	r0, r3
 800734e:	f7ff fee3 	bl	8007118 <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8007352:	2001      	movs	r0, #1
 8007354:	f7fd fc6a 	bl	8004c2c <memp_malloc>
 8007358:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 800735a:	68fb      	ldr	r3, [r7, #12]
 800735c:	2b00      	cmp	r3, #0
 800735e:	d03f      	beq.n	80073e0 <tcp_alloc+0xec>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 8007360:	229c      	movs	r2, #156	; 0x9c
 8007362:	2100      	movs	r1, #0
 8007364:	68f8      	ldr	r0, [r7, #12]
 8007366:	f007 fb6b 	bl	800ea40 <memset>
    pcb->prio = prio;
 800736a:	68fb      	ldr	r3, [r7, #12]
 800736c:	79fa      	ldrb	r2, [r7, #7]
 800736e:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 8007370:	68fb      	ldr	r3, [r7, #12]
 8007372:	f44f 6286 	mov.w	r2, #1072	; 0x430
 8007376:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 800737a:	68fb      	ldr	r3, [r7, #12]
 800737c:	f44f 6206 	mov.w	r2, #2144	; 0x860
 8007380:	855a      	strh	r2, [r3, #42]	; 0x2a
 8007382:	68fb      	ldr	r3, [r7, #12]
 8007384:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 8007386:	68fb      	ldr	r3, [r7, #12]
 8007388:	851a      	strh	r2, [r3, #40]	; 0x28
    pcb->ttl = TCP_TTL;
 800738a:	68fb      	ldr	r3, [r7, #12]
 800738c:	22ff      	movs	r2, #255	; 0xff
 800738e:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 8007390:	68fb      	ldr	r3, [r7, #12]
 8007392:	f44f 7206 	mov.w	r2, #536	; 0x218
 8007396:	865a      	strh	r2, [r3, #50]	; 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 8007398:	68fb      	ldr	r3, [r7, #12]
 800739a:	2206      	movs	r2, #6
 800739c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 80073a0:	68fb      	ldr	r3, [r7, #12]
 80073a2:	2206      	movs	r2, #6
 80073a4:	87da      	strh	r2, [r3, #62]	; 0x3e
    pcb->rtime = -1;
 80073a6:	68fb      	ldr	r3, [r7, #12]
 80073a8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80073ac:	861a      	strh	r2, [r3, #48]	; 0x30
    pcb->cwnd = 1;
 80073ae:	68fb      	ldr	r3, [r7, #12]
 80073b0:	2201      	movs	r2, #1
 80073b2:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    pcb->tmr = tcp_ticks;
 80073b6:	4b0d      	ldr	r3, [pc, #52]	; (80073ec <tcp_alloc+0xf8>)
 80073b8:	681a      	ldr	r2, [r3, #0]
 80073ba:	68fb      	ldr	r3, [r7, #12]
 80073bc:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 80073be:	4b0c      	ldr	r3, [pc, #48]	; (80073f0 <tcp_alloc+0xfc>)
 80073c0:	781a      	ldrb	r2, [r3, #0]
 80073c2:	68fb      	ldr	r3, [r7, #12]
 80073c4:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 80073c6:	68fb      	ldr	r3, [r7, #12]
 80073c8:	f44f 6286 	mov.w	r2, #1072	; 0x430
 80073cc:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 80073d0:	68fb      	ldr	r3, [r7, #12]
 80073d2:	4a08      	ldr	r2, [pc, #32]	; (80073f4 <tcp_alloc+0x100>)
 80073d4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 80073d8:	68fb      	ldr	r3, [r7, #12]
 80073da:	4a07      	ldr	r2, [pc, #28]	; (80073f8 <tcp_alloc+0x104>)
 80073dc:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 80073e0:	68fb      	ldr	r3, [r7, #12]
}
 80073e2:	4618      	mov	r0, r3
 80073e4:	3710      	adds	r7, #16
 80073e6:	46bd      	mov	sp, r7
 80073e8:	bd80      	pop	{r7, pc}
 80073ea:	bf00      	nop
 80073ec:	200082ec 	.word	0x200082ec
 80073f0:	20008302 	.word	0x20008302
 80073f4:	080070ad 	.word	0x080070ad
 80073f8:	006ddd00 	.word	0x006ddd00

080073fc <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 80073fc:	b580      	push	{r7, lr}
 80073fe:	b082      	sub	sp, #8
 8007400:	af00      	add	r7, sp, #0
 8007402:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	2b00      	cmp	r3, #0
 8007408:	d107      	bne.n	800741a <tcp_pcb_purge+0x1e>
 800740a:	4b21      	ldr	r3, [pc, #132]	; (8007490 <tcp_pcb_purge+0x94>)
 800740c:	f640 0251 	movw	r2, #2129	; 0x851
 8007410:	4920      	ldr	r1, [pc, #128]	; (8007494 <tcp_pcb_purge+0x98>)
 8007412:	4821      	ldr	r0, [pc, #132]	; (8007498 <tcp_pcb_purge+0x9c>)
 8007414:	f007 f984 	bl	800e720 <iprintf>
 8007418:	e037      	b.n	800748a <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	7d1b      	ldrb	r3, [r3, #20]
 800741e:	2b00      	cmp	r3, #0
 8007420:	d033      	beq.n	800748a <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 8007426:	2b0a      	cmp	r3, #10
 8007428:	d02f      	beq.n	800748a <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 800742e:	2b01      	cmp	r3, #1
 8007430:	d02b      	beq.n	800748a <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007436:	2b00      	cmp	r3, #0
 8007438:	d007      	beq.n	800744a <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800743e:	4618      	mov	r0, r3
 8007440:	f7fe fada 	bl	80059f8 <pbuf_free>
      pcb->refused_data = NULL;
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	2200      	movs	r2, #0
 8007448:	679a      	str	r2, [r3, #120]	; 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800744e:	2b00      	cmp	r3, #0
 8007450:	d002      	beq.n	8007458 <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 8007452:	6878      	ldr	r0, [r7, #4]
 8007454:	f000 f986 	bl	8007764 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800745e:	861a      	strh	r2, [r3, #48]	; 0x30

    tcp_segs_free(pcb->unsent);
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007464:	4618      	mov	r0, r3
 8007466:	f7ff fdc7 	bl	8006ff8 <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800746e:	4618      	mov	r0, r3
 8007470:	f7ff fdc2 	bl	8006ff8 <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	2200      	movs	r2, #0
 8007478:	66da      	str	r2, [r3, #108]	; 0x6c
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	671a      	str	r2, [r3, #112]	; 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	2200      	movs	r2, #0
 8007486:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */
  }
}
 800748a:	3708      	adds	r7, #8
 800748c:	46bd      	mov	sp, r7
 800748e:	bd80      	pop	{r7, pc}
 8007490:	0801049c 	.word	0x0801049c
 8007494:	08010ae8 	.word	0x08010ae8
 8007498:	080104e0 	.word	0x080104e0

0800749c <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 800749c:	b580      	push	{r7, lr}
 800749e:	b084      	sub	sp, #16
 80074a0:	af00      	add	r7, sp, #0
 80074a2:	6078      	str	r0, [r7, #4]
 80074a4:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 80074a6:	683b      	ldr	r3, [r7, #0]
 80074a8:	2b00      	cmp	r3, #0
 80074aa:	d106      	bne.n	80074ba <tcp_pcb_remove+0x1e>
 80074ac:	4b3e      	ldr	r3, [pc, #248]	; (80075a8 <tcp_pcb_remove+0x10c>)
 80074ae:	f640 0283 	movw	r2, #2179	; 0x883
 80074b2:	493e      	ldr	r1, [pc, #248]	; (80075ac <tcp_pcb_remove+0x110>)
 80074b4:	483e      	ldr	r0, [pc, #248]	; (80075b0 <tcp_pcb_remove+0x114>)
 80074b6:	f007 f933 	bl	800e720 <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	2b00      	cmp	r3, #0
 80074be:	d106      	bne.n	80074ce <tcp_pcb_remove+0x32>
 80074c0:	4b39      	ldr	r3, [pc, #228]	; (80075a8 <tcp_pcb_remove+0x10c>)
 80074c2:	f640 0284 	movw	r2, #2180	; 0x884
 80074c6:	493b      	ldr	r1, [pc, #236]	; (80075b4 <tcp_pcb_remove+0x118>)
 80074c8:	4839      	ldr	r0, [pc, #228]	; (80075b0 <tcp_pcb_remove+0x114>)
 80074ca:	f007 f929 	bl	800e720 <iprintf>

  TCP_RMV(pcblist, pcb);
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	681b      	ldr	r3, [r3, #0]
 80074d2:	683a      	ldr	r2, [r7, #0]
 80074d4:	429a      	cmp	r2, r3
 80074d6:	d105      	bne.n	80074e4 <tcp_pcb_remove+0x48>
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	681b      	ldr	r3, [r3, #0]
 80074dc:	68da      	ldr	r2, [r3, #12]
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	601a      	str	r2, [r3, #0]
 80074e2:	e013      	b.n	800750c <tcp_pcb_remove+0x70>
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	681b      	ldr	r3, [r3, #0]
 80074e8:	60fb      	str	r3, [r7, #12]
 80074ea:	e00c      	b.n	8007506 <tcp_pcb_remove+0x6a>
 80074ec:	68fb      	ldr	r3, [r7, #12]
 80074ee:	68db      	ldr	r3, [r3, #12]
 80074f0:	683a      	ldr	r2, [r7, #0]
 80074f2:	429a      	cmp	r2, r3
 80074f4:	d104      	bne.n	8007500 <tcp_pcb_remove+0x64>
 80074f6:	683b      	ldr	r3, [r7, #0]
 80074f8:	68da      	ldr	r2, [r3, #12]
 80074fa:	68fb      	ldr	r3, [r7, #12]
 80074fc:	60da      	str	r2, [r3, #12]
 80074fe:	e005      	b.n	800750c <tcp_pcb_remove+0x70>
 8007500:	68fb      	ldr	r3, [r7, #12]
 8007502:	68db      	ldr	r3, [r3, #12]
 8007504:	60fb      	str	r3, [r7, #12]
 8007506:	68fb      	ldr	r3, [r7, #12]
 8007508:	2b00      	cmp	r3, #0
 800750a:	d1ef      	bne.n	80074ec <tcp_pcb_remove+0x50>
 800750c:	683b      	ldr	r3, [r7, #0]
 800750e:	2200      	movs	r2, #0
 8007510:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 8007512:	6838      	ldr	r0, [r7, #0]
 8007514:	f7ff ff72 	bl	80073fc <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 8007518:	683b      	ldr	r3, [r7, #0]
 800751a:	7d1b      	ldrb	r3, [r3, #20]
 800751c:	2b0a      	cmp	r3, #10
 800751e:	d013      	beq.n	8007548 <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 8007520:	683b      	ldr	r3, [r7, #0]
 8007522:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 8007524:	2b01      	cmp	r3, #1
 8007526:	d00f      	beq.n	8007548 <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 8007528:	683b      	ldr	r3, [r7, #0]
 800752a:	8b5b      	ldrh	r3, [r3, #26]
 800752c:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 8007530:	2b00      	cmp	r3, #0
 8007532:	d009      	beq.n	8007548 <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 8007534:	683b      	ldr	r3, [r7, #0]
 8007536:	8b5b      	ldrh	r3, [r3, #26]
 8007538:	f043 0302 	orr.w	r3, r3, #2
 800753c:	b29a      	uxth	r2, r3
 800753e:	683b      	ldr	r3, [r7, #0]
 8007540:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8007542:	6838      	ldr	r0, [r7, #0]
 8007544:	f002 ff6e 	bl	800a424 <tcp_output>
  }

  if (pcb->state != LISTEN) {
 8007548:	683b      	ldr	r3, [r7, #0]
 800754a:	7d1b      	ldrb	r3, [r3, #20]
 800754c:	2b01      	cmp	r3, #1
 800754e:	d020      	beq.n	8007592 <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 8007550:	683b      	ldr	r3, [r7, #0]
 8007552:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007554:	2b00      	cmp	r3, #0
 8007556:	d006      	beq.n	8007566 <tcp_pcb_remove+0xca>
 8007558:	4b13      	ldr	r3, [pc, #76]	; (80075a8 <tcp_pcb_remove+0x10c>)
 800755a:	f640 0293 	movw	r2, #2195	; 0x893
 800755e:	4916      	ldr	r1, [pc, #88]	; (80075b8 <tcp_pcb_remove+0x11c>)
 8007560:	4813      	ldr	r0, [pc, #76]	; (80075b0 <tcp_pcb_remove+0x114>)
 8007562:	f007 f8dd 	bl	800e720 <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 8007566:	683b      	ldr	r3, [r7, #0]
 8007568:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800756a:	2b00      	cmp	r3, #0
 800756c:	d006      	beq.n	800757c <tcp_pcb_remove+0xe0>
 800756e:	4b0e      	ldr	r3, [pc, #56]	; (80075a8 <tcp_pcb_remove+0x10c>)
 8007570:	f640 0294 	movw	r2, #2196	; 0x894
 8007574:	4911      	ldr	r1, [pc, #68]	; (80075bc <tcp_pcb_remove+0x120>)
 8007576:	480e      	ldr	r0, [pc, #56]	; (80075b0 <tcp_pcb_remove+0x114>)
 8007578:	f007 f8d2 	bl	800e720 <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 800757c:	683b      	ldr	r3, [r7, #0]
 800757e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007580:	2b00      	cmp	r3, #0
 8007582:	d006      	beq.n	8007592 <tcp_pcb_remove+0xf6>
 8007584:	4b08      	ldr	r3, [pc, #32]	; (80075a8 <tcp_pcb_remove+0x10c>)
 8007586:	f640 0296 	movw	r2, #2198	; 0x896
 800758a:	490d      	ldr	r1, [pc, #52]	; (80075c0 <tcp_pcb_remove+0x124>)
 800758c:	4808      	ldr	r0, [pc, #32]	; (80075b0 <tcp_pcb_remove+0x114>)
 800758e:	f007 f8c7 	bl	800e720 <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 8007592:	683b      	ldr	r3, [r7, #0]
 8007594:	2200      	movs	r2, #0
 8007596:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 8007598:	683b      	ldr	r3, [r7, #0]
 800759a:	2200      	movs	r2, #0
 800759c:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 800759e:	bf00      	nop
 80075a0:	3710      	adds	r7, #16
 80075a2:	46bd      	mov	sp, r7
 80075a4:	bd80      	pop	{r7, pc}
 80075a6:	bf00      	nop
 80075a8:	0801049c 	.word	0x0801049c
 80075ac:	08010b04 	.word	0x08010b04
 80075b0:	080104e0 	.word	0x080104e0
 80075b4:	08010b20 	.word	0x08010b20
 80075b8:	08010b40 	.word	0x08010b40
 80075bc:	08010b58 	.word	0x08010b58
 80075c0:	08010b74 	.word	0x08010b74

080075c4 <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 80075c4:	b580      	push	{r7, lr}
 80075c6:	b082      	sub	sp, #8
 80075c8:	af00      	add	r7, sp, #0
 80075ca:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	2b00      	cmp	r3, #0
 80075d0:	d106      	bne.n	80075e0 <tcp_next_iss+0x1c>
 80075d2:	4b0a      	ldr	r3, [pc, #40]	; (80075fc <tcp_next_iss+0x38>)
 80075d4:	f640 02af 	movw	r2, #2223	; 0x8af
 80075d8:	4909      	ldr	r1, [pc, #36]	; (8007600 <tcp_next_iss+0x3c>)
 80075da:	480a      	ldr	r0, [pc, #40]	; (8007604 <tcp_next_iss+0x40>)
 80075dc:	f007 f8a0 	bl	800e720 <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 80075e0:	4b09      	ldr	r3, [pc, #36]	; (8007608 <tcp_next_iss+0x44>)
 80075e2:	681a      	ldr	r2, [r3, #0]
 80075e4:	4b09      	ldr	r3, [pc, #36]	; (800760c <tcp_next_iss+0x48>)
 80075e6:	681b      	ldr	r3, [r3, #0]
 80075e8:	4413      	add	r3, r2
 80075ea:	4a07      	ldr	r2, [pc, #28]	; (8007608 <tcp_next_iss+0x44>)
 80075ec:	6013      	str	r3, [r2, #0]
  return iss;
 80075ee:	4b06      	ldr	r3, [pc, #24]	; (8007608 <tcp_next_iss+0x44>)
 80075f0:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 80075f2:	4618      	mov	r0, r3
 80075f4:	3708      	adds	r7, #8
 80075f6:	46bd      	mov	sp, r7
 80075f8:	bd80      	pop	{r7, pc}
 80075fa:	bf00      	nop
 80075fc:	0801049c 	.word	0x0801049c
 8007600:	08010b8c 	.word	0x08010b8c
 8007604:	080104e0 	.word	0x080104e0
 8007608:	20000024 	.word	0x20000024
 800760c:	200082ec 	.word	0x200082ec

08007610 <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 8007610:	b580      	push	{r7, lr}
 8007612:	b086      	sub	sp, #24
 8007614:	af00      	add	r7, sp, #0
 8007616:	4603      	mov	r3, r0
 8007618:	60b9      	str	r1, [r7, #8]
 800761a:	607a      	str	r2, [r7, #4]
 800761c:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	2b00      	cmp	r3, #0
 8007622:	d106      	bne.n	8007632 <tcp_eff_send_mss_netif+0x22>
 8007624:	4b14      	ldr	r3, [pc, #80]	; (8007678 <tcp_eff_send_mss_netif+0x68>)
 8007626:	f640 02c5 	movw	r2, #2245	; 0x8c5
 800762a:	4914      	ldr	r1, [pc, #80]	; (800767c <tcp_eff_send_mss_netif+0x6c>)
 800762c:	4814      	ldr	r0, [pc, #80]	; (8007680 <tcp_eff_send_mss_netif+0x70>)
 800762e:	f007 f877 	bl	800e720 <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 8007632:	68bb      	ldr	r3, [r7, #8]
 8007634:	2b00      	cmp	r3, #0
 8007636:	d101      	bne.n	800763c <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 8007638:	89fb      	ldrh	r3, [r7, #14]
 800763a:	e019      	b.n	8007670 <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 800763c:	68bb      	ldr	r3, [r7, #8]
 800763e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8007640:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 8007642:	8afb      	ldrh	r3, [r7, #22]
 8007644:	2b00      	cmp	r3, #0
 8007646:	d012      	beq.n	800766e <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 8007648:	2328      	movs	r3, #40	; 0x28
 800764a:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 800764c:	8afa      	ldrh	r2, [r7, #22]
 800764e:	8abb      	ldrh	r3, [r7, #20]
 8007650:	429a      	cmp	r2, r3
 8007652:	d904      	bls.n	800765e <tcp_eff_send_mss_netif+0x4e>
 8007654:	8afa      	ldrh	r2, [r7, #22]
 8007656:	8abb      	ldrh	r3, [r7, #20]
 8007658:	1ad3      	subs	r3, r2, r3
 800765a:	b29b      	uxth	r3, r3
 800765c:	e000      	b.n	8007660 <tcp_eff_send_mss_netif+0x50>
 800765e:	2300      	movs	r3, #0
 8007660:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 8007662:	8a7a      	ldrh	r2, [r7, #18]
 8007664:	89fb      	ldrh	r3, [r7, #14]
 8007666:	4293      	cmp	r3, r2
 8007668:	bf28      	it	cs
 800766a:	4613      	movcs	r3, r2
 800766c:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 800766e:	89fb      	ldrh	r3, [r7, #14]
}
 8007670:	4618      	mov	r0, r3
 8007672:	3718      	adds	r7, #24
 8007674:	46bd      	mov	sp, r7
 8007676:	bd80      	pop	{r7, pc}
 8007678:	0801049c 	.word	0x0801049c
 800767c:	08010ba8 	.word	0x08010ba8
 8007680:	080104e0 	.word	0x080104e0

08007684 <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 8007684:	b580      	push	{r7, lr}
 8007686:	b084      	sub	sp, #16
 8007688:	af00      	add	r7, sp, #0
 800768a:	6078      	str	r0, [r7, #4]
 800768c:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 800768e:	683b      	ldr	r3, [r7, #0]
 8007690:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	2b00      	cmp	r3, #0
 8007696:	d119      	bne.n	80076cc <tcp_netif_ip_addr_changed_pcblist+0x48>
 8007698:	4b10      	ldr	r3, [pc, #64]	; (80076dc <tcp_netif_ip_addr_changed_pcblist+0x58>)
 800769a:	f44f 6210 	mov.w	r2, #2304	; 0x900
 800769e:	4910      	ldr	r1, [pc, #64]	; (80076e0 <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 80076a0:	4810      	ldr	r0, [pc, #64]	; (80076e4 <tcp_netif_ip_addr_changed_pcblist+0x60>)
 80076a2:	f007 f83d 	bl	800e720 <iprintf>

  while (pcb != NULL) {
 80076a6:	e011      	b.n	80076cc <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 80076a8:	68fb      	ldr	r3, [r7, #12]
 80076aa:	681a      	ldr	r2, [r3, #0]
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	681b      	ldr	r3, [r3, #0]
 80076b0:	429a      	cmp	r2, r3
 80076b2:	d108      	bne.n	80076c6 <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 80076b4:	68fb      	ldr	r3, [r7, #12]
 80076b6:	68db      	ldr	r3, [r3, #12]
 80076b8:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 80076ba:	68f8      	ldr	r0, [r7, #12]
 80076bc:	f7fe ffc6 	bl	800664c <tcp_abort>
      pcb = next;
 80076c0:	68bb      	ldr	r3, [r7, #8]
 80076c2:	60fb      	str	r3, [r7, #12]
 80076c4:	e002      	b.n	80076cc <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 80076c6:	68fb      	ldr	r3, [r7, #12]
 80076c8:	68db      	ldr	r3, [r3, #12]
 80076ca:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 80076cc:	68fb      	ldr	r3, [r7, #12]
 80076ce:	2b00      	cmp	r3, #0
 80076d0:	d1ea      	bne.n	80076a8 <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 80076d2:	bf00      	nop
 80076d4:	bf00      	nop
 80076d6:	3710      	adds	r7, #16
 80076d8:	46bd      	mov	sp, r7
 80076da:	bd80      	pop	{r7, pc}
 80076dc:	0801049c 	.word	0x0801049c
 80076e0:	08010bd0 	.word	0x08010bd0
 80076e4:	080104e0 	.word	0x080104e0

080076e8 <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 80076e8:	b580      	push	{r7, lr}
 80076ea:	b084      	sub	sp, #16
 80076ec:	af00      	add	r7, sp, #0
 80076ee:	6078      	str	r0, [r7, #4]
 80076f0:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	2b00      	cmp	r3, #0
 80076f6:	d02a      	beq.n	800774e <tcp_netif_ip_addr_changed+0x66>
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	681b      	ldr	r3, [r3, #0]
 80076fc:	2b00      	cmp	r3, #0
 80076fe:	d026      	beq.n	800774e <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 8007700:	4b15      	ldr	r3, [pc, #84]	; (8007758 <tcp_netif_ip_addr_changed+0x70>)
 8007702:	681b      	ldr	r3, [r3, #0]
 8007704:	4619      	mov	r1, r3
 8007706:	6878      	ldr	r0, [r7, #4]
 8007708:	f7ff ffbc 	bl	8007684 <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 800770c:	4b13      	ldr	r3, [pc, #76]	; (800775c <tcp_netif_ip_addr_changed+0x74>)
 800770e:	681b      	ldr	r3, [r3, #0]
 8007710:	4619      	mov	r1, r3
 8007712:	6878      	ldr	r0, [r7, #4]
 8007714:	f7ff ffb6 	bl	8007684 <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 8007718:	683b      	ldr	r3, [r7, #0]
 800771a:	2b00      	cmp	r3, #0
 800771c:	d017      	beq.n	800774e <tcp_netif_ip_addr_changed+0x66>
 800771e:	683b      	ldr	r3, [r7, #0]
 8007720:	681b      	ldr	r3, [r3, #0]
 8007722:	2b00      	cmp	r3, #0
 8007724:	d013      	beq.n	800774e <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8007726:	4b0e      	ldr	r3, [pc, #56]	; (8007760 <tcp_netif_ip_addr_changed+0x78>)
 8007728:	681b      	ldr	r3, [r3, #0]
 800772a:	60fb      	str	r3, [r7, #12]
 800772c:	e00c      	b.n	8007748 <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 800772e:	68fb      	ldr	r3, [r7, #12]
 8007730:	681a      	ldr	r2, [r3, #0]
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	681b      	ldr	r3, [r3, #0]
 8007736:	429a      	cmp	r2, r3
 8007738:	d103      	bne.n	8007742 <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 800773a:	683b      	ldr	r3, [r7, #0]
 800773c:	681a      	ldr	r2, [r3, #0]
 800773e:	68fb      	ldr	r3, [r7, #12]
 8007740:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8007742:	68fb      	ldr	r3, [r7, #12]
 8007744:	68db      	ldr	r3, [r3, #12]
 8007746:	60fb      	str	r3, [r7, #12]
 8007748:	68fb      	ldr	r3, [r7, #12]
 800774a:	2b00      	cmp	r3, #0
 800774c:	d1ef      	bne.n	800772e <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 800774e:	bf00      	nop
 8007750:	3710      	adds	r7, #16
 8007752:	46bd      	mov	sp, r7
 8007754:	bd80      	pop	{r7, pc}
 8007756:	bf00      	nop
 8007758:	200082f8 	.word	0x200082f8
 800775c:	200082f0 	.word	0x200082f0
 8007760:	200082f4 	.word	0x200082f4

08007764 <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 8007764:	b580      	push	{r7, lr}
 8007766:	b082      	sub	sp, #8
 8007768:	af00      	add	r7, sp, #0
 800776a:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007770:	2b00      	cmp	r3, #0
 8007772:	d007      	beq.n	8007784 <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007778:	4618      	mov	r0, r3
 800777a:	f7ff fc3d 	bl	8006ff8 <tcp_segs_free>
    pcb->ooseq = NULL;
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	2200      	movs	r2, #0
 8007782:	675a      	str	r2, [r3, #116]	; 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 8007784:	bf00      	nop
 8007786:	3708      	adds	r7, #8
 8007788:	46bd      	mov	sp, r7
 800778a:	bd80      	pop	{r7, pc}

0800778c <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 800778c:	b590      	push	{r4, r7, lr}
 800778e:	b08d      	sub	sp, #52	; 0x34
 8007790:	af04      	add	r7, sp, #16
 8007792:	6078      	str	r0, [r7, #4]
 8007794:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	2b00      	cmp	r3, #0
 800779a:	d105      	bne.n	80077a8 <tcp_input+0x1c>
 800779c:	4b9b      	ldr	r3, [pc, #620]	; (8007a0c <tcp_input+0x280>)
 800779e:	2283      	movs	r2, #131	; 0x83
 80077a0:	499b      	ldr	r1, [pc, #620]	; (8007a10 <tcp_input+0x284>)
 80077a2:	489c      	ldr	r0, [pc, #624]	; (8007a14 <tcp_input+0x288>)
 80077a4:	f006 ffbc 	bl	800e720 <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	685b      	ldr	r3, [r3, #4]
 80077ac:	4a9a      	ldr	r2, [pc, #616]	; (8007a18 <tcp_input+0x28c>)
 80077ae:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	895b      	ldrh	r3, [r3, #10]
 80077b4:	2b13      	cmp	r3, #19
 80077b6:	f240 83d1 	bls.w	8007f5c <tcp_input+0x7d0>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 80077ba:	4b98      	ldr	r3, [pc, #608]	; (8007a1c <tcp_input+0x290>)
 80077bc:	695b      	ldr	r3, [r3, #20]
 80077be:	4a97      	ldr	r2, [pc, #604]	; (8007a1c <tcp_input+0x290>)
 80077c0:	6812      	ldr	r2, [r2, #0]
 80077c2:	4611      	mov	r1, r2
 80077c4:	4618      	mov	r0, r3
 80077c6:	f005 ff67 	bl	800d698 <ip4_addr_isbroadcast_u32>
 80077ca:	4603      	mov	r3, r0
 80077cc:	2b00      	cmp	r3, #0
 80077ce:	f040 83c7 	bne.w	8007f60 <tcp_input+0x7d4>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 80077d2:	4b92      	ldr	r3, [pc, #584]	; (8007a1c <tcp_input+0x290>)
 80077d4:	695b      	ldr	r3, [r3, #20]
 80077d6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 80077da:	2be0      	cmp	r3, #224	; 0xe0
 80077dc:	f000 83c0 	beq.w	8007f60 <tcp_input+0x7d4>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 80077e0:	4b8d      	ldr	r3, [pc, #564]	; (8007a18 <tcp_input+0x28c>)
 80077e2:	681b      	ldr	r3, [r3, #0]
 80077e4:	899b      	ldrh	r3, [r3, #12]
 80077e6:	b29b      	uxth	r3, r3
 80077e8:	4618      	mov	r0, r3
 80077ea:	f7fc fda7 	bl	800433c <lwip_htons>
 80077ee:	4603      	mov	r3, r0
 80077f0:	0b1b      	lsrs	r3, r3, #12
 80077f2:	b29b      	uxth	r3, r3
 80077f4:	b2db      	uxtb	r3, r3
 80077f6:	009b      	lsls	r3, r3, #2
 80077f8:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 80077fa:	7cbb      	ldrb	r3, [r7, #18]
 80077fc:	2b13      	cmp	r3, #19
 80077fe:	f240 83b1 	bls.w	8007f64 <tcp_input+0x7d8>
 8007802:	7cbb      	ldrb	r3, [r7, #18]
 8007804:	b29a      	uxth	r2, r3
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	891b      	ldrh	r3, [r3, #8]
 800780a:	429a      	cmp	r2, r3
 800780c:	f200 83aa 	bhi.w	8007f64 <tcp_input+0x7d8>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 8007810:	7cbb      	ldrb	r3, [r7, #18]
 8007812:	b29b      	uxth	r3, r3
 8007814:	3b14      	subs	r3, #20
 8007816:	b29a      	uxth	r2, r3
 8007818:	4b81      	ldr	r3, [pc, #516]	; (8007a20 <tcp_input+0x294>)
 800781a:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 800781c:	4b81      	ldr	r3, [pc, #516]	; (8007a24 <tcp_input+0x298>)
 800781e:	2200      	movs	r2, #0
 8007820:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	895a      	ldrh	r2, [r3, #10]
 8007826:	7cbb      	ldrb	r3, [r7, #18]
 8007828:	b29b      	uxth	r3, r3
 800782a:	429a      	cmp	r2, r3
 800782c:	d309      	bcc.n	8007842 <tcp_input+0xb6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 800782e:	4b7c      	ldr	r3, [pc, #496]	; (8007a20 <tcp_input+0x294>)
 8007830:	881a      	ldrh	r2, [r3, #0]
 8007832:	4b7d      	ldr	r3, [pc, #500]	; (8007a28 <tcp_input+0x29c>)
 8007834:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 8007836:	7cbb      	ldrb	r3, [r7, #18]
 8007838:	4619      	mov	r1, r3
 800783a:	6878      	ldr	r0, [r7, #4]
 800783c:	f7fe f856 	bl	80058ec <pbuf_remove_header>
 8007840:	e04e      	b.n	80078e0 <tcp_input+0x154>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	681b      	ldr	r3, [r3, #0]
 8007846:	2b00      	cmp	r3, #0
 8007848:	d105      	bne.n	8007856 <tcp_input+0xca>
 800784a:	4b70      	ldr	r3, [pc, #448]	; (8007a0c <tcp_input+0x280>)
 800784c:	22c2      	movs	r2, #194	; 0xc2
 800784e:	4977      	ldr	r1, [pc, #476]	; (8007a2c <tcp_input+0x2a0>)
 8007850:	4870      	ldr	r0, [pc, #448]	; (8007a14 <tcp_input+0x288>)
 8007852:	f006 ff65 	bl	800e720 <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 8007856:	2114      	movs	r1, #20
 8007858:	6878      	ldr	r0, [r7, #4]
 800785a:	f7fe f847 	bl	80058ec <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	895a      	ldrh	r2, [r3, #10]
 8007862:	4b71      	ldr	r3, [pc, #452]	; (8007a28 <tcp_input+0x29c>)
 8007864:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 8007866:	4b6e      	ldr	r3, [pc, #440]	; (8007a20 <tcp_input+0x294>)
 8007868:	881a      	ldrh	r2, [r3, #0]
 800786a:	4b6f      	ldr	r3, [pc, #444]	; (8007a28 <tcp_input+0x29c>)
 800786c:	881b      	ldrh	r3, [r3, #0]
 800786e:	1ad3      	subs	r3, r2, r3
 8007870:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 8007872:	4b6d      	ldr	r3, [pc, #436]	; (8007a28 <tcp_input+0x29c>)
 8007874:	881b      	ldrh	r3, [r3, #0]
 8007876:	4619      	mov	r1, r3
 8007878:	6878      	ldr	r0, [r7, #4]
 800787a:	f7fe f837 	bl	80058ec <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	681b      	ldr	r3, [r3, #0]
 8007882:	895b      	ldrh	r3, [r3, #10]
 8007884:	8a3a      	ldrh	r2, [r7, #16]
 8007886:	429a      	cmp	r2, r3
 8007888:	f200 836e 	bhi.w	8007f68 <tcp_input+0x7dc>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	681b      	ldr	r3, [r3, #0]
 8007890:	685b      	ldr	r3, [r3, #4]
 8007892:	4a64      	ldr	r2, [pc, #400]	; (8007a24 <tcp_input+0x298>)
 8007894:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	681b      	ldr	r3, [r3, #0]
 800789a:	8a3a      	ldrh	r2, [r7, #16]
 800789c:	4611      	mov	r1, r2
 800789e:	4618      	mov	r0, r3
 80078a0:	f7fe f824 	bl	80058ec <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	891a      	ldrh	r2, [r3, #8]
 80078a8:	8a3b      	ldrh	r3, [r7, #16]
 80078aa:	1ad3      	subs	r3, r2, r3
 80078ac:	b29a      	uxth	r2, r3
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	895b      	ldrh	r3, [r3, #10]
 80078b6:	2b00      	cmp	r3, #0
 80078b8:	d005      	beq.n	80078c6 <tcp_input+0x13a>
 80078ba:	4b54      	ldr	r3, [pc, #336]	; (8007a0c <tcp_input+0x280>)
 80078bc:	22df      	movs	r2, #223	; 0xdf
 80078be:	495c      	ldr	r1, [pc, #368]	; (8007a30 <tcp_input+0x2a4>)
 80078c0:	4854      	ldr	r0, [pc, #336]	; (8007a14 <tcp_input+0x288>)
 80078c2:	f006 ff2d 	bl	800e720 <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	891a      	ldrh	r2, [r3, #8]
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	681b      	ldr	r3, [r3, #0]
 80078ce:	891b      	ldrh	r3, [r3, #8]
 80078d0:	429a      	cmp	r2, r3
 80078d2:	d005      	beq.n	80078e0 <tcp_input+0x154>
 80078d4:	4b4d      	ldr	r3, [pc, #308]	; (8007a0c <tcp_input+0x280>)
 80078d6:	22e0      	movs	r2, #224	; 0xe0
 80078d8:	4956      	ldr	r1, [pc, #344]	; (8007a34 <tcp_input+0x2a8>)
 80078da:	484e      	ldr	r0, [pc, #312]	; (8007a14 <tcp_input+0x288>)
 80078dc:	f006 ff20 	bl	800e720 <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 80078e0:	4b4d      	ldr	r3, [pc, #308]	; (8007a18 <tcp_input+0x28c>)
 80078e2:	681b      	ldr	r3, [r3, #0]
 80078e4:	881b      	ldrh	r3, [r3, #0]
 80078e6:	b29b      	uxth	r3, r3
 80078e8:	4a4b      	ldr	r2, [pc, #300]	; (8007a18 <tcp_input+0x28c>)
 80078ea:	6814      	ldr	r4, [r2, #0]
 80078ec:	4618      	mov	r0, r3
 80078ee:	f7fc fd25 	bl	800433c <lwip_htons>
 80078f2:	4603      	mov	r3, r0
 80078f4:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 80078f6:	4b48      	ldr	r3, [pc, #288]	; (8007a18 <tcp_input+0x28c>)
 80078f8:	681b      	ldr	r3, [r3, #0]
 80078fa:	885b      	ldrh	r3, [r3, #2]
 80078fc:	b29b      	uxth	r3, r3
 80078fe:	4a46      	ldr	r2, [pc, #280]	; (8007a18 <tcp_input+0x28c>)
 8007900:	6814      	ldr	r4, [r2, #0]
 8007902:	4618      	mov	r0, r3
 8007904:	f7fc fd1a 	bl	800433c <lwip_htons>
 8007908:	4603      	mov	r3, r0
 800790a:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 800790c:	4b42      	ldr	r3, [pc, #264]	; (8007a18 <tcp_input+0x28c>)
 800790e:	681b      	ldr	r3, [r3, #0]
 8007910:	685b      	ldr	r3, [r3, #4]
 8007912:	4a41      	ldr	r2, [pc, #260]	; (8007a18 <tcp_input+0x28c>)
 8007914:	6814      	ldr	r4, [r2, #0]
 8007916:	4618      	mov	r0, r3
 8007918:	f7fc fd25 	bl	8004366 <lwip_htonl>
 800791c:	4603      	mov	r3, r0
 800791e:	6063      	str	r3, [r4, #4]
 8007920:	6863      	ldr	r3, [r4, #4]
 8007922:	4a45      	ldr	r2, [pc, #276]	; (8007a38 <tcp_input+0x2ac>)
 8007924:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 8007926:	4b3c      	ldr	r3, [pc, #240]	; (8007a18 <tcp_input+0x28c>)
 8007928:	681b      	ldr	r3, [r3, #0]
 800792a:	689b      	ldr	r3, [r3, #8]
 800792c:	4a3a      	ldr	r2, [pc, #232]	; (8007a18 <tcp_input+0x28c>)
 800792e:	6814      	ldr	r4, [r2, #0]
 8007930:	4618      	mov	r0, r3
 8007932:	f7fc fd18 	bl	8004366 <lwip_htonl>
 8007936:	4603      	mov	r3, r0
 8007938:	60a3      	str	r3, [r4, #8]
 800793a:	68a3      	ldr	r3, [r4, #8]
 800793c:	4a3f      	ldr	r2, [pc, #252]	; (8007a3c <tcp_input+0x2b0>)
 800793e:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 8007940:	4b35      	ldr	r3, [pc, #212]	; (8007a18 <tcp_input+0x28c>)
 8007942:	681b      	ldr	r3, [r3, #0]
 8007944:	89db      	ldrh	r3, [r3, #14]
 8007946:	b29b      	uxth	r3, r3
 8007948:	4a33      	ldr	r2, [pc, #204]	; (8007a18 <tcp_input+0x28c>)
 800794a:	6814      	ldr	r4, [r2, #0]
 800794c:	4618      	mov	r0, r3
 800794e:	f7fc fcf5 	bl	800433c <lwip_htons>
 8007952:	4603      	mov	r3, r0
 8007954:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 8007956:	4b30      	ldr	r3, [pc, #192]	; (8007a18 <tcp_input+0x28c>)
 8007958:	681b      	ldr	r3, [r3, #0]
 800795a:	899b      	ldrh	r3, [r3, #12]
 800795c:	b29b      	uxth	r3, r3
 800795e:	4618      	mov	r0, r3
 8007960:	f7fc fcec 	bl	800433c <lwip_htons>
 8007964:	4603      	mov	r3, r0
 8007966:	b2db      	uxtb	r3, r3
 8007968:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800796c:	b2da      	uxtb	r2, r3
 800796e:	4b34      	ldr	r3, [pc, #208]	; (8007a40 <tcp_input+0x2b4>)
 8007970:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	891a      	ldrh	r2, [r3, #8]
 8007976:	4b33      	ldr	r3, [pc, #204]	; (8007a44 <tcp_input+0x2b8>)
 8007978:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 800797a:	4b31      	ldr	r3, [pc, #196]	; (8007a40 <tcp_input+0x2b4>)
 800797c:	781b      	ldrb	r3, [r3, #0]
 800797e:	f003 0303 	and.w	r3, r3, #3
 8007982:	2b00      	cmp	r3, #0
 8007984:	d00c      	beq.n	80079a0 <tcp_input+0x214>
    tcplen++;
 8007986:	4b2f      	ldr	r3, [pc, #188]	; (8007a44 <tcp_input+0x2b8>)
 8007988:	881b      	ldrh	r3, [r3, #0]
 800798a:	3301      	adds	r3, #1
 800798c:	b29a      	uxth	r2, r3
 800798e:	4b2d      	ldr	r3, [pc, #180]	; (8007a44 <tcp_input+0x2b8>)
 8007990:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	891a      	ldrh	r2, [r3, #8]
 8007996:	4b2b      	ldr	r3, [pc, #172]	; (8007a44 <tcp_input+0x2b8>)
 8007998:	881b      	ldrh	r3, [r3, #0]
 800799a:	429a      	cmp	r2, r3
 800799c:	f200 82e6 	bhi.w	8007f6c <tcp_input+0x7e0>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 80079a0:	2300      	movs	r3, #0
 80079a2:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80079a4:	4b28      	ldr	r3, [pc, #160]	; (8007a48 <tcp_input+0x2bc>)
 80079a6:	681b      	ldr	r3, [r3, #0]
 80079a8:	61fb      	str	r3, [r7, #28]
 80079aa:	e09d      	b.n	8007ae8 <tcp_input+0x35c>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 80079ac:	69fb      	ldr	r3, [r7, #28]
 80079ae:	7d1b      	ldrb	r3, [r3, #20]
 80079b0:	2b00      	cmp	r3, #0
 80079b2:	d105      	bne.n	80079c0 <tcp_input+0x234>
 80079b4:	4b15      	ldr	r3, [pc, #84]	; (8007a0c <tcp_input+0x280>)
 80079b6:	22fb      	movs	r2, #251	; 0xfb
 80079b8:	4924      	ldr	r1, [pc, #144]	; (8007a4c <tcp_input+0x2c0>)
 80079ba:	4816      	ldr	r0, [pc, #88]	; (8007a14 <tcp_input+0x288>)
 80079bc:	f006 feb0 	bl	800e720 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 80079c0:	69fb      	ldr	r3, [r7, #28]
 80079c2:	7d1b      	ldrb	r3, [r3, #20]
 80079c4:	2b0a      	cmp	r3, #10
 80079c6:	d105      	bne.n	80079d4 <tcp_input+0x248>
 80079c8:	4b10      	ldr	r3, [pc, #64]	; (8007a0c <tcp_input+0x280>)
 80079ca:	22fc      	movs	r2, #252	; 0xfc
 80079cc:	4920      	ldr	r1, [pc, #128]	; (8007a50 <tcp_input+0x2c4>)
 80079ce:	4811      	ldr	r0, [pc, #68]	; (8007a14 <tcp_input+0x288>)
 80079d0:	f006 fea6 	bl	800e720 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 80079d4:	69fb      	ldr	r3, [r7, #28]
 80079d6:	7d1b      	ldrb	r3, [r3, #20]
 80079d8:	2b01      	cmp	r3, #1
 80079da:	d105      	bne.n	80079e8 <tcp_input+0x25c>
 80079dc:	4b0b      	ldr	r3, [pc, #44]	; (8007a0c <tcp_input+0x280>)
 80079de:	22fd      	movs	r2, #253	; 0xfd
 80079e0:	491c      	ldr	r1, [pc, #112]	; (8007a54 <tcp_input+0x2c8>)
 80079e2:	480c      	ldr	r0, [pc, #48]	; (8007a14 <tcp_input+0x288>)
 80079e4:	f006 fe9c 	bl	800e720 <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 80079e8:	69fb      	ldr	r3, [r7, #28]
 80079ea:	7a1b      	ldrb	r3, [r3, #8]
 80079ec:	2b00      	cmp	r3, #0
 80079ee:	d033      	beq.n	8007a58 <tcp_input+0x2cc>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 80079f0:	69fb      	ldr	r3, [r7, #28]
 80079f2:	7a1a      	ldrb	r2, [r3, #8]
 80079f4:	4b09      	ldr	r3, [pc, #36]	; (8007a1c <tcp_input+0x290>)
 80079f6:	685b      	ldr	r3, [r3, #4]
 80079f8:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80079fc:	3301      	adds	r3, #1
 80079fe:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8007a00:	429a      	cmp	r2, r3
 8007a02:	d029      	beq.n	8007a58 <tcp_input+0x2cc>
      prev = pcb;
 8007a04:	69fb      	ldr	r3, [r7, #28]
 8007a06:	61bb      	str	r3, [r7, #24]
      continue;
 8007a08:	e06b      	b.n	8007ae2 <tcp_input+0x356>
 8007a0a:	bf00      	nop
 8007a0c:	08010c04 	.word	0x08010c04
 8007a10:	08010c38 	.word	0x08010c38
 8007a14:	08010c50 	.word	0x08010c50
 8007a18:	20008314 	.word	0x20008314
 8007a1c:	20004d7c 	.word	0x20004d7c
 8007a20:	20008318 	.word	0x20008318
 8007a24:	2000831c 	.word	0x2000831c
 8007a28:	2000831a 	.word	0x2000831a
 8007a2c:	08010c78 	.word	0x08010c78
 8007a30:	08010c88 	.word	0x08010c88
 8007a34:	08010c94 	.word	0x08010c94
 8007a38:	20008324 	.word	0x20008324
 8007a3c:	20008328 	.word	0x20008328
 8007a40:	20008330 	.word	0x20008330
 8007a44:	2000832e 	.word	0x2000832e
 8007a48:	200082f8 	.word	0x200082f8
 8007a4c:	08010cb4 	.word	0x08010cb4
 8007a50:	08010cdc 	.word	0x08010cdc
 8007a54:	08010d08 	.word	0x08010d08
    }

    if (pcb->remote_port == tcphdr->src &&
 8007a58:	69fb      	ldr	r3, [r7, #28]
 8007a5a:	8b1a      	ldrh	r2, [r3, #24]
 8007a5c:	4b72      	ldr	r3, [pc, #456]	; (8007c28 <tcp_input+0x49c>)
 8007a5e:	681b      	ldr	r3, [r3, #0]
 8007a60:	881b      	ldrh	r3, [r3, #0]
 8007a62:	b29b      	uxth	r3, r3
 8007a64:	429a      	cmp	r2, r3
 8007a66:	d13a      	bne.n	8007ade <tcp_input+0x352>
        pcb->local_port == tcphdr->dest &&
 8007a68:	69fb      	ldr	r3, [r7, #28]
 8007a6a:	8ada      	ldrh	r2, [r3, #22]
 8007a6c:	4b6e      	ldr	r3, [pc, #440]	; (8007c28 <tcp_input+0x49c>)
 8007a6e:	681b      	ldr	r3, [r3, #0]
 8007a70:	885b      	ldrh	r3, [r3, #2]
 8007a72:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 8007a74:	429a      	cmp	r2, r3
 8007a76:	d132      	bne.n	8007ade <tcp_input+0x352>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8007a78:	69fb      	ldr	r3, [r7, #28]
 8007a7a:	685a      	ldr	r2, [r3, #4]
 8007a7c:	4b6b      	ldr	r3, [pc, #428]	; (8007c2c <tcp_input+0x4a0>)
 8007a7e:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 8007a80:	429a      	cmp	r2, r3
 8007a82:	d12c      	bne.n	8007ade <tcp_input+0x352>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8007a84:	69fb      	ldr	r3, [r7, #28]
 8007a86:	681a      	ldr	r2, [r3, #0]
 8007a88:	4b68      	ldr	r3, [pc, #416]	; (8007c2c <tcp_input+0x4a0>)
 8007a8a:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8007a8c:	429a      	cmp	r2, r3
 8007a8e:	d126      	bne.n	8007ade <tcp_input+0x352>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 8007a90:	69fb      	ldr	r3, [r7, #28]
 8007a92:	68db      	ldr	r3, [r3, #12]
 8007a94:	69fa      	ldr	r2, [r7, #28]
 8007a96:	429a      	cmp	r2, r3
 8007a98:	d106      	bne.n	8007aa8 <tcp_input+0x31c>
 8007a9a:	4b65      	ldr	r3, [pc, #404]	; (8007c30 <tcp_input+0x4a4>)
 8007a9c:	f240 120d 	movw	r2, #269	; 0x10d
 8007aa0:	4964      	ldr	r1, [pc, #400]	; (8007c34 <tcp_input+0x4a8>)
 8007aa2:	4865      	ldr	r0, [pc, #404]	; (8007c38 <tcp_input+0x4ac>)
 8007aa4:	f006 fe3c 	bl	800e720 <iprintf>
      if (prev != NULL) {
 8007aa8:	69bb      	ldr	r3, [r7, #24]
 8007aaa:	2b00      	cmp	r3, #0
 8007aac:	d00a      	beq.n	8007ac4 <tcp_input+0x338>
        prev->next = pcb->next;
 8007aae:	69fb      	ldr	r3, [r7, #28]
 8007ab0:	68da      	ldr	r2, [r3, #12]
 8007ab2:	69bb      	ldr	r3, [r7, #24]
 8007ab4:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 8007ab6:	4b61      	ldr	r3, [pc, #388]	; (8007c3c <tcp_input+0x4b0>)
 8007ab8:	681a      	ldr	r2, [r3, #0]
 8007aba:	69fb      	ldr	r3, [r7, #28]
 8007abc:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 8007abe:	4a5f      	ldr	r2, [pc, #380]	; (8007c3c <tcp_input+0x4b0>)
 8007ac0:	69fb      	ldr	r3, [r7, #28]
 8007ac2:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 8007ac4:	69fb      	ldr	r3, [r7, #28]
 8007ac6:	68db      	ldr	r3, [r3, #12]
 8007ac8:	69fa      	ldr	r2, [r7, #28]
 8007aca:	429a      	cmp	r2, r3
 8007acc:	d111      	bne.n	8007af2 <tcp_input+0x366>
 8007ace:	4b58      	ldr	r3, [pc, #352]	; (8007c30 <tcp_input+0x4a4>)
 8007ad0:	f240 1215 	movw	r2, #277	; 0x115
 8007ad4:	495a      	ldr	r1, [pc, #360]	; (8007c40 <tcp_input+0x4b4>)
 8007ad6:	4858      	ldr	r0, [pc, #352]	; (8007c38 <tcp_input+0x4ac>)
 8007ad8:	f006 fe22 	bl	800e720 <iprintf>
      break;
 8007adc:	e009      	b.n	8007af2 <tcp_input+0x366>
    }
    prev = pcb;
 8007ade:	69fb      	ldr	r3, [r7, #28]
 8007ae0:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8007ae2:	69fb      	ldr	r3, [r7, #28]
 8007ae4:	68db      	ldr	r3, [r3, #12]
 8007ae6:	61fb      	str	r3, [r7, #28]
 8007ae8:	69fb      	ldr	r3, [r7, #28]
 8007aea:	2b00      	cmp	r3, #0
 8007aec:	f47f af5e 	bne.w	80079ac <tcp_input+0x220>
 8007af0:	e000      	b.n	8007af4 <tcp_input+0x368>
      break;
 8007af2:	bf00      	nop
  }

  if (pcb == NULL) {
 8007af4:	69fb      	ldr	r3, [r7, #28]
 8007af6:	2b00      	cmp	r3, #0
 8007af8:	f040 80aa 	bne.w	8007c50 <tcp_input+0x4c4>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8007afc:	4b51      	ldr	r3, [pc, #324]	; (8007c44 <tcp_input+0x4b8>)
 8007afe:	681b      	ldr	r3, [r3, #0]
 8007b00:	61fb      	str	r3, [r7, #28]
 8007b02:	e03f      	b.n	8007b84 <tcp_input+0x3f8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8007b04:	69fb      	ldr	r3, [r7, #28]
 8007b06:	7d1b      	ldrb	r3, [r3, #20]
 8007b08:	2b0a      	cmp	r3, #10
 8007b0a:	d006      	beq.n	8007b1a <tcp_input+0x38e>
 8007b0c:	4b48      	ldr	r3, [pc, #288]	; (8007c30 <tcp_input+0x4a4>)
 8007b0e:	f240 121f 	movw	r2, #287	; 0x11f
 8007b12:	494d      	ldr	r1, [pc, #308]	; (8007c48 <tcp_input+0x4bc>)
 8007b14:	4848      	ldr	r0, [pc, #288]	; (8007c38 <tcp_input+0x4ac>)
 8007b16:	f006 fe03 	bl	800e720 <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8007b1a:	69fb      	ldr	r3, [r7, #28]
 8007b1c:	7a1b      	ldrb	r3, [r3, #8]
 8007b1e:	2b00      	cmp	r3, #0
 8007b20:	d009      	beq.n	8007b36 <tcp_input+0x3aa>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8007b22:	69fb      	ldr	r3, [r7, #28]
 8007b24:	7a1a      	ldrb	r2, [r3, #8]
 8007b26:	4b41      	ldr	r3, [pc, #260]	; (8007c2c <tcp_input+0x4a0>)
 8007b28:	685b      	ldr	r3, [r3, #4]
 8007b2a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8007b2e:	3301      	adds	r3, #1
 8007b30:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8007b32:	429a      	cmp	r2, r3
 8007b34:	d122      	bne.n	8007b7c <tcp_input+0x3f0>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 8007b36:	69fb      	ldr	r3, [r7, #28]
 8007b38:	8b1a      	ldrh	r2, [r3, #24]
 8007b3a:	4b3b      	ldr	r3, [pc, #236]	; (8007c28 <tcp_input+0x49c>)
 8007b3c:	681b      	ldr	r3, [r3, #0]
 8007b3e:	881b      	ldrh	r3, [r3, #0]
 8007b40:	b29b      	uxth	r3, r3
 8007b42:	429a      	cmp	r2, r3
 8007b44:	d11b      	bne.n	8007b7e <tcp_input+0x3f2>
          pcb->local_port == tcphdr->dest &&
 8007b46:	69fb      	ldr	r3, [r7, #28]
 8007b48:	8ada      	ldrh	r2, [r3, #22]
 8007b4a:	4b37      	ldr	r3, [pc, #220]	; (8007c28 <tcp_input+0x49c>)
 8007b4c:	681b      	ldr	r3, [r3, #0]
 8007b4e:	885b      	ldrh	r3, [r3, #2]
 8007b50:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 8007b52:	429a      	cmp	r2, r3
 8007b54:	d113      	bne.n	8007b7e <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8007b56:	69fb      	ldr	r3, [r7, #28]
 8007b58:	685a      	ldr	r2, [r3, #4]
 8007b5a:	4b34      	ldr	r3, [pc, #208]	; (8007c2c <tcp_input+0x4a0>)
 8007b5c:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 8007b5e:	429a      	cmp	r2, r3
 8007b60:	d10d      	bne.n	8007b7e <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8007b62:	69fb      	ldr	r3, [r7, #28]
 8007b64:	681a      	ldr	r2, [r3, #0]
 8007b66:	4b31      	ldr	r3, [pc, #196]	; (8007c2c <tcp_input+0x4a0>)
 8007b68:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8007b6a:	429a      	cmp	r2, r3
 8007b6c:	d107      	bne.n	8007b7e <tcp_input+0x3f2>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 8007b6e:	69f8      	ldr	r0, [r7, #28]
 8007b70:	f000 fb56 	bl	8008220 <tcp_timewait_input>
        }
        pbuf_free(p);
 8007b74:	6878      	ldr	r0, [r7, #4]
 8007b76:	f7fd ff3f 	bl	80059f8 <pbuf_free>
        return;
 8007b7a:	e1fd      	b.n	8007f78 <tcp_input+0x7ec>
        continue;
 8007b7c:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8007b7e:	69fb      	ldr	r3, [r7, #28]
 8007b80:	68db      	ldr	r3, [r3, #12]
 8007b82:	61fb      	str	r3, [r7, #28]
 8007b84:	69fb      	ldr	r3, [r7, #28]
 8007b86:	2b00      	cmp	r3, #0
 8007b88:	d1bc      	bne.n	8007b04 <tcp_input+0x378>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 8007b8a:	2300      	movs	r3, #0
 8007b8c:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8007b8e:	4b2f      	ldr	r3, [pc, #188]	; (8007c4c <tcp_input+0x4c0>)
 8007b90:	681b      	ldr	r3, [r3, #0]
 8007b92:	617b      	str	r3, [r7, #20]
 8007b94:	e02a      	b.n	8007bec <tcp_input+0x460>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 8007b96:	697b      	ldr	r3, [r7, #20]
 8007b98:	7a1b      	ldrb	r3, [r3, #8]
 8007b9a:	2b00      	cmp	r3, #0
 8007b9c:	d00c      	beq.n	8007bb8 <tcp_input+0x42c>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8007b9e:	697b      	ldr	r3, [r7, #20]
 8007ba0:	7a1a      	ldrb	r2, [r3, #8]
 8007ba2:	4b22      	ldr	r3, [pc, #136]	; (8007c2c <tcp_input+0x4a0>)
 8007ba4:	685b      	ldr	r3, [r3, #4]
 8007ba6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8007baa:	3301      	adds	r3, #1
 8007bac:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 8007bae:	429a      	cmp	r2, r3
 8007bb0:	d002      	beq.n	8007bb8 <tcp_input+0x42c>
        prev = (struct tcp_pcb *)lpcb;
 8007bb2:	697b      	ldr	r3, [r7, #20]
 8007bb4:	61bb      	str	r3, [r7, #24]
        continue;
 8007bb6:	e016      	b.n	8007be6 <tcp_input+0x45a>
      }

      if (lpcb->local_port == tcphdr->dest) {
 8007bb8:	697b      	ldr	r3, [r7, #20]
 8007bba:	8ada      	ldrh	r2, [r3, #22]
 8007bbc:	4b1a      	ldr	r3, [pc, #104]	; (8007c28 <tcp_input+0x49c>)
 8007bbe:	681b      	ldr	r3, [r3, #0]
 8007bc0:	885b      	ldrh	r3, [r3, #2]
 8007bc2:	b29b      	uxth	r3, r3
 8007bc4:	429a      	cmp	r2, r3
 8007bc6:	d10c      	bne.n	8007be2 <tcp_input+0x456>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 8007bc8:	697b      	ldr	r3, [r7, #20]
 8007bca:	681a      	ldr	r2, [r3, #0]
 8007bcc:	4b17      	ldr	r3, [pc, #92]	; (8007c2c <tcp_input+0x4a0>)
 8007bce:	695b      	ldr	r3, [r3, #20]
 8007bd0:	429a      	cmp	r2, r3
 8007bd2:	d00f      	beq.n	8007bf4 <tcp_input+0x468>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 8007bd4:	697b      	ldr	r3, [r7, #20]
 8007bd6:	2b00      	cmp	r3, #0
 8007bd8:	d00d      	beq.n	8007bf6 <tcp_input+0x46a>
 8007bda:	697b      	ldr	r3, [r7, #20]
 8007bdc:	681b      	ldr	r3, [r3, #0]
 8007bde:	2b00      	cmp	r3, #0
 8007be0:	d009      	beq.n	8007bf6 <tcp_input+0x46a>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 8007be2:	697b      	ldr	r3, [r7, #20]
 8007be4:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8007be6:	697b      	ldr	r3, [r7, #20]
 8007be8:	68db      	ldr	r3, [r3, #12]
 8007bea:	617b      	str	r3, [r7, #20]
 8007bec:	697b      	ldr	r3, [r7, #20]
 8007bee:	2b00      	cmp	r3, #0
 8007bf0:	d1d1      	bne.n	8007b96 <tcp_input+0x40a>
 8007bf2:	e000      	b.n	8007bf6 <tcp_input+0x46a>
            break;
 8007bf4:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 8007bf6:	697b      	ldr	r3, [r7, #20]
 8007bf8:	2b00      	cmp	r3, #0
 8007bfa:	d029      	beq.n	8007c50 <tcp_input+0x4c4>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 8007bfc:	69bb      	ldr	r3, [r7, #24]
 8007bfe:	2b00      	cmp	r3, #0
 8007c00:	d00a      	beq.n	8007c18 <tcp_input+0x48c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 8007c02:	697b      	ldr	r3, [r7, #20]
 8007c04:	68da      	ldr	r2, [r3, #12]
 8007c06:	69bb      	ldr	r3, [r7, #24]
 8007c08:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 8007c0a:	4b10      	ldr	r3, [pc, #64]	; (8007c4c <tcp_input+0x4c0>)
 8007c0c:	681a      	ldr	r2, [r3, #0]
 8007c0e:	697b      	ldr	r3, [r7, #20]
 8007c10:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 8007c12:	4a0e      	ldr	r2, [pc, #56]	; (8007c4c <tcp_input+0x4c0>)
 8007c14:	697b      	ldr	r3, [r7, #20]
 8007c16:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 8007c18:	6978      	ldr	r0, [r7, #20]
 8007c1a:	f000 fa03 	bl	8008024 <tcp_listen_input>
      }
      pbuf_free(p);
 8007c1e:	6878      	ldr	r0, [r7, #4]
 8007c20:	f7fd feea 	bl	80059f8 <pbuf_free>
      return;
 8007c24:	e1a8      	b.n	8007f78 <tcp_input+0x7ec>
 8007c26:	bf00      	nop
 8007c28:	20008314 	.word	0x20008314
 8007c2c:	20004d7c 	.word	0x20004d7c
 8007c30:	08010c04 	.word	0x08010c04
 8007c34:	08010d30 	.word	0x08010d30
 8007c38:	08010c50 	.word	0x08010c50
 8007c3c:	200082f8 	.word	0x200082f8
 8007c40:	08010d5c 	.word	0x08010d5c
 8007c44:	200082fc 	.word	0x200082fc
 8007c48:	08010d88 	.word	0x08010d88
 8007c4c:	200082f4 	.word	0x200082f4
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 8007c50:	69fb      	ldr	r3, [r7, #28]
 8007c52:	2b00      	cmp	r3, #0
 8007c54:	f000 8158 	beq.w	8007f08 <tcp_input+0x77c>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 8007c58:	4b95      	ldr	r3, [pc, #596]	; (8007eb0 <tcp_input+0x724>)
 8007c5a:	2200      	movs	r2, #0
 8007c5c:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	891a      	ldrh	r2, [r3, #8]
 8007c62:	4b93      	ldr	r3, [pc, #588]	; (8007eb0 <tcp_input+0x724>)
 8007c64:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 8007c66:	4a92      	ldr	r2, [pc, #584]	; (8007eb0 <tcp_input+0x724>)
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 8007c6c:	4b91      	ldr	r3, [pc, #580]	; (8007eb4 <tcp_input+0x728>)
 8007c6e:	681b      	ldr	r3, [r3, #0]
 8007c70:	4a8f      	ldr	r2, [pc, #572]	; (8007eb0 <tcp_input+0x724>)
 8007c72:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 8007c74:	4b90      	ldr	r3, [pc, #576]	; (8007eb8 <tcp_input+0x72c>)
 8007c76:	2200      	movs	r2, #0
 8007c78:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 8007c7a:	4b90      	ldr	r3, [pc, #576]	; (8007ebc <tcp_input+0x730>)
 8007c7c:	2200      	movs	r2, #0
 8007c7e:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 8007c80:	4b8f      	ldr	r3, [pc, #572]	; (8007ec0 <tcp_input+0x734>)
 8007c82:	2200      	movs	r2, #0
 8007c84:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 8007c86:	4b8f      	ldr	r3, [pc, #572]	; (8007ec4 <tcp_input+0x738>)
 8007c88:	781b      	ldrb	r3, [r3, #0]
 8007c8a:	f003 0308 	and.w	r3, r3, #8
 8007c8e:	2b00      	cmp	r3, #0
 8007c90:	d006      	beq.n	8007ca0 <tcp_input+0x514>
      p->flags |= PBUF_FLAG_PUSH;
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	7b5b      	ldrb	r3, [r3, #13]
 8007c96:	f043 0301 	orr.w	r3, r3, #1
 8007c9a:	b2da      	uxtb	r2, r3
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 8007ca0:	69fb      	ldr	r3, [r7, #28]
 8007ca2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007ca4:	2b00      	cmp	r3, #0
 8007ca6:	d017      	beq.n	8007cd8 <tcp_input+0x54c>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 8007ca8:	69f8      	ldr	r0, [r7, #28]
 8007caa:	f7ff f929 	bl	8006f00 <tcp_process_refused_data>
 8007cae:	4603      	mov	r3, r0
 8007cb0:	f113 0f0d 	cmn.w	r3, #13
 8007cb4:	d007      	beq.n	8007cc6 <tcp_input+0x53a>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 8007cb6:	69fb      	ldr	r3, [r7, #28]
 8007cb8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 8007cba:	2b00      	cmp	r3, #0
 8007cbc:	d00c      	beq.n	8007cd8 <tcp_input+0x54c>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 8007cbe:	4b82      	ldr	r3, [pc, #520]	; (8007ec8 <tcp_input+0x73c>)
 8007cc0:	881b      	ldrh	r3, [r3, #0]
 8007cc2:	2b00      	cmp	r3, #0
 8007cc4:	d008      	beq.n	8007cd8 <tcp_input+0x54c>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 8007cc6:	69fb      	ldr	r3, [r7, #28]
 8007cc8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007cca:	2b00      	cmp	r3, #0
 8007ccc:	f040 80e3 	bne.w	8007e96 <tcp_input+0x70a>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 8007cd0:	69f8      	ldr	r0, [r7, #28]
 8007cd2:	f003 f9ad 	bl	800b030 <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 8007cd6:	e0de      	b.n	8007e96 <tcp_input+0x70a>
      }
    }
    tcp_input_pcb = pcb;
 8007cd8:	4a7c      	ldr	r2, [pc, #496]	; (8007ecc <tcp_input+0x740>)
 8007cda:	69fb      	ldr	r3, [r7, #28]
 8007cdc:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 8007cde:	69f8      	ldr	r0, [r7, #28]
 8007ce0:	f000 fb18 	bl	8008314 <tcp_process>
 8007ce4:	4603      	mov	r3, r0
 8007ce6:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 8007ce8:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8007cec:	f113 0f0d 	cmn.w	r3, #13
 8007cf0:	f000 80d3 	beq.w	8007e9a <tcp_input+0x70e>
      if (recv_flags & TF_RESET) {
 8007cf4:	4b71      	ldr	r3, [pc, #452]	; (8007ebc <tcp_input+0x730>)
 8007cf6:	781b      	ldrb	r3, [r3, #0]
 8007cf8:	f003 0308 	and.w	r3, r3, #8
 8007cfc:	2b00      	cmp	r3, #0
 8007cfe:	d015      	beq.n	8007d2c <tcp_input+0x5a0>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 8007d00:	69fb      	ldr	r3, [r7, #28]
 8007d02:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007d06:	2b00      	cmp	r3, #0
 8007d08:	d008      	beq.n	8007d1c <tcp_input+0x590>
 8007d0a:	69fb      	ldr	r3, [r7, #28]
 8007d0c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007d10:	69fa      	ldr	r2, [r7, #28]
 8007d12:	6912      	ldr	r2, [r2, #16]
 8007d14:	f06f 010d 	mvn.w	r1, #13
 8007d18:	4610      	mov	r0, r2
 8007d1a:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 8007d1c:	69f9      	ldr	r1, [r7, #28]
 8007d1e:	486c      	ldr	r0, [pc, #432]	; (8007ed0 <tcp_input+0x744>)
 8007d20:	f7ff fbbc 	bl	800749c <tcp_pcb_remove>
        tcp_free(pcb);
 8007d24:	69f8      	ldr	r0, [r7, #28]
 8007d26:	f7fe f9a9 	bl	800607c <tcp_free>
 8007d2a:	e0da      	b.n	8007ee2 <tcp_input+0x756>
      } else {
        err = ERR_OK;
 8007d2c:	2300      	movs	r3, #0
 8007d2e:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 8007d30:	4b63      	ldr	r3, [pc, #396]	; (8007ec0 <tcp_input+0x734>)
 8007d32:	881b      	ldrh	r3, [r3, #0]
 8007d34:	2b00      	cmp	r3, #0
 8007d36:	d01d      	beq.n	8007d74 <tcp_input+0x5e8>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 8007d38:	4b61      	ldr	r3, [pc, #388]	; (8007ec0 <tcp_input+0x734>)
 8007d3a:	881b      	ldrh	r3, [r3, #0]
 8007d3c:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 8007d3e:	69fb      	ldr	r3, [r7, #28]
 8007d40:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007d44:	2b00      	cmp	r3, #0
 8007d46:	d00a      	beq.n	8007d5e <tcp_input+0x5d2>
 8007d48:	69fb      	ldr	r3, [r7, #28]
 8007d4a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007d4e:	69fa      	ldr	r2, [r7, #28]
 8007d50:	6910      	ldr	r0, [r2, #16]
 8007d52:	89fa      	ldrh	r2, [r7, #14]
 8007d54:	69f9      	ldr	r1, [r7, #28]
 8007d56:	4798      	blx	r3
 8007d58:	4603      	mov	r3, r0
 8007d5a:	74fb      	strb	r3, [r7, #19]
 8007d5c:	e001      	b.n	8007d62 <tcp_input+0x5d6>
 8007d5e:	2300      	movs	r3, #0
 8007d60:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 8007d62:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8007d66:	f113 0f0d 	cmn.w	r3, #13
 8007d6a:	f000 8098 	beq.w	8007e9e <tcp_input+0x712>
              goto aborted;
            }
          }
          recv_acked = 0;
 8007d6e:	4b54      	ldr	r3, [pc, #336]	; (8007ec0 <tcp_input+0x734>)
 8007d70:	2200      	movs	r2, #0
 8007d72:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 8007d74:	69f8      	ldr	r0, [r7, #28]
 8007d76:	f000 f915 	bl	8007fa4 <tcp_input_delayed_close>
 8007d7a:	4603      	mov	r3, r0
 8007d7c:	2b00      	cmp	r3, #0
 8007d7e:	f040 8090 	bne.w	8007ea2 <tcp_input+0x716>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 8007d82:	4b4d      	ldr	r3, [pc, #308]	; (8007eb8 <tcp_input+0x72c>)
 8007d84:	681b      	ldr	r3, [r3, #0]
 8007d86:	2b00      	cmp	r3, #0
 8007d88:	d041      	beq.n	8007e0e <tcp_input+0x682>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 8007d8a:	69fb      	ldr	r3, [r7, #28]
 8007d8c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007d8e:	2b00      	cmp	r3, #0
 8007d90:	d006      	beq.n	8007da0 <tcp_input+0x614>
 8007d92:	4b50      	ldr	r3, [pc, #320]	; (8007ed4 <tcp_input+0x748>)
 8007d94:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 8007d98:	494f      	ldr	r1, [pc, #316]	; (8007ed8 <tcp_input+0x74c>)
 8007d9a:	4850      	ldr	r0, [pc, #320]	; (8007edc <tcp_input+0x750>)
 8007d9c:	f006 fcc0 	bl	800e720 <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 8007da0:	69fb      	ldr	r3, [r7, #28]
 8007da2:	8b5b      	ldrh	r3, [r3, #26]
 8007da4:	f003 0310 	and.w	r3, r3, #16
 8007da8:	2b00      	cmp	r3, #0
 8007daa:	d008      	beq.n	8007dbe <tcp_input+0x632>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 8007dac:	4b42      	ldr	r3, [pc, #264]	; (8007eb8 <tcp_input+0x72c>)
 8007dae:	681b      	ldr	r3, [r3, #0]
 8007db0:	4618      	mov	r0, r3
 8007db2:	f7fd fe21 	bl	80059f8 <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 8007db6:	69f8      	ldr	r0, [r7, #28]
 8007db8:	f7fe fc48 	bl	800664c <tcp_abort>
            goto aborted;
 8007dbc:	e091      	b.n	8007ee2 <tcp_input+0x756>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 8007dbe:	69fb      	ldr	r3, [r7, #28]
 8007dc0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007dc4:	2b00      	cmp	r3, #0
 8007dc6:	d00c      	beq.n	8007de2 <tcp_input+0x656>
 8007dc8:	69fb      	ldr	r3, [r7, #28]
 8007dca:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8007dce:	69fb      	ldr	r3, [r7, #28]
 8007dd0:	6918      	ldr	r0, [r3, #16]
 8007dd2:	4b39      	ldr	r3, [pc, #228]	; (8007eb8 <tcp_input+0x72c>)
 8007dd4:	681a      	ldr	r2, [r3, #0]
 8007dd6:	2300      	movs	r3, #0
 8007dd8:	69f9      	ldr	r1, [r7, #28]
 8007dda:	47a0      	blx	r4
 8007ddc:	4603      	mov	r3, r0
 8007dde:	74fb      	strb	r3, [r7, #19]
 8007de0:	e008      	b.n	8007df4 <tcp_input+0x668>
 8007de2:	4b35      	ldr	r3, [pc, #212]	; (8007eb8 <tcp_input+0x72c>)
 8007de4:	681a      	ldr	r2, [r3, #0]
 8007de6:	2300      	movs	r3, #0
 8007de8:	69f9      	ldr	r1, [r7, #28]
 8007dea:	2000      	movs	r0, #0
 8007dec:	f7ff f95e 	bl	80070ac <tcp_recv_null>
 8007df0:	4603      	mov	r3, r0
 8007df2:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 8007df4:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8007df8:	f113 0f0d 	cmn.w	r3, #13
 8007dfc:	d053      	beq.n	8007ea6 <tcp_input+0x71a>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 8007dfe:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8007e02:	2b00      	cmp	r3, #0
 8007e04:	d003      	beq.n	8007e0e <tcp_input+0x682>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 8007e06:	4b2c      	ldr	r3, [pc, #176]	; (8007eb8 <tcp_input+0x72c>)
 8007e08:	681a      	ldr	r2, [r3, #0]
 8007e0a:	69fb      	ldr	r3, [r7, #28]
 8007e0c:	679a      	str	r2, [r3, #120]	; 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 8007e0e:	4b2b      	ldr	r3, [pc, #172]	; (8007ebc <tcp_input+0x730>)
 8007e10:	781b      	ldrb	r3, [r3, #0]
 8007e12:	f003 0320 	and.w	r3, r3, #32
 8007e16:	2b00      	cmp	r3, #0
 8007e18:	d030      	beq.n	8007e7c <tcp_input+0x6f0>
          if (pcb->refused_data != NULL) {
 8007e1a:	69fb      	ldr	r3, [r7, #28]
 8007e1c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007e1e:	2b00      	cmp	r3, #0
 8007e20:	d009      	beq.n	8007e36 <tcp_input+0x6aa>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 8007e22:	69fb      	ldr	r3, [r7, #28]
 8007e24:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007e26:	7b5a      	ldrb	r2, [r3, #13]
 8007e28:	69fb      	ldr	r3, [r7, #28]
 8007e2a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007e2c:	f042 0220 	orr.w	r2, r2, #32
 8007e30:	b2d2      	uxtb	r2, r2
 8007e32:	735a      	strb	r2, [r3, #13]
 8007e34:	e022      	b.n	8007e7c <tcp_input+0x6f0>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 8007e36:	69fb      	ldr	r3, [r7, #28]
 8007e38:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007e3a:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8007e3e:	d005      	beq.n	8007e4c <tcp_input+0x6c0>
              pcb->rcv_wnd++;
 8007e40:	69fb      	ldr	r3, [r7, #28]
 8007e42:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007e44:	3301      	adds	r3, #1
 8007e46:	b29a      	uxth	r2, r3
 8007e48:	69fb      	ldr	r3, [r7, #28]
 8007e4a:	851a      	strh	r2, [r3, #40]	; 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 8007e4c:	69fb      	ldr	r3, [r7, #28]
 8007e4e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007e52:	2b00      	cmp	r3, #0
 8007e54:	d00b      	beq.n	8007e6e <tcp_input+0x6e2>
 8007e56:	69fb      	ldr	r3, [r7, #28]
 8007e58:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8007e5c:	69fb      	ldr	r3, [r7, #28]
 8007e5e:	6918      	ldr	r0, [r3, #16]
 8007e60:	2300      	movs	r3, #0
 8007e62:	2200      	movs	r2, #0
 8007e64:	69f9      	ldr	r1, [r7, #28]
 8007e66:	47a0      	blx	r4
 8007e68:	4603      	mov	r3, r0
 8007e6a:	74fb      	strb	r3, [r7, #19]
 8007e6c:	e001      	b.n	8007e72 <tcp_input+0x6e6>
 8007e6e:	2300      	movs	r3, #0
 8007e70:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 8007e72:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8007e76:	f113 0f0d 	cmn.w	r3, #13
 8007e7a:	d016      	beq.n	8007eaa <tcp_input+0x71e>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 8007e7c:	4b13      	ldr	r3, [pc, #76]	; (8007ecc <tcp_input+0x740>)
 8007e7e:	2200      	movs	r2, #0
 8007e80:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 8007e82:	69f8      	ldr	r0, [r7, #28]
 8007e84:	f000 f88e 	bl	8007fa4 <tcp_input_delayed_close>
 8007e88:	4603      	mov	r3, r0
 8007e8a:	2b00      	cmp	r3, #0
 8007e8c:	d128      	bne.n	8007ee0 <tcp_input+0x754>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 8007e8e:	69f8      	ldr	r0, [r7, #28]
 8007e90:	f002 fac8 	bl	800a424 <tcp_output>
 8007e94:	e025      	b.n	8007ee2 <tcp_input+0x756>
        goto aborted;
 8007e96:	bf00      	nop
 8007e98:	e023      	b.n	8007ee2 <tcp_input+0x756>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 8007e9a:	bf00      	nop
 8007e9c:	e021      	b.n	8007ee2 <tcp_input+0x756>
              goto aborted;
 8007e9e:	bf00      	nop
 8007ea0:	e01f      	b.n	8007ee2 <tcp_input+0x756>
          goto aborted;
 8007ea2:	bf00      	nop
 8007ea4:	e01d      	b.n	8007ee2 <tcp_input+0x756>
            goto aborted;
 8007ea6:	bf00      	nop
 8007ea8:	e01b      	b.n	8007ee2 <tcp_input+0x756>
              goto aborted;
 8007eaa:	bf00      	nop
 8007eac:	e019      	b.n	8007ee2 <tcp_input+0x756>
 8007eae:	bf00      	nop
 8007eb0:	20008304 	.word	0x20008304
 8007eb4:	20008314 	.word	0x20008314
 8007eb8:	20008334 	.word	0x20008334
 8007ebc:	20008331 	.word	0x20008331
 8007ec0:	2000832c 	.word	0x2000832c
 8007ec4:	20008330 	.word	0x20008330
 8007ec8:	2000832e 	.word	0x2000832e
 8007ecc:	20008338 	.word	0x20008338
 8007ed0:	200082f8 	.word	0x200082f8
 8007ed4:	08010c04 	.word	0x08010c04
 8007ed8:	08010db8 	.word	0x08010db8
 8007edc:	08010c50 	.word	0x08010c50
          goto aborted;
 8007ee0:	bf00      	nop
    tcp_input_pcb = NULL;
 8007ee2:	4b27      	ldr	r3, [pc, #156]	; (8007f80 <tcp_input+0x7f4>)
 8007ee4:	2200      	movs	r2, #0
 8007ee6:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 8007ee8:	4b26      	ldr	r3, [pc, #152]	; (8007f84 <tcp_input+0x7f8>)
 8007eea:	2200      	movs	r2, #0
 8007eec:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 8007eee:	4b26      	ldr	r3, [pc, #152]	; (8007f88 <tcp_input+0x7fc>)
 8007ef0:	685b      	ldr	r3, [r3, #4]
 8007ef2:	2b00      	cmp	r3, #0
 8007ef4:	d03f      	beq.n	8007f76 <tcp_input+0x7ea>
      pbuf_free(inseg.p);
 8007ef6:	4b24      	ldr	r3, [pc, #144]	; (8007f88 <tcp_input+0x7fc>)
 8007ef8:	685b      	ldr	r3, [r3, #4]
 8007efa:	4618      	mov	r0, r3
 8007efc:	f7fd fd7c 	bl	80059f8 <pbuf_free>
      inseg.p = NULL;
 8007f00:	4b21      	ldr	r3, [pc, #132]	; (8007f88 <tcp_input+0x7fc>)
 8007f02:	2200      	movs	r2, #0
 8007f04:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 8007f06:	e036      	b.n	8007f76 <tcp_input+0x7ea>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 8007f08:	4b20      	ldr	r3, [pc, #128]	; (8007f8c <tcp_input+0x800>)
 8007f0a:	681b      	ldr	r3, [r3, #0]
 8007f0c:	899b      	ldrh	r3, [r3, #12]
 8007f0e:	b29b      	uxth	r3, r3
 8007f10:	4618      	mov	r0, r3
 8007f12:	f7fc fa13 	bl	800433c <lwip_htons>
 8007f16:	4603      	mov	r3, r0
 8007f18:	b2db      	uxtb	r3, r3
 8007f1a:	f003 0304 	and.w	r3, r3, #4
 8007f1e:	2b00      	cmp	r3, #0
 8007f20:	d118      	bne.n	8007f54 <tcp_input+0x7c8>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8007f22:	4b1b      	ldr	r3, [pc, #108]	; (8007f90 <tcp_input+0x804>)
 8007f24:	6819      	ldr	r1, [r3, #0]
 8007f26:	4b1b      	ldr	r3, [pc, #108]	; (8007f94 <tcp_input+0x808>)
 8007f28:	881b      	ldrh	r3, [r3, #0]
 8007f2a:	461a      	mov	r2, r3
 8007f2c:	4b1a      	ldr	r3, [pc, #104]	; (8007f98 <tcp_input+0x80c>)
 8007f2e:	681b      	ldr	r3, [r3, #0]
 8007f30:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8007f32:	4b16      	ldr	r3, [pc, #88]	; (8007f8c <tcp_input+0x800>)
 8007f34:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8007f36:	885b      	ldrh	r3, [r3, #2]
 8007f38:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8007f3a:	4a14      	ldr	r2, [pc, #80]	; (8007f8c <tcp_input+0x800>)
 8007f3c:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8007f3e:	8812      	ldrh	r2, [r2, #0]
 8007f40:	b292      	uxth	r2, r2
 8007f42:	9202      	str	r2, [sp, #8]
 8007f44:	9301      	str	r3, [sp, #4]
 8007f46:	4b15      	ldr	r3, [pc, #84]	; (8007f9c <tcp_input+0x810>)
 8007f48:	9300      	str	r3, [sp, #0]
 8007f4a:	4b15      	ldr	r3, [pc, #84]	; (8007fa0 <tcp_input+0x814>)
 8007f4c:	4602      	mov	r2, r0
 8007f4e:	2000      	movs	r0, #0
 8007f50:	f003 f81c 	bl	800af8c <tcp_rst>
    pbuf_free(p);
 8007f54:	6878      	ldr	r0, [r7, #4]
 8007f56:	f7fd fd4f 	bl	80059f8 <pbuf_free>
  return;
 8007f5a:	e00c      	b.n	8007f76 <tcp_input+0x7ea>
    goto dropped;
 8007f5c:	bf00      	nop
 8007f5e:	e006      	b.n	8007f6e <tcp_input+0x7e2>
    goto dropped;
 8007f60:	bf00      	nop
 8007f62:	e004      	b.n	8007f6e <tcp_input+0x7e2>
    goto dropped;
 8007f64:	bf00      	nop
 8007f66:	e002      	b.n	8007f6e <tcp_input+0x7e2>
      goto dropped;
 8007f68:	bf00      	nop
 8007f6a:	e000      	b.n	8007f6e <tcp_input+0x7e2>
      goto dropped;
 8007f6c:	bf00      	nop
dropped:
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 8007f6e:	6878      	ldr	r0, [r7, #4]
 8007f70:	f7fd fd42 	bl	80059f8 <pbuf_free>
 8007f74:	e000      	b.n	8007f78 <tcp_input+0x7ec>
  return;
 8007f76:	bf00      	nop
}
 8007f78:	3724      	adds	r7, #36	; 0x24
 8007f7a:	46bd      	mov	sp, r7
 8007f7c:	bd90      	pop	{r4, r7, pc}
 8007f7e:	bf00      	nop
 8007f80:	20008338 	.word	0x20008338
 8007f84:	20008334 	.word	0x20008334
 8007f88:	20008304 	.word	0x20008304
 8007f8c:	20008314 	.word	0x20008314
 8007f90:	20008328 	.word	0x20008328
 8007f94:	2000832e 	.word	0x2000832e
 8007f98:	20008324 	.word	0x20008324
 8007f9c:	20004d8c 	.word	0x20004d8c
 8007fa0:	20004d90 	.word	0x20004d90

08007fa4 <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 8007fa4:	b580      	push	{r7, lr}
 8007fa6:	b082      	sub	sp, #8
 8007fa8:	af00      	add	r7, sp, #0
 8007faa:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	2b00      	cmp	r3, #0
 8007fb0:	d106      	bne.n	8007fc0 <tcp_input_delayed_close+0x1c>
 8007fb2:	4b17      	ldr	r3, [pc, #92]	; (8008010 <tcp_input_delayed_close+0x6c>)
 8007fb4:	f240 225a 	movw	r2, #602	; 0x25a
 8007fb8:	4916      	ldr	r1, [pc, #88]	; (8008014 <tcp_input_delayed_close+0x70>)
 8007fba:	4817      	ldr	r0, [pc, #92]	; (8008018 <tcp_input_delayed_close+0x74>)
 8007fbc:	f006 fbb0 	bl	800e720 <iprintf>

  if (recv_flags & TF_CLOSED) {
 8007fc0:	4b16      	ldr	r3, [pc, #88]	; (800801c <tcp_input_delayed_close+0x78>)
 8007fc2:	781b      	ldrb	r3, [r3, #0]
 8007fc4:	f003 0310 	and.w	r3, r3, #16
 8007fc8:	2b00      	cmp	r3, #0
 8007fca:	d01c      	beq.n	8008006 <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	8b5b      	ldrh	r3, [r3, #26]
 8007fd0:	f003 0310 	and.w	r3, r3, #16
 8007fd4:	2b00      	cmp	r3, #0
 8007fd6:	d10d      	bne.n	8007ff4 <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007fde:	2b00      	cmp	r3, #0
 8007fe0:	d008      	beq.n	8007ff4 <tcp_input_delayed_close+0x50>
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007fe8:	687a      	ldr	r2, [r7, #4]
 8007fea:	6912      	ldr	r2, [r2, #16]
 8007fec:	f06f 010e 	mvn.w	r1, #14
 8007ff0:	4610      	mov	r0, r2
 8007ff2:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 8007ff4:	6879      	ldr	r1, [r7, #4]
 8007ff6:	480a      	ldr	r0, [pc, #40]	; (8008020 <tcp_input_delayed_close+0x7c>)
 8007ff8:	f7ff fa50 	bl	800749c <tcp_pcb_remove>
    tcp_free(pcb);
 8007ffc:	6878      	ldr	r0, [r7, #4]
 8007ffe:	f7fe f83d 	bl	800607c <tcp_free>
    return 1;
 8008002:	2301      	movs	r3, #1
 8008004:	e000      	b.n	8008008 <tcp_input_delayed_close+0x64>
  }
  return 0;
 8008006:	2300      	movs	r3, #0
}
 8008008:	4618      	mov	r0, r3
 800800a:	3708      	adds	r7, #8
 800800c:	46bd      	mov	sp, r7
 800800e:	bd80      	pop	{r7, pc}
 8008010:	08010c04 	.word	0x08010c04
 8008014:	08010dd4 	.word	0x08010dd4
 8008018:	08010c50 	.word	0x08010c50
 800801c:	20008331 	.word	0x20008331
 8008020:	200082f8 	.word	0x200082f8

08008024 <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 8008024:	b590      	push	{r4, r7, lr}
 8008026:	b08b      	sub	sp, #44	; 0x2c
 8008028:	af04      	add	r7, sp, #16
 800802a:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 800802c:	4b6f      	ldr	r3, [pc, #444]	; (80081ec <tcp_listen_input+0x1c8>)
 800802e:	781b      	ldrb	r3, [r3, #0]
 8008030:	f003 0304 	and.w	r3, r3, #4
 8008034:	2b00      	cmp	r3, #0
 8008036:	f040 80d2 	bne.w	80081de <tcp_listen_input+0x1ba>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	2b00      	cmp	r3, #0
 800803e:	d106      	bne.n	800804e <tcp_listen_input+0x2a>
 8008040:	4b6b      	ldr	r3, [pc, #428]	; (80081f0 <tcp_listen_input+0x1cc>)
 8008042:	f240 2281 	movw	r2, #641	; 0x281
 8008046:	496b      	ldr	r1, [pc, #428]	; (80081f4 <tcp_listen_input+0x1d0>)
 8008048:	486b      	ldr	r0, [pc, #428]	; (80081f8 <tcp_listen_input+0x1d4>)
 800804a:	f006 fb69 	bl	800e720 <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 800804e:	4b67      	ldr	r3, [pc, #412]	; (80081ec <tcp_listen_input+0x1c8>)
 8008050:	781b      	ldrb	r3, [r3, #0]
 8008052:	f003 0310 	and.w	r3, r3, #16
 8008056:	2b00      	cmp	r3, #0
 8008058:	d019      	beq.n	800808e <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800805a:	4b68      	ldr	r3, [pc, #416]	; (80081fc <tcp_listen_input+0x1d8>)
 800805c:	6819      	ldr	r1, [r3, #0]
 800805e:	4b68      	ldr	r3, [pc, #416]	; (8008200 <tcp_listen_input+0x1dc>)
 8008060:	881b      	ldrh	r3, [r3, #0]
 8008062:	461a      	mov	r2, r3
 8008064:	4b67      	ldr	r3, [pc, #412]	; (8008204 <tcp_listen_input+0x1e0>)
 8008066:	681b      	ldr	r3, [r3, #0]
 8008068:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800806a:	4b67      	ldr	r3, [pc, #412]	; (8008208 <tcp_listen_input+0x1e4>)
 800806c:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800806e:	885b      	ldrh	r3, [r3, #2]
 8008070:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8008072:	4a65      	ldr	r2, [pc, #404]	; (8008208 <tcp_listen_input+0x1e4>)
 8008074:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8008076:	8812      	ldrh	r2, [r2, #0]
 8008078:	b292      	uxth	r2, r2
 800807a:	9202      	str	r2, [sp, #8]
 800807c:	9301      	str	r3, [sp, #4]
 800807e:	4b63      	ldr	r3, [pc, #396]	; (800820c <tcp_listen_input+0x1e8>)
 8008080:	9300      	str	r3, [sp, #0]
 8008082:	4b63      	ldr	r3, [pc, #396]	; (8008210 <tcp_listen_input+0x1ec>)
 8008084:	4602      	mov	r2, r0
 8008086:	6878      	ldr	r0, [r7, #4]
 8008088:	f002 ff80 	bl	800af8c <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 800808c:	e0a9      	b.n	80081e2 <tcp_listen_input+0x1be>
  } else if (flags & TCP_SYN) {
 800808e:	4b57      	ldr	r3, [pc, #348]	; (80081ec <tcp_listen_input+0x1c8>)
 8008090:	781b      	ldrb	r3, [r3, #0]
 8008092:	f003 0302 	and.w	r3, r3, #2
 8008096:	2b00      	cmp	r3, #0
 8008098:	f000 80a3 	beq.w	80081e2 <tcp_listen_input+0x1be>
    npcb = tcp_alloc(pcb->prio);
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	7d5b      	ldrb	r3, [r3, #21]
 80080a0:	4618      	mov	r0, r3
 80080a2:	f7ff f927 	bl	80072f4 <tcp_alloc>
 80080a6:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 80080a8:	697b      	ldr	r3, [r7, #20]
 80080aa:	2b00      	cmp	r3, #0
 80080ac:	d111      	bne.n	80080d2 <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	699b      	ldr	r3, [r3, #24]
 80080b2:	2b00      	cmp	r3, #0
 80080b4:	d00a      	beq.n	80080cc <tcp_listen_input+0xa8>
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	699b      	ldr	r3, [r3, #24]
 80080ba:	687a      	ldr	r2, [r7, #4]
 80080bc:	6910      	ldr	r0, [r2, #16]
 80080be:	f04f 32ff 	mov.w	r2, #4294967295
 80080c2:	2100      	movs	r1, #0
 80080c4:	4798      	blx	r3
 80080c6:	4603      	mov	r3, r0
 80080c8:	73bb      	strb	r3, [r7, #14]
      return;
 80080ca:	e08b      	b.n	80081e4 <tcp_listen_input+0x1c0>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 80080cc:	23f0      	movs	r3, #240	; 0xf0
 80080ce:	73bb      	strb	r3, [r7, #14]
      return;
 80080d0:	e088      	b.n	80081e4 <tcp_listen_input+0x1c0>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 80080d2:	4b50      	ldr	r3, [pc, #320]	; (8008214 <tcp_listen_input+0x1f0>)
 80080d4:	695a      	ldr	r2, [r3, #20]
 80080d6:	697b      	ldr	r3, [r7, #20]
 80080d8:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 80080da:	4b4e      	ldr	r3, [pc, #312]	; (8008214 <tcp_listen_input+0x1f0>)
 80080dc:	691a      	ldr	r2, [r3, #16]
 80080de:	697b      	ldr	r3, [r7, #20]
 80080e0:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	8ada      	ldrh	r2, [r3, #22]
 80080e6:	697b      	ldr	r3, [r7, #20]
 80080e8:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 80080ea:	4b47      	ldr	r3, [pc, #284]	; (8008208 <tcp_listen_input+0x1e4>)
 80080ec:	681b      	ldr	r3, [r3, #0]
 80080ee:	881b      	ldrh	r3, [r3, #0]
 80080f0:	b29a      	uxth	r2, r3
 80080f2:	697b      	ldr	r3, [r7, #20]
 80080f4:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 80080f6:	697b      	ldr	r3, [r7, #20]
 80080f8:	2203      	movs	r2, #3
 80080fa:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 80080fc:	4b41      	ldr	r3, [pc, #260]	; (8008204 <tcp_listen_input+0x1e0>)
 80080fe:	681b      	ldr	r3, [r3, #0]
 8008100:	1c5a      	adds	r2, r3, #1
 8008102:	697b      	ldr	r3, [r7, #20]
 8008104:	625a      	str	r2, [r3, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 8008106:	697b      	ldr	r3, [r7, #20]
 8008108:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800810a:	697b      	ldr	r3, [r7, #20]
 800810c:	62da      	str	r2, [r3, #44]	; 0x2c
    iss = tcp_next_iss(npcb);
 800810e:	6978      	ldr	r0, [r7, #20]
 8008110:	f7ff fa58 	bl	80075c4 <tcp_next_iss>
 8008114:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 8008116:	697b      	ldr	r3, [r7, #20]
 8008118:	693a      	ldr	r2, [r7, #16]
 800811a:	659a      	str	r2, [r3, #88]	; 0x58
    npcb->snd_nxt = iss;
 800811c:	697b      	ldr	r3, [r7, #20]
 800811e:	693a      	ldr	r2, [r7, #16]
 8008120:	651a      	str	r2, [r3, #80]	; 0x50
    npcb->lastack = iss;
 8008122:	697b      	ldr	r3, [r7, #20]
 8008124:	693a      	ldr	r2, [r7, #16]
 8008126:	645a      	str	r2, [r3, #68]	; 0x44
    npcb->snd_lbb = iss;
 8008128:	697b      	ldr	r3, [r7, #20]
 800812a:	693a      	ldr	r2, [r7, #16]
 800812c:	65da      	str	r2, [r3, #92]	; 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 800812e:	4b35      	ldr	r3, [pc, #212]	; (8008204 <tcp_listen_input+0x1e0>)
 8008130:	681b      	ldr	r3, [r3, #0]
 8008132:	1e5a      	subs	r2, r3, #1
 8008134:	697b      	ldr	r3, [r7, #20]
 8008136:	655a      	str	r2, [r3, #84]	; 0x54
    npcb->callback_arg = pcb->callback_arg;
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	691a      	ldr	r2, [r3, #16]
 800813c:	697b      	ldr	r3, [r7, #20]
 800813e:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 8008140:	697b      	ldr	r3, [r7, #20]
 8008142:	687a      	ldr	r2, [r7, #4]
 8008144:	67da      	str	r2, [r3, #124]	; 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	7a5b      	ldrb	r3, [r3, #9]
 800814a:	f003 030c 	and.w	r3, r3, #12
 800814e:	b2da      	uxtb	r2, r3
 8008150:	697b      	ldr	r3, [r7, #20]
 8008152:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	7a1a      	ldrb	r2, [r3, #8]
 8008158:	697b      	ldr	r3, [r7, #20]
 800815a:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 800815c:	4b2e      	ldr	r3, [pc, #184]	; (8008218 <tcp_listen_input+0x1f4>)
 800815e:	681a      	ldr	r2, [r3, #0]
 8008160:	697b      	ldr	r3, [r7, #20]
 8008162:	60da      	str	r2, [r3, #12]
 8008164:	4a2c      	ldr	r2, [pc, #176]	; (8008218 <tcp_listen_input+0x1f4>)
 8008166:	697b      	ldr	r3, [r7, #20]
 8008168:	6013      	str	r3, [r2, #0]
 800816a:	f003 f8d1 	bl	800b310 <tcp_timer_needed>
 800816e:	4b2b      	ldr	r3, [pc, #172]	; (800821c <tcp_listen_input+0x1f8>)
 8008170:	2201      	movs	r2, #1
 8008172:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 8008174:	6978      	ldr	r0, [r7, #20]
 8008176:	f001 fd8f 	bl	8009c98 <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 800817a:	4b23      	ldr	r3, [pc, #140]	; (8008208 <tcp_listen_input+0x1e4>)
 800817c:	681b      	ldr	r3, [r3, #0]
 800817e:	89db      	ldrh	r3, [r3, #14]
 8008180:	b29a      	uxth	r2, r3
 8008182:	697b      	ldr	r3, [r7, #20]
 8008184:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 8008188:	697b      	ldr	r3, [r7, #20]
 800818a:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800818e:	697b      	ldr	r3, [r7, #20]
 8008190:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 8008194:	697b      	ldr	r3, [r7, #20]
 8008196:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 8008198:	697b      	ldr	r3, [r7, #20]
 800819a:	3304      	adds	r3, #4
 800819c:	4618      	mov	r0, r3
 800819e:	f004 ffe5 	bl	800d16c <ip4_route>
 80081a2:	4601      	mov	r1, r0
 80081a4:	697b      	ldr	r3, [r7, #20]
 80081a6:	3304      	adds	r3, #4
 80081a8:	461a      	mov	r2, r3
 80081aa:	4620      	mov	r0, r4
 80081ac:	f7ff fa30 	bl	8007610 <tcp_eff_send_mss_netif>
 80081b0:	4603      	mov	r3, r0
 80081b2:	461a      	mov	r2, r3
 80081b4:	697b      	ldr	r3, [r7, #20]
 80081b6:	865a      	strh	r2, [r3, #50]	; 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 80081b8:	2112      	movs	r1, #18
 80081ba:	6978      	ldr	r0, [r7, #20]
 80081bc:	f002 f844 	bl	800a248 <tcp_enqueue_flags>
 80081c0:	4603      	mov	r3, r0
 80081c2:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 80081c4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80081c8:	2b00      	cmp	r3, #0
 80081ca:	d004      	beq.n	80081d6 <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 80081cc:	2100      	movs	r1, #0
 80081ce:	6978      	ldr	r0, [r7, #20]
 80081d0:	f7fe f97e 	bl	80064d0 <tcp_abandon>
      return;
 80081d4:	e006      	b.n	80081e4 <tcp_listen_input+0x1c0>
    tcp_output(npcb);
 80081d6:	6978      	ldr	r0, [r7, #20]
 80081d8:	f002 f924 	bl	800a424 <tcp_output>
  return;
 80081dc:	e001      	b.n	80081e2 <tcp_listen_input+0x1be>
    return;
 80081de:	bf00      	nop
 80081e0:	e000      	b.n	80081e4 <tcp_listen_input+0x1c0>
  return;
 80081e2:	bf00      	nop
}
 80081e4:	371c      	adds	r7, #28
 80081e6:	46bd      	mov	sp, r7
 80081e8:	bd90      	pop	{r4, r7, pc}
 80081ea:	bf00      	nop
 80081ec:	20008330 	.word	0x20008330
 80081f0:	08010c04 	.word	0x08010c04
 80081f4:	08010dfc 	.word	0x08010dfc
 80081f8:	08010c50 	.word	0x08010c50
 80081fc:	20008328 	.word	0x20008328
 8008200:	2000832e 	.word	0x2000832e
 8008204:	20008324 	.word	0x20008324
 8008208:	20008314 	.word	0x20008314
 800820c:	20004d8c 	.word	0x20004d8c
 8008210:	20004d90 	.word	0x20004d90
 8008214:	20004d7c 	.word	0x20004d7c
 8008218:	200082f8 	.word	0x200082f8
 800821c:	20008300 	.word	0x20008300

08008220 <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 8008220:	b580      	push	{r7, lr}
 8008222:	b086      	sub	sp, #24
 8008224:	af04      	add	r7, sp, #16
 8008226:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 8008228:	4b2f      	ldr	r3, [pc, #188]	; (80082e8 <tcp_timewait_input+0xc8>)
 800822a:	781b      	ldrb	r3, [r3, #0]
 800822c:	f003 0304 	and.w	r3, r3, #4
 8008230:	2b00      	cmp	r3, #0
 8008232:	d153      	bne.n	80082dc <tcp_timewait_input+0xbc>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	2b00      	cmp	r3, #0
 8008238:	d106      	bne.n	8008248 <tcp_timewait_input+0x28>
 800823a:	4b2c      	ldr	r3, [pc, #176]	; (80082ec <tcp_timewait_input+0xcc>)
 800823c:	f240 22ee 	movw	r2, #750	; 0x2ee
 8008240:	492b      	ldr	r1, [pc, #172]	; (80082f0 <tcp_timewait_input+0xd0>)
 8008242:	482c      	ldr	r0, [pc, #176]	; (80082f4 <tcp_timewait_input+0xd4>)
 8008244:	f006 fa6c 	bl	800e720 <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 8008248:	4b27      	ldr	r3, [pc, #156]	; (80082e8 <tcp_timewait_input+0xc8>)
 800824a:	781b      	ldrb	r3, [r3, #0]
 800824c:	f003 0302 	and.w	r3, r3, #2
 8008250:	2b00      	cmp	r3, #0
 8008252:	d02a      	beq.n	80082aa <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 8008254:	4b28      	ldr	r3, [pc, #160]	; (80082f8 <tcp_timewait_input+0xd8>)
 8008256:	681a      	ldr	r2, [r3, #0]
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800825c:	1ad3      	subs	r3, r2, r3
 800825e:	2b00      	cmp	r3, #0
 8008260:	db2d      	blt.n	80082be <tcp_timewait_input+0x9e>
 8008262:	4b25      	ldr	r3, [pc, #148]	; (80082f8 <tcp_timewait_input+0xd8>)
 8008264:	681a      	ldr	r2, [r3, #0]
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800826a:	6879      	ldr	r1, [r7, #4]
 800826c:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800826e:	440b      	add	r3, r1
 8008270:	1ad3      	subs	r3, r2, r3
 8008272:	2b00      	cmp	r3, #0
 8008274:	dc23      	bgt.n	80082be <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8008276:	4b21      	ldr	r3, [pc, #132]	; (80082fc <tcp_timewait_input+0xdc>)
 8008278:	6819      	ldr	r1, [r3, #0]
 800827a:	4b21      	ldr	r3, [pc, #132]	; (8008300 <tcp_timewait_input+0xe0>)
 800827c:	881b      	ldrh	r3, [r3, #0]
 800827e:	461a      	mov	r2, r3
 8008280:	4b1d      	ldr	r3, [pc, #116]	; (80082f8 <tcp_timewait_input+0xd8>)
 8008282:	681b      	ldr	r3, [r3, #0]
 8008284:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8008286:	4b1f      	ldr	r3, [pc, #124]	; (8008304 <tcp_timewait_input+0xe4>)
 8008288:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800828a:	885b      	ldrh	r3, [r3, #2]
 800828c:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800828e:	4a1d      	ldr	r2, [pc, #116]	; (8008304 <tcp_timewait_input+0xe4>)
 8008290:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8008292:	8812      	ldrh	r2, [r2, #0]
 8008294:	b292      	uxth	r2, r2
 8008296:	9202      	str	r2, [sp, #8]
 8008298:	9301      	str	r3, [sp, #4]
 800829a:	4b1b      	ldr	r3, [pc, #108]	; (8008308 <tcp_timewait_input+0xe8>)
 800829c:	9300      	str	r3, [sp, #0]
 800829e:	4b1b      	ldr	r3, [pc, #108]	; (800830c <tcp_timewait_input+0xec>)
 80082a0:	4602      	mov	r2, r0
 80082a2:	6878      	ldr	r0, [r7, #4]
 80082a4:	f002 fe72 	bl	800af8c <tcp_rst>
      return;
 80082a8:	e01b      	b.n	80082e2 <tcp_timewait_input+0xc2>
    }
  } else if (flags & TCP_FIN) {
 80082aa:	4b0f      	ldr	r3, [pc, #60]	; (80082e8 <tcp_timewait_input+0xc8>)
 80082ac:	781b      	ldrb	r3, [r3, #0]
 80082ae:	f003 0301 	and.w	r3, r3, #1
 80082b2:	2b00      	cmp	r3, #0
 80082b4:	d003      	beq.n	80082be <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 80082b6:	4b16      	ldr	r3, [pc, #88]	; (8008310 <tcp_timewait_input+0xf0>)
 80082b8:	681a      	ldr	r2, [r3, #0]
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 80082be:	4b10      	ldr	r3, [pc, #64]	; (8008300 <tcp_timewait_input+0xe0>)
 80082c0:	881b      	ldrh	r3, [r3, #0]
 80082c2:	2b00      	cmp	r3, #0
 80082c4:	d00c      	beq.n	80082e0 <tcp_timewait_input+0xc0>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	8b5b      	ldrh	r3, [r3, #26]
 80082ca:	f043 0302 	orr.w	r3, r3, #2
 80082ce:	b29a      	uxth	r2, r3
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 80082d4:	6878      	ldr	r0, [r7, #4]
 80082d6:	f002 f8a5 	bl	800a424 <tcp_output>
  }
  return;
 80082da:	e001      	b.n	80082e0 <tcp_timewait_input+0xc0>
    return;
 80082dc:	bf00      	nop
 80082de:	e000      	b.n	80082e2 <tcp_timewait_input+0xc2>
  return;
 80082e0:	bf00      	nop
}
 80082e2:	3708      	adds	r7, #8
 80082e4:	46bd      	mov	sp, r7
 80082e6:	bd80      	pop	{r7, pc}
 80082e8:	20008330 	.word	0x20008330
 80082ec:	08010c04 	.word	0x08010c04
 80082f0:	08010e1c 	.word	0x08010e1c
 80082f4:	08010c50 	.word	0x08010c50
 80082f8:	20008324 	.word	0x20008324
 80082fc:	20008328 	.word	0x20008328
 8008300:	2000832e 	.word	0x2000832e
 8008304:	20008314 	.word	0x20008314
 8008308:	20004d8c 	.word	0x20004d8c
 800830c:	20004d90 	.word	0x20004d90
 8008310:	200082ec 	.word	0x200082ec

08008314 <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 8008314:	b590      	push	{r4, r7, lr}
 8008316:	b08d      	sub	sp, #52	; 0x34
 8008318:	af04      	add	r7, sp, #16
 800831a:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 800831c:	2300      	movs	r3, #0
 800831e:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 8008320:	2300      	movs	r3, #0
 8008322:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	2b00      	cmp	r3, #0
 8008328:	d106      	bne.n	8008338 <tcp_process+0x24>
 800832a:	4b9d      	ldr	r3, [pc, #628]	; (80085a0 <tcp_process+0x28c>)
 800832c:	f44f 7247 	mov.w	r2, #796	; 0x31c
 8008330:	499c      	ldr	r1, [pc, #624]	; (80085a4 <tcp_process+0x290>)
 8008332:	489d      	ldr	r0, [pc, #628]	; (80085a8 <tcp_process+0x294>)
 8008334:	f006 f9f4 	bl	800e720 <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 8008338:	4b9c      	ldr	r3, [pc, #624]	; (80085ac <tcp_process+0x298>)
 800833a:	781b      	ldrb	r3, [r3, #0]
 800833c:	f003 0304 	and.w	r3, r3, #4
 8008340:	2b00      	cmp	r3, #0
 8008342:	d04e      	beq.n	80083e2 <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	7d1b      	ldrb	r3, [r3, #20]
 8008348:	2b02      	cmp	r3, #2
 800834a:	d108      	bne.n	800835e <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8008350:	4b97      	ldr	r3, [pc, #604]	; (80085b0 <tcp_process+0x29c>)
 8008352:	681b      	ldr	r3, [r3, #0]
 8008354:	429a      	cmp	r2, r3
 8008356:	d123      	bne.n	80083a0 <tcp_process+0x8c>
        acceptable = 1;
 8008358:	2301      	movs	r3, #1
 800835a:	76fb      	strb	r3, [r7, #27]
 800835c:	e020      	b.n	80083a0 <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008362:	4b94      	ldr	r3, [pc, #592]	; (80085b4 <tcp_process+0x2a0>)
 8008364:	681b      	ldr	r3, [r3, #0]
 8008366:	429a      	cmp	r2, r3
 8008368:	d102      	bne.n	8008370 <tcp_process+0x5c>
        acceptable = 1;
 800836a:	2301      	movs	r3, #1
 800836c:	76fb      	strb	r3, [r7, #27]
 800836e:	e017      	b.n	80083a0 <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8008370:	4b90      	ldr	r3, [pc, #576]	; (80085b4 <tcp_process+0x2a0>)
 8008372:	681a      	ldr	r2, [r3, #0]
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008378:	1ad3      	subs	r3, r2, r3
 800837a:	2b00      	cmp	r3, #0
 800837c:	db10      	blt.n	80083a0 <tcp_process+0x8c>
 800837e:	4b8d      	ldr	r3, [pc, #564]	; (80085b4 <tcp_process+0x2a0>)
 8008380:	681a      	ldr	r2, [r3, #0]
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008386:	6879      	ldr	r1, [r7, #4]
 8008388:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800838a:	440b      	add	r3, r1
 800838c:	1ad3      	subs	r3, r2, r3
 800838e:	2b00      	cmp	r3, #0
 8008390:	dc06      	bgt.n	80083a0 <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	8b5b      	ldrh	r3, [r3, #26]
 8008396:	f043 0302 	orr.w	r3, r3, #2
 800839a:	b29a      	uxth	r2, r3
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 80083a0:	7efb      	ldrb	r3, [r7, #27]
 80083a2:	2b00      	cmp	r3, #0
 80083a4:	d01b      	beq.n	80083de <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	7d1b      	ldrb	r3, [r3, #20]
 80083aa:	2b00      	cmp	r3, #0
 80083ac:	d106      	bne.n	80083bc <tcp_process+0xa8>
 80083ae:	4b7c      	ldr	r3, [pc, #496]	; (80085a0 <tcp_process+0x28c>)
 80083b0:	f44f 724e 	mov.w	r2, #824	; 0x338
 80083b4:	4980      	ldr	r1, [pc, #512]	; (80085b8 <tcp_process+0x2a4>)
 80083b6:	487c      	ldr	r0, [pc, #496]	; (80085a8 <tcp_process+0x294>)
 80083b8:	f006 f9b2 	bl	800e720 <iprintf>
      recv_flags |= TF_RESET;
 80083bc:	4b7f      	ldr	r3, [pc, #508]	; (80085bc <tcp_process+0x2a8>)
 80083be:	781b      	ldrb	r3, [r3, #0]
 80083c0:	f043 0308 	orr.w	r3, r3, #8
 80083c4:	b2da      	uxtb	r2, r3
 80083c6:	4b7d      	ldr	r3, [pc, #500]	; (80085bc <tcp_process+0x2a8>)
 80083c8:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	8b5b      	ldrh	r3, [r3, #26]
 80083ce:	f023 0301 	bic.w	r3, r3, #1
 80083d2:	b29a      	uxth	r2, r3
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 80083d8:	f06f 030d 	mvn.w	r3, #13
 80083dc:	e37a      	b.n	8008ad4 <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 80083de:	2300      	movs	r3, #0
 80083e0:	e378      	b.n	8008ad4 <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 80083e2:	4b72      	ldr	r3, [pc, #456]	; (80085ac <tcp_process+0x298>)
 80083e4:	781b      	ldrb	r3, [r3, #0]
 80083e6:	f003 0302 	and.w	r3, r3, #2
 80083ea:	2b00      	cmp	r3, #0
 80083ec:	d010      	beq.n	8008410 <tcp_process+0xfc>
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	7d1b      	ldrb	r3, [r3, #20]
 80083f2:	2b02      	cmp	r3, #2
 80083f4:	d00c      	beq.n	8008410 <tcp_process+0xfc>
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	7d1b      	ldrb	r3, [r3, #20]
 80083fa:	2b03      	cmp	r3, #3
 80083fc:	d008      	beq.n	8008410 <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	8b5b      	ldrh	r3, [r3, #26]
 8008402:	f043 0302 	orr.w	r3, r3, #2
 8008406:	b29a      	uxth	r2, r3
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 800840c:	2300      	movs	r3, #0
 800840e:	e361      	b.n	8008ad4 <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	8b5b      	ldrh	r3, [r3, #26]
 8008414:	f003 0310 	and.w	r3, r3, #16
 8008418:	2b00      	cmp	r3, #0
 800841a:	d103      	bne.n	8008424 <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 800841c:	4b68      	ldr	r3, [pc, #416]	; (80085c0 <tcp_process+0x2ac>)
 800841e:	681a      	ldr	r2, [r3, #0]
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	2200      	movs	r2, #0
 8008428:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b
  pcb->persist_probe = 0;
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	2200      	movs	r2, #0
 8008430:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a

  tcp_parseopt(pcb);
 8008434:	6878      	ldr	r0, [r7, #4]
 8008436:	f001 fc2f 	bl	8009c98 <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	7d1b      	ldrb	r3, [r3, #20]
 800843e:	3b02      	subs	r3, #2
 8008440:	2b07      	cmp	r3, #7
 8008442:	f200 8337 	bhi.w	8008ab4 <tcp_process+0x7a0>
 8008446:	a201      	add	r2, pc, #4	; (adr r2, 800844c <tcp_process+0x138>)
 8008448:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800844c:	0800846d 	.word	0x0800846d
 8008450:	0800869d 	.word	0x0800869d
 8008454:	08008815 	.word	0x08008815
 8008458:	0800883f 	.word	0x0800883f
 800845c:	08008963 	.word	0x08008963
 8008460:	08008815 	.word	0x08008815
 8008464:	080089ef 	.word	0x080089ef
 8008468:	08008a7f 	.word	0x08008a7f
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 800846c:	4b4f      	ldr	r3, [pc, #316]	; (80085ac <tcp_process+0x298>)
 800846e:	781b      	ldrb	r3, [r3, #0]
 8008470:	f003 0310 	and.w	r3, r3, #16
 8008474:	2b00      	cmp	r3, #0
 8008476:	f000 80e4 	beq.w	8008642 <tcp_process+0x32e>
 800847a:	4b4c      	ldr	r3, [pc, #304]	; (80085ac <tcp_process+0x298>)
 800847c:	781b      	ldrb	r3, [r3, #0]
 800847e:	f003 0302 	and.w	r3, r3, #2
 8008482:	2b00      	cmp	r3, #0
 8008484:	f000 80dd 	beq.w	8008642 <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800848c:	1c5a      	adds	r2, r3, #1
 800848e:	4b48      	ldr	r3, [pc, #288]	; (80085b0 <tcp_process+0x29c>)
 8008490:	681b      	ldr	r3, [r3, #0]
 8008492:	429a      	cmp	r2, r3
 8008494:	f040 80d5 	bne.w	8008642 <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 8008498:	4b46      	ldr	r3, [pc, #280]	; (80085b4 <tcp_process+0x2a0>)
 800849a:	681b      	ldr	r3, [r3, #0]
 800849c:	1c5a      	adds	r2, r3, #1
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	625a      	str	r2, [r3, #36]	; 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	62da      	str	r2, [r3, #44]	; 0x2c
        pcb->lastack = ackno;
 80084aa:	4b41      	ldr	r3, [pc, #260]	; (80085b0 <tcp_process+0x29c>)
 80084ac:	681a      	ldr	r2, [r3, #0]
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	645a      	str	r2, [r3, #68]	; 0x44
        pcb->snd_wnd = tcphdr->wnd;
 80084b2:	4b44      	ldr	r3, [pc, #272]	; (80085c4 <tcp_process+0x2b0>)
 80084b4:	681b      	ldr	r3, [r3, #0]
 80084b6:	89db      	ldrh	r3, [r3, #14]
 80084b8:	b29a      	uxth	r2, r3
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 80084cc:	4b39      	ldr	r3, [pc, #228]	; (80085b4 <tcp_process+0x2a0>)
 80084ce:	681b      	ldr	r3, [r3, #0]
 80084d0:	1e5a      	subs	r2, r3, #1
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	655a      	str	r2, [r3, #84]	; 0x54
        pcb->state = ESTABLISHED;
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	2204      	movs	r2, #4
 80084da:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	3304      	adds	r3, #4
 80084e4:	4618      	mov	r0, r3
 80084e6:	f004 fe41 	bl	800d16c <ip4_route>
 80084ea:	4601      	mov	r1, r0
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	3304      	adds	r3, #4
 80084f0:	461a      	mov	r2, r3
 80084f2:	4620      	mov	r0, r4
 80084f4:	f7ff f88c 	bl	8007610 <tcp_eff_send_mss_netif>
 80084f8:	4603      	mov	r3, r0
 80084fa:	461a      	mov	r2, r3
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8008504:	009a      	lsls	r2, r3, #2
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800850a:	005b      	lsls	r3, r3, #1
 800850c:	f241 111c 	movw	r1, #4380	; 0x111c
 8008510:	428b      	cmp	r3, r1
 8008512:	bf38      	it	cc
 8008514:	460b      	movcc	r3, r1
 8008516:	429a      	cmp	r2, r3
 8008518:	d204      	bcs.n	8008524 <tcp_process+0x210>
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800851e:	009b      	lsls	r3, r3, #2
 8008520:	b29b      	uxth	r3, r3
 8008522:	e00d      	b.n	8008540 <tcp_process+0x22c>
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8008528:	005b      	lsls	r3, r3, #1
 800852a:	f241 121c 	movw	r2, #4380	; 0x111c
 800852e:	4293      	cmp	r3, r2
 8008530:	d904      	bls.n	800853c <tcp_process+0x228>
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8008536:	005b      	lsls	r3, r3, #1
 8008538:	b29b      	uxth	r3, r3
 800853a:	e001      	b.n	8008540 <tcp_process+0x22c>
 800853c:	f241 131c 	movw	r3, #4380	; 0x111c
 8008540:	687a      	ldr	r2, [r7, #4]
 8008542:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800854c:	2b00      	cmp	r3, #0
 800854e:	d106      	bne.n	800855e <tcp_process+0x24a>
 8008550:	4b13      	ldr	r3, [pc, #76]	; (80085a0 <tcp_process+0x28c>)
 8008552:	f44f 725b 	mov.w	r2, #876	; 0x36c
 8008556:	491c      	ldr	r1, [pc, #112]	; (80085c8 <tcp_process+0x2b4>)
 8008558:	4813      	ldr	r0, [pc, #76]	; (80085a8 <tcp_process+0x294>)
 800855a:	f006 f8e1 	bl	800e720 <iprintf>
        --pcb->snd_queuelen;
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8008564:	3b01      	subs	r3, #1
 8008566:	b29a      	uxth	r2, r3
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 800856e:	687b      	ldr	r3, [r7, #4]
 8008570:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008572:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 8008574:	69fb      	ldr	r3, [r7, #28]
 8008576:	2b00      	cmp	r3, #0
 8008578:	d12a      	bne.n	80085d0 <tcp_process+0x2bc>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 800857a:	687b      	ldr	r3, [r7, #4]
 800857c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800857e:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 8008580:	69fb      	ldr	r3, [r7, #28]
 8008582:	2b00      	cmp	r3, #0
 8008584:	d106      	bne.n	8008594 <tcp_process+0x280>
 8008586:	4b06      	ldr	r3, [pc, #24]	; (80085a0 <tcp_process+0x28c>)
 8008588:	f44f 725d 	mov.w	r2, #884	; 0x374
 800858c:	490f      	ldr	r1, [pc, #60]	; (80085cc <tcp_process+0x2b8>)
 800858e:	4806      	ldr	r0, [pc, #24]	; (80085a8 <tcp_process+0x294>)
 8008590:	f006 f8c6 	bl	800e720 <iprintf>
          pcb->unsent = rseg->next;
 8008594:	69fb      	ldr	r3, [r7, #28]
 8008596:	681a      	ldr	r2, [r3, #0]
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	66da      	str	r2, [r3, #108]	; 0x6c
 800859c:	e01c      	b.n	80085d8 <tcp_process+0x2c4>
 800859e:	bf00      	nop
 80085a0:	08010c04 	.word	0x08010c04
 80085a4:	08010e3c 	.word	0x08010e3c
 80085a8:	08010c50 	.word	0x08010c50
 80085ac:	20008330 	.word	0x20008330
 80085b0:	20008328 	.word	0x20008328
 80085b4:	20008324 	.word	0x20008324
 80085b8:	08010e58 	.word	0x08010e58
 80085bc:	20008331 	.word	0x20008331
 80085c0:	200082ec 	.word	0x200082ec
 80085c4:	20008314 	.word	0x20008314
 80085c8:	08010e78 	.word	0x08010e78
 80085cc:	08010e90 	.word	0x08010e90
        } else {
          pcb->unacked = rseg->next;
 80085d0:	69fb      	ldr	r3, [r7, #28]
 80085d2:	681a      	ldr	r2, [r3, #0]
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	671a      	str	r2, [r3, #112]	; 0x70
        }
        tcp_seg_free(rseg);
 80085d8:	69f8      	ldr	r0, [r7, #28]
 80085da:	f7fe fd22 	bl	8007022 <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80085e2:	2b00      	cmp	r3, #0
 80085e4:	d104      	bne.n	80085f0 <tcp_process+0x2dc>
          pcb->rtime = -1;
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80085ec:	861a      	strh	r2, [r3, #48]	; 0x30
 80085ee:	e006      	b.n	80085fe <tcp_process+0x2ea>
        } else {
          pcb->rtime = 0;
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	2200      	movs	r2, #0
 80085f4:	861a      	strh	r2, [r3, #48]	; 0x30
          pcb->nrtx = 0;
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	2200      	movs	r2, #0
 80085fa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008604:	2b00      	cmp	r3, #0
 8008606:	d00a      	beq.n	800861e <tcp_process+0x30a>
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800860e:	687a      	ldr	r2, [r7, #4]
 8008610:	6910      	ldr	r0, [r2, #16]
 8008612:	2200      	movs	r2, #0
 8008614:	6879      	ldr	r1, [r7, #4]
 8008616:	4798      	blx	r3
 8008618:	4603      	mov	r3, r0
 800861a:	76bb      	strb	r3, [r7, #26]
 800861c:	e001      	b.n	8008622 <tcp_process+0x30e>
 800861e:	2300      	movs	r3, #0
 8008620:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 8008622:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8008626:	f113 0f0d 	cmn.w	r3, #13
 800862a:	d102      	bne.n	8008632 <tcp_process+0x31e>
          return ERR_ABRT;
 800862c:	f06f 030c 	mvn.w	r3, #12
 8008630:	e250      	b.n	8008ad4 <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	8b5b      	ldrh	r3, [r3, #26]
 8008636:	f043 0302 	orr.w	r3, r3, #2
 800863a:	b29a      	uxth	r2, r3
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 8008640:	e23a      	b.n	8008ab8 <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 8008642:	4b98      	ldr	r3, [pc, #608]	; (80088a4 <tcp_process+0x590>)
 8008644:	781b      	ldrb	r3, [r3, #0]
 8008646:	f003 0310 	and.w	r3, r3, #16
 800864a:	2b00      	cmp	r3, #0
 800864c:	f000 8234 	beq.w	8008ab8 <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8008650:	4b95      	ldr	r3, [pc, #596]	; (80088a8 <tcp_process+0x594>)
 8008652:	6819      	ldr	r1, [r3, #0]
 8008654:	4b95      	ldr	r3, [pc, #596]	; (80088ac <tcp_process+0x598>)
 8008656:	881b      	ldrh	r3, [r3, #0]
 8008658:	461a      	mov	r2, r3
 800865a:	4b95      	ldr	r3, [pc, #596]	; (80088b0 <tcp_process+0x59c>)
 800865c:	681b      	ldr	r3, [r3, #0]
 800865e:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8008660:	4b94      	ldr	r3, [pc, #592]	; (80088b4 <tcp_process+0x5a0>)
 8008662:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8008664:	885b      	ldrh	r3, [r3, #2]
 8008666:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8008668:	4a92      	ldr	r2, [pc, #584]	; (80088b4 <tcp_process+0x5a0>)
 800866a:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800866c:	8812      	ldrh	r2, [r2, #0]
 800866e:	b292      	uxth	r2, r2
 8008670:	9202      	str	r2, [sp, #8]
 8008672:	9301      	str	r3, [sp, #4]
 8008674:	4b90      	ldr	r3, [pc, #576]	; (80088b8 <tcp_process+0x5a4>)
 8008676:	9300      	str	r3, [sp, #0]
 8008678:	4b90      	ldr	r3, [pc, #576]	; (80088bc <tcp_process+0x5a8>)
 800867a:	4602      	mov	r2, r0
 800867c:	6878      	ldr	r0, [r7, #4]
 800867e:	f002 fc85 	bl	800af8c <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8008688:	2b05      	cmp	r3, #5
 800868a:	f200 8215 	bhi.w	8008ab8 <tcp_process+0x7a4>
          pcb->rtime = 0;
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	2200      	movs	r2, #0
 8008692:	861a      	strh	r2, [r3, #48]	; 0x30
          tcp_rexmit_rto(pcb);
 8008694:	6878      	ldr	r0, [r7, #4]
 8008696:	f002 fa51 	bl	800ab3c <tcp_rexmit_rto>
      break;
 800869a:	e20d      	b.n	8008ab8 <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 800869c:	4b81      	ldr	r3, [pc, #516]	; (80088a4 <tcp_process+0x590>)
 800869e:	781b      	ldrb	r3, [r3, #0]
 80086a0:	f003 0310 	and.w	r3, r3, #16
 80086a4:	2b00      	cmp	r3, #0
 80086a6:	f000 80a1 	beq.w	80087ec <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 80086aa:	4b7f      	ldr	r3, [pc, #508]	; (80088a8 <tcp_process+0x594>)
 80086ac:	681a      	ldr	r2, [r3, #0]
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80086b2:	1ad3      	subs	r3, r2, r3
 80086b4:	3b01      	subs	r3, #1
 80086b6:	2b00      	cmp	r3, #0
 80086b8:	db7e      	blt.n	80087b8 <tcp_process+0x4a4>
 80086ba:	4b7b      	ldr	r3, [pc, #492]	; (80088a8 <tcp_process+0x594>)
 80086bc:	681a      	ldr	r2, [r3, #0]
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80086c2:	1ad3      	subs	r3, r2, r3
 80086c4:	2b00      	cmp	r3, #0
 80086c6:	dc77      	bgt.n	80087b8 <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	2204      	movs	r2, #4
 80086cc:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 80086ce:	687b      	ldr	r3, [r7, #4]
 80086d0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80086d2:	2b00      	cmp	r3, #0
 80086d4:	d102      	bne.n	80086dc <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 80086d6:	23fa      	movs	r3, #250	; 0xfa
 80086d8:	76bb      	strb	r3, [r7, #26]
 80086da:	e01d      	b.n	8008718 <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80086e0:	699b      	ldr	r3, [r3, #24]
 80086e2:	2b00      	cmp	r3, #0
 80086e4:	d106      	bne.n	80086f4 <tcp_process+0x3e0>
 80086e6:	4b76      	ldr	r3, [pc, #472]	; (80088c0 <tcp_process+0x5ac>)
 80086e8:	f44f 726a 	mov.w	r2, #936	; 0x3a8
 80086ec:	4975      	ldr	r1, [pc, #468]	; (80088c4 <tcp_process+0x5b0>)
 80086ee:	4876      	ldr	r0, [pc, #472]	; (80088c8 <tcp_process+0x5b4>)
 80086f0:	f006 f816 	bl	800e720 <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80086f8:	699b      	ldr	r3, [r3, #24]
 80086fa:	2b00      	cmp	r3, #0
 80086fc:	d00a      	beq.n	8008714 <tcp_process+0x400>
 80086fe:	687b      	ldr	r3, [r7, #4]
 8008700:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008702:	699b      	ldr	r3, [r3, #24]
 8008704:	687a      	ldr	r2, [r7, #4]
 8008706:	6910      	ldr	r0, [r2, #16]
 8008708:	2200      	movs	r2, #0
 800870a:	6879      	ldr	r1, [r7, #4]
 800870c:	4798      	blx	r3
 800870e:	4603      	mov	r3, r0
 8008710:	76bb      	strb	r3, [r7, #26]
 8008712:	e001      	b.n	8008718 <tcp_process+0x404>
 8008714:	23f0      	movs	r3, #240	; 0xf0
 8008716:	76bb      	strb	r3, [r7, #26]
          }
          if (err != ERR_OK) {
 8008718:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800871c:	2b00      	cmp	r3, #0
 800871e:	d00a      	beq.n	8008736 <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 8008720:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8008724:	f113 0f0d 	cmn.w	r3, #13
 8008728:	d002      	beq.n	8008730 <tcp_process+0x41c>
              tcp_abort(pcb);
 800872a:	6878      	ldr	r0, [r7, #4]
 800872c:	f7fd ff8e 	bl	800664c <tcp_abort>
            }
            return ERR_ABRT;
 8008730:	f06f 030c 	mvn.w	r3, #12
 8008734:	e1ce      	b.n	8008ad4 <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 8008736:	6878      	ldr	r0, [r7, #4]
 8008738:	f000 fae0 	bl	8008cfc <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 800873c:	4b63      	ldr	r3, [pc, #396]	; (80088cc <tcp_process+0x5b8>)
 800873e:	881b      	ldrh	r3, [r3, #0]
 8008740:	2b00      	cmp	r3, #0
 8008742:	d005      	beq.n	8008750 <tcp_process+0x43c>
            recv_acked--;
 8008744:	4b61      	ldr	r3, [pc, #388]	; (80088cc <tcp_process+0x5b8>)
 8008746:	881b      	ldrh	r3, [r3, #0]
 8008748:	3b01      	subs	r3, #1
 800874a:	b29a      	uxth	r2, r3
 800874c:	4b5f      	ldr	r3, [pc, #380]	; (80088cc <tcp_process+0x5b8>)
 800874e:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8008754:	009a      	lsls	r2, r3, #2
 8008756:	687b      	ldr	r3, [r7, #4]
 8008758:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800875a:	005b      	lsls	r3, r3, #1
 800875c:	f241 111c 	movw	r1, #4380	; 0x111c
 8008760:	428b      	cmp	r3, r1
 8008762:	bf38      	it	cc
 8008764:	460b      	movcc	r3, r1
 8008766:	429a      	cmp	r2, r3
 8008768:	d204      	bcs.n	8008774 <tcp_process+0x460>
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800876e:	009b      	lsls	r3, r3, #2
 8008770:	b29b      	uxth	r3, r3
 8008772:	e00d      	b.n	8008790 <tcp_process+0x47c>
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8008778:	005b      	lsls	r3, r3, #1
 800877a:	f241 121c 	movw	r2, #4380	; 0x111c
 800877e:	4293      	cmp	r3, r2
 8008780:	d904      	bls.n	800878c <tcp_process+0x478>
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8008786:	005b      	lsls	r3, r3, #1
 8008788:	b29b      	uxth	r3, r3
 800878a:	e001      	b.n	8008790 <tcp_process+0x47c>
 800878c:	f241 131c 	movw	r3, #4380	; 0x111c
 8008790:	687a      	ldr	r2, [r7, #4]
 8008792:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 8008796:	4b4e      	ldr	r3, [pc, #312]	; (80088d0 <tcp_process+0x5bc>)
 8008798:	781b      	ldrb	r3, [r3, #0]
 800879a:	f003 0320 	and.w	r3, r3, #32
 800879e:	2b00      	cmp	r3, #0
 80087a0:	d037      	beq.n	8008812 <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	8b5b      	ldrh	r3, [r3, #26]
 80087a6:	f043 0302 	orr.w	r3, r3, #2
 80087aa:	b29a      	uxth	r2, r3
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	2207      	movs	r2, #7
 80087b4:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 80087b6:	e02c      	b.n	8008812 <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80087b8:	4b3b      	ldr	r3, [pc, #236]	; (80088a8 <tcp_process+0x594>)
 80087ba:	6819      	ldr	r1, [r3, #0]
 80087bc:	4b3b      	ldr	r3, [pc, #236]	; (80088ac <tcp_process+0x598>)
 80087be:	881b      	ldrh	r3, [r3, #0]
 80087c0:	461a      	mov	r2, r3
 80087c2:	4b3b      	ldr	r3, [pc, #236]	; (80088b0 <tcp_process+0x59c>)
 80087c4:	681b      	ldr	r3, [r3, #0]
 80087c6:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80087c8:	4b3a      	ldr	r3, [pc, #232]	; (80088b4 <tcp_process+0x5a0>)
 80087ca:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80087cc:	885b      	ldrh	r3, [r3, #2]
 80087ce:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80087d0:	4a38      	ldr	r2, [pc, #224]	; (80088b4 <tcp_process+0x5a0>)
 80087d2:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80087d4:	8812      	ldrh	r2, [r2, #0]
 80087d6:	b292      	uxth	r2, r2
 80087d8:	9202      	str	r2, [sp, #8]
 80087da:	9301      	str	r3, [sp, #4]
 80087dc:	4b36      	ldr	r3, [pc, #216]	; (80088b8 <tcp_process+0x5a4>)
 80087de:	9300      	str	r3, [sp, #0]
 80087e0:	4b36      	ldr	r3, [pc, #216]	; (80088bc <tcp_process+0x5a8>)
 80087e2:	4602      	mov	r2, r0
 80087e4:	6878      	ldr	r0, [r7, #4]
 80087e6:	f002 fbd1 	bl	800af8c <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 80087ea:	e167      	b.n	8008abc <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 80087ec:	4b2d      	ldr	r3, [pc, #180]	; (80088a4 <tcp_process+0x590>)
 80087ee:	781b      	ldrb	r3, [r3, #0]
 80087f0:	f003 0302 	and.w	r3, r3, #2
 80087f4:	2b00      	cmp	r3, #0
 80087f6:	f000 8161 	beq.w	8008abc <tcp_process+0x7a8>
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80087fe:	1e5a      	subs	r2, r3, #1
 8008800:	4b2b      	ldr	r3, [pc, #172]	; (80088b0 <tcp_process+0x59c>)
 8008802:	681b      	ldr	r3, [r3, #0]
 8008804:	429a      	cmp	r2, r3
 8008806:	f040 8159 	bne.w	8008abc <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 800880a:	6878      	ldr	r0, [r7, #4]
 800880c:	f002 f9b8 	bl	800ab80 <tcp_rexmit>
      break;
 8008810:	e154      	b.n	8008abc <tcp_process+0x7a8>
 8008812:	e153      	b.n	8008abc <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 8008814:	6878      	ldr	r0, [r7, #4]
 8008816:	f000 fa71 	bl	8008cfc <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 800881a:	4b2d      	ldr	r3, [pc, #180]	; (80088d0 <tcp_process+0x5bc>)
 800881c:	781b      	ldrb	r3, [r3, #0]
 800881e:	f003 0320 	and.w	r3, r3, #32
 8008822:	2b00      	cmp	r3, #0
 8008824:	f000 814c 	beq.w	8008ac0 <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	8b5b      	ldrh	r3, [r3, #26]
 800882c:	f043 0302 	orr.w	r3, r3, #2
 8008830:	b29a      	uxth	r2, r3
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	2207      	movs	r2, #7
 800883a:	751a      	strb	r2, [r3, #20]
      }
      break;
 800883c:	e140      	b.n	8008ac0 <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 800883e:	6878      	ldr	r0, [r7, #4]
 8008840:	f000 fa5c 	bl	8008cfc <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 8008844:	4b22      	ldr	r3, [pc, #136]	; (80088d0 <tcp_process+0x5bc>)
 8008846:	781b      	ldrb	r3, [r3, #0]
 8008848:	f003 0320 	and.w	r3, r3, #32
 800884c:	2b00      	cmp	r3, #0
 800884e:	d071      	beq.n	8008934 <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8008850:	4b14      	ldr	r3, [pc, #80]	; (80088a4 <tcp_process+0x590>)
 8008852:	781b      	ldrb	r3, [r3, #0]
 8008854:	f003 0310 	and.w	r3, r3, #16
 8008858:	2b00      	cmp	r3, #0
 800885a:	d060      	beq.n	800891e <tcp_process+0x60a>
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8008860:	4b11      	ldr	r3, [pc, #68]	; (80088a8 <tcp_process+0x594>)
 8008862:	681b      	ldr	r3, [r3, #0]
 8008864:	429a      	cmp	r2, r3
 8008866:	d15a      	bne.n	800891e <tcp_process+0x60a>
            pcb->unsent == NULL) {
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800886c:	2b00      	cmp	r3, #0
 800886e:	d156      	bne.n	800891e <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	8b5b      	ldrh	r3, [r3, #26]
 8008874:	f043 0302 	orr.w	r3, r3, #2
 8008878:	b29a      	uxth	r2, r3
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 800887e:	6878      	ldr	r0, [r7, #4]
 8008880:	f7fe fdbc 	bl	80073fc <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 8008884:	4b13      	ldr	r3, [pc, #76]	; (80088d4 <tcp_process+0x5c0>)
 8008886:	681b      	ldr	r3, [r3, #0]
 8008888:	687a      	ldr	r2, [r7, #4]
 800888a:	429a      	cmp	r2, r3
 800888c:	d105      	bne.n	800889a <tcp_process+0x586>
 800888e:	4b11      	ldr	r3, [pc, #68]	; (80088d4 <tcp_process+0x5c0>)
 8008890:	681b      	ldr	r3, [r3, #0]
 8008892:	68db      	ldr	r3, [r3, #12]
 8008894:	4a0f      	ldr	r2, [pc, #60]	; (80088d4 <tcp_process+0x5c0>)
 8008896:	6013      	str	r3, [r2, #0]
 8008898:	e02e      	b.n	80088f8 <tcp_process+0x5e4>
 800889a:	4b0e      	ldr	r3, [pc, #56]	; (80088d4 <tcp_process+0x5c0>)
 800889c:	681b      	ldr	r3, [r3, #0]
 800889e:	617b      	str	r3, [r7, #20]
 80088a0:	e027      	b.n	80088f2 <tcp_process+0x5de>
 80088a2:	bf00      	nop
 80088a4:	20008330 	.word	0x20008330
 80088a8:	20008328 	.word	0x20008328
 80088ac:	2000832e 	.word	0x2000832e
 80088b0:	20008324 	.word	0x20008324
 80088b4:	20008314 	.word	0x20008314
 80088b8:	20004d8c 	.word	0x20004d8c
 80088bc:	20004d90 	.word	0x20004d90
 80088c0:	08010c04 	.word	0x08010c04
 80088c4:	08010ea4 	.word	0x08010ea4
 80088c8:	08010c50 	.word	0x08010c50
 80088cc:	2000832c 	.word	0x2000832c
 80088d0:	20008331 	.word	0x20008331
 80088d4:	200082f8 	.word	0x200082f8
 80088d8:	697b      	ldr	r3, [r7, #20]
 80088da:	68db      	ldr	r3, [r3, #12]
 80088dc:	687a      	ldr	r2, [r7, #4]
 80088de:	429a      	cmp	r2, r3
 80088e0:	d104      	bne.n	80088ec <tcp_process+0x5d8>
 80088e2:	687b      	ldr	r3, [r7, #4]
 80088e4:	68da      	ldr	r2, [r3, #12]
 80088e6:	697b      	ldr	r3, [r7, #20]
 80088e8:	60da      	str	r2, [r3, #12]
 80088ea:	e005      	b.n	80088f8 <tcp_process+0x5e4>
 80088ec:	697b      	ldr	r3, [r7, #20]
 80088ee:	68db      	ldr	r3, [r3, #12]
 80088f0:	617b      	str	r3, [r7, #20]
 80088f2:	697b      	ldr	r3, [r7, #20]
 80088f4:	2b00      	cmp	r3, #0
 80088f6:	d1ef      	bne.n	80088d8 <tcp_process+0x5c4>
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	2200      	movs	r2, #0
 80088fc:	60da      	str	r2, [r3, #12]
 80088fe:	4b77      	ldr	r3, [pc, #476]	; (8008adc <tcp_process+0x7c8>)
 8008900:	2201      	movs	r2, #1
 8008902:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	220a      	movs	r2, #10
 8008908:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 800890a:	4b75      	ldr	r3, [pc, #468]	; (8008ae0 <tcp_process+0x7cc>)
 800890c:	681a      	ldr	r2, [r3, #0]
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	60da      	str	r2, [r3, #12]
 8008912:	4a73      	ldr	r2, [pc, #460]	; (8008ae0 <tcp_process+0x7cc>)
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	6013      	str	r3, [r2, #0]
 8008918:	f002 fcfa 	bl	800b310 <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 800891c:	e0d2      	b.n	8008ac4 <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 800891e:	687b      	ldr	r3, [r7, #4]
 8008920:	8b5b      	ldrh	r3, [r3, #26]
 8008922:	f043 0302 	orr.w	r3, r3, #2
 8008926:	b29a      	uxth	r2, r3
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	2208      	movs	r2, #8
 8008930:	751a      	strb	r2, [r3, #20]
      break;
 8008932:	e0c7      	b.n	8008ac4 <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8008934:	4b6b      	ldr	r3, [pc, #428]	; (8008ae4 <tcp_process+0x7d0>)
 8008936:	781b      	ldrb	r3, [r3, #0]
 8008938:	f003 0310 	and.w	r3, r3, #16
 800893c:	2b00      	cmp	r3, #0
 800893e:	f000 80c1 	beq.w	8008ac4 <tcp_process+0x7b0>
 8008942:	687b      	ldr	r3, [r7, #4]
 8008944:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8008946:	4b68      	ldr	r3, [pc, #416]	; (8008ae8 <tcp_process+0x7d4>)
 8008948:	681b      	ldr	r3, [r3, #0]
 800894a:	429a      	cmp	r2, r3
 800894c:	f040 80ba 	bne.w	8008ac4 <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	6edb      	ldr	r3, [r3, #108]	; 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8008954:	2b00      	cmp	r3, #0
 8008956:	f040 80b5 	bne.w	8008ac4 <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	2206      	movs	r2, #6
 800895e:	751a      	strb	r2, [r3, #20]
      break;
 8008960:	e0b0      	b.n	8008ac4 <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 8008962:	6878      	ldr	r0, [r7, #4]
 8008964:	f000 f9ca 	bl	8008cfc <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 8008968:	4b60      	ldr	r3, [pc, #384]	; (8008aec <tcp_process+0x7d8>)
 800896a:	781b      	ldrb	r3, [r3, #0]
 800896c:	f003 0320 	and.w	r3, r3, #32
 8008970:	2b00      	cmp	r3, #0
 8008972:	f000 80a9 	beq.w	8008ac8 <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 8008976:	687b      	ldr	r3, [r7, #4]
 8008978:	8b5b      	ldrh	r3, [r3, #26]
 800897a:	f043 0302 	orr.w	r3, r3, #2
 800897e:	b29a      	uxth	r2, r3
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 8008984:	6878      	ldr	r0, [r7, #4]
 8008986:	f7fe fd39 	bl	80073fc <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 800898a:	4b59      	ldr	r3, [pc, #356]	; (8008af0 <tcp_process+0x7dc>)
 800898c:	681b      	ldr	r3, [r3, #0]
 800898e:	687a      	ldr	r2, [r7, #4]
 8008990:	429a      	cmp	r2, r3
 8008992:	d105      	bne.n	80089a0 <tcp_process+0x68c>
 8008994:	4b56      	ldr	r3, [pc, #344]	; (8008af0 <tcp_process+0x7dc>)
 8008996:	681b      	ldr	r3, [r3, #0]
 8008998:	68db      	ldr	r3, [r3, #12]
 800899a:	4a55      	ldr	r2, [pc, #340]	; (8008af0 <tcp_process+0x7dc>)
 800899c:	6013      	str	r3, [r2, #0]
 800899e:	e013      	b.n	80089c8 <tcp_process+0x6b4>
 80089a0:	4b53      	ldr	r3, [pc, #332]	; (8008af0 <tcp_process+0x7dc>)
 80089a2:	681b      	ldr	r3, [r3, #0]
 80089a4:	613b      	str	r3, [r7, #16]
 80089a6:	e00c      	b.n	80089c2 <tcp_process+0x6ae>
 80089a8:	693b      	ldr	r3, [r7, #16]
 80089aa:	68db      	ldr	r3, [r3, #12]
 80089ac:	687a      	ldr	r2, [r7, #4]
 80089ae:	429a      	cmp	r2, r3
 80089b0:	d104      	bne.n	80089bc <tcp_process+0x6a8>
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	68da      	ldr	r2, [r3, #12]
 80089b6:	693b      	ldr	r3, [r7, #16]
 80089b8:	60da      	str	r2, [r3, #12]
 80089ba:	e005      	b.n	80089c8 <tcp_process+0x6b4>
 80089bc:	693b      	ldr	r3, [r7, #16]
 80089be:	68db      	ldr	r3, [r3, #12]
 80089c0:	613b      	str	r3, [r7, #16]
 80089c2:	693b      	ldr	r3, [r7, #16]
 80089c4:	2b00      	cmp	r3, #0
 80089c6:	d1ef      	bne.n	80089a8 <tcp_process+0x694>
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	2200      	movs	r2, #0
 80089cc:	60da      	str	r2, [r3, #12]
 80089ce:	4b43      	ldr	r3, [pc, #268]	; (8008adc <tcp_process+0x7c8>)
 80089d0:	2201      	movs	r2, #1
 80089d2:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	220a      	movs	r2, #10
 80089d8:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 80089da:	4b41      	ldr	r3, [pc, #260]	; (8008ae0 <tcp_process+0x7cc>)
 80089dc:	681a      	ldr	r2, [r3, #0]
 80089de:	687b      	ldr	r3, [r7, #4]
 80089e0:	60da      	str	r2, [r3, #12]
 80089e2:	4a3f      	ldr	r2, [pc, #252]	; (8008ae0 <tcp_process+0x7cc>)
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	6013      	str	r3, [r2, #0]
 80089e8:	f002 fc92 	bl	800b310 <tcp_timer_needed>
      }
      break;
 80089ec:	e06c      	b.n	8008ac8 <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 80089ee:	6878      	ldr	r0, [r7, #4]
 80089f0:	f000 f984 	bl	8008cfc <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 80089f4:	4b3b      	ldr	r3, [pc, #236]	; (8008ae4 <tcp_process+0x7d0>)
 80089f6:	781b      	ldrb	r3, [r3, #0]
 80089f8:	f003 0310 	and.w	r3, r3, #16
 80089fc:	2b00      	cmp	r3, #0
 80089fe:	d065      	beq.n	8008acc <tcp_process+0x7b8>
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8008a04:	4b38      	ldr	r3, [pc, #224]	; (8008ae8 <tcp_process+0x7d4>)
 8008a06:	681b      	ldr	r3, [r3, #0]
 8008a08:	429a      	cmp	r2, r3
 8008a0a:	d15f      	bne.n	8008acc <tcp_process+0x7b8>
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008a10:	2b00      	cmp	r3, #0
 8008a12:	d15b      	bne.n	8008acc <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 8008a14:	6878      	ldr	r0, [r7, #4]
 8008a16:	f7fe fcf1 	bl	80073fc <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 8008a1a:	4b35      	ldr	r3, [pc, #212]	; (8008af0 <tcp_process+0x7dc>)
 8008a1c:	681b      	ldr	r3, [r3, #0]
 8008a1e:	687a      	ldr	r2, [r7, #4]
 8008a20:	429a      	cmp	r2, r3
 8008a22:	d105      	bne.n	8008a30 <tcp_process+0x71c>
 8008a24:	4b32      	ldr	r3, [pc, #200]	; (8008af0 <tcp_process+0x7dc>)
 8008a26:	681b      	ldr	r3, [r3, #0]
 8008a28:	68db      	ldr	r3, [r3, #12]
 8008a2a:	4a31      	ldr	r2, [pc, #196]	; (8008af0 <tcp_process+0x7dc>)
 8008a2c:	6013      	str	r3, [r2, #0]
 8008a2e:	e013      	b.n	8008a58 <tcp_process+0x744>
 8008a30:	4b2f      	ldr	r3, [pc, #188]	; (8008af0 <tcp_process+0x7dc>)
 8008a32:	681b      	ldr	r3, [r3, #0]
 8008a34:	60fb      	str	r3, [r7, #12]
 8008a36:	e00c      	b.n	8008a52 <tcp_process+0x73e>
 8008a38:	68fb      	ldr	r3, [r7, #12]
 8008a3a:	68db      	ldr	r3, [r3, #12]
 8008a3c:	687a      	ldr	r2, [r7, #4]
 8008a3e:	429a      	cmp	r2, r3
 8008a40:	d104      	bne.n	8008a4c <tcp_process+0x738>
 8008a42:	687b      	ldr	r3, [r7, #4]
 8008a44:	68da      	ldr	r2, [r3, #12]
 8008a46:	68fb      	ldr	r3, [r7, #12]
 8008a48:	60da      	str	r2, [r3, #12]
 8008a4a:	e005      	b.n	8008a58 <tcp_process+0x744>
 8008a4c:	68fb      	ldr	r3, [r7, #12]
 8008a4e:	68db      	ldr	r3, [r3, #12]
 8008a50:	60fb      	str	r3, [r7, #12]
 8008a52:	68fb      	ldr	r3, [r7, #12]
 8008a54:	2b00      	cmp	r3, #0
 8008a56:	d1ef      	bne.n	8008a38 <tcp_process+0x724>
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	2200      	movs	r2, #0
 8008a5c:	60da      	str	r2, [r3, #12]
 8008a5e:	4b1f      	ldr	r3, [pc, #124]	; (8008adc <tcp_process+0x7c8>)
 8008a60:	2201      	movs	r2, #1
 8008a62:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 8008a64:	687b      	ldr	r3, [r7, #4]
 8008a66:	220a      	movs	r2, #10
 8008a68:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 8008a6a:	4b1d      	ldr	r3, [pc, #116]	; (8008ae0 <tcp_process+0x7cc>)
 8008a6c:	681a      	ldr	r2, [r3, #0]
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	60da      	str	r2, [r3, #12]
 8008a72:	4a1b      	ldr	r2, [pc, #108]	; (8008ae0 <tcp_process+0x7cc>)
 8008a74:	687b      	ldr	r3, [r7, #4]
 8008a76:	6013      	str	r3, [r2, #0]
 8008a78:	f002 fc4a 	bl	800b310 <tcp_timer_needed>
      }
      break;
 8008a7c:	e026      	b.n	8008acc <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 8008a7e:	6878      	ldr	r0, [r7, #4]
 8008a80:	f000 f93c 	bl	8008cfc <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8008a84:	4b17      	ldr	r3, [pc, #92]	; (8008ae4 <tcp_process+0x7d0>)
 8008a86:	781b      	ldrb	r3, [r3, #0]
 8008a88:	f003 0310 	and.w	r3, r3, #16
 8008a8c:	2b00      	cmp	r3, #0
 8008a8e:	d01f      	beq.n	8008ad0 <tcp_process+0x7bc>
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8008a94:	4b14      	ldr	r3, [pc, #80]	; (8008ae8 <tcp_process+0x7d4>)
 8008a96:	681b      	ldr	r3, [r3, #0]
 8008a98:	429a      	cmp	r2, r3
 8008a9a:	d119      	bne.n	8008ad0 <tcp_process+0x7bc>
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008aa0:	2b00      	cmp	r3, #0
 8008aa2:	d115      	bne.n	8008ad0 <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 8008aa4:	4b11      	ldr	r3, [pc, #68]	; (8008aec <tcp_process+0x7d8>)
 8008aa6:	781b      	ldrb	r3, [r3, #0]
 8008aa8:	f043 0310 	orr.w	r3, r3, #16
 8008aac:	b2da      	uxtb	r2, r3
 8008aae:	4b0f      	ldr	r3, [pc, #60]	; (8008aec <tcp_process+0x7d8>)
 8008ab0:	701a      	strb	r2, [r3, #0]
      }
      break;
 8008ab2:	e00d      	b.n	8008ad0 <tcp_process+0x7bc>
    default:
      break;
 8008ab4:	bf00      	nop
 8008ab6:	e00c      	b.n	8008ad2 <tcp_process+0x7be>
      break;
 8008ab8:	bf00      	nop
 8008aba:	e00a      	b.n	8008ad2 <tcp_process+0x7be>
      break;
 8008abc:	bf00      	nop
 8008abe:	e008      	b.n	8008ad2 <tcp_process+0x7be>
      break;
 8008ac0:	bf00      	nop
 8008ac2:	e006      	b.n	8008ad2 <tcp_process+0x7be>
      break;
 8008ac4:	bf00      	nop
 8008ac6:	e004      	b.n	8008ad2 <tcp_process+0x7be>
      break;
 8008ac8:	bf00      	nop
 8008aca:	e002      	b.n	8008ad2 <tcp_process+0x7be>
      break;
 8008acc:	bf00      	nop
 8008ace:	e000      	b.n	8008ad2 <tcp_process+0x7be>
      break;
 8008ad0:	bf00      	nop
  }
  return ERR_OK;
 8008ad2:	2300      	movs	r3, #0
}
 8008ad4:	4618      	mov	r0, r3
 8008ad6:	3724      	adds	r7, #36	; 0x24
 8008ad8:	46bd      	mov	sp, r7
 8008ada:	bd90      	pop	{r4, r7, pc}
 8008adc:	20008300 	.word	0x20008300
 8008ae0:	200082fc 	.word	0x200082fc
 8008ae4:	20008330 	.word	0x20008330
 8008ae8:	20008328 	.word	0x20008328
 8008aec:	20008331 	.word	0x20008331
 8008af0:	200082f8 	.word	0x200082f8

08008af4 <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 8008af4:	b590      	push	{r4, r7, lr}
 8008af6:	b085      	sub	sp, #20
 8008af8:	af00      	add	r7, sp, #0
 8008afa:	6078      	str	r0, [r7, #4]
 8008afc:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 8008afe:	687b      	ldr	r3, [r7, #4]
 8008b00:	2b00      	cmp	r3, #0
 8008b02:	d106      	bne.n	8008b12 <tcp_oos_insert_segment+0x1e>
 8008b04:	4b3b      	ldr	r3, [pc, #236]	; (8008bf4 <tcp_oos_insert_segment+0x100>)
 8008b06:	f240 421f 	movw	r2, #1055	; 0x41f
 8008b0a:	493b      	ldr	r1, [pc, #236]	; (8008bf8 <tcp_oos_insert_segment+0x104>)
 8008b0c:	483b      	ldr	r0, [pc, #236]	; (8008bfc <tcp_oos_insert_segment+0x108>)
 8008b0e:	f005 fe07 	bl	800e720 <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 8008b12:	687b      	ldr	r3, [r7, #4]
 8008b14:	68db      	ldr	r3, [r3, #12]
 8008b16:	899b      	ldrh	r3, [r3, #12]
 8008b18:	b29b      	uxth	r3, r3
 8008b1a:	4618      	mov	r0, r3
 8008b1c:	f7fb fc0e 	bl	800433c <lwip_htons>
 8008b20:	4603      	mov	r3, r0
 8008b22:	b2db      	uxtb	r3, r3
 8008b24:	f003 0301 	and.w	r3, r3, #1
 8008b28:	2b00      	cmp	r3, #0
 8008b2a:	d028      	beq.n	8008b7e <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 8008b2c:	6838      	ldr	r0, [r7, #0]
 8008b2e:	f7fe fa63 	bl	8006ff8 <tcp_segs_free>
    next = NULL;
 8008b32:	2300      	movs	r3, #0
 8008b34:	603b      	str	r3, [r7, #0]
 8008b36:	e056      	b.n	8008be6 <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 8008b38:	683b      	ldr	r3, [r7, #0]
 8008b3a:	68db      	ldr	r3, [r3, #12]
 8008b3c:	899b      	ldrh	r3, [r3, #12]
 8008b3e:	b29b      	uxth	r3, r3
 8008b40:	4618      	mov	r0, r3
 8008b42:	f7fb fbfb 	bl	800433c <lwip_htons>
 8008b46:	4603      	mov	r3, r0
 8008b48:	b2db      	uxtb	r3, r3
 8008b4a:	f003 0301 	and.w	r3, r3, #1
 8008b4e:	2b00      	cmp	r3, #0
 8008b50:	d00d      	beq.n	8008b6e <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 8008b52:	687b      	ldr	r3, [r7, #4]
 8008b54:	68db      	ldr	r3, [r3, #12]
 8008b56:	899b      	ldrh	r3, [r3, #12]
 8008b58:	b29c      	uxth	r4, r3
 8008b5a:	2001      	movs	r0, #1
 8008b5c:	f7fb fbee 	bl	800433c <lwip_htons>
 8008b60:	4603      	mov	r3, r0
 8008b62:	461a      	mov	r2, r3
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	68db      	ldr	r3, [r3, #12]
 8008b68:	4322      	orrs	r2, r4
 8008b6a:	b292      	uxth	r2, r2
 8008b6c:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 8008b6e:	683b      	ldr	r3, [r7, #0]
 8008b70:	60fb      	str	r3, [r7, #12]
      next = next->next;
 8008b72:	683b      	ldr	r3, [r7, #0]
 8008b74:	681b      	ldr	r3, [r3, #0]
 8008b76:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 8008b78:	68f8      	ldr	r0, [r7, #12]
 8008b7a:	f7fe fa52 	bl	8007022 <tcp_seg_free>
    while (next &&
 8008b7e:	683b      	ldr	r3, [r7, #0]
 8008b80:	2b00      	cmp	r3, #0
 8008b82:	d00e      	beq.n	8008ba2 <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	891b      	ldrh	r3, [r3, #8]
 8008b88:	461a      	mov	r2, r3
 8008b8a:	4b1d      	ldr	r3, [pc, #116]	; (8008c00 <tcp_oos_insert_segment+0x10c>)
 8008b8c:	681b      	ldr	r3, [r3, #0]
 8008b8e:	441a      	add	r2, r3
 8008b90:	683b      	ldr	r3, [r7, #0]
 8008b92:	68db      	ldr	r3, [r3, #12]
 8008b94:	685b      	ldr	r3, [r3, #4]
 8008b96:	6839      	ldr	r1, [r7, #0]
 8008b98:	8909      	ldrh	r1, [r1, #8]
 8008b9a:	440b      	add	r3, r1
 8008b9c:	1ad3      	subs	r3, r2, r3
    while (next &&
 8008b9e:	2b00      	cmp	r3, #0
 8008ba0:	daca      	bge.n	8008b38 <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 8008ba2:	683b      	ldr	r3, [r7, #0]
 8008ba4:	2b00      	cmp	r3, #0
 8008ba6:	d01e      	beq.n	8008be6 <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	891b      	ldrh	r3, [r3, #8]
 8008bac:	461a      	mov	r2, r3
 8008bae:	4b14      	ldr	r3, [pc, #80]	; (8008c00 <tcp_oos_insert_segment+0x10c>)
 8008bb0:	681b      	ldr	r3, [r3, #0]
 8008bb2:	441a      	add	r2, r3
 8008bb4:	683b      	ldr	r3, [r7, #0]
 8008bb6:	68db      	ldr	r3, [r3, #12]
 8008bb8:	685b      	ldr	r3, [r3, #4]
 8008bba:	1ad3      	subs	r3, r2, r3
    if (next &&
 8008bbc:	2b00      	cmp	r3, #0
 8008bbe:	dd12      	ble.n	8008be6 <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 8008bc0:	683b      	ldr	r3, [r7, #0]
 8008bc2:	68db      	ldr	r3, [r3, #12]
 8008bc4:	685b      	ldr	r3, [r3, #4]
 8008bc6:	b29a      	uxth	r2, r3
 8008bc8:	4b0d      	ldr	r3, [pc, #52]	; (8008c00 <tcp_oos_insert_segment+0x10c>)
 8008bca:	681b      	ldr	r3, [r3, #0]
 8008bcc:	b29b      	uxth	r3, r3
 8008bce:	1ad3      	subs	r3, r2, r3
 8008bd0:	b29a      	uxth	r2, r3
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 8008bd6:	687b      	ldr	r3, [r7, #4]
 8008bd8:	685a      	ldr	r2, [r3, #4]
 8008bda:	687b      	ldr	r3, [r7, #4]
 8008bdc:	891b      	ldrh	r3, [r3, #8]
 8008bde:	4619      	mov	r1, r3
 8008be0:	4610      	mov	r0, r2
 8008be2:	f7fc fd83 	bl	80056ec <pbuf_realloc>
    }
  }
  cseg->next = next;
 8008be6:	687b      	ldr	r3, [r7, #4]
 8008be8:	683a      	ldr	r2, [r7, #0]
 8008bea:	601a      	str	r2, [r3, #0]
}
 8008bec:	bf00      	nop
 8008bee:	3714      	adds	r7, #20
 8008bf0:	46bd      	mov	sp, r7
 8008bf2:	bd90      	pop	{r4, r7, pc}
 8008bf4:	08010c04 	.word	0x08010c04
 8008bf8:	08010ec4 	.word	0x08010ec4
 8008bfc:	08010c50 	.word	0x08010c50
 8008c00:	20008324 	.word	0x20008324

08008c04 <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 8008c04:	b5b0      	push	{r4, r5, r7, lr}
 8008c06:	b086      	sub	sp, #24
 8008c08:	af00      	add	r7, sp, #0
 8008c0a:	60f8      	str	r0, [r7, #12]
 8008c0c:	60b9      	str	r1, [r7, #8]
 8008c0e:	607a      	str	r2, [r7, #4]
 8008c10:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 8008c12:	e03e      	b.n	8008c92 <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 8008c14:	68bb      	ldr	r3, [r7, #8]
 8008c16:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 8008c18:	68bb      	ldr	r3, [r7, #8]
 8008c1a:	681b      	ldr	r3, [r3, #0]
 8008c1c:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 8008c1e:	697b      	ldr	r3, [r7, #20]
 8008c20:	685b      	ldr	r3, [r3, #4]
 8008c22:	4618      	mov	r0, r3
 8008c24:	f7fc ff70 	bl	8005b08 <pbuf_clen>
 8008c28:	4603      	mov	r3, r0
 8008c2a:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 8008c2c:	68fb      	ldr	r3, [r7, #12]
 8008c2e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8008c32:	8a7a      	ldrh	r2, [r7, #18]
 8008c34:	429a      	cmp	r2, r3
 8008c36:	d906      	bls.n	8008c46 <tcp_free_acked_segments+0x42>
 8008c38:	4b2a      	ldr	r3, [pc, #168]	; (8008ce4 <tcp_free_acked_segments+0xe0>)
 8008c3a:	f240 4257 	movw	r2, #1111	; 0x457
 8008c3e:	492a      	ldr	r1, [pc, #168]	; (8008ce8 <tcp_free_acked_segments+0xe4>)
 8008c40:	482a      	ldr	r0, [pc, #168]	; (8008cec <tcp_free_acked_segments+0xe8>)
 8008c42:	f005 fd6d 	bl	800e720 <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 8008c46:	68fb      	ldr	r3, [r7, #12]
 8008c48:	f8b3 2066 	ldrh.w	r2, [r3, #102]	; 0x66
 8008c4c:	8a7b      	ldrh	r3, [r7, #18]
 8008c4e:	1ad3      	subs	r3, r2, r3
 8008c50:	b29a      	uxth	r2, r3
 8008c52:	68fb      	ldr	r3, [r7, #12]
 8008c54:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 8008c58:	697b      	ldr	r3, [r7, #20]
 8008c5a:	891a      	ldrh	r2, [r3, #8]
 8008c5c:	4b24      	ldr	r3, [pc, #144]	; (8008cf0 <tcp_free_acked_segments+0xec>)
 8008c5e:	881b      	ldrh	r3, [r3, #0]
 8008c60:	4413      	add	r3, r2
 8008c62:	b29a      	uxth	r2, r3
 8008c64:	4b22      	ldr	r3, [pc, #136]	; (8008cf0 <tcp_free_acked_segments+0xec>)
 8008c66:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 8008c68:	6978      	ldr	r0, [r7, #20]
 8008c6a:	f7fe f9da 	bl	8007022 <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 8008c6e:	68fb      	ldr	r3, [r7, #12]
 8008c70:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8008c74:	2b00      	cmp	r3, #0
 8008c76:	d00c      	beq.n	8008c92 <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 8008c78:	68bb      	ldr	r3, [r7, #8]
 8008c7a:	2b00      	cmp	r3, #0
 8008c7c:	d109      	bne.n	8008c92 <tcp_free_acked_segments+0x8e>
 8008c7e:	683b      	ldr	r3, [r7, #0]
 8008c80:	2b00      	cmp	r3, #0
 8008c82:	d106      	bne.n	8008c92 <tcp_free_acked_segments+0x8e>
 8008c84:	4b17      	ldr	r3, [pc, #92]	; (8008ce4 <tcp_free_acked_segments+0xe0>)
 8008c86:	f240 4261 	movw	r2, #1121	; 0x461
 8008c8a:	491a      	ldr	r1, [pc, #104]	; (8008cf4 <tcp_free_acked_segments+0xf0>)
 8008c8c:	4817      	ldr	r0, [pc, #92]	; (8008cec <tcp_free_acked_segments+0xe8>)
 8008c8e:	f005 fd47 	bl	800e720 <iprintf>
  while (seg_list != NULL &&
 8008c92:	68bb      	ldr	r3, [r7, #8]
 8008c94:	2b00      	cmp	r3, #0
 8008c96:	d020      	beq.n	8008cda <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 8008c98:	68bb      	ldr	r3, [r7, #8]
 8008c9a:	68db      	ldr	r3, [r3, #12]
 8008c9c:	685b      	ldr	r3, [r3, #4]
 8008c9e:	4618      	mov	r0, r3
 8008ca0:	f7fb fb61 	bl	8004366 <lwip_htonl>
 8008ca4:	4604      	mov	r4, r0
 8008ca6:	68bb      	ldr	r3, [r7, #8]
 8008ca8:	891b      	ldrh	r3, [r3, #8]
 8008caa:	461d      	mov	r5, r3
 8008cac:	68bb      	ldr	r3, [r7, #8]
 8008cae:	68db      	ldr	r3, [r3, #12]
 8008cb0:	899b      	ldrh	r3, [r3, #12]
 8008cb2:	b29b      	uxth	r3, r3
 8008cb4:	4618      	mov	r0, r3
 8008cb6:	f7fb fb41 	bl	800433c <lwip_htons>
 8008cba:	4603      	mov	r3, r0
 8008cbc:	b2db      	uxtb	r3, r3
 8008cbe:	f003 0303 	and.w	r3, r3, #3
 8008cc2:	2b00      	cmp	r3, #0
 8008cc4:	d001      	beq.n	8008cca <tcp_free_acked_segments+0xc6>
 8008cc6:	2301      	movs	r3, #1
 8008cc8:	e000      	b.n	8008ccc <tcp_free_acked_segments+0xc8>
 8008cca:	2300      	movs	r3, #0
 8008ccc:	442b      	add	r3, r5
 8008cce:	18e2      	adds	r2, r4, r3
 8008cd0:	4b09      	ldr	r3, [pc, #36]	; (8008cf8 <tcp_free_acked_segments+0xf4>)
 8008cd2:	681b      	ldr	r3, [r3, #0]
 8008cd4:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 8008cd6:	2b00      	cmp	r3, #0
 8008cd8:	dd9c      	ble.n	8008c14 <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 8008cda:	68bb      	ldr	r3, [r7, #8]
}
 8008cdc:	4618      	mov	r0, r3
 8008cde:	3718      	adds	r7, #24
 8008ce0:	46bd      	mov	sp, r7
 8008ce2:	bdb0      	pop	{r4, r5, r7, pc}
 8008ce4:	08010c04 	.word	0x08010c04
 8008ce8:	08010eec 	.word	0x08010eec
 8008cec:	08010c50 	.word	0x08010c50
 8008cf0:	2000832c 	.word	0x2000832c
 8008cf4:	08010f14 	.word	0x08010f14
 8008cf8:	20008328 	.word	0x20008328

08008cfc <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 8008cfc:	b5b0      	push	{r4, r5, r7, lr}
 8008cfe:	b094      	sub	sp, #80	; 0x50
 8008d00:	af00      	add	r7, sp, #0
 8008d02:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 8008d04:	2300      	movs	r3, #0
 8008d06:	64bb      	str	r3, [r7, #72]	; 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 8008d08:	687b      	ldr	r3, [r7, #4]
 8008d0a:	2b00      	cmp	r3, #0
 8008d0c:	d106      	bne.n	8008d1c <tcp_receive+0x20>
 8008d0e:	4b91      	ldr	r3, [pc, #580]	; (8008f54 <tcp_receive+0x258>)
 8008d10:	f240 427b 	movw	r2, #1147	; 0x47b
 8008d14:	4990      	ldr	r1, [pc, #576]	; (8008f58 <tcp_receive+0x25c>)
 8008d16:	4891      	ldr	r0, [pc, #580]	; (8008f5c <tcp_receive+0x260>)
 8008d18:	f005 fd02 	bl	800e720 <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 8008d1c:	687b      	ldr	r3, [r7, #4]
 8008d1e:	7d1b      	ldrb	r3, [r3, #20]
 8008d20:	2b03      	cmp	r3, #3
 8008d22:	d806      	bhi.n	8008d32 <tcp_receive+0x36>
 8008d24:	4b8b      	ldr	r3, [pc, #556]	; (8008f54 <tcp_receive+0x258>)
 8008d26:	f240 427c 	movw	r2, #1148	; 0x47c
 8008d2a:	498d      	ldr	r1, [pc, #564]	; (8008f60 <tcp_receive+0x264>)
 8008d2c:	488b      	ldr	r0, [pc, #556]	; (8008f5c <tcp_receive+0x260>)
 8008d2e:	f005 fcf7 	bl	800e720 <iprintf>

  if (flags & TCP_ACK) {
 8008d32:	4b8c      	ldr	r3, [pc, #560]	; (8008f64 <tcp_receive+0x268>)
 8008d34:	781b      	ldrb	r3, [r3, #0]
 8008d36:	f003 0310 	and.w	r3, r3, #16
 8008d3a:	2b00      	cmp	r3, #0
 8008d3c:	f000 8264 	beq.w	8009208 <tcp_receive+0x50c>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8008d46:	461a      	mov	r2, r3
 8008d48:	687b      	ldr	r3, [r7, #4]
 8008d4a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008d4c:	4413      	add	r3, r2
 8008d4e:	633b      	str	r3, [r7, #48]	; 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 8008d50:	687b      	ldr	r3, [r7, #4]
 8008d52:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008d54:	4b84      	ldr	r3, [pc, #528]	; (8008f68 <tcp_receive+0x26c>)
 8008d56:	681b      	ldr	r3, [r3, #0]
 8008d58:	1ad3      	subs	r3, r2, r3
 8008d5a:	2b00      	cmp	r3, #0
 8008d5c:	db1b      	blt.n	8008d96 <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8008d5e:	687b      	ldr	r3, [r7, #4]
 8008d60:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008d62:	4b81      	ldr	r3, [pc, #516]	; (8008f68 <tcp_receive+0x26c>)
 8008d64:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 8008d66:	429a      	cmp	r2, r3
 8008d68:	d106      	bne.n	8008d78 <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8008d6e:	4b7f      	ldr	r3, [pc, #508]	; (8008f6c <tcp_receive+0x270>)
 8008d70:	681b      	ldr	r3, [r3, #0]
 8008d72:	1ad3      	subs	r3, r2, r3
 8008d74:	2b00      	cmp	r3, #0
 8008d76:	db0e      	blt.n	8008d96 <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8008d78:	687b      	ldr	r3, [r7, #4]
 8008d7a:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8008d7c:	4b7b      	ldr	r3, [pc, #492]	; (8008f6c <tcp_receive+0x270>)
 8008d7e:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8008d80:	429a      	cmp	r2, r3
 8008d82:	d125      	bne.n	8008dd0 <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8008d84:	4b7a      	ldr	r3, [pc, #488]	; (8008f70 <tcp_receive+0x274>)
 8008d86:	681b      	ldr	r3, [r3, #0]
 8008d88:	89db      	ldrh	r3, [r3, #14]
 8008d8a:	b29a      	uxth	r2, r3
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8008d92:	429a      	cmp	r2, r3
 8008d94:	d91c      	bls.n	8008dd0 <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 8008d96:	4b76      	ldr	r3, [pc, #472]	; (8008f70 <tcp_receive+0x274>)
 8008d98:	681b      	ldr	r3, [r3, #0]
 8008d9a:	89db      	ldrh	r3, [r3, #14]
 8008d9c:	b29a      	uxth	r2, r3
 8008d9e:	687b      	ldr	r3, [r7, #4]
 8008da0:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	f8b3 2062 	ldrh.w	r2, [r3, #98]	; 0x62
 8008daa:	687b      	ldr	r3, [r7, #4]
 8008dac:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8008db0:	429a      	cmp	r2, r3
 8008db2:	d205      	bcs.n	8008dc0 <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      }
      pcb->snd_wl1 = seqno;
 8008dc0:	4b69      	ldr	r3, [pc, #420]	; (8008f68 <tcp_receive+0x26c>)
 8008dc2:	681a      	ldr	r2, [r3, #0]
 8008dc4:	687b      	ldr	r3, [r7, #4]
 8008dc6:	655a      	str	r2, [r3, #84]	; 0x54
      pcb->snd_wl2 = ackno;
 8008dc8:	4b68      	ldr	r3, [pc, #416]	; (8008f6c <tcp_receive+0x270>)
 8008dca:	681a      	ldr	r2, [r3, #0]
 8008dcc:	687b      	ldr	r3, [r7, #4]
 8008dce:	659a      	str	r2, [r3, #88]	; 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 8008dd0:	4b66      	ldr	r3, [pc, #408]	; (8008f6c <tcp_receive+0x270>)
 8008dd2:	681a      	ldr	r2, [r3, #0]
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008dd8:	1ad3      	subs	r3, r2, r3
 8008dda:	2b00      	cmp	r3, #0
 8008ddc:	dc58      	bgt.n	8008e90 <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 8008dde:	4b65      	ldr	r3, [pc, #404]	; (8008f74 <tcp_receive+0x278>)
 8008de0:	881b      	ldrh	r3, [r3, #0]
 8008de2:	2b00      	cmp	r3, #0
 8008de4:	d14b      	bne.n	8008e7e <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 8008de6:	687b      	ldr	r3, [r7, #4]
 8008de8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008dea:	687a      	ldr	r2, [r7, #4]
 8008dec:	f8b2 2060 	ldrh.w	r2, [r2, #96]	; 0x60
 8008df0:	4413      	add	r3, r2
 8008df2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008df4:	429a      	cmp	r2, r3
 8008df6:	d142      	bne.n	8008e7e <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8008dfe:	2b00      	cmp	r3, #0
 8008e00:	db3d      	blt.n	8008e7e <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 8008e02:	687b      	ldr	r3, [r7, #4]
 8008e04:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008e06:	4b59      	ldr	r3, [pc, #356]	; (8008f6c <tcp_receive+0x270>)
 8008e08:	681b      	ldr	r3, [r3, #0]
 8008e0a:	429a      	cmp	r2, r3
 8008e0c:	d137      	bne.n	8008e7e <tcp_receive+0x182>
              found_dupack = 1;
 8008e0e:	2301      	movs	r3, #1
 8008e10:	64bb      	str	r3, [r7, #72]	; 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 8008e12:	687b      	ldr	r3, [r7, #4]
 8008e14:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8008e18:	2bff      	cmp	r3, #255	; 0xff
 8008e1a:	d007      	beq.n	8008e2c <tcp_receive+0x130>
                ++pcb->dupacks;
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8008e22:	3301      	adds	r3, #1
 8008e24:	b2da      	uxtb	r2, r3
 8008e26:	687b      	ldr	r3, [r7, #4]
 8008e28:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
              }
              if (pcb->dupacks > 3) {
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8008e32:	2b03      	cmp	r3, #3
 8008e34:	d91b      	bls.n	8008e6e <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 8008e36:	687b      	ldr	r3, [r7, #4]
 8008e38:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8008e3c:	687b      	ldr	r3, [r7, #4]
 8008e3e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8008e40:	4413      	add	r3, r2
 8008e42:	b29a      	uxth	r2, r3
 8008e44:	687b      	ldr	r3, [r7, #4]
 8008e46:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8008e4a:	429a      	cmp	r2, r3
 8008e4c:	d30a      	bcc.n	8008e64 <tcp_receive+0x168>
 8008e4e:	687b      	ldr	r3, [r7, #4]
 8008e50:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8008e54:	687b      	ldr	r3, [r7, #4]
 8008e56:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8008e58:	4413      	add	r3, r2
 8008e5a:	b29a      	uxth	r2, r3
 8008e5c:	687b      	ldr	r3, [r7, #4]
 8008e5e:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8008e62:	e004      	b.n	8008e6e <tcp_receive+0x172>
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008e6a:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
              }
              if (pcb->dupacks >= 3) {
 8008e6e:	687b      	ldr	r3, [r7, #4]
 8008e70:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8008e74:	2b02      	cmp	r3, #2
 8008e76:	d902      	bls.n	8008e7e <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 8008e78:	6878      	ldr	r0, [r7, #4]
 8008e7a:	f001 feed 	bl	800ac58 <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 8008e7e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008e80:	2b00      	cmp	r3, #0
 8008e82:	f040 8161 	bne.w	8009148 <tcp_receive+0x44c>
        pcb->dupacks = 0;
 8008e86:	687b      	ldr	r3, [r7, #4]
 8008e88:	2200      	movs	r2, #0
 8008e8a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8008e8e:	e15b      	b.n	8009148 <tcp_receive+0x44c>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8008e90:	4b36      	ldr	r3, [pc, #216]	; (8008f6c <tcp_receive+0x270>)
 8008e92:	681a      	ldr	r2, [r3, #0]
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008e98:	1ad3      	subs	r3, r2, r3
 8008e9a:	3b01      	subs	r3, #1
 8008e9c:	2b00      	cmp	r3, #0
 8008e9e:	f2c0 814e 	blt.w	800913e <tcp_receive+0x442>
 8008ea2:	4b32      	ldr	r3, [pc, #200]	; (8008f6c <tcp_receive+0x270>)
 8008ea4:	681a      	ldr	r2, [r3, #0]
 8008ea6:	687b      	ldr	r3, [r7, #4]
 8008ea8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008eaa:	1ad3      	subs	r3, r2, r3
 8008eac:	2b00      	cmp	r3, #0
 8008eae:	f300 8146 	bgt.w	800913e <tcp_receive+0x442>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 8008eb2:	687b      	ldr	r3, [r7, #4]
 8008eb4:	8b5b      	ldrh	r3, [r3, #26]
 8008eb6:	f003 0304 	and.w	r3, r3, #4
 8008eba:	2b00      	cmp	r3, #0
 8008ebc:	d010      	beq.n	8008ee0 <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 8008ebe:	687b      	ldr	r3, [r7, #4]
 8008ec0:	8b5b      	ldrh	r3, [r3, #26]
 8008ec2:	f023 0304 	bic.w	r3, r3, #4
 8008ec6:	b29a      	uxth	r2, r3
 8008ec8:	687b      	ldr	r3, [r7, #4]
 8008eca:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8008ed2:	687b      	ldr	r3, [r7, #4]
 8008ed4:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
        pcb->bytes_acked = 0;
 8008ed8:	687b      	ldr	r3, [r7, #4]
 8008eda:	2200      	movs	r2, #0
 8008edc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 8008ee0:	687b      	ldr	r3, [r7, #4]
 8008ee2:	2200      	movs	r2, #0
 8008ee4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 8008ee8:	687b      	ldr	r3, [r7, #4]
 8008eea:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8008eee:	10db      	asrs	r3, r3, #3
 8008ef0:	b21b      	sxth	r3, r3
 8008ef2:	b29a      	uxth	r2, r3
 8008ef4:	687b      	ldr	r3, [r7, #4]
 8008ef6:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8008efa:	b29b      	uxth	r3, r3
 8008efc:	4413      	add	r3, r2
 8008efe:	b29b      	uxth	r3, r3
 8008f00:	b21a      	sxth	r2, r3
 8008f02:	687b      	ldr	r3, [r7, #4]
 8008f04:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 8008f08:	4b18      	ldr	r3, [pc, #96]	; (8008f6c <tcp_receive+0x270>)
 8008f0a:	681b      	ldr	r3, [r3, #0]
 8008f0c:	b29a      	uxth	r2, r3
 8008f0e:	687b      	ldr	r3, [r7, #4]
 8008f10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008f12:	b29b      	uxth	r3, r3
 8008f14:	1ad3      	subs	r3, r2, r3
 8008f16:	85fb      	strh	r3, [r7, #46]	; 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 8008f18:	687b      	ldr	r3, [r7, #4]
 8008f1a:	2200      	movs	r2, #0
 8008f1c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
      pcb->lastack = ackno;
 8008f20:	4b12      	ldr	r3, [pc, #72]	; (8008f6c <tcp_receive+0x270>)
 8008f22:	681a      	ldr	r2, [r3, #0]
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	645a      	str	r2, [r3, #68]	; 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 8008f28:	687b      	ldr	r3, [r7, #4]
 8008f2a:	7d1b      	ldrb	r3, [r3, #20]
 8008f2c:	2b03      	cmp	r3, #3
 8008f2e:	f240 8097 	bls.w	8009060 <tcp_receive+0x364>
        if (pcb->cwnd < pcb->ssthresh) {
 8008f32:	687b      	ldr	r3, [r7, #4]
 8008f34:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 8008f3e:	429a      	cmp	r2, r3
 8008f40:	d245      	bcs.n	8008fce <tcp_receive+0x2d2>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 8008f42:	687b      	ldr	r3, [r7, #4]
 8008f44:	8b5b      	ldrh	r3, [r3, #26]
 8008f46:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008f4a:	2b00      	cmp	r3, #0
 8008f4c:	d014      	beq.n	8008f78 <tcp_receive+0x27c>
 8008f4e:	2301      	movs	r3, #1
 8008f50:	e013      	b.n	8008f7a <tcp_receive+0x27e>
 8008f52:	bf00      	nop
 8008f54:	08010c04 	.word	0x08010c04
 8008f58:	08010f34 	.word	0x08010f34
 8008f5c:	08010c50 	.word	0x08010c50
 8008f60:	08010f50 	.word	0x08010f50
 8008f64:	20008330 	.word	0x20008330
 8008f68:	20008324 	.word	0x20008324
 8008f6c:	20008328 	.word	0x20008328
 8008f70:	20008314 	.word	0x20008314
 8008f74:	2000832e 	.word	0x2000832e
 8008f78:	2302      	movs	r3, #2
 8008f7a:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 8008f7e:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8008f82:	b29a      	uxth	r2, r3
 8008f84:	687b      	ldr	r3, [r7, #4]
 8008f86:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8008f88:	fb12 f303 	smulbb	r3, r2, r3
 8008f8c:	b29b      	uxth	r3, r3
 8008f8e:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8008f90:	4293      	cmp	r3, r2
 8008f92:	bf28      	it	cs
 8008f94:	4613      	movcs	r3, r2
 8008f96:	857b      	strh	r3, [r7, #42]	; 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8008f9e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8008fa0:	4413      	add	r3, r2
 8008fa2:	b29a      	uxth	r2, r3
 8008fa4:	687b      	ldr	r3, [r7, #4]
 8008fa6:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8008faa:	429a      	cmp	r2, r3
 8008fac:	d309      	bcc.n	8008fc2 <tcp_receive+0x2c6>
 8008fae:	687b      	ldr	r3, [r7, #4]
 8008fb0:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8008fb4:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8008fb6:	4413      	add	r3, r2
 8008fb8:	b29a      	uxth	r2, r3
 8008fba:	687b      	ldr	r3, [r7, #4]
 8008fbc:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8008fc0:	e04e      	b.n	8009060 <tcp_receive+0x364>
 8008fc2:	687b      	ldr	r3, [r7, #4]
 8008fc4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008fc8:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8008fcc:	e048      	b.n	8009060 <tcp_receive+0x364>
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 8008fce:	687b      	ldr	r3, [r7, #4]
 8008fd0:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8008fd4:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8008fd6:	4413      	add	r3, r2
 8008fd8:	b29a      	uxth	r2, r3
 8008fda:	687b      	ldr	r3, [r7, #4]
 8008fdc:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8008fe0:	429a      	cmp	r2, r3
 8008fe2:	d309      	bcc.n	8008ff8 <tcp_receive+0x2fc>
 8008fe4:	687b      	ldr	r3, [r7, #4]
 8008fe6:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8008fea:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8008fec:	4413      	add	r3, r2
 8008fee:	b29a      	uxth	r2, r3
 8008ff0:	687b      	ldr	r3, [r7, #4]
 8008ff2:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 8008ff6:	e004      	b.n	8009002 <tcp_receive+0x306>
 8008ff8:	687b      	ldr	r3, [r7, #4]
 8008ffa:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008ffe:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 8009002:	687b      	ldr	r3, [r7, #4]
 8009004:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8009008:	687b      	ldr	r3, [r7, #4]
 800900a:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800900e:	429a      	cmp	r2, r3
 8009010:	d326      	bcc.n	8009060 <tcp_receive+0x364>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 8009012:	687b      	ldr	r3, [r7, #4]
 8009014:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8009018:	687b      	ldr	r3, [r7, #4]
 800901a:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800901e:	1ad3      	subs	r3, r2, r3
 8009020:	b29a      	uxth	r2, r3
 8009022:	687b      	ldr	r3, [r7, #4]
 8009024:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 8009028:	687b      	ldr	r3, [r7, #4]
 800902a:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800902e:	687b      	ldr	r3, [r7, #4]
 8009030:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8009032:	4413      	add	r3, r2
 8009034:	b29a      	uxth	r2, r3
 8009036:	687b      	ldr	r3, [r7, #4]
 8009038:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800903c:	429a      	cmp	r2, r3
 800903e:	d30a      	bcc.n	8009056 <tcp_receive+0x35a>
 8009040:	687b      	ldr	r3, [r7, #4]
 8009042:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8009046:	687b      	ldr	r3, [r7, #4]
 8009048:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800904a:	4413      	add	r3, r2
 800904c:	b29a      	uxth	r2, r3
 800904e:	687b      	ldr	r3, [r7, #4]
 8009050:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8009054:	e004      	b.n	8009060 <tcp_receive+0x364>
 8009056:	687b      	ldr	r3, [r7, #4]
 8009058:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800905c:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 8009060:	687b      	ldr	r3, [r7, #4]
 8009062:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8009064:	687b      	ldr	r3, [r7, #4]
 8009066:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009068:	4a98      	ldr	r2, [pc, #608]	; (80092cc <tcp_receive+0x5d0>)
 800906a:	6878      	ldr	r0, [r7, #4]
 800906c:	f7ff fdca 	bl	8008c04 <tcp_free_acked_segments>
 8009070:	4602      	mov	r2, r0
 8009072:	687b      	ldr	r3, [r7, #4]
 8009074:	671a      	str	r2, [r3, #112]	; 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 8009076:	687b      	ldr	r3, [r7, #4]
 8009078:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
 800907a:	687b      	ldr	r3, [r7, #4]
 800907c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800907e:	4a94      	ldr	r2, [pc, #592]	; (80092d0 <tcp_receive+0x5d4>)
 8009080:	6878      	ldr	r0, [r7, #4]
 8009082:	f7ff fdbf 	bl	8008c04 <tcp_free_acked_segments>
 8009086:	4602      	mov	r2, r0
 8009088:	687b      	ldr	r3, [r7, #4]
 800908a:	66da      	str	r2, [r3, #108]	; 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 800908c:	687b      	ldr	r3, [r7, #4]
 800908e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009090:	2b00      	cmp	r3, #0
 8009092:	d104      	bne.n	800909e <tcp_receive+0x3a2>
        pcb->rtime = -1;
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800909a:	861a      	strh	r2, [r3, #48]	; 0x30
 800909c:	e002      	b.n	80090a4 <tcp_receive+0x3a8>
      } else {
        pcb->rtime = 0;
 800909e:	687b      	ldr	r3, [r7, #4]
 80090a0:	2200      	movs	r2, #0
 80090a2:	861a      	strh	r2, [r3, #48]	; 0x30
      }

      pcb->polltmr = 0;
 80090a4:	687b      	ldr	r3, [r7, #4]
 80090a6:	2200      	movs	r2, #0
 80090a8:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 80090aa:	687b      	ldr	r3, [r7, #4]
 80090ac:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80090ae:	2b00      	cmp	r3, #0
 80090b0:	d103      	bne.n	80090ba <tcp_receive+0x3be>
        pcb->unsent_oversize = 0;
 80090b2:	687b      	ldr	r3, [r7, #4]
 80090b4:	2200      	movs	r2, #0
 80090b6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 80090ba:	687b      	ldr	r3, [r7, #4]
 80090bc:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 80090c0:	4b84      	ldr	r3, [pc, #528]	; (80092d4 <tcp_receive+0x5d8>)
 80090c2:	881b      	ldrh	r3, [r3, #0]
 80090c4:	4413      	add	r3, r2
 80090c6:	b29a      	uxth	r2, r3
 80090c8:	687b      	ldr	r3, [r7, #4]
 80090ca:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 80090ce:	687b      	ldr	r3, [r7, #4]
 80090d0:	8b5b      	ldrh	r3, [r3, #26]
 80090d2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80090d6:	2b00      	cmp	r3, #0
 80090d8:	d035      	beq.n	8009146 <tcp_receive+0x44a>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 80090da:	687b      	ldr	r3, [r7, #4]
 80090dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80090de:	2b00      	cmp	r3, #0
 80090e0:	d118      	bne.n	8009114 <tcp_receive+0x418>
          if ((pcb->unsent == NULL) ||
 80090e2:	687b      	ldr	r3, [r7, #4]
 80090e4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80090e6:	2b00      	cmp	r3, #0
 80090e8:	d00c      	beq.n	8009104 <tcp_receive+0x408>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 80090ea:	687b      	ldr	r3, [r7, #4]
 80090ec:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 80090ee:	687b      	ldr	r3, [r7, #4]
 80090f0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80090f2:	68db      	ldr	r3, [r3, #12]
 80090f4:	685b      	ldr	r3, [r3, #4]
 80090f6:	4618      	mov	r0, r3
 80090f8:	f7fb f935 	bl	8004366 <lwip_htonl>
 80090fc:	4603      	mov	r3, r0
 80090fe:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 8009100:	2b00      	cmp	r3, #0
 8009102:	dc20      	bgt.n	8009146 <tcp_receive+0x44a>
            tcp_clear_flags(pcb, TF_RTO);
 8009104:	687b      	ldr	r3, [r7, #4]
 8009106:	8b5b      	ldrh	r3, [r3, #26]
 8009108:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800910c:	b29a      	uxth	r2, r3
 800910e:	687b      	ldr	r3, [r7, #4]
 8009110:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8009112:	e018      	b.n	8009146 <tcp_receive+0x44a>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 8009114:	687b      	ldr	r3, [r7, #4]
 8009116:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 8009118:	687b      	ldr	r3, [r7, #4]
 800911a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800911c:	68db      	ldr	r3, [r3, #12]
 800911e:	685b      	ldr	r3, [r3, #4]
 8009120:	4618      	mov	r0, r3
 8009122:	f7fb f920 	bl	8004366 <lwip_htonl>
 8009126:	4603      	mov	r3, r0
 8009128:	1ae3      	subs	r3, r4, r3
 800912a:	2b00      	cmp	r3, #0
 800912c:	dc0b      	bgt.n	8009146 <tcp_receive+0x44a>
          tcp_clear_flags(pcb, TF_RTO);
 800912e:	687b      	ldr	r3, [r7, #4]
 8009130:	8b5b      	ldrh	r3, [r3, #26]
 8009132:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8009136:	b29a      	uxth	r2, r3
 8009138:	687b      	ldr	r3, [r7, #4]
 800913a:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800913c:	e003      	b.n	8009146 <tcp_receive+0x44a>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 800913e:	6878      	ldr	r0, [r7, #4]
 8009140:	f001 ff76 	bl	800b030 <tcp_send_empty_ack>
 8009144:	e000      	b.n	8009148 <tcp_receive+0x44c>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8009146:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 8009148:	687b      	ldr	r3, [r7, #4]
 800914a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800914c:	2b00      	cmp	r3, #0
 800914e:	d05b      	beq.n	8009208 <tcp_receive+0x50c>
 8009150:	687b      	ldr	r3, [r7, #4]
 8009152:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009154:	4b60      	ldr	r3, [pc, #384]	; (80092d8 <tcp_receive+0x5dc>)
 8009156:	681b      	ldr	r3, [r3, #0]
 8009158:	1ad3      	subs	r3, r2, r3
 800915a:	2b00      	cmp	r3, #0
 800915c:	da54      	bge.n	8009208 <tcp_receive+0x50c>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 800915e:	4b5f      	ldr	r3, [pc, #380]	; (80092dc <tcp_receive+0x5e0>)
 8009160:	681b      	ldr	r3, [r3, #0]
 8009162:	b29a      	uxth	r2, r3
 8009164:	687b      	ldr	r3, [r7, #4]
 8009166:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009168:	b29b      	uxth	r3, r3
 800916a:	1ad3      	subs	r3, r2, r3
 800916c:	b29b      	uxth	r3, r3
 800916e:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 8009172:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 8009176:	687b      	ldr	r3, [r7, #4]
 8009178:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800917c:	10db      	asrs	r3, r3, #3
 800917e:	b21b      	sxth	r3, r3
 8009180:	b29b      	uxth	r3, r3
 8009182:	1ad3      	subs	r3, r2, r3
 8009184:	b29b      	uxth	r3, r3
 8009186:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 800918a:	687b      	ldr	r3, [r7, #4]
 800918c:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8009190:	b29a      	uxth	r2, r3
 8009192:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8009196:	4413      	add	r3, r2
 8009198:	b29b      	uxth	r3, r3
 800919a:	b21a      	sxth	r2, r3
 800919c:	687b      	ldr	r3, [r7, #4]
 800919e:	879a      	strh	r2, [r3, #60]	; 0x3c
      if (m < 0) {
 80091a0:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 80091a4:	2b00      	cmp	r3, #0
 80091a6:	da05      	bge.n	80091b4 <tcp_receive+0x4b8>
        m = (s16_t) - m;
 80091a8:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80091ac:	425b      	negs	r3, r3
 80091ae:	b29b      	uxth	r3, r3
 80091b0:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 80091b4:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 80091b8:	687b      	ldr	r3, [r7, #4]
 80091ba:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 80091be:	109b      	asrs	r3, r3, #2
 80091c0:	b21b      	sxth	r3, r3
 80091c2:	b29b      	uxth	r3, r3
 80091c4:	1ad3      	subs	r3, r2, r3
 80091c6:	b29b      	uxth	r3, r3
 80091c8:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 80091cc:	687b      	ldr	r3, [r7, #4]
 80091ce:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 80091d2:	b29a      	uxth	r2, r3
 80091d4:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80091d8:	4413      	add	r3, r2
 80091da:	b29b      	uxth	r3, r3
 80091dc:	b21a      	sxth	r2, r3
 80091de:	687b      	ldr	r3, [r7, #4]
 80091e0:	87da      	strh	r2, [r3, #62]	; 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 80091e2:	687b      	ldr	r3, [r7, #4]
 80091e4:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 80091e8:	10db      	asrs	r3, r3, #3
 80091ea:	b21b      	sxth	r3, r3
 80091ec:	b29a      	uxth	r2, r3
 80091ee:	687b      	ldr	r3, [r7, #4]
 80091f0:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 80091f4:	b29b      	uxth	r3, r3
 80091f6:	4413      	add	r3, r2
 80091f8:	b29b      	uxth	r3, r3
 80091fa:	b21a      	sxth	r2, r3
 80091fc:	687b      	ldr	r3, [r7, #4]
 80091fe:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 8009202:	687b      	ldr	r3, [r7, #4]
 8009204:	2200      	movs	r2, #0
 8009206:	635a      	str	r2, [r3, #52]	; 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 8009208:	4b35      	ldr	r3, [pc, #212]	; (80092e0 <tcp_receive+0x5e4>)
 800920a:	881b      	ldrh	r3, [r3, #0]
 800920c:	2b00      	cmp	r3, #0
 800920e:	f000 84e2 	beq.w	8009bd6 <tcp_receive+0xeda>
 8009212:	687b      	ldr	r3, [r7, #4]
 8009214:	7d1b      	ldrb	r3, [r3, #20]
 8009216:	2b06      	cmp	r3, #6
 8009218:	f200 84dd 	bhi.w	8009bd6 <tcp_receive+0xeda>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 800921c:	687b      	ldr	r3, [r7, #4]
 800921e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009220:	4b30      	ldr	r3, [pc, #192]	; (80092e4 <tcp_receive+0x5e8>)
 8009222:	681b      	ldr	r3, [r3, #0]
 8009224:	1ad3      	subs	r3, r2, r3
 8009226:	3b01      	subs	r3, #1
 8009228:	2b00      	cmp	r3, #0
 800922a:	f2c0 808f 	blt.w	800934c <tcp_receive+0x650>
 800922e:	687b      	ldr	r3, [r7, #4]
 8009230:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009232:	4b2b      	ldr	r3, [pc, #172]	; (80092e0 <tcp_receive+0x5e4>)
 8009234:	881b      	ldrh	r3, [r3, #0]
 8009236:	4619      	mov	r1, r3
 8009238:	4b2a      	ldr	r3, [pc, #168]	; (80092e4 <tcp_receive+0x5e8>)
 800923a:	681b      	ldr	r3, [r3, #0]
 800923c:	440b      	add	r3, r1
 800923e:	1ad3      	subs	r3, r2, r3
 8009240:	3301      	adds	r3, #1
 8009242:	2b00      	cmp	r3, #0
 8009244:	f300 8082 	bgt.w	800934c <tcp_receive+0x650>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 8009248:	4b27      	ldr	r3, [pc, #156]	; (80092e8 <tcp_receive+0x5ec>)
 800924a:	685b      	ldr	r3, [r3, #4]
 800924c:	647b      	str	r3, [r7, #68]	; 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 800924e:	687b      	ldr	r3, [r7, #4]
 8009250:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009252:	4b24      	ldr	r3, [pc, #144]	; (80092e4 <tcp_receive+0x5e8>)
 8009254:	681b      	ldr	r3, [r3, #0]
 8009256:	1ad3      	subs	r3, r2, r3
 8009258:	627b      	str	r3, [r7, #36]	; 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 800925a:	4b23      	ldr	r3, [pc, #140]	; (80092e8 <tcp_receive+0x5ec>)
 800925c:	685b      	ldr	r3, [r3, #4]
 800925e:	2b00      	cmp	r3, #0
 8009260:	d106      	bne.n	8009270 <tcp_receive+0x574>
 8009262:	4b22      	ldr	r3, [pc, #136]	; (80092ec <tcp_receive+0x5f0>)
 8009264:	f240 5294 	movw	r2, #1428	; 0x594
 8009268:	4921      	ldr	r1, [pc, #132]	; (80092f0 <tcp_receive+0x5f4>)
 800926a:	4822      	ldr	r0, [pc, #136]	; (80092f4 <tcp_receive+0x5f8>)
 800926c:	f005 fa58 	bl	800e720 <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 8009270:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009272:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8009276:	4293      	cmp	r3, r2
 8009278:	d906      	bls.n	8009288 <tcp_receive+0x58c>
 800927a:	4b1c      	ldr	r3, [pc, #112]	; (80092ec <tcp_receive+0x5f0>)
 800927c:	f240 5295 	movw	r2, #1429	; 0x595
 8009280:	491d      	ldr	r1, [pc, #116]	; (80092f8 <tcp_receive+0x5fc>)
 8009282:	481c      	ldr	r0, [pc, #112]	; (80092f4 <tcp_receive+0x5f8>)
 8009284:	f005 fa4c 	bl	800e720 <iprintf>
      off = (u16_t)off32;
 8009288:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800928a:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 800928e:	4b16      	ldr	r3, [pc, #88]	; (80092e8 <tcp_receive+0x5ec>)
 8009290:	685b      	ldr	r3, [r3, #4]
 8009292:	891b      	ldrh	r3, [r3, #8]
 8009294:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8009298:	429a      	cmp	r2, r3
 800929a:	d906      	bls.n	80092aa <tcp_receive+0x5ae>
 800929c:	4b13      	ldr	r3, [pc, #76]	; (80092ec <tcp_receive+0x5f0>)
 800929e:	f240 5297 	movw	r2, #1431	; 0x597
 80092a2:	4916      	ldr	r1, [pc, #88]	; (80092fc <tcp_receive+0x600>)
 80092a4:	4813      	ldr	r0, [pc, #76]	; (80092f4 <tcp_receive+0x5f8>)
 80092a6:	f005 fa3b 	bl	800e720 <iprintf>
      inseg.len -= off;
 80092aa:	4b0f      	ldr	r3, [pc, #60]	; (80092e8 <tcp_receive+0x5ec>)
 80092ac:	891a      	ldrh	r2, [r3, #8]
 80092ae:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80092b2:	1ad3      	subs	r3, r2, r3
 80092b4:	b29a      	uxth	r2, r3
 80092b6:	4b0c      	ldr	r3, [pc, #48]	; (80092e8 <tcp_receive+0x5ec>)
 80092b8:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 80092ba:	4b0b      	ldr	r3, [pc, #44]	; (80092e8 <tcp_receive+0x5ec>)
 80092bc:	685b      	ldr	r3, [r3, #4]
 80092be:	891a      	ldrh	r2, [r3, #8]
 80092c0:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80092c4:	1ad3      	subs	r3, r2, r3
 80092c6:	847b      	strh	r3, [r7, #34]	; 0x22
      while (p->len < off) {
 80092c8:	e02a      	b.n	8009320 <tcp_receive+0x624>
 80092ca:	bf00      	nop
 80092cc:	08010f6c 	.word	0x08010f6c
 80092d0:	08010f74 	.word	0x08010f74
 80092d4:	2000832c 	.word	0x2000832c
 80092d8:	20008328 	.word	0x20008328
 80092dc:	200082ec 	.word	0x200082ec
 80092e0:	2000832e 	.word	0x2000832e
 80092e4:	20008324 	.word	0x20008324
 80092e8:	20008304 	.word	0x20008304
 80092ec:	08010c04 	.word	0x08010c04
 80092f0:	08010f7c 	.word	0x08010f7c
 80092f4:	08010c50 	.word	0x08010c50
 80092f8:	08010f8c 	.word	0x08010f8c
 80092fc:	08010f9c 	.word	0x08010f9c
        off -= p->len;
 8009300:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009302:	895b      	ldrh	r3, [r3, #10]
 8009304:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8009308:	1ad3      	subs	r3, r2, r3
 800930a:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 800930e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009310:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8009312:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 8009314:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009316:	2200      	movs	r2, #0
 8009318:	815a      	strh	r2, [r3, #10]
        p = p->next;
 800931a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800931c:	681b      	ldr	r3, [r3, #0]
 800931e:	647b      	str	r3, [r7, #68]	; 0x44
      while (p->len < off) {
 8009320:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009322:	895b      	ldrh	r3, [r3, #10]
 8009324:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8009328:	429a      	cmp	r2, r3
 800932a:	d8e9      	bhi.n	8009300 <tcp_receive+0x604>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 800932c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8009330:	4619      	mov	r1, r3
 8009332:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8009334:	f7fc fada 	bl	80058ec <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 8009338:	687b      	ldr	r3, [r7, #4]
 800933a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800933c:	4a91      	ldr	r2, [pc, #580]	; (8009584 <tcp_receive+0x888>)
 800933e:	6013      	str	r3, [r2, #0]
 8009340:	4b91      	ldr	r3, [pc, #580]	; (8009588 <tcp_receive+0x88c>)
 8009342:	68db      	ldr	r3, [r3, #12]
 8009344:	4a8f      	ldr	r2, [pc, #572]	; (8009584 <tcp_receive+0x888>)
 8009346:	6812      	ldr	r2, [r2, #0]
 8009348:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 800934a:	e00d      	b.n	8009368 <tcp_receive+0x66c>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 800934c:	4b8d      	ldr	r3, [pc, #564]	; (8009584 <tcp_receive+0x888>)
 800934e:	681a      	ldr	r2, [r3, #0]
 8009350:	687b      	ldr	r3, [r7, #4]
 8009352:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009354:	1ad3      	subs	r3, r2, r3
 8009356:	2b00      	cmp	r3, #0
 8009358:	da06      	bge.n	8009368 <tcp_receive+0x66c>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 800935a:	687b      	ldr	r3, [r7, #4]
 800935c:	8b5b      	ldrh	r3, [r3, #26]
 800935e:	f043 0302 	orr.w	r3, r3, #2
 8009362:	b29a      	uxth	r2, r3
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8009368:	4b86      	ldr	r3, [pc, #536]	; (8009584 <tcp_receive+0x888>)
 800936a:	681a      	ldr	r2, [r3, #0]
 800936c:	687b      	ldr	r3, [r7, #4]
 800936e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009370:	1ad3      	subs	r3, r2, r3
 8009372:	2b00      	cmp	r3, #0
 8009374:	f2c0 842a 	blt.w	8009bcc <tcp_receive+0xed0>
 8009378:	4b82      	ldr	r3, [pc, #520]	; (8009584 <tcp_receive+0x888>)
 800937a:	681a      	ldr	r2, [r3, #0]
 800937c:	687b      	ldr	r3, [r7, #4]
 800937e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009380:	6879      	ldr	r1, [r7, #4]
 8009382:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8009384:	440b      	add	r3, r1
 8009386:	1ad3      	subs	r3, r2, r3
 8009388:	3301      	adds	r3, #1
 800938a:	2b00      	cmp	r3, #0
 800938c:	f300 841e 	bgt.w	8009bcc <tcp_receive+0xed0>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 8009390:	687b      	ldr	r3, [r7, #4]
 8009392:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009394:	4b7b      	ldr	r3, [pc, #492]	; (8009584 <tcp_receive+0x888>)
 8009396:	681b      	ldr	r3, [r3, #0]
 8009398:	429a      	cmp	r2, r3
 800939a:	f040 829a 	bne.w	80098d2 <tcp_receive+0xbd6>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 800939e:	4b7a      	ldr	r3, [pc, #488]	; (8009588 <tcp_receive+0x88c>)
 80093a0:	891c      	ldrh	r4, [r3, #8]
 80093a2:	4b79      	ldr	r3, [pc, #484]	; (8009588 <tcp_receive+0x88c>)
 80093a4:	68db      	ldr	r3, [r3, #12]
 80093a6:	899b      	ldrh	r3, [r3, #12]
 80093a8:	b29b      	uxth	r3, r3
 80093aa:	4618      	mov	r0, r3
 80093ac:	f7fa ffc6 	bl	800433c <lwip_htons>
 80093b0:	4603      	mov	r3, r0
 80093b2:	b2db      	uxtb	r3, r3
 80093b4:	f003 0303 	and.w	r3, r3, #3
 80093b8:	2b00      	cmp	r3, #0
 80093ba:	d001      	beq.n	80093c0 <tcp_receive+0x6c4>
 80093bc:	2301      	movs	r3, #1
 80093be:	e000      	b.n	80093c2 <tcp_receive+0x6c6>
 80093c0:	2300      	movs	r3, #0
 80093c2:	4423      	add	r3, r4
 80093c4:	b29a      	uxth	r2, r3
 80093c6:	4b71      	ldr	r3, [pc, #452]	; (800958c <tcp_receive+0x890>)
 80093c8:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 80093ca:	687b      	ldr	r3, [r7, #4]
 80093cc:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 80093ce:	4b6f      	ldr	r3, [pc, #444]	; (800958c <tcp_receive+0x890>)
 80093d0:	881b      	ldrh	r3, [r3, #0]
 80093d2:	429a      	cmp	r2, r3
 80093d4:	d275      	bcs.n	80094c2 <tcp_receive+0x7c6>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 80093d6:	4b6c      	ldr	r3, [pc, #432]	; (8009588 <tcp_receive+0x88c>)
 80093d8:	68db      	ldr	r3, [r3, #12]
 80093da:	899b      	ldrh	r3, [r3, #12]
 80093dc:	b29b      	uxth	r3, r3
 80093de:	4618      	mov	r0, r3
 80093e0:	f7fa ffac 	bl	800433c <lwip_htons>
 80093e4:	4603      	mov	r3, r0
 80093e6:	b2db      	uxtb	r3, r3
 80093e8:	f003 0301 	and.w	r3, r3, #1
 80093ec:	2b00      	cmp	r3, #0
 80093ee:	d01f      	beq.n	8009430 <tcp_receive+0x734>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 80093f0:	4b65      	ldr	r3, [pc, #404]	; (8009588 <tcp_receive+0x88c>)
 80093f2:	68db      	ldr	r3, [r3, #12]
 80093f4:	899b      	ldrh	r3, [r3, #12]
 80093f6:	b29b      	uxth	r3, r3
 80093f8:	b21b      	sxth	r3, r3
 80093fa:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80093fe:	b21c      	sxth	r4, r3
 8009400:	4b61      	ldr	r3, [pc, #388]	; (8009588 <tcp_receive+0x88c>)
 8009402:	68db      	ldr	r3, [r3, #12]
 8009404:	899b      	ldrh	r3, [r3, #12]
 8009406:	b29b      	uxth	r3, r3
 8009408:	4618      	mov	r0, r3
 800940a:	f7fa ff97 	bl	800433c <lwip_htons>
 800940e:	4603      	mov	r3, r0
 8009410:	b2db      	uxtb	r3, r3
 8009412:	b29b      	uxth	r3, r3
 8009414:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8009418:	b29b      	uxth	r3, r3
 800941a:	4618      	mov	r0, r3
 800941c:	f7fa ff8e 	bl	800433c <lwip_htons>
 8009420:	4603      	mov	r3, r0
 8009422:	b21b      	sxth	r3, r3
 8009424:	4323      	orrs	r3, r4
 8009426:	b21a      	sxth	r2, r3
 8009428:	4b57      	ldr	r3, [pc, #348]	; (8009588 <tcp_receive+0x88c>)
 800942a:	68db      	ldr	r3, [r3, #12]
 800942c:	b292      	uxth	r2, r2
 800942e:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 8009430:	687b      	ldr	r3, [r7, #4]
 8009432:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8009434:	4b54      	ldr	r3, [pc, #336]	; (8009588 <tcp_receive+0x88c>)
 8009436:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8009438:	4b53      	ldr	r3, [pc, #332]	; (8009588 <tcp_receive+0x88c>)
 800943a:	68db      	ldr	r3, [r3, #12]
 800943c:	899b      	ldrh	r3, [r3, #12]
 800943e:	b29b      	uxth	r3, r3
 8009440:	4618      	mov	r0, r3
 8009442:	f7fa ff7b 	bl	800433c <lwip_htons>
 8009446:	4603      	mov	r3, r0
 8009448:	b2db      	uxtb	r3, r3
 800944a:	f003 0302 	and.w	r3, r3, #2
 800944e:	2b00      	cmp	r3, #0
 8009450:	d005      	beq.n	800945e <tcp_receive+0x762>
            inseg.len -= 1;
 8009452:	4b4d      	ldr	r3, [pc, #308]	; (8009588 <tcp_receive+0x88c>)
 8009454:	891b      	ldrh	r3, [r3, #8]
 8009456:	3b01      	subs	r3, #1
 8009458:	b29a      	uxth	r2, r3
 800945a:	4b4b      	ldr	r3, [pc, #300]	; (8009588 <tcp_receive+0x88c>)
 800945c:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 800945e:	4b4a      	ldr	r3, [pc, #296]	; (8009588 <tcp_receive+0x88c>)
 8009460:	685b      	ldr	r3, [r3, #4]
 8009462:	4a49      	ldr	r2, [pc, #292]	; (8009588 <tcp_receive+0x88c>)
 8009464:	8912      	ldrh	r2, [r2, #8]
 8009466:	4611      	mov	r1, r2
 8009468:	4618      	mov	r0, r3
 800946a:	f7fc f93f 	bl	80056ec <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 800946e:	4b46      	ldr	r3, [pc, #280]	; (8009588 <tcp_receive+0x88c>)
 8009470:	891c      	ldrh	r4, [r3, #8]
 8009472:	4b45      	ldr	r3, [pc, #276]	; (8009588 <tcp_receive+0x88c>)
 8009474:	68db      	ldr	r3, [r3, #12]
 8009476:	899b      	ldrh	r3, [r3, #12]
 8009478:	b29b      	uxth	r3, r3
 800947a:	4618      	mov	r0, r3
 800947c:	f7fa ff5e 	bl	800433c <lwip_htons>
 8009480:	4603      	mov	r3, r0
 8009482:	b2db      	uxtb	r3, r3
 8009484:	f003 0303 	and.w	r3, r3, #3
 8009488:	2b00      	cmp	r3, #0
 800948a:	d001      	beq.n	8009490 <tcp_receive+0x794>
 800948c:	2301      	movs	r3, #1
 800948e:	e000      	b.n	8009492 <tcp_receive+0x796>
 8009490:	2300      	movs	r3, #0
 8009492:	4423      	add	r3, r4
 8009494:	b29a      	uxth	r2, r3
 8009496:	4b3d      	ldr	r3, [pc, #244]	; (800958c <tcp_receive+0x890>)
 8009498:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800949a:	4b3c      	ldr	r3, [pc, #240]	; (800958c <tcp_receive+0x890>)
 800949c:	881b      	ldrh	r3, [r3, #0]
 800949e:	461a      	mov	r2, r3
 80094a0:	4b38      	ldr	r3, [pc, #224]	; (8009584 <tcp_receive+0x888>)
 80094a2:	681b      	ldr	r3, [r3, #0]
 80094a4:	441a      	add	r2, r3
 80094a6:	687b      	ldr	r3, [r7, #4]
 80094a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80094aa:	6879      	ldr	r1, [r7, #4]
 80094ac:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 80094ae:	440b      	add	r3, r1
 80094b0:	429a      	cmp	r2, r3
 80094b2:	d006      	beq.n	80094c2 <tcp_receive+0x7c6>
 80094b4:	4b36      	ldr	r3, [pc, #216]	; (8009590 <tcp_receive+0x894>)
 80094b6:	f240 52cb 	movw	r2, #1483	; 0x5cb
 80094ba:	4936      	ldr	r1, [pc, #216]	; (8009594 <tcp_receive+0x898>)
 80094bc:	4836      	ldr	r0, [pc, #216]	; (8009598 <tcp_receive+0x89c>)
 80094be:	f005 f92f 	bl	800e720 <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 80094c2:	687b      	ldr	r3, [r7, #4]
 80094c4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80094c6:	2b00      	cmp	r3, #0
 80094c8:	f000 80e7 	beq.w	800969a <tcp_receive+0x99e>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 80094cc:	4b2e      	ldr	r3, [pc, #184]	; (8009588 <tcp_receive+0x88c>)
 80094ce:	68db      	ldr	r3, [r3, #12]
 80094d0:	899b      	ldrh	r3, [r3, #12]
 80094d2:	b29b      	uxth	r3, r3
 80094d4:	4618      	mov	r0, r3
 80094d6:	f7fa ff31 	bl	800433c <lwip_htons>
 80094da:	4603      	mov	r3, r0
 80094dc:	b2db      	uxtb	r3, r3
 80094de:	f003 0301 	and.w	r3, r3, #1
 80094e2:	2b00      	cmp	r3, #0
 80094e4:	d010      	beq.n	8009508 <tcp_receive+0x80c>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 80094e6:	e00a      	b.n	80094fe <tcp_receive+0x802>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 80094e8:	687b      	ldr	r3, [r7, #4]
 80094ea:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80094ec:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 80094ee:	687b      	ldr	r3, [r7, #4]
 80094f0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80094f2:	681a      	ldr	r2, [r3, #0]
 80094f4:	687b      	ldr	r3, [r7, #4]
 80094f6:	675a      	str	r2, [r3, #116]	; 0x74
              tcp_seg_free(old_ooseq);
 80094f8:	68f8      	ldr	r0, [r7, #12]
 80094fa:	f7fd fd92 	bl	8007022 <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 80094fe:	687b      	ldr	r3, [r7, #4]
 8009500:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009502:	2b00      	cmp	r3, #0
 8009504:	d1f0      	bne.n	80094e8 <tcp_receive+0x7ec>
 8009506:	e0c8      	b.n	800969a <tcp_receive+0x99e>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 8009508:	687b      	ldr	r3, [r7, #4]
 800950a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800950c:	63fb      	str	r3, [r7, #60]	; 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 800950e:	e052      	b.n	80095b6 <tcp_receive+0x8ba>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 8009510:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009512:	68db      	ldr	r3, [r3, #12]
 8009514:	899b      	ldrh	r3, [r3, #12]
 8009516:	b29b      	uxth	r3, r3
 8009518:	4618      	mov	r0, r3
 800951a:	f7fa ff0f 	bl	800433c <lwip_htons>
 800951e:	4603      	mov	r3, r0
 8009520:	b2db      	uxtb	r3, r3
 8009522:	f003 0301 	and.w	r3, r3, #1
 8009526:	2b00      	cmp	r3, #0
 8009528:	d03d      	beq.n	80095a6 <tcp_receive+0x8aa>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 800952a:	4b17      	ldr	r3, [pc, #92]	; (8009588 <tcp_receive+0x88c>)
 800952c:	68db      	ldr	r3, [r3, #12]
 800952e:	899b      	ldrh	r3, [r3, #12]
 8009530:	b29b      	uxth	r3, r3
 8009532:	4618      	mov	r0, r3
 8009534:	f7fa ff02 	bl	800433c <lwip_htons>
 8009538:	4603      	mov	r3, r0
 800953a:	b2db      	uxtb	r3, r3
 800953c:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 8009540:	2b00      	cmp	r3, #0
 8009542:	d130      	bne.n	80095a6 <tcp_receive+0x8aa>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 8009544:	4b10      	ldr	r3, [pc, #64]	; (8009588 <tcp_receive+0x88c>)
 8009546:	68db      	ldr	r3, [r3, #12]
 8009548:	899b      	ldrh	r3, [r3, #12]
 800954a:	b29c      	uxth	r4, r3
 800954c:	2001      	movs	r0, #1
 800954e:	f7fa fef5 	bl	800433c <lwip_htons>
 8009552:	4603      	mov	r3, r0
 8009554:	461a      	mov	r2, r3
 8009556:	4b0c      	ldr	r3, [pc, #48]	; (8009588 <tcp_receive+0x88c>)
 8009558:	68db      	ldr	r3, [r3, #12]
 800955a:	4322      	orrs	r2, r4
 800955c:	b292      	uxth	r2, r2
 800955e:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 8009560:	4b09      	ldr	r3, [pc, #36]	; (8009588 <tcp_receive+0x88c>)
 8009562:	891c      	ldrh	r4, [r3, #8]
 8009564:	4b08      	ldr	r3, [pc, #32]	; (8009588 <tcp_receive+0x88c>)
 8009566:	68db      	ldr	r3, [r3, #12]
 8009568:	899b      	ldrh	r3, [r3, #12]
 800956a:	b29b      	uxth	r3, r3
 800956c:	4618      	mov	r0, r3
 800956e:	f7fa fee5 	bl	800433c <lwip_htons>
 8009572:	4603      	mov	r3, r0
 8009574:	b2db      	uxtb	r3, r3
 8009576:	f003 0303 	and.w	r3, r3, #3
 800957a:	2b00      	cmp	r3, #0
 800957c:	d00e      	beq.n	800959c <tcp_receive+0x8a0>
 800957e:	2301      	movs	r3, #1
 8009580:	e00d      	b.n	800959e <tcp_receive+0x8a2>
 8009582:	bf00      	nop
 8009584:	20008324 	.word	0x20008324
 8009588:	20008304 	.word	0x20008304
 800958c:	2000832e 	.word	0x2000832e
 8009590:	08010c04 	.word	0x08010c04
 8009594:	08010fac 	.word	0x08010fac
 8009598:	08010c50 	.word	0x08010c50
 800959c:	2300      	movs	r3, #0
 800959e:	4423      	add	r3, r4
 80095a0:	b29a      	uxth	r2, r3
 80095a2:	4b98      	ldr	r3, [pc, #608]	; (8009804 <tcp_receive+0xb08>)
 80095a4:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 80095a6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80095a8:	613b      	str	r3, [r7, #16]
              next = next->next;
 80095aa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80095ac:	681b      	ldr	r3, [r3, #0]
 80095ae:	63fb      	str	r3, [r7, #60]	; 0x3c
              tcp_seg_free(tmp);
 80095b0:	6938      	ldr	r0, [r7, #16]
 80095b2:	f7fd fd36 	bl	8007022 <tcp_seg_free>
            while (next &&
 80095b6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80095b8:	2b00      	cmp	r3, #0
 80095ba:	d00e      	beq.n	80095da <tcp_receive+0x8de>
                   TCP_SEQ_GEQ(seqno + tcplen,
 80095bc:	4b91      	ldr	r3, [pc, #580]	; (8009804 <tcp_receive+0xb08>)
 80095be:	881b      	ldrh	r3, [r3, #0]
 80095c0:	461a      	mov	r2, r3
 80095c2:	4b91      	ldr	r3, [pc, #580]	; (8009808 <tcp_receive+0xb0c>)
 80095c4:	681b      	ldr	r3, [r3, #0]
 80095c6:	441a      	add	r2, r3
 80095c8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80095ca:	68db      	ldr	r3, [r3, #12]
 80095cc:	685b      	ldr	r3, [r3, #4]
 80095ce:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80095d0:	8909      	ldrh	r1, [r1, #8]
 80095d2:	440b      	add	r3, r1
 80095d4:	1ad3      	subs	r3, r2, r3
            while (next &&
 80095d6:	2b00      	cmp	r3, #0
 80095d8:	da9a      	bge.n	8009510 <tcp_receive+0x814>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 80095da:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80095dc:	2b00      	cmp	r3, #0
 80095de:	d059      	beq.n	8009694 <tcp_receive+0x998>
                TCP_SEQ_GT(seqno + tcplen,
 80095e0:	4b88      	ldr	r3, [pc, #544]	; (8009804 <tcp_receive+0xb08>)
 80095e2:	881b      	ldrh	r3, [r3, #0]
 80095e4:	461a      	mov	r2, r3
 80095e6:	4b88      	ldr	r3, [pc, #544]	; (8009808 <tcp_receive+0xb0c>)
 80095e8:	681b      	ldr	r3, [r3, #0]
 80095ea:	441a      	add	r2, r3
 80095ec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80095ee:	68db      	ldr	r3, [r3, #12]
 80095f0:	685b      	ldr	r3, [r3, #4]
 80095f2:	1ad3      	subs	r3, r2, r3
            if (next &&
 80095f4:	2b00      	cmp	r3, #0
 80095f6:	dd4d      	ble.n	8009694 <tcp_receive+0x998>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 80095f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80095fa:	68db      	ldr	r3, [r3, #12]
 80095fc:	685b      	ldr	r3, [r3, #4]
 80095fe:	b29a      	uxth	r2, r3
 8009600:	4b81      	ldr	r3, [pc, #516]	; (8009808 <tcp_receive+0xb0c>)
 8009602:	681b      	ldr	r3, [r3, #0]
 8009604:	b29b      	uxth	r3, r3
 8009606:	1ad3      	subs	r3, r2, r3
 8009608:	b29a      	uxth	r2, r3
 800960a:	4b80      	ldr	r3, [pc, #512]	; (800980c <tcp_receive+0xb10>)
 800960c:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800960e:	4b7f      	ldr	r3, [pc, #508]	; (800980c <tcp_receive+0xb10>)
 8009610:	68db      	ldr	r3, [r3, #12]
 8009612:	899b      	ldrh	r3, [r3, #12]
 8009614:	b29b      	uxth	r3, r3
 8009616:	4618      	mov	r0, r3
 8009618:	f7fa fe90 	bl	800433c <lwip_htons>
 800961c:	4603      	mov	r3, r0
 800961e:	b2db      	uxtb	r3, r3
 8009620:	f003 0302 	and.w	r3, r3, #2
 8009624:	2b00      	cmp	r3, #0
 8009626:	d005      	beq.n	8009634 <tcp_receive+0x938>
                inseg.len -= 1;
 8009628:	4b78      	ldr	r3, [pc, #480]	; (800980c <tcp_receive+0xb10>)
 800962a:	891b      	ldrh	r3, [r3, #8]
 800962c:	3b01      	subs	r3, #1
 800962e:	b29a      	uxth	r2, r3
 8009630:	4b76      	ldr	r3, [pc, #472]	; (800980c <tcp_receive+0xb10>)
 8009632:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 8009634:	4b75      	ldr	r3, [pc, #468]	; (800980c <tcp_receive+0xb10>)
 8009636:	685b      	ldr	r3, [r3, #4]
 8009638:	4a74      	ldr	r2, [pc, #464]	; (800980c <tcp_receive+0xb10>)
 800963a:	8912      	ldrh	r2, [r2, #8]
 800963c:	4611      	mov	r1, r2
 800963e:	4618      	mov	r0, r3
 8009640:	f7fc f854 	bl	80056ec <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 8009644:	4b71      	ldr	r3, [pc, #452]	; (800980c <tcp_receive+0xb10>)
 8009646:	891c      	ldrh	r4, [r3, #8]
 8009648:	4b70      	ldr	r3, [pc, #448]	; (800980c <tcp_receive+0xb10>)
 800964a:	68db      	ldr	r3, [r3, #12]
 800964c:	899b      	ldrh	r3, [r3, #12]
 800964e:	b29b      	uxth	r3, r3
 8009650:	4618      	mov	r0, r3
 8009652:	f7fa fe73 	bl	800433c <lwip_htons>
 8009656:	4603      	mov	r3, r0
 8009658:	b2db      	uxtb	r3, r3
 800965a:	f003 0303 	and.w	r3, r3, #3
 800965e:	2b00      	cmp	r3, #0
 8009660:	d001      	beq.n	8009666 <tcp_receive+0x96a>
 8009662:	2301      	movs	r3, #1
 8009664:	e000      	b.n	8009668 <tcp_receive+0x96c>
 8009666:	2300      	movs	r3, #0
 8009668:	4423      	add	r3, r4
 800966a:	b29a      	uxth	r2, r3
 800966c:	4b65      	ldr	r3, [pc, #404]	; (8009804 <tcp_receive+0xb08>)
 800966e:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 8009670:	4b64      	ldr	r3, [pc, #400]	; (8009804 <tcp_receive+0xb08>)
 8009672:	881b      	ldrh	r3, [r3, #0]
 8009674:	461a      	mov	r2, r3
 8009676:	4b64      	ldr	r3, [pc, #400]	; (8009808 <tcp_receive+0xb0c>)
 8009678:	681b      	ldr	r3, [r3, #0]
 800967a:	441a      	add	r2, r3
 800967c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800967e:	68db      	ldr	r3, [r3, #12]
 8009680:	685b      	ldr	r3, [r3, #4]
 8009682:	429a      	cmp	r2, r3
 8009684:	d006      	beq.n	8009694 <tcp_receive+0x998>
 8009686:	4b62      	ldr	r3, [pc, #392]	; (8009810 <tcp_receive+0xb14>)
 8009688:	f240 52fc 	movw	r2, #1532	; 0x5fc
 800968c:	4961      	ldr	r1, [pc, #388]	; (8009814 <tcp_receive+0xb18>)
 800968e:	4862      	ldr	r0, [pc, #392]	; (8009818 <tcp_receive+0xb1c>)
 8009690:	f005 f846 	bl	800e720 <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 8009694:	687b      	ldr	r3, [r7, #4]
 8009696:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8009698:	675a      	str	r2, [r3, #116]	; 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 800969a:	4b5a      	ldr	r3, [pc, #360]	; (8009804 <tcp_receive+0xb08>)
 800969c:	881b      	ldrh	r3, [r3, #0]
 800969e:	461a      	mov	r2, r3
 80096a0:	4b59      	ldr	r3, [pc, #356]	; (8009808 <tcp_receive+0xb0c>)
 80096a2:	681b      	ldr	r3, [r3, #0]
 80096a4:	441a      	add	r2, r3
 80096a6:	687b      	ldr	r3, [r7, #4]
 80096a8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 80096aa:	687b      	ldr	r3, [r7, #4]
 80096ac:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 80096ae:	4b55      	ldr	r3, [pc, #340]	; (8009804 <tcp_receive+0xb08>)
 80096b0:	881b      	ldrh	r3, [r3, #0]
 80096b2:	429a      	cmp	r2, r3
 80096b4:	d206      	bcs.n	80096c4 <tcp_receive+0x9c8>
 80096b6:	4b56      	ldr	r3, [pc, #344]	; (8009810 <tcp_receive+0xb14>)
 80096b8:	f240 6207 	movw	r2, #1543	; 0x607
 80096bc:	4957      	ldr	r1, [pc, #348]	; (800981c <tcp_receive+0xb20>)
 80096be:	4856      	ldr	r0, [pc, #344]	; (8009818 <tcp_receive+0xb1c>)
 80096c0:	f005 f82e 	bl	800e720 <iprintf>
        pcb->rcv_wnd -= tcplen;
 80096c4:	687b      	ldr	r3, [r7, #4]
 80096c6:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 80096c8:	4b4e      	ldr	r3, [pc, #312]	; (8009804 <tcp_receive+0xb08>)
 80096ca:	881b      	ldrh	r3, [r3, #0]
 80096cc:	1ad3      	subs	r3, r2, r3
 80096ce:	b29a      	uxth	r2, r3
 80096d0:	687b      	ldr	r3, [r7, #4]
 80096d2:	851a      	strh	r2, [r3, #40]	; 0x28

        tcp_update_rcv_ann_wnd(pcb);
 80096d4:	6878      	ldr	r0, [r7, #4]
 80096d6:	f7fc ffc5 	bl	8006664 <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 80096da:	4b4c      	ldr	r3, [pc, #304]	; (800980c <tcp_receive+0xb10>)
 80096dc:	685b      	ldr	r3, [r3, #4]
 80096de:	891b      	ldrh	r3, [r3, #8]
 80096e0:	2b00      	cmp	r3, #0
 80096e2:	d006      	beq.n	80096f2 <tcp_receive+0x9f6>
          recv_data = inseg.p;
 80096e4:	4b49      	ldr	r3, [pc, #292]	; (800980c <tcp_receive+0xb10>)
 80096e6:	685b      	ldr	r3, [r3, #4]
 80096e8:	4a4d      	ldr	r2, [pc, #308]	; (8009820 <tcp_receive+0xb24>)
 80096ea:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 80096ec:	4b47      	ldr	r3, [pc, #284]	; (800980c <tcp_receive+0xb10>)
 80096ee:	2200      	movs	r2, #0
 80096f0:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 80096f2:	4b46      	ldr	r3, [pc, #280]	; (800980c <tcp_receive+0xb10>)
 80096f4:	68db      	ldr	r3, [r3, #12]
 80096f6:	899b      	ldrh	r3, [r3, #12]
 80096f8:	b29b      	uxth	r3, r3
 80096fa:	4618      	mov	r0, r3
 80096fc:	f7fa fe1e 	bl	800433c <lwip_htons>
 8009700:	4603      	mov	r3, r0
 8009702:	b2db      	uxtb	r3, r3
 8009704:	f003 0301 	and.w	r3, r3, #1
 8009708:	2b00      	cmp	r3, #0
 800970a:	f000 80b8 	beq.w	800987e <tcp_receive+0xb82>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 800970e:	4b45      	ldr	r3, [pc, #276]	; (8009824 <tcp_receive+0xb28>)
 8009710:	781b      	ldrb	r3, [r3, #0]
 8009712:	f043 0320 	orr.w	r3, r3, #32
 8009716:	b2da      	uxtb	r2, r3
 8009718:	4b42      	ldr	r3, [pc, #264]	; (8009824 <tcp_receive+0xb28>)
 800971a:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 800971c:	e0af      	b.n	800987e <tcp_receive+0xb82>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 800971e:	687b      	ldr	r3, [r7, #4]
 8009720:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009722:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 8009724:	687b      	ldr	r3, [r7, #4]
 8009726:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009728:	68db      	ldr	r3, [r3, #12]
 800972a:	685b      	ldr	r3, [r3, #4]
 800972c:	4a36      	ldr	r2, [pc, #216]	; (8009808 <tcp_receive+0xb0c>)
 800972e:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 8009730:	68bb      	ldr	r3, [r7, #8]
 8009732:	891b      	ldrh	r3, [r3, #8]
 8009734:	461c      	mov	r4, r3
 8009736:	68bb      	ldr	r3, [r7, #8]
 8009738:	68db      	ldr	r3, [r3, #12]
 800973a:	899b      	ldrh	r3, [r3, #12]
 800973c:	b29b      	uxth	r3, r3
 800973e:	4618      	mov	r0, r3
 8009740:	f7fa fdfc 	bl	800433c <lwip_htons>
 8009744:	4603      	mov	r3, r0
 8009746:	b2db      	uxtb	r3, r3
 8009748:	f003 0303 	and.w	r3, r3, #3
 800974c:	2b00      	cmp	r3, #0
 800974e:	d001      	beq.n	8009754 <tcp_receive+0xa58>
 8009750:	2301      	movs	r3, #1
 8009752:	e000      	b.n	8009756 <tcp_receive+0xa5a>
 8009754:	2300      	movs	r3, #0
 8009756:	191a      	adds	r2, r3, r4
 8009758:	687b      	ldr	r3, [r7, #4]
 800975a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800975c:	441a      	add	r2, r3
 800975e:	687b      	ldr	r3, [r7, #4]
 8009760:	625a      	str	r2, [r3, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 8009762:	687b      	ldr	r3, [r7, #4]
 8009764:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009766:	461c      	mov	r4, r3
 8009768:	68bb      	ldr	r3, [r7, #8]
 800976a:	891b      	ldrh	r3, [r3, #8]
 800976c:	461d      	mov	r5, r3
 800976e:	68bb      	ldr	r3, [r7, #8]
 8009770:	68db      	ldr	r3, [r3, #12]
 8009772:	899b      	ldrh	r3, [r3, #12]
 8009774:	b29b      	uxth	r3, r3
 8009776:	4618      	mov	r0, r3
 8009778:	f7fa fde0 	bl	800433c <lwip_htons>
 800977c:	4603      	mov	r3, r0
 800977e:	b2db      	uxtb	r3, r3
 8009780:	f003 0303 	and.w	r3, r3, #3
 8009784:	2b00      	cmp	r3, #0
 8009786:	d001      	beq.n	800978c <tcp_receive+0xa90>
 8009788:	2301      	movs	r3, #1
 800978a:	e000      	b.n	800978e <tcp_receive+0xa92>
 800978c:	2300      	movs	r3, #0
 800978e:	442b      	add	r3, r5
 8009790:	429c      	cmp	r4, r3
 8009792:	d206      	bcs.n	80097a2 <tcp_receive+0xaa6>
 8009794:	4b1e      	ldr	r3, [pc, #120]	; (8009810 <tcp_receive+0xb14>)
 8009796:	f240 622b 	movw	r2, #1579	; 0x62b
 800979a:	4923      	ldr	r1, [pc, #140]	; (8009828 <tcp_receive+0xb2c>)
 800979c:	481e      	ldr	r0, [pc, #120]	; (8009818 <tcp_receive+0xb1c>)
 800979e:	f004 ffbf 	bl	800e720 <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 80097a2:	68bb      	ldr	r3, [r7, #8]
 80097a4:	891b      	ldrh	r3, [r3, #8]
 80097a6:	461c      	mov	r4, r3
 80097a8:	68bb      	ldr	r3, [r7, #8]
 80097aa:	68db      	ldr	r3, [r3, #12]
 80097ac:	899b      	ldrh	r3, [r3, #12]
 80097ae:	b29b      	uxth	r3, r3
 80097b0:	4618      	mov	r0, r3
 80097b2:	f7fa fdc3 	bl	800433c <lwip_htons>
 80097b6:	4603      	mov	r3, r0
 80097b8:	b2db      	uxtb	r3, r3
 80097ba:	f003 0303 	and.w	r3, r3, #3
 80097be:	2b00      	cmp	r3, #0
 80097c0:	d001      	beq.n	80097c6 <tcp_receive+0xaca>
 80097c2:	2301      	movs	r3, #1
 80097c4:	e000      	b.n	80097c8 <tcp_receive+0xacc>
 80097c6:	2300      	movs	r3, #0
 80097c8:	1919      	adds	r1, r3, r4
 80097ca:	687b      	ldr	r3, [r7, #4]
 80097cc:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 80097ce:	b28b      	uxth	r3, r1
 80097d0:	1ad3      	subs	r3, r2, r3
 80097d2:	b29a      	uxth	r2, r3
 80097d4:	687b      	ldr	r3, [r7, #4]
 80097d6:	851a      	strh	r2, [r3, #40]	; 0x28

          tcp_update_rcv_ann_wnd(pcb);
 80097d8:	6878      	ldr	r0, [r7, #4]
 80097da:	f7fc ff43 	bl	8006664 <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 80097de:	68bb      	ldr	r3, [r7, #8]
 80097e0:	685b      	ldr	r3, [r3, #4]
 80097e2:	891b      	ldrh	r3, [r3, #8]
 80097e4:	2b00      	cmp	r3, #0
 80097e6:	d028      	beq.n	800983a <tcp_receive+0xb3e>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 80097e8:	4b0d      	ldr	r3, [pc, #52]	; (8009820 <tcp_receive+0xb24>)
 80097ea:	681b      	ldr	r3, [r3, #0]
 80097ec:	2b00      	cmp	r3, #0
 80097ee:	d01d      	beq.n	800982c <tcp_receive+0xb30>
              pbuf_cat(recv_data, cseg->p);
 80097f0:	4b0b      	ldr	r3, [pc, #44]	; (8009820 <tcp_receive+0xb24>)
 80097f2:	681a      	ldr	r2, [r3, #0]
 80097f4:	68bb      	ldr	r3, [r7, #8]
 80097f6:	685b      	ldr	r3, [r3, #4]
 80097f8:	4619      	mov	r1, r3
 80097fa:	4610      	mov	r0, r2
 80097fc:	f7fc f9be 	bl	8005b7c <pbuf_cat>
 8009800:	e018      	b.n	8009834 <tcp_receive+0xb38>
 8009802:	bf00      	nop
 8009804:	2000832e 	.word	0x2000832e
 8009808:	20008324 	.word	0x20008324
 800980c:	20008304 	.word	0x20008304
 8009810:	08010c04 	.word	0x08010c04
 8009814:	08010fe4 	.word	0x08010fe4
 8009818:	08010c50 	.word	0x08010c50
 800981c:	08011020 	.word	0x08011020
 8009820:	20008334 	.word	0x20008334
 8009824:	20008331 	.word	0x20008331
 8009828:	08011040 	.word	0x08011040
            } else {
              recv_data = cseg->p;
 800982c:	68bb      	ldr	r3, [r7, #8]
 800982e:	685b      	ldr	r3, [r3, #4]
 8009830:	4a70      	ldr	r2, [pc, #448]	; (80099f4 <tcp_receive+0xcf8>)
 8009832:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 8009834:	68bb      	ldr	r3, [r7, #8]
 8009836:	2200      	movs	r2, #0
 8009838:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 800983a:	68bb      	ldr	r3, [r7, #8]
 800983c:	68db      	ldr	r3, [r3, #12]
 800983e:	899b      	ldrh	r3, [r3, #12]
 8009840:	b29b      	uxth	r3, r3
 8009842:	4618      	mov	r0, r3
 8009844:	f7fa fd7a 	bl	800433c <lwip_htons>
 8009848:	4603      	mov	r3, r0
 800984a:	b2db      	uxtb	r3, r3
 800984c:	f003 0301 	and.w	r3, r3, #1
 8009850:	2b00      	cmp	r3, #0
 8009852:	d00d      	beq.n	8009870 <tcp_receive+0xb74>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 8009854:	4b68      	ldr	r3, [pc, #416]	; (80099f8 <tcp_receive+0xcfc>)
 8009856:	781b      	ldrb	r3, [r3, #0]
 8009858:	f043 0320 	orr.w	r3, r3, #32
 800985c:	b2da      	uxtb	r2, r3
 800985e:	4b66      	ldr	r3, [pc, #408]	; (80099f8 <tcp_receive+0xcfc>)
 8009860:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 8009862:	687b      	ldr	r3, [r7, #4]
 8009864:	7d1b      	ldrb	r3, [r3, #20]
 8009866:	2b04      	cmp	r3, #4
 8009868:	d102      	bne.n	8009870 <tcp_receive+0xb74>
              pcb->state = CLOSE_WAIT;
 800986a:	687b      	ldr	r3, [r7, #4]
 800986c:	2207      	movs	r2, #7
 800986e:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 8009870:	68bb      	ldr	r3, [r7, #8]
 8009872:	681a      	ldr	r2, [r3, #0]
 8009874:	687b      	ldr	r3, [r7, #4]
 8009876:	675a      	str	r2, [r3, #116]	; 0x74
          tcp_seg_free(cseg);
 8009878:	68b8      	ldr	r0, [r7, #8]
 800987a:	f7fd fbd2 	bl	8007022 <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 800987e:	687b      	ldr	r3, [r7, #4]
 8009880:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009882:	2b00      	cmp	r3, #0
 8009884:	d008      	beq.n	8009898 <tcp_receive+0xb9c>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 8009886:	687b      	ldr	r3, [r7, #4]
 8009888:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800988a:	68db      	ldr	r3, [r3, #12]
 800988c:	685a      	ldr	r2, [r3, #4]
 800988e:	687b      	ldr	r3, [r7, #4]
 8009890:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        while (pcb->ooseq != NULL &&
 8009892:	429a      	cmp	r2, r3
 8009894:	f43f af43 	beq.w	800971e <tcp_receive+0xa22>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 8009898:	687b      	ldr	r3, [r7, #4]
 800989a:	8b5b      	ldrh	r3, [r3, #26]
 800989c:	f003 0301 	and.w	r3, r3, #1
 80098a0:	2b00      	cmp	r3, #0
 80098a2:	d00e      	beq.n	80098c2 <tcp_receive+0xbc6>
 80098a4:	687b      	ldr	r3, [r7, #4]
 80098a6:	8b5b      	ldrh	r3, [r3, #26]
 80098a8:	f023 0301 	bic.w	r3, r3, #1
 80098ac:	b29a      	uxth	r2, r3
 80098ae:	687b      	ldr	r3, [r7, #4]
 80098b0:	835a      	strh	r2, [r3, #26]
 80098b2:	687b      	ldr	r3, [r7, #4]
 80098b4:	8b5b      	ldrh	r3, [r3, #26]
 80098b6:	f043 0302 	orr.w	r3, r3, #2
 80098ba:	b29a      	uxth	r2, r3
 80098bc:	687b      	ldr	r3, [r7, #4]
 80098be:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 80098c0:	e188      	b.n	8009bd4 <tcp_receive+0xed8>
        tcp_ack(pcb);
 80098c2:	687b      	ldr	r3, [r7, #4]
 80098c4:	8b5b      	ldrh	r3, [r3, #26]
 80098c6:	f043 0301 	orr.w	r3, r3, #1
 80098ca:	b29a      	uxth	r2, r3
 80098cc:	687b      	ldr	r3, [r7, #4]
 80098ce:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 80098d0:	e180      	b.n	8009bd4 <tcp_receive+0xed8>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 80098d2:	687b      	ldr	r3, [r7, #4]
 80098d4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80098d6:	2b00      	cmp	r3, #0
 80098d8:	d106      	bne.n	80098e8 <tcp_receive+0xbec>
          pcb->ooseq = tcp_seg_copy(&inseg);
 80098da:	4848      	ldr	r0, [pc, #288]	; (80099fc <tcp_receive+0xd00>)
 80098dc:	f7fd fbba 	bl	8007054 <tcp_seg_copy>
 80098e0:	4602      	mov	r2, r0
 80098e2:	687b      	ldr	r3, [r7, #4]
 80098e4:	675a      	str	r2, [r3, #116]	; 0x74
 80098e6:	e16d      	b.n	8009bc4 <tcp_receive+0xec8>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 80098e8:	2300      	movs	r3, #0
 80098ea:	637b      	str	r3, [r7, #52]	; 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 80098ec:	687b      	ldr	r3, [r7, #4]
 80098ee:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80098f0:	63bb      	str	r3, [r7, #56]	; 0x38
 80098f2:	e157      	b.n	8009ba4 <tcp_receive+0xea8>
            if (seqno == next->tcphdr->seqno) {
 80098f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80098f6:	68db      	ldr	r3, [r3, #12]
 80098f8:	685a      	ldr	r2, [r3, #4]
 80098fa:	4b41      	ldr	r3, [pc, #260]	; (8009a00 <tcp_receive+0xd04>)
 80098fc:	681b      	ldr	r3, [r3, #0]
 80098fe:	429a      	cmp	r2, r3
 8009900:	d11d      	bne.n	800993e <tcp_receive+0xc42>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 8009902:	4b3e      	ldr	r3, [pc, #248]	; (80099fc <tcp_receive+0xd00>)
 8009904:	891a      	ldrh	r2, [r3, #8]
 8009906:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009908:	891b      	ldrh	r3, [r3, #8]
 800990a:	429a      	cmp	r2, r3
 800990c:	f240 814f 	bls.w	8009bae <tcp_receive+0xeb2>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8009910:	483a      	ldr	r0, [pc, #232]	; (80099fc <tcp_receive+0xd00>)
 8009912:	f7fd fb9f 	bl	8007054 <tcp_seg_copy>
 8009916:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 8009918:	697b      	ldr	r3, [r7, #20]
 800991a:	2b00      	cmp	r3, #0
 800991c:	f000 8149 	beq.w	8009bb2 <tcp_receive+0xeb6>
                  if (prev != NULL) {
 8009920:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009922:	2b00      	cmp	r3, #0
 8009924:	d003      	beq.n	800992e <tcp_receive+0xc32>
                    prev->next = cseg;
 8009926:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009928:	697a      	ldr	r2, [r7, #20]
 800992a:	601a      	str	r2, [r3, #0]
 800992c:	e002      	b.n	8009934 <tcp_receive+0xc38>
                  } else {
                    pcb->ooseq = cseg;
 800992e:	687b      	ldr	r3, [r7, #4]
 8009930:	697a      	ldr	r2, [r7, #20]
 8009932:	675a      	str	r2, [r3, #116]	; 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 8009934:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8009936:	6978      	ldr	r0, [r7, #20]
 8009938:	f7ff f8dc 	bl	8008af4 <tcp_oos_insert_segment>
                }
                break;
 800993c:	e139      	b.n	8009bb2 <tcp_receive+0xeb6>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 800993e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009940:	2b00      	cmp	r3, #0
 8009942:	d117      	bne.n	8009974 <tcp_receive+0xc78>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 8009944:	4b2e      	ldr	r3, [pc, #184]	; (8009a00 <tcp_receive+0xd04>)
 8009946:	681a      	ldr	r2, [r3, #0]
 8009948:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800994a:	68db      	ldr	r3, [r3, #12]
 800994c:	685b      	ldr	r3, [r3, #4]
 800994e:	1ad3      	subs	r3, r2, r3
 8009950:	2b00      	cmp	r3, #0
 8009952:	da57      	bge.n	8009a04 <tcp_receive+0xd08>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8009954:	4829      	ldr	r0, [pc, #164]	; (80099fc <tcp_receive+0xd00>)
 8009956:	f7fd fb7d 	bl	8007054 <tcp_seg_copy>
 800995a:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 800995c:	69bb      	ldr	r3, [r7, #24]
 800995e:	2b00      	cmp	r3, #0
 8009960:	f000 8129 	beq.w	8009bb6 <tcp_receive+0xeba>
                    pcb->ooseq = cseg;
 8009964:	687b      	ldr	r3, [r7, #4]
 8009966:	69ba      	ldr	r2, [r7, #24]
 8009968:	675a      	str	r2, [r3, #116]	; 0x74
                    tcp_oos_insert_segment(cseg, next);
 800996a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800996c:	69b8      	ldr	r0, [r7, #24]
 800996e:	f7ff f8c1 	bl	8008af4 <tcp_oos_insert_segment>
                  }
                  break;
 8009972:	e120      	b.n	8009bb6 <tcp_receive+0xeba>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 8009974:	4b22      	ldr	r3, [pc, #136]	; (8009a00 <tcp_receive+0xd04>)
 8009976:	681a      	ldr	r2, [r3, #0]
 8009978:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800997a:	68db      	ldr	r3, [r3, #12]
 800997c:	685b      	ldr	r3, [r3, #4]
 800997e:	1ad3      	subs	r3, r2, r3
 8009980:	3b01      	subs	r3, #1
 8009982:	2b00      	cmp	r3, #0
 8009984:	db3e      	blt.n	8009a04 <tcp_receive+0xd08>
 8009986:	4b1e      	ldr	r3, [pc, #120]	; (8009a00 <tcp_receive+0xd04>)
 8009988:	681a      	ldr	r2, [r3, #0]
 800998a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800998c:	68db      	ldr	r3, [r3, #12]
 800998e:	685b      	ldr	r3, [r3, #4]
 8009990:	1ad3      	subs	r3, r2, r3
 8009992:	3301      	adds	r3, #1
 8009994:	2b00      	cmp	r3, #0
 8009996:	dc35      	bgt.n	8009a04 <tcp_receive+0xd08>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8009998:	4818      	ldr	r0, [pc, #96]	; (80099fc <tcp_receive+0xd00>)
 800999a:	f7fd fb5b 	bl	8007054 <tcp_seg_copy>
 800999e:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 80099a0:	69fb      	ldr	r3, [r7, #28]
 80099a2:	2b00      	cmp	r3, #0
 80099a4:	f000 8109 	beq.w	8009bba <tcp_receive+0xebe>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 80099a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80099aa:	68db      	ldr	r3, [r3, #12]
 80099ac:	685b      	ldr	r3, [r3, #4]
 80099ae:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80099b0:	8912      	ldrh	r2, [r2, #8]
 80099b2:	441a      	add	r2, r3
 80099b4:	4b12      	ldr	r3, [pc, #72]	; (8009a00 <tcp_receive+0xd04>)
 80099b6:	681b      	ldr	r3, [r3, #0]
 80099b8:	1ad3      	subs	r3, r2, r3
 80099ba:	2b00      	cmp	r3, #0
 80099bc:	dd12      	ble.n	80099e4 <tcp_receive+0xce8>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 80099be:	4b10      	ldr	r3, [pc, #64]	; (8009a00 <tcp_receive+0xd04>)
 80099c0:	681b      	ldr	r3, [r3, #0]
 80099c2:	b29a      	uxth	r2, r3
 80099c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80099c6:	68db      	ldr	r3, [r3, #12]
 80099c8:	685b      	ldr	r3, [r3, #4]
 80099ca:	b29b      	uxth	r3, r3
 80099cc:	1ad3      	subs	r3, r2, r3
 80099ce:	b29a      	uxth	r2, r3
 80099d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80099d2:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 80099d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80099d6:	685a      	ldr	r2, [r3, #4]
 80099d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80099da:	891b      	ldrh	r3, [r3, #8]
 80099dc:	4619      	mov	r1, r3
 80099de:	4610      	mov	r0, r2
 80099e0:	f7fb fe84 	bl	80056ec <pbuf_realloc>
                    }
                    prev->next = cseg;
 80099e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80099e6:	69fa      	ldr	r2, [r7, #28]
 80099e8:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 80099ea:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80099ec:	69f8      	ldr	r0, [r7, #28]
 80099ee:	f7ff f881 	bl	8008af4 <tcp_oos_insert_segment>
                  }
                  break;
 80099f2:	e0e2      	b.n	8009bba <tcp_receive+0xebe>
 80099f4:	20008334 	.word	0x20008334
 80099f8:	20008331 	.word	0x20008331
 80099fc:	20008304 	.word	0x20008304
 8009a00:	20008324 	.word	0x20008324
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 8009a04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009a06:	637b      	str	r3, [r7, #52]	; 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 8009a08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009a0a:	681b      	ldr	r3, [r3, #0]
 8009a0c:	2b00      	cmp	r3, #0
 8009a0e:	f040 80c6 	bne.w	8009b9e <tcp_receive+0xea2>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 8009a12:	4b80      	ldr	r3, [pc, #512]	; (8009c14 <tcp_receive+0xf18>)
 8009a14:	681a      	ldr	r2, [r3, #0]
 8009a16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009a18:	68db      	ldr	r3, [r3, #12]
 8009a1a:	685b      	ldr	r3, [r3, #4]
 8009a1c:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 8009a1e:	2b00      	cmp	r3, #0
 8009a20:	f340 80bd 	ble.w	8009b9e <tcp_receive+0xea2>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 8009a24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009a26:	68db      	ldr	r3, [r3, #12]
 8009a28:	899b      	ldrh	r3, [r3, #12]
 8009a2a:	b29b      	uxth	r3, r3
 8009a2c:	4618      	mov	r0, r3
 8009a2e:	f7fa fc85 	bl	800433c <lwip_htons>
 8009a32:	4603      	mov	r3, r0
 8009a34:	b2db      	uxtb	r3, r3
 8009a36:	f003 0301 	and.w	r3, r3, #1
 8009a3a:	2b00      	cmp	r3, #0
 8009a3c:	f040 80bf 	bne.w	8009bbe <tcp_receive+0xec2>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 8009a40:	4875      	ldr	r0, [pc, #468]	; (8009c18 <tcp_receive+0xf1c>)
 8009a42:	f7fd fb07 	bl	8007054 <tcp_seg_copy>
 8009a46:	4602      	mov	r2, r0
 8009a48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009a4a:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 8009a4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009a4e:	681b      	ldr	r3, [r3, #0]
 8009a50:	2b00      	cmp	r3, #0
 8009a52:	f000 80b6 	beq.w	8009bc2 <tcp_receive+0xec6>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 8009a56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009a58:	68db      	ldr	r3, [r3, #12]
 8009a5a:	685b      	ldr	r3, [r3, #4]
 8009a5c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009a5e:	8912      	ldrh	r2, [r2, #8]
 8009a60:	441a      	add	r2, r3
 8009a62:	4b6c      	ldr	r3, [pc, #432]	; (8009c14 <tcp_receive+0xf18>)
 8009a64:	681b      	ldr	r3, [r3, #0]
 8009a66:	1ad3      	subs	r3, r2, r3
 8009a68:	2b00      	cmp	r3, #0
 8009a6a:	dd12      	ble.n	8009a92 <tcp_receive+0xd96>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 8009a6c:	4b69      	ldr	r3, [pc, #420]	; (8009c14 <tcp_receive+0xf18>)
 8009a6e:	681b      	ldr	r3, [r3, #0]
 8009a70:	b29a      	uxth	r2, r3
 8009a72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009a74:	68db      	ldr	r3, [r3, #12]
 8009a76:	685b      	ldr	r3, [r3, #4]
 8009a78:	b29b      	uxth	r3, r3
 8009a7a:	1ad3      	subs	r3, r2, r3
 8009a7c:	b29a      	uxth	r2, r3
 8009a7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009a80:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 8009a82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009a84:	685a      	ldr	r2, [r3, #4]
 8009a86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009a88:	891b      	ldrh	r3, [r3, #8]
 8009a8a:	4619      	mov	r1, r3
 8009a8c:	4610      	mov	r0, r2
 8009a8e:	f7fb fe2d 	bl	80056ec <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 8009a92:	4b62      	ldr	r3, [pc, #392]	; (8009c1c <tcp_receive+0xf20>)
 8009a94:	881b      	ldrh	r3, [r3, #0]
 8009a96:	461a      	mov	r2, r3
 8009a98:	4b5e      	ldr	r3, [pc, #376]	; (8009c14 <tcp_receive+0xf18>)
 8009a9a:	681b      	ldr	r3, [r3, #0]
 8009a9c:	441a      	add	r2, r3
 8009a9e:	687b      	ldr	r3, [r7, #4]
 8009aa0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009aa2:	6879      	ldr	r1, [r7, #4]
 8009aa4:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8009aa6:	440b      	add	r3, r1
 8009aa8:	1ad3      	subs	r3, r2, r3
 8009aaa:	2b00      	cmp	r3, #0
 8009aac:	f340 8089 	ble.w	8009bc2 <tcp_receive+0xec6>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 8009ab0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009ab2:	681b      	ldr	r3, [r3, #0]
 8009ab4:	68db      	ldr	r3, [r3, #12]
 8009ab6:	899b      	ldrh	r3, [r3, #12]
 8009ab8:	b29b      	uxth	r3, r3
 8009aba:	4618      	mov	r0, r3
 8009abc:	f7fa fc3e 	bl	800433c <lwip_htons>
 8009ac0:	4603      	mov	r3, r0
 8009ac2:	b2db      	uxtb	r3, r3
 8009ac4:	f003 0301 	and.w	r3, r3, #1
 8009ac8:	2b00      	cmp	r3, #0
 8009aca:	d022      	beq.n	8009b12 <tcp_receive+0xe16>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 8009acc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009ace:	681b      	ldr	r3, [r3, #0]
 8009ad0:	68db      	ldr	r3, [r3, #12]
 8009ad2:	899b      	ldrh	r3, [r3, #12]
 8009ad4:	b29b      	uxth	r3, r3
 8009ad6:	b21b      	sxth	r3, r3
 8009ad8:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8009adc:	b21c      	sxth	r4, r3
 8009ade:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009ae0:	681b      	ldr	r3, [r3, #0]
 8009ae2:	68db      	ldr	r3, [r3, #12]
 8009ae4:	899b      	ldrh	r3, [r3, #12]
 8009ae6:	b29b      	uxth	r3, r3
 8009ae8:	4618      	mov	r0, r3
 8009aea:	f7fa fc27 	bl	800433c <lwip_htons>
 8009aee:	4603      	mov	r3, r0
 8009af0:	b2db      	uxtb	r3, r3
 8009af2:	b29b      	uxth	r3, r3
 8009af4:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8009af8:	b29b      	uxth	r3, r3
 8009afa:	4618      	mov	r0, r3
 8009afc:	f7fa fc1e 	bl	800433c <lwip_htons>
 8009b00:	4603      	mov	r3, r0
 8009b02:	b21b      	sxth	r3, r3
 8009b04:	4323      	orrs	r3, r4
 8009b06:	b21a      	sxth	r2, r3
 8009b08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009b0a:	681b      	ldr	r3, [r3, #0]
 8009b0c:	68db      	ldr	r3, [r3, #12]
 8009b0e:	b292      	uxth	r2, r2
 8009b10:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 8009b12:	687b      	ldr	r3, [r7, #4]
 8009b14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b16:	b29a      	uxth	r2, r3
 8009b18:	687b      	ldr	r3, [r7, #4]
 8009b1a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009b1c:	4413      	add	r3, r2
 8009b1e:	b299      	uxth	r1, r3
 8009b20:	4b3c      	ldr	r3, [pc, #240]	; (8009c14 <tcp_receive+0xf18>)
 8009b22:	681b      	ldr	r3, [r3, #0]
 8009b24:	b29a      	uxth	r2, r3
 8009b26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009b28:	681b      	ldr	r3, [r3, #0]
 8009b2a:	1a8a      	subs	r2, r1, r2
 8009b2c:	b292      	uxth	r2, r2
 8009b2e:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 8009b30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009b32:	681b      	ldr	r3, [r3, #0]
 8009b34:	685a      	ldr	r2, [r3, #4]
 8009b36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009b38:	681b      	ldr	r3, [r3, #0]
 8009b3a:	891b      	ldrh	r3, [r3, #8]
 8009b3c:	4619      	mov	r1, r3
 8009b3e:	4610      	mov	r0, r2
 8009b40:	f7fb fdd4 	bl	80056ec <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 8009b44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009b46:	681b      	ldr	r3, [r3, #0]
 8009b48:	891c      	ldrh	r4, [r3, #8]
 8009b4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009b4c:	681b      	ldr	r3, [r3, #0]
 8009b4e:	68db      	ldr	r3, [r3, #12]
 8009b50:	899b      	ldrh	r3, [r3, #12]
 8009b52:	b29b      	uxth	r3, r3
 8009b54:	4618      	mov	r0, r3
 8009b56:	f7fa fbf1 	bl	800433c <lwip_htons>
 8009b5a:	4603      	mov	r3, r0
 8009b5c:	b2db      	uxtb	r3, r3
 8009b5e:	f003 0303 	and.w	r3, r3, #3
 8009b62:	2b00      	cmp	r3, #0
 8009b64:	d001      	beq.n	8009b6a <tcp_receive+0xe6e>
 8009b66:	2301      	movs	r3, #1
 8009b68:	e000      	b.n	8009b6c <tcp_receive+0xe70>
 8009b6a:	2300      	movs	r3, #0
 8009b6c:	4423      	add	r3, r4
 8009b6e:	b29a      	uxth	r2, r3
 8009b70:	4b2a      	ldr	r3, [pc, #168]	; (8009c1c <tcp_receive+0xf20>)
 8009b72:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8009b74:	4b29      	ldr	r3, [pc, #164]	; (8009c1c <tcp_receive+0xf20>)
 8009b76:	881b      	ldrh	r3, [r3, #0]
 8009b78:	461a      	mov	r2, r3
 8009b7a:	4b26      	ldr	r3, [pc, #152]	; (8009c14 <tcp_receive+0xf18>)
 8009b7c:	681b      	ldr	r3, [r3, #0]
 8009b7e:	441a      	add	r2, r3
 8009b80:	687b      	ldr	r3, [r7, #4]
 8009b82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b84:	6879      	ldr	r1, [r7, #4]
 8009b86:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8009b88:	440b      	add	r3, r1
 8009b8a:	429a      	cmp	r2, r3
 8009b8c:	d019      	beq.n	8009bc2 <tcp_receive+0xec6>
 8009b8e:	4b24      	ldr	r3, [pc, #144]	; (8009c20 <tcp_receive+0xf24>)
 8009b90:	f44f 62df 	mov.w	r2, #1784	; 0x6f8
 8009b94:	4923      	ldr	r1, [pc, #140]	; (8009c24 <tcp_receive+0xf28>)
 8009b96:	4824      	ldr	r0, [pc, #144]	; (8009c28 <tcp_receive+0xf2c>)
 8009b98:	f004 fdc2 	bl	800e720 <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 8009b9c:	e011      	b.n	8009bc2 <tcp_receive+0xec6>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 8009b9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009ba0:	681b      	ldr	r3, [r3, #0]
 8009ba2:	63bb      	str	r3, [r7, #56]	; 0x38
 8009ba4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009ba6:	2b00      	cmp	r3, #0
 8009ba8:	f47f aea4 	bne.w	80098f4 <tcp_receive+0xbf8>
 8009bac:	e00a      	b.n	8009bc4 <tcp_receive+0xec8>
                break;
 8009bae:	bf00      	nop
 8009bb0:	e008      	b.n	8009bc4 <tcp_receive+0xec8>
                break;
 8009bb2:	bf00      	nop
 8009bb4:	e006      	b.n	8009bc4 <tcp_receive+0xec8>
                  break;
 8009bb6:	bf00      	nop
 8009bb8:	e004      	b.n	8009bc4 <tcp_receive+0xec8>
                  break;
 8009bba:	bf00      	nop
 8009bbc:	e002      	b.n	8009bc4 <tcp_receive+0xec8>
                  break;
 8009bbe:	bf00      	nop
 8009bc0:	e000      	b.n	8009bc4 <tcp_receive+0xec8>
                break;
 8009bc2:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 8009bc4:	6878      	ldr	r0, [r7, #4]
 8009bc6:	f001 fa33 	bl	800b030 <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 8009bca:	e003      	b.n	8009bd4 <tcp_receive+0xed8>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 8009bcc:	6878      	ldr	r0, [r7, #4]
 8009bce:	f001 fa2f 	bl	800b030 <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8009bd2:	e01a      	b.n	8009c0a <tcp_receive+0xf0e>
 8009bd4:	e019      	b.n	8009c0a <tcp_receive+0xf0e>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 8009bd6:	4b0f      	ldr	r3, [pc, #60]	; (8009c14 <tcp_receive+0xf18>)
 8009bd8:	681a      	ldr	r2, [r3, #0]
 8009bda:	687b      	ldr	r3, [r7, #4]
 8009bdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009bde:	1ad3      	subs	r3, r2, r3
 8009be0:	2b00      	cmp	r3, #0
 8009be2:	db0a      	blt.n	8009bfa <tcp_receive+0xefe>
 8009be4:	4b0b      	ldr	r3, [pc, #44]	; (8009c14 <tcp_receive+0xf18>)
 8009be6:	681a      	ldr	r2, [r3, #0]
 8009be8:	687b      	ldr	r3, [r7, #4]
 8009bea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009bec:	6879      	ldr	r1, [r7, #4]
 8009bee:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8009bf0:	440b      	add	r3, r1
 8009bf2:	1ad3      	subs	r3, r2, r3
 8009bf4:	3301      	adds	r3, #1
 8009bf6:	2b00      	cmp	r3, #0
 8009bf8:	dd07      	ble.n	8009c0a <tcp_receive+0xf0e>
      tcp_ack_now(pcb);
 8009bfa:	687b      	ldr	r3, [r7, #4]
 8009bfc:	8b5b      	ldrh	r3, [r3, #26]
 8009bfe:	f043 0302 	orr.w	r3, r3, #2
 8009c02:	b29a      	uxth	r2, r3
 8009c04:	687b      	ldr	r3, [r7, #4]
 8009c06:	835a      	strh	r2, [r3, #26]
    }
  }
}
 8009c08:	e7ff      	b.n	8009c0a <tcp_receive+0xf0e>
 8009c0a:	bf00      	nop
 8009c0c:	3750      	adds	r7, #80	; 0x50
 8009c0e:	46bd      	mov	sp, r7
 8009c10:	bdb0      	pop	{r4, r5, r7, pc}
 8009c12:	bf00      	nop
 8009c14:	20008324 	.word	0x20008324
 8009c18:	20008304 	.word	0x20008304
 8009c1c:	2000832e 	.word	0x2000832e
 8009c20:	08010c04 	.word	0x08010c04
 8009c24:	08010fac 	.word	0x08010fac
 8009c28:	08010c50 	.word	0x08010c50

08009c2c <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 8009c2c:	b480      	push	{r7}
 8009c2e:	b083      	sub	sp, #12
 8009c30:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 8009c32:	4b15      	ldr	r3, [pc, #84]	; (8009c88 <tcp_get_next_optbyte+0x5c>)
 8009c34:	881b      	ldrh	r3, [r3, #0]
 8009c36:	1c5a      	adds	r2, r3, #1
 8009c38:	b291      	uxth	r1, r2
 8009c3a:	4a13      	ldr	r2, [pc, #76]	; (8009c88 <tcp_get_next_optbyte+0x5c>)
 8009c3c:	8011      	strh	r1, [r2, #0]
 8009c3e:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 8009c40:	4b12      	ldr	r3, [pc, #72]	; (8009c8c <tcp_get_next_optbyte+0x60>)
 8009c42:	681b      	ldr	r3, [r3, #0]
 8009c44:	2b00      	cmp	r3, #0
 8009c46:	d004      	beq.n	8009c52 <tcp_get_next_optbyte+0x26>
 8009c48:	4b11      	ldr	r3, [pc, #68]	; (8009c90 <tcp_get_next_optbyte+0x64>)
 8009c4a:	881b      	ldrh	r3, [r3, #0]
 8009c4c:	88fa      	ldrh	r2, [r7, #6]
 8009c4e:	429a      	cmp	r2, r3
 8009c50:	d208      	bcs.n	8009c64 <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 8009c52:	4b10      	ldr	r3, [pc, #64]	; (8009c94 <tcp_get_next_optbyte+0x68>)
 8009c54:	681b      	ldr	r3, [r3, #0]
 8009c56:	3314      	adds	r3, #20
 8009c58:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 8009c5a:	88fb      	ldrh	r3, [r7, #6]
 8009c5c:	683a      	ldr	r2, [r7, #0]
 8009c5e:	4413      	add	r3, r2
 8009c60:	781b      	ldrb	r3, [r3, #0]
 8009c62:	e00b      	b.n	8009c7c <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 8009c64:	88fb      	ldrh	r3, [r7, #6]
 8009c66:	b2da      	uxtb	r2, r3
 8009c68:	4b09      	ldr	r3, [pc, #36]	; (8009c90 <tcp_get_next_optbyte+0x64>)
 8009c6a:	881b      	ldrh	r3, [r3, #0]
 8009c6c:	b2db      	uxtb	r3, r3
 8009c6e:	1ad3      	subs	r3, r2, r3
 8009c70:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 8009c72:	4b06      	ldr	r3, [pc, #24]	; (8009c8c <tcp_get_next_optbyte+0x60>)
 8009c74:	681a      	ldr	r2, [r3, #0]
 8009c76:	797b      	ldrb	r3, [r7, #5]
 8009c78:	4413      	add	r3, r2
 8009c7a:	781b      	ldrb	r3, [r3, #0]
  }
}
 8009c7c:	4618      	mov	r0, r3
 8009c7e:	370c      	adds	r7, #12
 8009c80:	46bd      	mov	sp, r7
 8009c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c86:	4770      	bx	lr
 8009c88:	20008320 	.word	0x20008320
 8009c8c:	2000831c 	.word	0x2000831c
 8009c90:	2000831a 	.word	0x2000831a
 8009c94:	20008314 	.word	0x20008314

08009c98 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 8009c98:	b580      	push	{r7, lr}
 8009c9a:	b084      	sub	sp, #16
 8009c9c:	af00      	add	r7, sp, #0
 8009c9e:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 8009ca0:	687b      	ldr	r3, [r7, #4]
 8009ca2:	2b00      	cmp	r3, #0
 8009ca4:	d106      	bne.n	8009cb4 <tcp_parseopt+0x1c>
 8009ca6:	4b32      	ldr	r3, [pc, #200]	; (8009d70 <tcp_parseopt+0xd8>)
 8009ca8:	f240 727d 	movw	r2, #1917	; 0x77d
 8009cac:	4931      	ldr	r1, [pc, #196]	; (8009d74 <tcp_parseopt+0xdc>)
 8009cae:	4832      	ldr	r0, [pc, #200]	; (8009d78 <tcp_parseopt+0xe0>)
 8009cb0:	f004 fd36 	bl	800e720 <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 8009cb4:	4b31      	ldr	r3, [pc, #196]	; (8009d7c <tcp_parseopt+0xe4>)
 8009cb6:	881b      	ldrh	r3, [r3, #0]
 8009cb8:	2b00      	cmp	r3, #0
 8009cba:	d055      	beq.n	8009d68 <tcp_parseopt+0xd0>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8009cbc:	4b30      	ldr	r3, [pc, #192]	; (8009d80 <tcp_parseopt+0xe8>)
 8009cbe:	2200      	movs	r2, #0
 8009cc0:	801a      	strh	r2, [r3, #0]
 8009cc2:	e045      	b.n	8009d50 <tcp_parseopt+0xb8>
      u8_t opt = tcp_get_next_optbyte();
 8009cc4:	f7ff ffb2 	bl	8009c2c <tcp_get_next_optbyte>
 8009cc8:	4603      	mov	r3, r0
 8009cca:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 8009ccc:	7bfb      	ldrb	r3, [r7, #15]
 8009cce:	2b02      	cmp	r3, #2
 8009cd0:	d006      	beq.n	8009ce0 <tcp_parseopt+0x48>
 8009cd2:	2b02      	cmp	r3, #2
 8009cd4:	dc2b      	bgt.n	8009d2e <tcp_parseopt+0x96>
 8009cd6:	2b00      	cmp	r3, #0
 8009cd8:	d041      	beq.n	8009d5e <tcp_parseopt+0xc6>
 8009cda:	2b01      	cmp	r3, #1
 8009cdc:	d127      	bne.n	8009d2e <tcp_parseopt+0x96>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: EOL\n"));
          return;
        case LWIP_TCP_OPT_NOP:
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
 8009cde:	e037      	b.n	8009d50 <tcp_parseopt+0xb8>
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 8009ce0:	f7ff ffa4 	bl	8009c2c <tcp_get_next_optbyte>
 8009ce4:	4603      	mov	r3, r0
 8009ce6:	2b04      	cmp	r3, #4
 8009ce8:	d13b      	bne.n	8009d62 <tcp_parseopt+0xca>
 8009cea:	4b25      	ldr	r3, [pc, #148]	; (8009d80 <tcp_parseopt+0xe8>)
 8009cec:	881b      	ldrh	r3, [r3, #0]
 8009cee:	3301      	adds	r3, #1
 8009cf0:	4a22      	ldr	r2, [pc, #136]	; (8009d7c <tcp_parseopt+0xe4>)
 8009cf2:	8812      	ldrh	r2, [r2, #0]
 8009cf4:	4293      	cmp	r3, r2
 8009cf6:	da34      	bge.n	8009d62 <tcp_parseopt+0xca>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 8009cf8:	f7ff ff98 	bl	8009c2c <tcp_get_next_optbyte>
 8009cfc:	4603      	mov	r3, r0
 8009cfe:	b29b      	uxth	r3, r3
 8009d00:	021b      	lsls	r3, r3, #8
 8009d02:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 8009d04:	f7ff ff92 	bl	8009c2c <tcp_get_next_optbyte>
 8009d08:	4603      	mov	r3, r0
 8009d0a:	b29a      	uxth	r2, r3
 8009d0c:	89bb      	ldrh	r3, [r7, #12]
 8009d0e:	4313      	orrs	r3, r2
 8009d10:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 8009d12:	89bb      	ldrh	r3, [r7, #12]
 8009d14:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 8009d18:	d804      	bhi.n	8009d24 <tcp_parseopt+0x8c>
 8009d1a:	89bb      	ldrh	r3, [r7, #12]
 8009d1c:	2b00      	cmp	r3, #0
 8009d1e:	d001      	beq.n	8009d24 <tcp_parseopt+0x8c>
 8009d20:	89ba      	ldrh	r2, [r7, #12]
 8009d22:	e001      	b.n	8009d28 <tcp_parseopt+0x90>
 8009d24:	f44f 7206 	mov.w	r2, #536	; 0x218
 8009d28:	687b      	ldr	r3, [r7, #4]
 8009d2a:	865a      	strh	r2, [r3, #50]	; 0x32
          break;
 8009d2c:	e010      	b.n	8009d50 <tcp_parseopt+0xb8>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 8009d2e:	f7ff ff7d 	bl	8009c2c <tcp_get_next_optbyte>
 8009d32:	4603      	mov	r3, r0
 8009d34:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 8009d36:	7afb      	ldrb	r3, [r7, #11]
 8009d38:	2b01      	cmp	r3, #1
 8009d3a:	d914      	bls.n	8009d66 <tcp_parseopt+0xce>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 8009d3c:	7afb      	ldrb	r3, [r7, #11]
 8009d3e:	b29a      	uxth	r2, r3
 8009d40:	4b0f      	ldr	r3, [pc, #60]	; (8009d80 <tcp_parseopt+0xe8>)
 8009d42:	881b      	ldrh	r3, [r3, #0]
 8009d44:	4413      	add	r3, r2
 8009d46:	b29b      	uxth	r3, r3
 8009d48:	3b02      	subs	r3, #2
 8009d4a:	b29a      	uxth	r2, r3
 8009d4c:	4b0c      	ldr	r3, [pc, #48]	; (8009d80 <tcp_parseopt+0xe8>)
 8009d4e:	801a      	strh	r2, [r3, #0]
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8009d50:	4b0b      	ldr	r3, [pc, #44]	; (8009d80 <tcp_parseopt+0xe8>)
 8009d52:	881a      	ldrh	r2, [r3, #0]
 8009d54:	4b09      	ldr	r3, [pc, #36]	; (8009d7c <tcp_parseopt+0xe4>)
 8009d56:	881b      	ldrh	r3, [r3, #0]
 8009d58:	429a      	cmp	r2, r3
 8009d5a:	d3b3      	bcc.n	8009cc4 <tcp_parseopt+0x2c>
 8009d5c:	e004      	b.n	8009d68 <tcp_parseopt+0xd0>
          return;
 8009d5e:	bf00      	nop
 8009d60:	e002      	b.n	8009d68 <tcp_parseopt+0xd0>
            return;
 8009d62:	bf00      	nop
 8009d64:	e000      	b.n	8009d68 <tcp_parseopt+0xd0>
            return;
 8009d66:	bf00      	nop
      }
    }
  }
}
 8009d68:	3710      	adds	r7, #16
 8009d6a:	46bd      	mov	sp, r7
 8009d6c:	bd80      	pop	{r7, pc}
 8009d6e:	bf00      	nop
 8009d70:	08010c04 	.word	0x08010c04
 8009d74:	08011068 	.word	0x08011068
 8009d78:	08010c50 	.word	0x08010c50
 8009d7c:	20008318 	.word	0x20008318
 8009d80:	20008320 	.word	0x20008320

08009d84 <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 8009d84:	b480      	push	{r7}
 8009d86:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 8009d88:	4b05      	ldr	r3, [pc, #20]	; (8009da0 <tcp_trigger_input_pcb_close+0x1c>)
 8009d8a:	781b      	ldrb	r3, [r3, #0]
 8009d8c:	f043 0310 	orr.w	r3, r3, #16
 8009d90:	b2da      	uxtb	r2, r3
 8009d92:	4b03      	ldr	r3, [pc, #12]	; (8009da0 <tcp_trigger_input_pcb_close+0x1c>)
 8009d94:	701a      	strb	r2, [r3, #0]
}
 8009d96:	bf00      	nop
 8009d98:	46bd      	mov	sp, r7
 8009d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d9e:	4770      	bx	lr
 8009da0:	20008331 	.word	0x20008331

08009da4 <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 8009da4:	b580      	push	{r7, lr}
 8009da6:	b084      	sub	sp, #16
 8009da8:	af00      	add	r7, sp, #0
 8009daa:	60f8      	str	r0, [r7, #12]
 8009dac:	60b9      	str	r1, [r7, #8]
 8009dae:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 8009db0:	68fb      	ldr	r3, [r7, #12]
 8009db2:	2b00      	cmp	r3, #0
 8009db4:	d00a      	beq.n	8009dcc <tcp_route+0x28>
 8009db6:	68fb      	ldr	r3, [r7, #12]
 8009db8:	7a1b      	ldrb	r3, [r3, #8]
 8009dba:	2b00      	cmp	r3, #0
 8009dbc:	d006      	beq.n	8009dcc <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 8009dbe:	68fb      	ldr	r3, [r7, #12]
 8009dc0:	7a1b      	ldrb	r3, [r3, #8]
 8009dc2:	4618      	mov	r0, r3
 8009dc4:	f7fb fab8 	bl	8005338 <netif_get_by_index>
 8009dc8:	4603      	mov	r3, r0
 8009dca:	e003      	b.n	8009dd4 <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 8009dcc:	6878      	ldr	r0, [r7, #4]
 8009dce:	f003 f9cd 	bl	800d16c <ip4_route>
 8009dd2:	4603      	mov	r3, r0
  }
}
 8009dd4:	4618      	mov	r0, r3
 8009dd6:	3710      	adds	r7, #16
 8009dd8:	46bd      	mov	sp, r7
 8009dda:	bd80      	pop	{r7, pc}

08009ddc <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 8009ddc:	b590      	push	{r4, r7, lr}
 8009dde:	b087      	sub	sp, #28
 8009de0:	af00      	add	r7, sp, #0
 8009de2:	60f8      	str	r0, [r7, #12]
 8009de4:	60b9      	str	r1, [r7, #8]
 8009de6:	603b      	str	r3, [r7, #0]
 8009de8:	4613      	mov	r3, r2
 8009dea:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 8009dec:	68fb      	ldr	r3, [r7, #12]
 8009dee:	2b00      	cmp	r3, #0
 8009df0:	d105      	bne.n	8009dfe <tcp_create_segment+0x22>
 8009df2:	4b44      	ldr	r3, [pc, #272]	; (8009f04 <tcp_create_segment+0x128>)
 8009df4:	22a3      	movs	r2, #163	; 0xa3
 8009df6:	4944      	ldr	r1, [pc, #272]	; (8009f08 <tcp_create_segment+0x12c>)
 8009df8:	4844      	ldr	r0, [pc, #272]	; (8009f0c <tcp_create_segment+0x130>)
 8009dfa:	f004 fc91 	bl	800e720 <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 8009dfe:	68bb      	ldr	r3, [r7, #8]
 8009e00:	2b00      	cmp	r3, #0
 8009e02:	d105      	bne.n	8009e10 <tcp_create_segment+0x34>
 8009e04:	4b3f      	ldr	r3, [pc, #252]	; (8009f04 <tcp_create_segment+0x128>)
 8009e06:	22a4      	movs	r2, #164	; 0xa4
 8009e08:	4941      	ldr	r1, [pc, #260]	; (8009f10 <tcp_create_segment+0x134>)
 8009e0a:	4840      	ldr	r0, [pc, #256]	; (8009f0c <tcp_create_segment+0x130>)
 8009e0c:	f004 fc88 	bl	800e720 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8009e10:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8009e14:	009b      	lsls	r3, r3, #2
 8009e16:	b2db      	uxtb	r3, r3
 8009e18:	f003 0304 	and.w	r3, r3, #4
 8009e1c:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 8009e1e:	2003      	movs	r0, #3
 8009e20:	f7fa ff04 	bl	8004c2c <memp_malloc>
 8009e24:	6138      	str	r0, [r7, #16]
 8009e26:	693b      	ldr	r3, [r7, #16]
 8009e28:	2b00      	cmp	r3, #0
 8009e2a:	d104      	bne.n	8009e36 <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 8009e2c:	68b8      	ldr	r0, [r7, #8]
 8009e2e:	f7fb fde3 	bl	80059f8 <pbuf_free>
    return NULL;
 8009e32:	2300      	movs	r3, #0
 8009e34:	e061      	b.n	8009efa <tcp_create_segment+0x11e>
  }
  seg->flags = optflags;
 8009e36:	693b      	ldr	r3, [r7, #16]
 8009e38:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8009e3c:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 8009e3e:	693b      	ldr	r3, [r7, #16]
 8009e40:	2200      	movs	r2, #0
 8009e42:	601a      	str	r2, [r3, #0]
  seg->p = p;
 8009e44:	693b      	ldr	r3, [r7, #16]
 8009e46:	68ba      	ldr	r2, [r7, #8]
 8009e48:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 8009e4a:	68bb      	ldr	r3, [r7, #8]
 8009e4c:	891a      	ldrh	r2, [r3, #8]
 8009e4e:	7dfb      	ldrb	r3, [r7, #23]
 8009e50:	b29b      	uxth	r3, r3
 8009e52:	429a      	cmp	r2, r3
 8009e54:	d205      	bcs.n	8009e62 <tcp_create_segment+0x86>
 8009e56:	4b2b      	ldr	r3, [pc, #172]	; (8009f04 <tcp_create_segment+0x128>)
 8009e58:	22b0      	movs	r2, #176	; 0xb0
 8009e5a:	492e      	ldr	r1, [pc, #184]	; (8009f14 <tcp_create_segment+0x138>)
 8009e5c:	482b      	ldr	r0, [pc, #172]	; (8009f0c <tcp_create_segment+0x130>)
 8009e5e:	f004 fc5f 	bl	800e720 <iprintf>
  seg->len = p->tot_len - optlen;
 8009e62:	68bb      	ldr	r3, [r7, #8]
 8009e64:	891a      	ldrh	r2, [r3, #8]
 8009e66:	7dfb      	ldrb	r3, [r7, #23]
 8009e68:	b29b      	uxth	r3, r3
 8009e6a:	1ad3      	subs	r3, r2, r3
 8009e6c:	b29a      	uxth	r2, r3
 8009e6e:	693b      	ldr	r3, [r7, #16]
 8009e70:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 8009e72:	2114      	movs	r1, #20
 8009e74:	68b8      	ldr	r0, [r7, #8]
 8009e76:	f7fb fd29 	bl	80058cc <pbuf_add_header>
 8009e7a:	4603      	mov	r3, r0
 8009e7c:	2b00      	cmp	r3, #0
 8009e7e:	d004      	beq.n	8009e8a <tcp_create_segment+0xae>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 8009e80:	6938      	ldr	r0, [r7, #16]
 8009e82:	f7fd f8ce 	bl	8007022 <tcp_seg_free>
    return NULL;
 8009e86:	2300      	movs	r3, #0
 8009e88:	e037      	b.n	8009efa <tcp_create_segment+0x11e>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 8009e8a:	693b      	ldr	r3, [r7, #16]
 8009e8c:	685b      	ldr	r3, [r3, #4]
 8009e8e:	685a      	ldr	r2, [r3, #4]
 8009e90:	693b      	ldr	r3, [r7, #16]
 8009e92:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 8009e94:	68fb      	ldr	r3, [r7, #12]
 8009e96:	8ada      	ldrh	r2, [r3, #22]
 8009e98:	693b      	ldr	r3, [r7, #16]
 8009e9a:	68dc      	ldr	r4, [r3, #12]
 8009e9c:	4610      	mov	r0, r2
 8009e9e:	f7fa fa4d 	bl	800433c <lwip_htons>
 8009ea2:	4603      	mov	r3, r0
 8009ea4:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 8009ea6:	68fb      	ldr	r3, [r7, #12]
 8009ea8:	8b1a      	ldrh	r2, [r3, #24]
 8009eaa:	693b      	ldr	r3, [r7, #16]
 8009eac:	68dc      	ldr	r4, [r3, #12]
 8009eae:	4610      	mov	r0, r2
 8009eb0:	f7fa fa44 	bl	800433c <lwip_htons>
 8009eb4:	4603      	mov	r3, r0
 8009eb6:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 8009eb8:	693b      	ldr	r3, [r7, #16]
 8009eba:	68dc      	ldr	r4, [r3, #12]
 8009ebc:	6838      	ldr	r0, [r7, #0]
 8009ebe:	f7fa fa52 	bl	8004366 <lwip_htonl>
 8009ec2:	4603      	mov	r3, r0
 8009ec4:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 8009ec6:	7dfb      	ldrb	r3, [r7, #23]
 8009ec8:	089b      	lsrs	r3, r3, #2
 8009eca:	b2db      	uxtb	r3, r3
 8009ecc:	b29b      	uxth	r3, r3
 8009ece:	3305      	adds	r3, #5
 8009ed0:	b29b      	uxth	r3, r3
 8009ed2:	031b      	lsls	r3, r3, #12
 8009ed4:	b29a      	uxth	r2, r3
 8009ed6:	79fb      	ldrb	r3, [r7, #7]
 8009ed8:	b29b      	uxth	r3, r3
 8009eda:	4313      	orrs	r3, r2
 8009edc:	b29a      	uxth	r2, r3
 8009ede:	693b      	ldr	r3, [r7, #16]
 8009ee0:	68dc      	ldr	r4, [r3, #12]
 8009ee2:	4610      	mov	r0, r2
 8009ee4:	f7fa fa2a 	bl	800433c <lwip_htons>
 8009ee8:	4603      	mov	r3, r0
 8009eea:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 8009eec:	693b      	ldr	r3, [r7, #16]
 8009eee:	68db      	ldr	r3, [r3, #12]
 8009ef0:	2200      	movs	r2, #0
 8009ef2:	749a      	strb	r2, [r3, #18]
 8009ef4:	2200      	movs	r2, #0
 8009ef6:	74da      	strb	r2, [r3, #19]
  return seg;
 8009ef8:	693b      	ldr	r3, [r7, #16]
}
 8009efa:	4618      	mov	r0, r3
 8009efc:	371c      	adds	r7, #28
 8009efe:	46bd      	mov	sp, r7
 8009f00:	bd90      	pop	{r4, r7, pc}
 8009f02:	bf00      	nop
 8009f04:	08011084 	.word	0x08011084
 8009f08:	080110b8 	.word	0x080110b8
 8009f0c:	080110d8 	.word	0x080110d8
 8009f10:	08011100 	.word	0x08011100
 8009f14:	08011124 	.word	0x08011124

08009f18 <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 8009f18:	b590      	push	{r4, r7, lr}
 8009f1a:	b08b      	sub	sp, #44	; 0x2c
 8009f1c:	af02      	add	r7, sp, #8
 8009f1e:	6078      	str	r0, [r7, #4]
 8009f20:	460b      	mov	r3, r1
 8009f22:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 8009f24:	2300      	movs	r3, #0
 8009f26:	61fb      	str	r3, [r7, #28]
 8009f28:	2300      	movs	r3, #0
 8009f2a:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 8009f2c:	2300      	movs	r3, #0
 8009f2e:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 8009f30:	687b      	ldr	r3, [r7, #4]
 8009f32:	2b00      	cmp	r3, #0
 8009f34:	d106      	bne.n	8009f44 <tcp_split_unsent_seg+0x2c>
 8009f36:	4b95      	ldr	r3, [pc, #596]	; (800a18c <tcp_split_unsent_seg+0x274>)
 8009f38:	f240 324b 	movw	r2, #843	; 0x34b
 8009f3c:	4994      	ldr	r1, [pc, #592]	; (800a190 <tcp_split_unsent_seg+0x278>)
 8009f3e:	4895      	ldr	r0, [pc, #596]	; (800a194 <tcp_split_unsent_seg+0x27c>)
 8009f40:	f004 fbee 	bl	800e720 <iprintf>

  useg = pcb->unsent;
 8009f44:	687b      	ldr	r3, [r7, #4]
 8009f46:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009f48:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 8009f4a:	697b      	ldr	r3, [r7, #20]
 8009f4c:	2b00      	cmp	r3, #0
 8009f4e:	d102      	bne.n	8009f56 <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 8009f50:	f04f 33ff 	mov.w	r3, #4294967295
 8009f54:	e116      	b.n	800a184 <tcp_split_unsent_seg+0x26c>
  }

  if (split == 0) {
 8009f56:	887b      	ldrh	r3, [r7, #2]
 8009f58:	2b00      	cmp	r3, #0
 8009f5a:	d109      	bne.n	8009f70 <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 8009f5c:	4b8b      	ldr	r3, [pc, #556]	; (800a18c <tcp_split_unsent_seg+0x274>)
 8009f5e:	f240 3253 	movw	r2, #851	; 0x353
 8009f62:	498d      	ldr	r1, [pc, #564]	; (800a198 <tcp_split_unsent_seg+0x280>)
 8009f64:	488b      	ldr	r0, [pc, #556]	; (800a194 <tcp_split_unsent_seg+0x27c>)
 8009f66:	f004 fbdb 	bl	800e720 <iprintf>
    return ERR_VAL;
 8009f6a:	f06f 0305 	mvn.w	r3, #5
 8009f6e:	e109      	b.n	800a184 <tcp_split_unsent_seg+0x26c>
  }

  if (useg->len <= split) {
 8009f70:	697b      	ldr	r3, [r7, #20]
 8009f72:	891b      	ldrh	r3, [r3, #8]
 8009f74:	887a      	ldrh	r2, [r7, #2]
 8009f76:	429a      	cmp	r2, r3
 8009f78:	d301      	bcc.n	8009f7e <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 8009f7a:	2300      	movs	r3, #0
 8009f7c:	e102      	b.n	800a184 <tcp_split_unsent_seg+0x26c>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 8009f7e:	687b      	ldr	r3, [r7, #4]
 8009f80:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8009f82:	887a      	ldrh	r2, [r7, #2]
 8009f84:	429a      	cmp	r2, r3
 8009f86:	d906      	bls.n	8009f96 <tcp_split_unsent_seg+0x7e>
 8009f88:	4b80      	ldr	r3, [pc, #512]	; (800a18c <tcp_split_unsent_seg+0x274>)
 8009f8a:	f240 325b 	movw	r2, #859	; 0x35b
 8009f8e:	4983      	ldr	r1, [pc, #524]	; (800a19c <tcp_split_unsent_seg+0x284>)
 8009f90:	4880      	ldr	r0, [pc, #512]	; (800a194 <tcp_split_unsent_seg+0x27c>)
 8009f92:	f004 fbc5 	bl	800e720 <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 8009f96:	697b      	ldr	r3, [r7, #20]
 8009f98:	891b      	ldrh	r3, [r3, #8]
 8009f9a:	2b00      	cmp	r3, #0
 8009f9c:	d106      	bne.n	8009fac <tcp_split_unsent_seg+0x94>
 8009f9e:	4b7b      	ldr	r3, [pc, #492]	; (800a18c <tcp_split_unsent_seg+0x274>)
 8009fa0:	f44f 7257 	mov.w	r2, #860	; 0x35c
 8009fa4:	497e      	ldr	r1, [pc, #504]	; (800a1a0 <tcp_split_unsent_seg+0x288>)
 8009fa6:	487b      	ldr	r0, [pc, #492]	; (800a194 <tcp_split_unsent_seg+0x27c>)
 8009fa8:	f004 fbba 	bl	800e720 <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 8009fac:	697b      	ldr	r3, [r7, #20]
 8009fae:	7a9b      	ldrb	r3, [r3, #10]
 8009fb0:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 8009fb2:	7bfb      	ldrb	r3, [r7, #15]
 8009fb4:	009b      	lsls	r3, r3, #2
 8009fb6:	b2db      	uxtb	r3, r3
 8009fb8:	f003 0304 	and.w	r3, r3, #4
 8009fbc:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 8009fbe:	697b      	ldr	r3, [r7, #20]
 8009fc0:	891a      	ldrh	r2, [r3, #8]
 8009fc2:	887b      	ldrh	r3, [r7, #2]
 8009fc4:	1ad3      	subs	r3, r2, r3
 8009fc6:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 8009fc8:	7bbb      	ldrb	r3, [r7, #14]
 8009fca:	b29a      	uxth	r2, r3
 8009fcc:	89bb      	ldrh	r3, [r7, #12]
 8009fce:	4413      	add	r3, r2
 8009fd0:	b29b      	uxth	r3, r3
 8009fd2:	f44f 7220 	mov.w	r2, #640	; 0x280
 8009fd6:	4619      	mov	r1, r3
 8009fd8:	2036      	movs	r0, #54	; 0x36
 8009fda:	f7fb fa29 	bl	8005430 <pbuf_alloc>
 8009fde:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8009fe0:	693b      	ldr	r3, [r7, #16]
 8009fe2:	2b00      	cmp	r3, #0
 8009fe4:	f000 80b7 	beq.w	800a156 <tcp_split_unsent_seg+0x23e>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 8009fe8:	697b      	ldr	r3, [r7, #20]
 8009fea:	685b      	ldr	r3, [r3, #4]
 8009fec:	891a      	ldrh	r2, [r3, #8]
 8009fee:	697b      	ldr	r3, [r7, #20]
 8009ff0:	891b      	ldrh	r3, [r3, #8]
 8009ff2:	1ad3      	subs	r3, r2, r3
 8009ff4:	b29a      	uxth	r2, r3
 8009ff6:	887b      	ldrh	r3, [r7, #2]
 8009ff8:	4413      	add	r3, r2
 8009ffa:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 8009ffc:	697b      	ldr	r3, [r7, #20]
 8009ffe:	6858      	ldr	r0, [r3, #4]
 800a000:	693b      	ldr	r3, [r7, #16]
 800a002:	685a      	ldr	r2, [r3, #4]
 800a004:	7bbb      	ldrb	r3, [r7, #14]
 800a006:	18d1      	adds	r1, r2, r3
 800a008:	897b      	ldrh	r3, [r7, #10]
 800a00a:	89ba      	ldrh	r2, [r7, #12]
 800a00c:	f7fb feee 	bl	8005dec <pbuf_copy_partial>
 800a010:	4603      	mov	r3, r0
 800a012:	461a      	mov	r2, r3
 800a014:	89bb      	ldrh	r3, [r7, #12]
 800a016:	4293      	cmp	r3, r2
 800a018:	f040 809f 	bne.w	800a15a <tcp_split_unsent_seg+0x242>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 800a01c:	697b      	ldr	r3, [r7, #20]
 800a01e:	68db      	ldr	r3, [r3, #12]
 800a020:	899b      	ldrh	r3, [r3, #12]
 800a022:	b29b      	uxth	r3, r3
 800a024:	4618      	mov	r0, r3
 800a026:	f7fa f989 	bl	800433c <lwip_htons>
 800a02a:	4603      	mov	r3, r0
 800a02c:	b2db      	uxtb	r3, r3
 800a02e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a032:	76fb      	strb	r3, [r7, #27]
  remainder_flags = 0; /* ACK added in tcp_output() */
 800a034:	2300      	movs	r3, #0
 800a036:	76bb      	strb	r3, [r7, #26]

  if (split_flags & TCP_PSH) {
 800a038:	7efb      	ldrb	r3, [r7, #27]
 800a03a:	f003 0308 	and.w	r3, r3, #8
 800a03e:	2b00      	cmp	r3, #0
 800a040:	d007      	beq.n	800a052 <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 800a042:	7efb      	ldrb	r3, [r7, #27]
 800a044:	f023 0308 	bic.w	r3, r3, #8
 800a048:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_PSH;
 800a04a:	7ebb      	ldrb	r3, [r7, #26]
 800a04c:	f043 0308 	orr.w	r3, r3, #8
 800a050:	76bb      	strb	r3, [r7, #26]
  }
  if (split_flags & TCP_FIN) {
 800a052:	7efb      	ldrb	r3, [r7, #27]
 800a054:	f003 0301 	and.w	r3, r3, #1
 800a058:	2b00      	cmp	r3, #0
 800a05a:	d007      	beq.n	800a06c <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 800a05c:	7efb      	ldrb	r3, [r7, #27]
 800a05e:	f023 0301 	bic.w	r3, r3, #1
 800a062:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_FIN;
 800a064:	7ebb      	ldrb	r3, [r7, #26]
 800a066:	f043 0301 	orr.w	r3, r3, #1
 800a06a:	76bb      	strb	r3, [r7, #26]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 800a06c:	697b      	ldr	r3, [r7, #20]
 800a06e:	68db      	ldr	r3, [r3, #12]
 800a070:	685b      	ldr	r3, [r3, #4]
 800a072:	4618      	mov	r0, r3
 800a074:	f7fa f977 	bl	8004366 <lwip_htonl>
 800a078:	4602      	mov	r2, r0
 800a07a:	887b      	ldrh	r3, [r7, #2]
 800a07c:	18d1      	adds	r1, r2, r3
 800a07e:	7eba      	ldrb	r2, [r7, #26]
 800a080:	7bfb      	ldrb	r3, [r7, #15]
 800a082:	9300      	str	r3, [sp, #0]
 800a084:	460b      	mov	r3, r1
 800a086:	6939      	ldr	r1, [r7, #16]
 800a088:	6878      	ldr	r0, [r7, #4]
 800a08a:	f7ff fea7 	bl	8009ddc <tcp_create_segment>
 800a08e:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 800a090:	69fb      	ldr	r3, [r7, #28]
 800a092:	2b00      	cmp	r3, #0
 800a094:	d063      	beq.n	800a15e <tcp_split_unsent_seg+0x246>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 800a096:	697b      	ldr	r3, [r7, #20]
 800a098:	685b      	ldr	r3, [r3, #4]
 800a09a:	4618      	mov	r0, r3
 800a09c:	f7fb fd34 	bl	8005b08 <pbuf_clen>
 800a0a0:	4603      	mov	r3, r0
 800a0a2:	461a      	mov	r2, r3
 800a0a4:	687b      	ldr	r3, [r7, #4]
 800a0a6:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800a0aa:	1a9b      	subs	r3, r3, r2
 800a0ac:	b29a      	uxth	r2, r3
 800a0ae:	687b      	ldr	r3, [r7, #4]
 800a0b0:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 800a0b4:	697b      	ldr	r3, [r7, #20]
 800a0b6:	6858      	ldr	r0, [r3, #4]
 800a0b8:	697b      	ldr	r3, [r7, #20]
 800a0ba:	685b      	ldr	r3, [r3, #4]
 800a0bc:	891a      	ldrh	r2, [r3, #8]
 800a0be:	89bb      	ldrh	r3, [r7, #12]
 800a0c0:	1ad3      	subs	r3, r2, r3
 800a0c2:	b29b      	uxth	r3, r3
 800a0c4:	4619      	mov	r1, r3
 800a0c6:	f7fb fb11 	bl	80056ec <pbuf_realloc>
  useg->len -= remainder;
 800a0ca:	697b      	ldr	r3, [r7, #20]
 800a0cc:	891a      	ldrh	r2, [r3, #8]
 800a0ce:	89bb      	ldrh	r3, [r7, #12]
 800a0d0:	1ad3      	subs	r3, r2, r3
 800a0d2:	b29a      	uxth	r2, r3
 800a0d4:	697b      	ldr	r3, [r7, #20]
 800a0d6:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 800a0d8:	697b      	ldr	r3, [r7, #20]
 800a0da:	68db      	ldr	r3, [r3, #12]
 800a0dc:	899b      	ldrh	r3, [r3, #12]
 800a0de:	b29c      	uxth	r4, r3
 800a0e0:	7efb      	ldrb	r3, [r7, #27]
 800a0e2:	b29b      	uxth	r3, r3
 800a0e4:	4618      	mov	r0, r3
 800a0e6:	f7fa f929 	bl	800433c <lwip_htons>
 800a0ea:	4603      	mov	r3, r0
 800a0ec:	461a      	mov	r2, r3
 800a0ee:	697b      	ldr	r3, [r7, #20]
 800a0f0:	68db      	ldr	r3, [r3, #12]
 800a0f2:	4322      	orrs	r2, r4
 800a0f4:	b292      	uxth	r2, r2
 800a0f6:	819a      	strh	r2, [r3, #12]
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 800a0f8:	697b      	ldr	r3, [r7, #20]
 800a0fa:	685b      	ldr	r3, [r3, #4]
 800a0fc:	4618      	mov	r0, r3
 800a0fe:	f7fb fd03 	bl	8005b08 <pbuf_clen>
 800a102:	4603      	mov	r3, r0
 800a104:	461a      	mov	r2, r3
 800a106:	687b      	ldr	r3, [r7, #4]
 800a108:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800a10c:	4413      	add	r3, r2
 800a10e:	b29a      	uxth	r2, r3
 800a110:	687b      	ldr	r3, [r7, #4]
 800a112:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 800a116:	69fb      	ldr	r3, [r7, #28]
 800a118:	685b      	ldr	r3, [r3, #4]
 800a11a:	4618      	mov	r0, r3
 800a11c:	f7fb fcf4 	bl	8005b08 <pbuf_clen>
 800a120:	4603      	mov	r3, r0
 800a122:	461a      	mov	r2, r3
 800a124:	687b      	ldr	r3, [r7, #4]
 800a126:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800a12a:	4413      	add	r3, r2
 800a12c:	b29a      	uxth	r2, r3
 800a12e:	687b      	ldr	r3, [r7, #4]
 800a130:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 800a134:	697b      	ldr	r3, [r7, #20]
 800a136:	681a      	ldr	r2, [r3, #0]
 800a138:	69fb      	ldr	r3, [r7, #28]
 800a13a:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 800a13c:	697b      	ldr	r3, [r7, #20]
 800a13e:	69fa      	ldr	r2, [r7, #28]
 800a140:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 800a142:	69fb      	ldr	r3, [r7, #28]
 800a144:	681b      	ldr	r3, [r3, #0]
 800a146:	2b00      	cmp	r3, #0
 800a148:	d103      	bne.n	800a152 <tcp_split_unsent_seg+0x23a>
    pcb->unsent_oversize = 0;
 800a14a:	687b      	ldr	r3, [r7, #4]
 800a14c:	2200      	movs	r2, #0
 800a14e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 800a152:	2300      	movs	r3, #0
 800a154:	e016      	b.n	800a184 <tcp_split_unsent_seg+0x26c>
    goto memerr;
 800a156:	bf00      	nop
 800a158:	e002      	b.n	800a160 <tcp_split_unsent_seg+0x248>
    goto memerr;
 800a15a:	bf00      	nop
 800a15c:	e000      	b.n	800a160 <tcp_split_unsent_seg+0x248>
    goto memerr;
 800a15e:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 800a160:	69fb      	ldr	r3, [r7, #28]
 800a162:	2b00      	cmp	r3, #0
 800a164:	d006      	beq.n	800a174 <tcp_split_unsent_seg+0x25c>
 800a166:	4b09      	ldr	r3, [pc, #36]	; (800a18c <tcp_split_unsent_seg+0x274>)
 800a168:	f44f 7276 	mov.w	r2, #984	; 0x3d8
 800a16c:	490d      	ldr	r1, [pc, #52]	; (800a1a4 <tcp_split_unsent_seg+0x28c>)
 800a16e:	4809      	ldr	r0, [pc, #36]	; (800a194 <tcp_split_unsent_seg+0x27c>)
 800a170:	f004 fad6 	bl	800e720 <iprintf>
  if (p != NULL) {
 800a174:	693b      	ldr	r3, [r7, #16]
 800a176:	2b00      	cmp	r3, #0
 800a178:	d002      	beq.n	800a180 <tcp_split_unsent_seg+0x268>
    pbuf_free(p);
 800a17a:	6938      	ldr	r0, [r7, #16]
 800a17c:	f7fb fc3c 	bl	80059f8 <pbuf_free>
  }

  return ERR_MEM;
 800a180:	f04f 33ff 	mov.w	r3, #4294967295
}
 800a184:	4618      	mov	r0, r3
 800a186:	3724      	adds	r7, #36	; 0x24
 800a188:	46bd      	mov	sp, r7
 800a18a:	bd90      	pop	{r4, r7, pc}
 800a18c:	08011084 	.word	0x08011084
 800a190:	08011418 	.word	0x08011418
 800a194:	080110d8 	.word	0x080110d8
 800a198:	0801143c 	.word	0x0801143c
 800a19c:	08011460 	.word	0x08011460
 800a1a0:	08011470 	.word	0x08011470
 800a1a4:	08011480 	.word	0x08011480

0800a1a8 <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 800a1a8:	b590      	push	{r4, r7, lr}
 800a1aa:	b085      	sub	sp, #20
 800a1ac:	af00      	add	r7, sp, #0
 800a1ae:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 800a1b0:	687b      	ldr	r3, [r7, #4]
 800a1b2:	2b00      	cmp	r3, #0
 800a1b4:	d106      	bne.n	800a1c4 <tcp_send_fin+0x1c>
 800a1b6:	4b21      	ldr	r3, [pc, #132]	; (800a23c <tcp_send_fin+0x94>)
 800a1b8:	f240 32eb 	movw	r2, #1003	; 0x3eb
 800a1bc:	4920      	ldr	r1, [pc, #128]	; (800a240 <tcp_send_fin+0x98>)
 800a1be:	4821      	ldr	r0, [pc, #132]	; (800a244 <tcp_send_fin+0x9c>)
 800a1c0:	f004 faae 	bl	800e720 <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 800a1c4:	687b      	ldr	r3, [r7, #4]
 800a1c6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a1c8:	2b00      	cmp	r3, #0
 800a1ca:	d02e      	beq.n	800a22a <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800a1cc:	687b      	ldr	r3, [r7, #4]
 800a1ce:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a1d0:	60fb      	str	r3, [r7, #12]
 800a1d2:	e002      	b.n	800a1da <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 800a1d4:	68fb      	ldr	r3, [r7, #12]
 800a1d6:	681b      	ldr	r3, [r3, #0]
 800a1d8:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800a1da:	68fb      	ldr	r3, [r7, #12]
 800a1dc:	681b      	ldr	r3, [r3, #0]
 800a1de:	2b00      	cmp	r3, #0
 800a1e0:	d1f8      	bne.n	800a1d4 <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 800a1e2:	68fb      	ldr	r3, [r7, #12]
 800a1e4:	68db      	ldr	r3, [r3, #12]
 800a1e6:	899b      	ldrh	r3, [r3, #12]
 800a1e8:	b29b      	uxth	r3, r3
 800a1ea:	4618      	mov	r0, r3
 800a1ec:	f7fa f8a6 	bl	800433c <lwip_htons>
 800a1f0:	4603      	mov	r3, r0
 800a1f2:	b2db      	uxtb	r3, r3
 800a1f4:	f003 0307 	and.w	r3, r3, #7
 800a1f8:	2b00      	cmp	r3, #0
 800a1fa:	d116      	bne.n	800a22a <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 800a1fc:	68fb      	ldr	r3, [r7, #12]
 800a1fe:	68db      	ldr	r3, [r3, #12]
 800a200:	899b      	ldrh	r3, [r3, #12]
 800a202:	b29c      	uxth	r4, r3
 800a204:	2001      	movs	r0, #1
 800a206:	f7fa f899 	bl	800433c <lwip_htons>
 800a20a:	4603      	mov	r3, r0
 800a20c:	461a      	mov	r2, r3
 800a20e:	68fb      	ldr	r3, [r7, #12]
 800a210:	68db      	ldr	r3, [r3, #12]
 800a212:	4322      	orrs	r2, r4
 800a214:	b292      	uxth	r2, r2
 800a216:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 800a218:	687b      	ldr	r3, [r7, #4]
 800a21a:	8b5b      	ldrh	r3, [r3, #26]
 800a21c:	f043 0320 	orr.w	r3, r3, #32
 800a220:	b29a      	uxth	r2, r3
 800a222:	687b      	ldr	r3, [r7, #4]
 800a224:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 800a226:	2300      	movs	r3, #0
 800a228:	e004      	b.n	800a234 <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 800a22a:	2101      	movs	r1, #1
 800a22c:	6878      	ldr	r0, [r7, #4]
 800a22e:	f000 f80b 	bl	800a248 <tcp_enqueue_flags>
 800a232:	4603      	mov	r3, r0
}
 800a234:	4618      	mov	r0, r3
 800a236:	3714      	adds	r7, #20
 800a238:	46bd      	mov	sp, r7
 800a23a:	bd90      	pop	{r4, r7, pc}
 800a23c:	08011084 	.word	0x08011084
 800a240:	0801148c 	.word	0x0801148c
 800a244:	080110d8 	.word	0x080110d8

0800a248 <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 800a248:	b580      	push	{r7, lr}
 800a24a:	b08a      	sub	sp, #40	; 0x28
 800a24c:	af02      	add	r7, sp, #8
 800a24e:	6078      	str	r0, [r7, #4]
 800a250:	460b      	mov	r3, r1
 800a252:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 800a254:	2300      	movs	r3, #0
 800a256:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 800a258:	2300      	movs	r3, #0
 800a25a:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 800a25c:	78fb      	ldrb	r3, [r7, #3]
 800a25e:	f003 0303 	and.w	r3, r3, #3
 800a262:	2b00      	cmp	r3, #0
 800a264:	d106      	bne.n	800a274 <tcp_enqueue_flags+0x2c>
 800a266:	4b67      	ldr	r3, [pc, #412]	; (800a404 <tcp_enqueue_flags+0x1bc>)
 800a268:	f240 4211 	movw	r2, #1041	; 0x411
 800a26c:	4966      	ldr	r1, [pc, #408]	; (800a408 <tcp_enqueue_flags+0x1c0>)
 800a26e:	4867      	ldr	r0, [pc, #412]	; (800a40c <tcp_enqueue_flags+0x1c4>)
 800a270:	f004 fa56 	bl	800e720 <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 800a274:	687b      	ldr	r3, [r7, #4]
 800a276:	2b00      	cmp	r3, #0
 800a278:	d106      	bne.n	800a288 <tcp_enqueue_flags+0x40>
 800a27a:	4b62      	ldr	r3, [pc, #392]	; (800a404 <tcp_enqueue_flags+0x1bc>)
 800a27c:	f240 4213 	movw	r2, #1043	; 0x413
 800a280:	4963      	ldr	r1, [pc, #396]	; (800a410 <tcp_enqueue_flags+0x1c8>)
 800a282:	4862      	ldr	r0, [pc, #392]	; (800a40c <tcp_enqueue_flags+0x1c4>)
 800a284:	f004 fa4c 	bl	800e720 <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 800a288:	78fb      	ldrb	r3, [r7, #3]
 800a28a:	f003 0302 	and.w	r3, r3, #2
 800a28e:	2b00      	cmp	r3, #0
 800a290:	d001      	beq.n	800a296 <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 800a292:	2301      	movs	r3, #1
 800a294:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800a296:	7ffb      	ldrb	r3, [r7, #31]
 800a298:	009b      	lsls	r3, r3, #2
 800a29a:	b2db      	uxtb	r3, r3
 800a29c:	f003 0304 	and.w	r3, r3, #4
 800a2a0:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 800a2a2:	7dfb      	ldrb	r3, [r7, #23]
 800a2a4:	b29b      	uxth	r3, r3
 800a2a6:	f44f 7220 	mov.w	r2, #640	; 0x280
 800a2aa:	4619      	mov	r1, r3
 800a2ac:	2036      	movs	r0, #54	; 0x36
 800a2ae:	f7fb f8bf 	bl	8005430 <pbuf_alloc>
 800a2b2:	6138      	str	r0, [r7, #16]
 800a2b4:	693b      	ldr	r3, [r7, #16]
 800a2b6:	2b00      	cmp	r3, #0
 800a2b8:	d109      	bne.n	800a2ce <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800a2ba:	687b      	ldr	r3, [r7, #4]
 800a2bc:	8b5b      	ldrh	r3, [r3, #26]
 800a2be:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a2c2:	b29a      	uxth	r2, r3
 800a2c4:	687b      	ldr	r3, [r7, #4]
 800a2c6:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 800a2c8:	f04f 33ff 	mov.w	r3, #4294967295
 800a2cc:	e095      	b.n	800a3fa <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 800a2ce:	693b      	ldr	r3, [r7, #16]
 800a2d0:	895a      	ldrh	r2, [r3, #10]
 800a2d2:	7dfb      	ldrb	r3, [r7, #23]
 800a2d4:	b29b      	uxth	r3, r3
 800a2d6:	429a      	cmp	r2, r3
 800a2d8:	d206      	bcs.n	800a2e8 <tcp_enqueue_flags+0xa0>
 800a2da:	4b4a      	ldr	r3, [pc, #296]	; (800a404 <tcp_enqueue_flags+0x1bc>)
 800a2dc:	f240 4239 	movw	r2, #1081	; 0x439
 800a2e0:	494c      	ldr	r1, [pc, #304]	; (800a414 <tcp_enqueue_flags+0x1cc>)
 800a2e2:	484a      	ldr	r0, [pc, #296]	; (800a40c <tcp_enqueue_flags+0x1c4>)
 800a2e4:	f004 fa1c 	bl	800e720 <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 800a2e8:	687b      	ldr	r3, [r7, #4]
 800a2ea:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 800a2ec:	78fa      	ldrb	r2, [r7, #3]
 800a2ee:	7ffb      	ldrb	r3, [r7, #31]
 800a2f0:	9300      	str	r3, [sp, #0]
 800a2f2:	460b      	mov	r3, r1
 800a2f4:	6939      	ldr	r1, [r7, #16]
 800a2f6:	6878      	ldr	r0, [r7, #4]
 800a2f8:	f7ff fd70 	bl	8009ddc <tcp_create_segment>
 800a2fc:	60f8      	str	r0, [r7, #12]
 800a2fe:	68fb      	ldr	r3, [r7, #12]
 800a300:	2b00      	cmp	r3, #0
 800a302:	d109      	bne.n	800a318 <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800a304:	687b      	ldr	r3, [r7, #4]
 800a306:	8b5b      	ldrh	r3, [r3, #26]
 800a308:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a30c:	b29a      	uxth	r2, r3
 800a30e:	687b      	ldr	r3, [r7, #4]
 800a310:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 800a312:	f04f 33ff 	mov.w	r3, #4294967295
 800a316:	e070      	b.n	800a3fa <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 800a318:	68fb      	ldr	r3, [r7, #12]
 800a31a:	68db      	ldr	r3, [r3, #12]
 800a31c:	f003 0303 	and.w	r3, r3, #3
 800a320:	2b00      	cmp	r3, #0
 800a322:	d006      	beq.n	800a332 <tcp_enqueue_flags+0xea>
 800a324:	4b37      	ldr	r3, [pc, #220]	; (800a404 <tcp_enqueue_flags+0x1bc>)
 800a326:	f240 4242 	movw	r2, #1090	; 0x442
 800a32a:	493b      	ldr	r1, [pc, #236]	; (800a418 <tcp_enqueue_flags+0x1d0>)
 800a32c:	4837      	ldr	r0, [pc, #220]	; (800a40c <tcp_enqueue_flags+0x1c4>)
 800a32e:	f004 f9f7 	bl	800e720 <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 800a332:	68fb      	ldr	r3, [r7, #12]
 800a334:	891b      	ldrh	r3, [r3, #8]
 800a336:	2b00      	cmp	r3, #0
 800a338:	d006      	beq.n	800a348 <tcp_enqueue_flags+0x100>
 800a33a:	4b32      	ldr	r3, [pc, #200]	; (800a404 <tcp_enqueue_flags+0x1bc>)
 800a33c:	f240 4243 	movw	r2, #1091	; 0x443
 800a340:	4936      	ldr	r1, [pc, #216]	; (800a41c <tcp_enqueue_flags+0x1d4>)
 800a342:	4832      	ldr	r0, [pc, #200]	; (800a40c <tcp_enqueue_flags+0x1c4>)
 800a344:	f004 f9ec 	bl	800e720 <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 800a348:	687b      	ldr	r3, [r7, #4]
 800a34a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a34c:	2b00      	cmp	r3, #0
 800a34e:	d103      	bne.n	800a358 <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 800a350:	687b      	ldr	r3, [r7, #4]
 800a352:	68fa      	ldr	r2, [r7, #12]
 800a354:	66da      	str	r2, [r3, #108]	; 0x6c
 800a356:	e00d      	b.n	800a374 <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 800a358:	687b      	ldr	r3, [r7, #4]
 800a35a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a35c:	61bb      	str	r3, [r7, #24]
 800a35e:	e002      	b.n	800a366 <tcp_enqueue_flags+0x11e>
 800a360:	69bb      	ldr	r3, [r7, #24]
 800a362:	681b      	ldr	r3, [r3, #0]
 800a364:	61bb      	str	r3, [r7, #24]
 800a366:	69bb      	ldr	r3, [r7, #24]
 800a368:	681b      	ldr	r3, [r3, #0]
 800a36a:	2b00      	cmp	r3, #0
 800a36c:	d1f8      	bne.n	800a360 <tcp_enqueue_flags+0x118>
    useg->next = seg;
 800a36e:	69bb      	ldr	r3, [r7, #24]
 800a370:	68fa      	ldr	r2, [r7, #12]
 800a372:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 800a374:	687b      	ldr	r3, [r7, #4]
 800a376:	2200      	movs	r2, #0
 800a378:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 800a37c:	78fb      	ldrb	r3, [r7, #3]
 800a37e:	f003 0302 	and.w	r3, r3, #2
 800a382:	2b00      	cmp	r3, #0
 800a384:	d104      	bne.n	800a390 <tcp_enqueue_flags+0x148>
 800a386:	78fb      	ldrb	r3, [r7, #3]
 800a388:	f003 0301 	and.w	r3, r3, #1
 800a38c:	2b00      	cmp	r3, #0
 800a38e:	d004      	beq.n	800a39a <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 800a390:	687b      	ldr	r3, [r7, #4]
 800a392:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a394:	1c5a      	adds	r2, r3, #1
 800a396:	687b      	ldr	r3, [r7, #4]
 800a398:	65da      	str	r2, [r3, #92]	; 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 800a39a:	78fb      	ldrb	r3, [r7, #3]
 800a39c:	f003 0301 	and.w	r3, r3, #1
 800a3a0:	2b00      	cmp	r3, #0
 800a3a2:	d006      	beq.n	800a3b2 <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 800a3a4:	687b      	ldr	r3, [r7, #4]
 800a3a6:	8b5b      	ldrh	r3, [r3, #26]
 800a3a8:	f043 0320 	orr.w	r3, r3, #32
 800a3ac:	b29a      	uxth	r2, r3
 800a3ae:	687b      	ldr	r3, [r7, #4]
 800a3b0:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 800a3b2:	68fb      	ldr	r3, [r7, #12]
 800a3b4:	685b      	ldr	r3, [r3, #4]
 800a3b6:	4618      	mov	r0, r3
 800a3b8:	f7fb fba6 	bl	8005b08 <pbuf_clen>
 800a3bc:	4603      	mov	r3, r0
 800a3be:	461a      	mov	r2, r3
 800a3c0:	687b      	ldr	r3, [r7, #4]
 800a3c2:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800a3c6:	4413      	add	r3, r2
 800a3c8:	b29a      	uxth	r2, r3
 800a3ca:	687b      	ldr	r3, [r7, #4]
 800a3cc:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 800a3d0:	687b      	ldr	r3, [r7, #4]
 800a3d2:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800a3d6:	2b00      	cmp	r3, #0
 800a3d8:	d00e      	beq.n	800a3f8 <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 800a3da:	687b      	ldr	r3, [r7, #4]
 800a3dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a3de:	2b00      	cmp	r3, #0
 800a3e0:	d10a      	bne.n	800a3f8 <tcp_enqueue_flags+0x1b0>
 800a3e2:	687b      	ldr	r3, [r7, #4]
 800a3e4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a3e6:	2b00      	cmp	r3, #0
 800a3e8:	d106      	bne.n	800a3f8 <tcp_enqueue_flags+0x1b0>
 800a3ea:	4b06      	ldr	r3, [pc, #24]	; (800a404 <tcp_enqueue_flags+0x1bc>)
 800a3ec:	f240 4265 	movw	r2, #1125	; 0x465
 800a3f0:	490b      	ldr	r1, [pc, #44]	; (800a420 <tcp_enqueue_flags+0x1d8>)
 800a3f2:	4806      	ldr	r0, [pc, #24]	; (800a40c <tcp_enqueue_flags+0x1c4>)
 800a3f4:	f004 f994 	bl	800e720 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 800a3f8:	2300      	movs	r3, #0
}
 800a3fa:	4618      	mov	r0, r3
 800a3fc:	3720      	adds	r7, #32
 800a3fe:	46bd      	mov	sp, r7
 800a400:	bd80      	pop	{r7, pc}
 800a402:	bf00      	nop
 800a404:	08011084 	.word	0x08011084
 800a408:	080114a8 	.word	0x080114a8
 800a40c:	080110d8 	.word	0x080110d8
 800a410:	08011500 	.word	0x08011500
 800a414:	08011520 	.word	0x08011520
 800a418:	0801155c 	.word	0x0801155c
 800a41c:	08011574 	.word	0x08011574
 800a420:	080115a0 	.word	0x080115a0

0800a424 <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 800a424:	b5b0      	push	{r4, r5, r7, lr}
 800a426:	b08a      	sub	sp, #40	; 0x28
 800a428:	af00      	add	r7, sp, #0
 800a42a:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 800a42c:	687b      	ldr	r3, [r7, #4]
 800a42e:	2b00      	cmp	r3, #0
 800a430:	d106      	bne.n	800a440 <tcp_output+0x1c>
 800a432:	4b8a      	ldr	r3, [pc, #552]	; (800a65c <tcp_output+0x238>)
 800a434:	f240 42e1 	movw	r2, #1249	; 0x4e1
 800a438:	4989      	ldr	r1, [pc, #548]	; (800a660 <tcp_output+0x23c>)
 800a43a:	488a      	ldr	r0, [pc, #552]	; (800a664 <tcp_output+0x240>)
 800a43c:	f004 f970 	bl	800e720 <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 800a440:	687b      	ldr	r3, [r7, #4]
 800a442:	7d1b      	ldrb	r3, [r3, #20]
 800a444:	2b01      	cmp	r3, #1
 800a446:	d106      	bne.n	800a456 <tcp_output+0x32>
 800a448:	4b84      	ldr	r3, [pc, #528]	; (800a65c <tcp_output+0x238>)
 800a44a:	f240 42e3 	movw	r2, #1251	; 0x4e3
 800a44e:	4986      	ldr	r1, [pc, #536]	; (800a668 <tcp_output+0x244>)
 800a450:	4884      	ldr	r0, [pc, #528]	; (800a664 <tcp_output+0x240>)
 800a452:	f004 f965 	bl	800e720 <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 800a456:	4b85      	ldr	r3, [pc, #532]	; (800a66c <tcp_output+0x248>)
 800a458:	681b      	ldr	r3, [r3, #0]
 800a45a:	687a      	ldr	r2, [r7, #4]
 800a45c:	429a      	cmp	r2, r3
 800a45e:	d101      	bne.n	800a464 <tcp_output+0x40>
    return ERR_OK;
 800a460:	2300      	movs	r3, #0
 800a462:	e1ce      	b.n	800a802 <tcp_output+0x3de>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 800a464:	687b      	ldr	r3, [r7, #4]
 800a466:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800a46a:	687b      	ldr	r3, [r7, #4]
 800a46c:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800a470:	4293      	cmp	r3, r2
 800a472:	bf28      	it	cs
 800a474:	4613      	movcs	r3, r2
 800a476:	b29b      	uxth	r3, r3
 800a478:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 800a47a:	687b      	ldr	r3, [r7, #4]
 800a47c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a47e:	627b      	str	r3, [r7, #36]	; 0x24

  if (seg == NULL) {
 800a480:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a482:	2b00      	cmp	r3, #0
 800a484:	d10b      	bne.n	800a49e <tcp_output+0x7a>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 800a486:	687b      	ldr	r3, [r7, #4]
 800a488:	8b5b      	ldrh	r3, [r3, #26]
 800a48a:	f003 0302 	and.w	r3, r3, #2
 800a48e:	2b00      	cmp	r3, #0
 800a490:	f000 81aa 	beq.w	800a7e8 <tcp_output+0x3c4>
      return tcp_send_empty_ack(pcb);
 800a494:	6878      	ldr	r0, [r7, #4]
 800a496:	f000 fdcb 	bl	800b030 <tcp_send_empty_ack>
 800a49a:	4603      	mov	r3, r0
 800a49c:	e1b1      	b.n	800a802 <tcp_output+0x3de>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 800a49e:	6879      	ldr	r1, [r7, #4]
 800a4a0:	687b      	ldr	r3, [r7, #4]
 800a4a2:	3304      	adds	r3, #4
 800a4a4:	461a      	mov	r2, r3
 800a4a6:	6878      	ldr	r0, [r7, #4]
 800a4a8:	f7ff fc7c 	bl	8009da4 <tcp_route>
 800a4ac:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 800a4ae:	697b      	ldr	r3, [r7, #20]
 800a4b0:	2b00      	cmp	r3, #0
 800a4b2:	d102      	bne.n	800a4ba <tcp_output+0x96>
    return ERR_RTE;
 800a4b4:	f06f 0303 	mvn.w	r3, #3
 800a4b8:	e1a3      	b.n	800a802 <tcp_output+0x3de>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 800a4ba:	687b      	ldr	r3, [r7, #4]
 800a4bc:	2b00      	cmp	r3, #0
 800a4be:	d003      	beq.n	800a4c8 <tcp_output+0xa4>
 800a4c0:	687b      	ldr	r3, [r7, #4]
 800a4c2:	681b      	ldr	r3, [r3, #0]
 800a4c4:	2b00      	cmp	r3, #0
 800a4c6:	d111      	bne.n	800a4ec <tcp_output+0xc8>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 800a4c8:	697b      	ldr	r3, [r7, #20]
 800a4ca:	2b00      	cmp	r3, #0
 800a4cc:	d002      	beq.n	800a4d4 <tcp_output+0xb0>
 800a4ce:	697b      	ldr	r3, [r7, #20]
 800a4d0:	3304      	adds	r3, #4
 800a4d2:	e000      	b.n	800a4d6 <tcp_output+0xb2>
 800a4d4:	2300      	movs	r3, #0
 800a4d6:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 800a4d8:	693b      	ldr	r3, [r7, #16]
 800a4da:	2b00      	cmp	r3, #0
 800a4dc:	d102      	bne.n	800a4e4 <tcp_output+0xc0>
      return ERR_RTE;
 800a4de:	f06f 0303 	mvn.w	r3, #3
 800a4e2:	e18e      	b.n	800a802 <tcp_output+0x3de>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 800a4e4:	693b      	ldr	r3, [r7, #16]
 800a4e6:	681a      	ldr	r2, [r3, #0]
 800a4e8:	687b      	ldr	r3, [r7, #4]
 800a4ea:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 800a4ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a4ee:	68db      	ldr	r3, [r3, #12]
 800a4f0:	685b      	ldr	r3, [r3, #4]
 800a4f2:	4618      	mov	r0, r3
 800a4f4:	f7f9 ff37 	bl	8004366 <lwip_htonl>
 800a4f8:	4602      	mov	r2, r0
 800a4fa:	687b      	ldr	r3, [r7, #4]
 800a4fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a4fe:	1ad3      	subs	r3, r2, r3
 800a500:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a502:	8912      	ldrh	r2, [r2, #8]
 800a504:	4413      	add	r3, r2
 800a506:	69ba      	ldr	r2, [r7, #24]
 800a508:	429a      	cmp	r2, r3
 800a50a:	d227      	bcs.n	800a55c <tcp_output+0x138>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 800a50c:	687b      	ldr	r3, [r7, #4]
 800a50e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800a512:	461a      	mov	r2, r3
 800a514:	69bb      	ldr	r3, [r7, #24]
 800a516:	4293      	cmp	r3, r2
 800a518:	d114      	bne.n	800a544 <tcp_output+0x120>
 800a51a:	687b      	ldr	r3, [r7, #4]
 800a51c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a51e:	2b00      	cmp	r3, #0
 800a520:	d110      	bne.n	800a544 <tcp_output+0x120>
 800a522:	687b      	ldr	r3, [r7, #4]
 800a524:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800a528:	2b00      	cmp	r3, #0
 800a52a:	d10b      	bne.n	800a544 <tcp_output+0x120>
      pcb->persist_cnt = 0;
 800a52c:	687b      	ldr	r3, [r7, #4]
 800a52e:	2200      	movs	r2, #0
 800a530:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
      pcb->persist_backoff = 1;
 800a534:	687b      	ldr	r3, [r7, #4]
 800a536:	2201      	movs	r2, #1
 800a538:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
      pcb->persist_probe = 0;
 800a53c:	687b      	ldr	r3, [r7, #4]
 800a53e:	2200      	movs	r2, #0
 800a540:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 800a544:	687b      	ldr	r3, [r7, #4]
 800a546:	8b5b      	ldrh	r3, [r3, #26]
 800a548:	f003 0302 	and.w	r3, r3, #2
 800a54c:	2b00      	cmp	r3, #0
 800a54e:	f000 814d 	beq.w	800a7ec <tcp_output+0x3c8>
      return tcp_send_empty_ack(pcb);
 800a552:	6878      	ldr	r0, [r7, #4]
 800a554:	f000 fd6c 	bl	800b030 <tcp_send_empty_ack>
 800a558:	4603      	mov	r3, r0
 800a55a:	e152      	b.n	800a802 <tcp_output+0x3de>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 800a55c:	687b      	ldr	r3, [r7, #4]
 800a55e:	2200      	movs	r2, #0
 800a560:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 800a564:	687b      	ldr	r3, [r7, #4]
 800a566:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a568:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 800a56a:	6a3b      	ldr	r3, [r7, #32]
 800a56c:	2b00      	cmp	r3, #0
 800a56e:	f000 811c 	beq.w	800a7aa <tcp_output+0x386>
    for (; useg->next != NULL; useg = useg->next);
 800a572:	e002      	b.n	800a57a <tcp_output+0x156>
 800a574:	6a3b      	ldr	r3, [r7, #32]
 800a576:	681b      	ldr	r3, [r3, #0]
 800a578:	623b      	str	r3, [r7, #32]
 800a57a:	6a3b      	ldr	r3, [r7, #32]
 800a57c:	681b      	ldr	r3, [r3, #0]
 800a57e:	2b00      	cmp	r3, #0
 800a580:	d1f8      	bne.n	800a574 <tcp_output+0x150>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 800a582:	e112      	b.n	800a7aa <tcp_output+0x386>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 800a584:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a586:	68db      	ldr	r3, [r3, #12]
 800a588:	899b      	ldrh	r3, [r3, #12]
 800a58a:	b29b      	uxth	r3, r3
 800a58c:	4618      	mov	r0, r3
 800a58e:	f7f9 fed5 	bl	800433c <lwip_htons>
 800a592:	4603      	mov	r3, r0
 800a594:	b2db      	uxtb	r3, r3
 800a596:	f003 0304 	and.w	r3, r3, #4
 800a59a:	2b00      	cmp	r3, #0
 800a59c:	d006      	beq.n	800a5ac <tcp_output+0x188>
 800a59e:	4b2f      	ldr	r3, [pc, #188]	; (800a65c <tcp_output+0x238>)
 800a5a0:	f240 5236 	movw	r2, #1334	; 0x536
 800a5a4:	4932      	ldr	r1, [pc, #200]	; (800a670 <tcp_output+0x24c>)
 800a5a6:	482f      	ldr	r0, [pc, #188]	; (800a664 <tcp_output+0x240>)
 800a5a8:	f004 f8ba 	bl	800e720 <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 800a5ac:	687b      	ldr	r3, [r7, #4]
 800a5ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a5b0:	2b00      	cmp	r3, #0
 800a5b2:	d01f      	beq.n	800a5f4 <tcp_output+0x1d0>
 800a5b4:	687b      	ldr	r3, [r7, #4]
 800a5b6:	8b5b      	ldrh	r3, [r3, #26]
 800a5b8:	f003 0344 	and.w	r3, r3, #68	; 0x44
 800a5bc:	2b00      	cmp	r3, #0
 800a5be:	d119      	bne.n	800a5f4 <tcp_output+0x1d0>
 800a5c0:	687b      	ldr	r3, [r7, #4]
 800a5c2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a5c4:	2b00      	cmp	r3, #0
 800a5c6:	d00b      	beq.n	800a5e0 <tcp_output+0x1bc>
 800a5c8:	687b      	ldr	r3, [r7, #4]
 800a5ca:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a5cc:	681b      	ldr	r3, [r3, #0]
 800a5ce:	2b00      	cmp	r3, #0
 800a5d0:	d110      	bne.n	800a5f4 <tcp_output+0x1d0>
 800a5d2:	687b      	ldr	r3, [r7, #4]
 800a5d4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a5d6:	891a      	ldrh	r2, [r3, #8]
 800a5d8:	687b      	ldr	r3, [r7, #4]
 800a5da:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800a5dc:	429a      	cmp	r2, r3
 800a5de:	d209      	bcs.n	800a5f4 <tcp_output+0x1d0>
 800a5e0:	687b      	ldr	r3, [r7, #4]
 800a5e2:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800a5e6:	2b00      	cmp	r3, #0
 800a5e8:	d004      	beq.n	800a5f4 <tcp_output+0x1d0>
 800a5ea:	687b      	ldr	r3, [r7, #4]
 800a5ec:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800a5f0:	2b08      	cmp	r3, #8
 800a5f2:	d901      	bls.n	800a5f8 <tcp_output+0x1d4>
 800a5f4:	2301      	movs	r3, #1
 800a5f6:	e000      	b.n	800a5fa <tcp_output+0x1d6>
 800a5f8:	2300      	movs	r3, #0
 800a5fa:	2b00      	cmp	r3, #0
 800a5fc:	d106      	bne.n	800a60c <tcp_output+0x1e8>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 800a5fe:	687b      	ldr	r3, [r7, #4]
 800a600:	8b5b      	ldrh	r3, [r3, #26]
 800a602:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 800a606:	2b00      	cmp	r3, #0
 800a608:	f000 80e4 	beq.w	800a7d4 <tcp_output+0x3b0>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 800a60c:	687b      	ldr	r3, [r7, #4]
 800a60e:	7d1b      	ldrb	r3, [r3, #20]
 800a610:	2b02      	cmp	r3, #2
 800a612:	d00d      	beq.n	800a630 <tcp_output+0x20c>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 800a614:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a616:	68db      	ldr	r3, [r3, #12]
 800a618:	899b      	ldrh	r3, [r3, #12]
 800a61a:	b29c      	uxth	r4, r3
 800a61c:	2010      	movs	r0, #16
 800a61e:	f7f9 fe8d 	bl	800433c <lwip_htons>
 800a622:	4603      	mov	r3, r0
 800a624:	461a      	mov	r2, r3
 800a626:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a628:	68db      	ldr	r3, [r3, #12]
 800a62a:	4322      	orrs	r2, r4
 800a62c:	b292      	uxth	r2, r2
 800a62e:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 800a630:	697a      	ldr	r2, [r7, #20]
 800a632:	6879      	ldr	r1, [r7, #4]
 800a634:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800a636:	f000 f909 	bl	800a84c <tcp_output_segment>
 800a63a:	4603      	mov	r3, r0
 800a63c:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 800a63e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a642:	2b00      	cmp	r3, #0
 800a644:	d016      	beq.n	800a674 <tcp_output+0x250>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800a646:	687b      	ldr	r3, [r7, #4]
 800a648:	8b5b      	ldrh	r3, [r3, #26]
 800a64a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a64e:	b29a      	uxth	r2, r3
 800a650:	687b      	ldr	r3, [r7, #4]
 800a652:	835a      	strh	r2, [r3, #26]
      return err;
 800a654:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a658:	e0d3      	b.n	800a802 <tcp_output+0x3de>
 800a65a:	bf00      	nop
 800a65c:	08011084 	.word	0x08011084
 800a660:	080115c8 	.word	0x080115c8
 800a664:	080110d8 	.word	0x080110d8
 800a668:	080115e0 	.word	0x080115e0
 800a66c:	20008338 	.word	0x20008338
 800a670:	08011608 	.word	0x08011608
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 800a674:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a676:	681a      	ldr	r2, [r3, #0]
 800a678:	687b      	ldr	r3, [r7, #4]
 800a67a:	66da      	str	r2, [r3, #108]	; 0x6c
    if (pcb->state != SYN_SENT) {
 800a67c:	687b      	ldr	r3, [r7, #4]
 800a67e:	7d1b      	ldrb	r3, [r3, #20]
 800a680:	2b02      	cmp	r3, #2
 800a682:	d006      	beq.n	800a692 <tcp_output+0x26e>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800a684:	687b      	ldr	r3, [r7, #4]
 800a686:	8b5b      	ldrh	r3, [r3, #26]
 800a688:	f023 0303 	bic.w	r3, r3, #3
 800a68c:	b29a      	uxth	r2, r3
 800a68e:	687b      	ldr	r3, [r7, #4]
 800a690:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 800a692:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a694:	68db      	ldr	r3, [r3, #12]
 800a696:	685b      	ldr	r3, [r3, #4]
 800a698:	4618      	mov	r0, r3
 800a69a:	f7f9 fe64 	bl	8004366 <lwip_htonl>
 800a69e:	4604      	mov	r4, r0
 800a6a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a6a2:	891b      	ldrh	r3, [r3, #8]
 800a6a4:	461d      	mov	r5, r3
 800a6a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a6a8:	68db      	ldr	r3, [r3, #12]
 800a6aa:	899b      	ldrh	r3, [r3, #12]
 800a6ac:	b29b      	uxth	r3, r3
 800a6ae:	4618      	mov	r0, r3
 800a6b0:	f7f9 fe44 	bl	800433c <lwip_htons>
 800a6b4:	4603      	mov	r3, r0
 800a6b6:	b2db      	uxtb	r3, r3
 800a6b8:	f003 0303 	and.w	r3, r3, #3
 800a6bc:	2b00      	cmp	r3, #0
 800a6be:	d001      	beq.n	800a6c4 <tcp_output+0x2a0>
 800a6c0:	2301      	movs	r3, #1
 800a6c2:	e000      	b.n	800a6c6 <tcp_output+0x2a2>
 800a6c4:	2300      	movs	r3, #0
 800a6c6:	442b      	add	r3, r5
 800a6c8:	4423      	add	r3, r4
 800a6ca:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 800a6cc:	687b      	ldr	r3, [r7, #4]
 800a6ce:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800a6d0:	68bb      	ldr	r3, [r7, #8]
 800a6d2:	1ad3      	subs	r3, r2, r3
 800a6d4:	2b00      	cmp	r3, #0
 800a6d6:	da02      	bge.n	800a6de <tcp_output+0x2ba>
      pcb->snd_nxt = snd_nxt;
 800a6d8:	687b      	ldr	r3, [r7, #4]
 800a6da:	68ba      	ldr	r2, [r7, #8]
 800a6dc:	651a      	str	r2, [r3, #80]	; 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 800a6de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a6e0:	891b      	ldrh	r3, [r3, #8]
 800a6e2:	461c      	mov	r4, r3
 800a6e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a6e6:	68db      	ldr	r3, [r3, #12]
 800a6e8:	899b      	ldrh	r3, [r3, #12]
 800a6ea:	b29b      	uxth	r3, r3
 800a6ec:	4618      	mov	r0, r3
 800a6ee:	f7f9 fe25 	bl	800433c <lwip_htons>
 800a6f2:	4603      	mov	r3, r0
 800a6f4:	b2db      	uxtb	r3, r3
 800a6f6:	f003 0303 	and.w	r3, r3, #3
 800a6fa:	2b00      	cmp	r3, #0
 800a6fc:	d001      	beq.n	800a702 <tcp_output+0x2de>
 800a6fe:	2301      	movs	r3, #1
 800a700:	e000      	b.n	800a704 <tcp_output+0x2e0>
 800a702:	2300      	movs	r3, #0
 800a704:	4423      	add	r3, r4
 800a706:	2b00      	cmp	r3, #0
 800a708:	d049      	beq.n	800a79e <tcp_output+0x37a>
      seg->next = NULL;
 800a70a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a70c:	2200      	movs	r2, #0
 800a70e:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 800a710:	687b      	ldr	r3, [r7, #4]
 800a712:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a714:	2b00      	cmp	r3, #0
 800a716:	d105      	bne.n	800a724 <tcp_output+0x300>
        pcb->unacked = seg;
 800a718:	687b      	ldr	r3, [r7, #4]
 800a71a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a71c:	671a      	str	r2, [r3, #112]	; 0x70
        useg = seg;
 800a71e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a720:	623b      	str	r3, [r7, #32]
 800a722:	e03f      	b.n	800a7a4 <tcp_output+0x380>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 800a724:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a726:	68db      	ldr	r3, [r3, #12]
 800a728:	685b      	ldr	r3, [r3, #4]
 800a72a:	4618      	mov	r0, r3
 800a72c:	f7f9 fe1b 	bl	8004366 <lwip_htonl>
 800a730:	4604      	mov	r4, r0
 800a732:	6a3b      	ldr	r3, [r7, #32]
 800a734:	68db      	ldr	r3, [r3, #12]
 800a736:	685b      	ldr	r3, [r3, #4]
 800a738:	4618      	mov	r0, r3
 800a73a:	f7f9 fe14 	bl	8004366 <lwip_htonl>
 800a73e:	4603      	mov	r3, r0
 800a740:	1ae3      	subs	r3, r4, r3
 800a742:	2b00      	cmp	r3, #0
 800a744:	da24      	bge.n	800a790 <tcp_output+0x36c>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 800a746:	687b      	ldr	r3, [r7, #4]
 800a748:	3370      	adds	r3, #112	; 0x70
 800a74a:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 800a74c:	e002      	b.n	800a754 <tcp_output+0x330>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 800a74e:	69fb      	ldr	r3, [r7, #28]
 800a750:	681b      	ldr	r3, [r3, #0]
 800a752:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 800a754:	69fb      	ldr	r3, [r7, #28]
 800a756:	681b      	ldr	r3, [r3, #0]
 800a758:	2b00      	cmp	r3, #0
 800a75a:	d011      	beq.n	800a780 <tcp_output+0x35c>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 800a75c:	69fb      	ldr	r3, [r7, #28]
 800a75e:	681b      	ldr	r3, [r3, #0]
 800a760:	68db      	ldr	r3, [r3, #12]
 800a762:	685b      	ldr	r3, [r3, #4]
 800a764:	4618      	mov	r0, r3
 800a766:	f7f9 fdfe 	bl	8004366 <lwip_htonl>
 800a76a:	4604      	mov	r4, r0
 800a76c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a76e:	68db      	ldr	r3, [r3, #12]
 800a770:	685b      	ldr	r3, [r3, #4]
 800a772:	4618      	mov	r0, r3
 800a774:	f7f9 fdf7 	bl	8004366 <lwip_htonl>
 800a778:	4603      	mov	r3, r0
 800a77a:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 800a77c:	2b00      	cmp	r3, #0
 800a77e:	dbe6      	blt.n	800a74e <tcp_output+0x32a>
          }
          seg->next = (*cur_seg);
 800a780:	69fb      	ldr	r3, [r7, #28]
 800a782:	681a      	ldr	r2, [r3, #0]
 800a784:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a786:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 800a788:	69fb      	ldr	r3, [r7, #28]
 800a78a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a78c:	601a      	str	r2, [r3, #0]
 800a78e:	e009      	b.n	800a7a4 <tcp_output+0x380>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 800a790:	6a3b      	ldr	r3, [r7, #32]
 800a792:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a794:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 800a796:	6a3b      	ldr	r3, [r7, #32]
 800a798:	681b      	ldr	r3, [r3, #0]
 800a79a:	623b      	str	r3, [r7, #32]
 800a79c:	e002      	b.n	800a7a4 <tcp_output+0x380>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 800a79e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800a7a0:	f7fc fc3f 	bl	8007022 <tcp_seg_free>
    }
    seg = pcb->unsent;
 800a7a4:	687b      	ldr	r3, [r7, #4]
 800a7a6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a7a8:	627b      	str	r3, [r7, #36]	; 0x24
  while (seg != NULL &&
 800a7aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a7ac:	2b00      	cmp	r3, #0
 800a7ae:	d012      	beq.n	800a7d6 <tcp_output+0x3b2>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 800a7b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a7b2:	68db      	ldr	r3, [r3, #12]
 800a7b4:	685b      	ldr	r3, [r3, #4]
 800a7b6:	4618      	mov	r0, r3
 800a7b8:	f7f9 fdd5 	bl	8004366 <lwip_htonl>
 800a7bc:	4602      	mov	r2, r0
 800a7be:	687b      	ldr	r3, [r7, #4]
 800a7c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a7c2:	1ad3      	subs	r3, r2, r3
 800a7c4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a7c6:	8912      	ldrh	r2, [r2, #8]
 800a7c8:	4413      	add	r3, r2
  while (seg != NULL &&
 800a7ca:	69ba      	ldr	r2, [r7, #24]
 800a7cc:	429a      	cmp	r2, r3
 800a7ce:	f4bf aed9 	bcs.w	800a584 <tcp_output+0x160>
 800a7d2:	e000      	b.n	800a7d6 <tcp_output+0x3b2>
      break;
 800a7d4:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 800a7d6:	687b      	ldr	r3, [r7, #4]
 800a7d8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a7da:	2b00      	cmp	r3, #0
 800a7dc:	d108      	bne.n	800a7f0 <tcp_output+0x3cc>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 800a7de:	687b      	ldr	r3, [r7, #4]
 800a7e0:	2200      	movs	r2, #0
 800a7e2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
 800a7e6:	e004      	b.n	800a7f2 <tcp_output+0x3ce>
    goto output_done;
 800a7e8:	bf00      	nop
 800a7ea:	e002      	b.n	800a7f2 <tcp_output+0x3ce>
    goto output_done;
 800a7ec:	bf00      	nop
 800a7ee:	e000      	b.n	800a7f2 <tcp_output+0x3ce>
  }
#endif /* TCP_OVERSIZE */

output_done:
 800a7f0:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 800a7f2:	687b      	ldr	r3, [r7, #4]
 800a7f4:	8b5b      	ldrh	r3, [r3, #26]
 800a7f6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a7fa:	b29a      	uxth	r2, r3
 800a7fc:	687b      	ldr	r3, [r7, #4]
 800a7fe:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 800a800:	2300      	movs	r3, #0
}
 800a802:	4618      	mov	r0, r3
 800a804:	3728      	adds	r7, #40	; 0x28
 800a806:	46bd      	mov	sp, r7
 800a808:	bdb0      	pop	{r4, r5, r7, pc}
 800a80a:	bf00      	nop

0800a80c <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 800a80c:	b580      	push	{r7, lr}
 800a80e:	b082      	sub	sp, #8
 800a810:	af00      	add	r7, sp, #0
 800a812:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 800a814:	687b      	ldr	r3, [r7, #4]
 800a816:	2b00      	cmp	r3, #0
 800a818:	d106      	bne.n	800a828 <tcp_output_segment_busy+0x1c>
 800a81a:	4b09      	ldr	r3, [pc, #36]	; (800a840 <tcp_output_segment_busy+0x34>)
 800a81c:	f240 529a 	movw	r2, #1434	; 0x59a
 800a820:	4908      	ldr	r1, [pc, #32]	; (800a844 <tcp_output_segment_busy+0x38>)
 800a822:	4809      	ldr	r0, [pc, #36]	; (800a848 <tcp_output_segment_busy+0x3c>)
 800a824:	f003 ff7c 	bl	800e720 <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 800a828:	687b      	ldr	r3, [r7, #4]
 800a82a:	685b      	ldr	r3, [r3, #4]
 800a82c:	7b9b      	ldrb	r3, [r3, #14]
 800a82e:	2b01      	cmp	r3, #1
 800a830:	d001      	beq.n	800a836 <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 800a832:	2301      	movs	r3, #1
 800a834:	e000      	b.n	800a838 <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 800a836:	2300      	movs	r3, #0
}
 800a838:	4618      	mov	r0, r3
 800a83a:	3708      	adds	r7, #8
 800a83c:	46bd      	mov	sp, r7
 800a83e:	bd80      	pop	{r7, pc}
 800a840:	08011084 	.word	0x08011084
 800a844:	08011620 	.word	0x08011620
 800a848:	080110d8 	.word	0x080110d8

0800a84c <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 800a84c:	b5b0      	push	{r4, r5, r7, lr}
 800a84e:	b08c      	sub	sp, #48	; 0x30
 800a850:	af04      	add	r7, sp, #16
 800a852:	60f8      	str	r0, [r7, #12]
 800a854:	60b9      	str	r1, [r7, #8]
 800a856:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 800a858:	68fb      	ldr	r3, [r7, #12]
 800a85a:	2b00      	cmp	r3, #0
 800a85c:	d106      	bne.n	800a86c <tcp_output_segment+0x20>
 800a85e:	4b64      	ldr	r3, [pc, #400]	; (800a9f0 <tcp_output_segment+0x1a4>)
 800a860:	f44f 62b7 	mov.w	r2, #1464	; 0x5b8
 800a864:	4963      	ldr	r1, [pc, #396]	; (800a9f4 <tcp_output_segment+0x1a8>)
 800a866:	4864      	ldr	r0, [pc, #400]	; (800a9f8 <tcp_output_segment+0x1ac>)
 800a868:	f003 ff5a 	bl	800e720 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 800a86c:	68bb      	ldr	r3, [r7, #8]
 800a86e:	2b00      	cmp	r3, #0
 800a870:	d106      	bne.n	800a880 <tcp_output_segment+0x34>
 800a872:	4b5f      	ldr	r3, [pc, #380]	; (800a9f0 <tcp_output_segment+0x1a4>)
 800a874:	f240 52b9 	movw	r2, #1465	; 0x5b9
 800a878:	4960      	ldr	r1, [pc, #384]	; (800a9fc <tcp_output_segment+0x1b0>)
 800a87a:	485f      	ldr	r0, [pc, #380]	; (800a9f8 <tcp_output_segment+0x1ac>)
 800a87c:	f003 ff50 	bl	800e720 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 800a880:	687b      	ldr	r3, [r7, #4]
 800a882:	2b00      	cmp	r3, #0
 800a884:	d106      	bne.n	800a894 <tcp_output_segment+0x48>
 800a886:	4b5a      	ldr	r3, [pc, #360]	; (800a9f0 <tcp_output_segment+0x1a4>)
 800a888:	f240 52ba 	movw	r2, #1466	; 0x5ba
 800a88c:	495c      	ldr	r1, [pc, #368]	; (800aa00 <tcp_output_segment+0x1b4>)
 800a88e:	485a      	ldr	r0, [pc, #360]	; (800a9f8 <tcp_output_segment+0x1ac>)
 800a890:	f003 ff46 	bl	800e720 <iprintf>

  if (tcp_output_segment_busy(seg)) {
 800a894:	68f8      	ldr	r0, [r7, #12]
 800a896:	f7ff ffb9 	bl	800a80c <tcp_output_segment_busy>
 800a89a:	4603      	mov	r3, r0
 800a89c:	2b00      	cmp	r3, #0
 800a89e:	d001      	beq.n	800a8a4 <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 800a8a0:	2300      	movs	r3, #0
 800a8a2:	e0a1      	b.n	800a9e8 <tcp_output_segment+0x19c>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 800a8a4:	68bb      	ldr	r3, [r7, #8]
 800a8a6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a8a8:	68fb      	ldr	r3, [r7, #12]
 800a8aa:	68dc      	ldr	r4, [r3, #12]
 800a8ac:	4610      	mov	r0, r2
 800a8ae:	f7f9 fd5a 	bl	8004366 <lwip_htonl>
 800a8b2:	4603      	mov	r3, r0
 800a8b4:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 800a8b6:	68bb      	ldr	r3, [r7, #8]
 800a8b8:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 800a8ba:	68fb      	ldr	r3, [r7, #12]
 800a8bc:	68dc      	ldr	r4, [r3, #12]
 800a8be:	4610      	mov	r0, r2
 800a8c0:	f7f9 fd3c 	bl	800433c <lwip_htons>
 800a8c4:	4603      	mov	r3, r0
 800a8c6:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800a8c8:	68bb      	ldr	r3, [r7, #8]
 800a8ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a8cc:	68ba      	ldr	r2, [r7, #8]
 800a8ce:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 800a8d0:	441a      	add	r2, r3
 800a8d2:	68bb      	ldr	r3, [r7, #8]
 800a8d4:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 800a8d6:	68fb      	ldr	r3, [r7, #12]
 800a8d8:	68db      	ldr	r3, [r3, #12]
 800a8da:	3314      	adds	r3, #20
 800a8dc:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 800a8de:	68fb      	ldr	r3, [r7, #12]
 800a8e0:	7a9b      	ldrb	r3, [r3, #10]
 800a8e2:	f003 0301 	and.w	r3, r3, #1
 800a8e6:	2b00      	cmp	r3, #0
 800a8e8:	d015      	beq.n	800a916 <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 800a8ea:	68bb      	ldr	r3, [r7, #8]
 800a8ec:	3304      	adds	r3, #4
 800a8ee:	461a      	mov	r2, r3
 800a8f0:	6879      	ldr	r1, [r7, #4]
 800a8f2:	f44f 7006 	mov.w	r0, #536	; 0x218
 800a8f6:	f7fc fe8b 	bl	8007610 <tcp_eff_send_mss_netif>
 800a8fa:	4603      	mov	r3, r0
 800a8fc:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 800a8fe:	8b7b      	ldrh	r3, [r7, #26]
 800a900:	f043 7301 	orr.w	r3, r3, #33816576	; 0x2040000
 800a904:	4618      	mov	r0, r3
 800a906:	f7f9 fd2e 	bl	8004366 <lwip_htonl>
 800a90a:	4602      	mov	r2, r0
 800a90c:	69fb      	ldr	r3, [r7, #28]
 800a90e:	601a      	str	r2, [r3, #0]
    opts += 1;
 800a910:	69fb      	ldr	r3, [r7, #28]
 800a912:	3304      	adds	r3, #4
 800a914:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 800a916:	68bb      	ldr	r3, [r7, #8]
 800a918:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800a91c:	2b00      	cmp	r3, #0
 800a91e:	da02      	bge.n	800a926 <tcp_output_segment+0xda>
    pcb->rtime = 0;
 800a920:	68bb      	ldr	r3, [r7, #8]
 800a922:	2200      	movs	r2, #0
 800a924:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  if (pcb->rttest == 0) {
 800a926:	68bb      	ldr	r3, [r7, #8]
 800a928:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a92a:	2b00      	cmp	r3, #0
 800a92c:	d10c      	bne.n	800a948 <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 800a92e:	4b35      	ldr	r3, [pc, #212]	; (800aa04 <tcp_output_segment+0x1b8>)
 800a930:	681a      	ldr	r2, [r3, #0]
 800a932:	68bb      	ldr	r3, [r7, #8]
 800a934:	635a      	str	r2, [r3, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 800a936:	68fb      	ldr	r3, [r7, #12]
 800a938:	68db      	ldr	r3, [r3, #12]
 800a93a:	685b      	ldr	r3, [r3, #4]
 800a93c:	4618      	mov	r0, r3
 800a93e:	f7f9 fd12 	bl	8004366 <lwip_htonl>
 800a942:	4602      	mov	r2, r0
 800a944:	68bb      	ldr	r3, [r7, #8]
 800a946:	639a      	str	r2, [r3, #56]	; 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 800a948:	68fb      	ldr	r3, [r7, #12]
 800a94a:	68da      	ldr	r2, [r3, #12]
 800a94c:	68fb      	ldr	r3, [r7, #12]
 800a94e:	685b      	ldr	r3, [r3, #4]
 800a950:	685b      	ldr	r3, [r3, #4]
 800a952:	1ad3      	subs	r3, r2, r3
 800a954:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 800a956:	68fb      	ldr	r3, [r7, #12]
 800a958:	685b      	ldr	r3, [r3, #4]
 800a95a:	8959      	ldrh	r1, [r3, #10]
 800a95c:	68fb      	ldr	r3, [r7, #12]
 800a95e:	685b      	ldr	r3, [r3, #4]
 800a960:	8b3a      	ldrh	r2, [r7, #24]
 800a962:	1a8a      	subs	r2, r1, r2
 800a964:	b292      	uxth	r2, r2
 800a966:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 800a968:	68fb      	ldr	r3, [r7, #12]
 800a96a:	685b      	ldr	r3, [r3, #4]
 800a96c:	8919      	ldrh	r1, [r3, #8]
 800a96e:	68fb      	ldr	r3, [r7, #12]
 800a970:	685b      	ldr	r3, [r3, #4]
 800a972:	8b3a      	ldrh	r2, [r7, #24]
 800a974:	1a8a      	subs	r2, r1, r2
 800a976:	b292      	uxth	r2, r2
 800a978:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 800a97a:	68fb      	ldr	r3, [r7, #12]
 800a97c:	685b      	ldr	r3, [r3, #4]
 800a97e:	68fa      	ldr	r2, [r7, #12]
 800a980:	68d2      	ldr	r2, [r2, #12]
 800a982:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 800a984:	68fb      	ldr	r3, [r7, #12]
 800a986:	68db      	ldr	r3, [r3, #12]
 800a988:	2200      	movs	r2, #0
 800a98a:	741a      	strb	r2, [r3, #16]
 800a98c:	2200      	movs	r2, #0
 800a98e:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 800a990:	68fb      	ldr	r3, [r7, #12]
 800a992:	68da      	ldr	r2, [r3, #12]
 800a994:	68fb      	ldr	r3, [r7, #12]
 800a996:	7a9b      	ldrb	r3, [r3, #10]
 800a998:	f003 0301 	and.w	r3, r3, #1
 800a99c:	2b00      	cmp	r3, #0
 800a99e:	d001      	beq.n	800a9a4 <tcp_output_segment+0x158>
 800a9a0:	2318      	movs	r3, #24
 800a9a2:	e000      	b.n	800a9a6 <tcp_output_segment+0x15a>
 800a9a4:	2314      	movs	r3, #20
 800a9a6:	4413      	add	r3, r2
 800a9a8:	69fa      	ldr	r2, [r7, #28]
 800a9aa:	429a      	cmp	r2, r3
 800a9ac:	d006      	beq.n	800a9bc <tcp_output_segment+0x170>
 800a9ae:	4b10      	ldr	r3, [pc, #64]	; (800a9f0 <tcp_output_segment+0x1a4>)
 800a9b0:	f240 621c 	movw	r2, #1564	; 0x61c
 800a9b4:	4914      	ldr	r1, [pc, #80]	; (800aa08 <tcp_output_segment+0x1bc>)
 800a9b6:	4810      	ldr	r0, [pc, #64]	; (800a9f8 <tcp_output_segment+0x1ac>)
 800a9b8:	f003 feb2 	bl	800e720 <iprintf>
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 800a9bc:	68fb      	ldr	r3, [r7, #12]
 800a9be:	6858      	ldr	r0, [r3, #4]
 800a9c0:	68b9      	ldr	r1, [r7, #8]
 800a9c2:	68bb      	ldr	r3, [r7, #8]
 800a9c4:	1d1c      	adds	r4, r3, #4
 800a9c6:	68bb      	ldr	r3, [r7, #8]
 800a9c8:	7add      	ldrb	r5, [r3, #11]
 800a9ca:	68bb      	ldr	r3, [r7, #8]
 800a9cc:	7a9b      	ldrb	r3, [r3, #10]
 800a9ce:	687a      	ldr	r2, [r7, #4]
 800a9d0:	9202      	str	r2, [sp, #8]
 800a9d2:	2206      	movs	r2, #6
 800a9d4:	9201      	str	r2, [sp, #4]
 800a9d6:	9300      	str	r3, [sp, #0]
 800a9d8:	462b      	mov	r3, r5
 800a9da:	4622      	mov	r2, r4
 800a9dc:	f002 fd84 	bl	800d4e8 <ip4_output_if>
 800a9e0:	4603      	mov	r3, r0
 800a9e2:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 800a9e4:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800a9e8:	4618      	mov	r0, r3
 800a9ea:	3720      	adds	r7, #32
 800a9ec:	46bd      	mov	sp, r7
 800a9ee:	bdb0      	pop	{r4, r5, r7, pc}
 800a9f0:	08011084 	.word	0x08011084
 800a9f4:	08011648 	.word	0x08011648
 800a9f8:	080110d8 	.word	0x080110d8
 800a9fc:	08011668 	.word	0x08011668
 800aa00:	08011688 	.word	0x08011688
 800aa04:	200082ec 	.word	0x200082ec
 800aa08:	080116ac 	.word	0x080116ac

0800aa0c <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 800aa0c:	b5b0      	push	{r4, r5, r7, lr}
 800aa0e:	b084      	sub	sp, #16
 800aa10:	af00      	add	r7, sp, #0
 800aa12:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 800aa14:	687b      	ldr	r3, [r7, #4]
 800aa16:	2b00      	cmp	r3, #0
 800aa18:	d106      	bne.n	800aa28 <tcp_rexmit_rto_prepare+0x1c>
 800aa1a:	4b31      	ldr	r3, [pc, #196]	; (800aae0 <tcp_rexmit_rto_prepare+0xd4>)
 800aa1c:	f240 6263 	movw	r2, #1635	; 0x663
 800aa20:	4930      	ldr	r1, [pc, #192]	; (800aae4 <tcp_rexmit_rto_prepare+0xd8>)
 800aa22:	4831      	ldr	r0, [pc, #196]	; (800aae8 <tcp_rexmit_rto_prepare+0xdc>)
 800aa24:	f003 fe7c 	bl	800e720 <iprintf>

  if (pcb->unacked == NULL) {
 800aa28:	687b      	ldr	r3, [r7, #4]
 800aa2a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800aa2c:	2b00      	cmp	r3, #0
 800aa2e:	d102      	bne.n	800aa36 <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 800aa30:	f06f 0305 	mvn.w	r3, #5
 800aa34:	e050      	b.n	800aad8 <tcp_rexmit_rto_prepare+0xcc>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 800aa36:	687b      	ldr	r3, [r7, #4]
 800aa38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800aa3a:	60fb      	str	r3, [r7, #12]
 800aa3c:	e00b      	b.n	800aa56 <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 800aa3e:	68f8      	ldr	r0, [r7, #12]
 800aa40:	f7ff fee4 	bl	800a80c <tcp_output_segment_busy>
 800aa44:	4603      	mov	r3, r0
 800aa46:	2b00      	cmp	r3, #0
 800aa48:	d002      	beq.n	800aa50 <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 800aa4a:	f06f 0305 	mvn.w	r3, #5
 800aa4e:	e043      	b.n	800aad8 <tcp_rexmit_rto_prepare+0xcc>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 800aa50:	68fb      	ldr	r3, [r7, #12]
 800aa52:	681b      	ldr	r3, [r3, #0]
 800aa54:	60fb      	str	r3, [r7, #12]
 800aa56:	68fb      	ldr	r3, [r7, #12]
 800aa58:	681b      	ldr	r3, [r3, #0]
 800aa5a:	2b00      	cmp	r3, #0
 800aa5c:	d1ef      	bne.n	800aa3e <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 800aa5e:	68f8      	ldr	r0, [r7, #12]
 800aa60:	f7ff fed4 	bl	800a80c <tcp_output_segment_busy>
 800aa64:	4603      	mov	r3, r0
 800aa66:	2b00      	cmp	r3, #0
 800aa68:	d002      	beq.n	800aa70 <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 800aa6a:	f06f 0305 	mvn.w	r3, #5
 800aa6e:	e033      	b.n	800aad8 <tcp_rexmit_rto_prepare+0xcc>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 800aa70:	687b      	ldr	r3, [r7, #4]
 800aa72:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800aa74:	68fb      	ldr	r3, [r7, #12]
 800aa76:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 800aa78:	687b      	ldr	r3, [r7, #4]
 800aa7a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800aa7c:	687b      	ldr	r3, [r7, #4]
 800aa7e:	66da      	str	r2, [r3, #108]	; 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 800aa80:	687b      	ldr	r3, [r7, #4]
 800aa82:	2200      	movs	r2, #0
 800aa84:	671a      	str	r2, [r3, #112]	; 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 800aa86:	687b      	ldr	r3, [r7, #4]
 800aa88:	8b5b      	ldrh	r3, [r3, #26]
 800aa8a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800aa8e:	b29a      	uxth	r2, r3
 800aa90:	687b      	ldr	r3, [r7, #4]
 800aa92:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 800aa94:	68fb      	ldr	r3, [r7, #12]
 800aa96:	68db      	ldr	r3, [r3, #12]
 800aa98:	685b      	ldr	r3, [r3, #4]
 800aa9a:	4618      	mov	r0, r3
 800aa9c:	f7f9 fc63 	bl	8004366 <lwip_htonl>
 800aaa0:	4604      	mov	r4, r0
 800aaa2:	68fb      	ldr	r3, [r7, #12]
 800aaa4:	891b      	ldrh	r3, [r3, #8]
 800aaa6:	461d      	mov	r5, r3
 800aaa8:	68fb      	ldr	r3, [r7, #12]
 800aaaa:	68db      	ldr	r3, [r3, #12]
 800aaac:	899b      	ldrh	r3, [r3, #12]
 800aaae:	b29b      	uxth	r3, r3
 800aab0:	4618      	mov	r0, r3
 800aab2:	f7f9 fc43 	bl	800433c <lwip_htons>
 800aab6:	4603      	mov	r3, r0
 800aab8:	b2db      	uxtb	r3, r3
 800aaba:	f003 0303 	and.w	r3, r3, #3
 800aabe:	2b00      	cmp	r3, #0
 800aac0:	d001      	beq.n	800aac6 <tcp_rexmit_rto_prepare+0xba>
 800aac2:	2301      	movs	r3, #1
 800aac4:	e000      	b.n	800aac8 <tcp_rexmit_rto_prepare+0xbc>
 800aac6:	2300      	movs	r3, #0
 800aac8:	442b      	add	r3, r5
 800aaca:	18e2      	adds	r2, r4, r3
 800aacc:	687b      	ldr	r3, [r7, #4]
 800aace:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 800aad0:	687b      	ldr	r3, [r7, #4]
 800aad2:	2200      	movs	r2, #0
 800aad4:	635a      	str	r2, [r3, #52]	; 0x34

  return ERR_OK;
 800aad6:	2300      	movs	r3, #0
}
 800aad8:	4618      	mov	r0, r3
 800aada:	3710      	adds	r7, #16
 800aadc:	46bd      	mov	sp, r7
 800aade:	bdb0      	pop	{r4, r5, r7, pc}
 800aae0:	08011084 	.word	0x08011084
 800aae4:	080116c0 	.word	0x080116c0
 800aae8:	080110d8 	.word	0x080110d8

0800aaec <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 800aaec:	b580      	push	{r7, lr}
 800aaee:	b082      	sub	sp, #8
 800aaf0:	af00      	add	r7, sp, #0
 800aaf2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 800aaf4:	687b      	ldr	r3, [r7, #4]
 800aaf6:	2b00      	cmp	r3, #0
 800aaf8:	d106      	bne.n	800ab08 <tcp_rexmit_rto_commit+0x1c>
 800aafa:	4b0d      	ldr	r3, [pc, #52]	; (800ab30 <tcp_rexmit_rto_commit+0x44>)
 800aafc:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 800ab00:	490c      	ldr	r1, [pc, #48]	; (800ab34 <tcp_rexmit_rto_commit+0x48>)
 800ab02:	480d      	ldr	r0, [pc, #52]	; (800ab38 <tcp_rexmit_rto_commit+0x4c>)
 800ab04:	f003 fe0c 	bl	800e720 <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 800ab08:	687b      	ldr	r3, [r7, #4]
 800ab0a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800ab0e:	2bff      	cmp	r3, #255	; 0xff
 800ab10:	d007      	beq.n	800ab22 <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 800ab12:	687b      	ldr	r3, [r7, #4]
 800ab14:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800ab18:	3301      	adds	r3, #1
 800ab1a:	b2da      	uxtb	r2, r3
 800ab1c:	687b      	ldr	r3, [r7, #4]
 800ab1e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 800ab22:	6878      	ldr	r0, [r7, #4]
 800ab24:	f7ff fc7e 	bl	800a424 <tcp_output>
}
 800ab28:	bf00      	nop
 800ab2a:	3708      	adds	r7, #8
 800ab2c:	46bd      	mov	sp, r7
 800ab2e:	bd80      	pop	{r7, pc}
 800ab30:	08011084 	.word	0x08011084
 800ab34:	080116e4 	.word	0x080116e4
 800ab38:	080110d8 	.word	0x080110d8

0800ab3c <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 800ab3c:	b580      	push	{r7, lr}
 800ab3e:	b082      	sub	sp, #8
 800ab40:	af00      	add	r7, sp, #0
 800ab42:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 800ab44:	687b      	ldr	r3, [r7, #4]
 800ab46:	2b00      	cmp	r3, #0
 800ab48:	d106      	bne.n	800ab58 <tcp_rexmit_rto+0x1c>
 800ab4a:	4b0a      	ldr	r3, [pc, #40]	; (800ab74 <tcp_rexmit_rto+0x38>)
 800ab4c:	f240 62ad 	movw	r2, #1709	; 0x6ad
 800ab50:	4909      	ldr	r1, [pc, #36]	; (800ab78 <tcp_rexmit_rto+0x3c>)
 800ab52:	480a      	ldr	r0, [pc, #40]	; (800ab7c <tcp_rexmit_rto+0x40>)
 800ab54:	f003 fde4 	bl	800e720 <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 800ab58:	6878      	ldr	r0, [r7, #4]
 800ab5a:	f7ff ff57 	bl	800aa0c <tcp_rexmit_rto_prepare>
 800ab5e:	4603      	mov	r3, r0
 800ab60:	2b00      	cmp	r3, #0
 800ab62:	d102      	bne.n	800ab6a <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 800ab64:	6878      	ldr	r0, [r7, #4]
 800ab66:	f7ff ffc1 	bl	800aaec <tcp_rexmit_rto_commit>
  }
}
 800ab6a:	bf00      	nop
 800ab6c:	3708      	adds	r7, #8
 800ab6e:	46bd      	mov	sp, r7
 800ab70:	bd80      	pop	{r7, pc}
 800ab72:	bf00      	nop
 800ab74:	08011084 	.word	0x08011084
 800ab78:	08011708 	.word	0x08011708
 800ab7c:	080110d8 	.word	0x080110d8

0800ab80 <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 800ab80:	b590      	push	{r4, r7, lr}
 800ab82:	b085      	sub	sp, #20
 800ab84:	af00      	add	r7, sp, #0
 800ab86:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 800ab88:	687b      	ldr	r3, [r7, #4]
 800ab8a:	2b00      	cmp	r3, #0
 800ab8c:	d106      	bne.n	800ab9c <tcp_rexmit+0x1c>
 800ab8e:	4b2f      	ldr	r3, [pc, #188]	; (800ac4c <tcp_rexmit+0xcc>)
 800ab90:	f240 62c1 	movw	r2, #1729	; 0x6c1
 800ab94:	492e      	ldr	r1, [pc, #184]	; (800ac50 <tcp_rexmit+0xd0>)
 800ab96:	482f      	ldr	r0, [pc, #188]	; (800ac54 <tcp_rexmit+0xd4>)
 800ab98:	f003 fdc2 	bl	800e720 <iprintf>

  if (pcb->unacked == NULL) {
 800ab9c:	687b      	ldr	r3, [r7, #4]
 800ab9e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800aba0:	2b00      	cmp	r3, #0
 800aba2:	d102      	bne.n	800abaa <tcp_rexmit+0x2a>
    return ERR_VAL;
 800aba4:	f06f 0305 	mvn.w	r3, #5
 800aba8:	e04c      	b.n	800ac44 <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 800abaa:	687b      	ldr	r3, [r7, #4]
 800abac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800abae:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 800abb0:	68b8      	ldr	r0, [r7, #8]
 800abb2:	f7ff fe2b 	bl	800a80c <tcp_output_segment_busy>
 800abb6:	4603      	mov	r3, r0
 800abb8:	2b00      	cmp	r3, #0
 800abba:	d002      	beq.n	800abc2 <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 800abbc:	f06f 0305 	mvn.w	r3, #5
 800abc0:	e040      	b.n	800ac44 <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 800abc2:	68bb      	ldr	r3, [r7, #8]
 800abc4:	681a      	ldr	r2, [r3, #0]
 800abc6:	687b      	ldr	r3, [r7, #4]
 800abc8:	671a      	str	r2, [r3, #112]	; 0x70

  cur_seg = &(pcb->unsent);
 800abca:	687b      	ldr	r3, [r7, #4]
 800abcc:	336c      	adds	r3, #108	; 0x6c
 800abce:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 800abd0:	e002      	b.n	800abd8 <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 800abd2:	68fb      	ldr	r3, [r7, #12]
 800abd4:	681b      	ldr	r3, [r3, #0]
 800abd6:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 800abd8:	68fb      	ldr	r3, [r7, #12]
 800abda:	681b      	ldr	r3, [r3, #0]
 800abdc:	2b00      	cmp	r3, #0
 800abde:	d011      	beq.n	800ac04 <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 800abe0:	68fb      	ldr	r3, [r7, #12]
 800abe2:	681b      	ldr	r3, [r3, #0]
 800abe4:	68db      	ldr	r3, [r3, #12]
 800abe6:	685b      	ldr	r3, [r3, #4]
 800abe8:	4618      	mov	r0, r3
 800abea:	f7f9 fbbc 	bl	8004366 <lwip_htonl>
 800abee:	4604      	mov	r4, r0
 800abf0:	68bb      	ldr	r3, [r7, #8]
 800abf2:	68db      	ldr	r3, [r3, #12]
 800abf4:	685b      	ldr	r3, [r3, #4]
 800abf6:	4618      	mov	r0, r3
 800abf8:	f7f9 fbb5 	bl	8004366 <lwip_htonl>
 800abfc:	4603      	mov	r3, r0
 800abfe:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 800ac00:	2b00      	cmp	r3, #0
 800ac02:	dbe6      	blt.n	800abd2 <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 800ac04:	68fb      	ldr	r3, [r7, #12]
 800ac06:	681a      	ldr	r2, [r3, #0]
 800ac08:	68bb      	ldr	r3, [r7, #8]
 800ac0a:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 800ac0c:	68fb      	ldr	r3, [r7, #12]
 800ac0e:	68ba      	ldr	r2, [r7, #8]
 800ac10:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 800ac12:	68bb      	ldr	r3, [r7, #8]
 800ac14:	681b      	ldr	r3, [r3, #0]
 800ac16:	2b00      	cmp	r3, #0
 800ac18:	d103      	bne.n	800ac22 <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 800ac1a:	687b      	ldr	r3, [r7, #4]
 800ac1c:	2200      	movs	r2, #0
 800ac1e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 800ac22:	687b      	ldr	r3, [r7, #4]
 800ac24:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800ac28:	2bff      	cmp	r3, #255	; 0xff
 800ac2a:	d007      	beq.n	800ac3c <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 800ac2c:	687b      	ldr	r3, [r7, #4]
 800ac2e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800ac32:	3301      	adds	r3, #1
 800ac34:	b2da      	uxtb	r2, r3
 800ac36:	687b      	ldr	r3, [r7, #4]
 800ac38:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 800ac3c:	687b      	ldr	r3, [r7, #4]
 800ac3e:	2200      	movs	r2, #0
 800ac40:	635a      	str	r2, [r3, #52]	; 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 800ac42:	2300      	movs	r3, #0
}
 800ac44:	4618      	mov	r0, r3
 800ac46:	3714      	adds	r7, #20
 800ac48:	46bd      	mov	sp, r7
 800ac4a:	bd90      	pop	{r4, r7, pc}
 800ac4c:	08011084 	.word	0x08011084
 800ac50:	08011724 	.word	0x08011724
 800ac54:	080110d8 	.word	0x080110d8

0800ac58 <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 800ac58:	b580      	push	{r7, lr}
 800ac5a:	b082      	sub	sp, #8
 800ac5c:	af00      	add	r7, sp, #0
 800ac5e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 800ac60:	687b      	ldr	r3, [r7, #4]
 800ac62:	2b00      	cmp	r3, #0
 800ac64:	d106      	bne.n	800ac74 <tcp_rexmit_fast+0x1c>
 800ac66:	4b2a      	ldr	r3, [pc, #168]	; (800ad10 <tcp_rexmit_fast+0xb8>)
 800ac68:	f240 62f9 	movw	r2, #1785	; 0x6f9
 800ac6c:	4929      	ldr	r1, [pc, #164]	; (800ad14 <tcp_rexmit_fast+0xbc>)
 800ac6e:	482a      	ldr	r0, [pc, #168]	; (800ad18 <tcp_rexmit_fast+0xc0>)
 800ac70:	f003 fd56 	bl	800e720 <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 800ac74:	687b      	ldr	r3, [r7, #4]
 800ac76:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ac78:	2b00      	cmp	r3, #0
 800ac7a:	d044      	beq.n	800ad06 <tcp_rexmit_fast+0xae>
 800ac7c:	687b      	ldr	r3, [r7, #4]
 800ac7e:	8b5b      	ldrh	r3, [r3, #26]
 800ac80:	f003 0304 	and.w	r3, r3, #4
 800ac84:	2b00      	cmp	r3, #0
 800ac86:	d13e      	bne.n	800ad06 <tcp_rexmit_fast+0xae>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 800ac88:	6878      	ldr	r0, [r7, #4]
 800ac8a:	f7ff ff79 	bl	800ab80 <tcp_rexmit>
 800ac8e:	4603      	mov	r3, r0
 800ac90:	2b00      	cmp	r3, #0
 800ac92:	d138      	bne.n	800ad06 <tcp_rexmit_fast+0xae>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 800ac94:	687b      	ldr	r3, [r7, #4]
 800ac96:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800ac9a:	687b      	ldr	r3, [r7, #4]
 800ac9c:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800aca0:	4293      	cmp	r3, r2
 800aca2:	bf28      	it	cs
 800aca4:	4613      	movcs	r3, r2
 800aca6:	b29b      	uxth	r3, r3
 800aca8:	0fda      	lsrs	r2, r3, #31
 800acaa:	4413      	add	r3, r2
 800acac:	105b      	asrs	r3, r3, #1
 800acae:	b29a      	uxth	r2, r3
 800acb0:	687b      	ldr	r3, [r7, #4]
 800acb2:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 800acb6:	687b      	ldr	r3, [r7, #4]
 800acb8:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 800acbc:	461a      	mov	r2, r3
 800acbe:	687b      	ldr	r3, [r7, #4]
 800acc0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800acc2:	005b      	lsls	r3, r3, #1
 800acc4:	429a      	cmp	r2, r3
 800acc6:	d206      	bcs.n	800acd6 <tcp_rexmit_fast+0x7e>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 800acc8:	687b      	ldr	r3, [r7, #4]
 800acca:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800accc:	005b      	lsls	r3, r3, #1
 800acce:	b29a      	uxth	r2, r3
 800acd0:	687b      	ldr	r3, [r7, #4]
 800acd2:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 800acd6:	687b      	ldr	r3, [r7, #4]
 800acd8:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800acdc:	687b      	ldr	r3, [r7, #4]
 800acde:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800ace0:	4619      	mov	r1, r3
 800ace2:	0049      	lsls	r1, r1, #1
 800ace4:	440b      	add	r3, r1
 800ace6:	b29b      	uxth	r3, r3
 800ace8:	4413      	add	r3, r2
 800acea:	b29a      	uxth	r2, r3
 800acec:	687b      	ldr	r3, [r7, #4]
 800acee:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
      tcp_set_flags(pcb, TF_INFR);
 800acf2:	687b      	ldr	r3, [r7, #4]
 800acf4:	8b5b      	ldrh	r3, [r3, #26]
 800acf6:	f043 0304 	orr.w	r3, r3, #4
 800acfa:	b29a      	uxth	r2, r3
 800acfc:	687b      	ldr	r3, [r7, #4]
 800acfe:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 800ad00:	687b      	ldr	r3, [r7, #4]
 800ad02:	2200      	movs	r2, #0
 800ad04:	861a      	strh	r2, [r3, #48]	; 0x30
    }
  }
}
 800ad06:	bf00      	nop
 800ad08:	3708      	adds	r7, #8
 800ad0a:	46bd      	mov	sp, r7
 800ad0c:	bd80      	pop	{r7, pc}
 800ad0e:	bf00      	nop
 800ad10:	08011084 	.word	0x08011084
 800ad14:	0801173c 	.word	0x0801173c
 800ad18:	080110d8 	.word	0x080110d8

0800ad1c <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 800ad1c:	b580      	push	{r7, lr}
 800ad1e:	b086      	sub	sp, #24
 800ad20:	af00      	add	r7, sp, #0
 800ad22:	60f8      	str	r0, [r7, #12]
 800ad24:	607b      	str	r3, [r7, #4]
 800ad26:	460b      	mov	r3, r1
 800ad28:	817b      	strh	r3, [r7, #10]
 800ad2a:	4613      	mov	r3, r2
 800ad2c:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 800ad2e:	897a      	ldrh	r2, [r7, #10]
 800ad30:	893b      	ldrh	r3, [r7, #8]
 800ad32:	4413      	add	r3, r2
 800ad34:	b29b      	uxth	r3, r3
 800ad36:	3314      	adds	r3, #20
 800ad38:	b29b      	uxth	r3, r3
 800ad3a:	f44f 7220 	mov.w	r2, #640	; 0x280
 800ad3e:	4619      	mov	r1, r3
 800ad40:	2022      	movs	r0, #34	; 0x22
 800ad42:	f7fa fb75 	bl	8005430 <pbuf_alloc>
 800ad46:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 800ad48:	697b      	ldr	r3, [r7, #20]
 800ad4a:	2b00      	cmp	r3, #0
 800ad4c:	d04d      	beq.n	800adea <tcp_output_alloc_header_common+0xce>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 800ad4e:	897b      	ldrh	r3, [r7, #10]
 800ad50:	3313      	adds	r3, #19
 800ad52:	697a      	ldr	r2, [r7, #20]
 800ad54:	8952      	ldrh	r2, [r2, #10]
 800ad56:	4293      	cmp	r3, r2
 800ad58:	db06      	blt.n	800ad68 <tcp_output_alloc_header_common+0x4c>
 800ad5a:	4b26      	ldr	r3, [pc, #152]	; (800adf4 <tcp_output_alloc_header_common+0xd8>)
 800ad5c:	f240 7223 	movw	r2, #1827	; 0x723
 800ad60:	4925      	ldr	r1, [pc, #148]	; (800adf8 <tcp_output_alloc_header_common+0xdc>)
 800ad62:	4826      	ldr	r0, [pc, #152]	; (800adfc <tcp_output_alloc_header_common+0xe0>)
 800ad64:	f003 fcdc 	bl	800e720 <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 800ad68:	697b      	ldr	r3, [r7, #20]
 800ad6a:	685b      	ldr	r3, [r3, #4]
 800ad6c:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 800ad6e:	8c3b      	ldrh	r3, [r7, #32]
 800ad70:	4618      	mov	r0, r3
 800ad72:	f7f9 fae3 	bl	800433c <lwip_htons>
 800ad76:	4603      	mov	r3, r0
 800ad78:	461a      	mov	r2, r3
 800ad7a:	693b      	ldr	r3, [r7, #16]
 800ad7c:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 800ad7e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ad80:	4618      	mov	r0, r3
 800ad82:	f7f9 fadb 	bl	800433c <lwip_htons>
 800ad86:	4603      	mov	r3, r0
 800ad88:	461a      	mov	r2, r3
 800ad8a:	693b      	ldr	r3, [r7, #16]
 800ad8c:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 800ad8e:	693b      	ldr	r3, [r7, #16]
 800ad90:	687a      	ldr	r2, [r7, #4]
 800ad92:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 800ad94:	68f8      	ldr	r0, [r7, #12]
 800ad96:	f7f9 fae6 	bl	8004366 <lwip_htonl>
 800ad9a:	4602      	mov	r2, r0
 800ad9c:	693b      	ldr	r3, [r7, #16]
 800ad9e:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 800ada0:	897b      	ldrh	r3, [r7, #10]
 800ada2:	089b      	lsrs	r3, r3, #2
 800ada4:	b29b      	uxth	r3, r3
 800ada6:	3305      	adds	r3, #5
 800ada8:	b29b      	uxth	r3, r3
 800adaa:	031b      	lsls	r3, r3, #12
 800adac:	b29a      	uxth	r2, r3
 800adae:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800adb2:	b29b      	uxth	r3, r3
 800adb4:	4313      	orrs	r3, r2
 800adb6:	b29b      	uxth	r3, r3
 800adb8:	4618      	mov	r0, r3
 800adba:	f7f9 fabf 	bl	800433c <lwip_htons>
 800adbe:	4603      	mov	r3, r0
 800adc0:	461a      	mov	r2, r3
 800adc2:	693b      	ldr	r3, [r7, #16]
 800adc4:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 800adc6:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800adc8:	4618      	mov	r0, r3
 800adca:	f7f9 fab7 	bl	800433c <lwip_htons>
 800adce:	4603      	mov	r3, r0
 800add0:	461a      	mov	r2, r3
 800add2:	693b      	ldr	r3, [r7, #16]
 800add4:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 800add6:	693b      	ldr	r3, [r7, #16]
 800add8:	2200      	movs	r2, #0
 800adda:	741a      	strb	r2, [r3, #16]
 800addc:	2200      	movs	r2, #0
 800adde:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 800ade0:	693b      	ldr	r3, [r7, #16]
 800ade2:	2200      	movs	r2, #0
 800ade4:	749a      	strb	r2, [r3, #18]
 800ade6:	2200      	movs	r2, #0
 800ade8:	74da      	strb	r2, [r3, #19]
  }
  return p;
 800adea:	697b      	ldr	r3, [r7, #20]
}
 800adec:	4618      	mov	r0, r3
 800adee:	3718      	adds	r7, #24
 800adf0:	46bd      	mov	sp, r7
 800adf2:	bd80      	pop	{r7, pc}
 800adf4:	08011084 	.word	0x08011084
 800adf8:	0801175c 	.word	0x0801175c
 800adfc:	080110d8 	.word	0x080110d8

0800ae00 <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 800ae00:	b5b0      	push	{r4, r5, r7, lr}
 800ae02:	b08a      	sub	sp, #40	; 0x28
 800ae04:	af04      	add	r7, sp, #16
 800ae06:	60f8      	str	r0, [r7, #12]
 800ae08:	607b      	str	r3, [r7, #4]
 800ae0a:	460b      	mov	r3, r1
 800ae0c:	817b      	strh	r3, [r7, #10]
 800ae0e:	4613      	mov	r3, r2
 800ae10:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 800ae12:	68fb      	ldr	r3, [r7, #12]
 800ae14:	2b00      	cmp	r3, #0
 800ae16:	d106      	bne.n	800ae26 <tcp_output_alloc_header+0x26>
 800ae18:	4b15      	ldr	r3, [pc, #84]	; (800ae70 <tcp_output_alloc_header+0x70>)
 800ae1a:	f240 7242 	movw	r2, #1858	; 0x742
 800ae1e:	4915      	ldr	r1, [pc, #84]	; (800ae74 <tcp_output_alloc_header+0x74>)
 800ae20:	4815      	ldr	r0, [pc, #84]	; (800ae78 <tcp_output_alloc_header+0x78>)
 800ae22:	f003 fc7d 	bl	800e720 <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 800ae26:	68fb      	ldr	r3, [r7, #12]
 800ae28:	6a58      	ldr	r0, [r3, #36]	; 0x24
 800ae2a:	68fb      	ldr	r3, [r7, #12]
 800ae2c:	8adb      	ldrh	r3, [r3, #22]
 800ae2e:	68fa      	ldr	r2, [r7, #12]
 800ae30:	8b12      	ldrh	r2, [r2, #24]
 800ae32:	68f9      	ldr	r1, [r7, #12]
 800ae34:	8d49      	ldrh	r1, [r1, #42]	; 0x2a
 800ae36:	893d      	ldrh	r5, [r7, #8]
 800ae38:	897c      	ldrh	r4, [r7, #10]
 800ae3a:	9103      	str	r1, [sp, #12]
 800ae3c:	2110      	movs	r1, #16
 800ae3e:	9102      	str	r1, [sp, #8]
 800ae40:	9201      	str	r2, [sp, #4]
 800ae42:	9300      	str	r3, [sp, #0]
 800ae44:	687b      	ldr	r3, [r7, #4]
 800ae46:	462a      	mov	r2, r5
 800ae48:	4621      	mov	r1, r4
 800ae4a:	f7ff ff67 	bl	800ad1c <tcp_output_alloc_header_common>
 800ae4e:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 800ae50:	697b      	ldr	r3, [r7, #20]
 800ae52:	2b00      	cmp	r3, #0
 800ae54:	d006      	beq.n	800ae64 <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800ae56:	68fb      	ldr	r3, [r7, #12]
 800ae58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ae5a:	68fa      	ldr	r2, [r7, #12]
 800ae5c:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 800ae5e:	441a      	add	r2, r3
 800ae60:	68fb      	ldr	r3, [r7, #12]
 800ae62:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  return p;
 800ae64:	697b      	ldr	r3, [r7, #20]
}
 800ae66:	4618      	mov	r0, r3
 800ae68:	3718      	adds	r7, #24
 800ae6a:	46bd      	mov	sp, r7
 800ae6c:	bdb0      	pop	{r4, r5, r7, pc}
 800ae6e:	bf00      	nop
 800ae70:	08011084 	.word	0x08011084
 800ae74:	0801178c 	.word	0x0801178c
 800ae78:	080110d8 	.word	0x080110d8

0800ae7c <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 800ae7c:	b580      	push	{r7, lr}
 800ae7e:	b088      	sub	sp, #32
 800ae80:	af00      	add	r7, sp, #0
 800ae82:	60f8      	str	r0, [r7, #12]
 800ae84:	60b9      	str	r1, [r7, #8]
 800ae86:	4611      	mov	r1, r2
 800ae88:	461a      	mov	r2, r3
 800ae8a:	460b      	mov	r3, r1
 800ae8c:	71fb      	strb	r3, [r7, #7]
 800ae8e:	4613      	mov	r3, r2
 800ae90:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 800ae92:	2300      	movs	r3, #0
 800ae94:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 800ae96:	68bb      	ldr	r3, [r7, #8]
 800ae98:	2b00      	cmp	r3, #0
 800ae9a:	d106      	bne.n	800aeaa <tcp_output_fill_options+0x2e>
 800ae9c:	4b12      	ldr	r3, [pc, #72]	; (800aee8 <tcp_output_fill_options+0x6c>)
 800ae9e:	f240 7256 	movw	r2, #1878	; 0x756
 800aea2:	4912      	ldr	r1, [pc, #72]	; (800aeec <tcp_output_fill_options+0x70>)
 800aea4:	4812      	ldr	r0, [pc, #72]	; (800aef0 <tcp_output_fill_options+0x74>)
 800aea6:	f003 fc3b 	bl	800e720 <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 800aeaa:	68bb      	ldr	r3, [r7, #8]
 800aeac:	685b      	ldr	r3, [r3, #4]
 800aeae:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 800aeb0:	69bb      	ldr	r3, [r7, #24]
 800aeb2:	3314      	adds	r3, #20
 800aeb4:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 800aeb6:	8bfb      	ldrh	r3, [r7, #30]
 800aeb8:	009b      	lsls	r3, r3, #2
 800aeba:	461a      	mov	r2, r3
 800aebc:	79fb      	ldrb	r3, [r7, #7]
 800aebe:	009b      	lsls	r3, r3, #2
 800aec0:	f003 0304 	and.w	r3, r3, #4
 800aec4:	4413      	add	r3, r2
 800aec6:	3314      	adds	r3, #20
 800aec8:	69ba      	ldr	r2, [r7, #24]
 800aeca:	4413      	add	r3, r2
 800aecc:	697a      	ldr	r2, [r7, #20]
 800aece:	429a      	cmp	r2, r3
 800aed0:	d006      	beq.n	800aee0 <tcp_output_fill_options+0x64>
 800aed2:	4b05      	ldr	r3, [pc, #20]	; (800aee8 <tcp_output_fill_options+0x6c>)
 800aed4:	f240 7275 	movw	r2, #1909	; 0x775
 800aed8:	4906      	ldr	r1, [pc, #24]	; (800aef4 <tcp_output_fill_options+0x78>)
 800aeda:	4805      	ldr	r0, [pc, #20]	; (800aef0 <tcp_output_fill_options+0x74>)
 800aedc:	f003 fc20 	bl	800e720 <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 800aee0:	bf00      	nop
 800aee2:	3720      	adds	r7, #32
 800aee4:	46bd      	mov	sp, r7
 800aee6:	bd80      	pop	{r7, pc}
 800aee8:	08011084 	.word	0x08011084
 800aeec:	080117b4 	.word	0x080117b4
 800aef0:	080110d8 	.word	0x080110d8
 800aef4:	080116ac 	.word	0x080116ac

0800aef8 <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 800aef8:	b580      	push	{r7, lr}
 800aefa:	b08a      	sub	sp, #40	; 0x28
 800aefc:	af04      	add	r7, sp, #16
 800aefe:	60f8      	str	r0, [r7, #12]
 800af00:	60b9      	str	r1, [r7, #8]
 800af02:	607a      	str	r2, [r7, #4]
 800af04:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 800af06:	68bb      	ldr	r3, [r7, #8]
 800af08:	2b00      	cmp	r3, #0
 800af0a:	d106      	bne.n	800af1a <tcp_output_control_segment+0x22>
 800af0c:	4b1c      	ldr	r3, [pc, #112]	; (800af80 <tcp_output_control_segment+0x88>)
 800af0e:	f240 7287 	movw	r2, #1927	; 0x787
 800af12:	491c      	ldr	r1, [pc, #112]	; (800af84 <tcp_output_control_segment+0x8c>)
 800af14:	481c      	ldr	r0, [pc, #112]	; (800af88 <tcp_output_control_segment+0x90>)
 800af16:	f003 fc03 	bl	800e720 <iprintf>

  netif = tcp_route(pcb, src, dst);
 800af1a:	683a      	ldr	r2, [r7, #0]
 800af1c:	6879      	ldr	r1, [r7, #4]
 800af1e:	68f8      	ldr	r0, [r7, #12]
 800af20:	f7fe ff40 	bl	8009da4 <tcp_route>
 800af24:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 800af26:	693b      	ldr	r3, [r7, #16]
 800af28:	2b00      	cmp	r3, #0
 800af2a:	d102      	bne.n	800af32 <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 800af2c:	23fc      	movs	r3, #252	; 0xfc
 800af2e:	75fb      	strb	r3, [r7, #23]
 800af30:	e01c      	b.n	800af6c <tcp_output_control_segment+0x74>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 800af32:	68fb      	ldr	r3, [r7, #12]
 800af34:	2b00      	cmp	r3, #0
 800af36:	d006      	beq.n	800af46 <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 800af38:	68fb      	ldr	r3, [r7, #12]
 800af3a:	7adb      	ldrb	r3, [r3, #11]
 800af3c:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 800af3e:	68fb      	ldr	r3, [r7, #12]
 800af40:	7a9b      	ldrb	r3, [r3, #10]
 800af42:	757b      	strb	r3, [r7, #21]
 800af44:	e003      	b.n	800af4e <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 800af46:	23ff      	movs	r3, #255	; 0xff
 800af48:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 800af4a:	2300      	movs	r3, #0
 800af4c:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 800af4e:	7dba      	ldrb	r2, [r7, #22]
 800af50:	693b      	ldr	r3, [r7, #16]
 800af52:	9302      	str	r3, [sp, #8]
 800af54:	2306      	movs	r3, #6
 800af56:	9301      	str	r3, [sp, #4]
 800af58:	7d7b      	ldrb	r3, [r7, #21]
 800af5a:	9300      	str	r3, [sp, #0]
 800af5c:	4613      	mov	r3, r2
 800af5e:	683a      	ldr	r2, [r7, #0]
 800af60:	6879      	ldr	r1, [r7, #4]
 800af62:	68b8      	ldr	r0, [r7, #8]
 800af64:	f002 fac0 	bl	800d4e8 <ip4_output_if>
 800af68:	4603      	mov	r3, r0
 800af6a:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 800af6c:	68b8      	ldr	r0, [r7, #8]
 800af6e:	f7fa fd43 	bl	80059f8 <pbuf_free>
  return err;
 800af72:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800af76:	4618      	mov	r0, r3
 800af78:	3718      	adds	r7, #24
 800af7a:	46bd      	mov	sp, r7
 800af7c:	bd80      	pop	{r7, pc}
 800af7e:	bf00      	nop
 800af80:	08011084 	.word	0x08011084
 800af84:	080117dc 	.word	0x080117dc
 800af88:	080110d8 	.word	0x080110d8

0800af8c <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 800af8c:	b590      	push	{r4, r7, lr}
 800af8e:	b08b      	sub	sp, #44	; 0x2c
 800af90:	af04      	add	r7, sp, #16
 800af92:	60f8      	str	r0, [r7, #12]
 800af94:	60b9      	str	r1, [r7, #8]
 800af96:	607a      	str	r2, [r7, #4]
 800af98:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 800af9a:	683b      	ldr	r3, [r7, #0]
 800af9c:	2b00      	cmp	r3, #0
 800af9e:	d106      	bne.n	800afae <tcp_rst+0x22>
 800afa0:	4b1f      	ldr	r3, [pc, #124]	; (800b020 <tcp_rst+0x94>)
 800afa2:	f240 72c4 	movw	r2, #1988	; 0x7c4
 800afa6:	491f      	ldr	r1, [pc, #124]	; (800b024 <tcp_rst+0x98>)
 800afa8:	481f      	ldr	r0, [pc, #124]	; (800b028 <tcp_rst+0x9c>)
 800afaa:	f003 fbb9 	bl	800e720 <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 800afae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800afb0:	2b00      	cmp	r3, #0
 800afb2:	d106      	bne.n	800afc2 <tcp_rst+0x36>
 800afb4:	4b1a      	ldr	r3, [pc, #104]	; (800b020 <tcp_rst+0x94>)
 800afb6:	f240 72c5 	movw	r2, #1989	; 0x7c5
 800afba:	491c      	ldr	r1, [pc, #112]	; (800b02c <tcp_rst+0xa0>)
 800afbc:	481a      	ldr	r0, [pc, #104]	; (800b028 <tcp_rst+0x9c>)
 800afbe:	f003 fbaf 	bl	800e720 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800afc2:	2300      	movs	r3, #0
 800afc4:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 800afc6:	f246 0308 	movw	r3, #24584	; 0x6008
 800afca:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 800afcc:	7dfb      	ldrb	r3, [r7, #23]
 800afce:	b29c      	uxth	r4, r3
 800afd0:	68b8      	ldr	r0, [r7, #8]
 800afd2:	f7f9 f9c8 	bl	8004366 <lwip_htonl>
 800afd6:	4602      	mov	r2, r0
 800afd8:	8abb      	ldrh	r3, [r7, #20]
 800afda:	9303      	str	r3, [sp, #12]
 800afdc:	2314      	movs	r3, #20
 800afde:	9302      	str	r3, [sp, #8]
 800afe0:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800afe2:	9301      	str	r3, [sp, #4]
 800afe4:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800afe6:	9300      	str	r3, [sp, #0]
 800afe8:	4613      	mov	r3, r2
 800afea:	2200      	movs	r2, #0
 800afec:	4621      	mov	r1, r4
 800afee:	6878      	ldr	r0, [r7, #4]
 800aff0:	f7ff fe94 	bl	800ad1c <tcp_output_alloc_header_common>
 800aff4:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 800aff6:	693b      	ldr	r3, [r7, #16]
 800aff8:	2b00      	cmp	r3, #0
 800affa:	d00c      	beq.n	800b016 <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800affc:	7dfb      	ldrb	r3, [r7, #23]
 800affe:	2200      	movs	r2, #0
 800b000:	6939      	ldr	r1, [r7, #16]
 800b002:	68f8      	ldr	r0, [r7, #12]
 800b004:	f7ff ff3a 	bl	800ae7c <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 800b008:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b00a:	683a      	ldr	r2, [r7, #0]
 800b00c:	6939      	ldr	r1, [r7, #16]
 800b00e:	68f8      	ldr	r0, [r7, #12]
 800b010:	f7ff ff72 	bl	800aef8 <tcp_output_control_segment>
 800b014:	e000      	b.n	800b018 <tcp_rst+0x8c>
    return;
 800b016:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 800b018:	371c      	adds	r7, #28
 800b01a:	46bd      	mov	sp, r7
 800b01c:	bd90      	pop	{r4, r7, pc}
 800b01e:	bf00      	nop
 800b020:	08011084 	.word	0x08011084
 800b024:	08011808 	.word	0x08011808
 800b028:	080110d8 	.word	0x080110d8
 800b02c:	08011824 	.word	0x08011824

0800b030 <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 800b030:	b590      	push	{r4, r7, lr}
 800b032:	b087      	sub	sp, #28
 800b034:	af00      	add	r7, sp, #0
 800b036:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 800b038:	2300      	movs	r3, #0
 800b03a:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 800b03c:	2300      	movs	r3, #0
 800b03e:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 800b040:	687b      	ldr	r3, [r7, #4]
 800b042:	2b00      	cmp	r3, #0
 800b044:	d106      	bne.n	800b054 <tcp_send_empty_ack+0x24>
 800b046:	4b28      	ldr	r3, [pc, #160]	; (800b0e8 <tcp_send_empty_ack+0xb8>)
 800b048:	f240 72ea 	movw	r2, #2026	; 0x7ea
 800b04c:	4927      	ldr	r1, [pc, #156]	; (800b0ec <tcp_send_empty_ack+0xbc>)
 800b04e:	4828      	ldr	r0, [pc, #160]	; (800b0f0 <tcp_send_empty_ack+0xc0>)
 800b050:	f003 fb66 	bl	800e720 <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800b054:	7dfb      	ldrb	r3, [r7, #23]
 800b056:	009b      	lsls	r3, r3, #2
 800b058:	b2db      	uxtb	r3, r3
 800b05a:	f003 0304 	and.w	r3, r3, #4
 800b05e:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 800b060:	7d7b      	ldrb	r3, [r7, #21]
 800b062:	b29c      	uxth	r4, r3
 800b064:	687b      	ldr	r3, [r7, #4]
 800b066:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b068:	4618      	mov	r0, r3
 800b06a:	f7f9 f97c 	bl	8004366 <lwip_htonl>
 800b06e:	4603      	mov	r3, r0
 800b070:	2200      	movs	r2, #0
 800b072:	4621      	mov	r1, r4
 800b074:	6878      	ldr	r0, [r7, #4]
 800b076:	f7ff fec3 	bl	800ae00 <tcp_output_alloc_header>
 800b07a:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800b07c:	693b      	ldr	r3, [r7, #16]
 800b07e:	2b00      	cmp	r3, #0
 800b080:	d109      	bne.n	800b096 <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800b082:	687b      	ldr	r3, [r7, #4]
 800b084:	8b5b      	ldrh	r3, [r3, #26]
 800b086:	f043 0303 	orr.w	r3, r3, #3
 800b08a:	b29a      	uxth	r2, r3
 800b08c:	687b      	ldr	r3, [r7, #4]
 800b08e:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 800b090:	f06f 0301 	mvn.w	r3, #1
 800b094:	e023      	b.n	800b0de <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 800b096:	7dbb      	ldrb	r3, [r7, #22]
 800b098:	7dfa      	ldrb	r2, [r7, #23]
 800b09a:	6939      	ldr	r1, [r7, #16]
 800b09c:	6878      	ldr	r0, [r7, #4]
 800b09e:	f7ff feed 	bl	800ae7c <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800b0a2:	687a      	ldr	r2, [r7, #4]
 800b0a4:	687b      	ldr	r3, [r7, #4]
 800b0a6:	3304      	adds	r3, #4
 800b0a8:	6939      	ldr	r1, [r7, #16]
 800b0aa:	6878      	ldr	r0, [r7, #4]
 800b0ac:	f7ff ff24 	bl	800aef8 <tcp_output_control_segment>
 800b0b0:	4603      	mov	r3, r0
 800b0b2:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 800b0b4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b0b8:	2b00      	cmp	r3, #0
 800b0ba:	d007      	beq.n	800b0cc <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800b0bc:	687b      	ldr	r3, [r7, #4]
 800b0be:	8b5b      	ldrh	r3, [r3, #26]
 800b0c0:	f043 0303 	orr.w	r3, r3, #3
 800b0c4:	b29a      	uxth	r2, r3
 800b0c6:	687b      	ldr	r3, [r7, #4]
 800b0c8:	835a      	strh	r2, [r3, #26]
 800b0ca:	e006      	b.n	800b0da <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800b0cc:	687b      	ldr	r3, [r7, #4]
 800b0ce:	8b5b      	ldrh	r3, [r3, #26]
 800b0d0:	f023 0303 	bic.w	r3, r3, #3
 800b0d4:	b29a      	uxth	r2, r3
 800b0d6:	687b      	ldr	r3, [r7, #4]
 800b0d8:	835a      	strh	r2, [r3, #26]
  }

  return err;
 800b0da:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800b0de:	4618      	mov	r0, r3
 800b0e0:	371c      	adds	r7, #28
 800b0e2:	46bd      	mov	sp, r7
 800b0e4:	bd90      	pop	{r4, r7, pc}
 800b0e6:	bf00      	nop
 800b0e8:	08011084 	.word	0x08011084
 800b0ec:	08011840 	.word	0x08011840
 800b0f0:	080110d8 	.word	0x080110d8

0800b0f4 <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 800b0f4:	b590      	push	{r4, r7, lr}
 800b0f6:	b087      	sub	sp, #28
 800b0f8:	af00      	add	r7, sp, #0
 800b0fa:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800b0fc:	2300      	movs	r3, #0
 800b0fe:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 800b100:	687b      	ldr	r3, [r7, #4]
 800b102:	2b00      	cmp	r3, #0
 800b104:	d106      	bne.n	800b114 <tcp_keepalive+0x20>
 800b106:	4b18      	ldr	r3, [pc, #96]	; (800b168 <tcp_keepalive+0x74>)
 800b108:	f640 0224 	movw	r2, #2084	; 0x824
 800b10c:	4917      	ldr	r1, [pc, #92]	; (800b16c <tcp_keepalive+0x78>)
 800b10e:	4818      	ldr	r0, [pc, #96]	; (800b170 <tcp_keepalive+0x7c>)
 800b110:	f003 fb06 	bl	800e720 <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 800b114:	7dfb      	ldrb	r3, [r7, #23]
 800b116:	b29c      	uxth	r4, r3
 800b118:	687b      	ldr	r3, [r7, #4]
 800b11a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b11c:	3b01      	subs	r3, #1
 800b11e:	4618      	mov	r0, r3
 800b120:	f7f9 f921 	bl	8004366 <lwip_htonl>
 800b124:	4603      	mov	r3, r0
 800b126:	2200      	movs	r2, #0
 800b128:	4621      	mov	r1, r4
 800b12a:	6878      	ldr	r0, [r7, #4]
 800b12c:	f7ff fe68 	bl	800ae00 <tcp_output_alloc_header>
 800b130:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800b132:	693b      	ldr	r3, [r7, #16]
 800b134:	2b00      	cmp	r3, #0
 800b136:	d102      	bne.n	800b13e <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 800b138:	f04f 33ff 	mov.w	r3, #4294967295
 800b13c:	e010      	b.n	800b160 <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800b13e:	7dfb      	ldrb	r3, [r7, #23]
 800b140:	2200      	movs	r2, #0
 800b142:	6939      	ldr	r1, [r7, #16]
 800b144:	6878      	ldr	r0, [r7, #4]
 800b146:	f7ff fe99 	bl	800ae7c <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800b14a:	687a      	ldr	r2, [r7, #4]
 800b14c:	687b      	ldr	r3, [r7, #4]
 800b14e:	3304      	adds	r3, #4
 800b150:	6939      	ldr	r1, [r7, #16]
 800b152:	6878      	ldr	r0, [r7, #4]
 800b154:	f7ff fed0 	bl	800aef8 <tcp_output_control_segment>
 800b158:	4603      	mov	r3, r0
 800b15a:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 800b15c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800b160:	4618      	mov	r0, r3
 800b162:	371c      	adds	r7, #28
 800b164:	46bd      	mov	sp, r7
 800b166:	bd90      	pop	{r4, r7, pc}
 800b168:	08011084 	.word	0x08011084
 800b16c:	08011860 	.word	0x08011860
 800b170:	080110d8 	.word	0x080110d8

0800b174 <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 800b174:	b590      	push	{r4, r7, lr}
 800b176:	b08b      	sub	sp, #44	; 0x2c
 800b178:	af00      	add	r7, sp, #0
 800b17a:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800b17c:	2300      	movs	r3, #0
 800b17e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 800b182:	687b      	ldr	r3, [r7, #4]
 800b184:	2b00      	cmp	r3, #0
 800b186:	d106      	bne.n	800b196 <tcp_zero_window_probe+0x22>
 800b188:	4b4c      	ldr	r3, [pc, #304]	; (800b2bc <tcp_zero_window_probe+0x148>)
 800b18a:	f640 024f 	movw	r2, #2127	; 0x84f
 800b18e:	494c      	ldr	r1, [pc, #304]	; (800b2c0 <tcp_zero_window_probe+0x14c>)
 800b190:	484c      	ldr	r0, [pc, #304]	; (800b2c4 <tcp_zero_window_probe+0x150>)
 800b192:	f003 fac5 	bl	800e720 <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 800b196:	687b      	ldr	r3, [r7, #4]
 800b198:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b19a:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 800b19c:	6a3b      	ldr	r3, [r7, #32]
 800b19e:	2b00      	cmp	r3, #0
 800b1a0:	d101      	bne.n	800b1a6 <tcp_zero_window_probe+0x32>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 800b1a2:	2300      	movs	r3, #0
 800b1a4:	e086      	b.n	800b2b4 <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 800b1a6:	687b      	ldr	r3, [r7, #4]
 800b1a8:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 800b1ac:	2bff      	cmp	r3, #255	; 0xff
 800b1ae:	d007      	beq.n	800b1c0 <tcp_zero_window_probe+0x4c>
    ++pcb->persist_probe;
 800b1b0:	687b      	ldr	r3, [r7, #4]
 800b1b2:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 800b1b6:	3301      	adds	r3, #1
 800b1b8:	b2da      	uxtb	r2, r3
 800b1ba:	687b      	ldr	r3, [r7, #4]
 800b1bc:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 800b1c0:	6a3b      	ldr	r3, [r7, #32]
 800b1c2:	68db      	ldr	r3, [r3, #12]
 800b1c4:	899b      	ldrh	r3, [r3, #12]
 800b1c6:	b29b      	uxth	r3, r3
 800b1c8:	4618      	mov	r0, r3
 800b1ca:	f7f9 f8b7 	bl	800433c <lwip_htons>
 800b1ce:	4603      	mov	r3, r0
 800b1d0:	b2db      	uxtb	r3, r3
 800b1d2:	f003 0301 	and.w	r3, r3, #1
 800b1d6:	2b00      	cmp	r3, #0
 800b1d8:	d005      	beq.n	800b1e6 <tcp_zero_window_probe+0x72>
 800b1da:	6a3b      	ldr	r3, [r7, #32]
 800b1dc:	891b      	ldrh	r3, [r3, #8]
 800b1de:	2b00      	cmp	r3, #0
 800b1e0:	d101      	bne.n	800b1e6 <tcp_zero_window_probe+0x72>
 800b1e2:	2301      	movs	r3, #1
 800b1e4:	e000      	b.n	800b1e8 <tcp_zero_window_probe+0x74>
 800b1e6:	2300      	movs	r3, #0
 800b1e8:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 800b1ea:	7ffb      	ldrb	r3, [r7, #31]
 800b1ec:	2b00      	cmp	r3, #0
 800b1ee:	bf0c      	ite	eq
 800b1f0:	2301      	moveq	r3, #1
 800b1f2:	2300      	movne	r3, #0
 800b1f4:	b2db      	uxtb	r3, r3
 800b1f6:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 800b1f8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b1fc:	b299      	uxth	r1, r3
 800b1fe:	6a3b      	ldr	r3, [r7, #32]
 800b200:	68db      	ldr	r3, [r3, #12]
 800b202:	685b      	ldr	r3, [r3, #4]
 800b204:	8bba      	ldrh	r2, [r7, #28]
 800b206:	6878      	ldr	r0, [r7, #4]
 800b208:	f7ff fdfa 	bl	800ae00 <tcp_output_alloc_header>
 800b20c:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 800b20e:	69bb      	ldr	r3, [r7, #24]
 800b210:	2b00      	cmp	r3, #0
 800b212:	d102      	bne.n	800b21a <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 800b214:	f04f 33ff 	mov.w	r3, #4294967295
 800b218:	e04c      	b.n	800b2b4 <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 800b21a:	69bb      	ldr	r3, [r7, #24]
 800b21c:	685b      	ldr	r3, [r3, #4]
 800b21e:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 800b220:	7ffb      	ldrb	r3, [r7, #31]
 800b222:	2b00      	cmp	r3, #0
 800b224:	d011      	beq.n	800b24a <tcp_zero_window_probe+0xd6>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 800b226:	697b      	ldr	r3, [r7, #20]
 800b228:	899b      	ldrh	r3, [r3, #12]
 800b22a:	b29b      	uxth	r3, r3
 800b22c:	b21b      	sxth	r3, r3
 800b22e:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800b232:	b21c      	sxth	r4, r3
 800b234:	2011      	movs	r0, #17
 800b236:	f7f9 f881 	bl	800433c <lwip_htons>
 800b23a:	4603      	mov	r3, r0
 800b23c:	b21b      	sxth	r3, r3
 800b23e:	4323      	orrs	r3, r4
 800b240:	b21b      	sxth	r3, r3
 800b242:	b29a      	uxth	r2, r3
 800b244:	697b      	ldr	r3, [r7, #20]
 800b246:	819a      	strh	r2, [r3, #12]
 800b248:	e010      	b.n	800b26c <tcp_zero_window_probe+0xf8>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 800b24a:	69bb      	ldr	r3, [r7, #24]
 800b24c:	685b      	ldr	r3, [r3, #4]
 800b24e:	3314      	adds	r3, #20
 800b250:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 800b252:	6a3b      	ldr	r3, [r7, #32]
 800b254:	6858      	ldr	r0, [r3, #4]
 800b256:	6a3b      	ldr	r3, [r7, #32]
 800b258:	685b      	ldr	r3, [r3, #4]
 800b25a:	891a      	ldrh	r2, [r3, #8]
 800b25c:	6a3b      	ldr	r3, [r7, #32]
 800b25e:	891b      	ldrh	r3, [r3, #8]
 800b260:	1ad3      	subs	r3, r2, r3
 800b262:	b29b      	uxth	r3, r3
 800b264:	2201      	movs	r2, #1
 800b266:	6939      	ldr	r1, [r7, #16]
 800b268:	f7fa fdc0 	bl	8005dec <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 800b26c:	6a3b      	ldr	r3, [r7, #32]
 800b26e:	68db      	ldr	r3, [r3, #12]
 800b270:	685b      	ldr	r3, [r3, #4]
 800b272:	4618      	mov	r0, r3
 800b274:	f7f9 f877 	bl	8004366 <lwip_htonl>
 800b278:	4603      	mov	r3, r0
 800b27a:	3301      	adds	r3, #1
 800b27c:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 800b27e:	687b      	ldr	r3, [r7, #4]
 800b280:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800b282:	68fb      	ldr	r3, [r7, #12]
 800b284:	1ad3      	subs	r3, r2, r3
 800b286:	2b00      	cmp	r3, #0
 800b288:	da02      	bge.n	800b290 <tcp_zero_window_probe+0x11c>
    pcb->snd_nxt = snd_nxt;
 800b28a:	687b      	ldr	r3, [r7, #4]
 800b28c:	68fa      	ldr	r2, [r7, #12]
 800b28e:	651a      	str	r2, [r3, #80]	; 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800b290:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b294:	2200      	movs	r2, #0
 800b296:	69b9      	ldr	r1, [r7, #24]
 800b298:	6878      	ldr	r0, [r7, #4]
 800b29a:	f7ff fdef 	bl	800ae7c <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800b29e:	687a      	ldr	r2, [r7, #4]
 800b2a0:	687b      	ldr	r3, [r7, #4]
 800b2a2:	3304      	adds	r3, #4
 800b2a4:	69b9      	ldr	r1, [r7, #24]
 800b2a6:	6878      	ldr	r0, [r7, #4]
 800b2a8:	f7ff fe26 	bl	800aef8 <tcp_output_control_segment>
 800b2ac:	4603      	mov	r3, r0
 800b2ae:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 800b2b0:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 800b2b4:	4618      	mov	r0, r3
 800b2b6:	372c      	adds	r7, #44	; 0x2c
 800b2b8:	46bd      	mov	sp, r7
 800b2ba:	bd90      	pop	{r4, r7, pc}
 800b2bc:	08011084 	.word	0x08011084
 800b2c0:	0801187c 	.word	0x0801187c
 800b2c4:	080110d8 	.word	0x080110d8

0800b2c8 <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 800b2c8:	b580      	push	{r7, lr}
 800b2ca:	b082      	sub	sp, #8
 800b2cc:	af00      	add	r7, sp, #0
 800b2ce:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 800b2d0:	f7fa ff0c 	bl	80060ec <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 800b2d4:	4b0a      	ldr	r3, [pc, #40]	; (800b300 <tcpip_tcp_timer+0x38>)
 800b2d6:	681b      	ldr	r3, [r3, #0]
 800b2d8:	2b00      	cmp	r3, #0
 800b2da:	d103      	bne.n	800b2e4 <tcpip_tcp_timer+0x1c>
 800b2dc:	4b09      	ldr	r3, [pc, #36]	; (800b304 <tcpip_tcp_timer+0x3c>)
 800b2de:	681b      	ldr	r3, [r3, #0]
 800b2e0:	2b00      	cmp	r3, #0
 800b2e2:	d005      	beq.n	800b2f0 <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 800b2e4:	2200      	movs	r2, #0
 800b2e6:	4908      	ldr	r1, [pc, #32]	; (800b308 <tcpip_tcp_timer+0x40>)
 800b2e8:	20fa      	movs	r0, #250	; 0xfa
 800b2ea:	f000 f8f3 	bl	800b4d4 <sys_timeout>
 800b2ee:	e003      	b.n	800b2f8 <tcpip_tcp_timer+0x30>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 800b2f0:	4b06      	ldr	r3, [pc, #24]	; (800b30c <tcpip_tcp_timer+0x44>)
 800b2f2:	2200      	movs	r2, #0
 800b2f4:	601a      	str	r2, [r3, #0]
  }
}
 800b2f6:	bf00      	nop
 800b2f8:	bf00      	nop
 800b2fa:	3708      	adds	r7, #8
 800b2fc:	46bd      	mov	sp, r7
 800b2fe:	bd80      	pop	{r7, pc}
 800b300:	200082f8 	.word	0x200082f8
 800b304:	200082fc 	.word	0x200082fc
 800b308:	0800b2c9 	.word	0x0800b2c9
 800b30c:	20008344 	.word	0x20008344

0800b310 <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 800b310:	b580      	push	{r7, lr}
 800b312:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 800b314:	4b0a      	ldr	r3, [pc, #40]	; (800b340 <tcp_timer_needed+0x30>)
 800b316:	681b      	ldr	r3, [r3, #0]
 800b318:	2b00      	cmp	r3, #0
 800b31a:	d10f      	bne.n	800b33c <tcp_timer_needed+0x2c>
 800b31c:	4b09      	ldr	r3, [pc, #36]	; (800b344 <tcp_timer_needed+0x34>)
 800b31e:	681b      	ldr	r3, [r3, #0]
 800b320:	2b00      	cmp	r3, #0
 800b322:	d103      	bne.n	800b32c <tcp_timer_needed+0x1c>
 800b324:	4b08      	ldr	r3, [pc, #32]	; (800b348 <tcp_timer_needed+0x38>)
 800b326:	681b      	ldr	r3, [r3, #0]
 800b328:	2b00      	cmp	r3, #0
 800b32a:	d007      	beq.n	800b33c <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 800b32c:	4b04      	ldr	r3, [pc, #16]	; (800b340 <tcp_timer_needed+0x30>)
 800b32e:	2201      	movs	r2, #1
 800b330:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 800b332:	2200      	movs	r2, #0
 800b334:	4905      	ldr	r1, [pc, #20]	; (800b34c <tcp_timer_needed+0x3c>)
 800b336:	20fa      	movs	r0, #250	; 0xfa
 800b338:	f000 f8cc 	bl	800b4d4 <sys_timeout>
  }
}
 800b33c:	bf00      	nop
 800b33e:	bd80      	pop	{r7, pc}
 800b340:	20008344 	.word	0x20008344
 800b344:	200082f8 	.word	0x200082f8
 800b348:	200082fc 	.word	0x200082fc
 800b34c:	0800b2c9 	.word	0x0800b2c9

0800b350 <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 800b350:	b580      	push	{r7, lr}
 800b352:	b086      	sub	sp, #24
 800b354:	af00      	add	r7, sp, #0
 800b356:	60f8      	str	r0, [r7, #12]
 800b358:	60b9      	str	r1, [r7, #8]
 800b35a:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 800b35c:	2006      	movs	r0, #6
 800b35e:	f7f9 fc65 	bl	8004c2c <memp_malloc>
 800b362:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 800b364:	693b      	ldr	r3, [r7, #16]
 800b366:	2b00      	cmp	r3, #0
 800b368:	d109      	bne.n	800b37e <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 800b36a:	693b      	ldr	r3, [r7, #16]
 800b36c:	2b00      	cmp	r3, #0
 800b36e:	d151      	bne.n	800b414 <sys_timeout_abs+0xc4>
 800b370:	4b2a      	ldr	r3, [pc, #168]	; (800b41c <sys_timeout_abs+0xcc>)
 800b372:	22be      	movs	r2, #190	; 0xbe
 800b374:	492a      	ldr	r1, [pc, #168]	; (800b420 <sys_timeout_abs+0xd0>)
 800b376:	482b      	ldr	r0, [pc, #172]	; (800b424 <sys_timeout_abs+0xd4>)
 800b378:	f003 f9d2 	bl	800e720 <iprintf>
    return;
 800b37c:	e04a      	b.n	800b414 <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 800b37e:	693b      	ldr	r3, [r7, #16]
 800b380:	2200      	movs	r2, #0
 800b382:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 800b384:	693b      	ldr	r3, [r7, #16]
 800b386:	68ba      	ldr	r2, [r7, #8]
 800b388:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 800b38a:	693b      	ldr	r3, [r7, #16]
 800b38c:	687a      	ldr	r2, [r7, #4]
 800b38e:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 800b390:	693b      	ldr	r3, [r7, #16]
 800b392:	68fa      	ldr	r2, [r7, #12]
 800b394:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 800b396:	4b24      	ldr	r3, [pc, #144]	; (800b428 <sys_timeout_abs+0xd8>)
 800b398:	681b      	ldr	r3, [r3, #0]
 800b39a:	2b00      	cmp	r3, #0
 800b39c:	d103      	bne.n	800b3a6 <sys_timeout_abs+0x56>
    next_timeout = timeout;
 800b39e:	4a22      	ldr	r2, [pc, #136]	; (800b428 <sys_timeout_abs+0xd8>)
 800b3a0:	693b      	ldr	r3, [r7, #16]
 800b3a2:	6013      	str	r3, [r2, #0]
    return;
 800b3a4:	e037      	b.n	800b416 <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 800b3a6:	693b      	ldr	r3, [r7, #16]
 800b3a8:	685a      	ldr	r2, [r3, #4]
 800b3aa:	4b1f      	ldr	r3, [pc, #124]	; (800b428 <sys_timeout_abs+0xd8>)
 800b3ac:	681b      	ldr	r3, [r3, #0]
 800b3ae:	685b      	ldr	r3, [r3, #4]
 800b3b0:	1ad3      	subs	r3, r2, r3
 800b3b2:	0fdb      	lsrs	r3, r3, #31
 800b3b4:	f003 0301 	and.w	r3, r3, #1
 800b3b8:	b2db      	uxtb	r3, r3
 800b3ba:	2b00      	cmp	r3, #0
 800b3bc:	d007      	beq.n	800b3ce <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 800b3be:	4b1a      	ldr	r3, [pc, #104]	; (800b428 <sys_timeout_abs+0xd8>)
 800b3c0:	681a      	ldr	r2, [r3, #0]
 800b3c2:	693b      	ldr	r3, [r7, #16]
 800b3c4:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 800b3c6:	4a18      	ldr	r2, [pc, #96]	; (800b428 <sys_timeout_abs+0xd8>)
 800b3c8:	693b      	ldr	r3, [r7, #16]
 800b3ca:	6013      	str	r3, [r2, #0]
 800b3cc:	e023      	b.n	800b416 <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 800b3ce:	4b16      	ldr	r3, [pc, #88]	; (800b428 <sys_timeout_abs+0xd8>)
 800b3d0:	681b      	ldr	r3, [r3, #0]
 800b3d2:	617b      	str	r3, [r7, #20]
 800b3d4:	e01a      	b.n	800b40c <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 800b3d6:	697b      	ldr	r3, [r7, #20]
 800b3d8:	681b      	ldr	r3, [r3, #0]
 800b3da:	2b00      	cmp	r3, #0
 800b3dc:	d00b      	beq.n	800b3f6 <sys_timeout_abs+0xa6>
 800b3de:	693b      	ldr	r3, [r7, #16]
 800b3e0:	685a      	ldr	r2, [r3, #4]
 800b3e2:	697b      	ldr	r3, [r7, #20]
 800b3e4:	681b      	ldr	r3, [r3, #0]
 800b3e6:	685b      	ldr	r3, [r3, #4]
 800b3e8:	1ad3      	subs	r3, r2, r3
 800b3ea:	0fdb      	lsrs	r3, r3, #31
 800b3ec:	f003 0301 	and.w	r3, r3, #1
 800b3f0:	b2db      	uxtb	r3, r3
 800b3f2:	2b00      	cmp	r3, #0
 800b3f4:	d007      	beq.n	800b406 <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 800b3f6:	697b      	ldr	r3, [r7, #20]
 800b3f8:	681a      	ldr	r2, [r3, #0]
 800b3fa:	693b      	ldr	r3, [r7, #16]
 800b3fc:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 800b3fe:	697b      	ldr	r3, [r7, #20]
 800b400:	693a      	ldr	r2, [r7, #16]
 800b402:	601a      	str	r2, [r3, #0]
        break;
 800b404:	e007      	b.n	800b416 <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 800b406:	697b      	ldr	r3, [r7, #20]
 800b408:	681b      	ldr	r3, [r3, #0]
 800b40a:	617b      	str	r3, [r7, #20]
 800b40c:	697b      	ldr	r3, [r7, #20]
 800b40e:	2b00      	cmp	r3, #0
 800b410:	d1e1      	bne.n	800b3d6 <sys_timeout_abs+0x86>
 800b412:	e000      	b.n	800b416 <sys_timeout_abs+0xc6>
    return;
 800b414:	bf00      	nop
      }
    }
  }
}
 800b416:	3718      	adds	r7, #24
 800b418:	46bd      	mov	sp, r7
 800b41a:	bd80      	pop	{r7, pc}
 800b41c:	080118a0 	.word	0x080118a0
 800b420:	080118d4 	.word	0x080118d4
 800b424:	08011914 	.word	0x08011914
 800b428:	2000833c 	.word	0x2000833c

0800b42c <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 800b42c:	b580      	push	{r7, lr}
 800b42e:	b086      	sub	sp, #24
 800b430:	af00      	add	r7, sp, #0
 800b432:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 800b434:	687b      	ldr	r3, [r7, #4]
 800b436:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 800b438:	697b      	ldr	r3, [r7, #20]
 800b43a:	685b      	ldr	r3, [r3, #4]
 800b43c:	4798      	blx	r3

  now = sys_now();
 800b43e:	f7f8 fd65 	bl	8003f0c <sys_now>
 800b442:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 800b444:	697b      	ldr	r3, [r7, #20]
 800b446:	681a      	ldr	r2, [r3, #0]
 800b448:	4b0f      	ldr	r3, [pc, #60]	; (800b488 <lwip_cyclic_timer+0x5c>)
 800b44a:	681b      	ldr	r3, [r3, #0]
 800b44c:	4413      	add	r3, r2
 800b44e:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 800b450:	68fa      	ldr	r2, [r7, #12]
 800b452:	693b      	ldr	r3, [r7, #16]
 800b454:	1ad3      	subs	r3, r2, r3
 800b456:	0fdb      	lsrs	r3, r3, #31
 800b458:	f003 0301 	and.w	r3, r3, #1
 800b45c:	b2db      	uxtb	r3, r3
 800b45e:	2b00      	cmp	r3, #0
 800b460:	d009      	beq.n	800b476 <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 800b462:	697b      	ldr	r3, [r7, #20]
 800b464:	681a      	ldr	r2, [r3, #0]
 800b466:	693b      	ldr	r3, [r7, #16]
 800b468:	4413      	add	r3, r2
 800b46a:	687a      	ldr	r2, [r7, #4]
 800b46c:	4907      	ldr	r1, [pc, #28]	; (800b48c <lwip_cyclic_timer+0x60>)
 800b46e:	4618      	mov	r0, r3
 800b470:	f7ff ff6e 	bl	800b350 <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 800b474:	e004      	b.n	800b480 <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 800b476:	687a      	ldr	r2, [r7, #4]
 800b478:	4904      	ldr	r1, [pc, #16]	; (800b48c <lwip_cyclic_timer+0x60>)
 800b47a:	68f8      	ldr	r0, [r7, #12]
 800b47c:	f7ff ff68 	bl	800b350 <sys_timeout_abs>
}
 800b480:	bf00      	nop
 800b482:	3718      	adds	r7, #24
 800b484:	46bd      	mov	sp, r7
 800b486:	bd80      	pop	{r7, pc}
 800b488:	20008340 	.word	0x20008340
 800b48c:	0800b42d 	.word	0x0800b42d

0800b490 <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 800b490:	b580      	push	{r7, lr}
 800b492:	b082      	sub	sp, #8
 800b494:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 800b496:	2301      	movs	r3, #1
 800b498:	607b      	str	r3, [r7, #4]
 800b49a:	e00e      	b.n	800b4ba <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 800b49c:	4a0b      	ldr	r2, [pc, #44]	; (800b4cc <sys_timeouts_init+0x3c>)
 800b49e:	687b      	ldr	r3, [r7, #4]
 800b4a0:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 800b4a4:	687b      	ldr	r3, [r7, #4]
 800b4a6:	00db      	lsls	r3, r3, #3
 800b4a8:	4a08      	ldr	r2, [pc, #32]	; (800b4cc <sys_timeouts_init+0x3c>)
 800b4aa:	4413      	add	r3, r2
 800b4ac:	461a      	mov	r2, r3
 800b4ae:	4908      	ldr	r1, [pc, #32]	; (800b4d0 <sys_timeouts_init+0x40>)
 800b4b0:	f000 f810 	bl	800b4d4 <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 800b4b4:	687b      	ldr	r3, [r7, #4]
 800b4b6:	3301      	adds	r3, #1
 800b4b8:	607b      	str	r3, [r7, #4]
 800b4ba:	687b      	ldr	r3, [r7, #4]
 800b4bc:	2b02      	cmp	r3, #2
 800b4be:	d9ed      	bls.n	800b49c <sys_timeouts_init+0xc>
  }
}
 800b4c0:	bf00      	nop
 800b4c2:	bf00      	nop
 800b4c4:	3708      	adds	r7, #8
 800b4c6:	46bd      	mov	sp, r7
 800b4c8:	bd80      	pop	{r7, pc}
 800b4ca:	bf00      	nop
 800b4cc:	0801248c 	.word	0x0801248c
 800b4d0:	0800b42d 	.word	0x0800b42d

0800b4d4 <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 800b4d4:	b580      	push	{r7, lr}
 800b4d6:	b086      	sub	sp, #24
 800b4d8:	af00      	add	r7, sp, #0
 800b4da:	60f8      	str	r0, [r7, #12]
 800b4dc:	60b9      	str	r1, [r7, #8]
 800b4de:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 800b4e0:	68fb      	ldr	r3, [r7, #12]
 800b4e2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b4e6:	d306      	bcc.n	800b4f6 <sys_timeout+0x22>
 800b4e8:	4b0a      	ldr	r3, [pc, #40]	; (800b514 <sys_timeout+0x40>)
 800b4ea:	f240 1229 	movw	r2, #297	; 0x129
 800b4ee:	490a      	ldr	r1, [pc, #40]	; (800b518 <sys_timeout+0x44>)
 800b4f0:	480a      	ldr	r0, [pc, #40]	; (800b51c <sys_timeout+0x48>)
 800b4f2:	f003 f915 	bl	800e720 <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 800b4f6:	f7f8 fd09 	bl	8003f0c <sys_now>
 800b4fa:	4602      	mov	r2, r0
 800b4fc:	68fb      	ldr	r3, [r7, #12]
 800b4fe:	4413      	add	r3, r2
 800b500:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 800b502:	687a      	ldr	r2, [r7, #4]
 800b504:	68b9      	ldr	r1, [r7, #8]
 800b506:	6978      	ldr	r0, [r7, #20]
 800b508:	f7ff ff22 	bl	800b350 <sys_timeout_abs>
#endif
}
 800b50c:	bf00      	nop
 800b50e:	3718      	adds	r7, #24
 800b510:	46bd      	mov	sp, r7
 800b512:	bd80      	pop	{r7, pc}
 800b514:	080118a0 	.word	0x080118a0
 800b518:	0801193c 	.word	0x0801193c
 800b51c:	08011914 	.word	0x08011914

0800b520 <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 800b520:	b580      	push	{r7, lr}
 800b522:	b084      	sub	sp, #16
 800b524:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 800b526:	f7f8 fcf1 	bl	8003f0c <sys_now>
 800b52a:	60f8      	str	r0, [r7, #12]
  do {
    struct sys_timeo *tmptimeout;
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();
 800b52c:	4b1a      	ldr	r3, [pc, #104]	; (800b598 <sys_check_timeouts+0x78>)
 800b52e:	781b      	ldrb	r3, [r3, #0]
 800b530:	b2db      	uxtb	r3, r3
 800b532:	2b00      	cmp	r3, #0
 800b534:	d001      	beq.n	800b53a <sys_check_timeouts+0x1a>
 800b536:	f7f9 ff25 	bl	8005384 <pbuf_free_ooseq>

    tmptimeout = next_timeout;
 800b53a:	4b18      	ldr	r3, [pc, #96]	; (800b59c <sys_check_timeouts+0x7c>)
 800b53c:	681b      	ldr	r3, [r3, #0]
 800b53e:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 800b540:	68bb      	ldr	r3, [r7, #8]
 800b542:	2b00      	cmp	r3, #0
 800b544:	d022      	beq.n	800b58c <sys_check_timeouts+0x6c>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 800b546:	68bb      	ldr	r3, [r7, #8]
 800b548:	685b      	ldr	r3, [r3, #4]
 800b54a:	68fa      	ldr	r2, [r7, #12]
 800b54c:	1ad3      	subs	r3, r2, r3
 800b54e:	0fdb      	lsrs	r3, r3, #31
 800b550:	f003 0301 	and.w	r3, r3, #1
 800b554:	b2db      	uxtb	r3, r3
 800b556:	2b00      	cmp	r3, #0
 800b558:	d11a      	bne.n	800b590 <sys_check_timeouts+0x70>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 800b55a:	68bb      	ldr	r3, [r7, #8]
 800b55c:	681b      	ldr	r3, [r3, #0]
 800b55e:	4a0f      	ldr	r2, [pc, #60]	; (800b59c <sys_check_timeouts+0x7c>)
 800b560:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 800b562:	68bb      	ldr	r3, [r7, #8]
 800b564:	689b      	ldr	r3, [r3, #8]
 800b566:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 800b568:	68bb      	ldr	r3, [r7, #8]
 800b56a:	68db      	ldr	r3, [r3, #12]
 800b56c:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 800b56e:	68bb      	ldr	r3, [r7, #8]
 800b570:	685b      	ldr	r3, [r3, #4]
 800b572:	4a0b      	ldr	r2, [pc, #44]	; (800b5a0 <sys_check_timeouts+0x80>)
 800b574:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 800b576:	68b9      	ldr	r1, [r7, #8]
 800b578:	2006      	movs	r0, #6
 800b57a:	f7f9 fbc7 	bl	8004d0c <memp_free>
    if (handler != NULL) {
 800b57e:	687b      	ldr	r3, [r7, #4]
 800b580:	2b00      	cmp	r3, #0
 800b582:	d0d3      	beq.n	800b52c <sys_check_timeouts+0xc>
      handler(arg);
 800b584:	687b      	ldr	r3, [r7, #4]
 800b586:	6838      	ldr	r0, [r7, #0]
 800b588:	4798      	blx	r3
  do {
 800b58a:	e7cf      	b.n	800b52c <sys_check_timeouts+0xc>
      return;
 800b58c:	bf00      	nop
 800b58e:	e000      	b.n	800b592 <sys_check_timeouts+0x72>
      return;
 800b590:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 800b592:	3710      	adds	r7, #16
 800b594:	46bd      	mov	sp, r7
 800b596:	bd80      	pop	{r7, pc}
 800b598:	200082e9 	.word	0x200082e9
 800b59c:	2000833c 	.word	0x2000833c
 800b5a0:	20008340 	.word	0x20008340

0800b5a4 <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 800b5a4:	b580      	push	{r7, lr}
 800b5a6:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 800b5a8:	f002 ffcc 	bl	800e544 <rand>
 800b5ac:	4603      	mov	r3, r0
 800b5ae:	b29b      	uxth	r3, r3
 800b5b0:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800b5b4:	b29b      	uxth	r3, r3
 800b5b6:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 800b5ba:	b29a      	uxth	r2, r3
 800b5bc:	4b01      	ldr	r3, [pc, #4]	; (800b5c4 <udp_init+0x20>)
 800b5be:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 800b5c0:	bf00      	nop
 800b5c2:	bd80      	pop	{r7, pc}
 800b5c4:	20000028 	.word	0x20000028

0800b5c8 <udp_new_port>:
 *
 * @return a new (free) local UDP port number
 */
static u16_t
udp_new_port(void)
{
 800b5c8:	b480      	push	{r7}
 800b5ca:	b083      	sub	sp, #12
 800b5cc:	af00      	add	r7, sp, #0
  u16_t n = 0;
 800b5ce:	2300      	movs	r3, #0
 800b5d0:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *pcb;

again:
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 800b5d2:	4b17      	ldr	r3, [pc, #92]	; (800b630 <udp_new_port+0x68>)
 800b5d4:	881b      	ldrh	r3, [r3, #0]
 800b5d6:	1c5a      	adds	r2, r3, #1
 800b5d8:	b291      	uxth	r1, r2
 800b5da:	4a15      	ldr	r2, [pc, #84]	; (800b630 <udp_new_port+0x68>)
 800b5dc:	8011      	strh	r1, [r2, #0]
 800b5de:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800b5e2:	4293      	cmp	r3, r2
 800b5e4:	d103      	bne.n	800b5ee <udp_new_port+0x26>
    udp_port = UDP_LOCAL_PORT_RANGE_START;
 800b5e6:	4b12      	ldr	r3, [pc, #72]	; (800b630 <udp_new_port+0x68>)
 800b5e8:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 800b5ec:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCBs. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800b5ee:	4b11      	ldr	r3, [pc, #68]	; (800b634 <udp_new_port+0x6c>)
 800b5f0:	681b      	ldr	r3, [r3, #0]
 800b5f2:	603b      	str	r3, [r7, #0]
 800b5f4:	e011      	b.n	800b61a <udp_new_port+0x52>
    if (pcb->local_port == udp_port) {
 800b5f6:	683b      	ldr	r3, [r7, #0]
 800b5f8:	8a5a      	ldrh	r2, [r3, #18]
 800b5fa:	4b0d      	ldr	r3, [pc, #52]	; (800b630 <udp_new_port+0x68>)
 800b5fc:	881b      	ldrh	r3, [r3, #0]
 800b5fe:	429a      	cmp	r2, r3
 800b600:	d108      	bne.n	800b614 <udp_new_port+0x4c>
      if (++n > (UDP_LOCAL_PORT_RANGE_END - UDP_LOCAL_PORT_RANGE_START)) {
 800b602:	88fb      	ldrh	r3, [r7, #6]
 800b604:	3301      	adds	r3, #1
 800b606:	80fb      	strh	r3, [r7, #6]
 800b608:	88fb      	ldrh	r3, [r7, #6]
 800b60a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b60e:	d3e0      	bcc.n	800b5d2 <udp_new_port+0xa>
        return 0;
 800b610:	2300      	movs	r3, #0
 800b612:	e007      	b.n	800b624 <udp_new_port+0x5c>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800b614:	683b      	ldr	r3, [r7, #0]
 800b616:	68db      	ldr	r3, [r3, #12]
 800b618:	603b      	str	r3, [r7, #0]
 800b61a:	683b      	ldr	r3, [r7, #0]
 800b61c:	2b00      	cmp	r3, #0
 800b61e:	d1ea      	bne.n	800b5f6 <udp_new_port+0x2e>
      }
      goto again;
    }
  }
  return udp_port;
 800b620:	4b03      	ldr	r3, [pc, #12]	; (800b630 <udp_new_port+0x68>)
 800b622:	881b      	ldrh	r3, [r3, #0]
}
 800b624:	4618      	mov	r0, r3
 800b626:	370c      	adds	r7, #12
 800b628:	46bd      	mov	sp, r7
 800b62a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b62e:	4770      	bx	lr
 800b630:	20000028 	.word	0x20000028
 800b634:	20008348 	.word	0x20008348

0800b638 <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 800b638:	b580      	push	{r7, lr}
 800b63a:	b084      	sub	sp, #16
 800b63c:	af00      	add	r7, sp, #0
 800b63e:	60f8      	str	r0, [r7, #12]
 800b640:	60b9      	str	r1, [r7, #8]
 800b642:	4613      	mov	r3, r2
 800b644:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 800b646:	68fb      	ldr	r3, [r7, #12]
 800b648:	2b00      	cmp	r3, #0
 800b64a:	d105      	bne.n	800b658 <udp_input_local_match+0x20>
 800b64c:	4b27      	ldr	r3, [pc, #156]	; (800b6ec <udp_input_local_match+0xb4>)
 800b64e:	2287      	movs	r2, #135	; 0x87
 800b650:	4927      	ldr	r1, [pc, #156]	; (800b6f0 <udp_input_local_match+0xb8>)
 800b652:	4828      	ldr	r0, [pc, #160]	; (800b6f4 <udp_input_local_match+0xbc>)
 800b654:	f003 f864 	bl	800e720 <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 800b658:	68bb      	ldr	r3, [r7, #8]
 800b65a:	2b00      	cmp	r3, #0
 800b65c:	d105      	bne.n	800b66a <udp_input_local_match+0x32>
 800b65e:	4b23      	ldr	r3, [pc, #140]	; (800b6ec <udp_input_local_match+0xb4>)
 800b660:	2288      	movs	r2, #136	; 0x88
 800b662:	4925      	ldr	r1, [pc, #148]	; (800b6f8 <udp_input_local_match+0xc0>)
 800b664:	4823      	ldr	r0, [pc, #140]	; (800b6f4 <udp_input_local_match+0xbc>)
 800b666:	f003 f85b 	bl	800e720 <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800b66a:	68fb      	ldr	r3, [r7, #12]
 800b66c:	7a1b      	ldrb	r3, [r3, #8]
 800b66e:	2b00      	cmp	r3, #0
 800b670:	d00b      	beq.n	800b68a <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800b672:	68fb      	ldr	r3, [r7, #12]
 800b674:	7a1a      	ldrb	r2, [r3, #8]
 800b676:	4b21      	ldr	r3, [pc, #132]	; (800b6fc <udp_input_local_match+0xc4>)
 800b678:	685b      	ldr	r3, [r3, #4]
 800b67a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800b67e:	3301      	adds	r3, #1
 800b680:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800b682:	429a      	cmp	r2, r3
 800b684:	d001      	beq.n	800b68a <udp_input_local_match+0x52>
    return 0;
 800b686:	2300      	movs	r3, #0
 800b688:	e02b      	b.n	800b6e2 <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 800b68a:	79fb      	ldrb	r3, [r7, #7]
 800b68c:	2b00      	cmp	r3, #0
 800b68e:	d018      	beq.n	800b6c2 <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800b690:	68fb      	ldr	r3, [r7, #12]
 800b692:	2b00      	cmp	r3, #0
 800b694:	d013      	beq.n	800b6be <udp_input_local_match+0x86>
 800b696:	68fb      	ldr	r3, [r7, #12]
 800b698:	681b      	ldr	r3, [r3, #0]
 800b69a:	2b00      	cmp	r3, #0
 800b69c:	d00f      	beq.n	800b6be <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 800b69e:	4b17      	ldr	r3, [pc, #92]	; (800b6fc <udp_input_local_match+0xc4>)
 800b6a0:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800b6a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b6a6:	d00a      	beq.n	800b6be <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 800b6a8:	68fb      	ldr	r3, [r7, #12]
 800b6aa:	681a      	ldr	r2, [r3, #0]
 800b6ac:	4b13      	ldr	r3, [pc, #76]	; (800b6fc <udp_input_local_match+0xc4>)
 800b6ae:	695b      	ldr	r3, [r3, #20]
 800b6b0:	405a      	eors	r2, r3
 800b6b2:	68bb      	ldr	r3, [r7, #8]
 800b6b4:	3308      	adds	r3, #8
 800b6b6:	681b      	ldr	r3, [r3, #0]
 800b6b8:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 800b6ba:	2b00      	cmp	r3, #0
 800b6bc:	d110      	bne.n	800b6e0 <udp_input_local_match+0xa8>
          return 1;
 800b6be:	2301      	movs	r3, #1
 800b6c0:	e00f      	b.n	800b6e2 <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800b6c2:	68fb      	ldr	r3, [r7, #12]
 800b6c4:	2b00      	cmp	r3, #0
 800b6c6:	d009      	beq.n	800b6dc <udp_input_local_match+0xa4>
 800b6c8:	68fb      	ldr	r3, [r7, #12]
 800b6ca:	681b      	ldr	r3, [r3, #0]
 800b6cc:	2b00      	cmp	r3, #0
 800b6ce:	d005      	beq.n	800b6dc <udp_input_local_match+0xa4>
 800b6d0:	68fb      	ldr	r3, [r7, #12]
 800b6d2:	681a      	ldr	r2, [r3, #0]
 800b6d4:	4b09      	ldr	r3, [pc, #36]	; (800b6fc <udp_input_local_match+0xc4>)
 800b6d6:	695b      	ldr	r3, [r3, #20]
 800b6d8:	429a      	cmp	r2, r3
 800b6da:	d101      	bne.n	800b6e0 <udp_input_local_match+0xa8>
        return 1;
 800b6dc:	2301      	movs	r3, #1
 800b6de:	e000      	b.n	800b6e2 <udp_input_local_match+0xaa>
      }
  }

  return 0;
 800b6e0:	2300      	movs	r3, #0
}
 800b6e2:	4618      	mov	r0, r3
 800b6e4:	3710      	adds	r7, #16
 800b6e6:	46bd      	mov	sp, r7
 800b6e8:	bd80      	pop	{r7, pc}
 800b6ea:	bf00      	nop
 800b6ec:	08011988 	.word	0x08011988
 800b6f0:	080119b8 	.word	0x080119b8
 800b6f4:	080119dc 	.word	0x080119dc
 800b6f8:	08011a04 	.word	0x08011a04
 800b6fc:	20004d7c 	.word	0x20004d7c

0800b700 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 800b700:	b590      	push	{r4, r7, lr}
 800b702:	b08d      	sub	sp, #52	; 0x34
 800b704:	af02      	add	r7, sp, #8
 800b706:	6078      	str	r0, [r7, #4]
 800b708:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 800b70a:	2300      	movs	r3, #0
 800b70c:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 800b70e:	687b      	ldr	r3, [r7, #4]
 800b710:	2b00      	cmp	r3, #0
 800b712:	d105      	bne.n	800b720 <udp_input+0x20>
 800b714:	4b7c      	ldr	r3, [pc, #496]	; (800b908 <udp_input+0x208>)
 800b716:	22cf      	movs	r2, #207	; 0xcf
 800b718:	497c      	ldr	r1, [pc, #496]	; (800b90c <udp_input+0x20c>)
 800b71a:	487d      	ldr	r0, [pc, #500]	; (800b910 <udp_input+0x210>)
 800b71c:	f003 f800 	bl	800e720 <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 800b720:	683b      	ldr	r3, [r7, #0]
 800b722:	2b00      	cmp	r3, #0
 800b724:	d105      	bne.n	800b732 <udp_input+0x32>
 800b726:	4b78      	ldr	r3, [pc, #480]	; (800b908 <udp_input+0x208>)
 800b728:	22d0      	movs	r2, #208	; 0xd0
 800b72a:	497a      	ldr	r1, [pc, #488]	; (800b914 <udp_input+0x214>)
 800b72c:	4878      	ldr	r0, [pc, #480]	; (800b910 <udp_input+0x210>)
 800b72e:	f002 fff7 	bl	800e720 <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 800b732:	687b      	ldr	r3, [r7, #4]
 800b734:	895b      	ldrh	r3, [r3, #10]
 800b736:	2b07      	cmp	r3, #7
 800b738:	d803      	bhi.n	800b742 <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 800b73a:	6878      	ldr	r0, [r7, #4]
 800b73c:	f7fa f95c 	bl	80059f8 <pbuf_free>
    goto end;
 800b740:	e0de      	b.n	800b900 <udp_input+0x200>
  }

  udphdr = (struct udp_hdr *)p->payload;
 800b742:	687b      	ldr	r3, [r7, #4]
 800b744:	685b      	ldr	r3, [r3, #4]
 800b746:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 800b748:	4b73      	ldr	r3, [pc, #460]	; (800b918 <udp_input+0x218>)
 800b74a:	695b      	ldr	r3, [r3, #20]
 800b74c:	4a72      	ldr	r2, [pc, #456]	; (800b918 <udp_input+0x218>)
 800b74e:	6812      	ldr	r2, [r2, #0]
 800b750:	4611      	mov	r1, r2
 800b752:	4618      	mov	r0, r3
 800b754:	f001 ffa0 	bl	800d698 <ip4_addr_isbroadcast_u32>
 800b758:	4603      	mov	r3, r0
 800b75a:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 800b75c:	697b      	ldr	r3, [r7, #20]
 800b75e:	881b      	ldrh	r3, [r3, #0]
 800b760:	b29b      	uxth	r3, r3
 800b762:	4618      	mov	r0, r3
 800b764:	f7f8 fdea 	bl	800433c <lwip_htons>
 800b768:	4603      	mov	r3, r0
 800b76a:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 800b76c:	697b      	ldr	r3, [r7, #20]
 800b76e:	885b      	ldrh	r3, [r3, #2]
 800b770:	b29b      	uxth	r3, r3
 800b772:	4618      	mov	r0, r3
 800b774:	f7f8 fde2 	bl	800433c <lwip_htons>
 800b778:	4603      	mov	r3, r0
 800b77a:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 800b77c:	2300      	movs	r3, #0
 800b77e:	627b      	str	r3, [r7, #36]	; 0x24
  prev = NULL;
 800b780:	2300      	movs	r3, #0
 800b782:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 800b784:	2300      	movs	r3, #0
 800b786:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800b788:	4b64      	ldr	r3, [pc, #400]	; (800b91c <udp_input+0x21c>)
 800b78a:	681b      	ldr	r3, [r3, #0]
 800b78c:	627b      	str	r3, [r7, #36]	; 0x24
 800b78e:	e054      	b.n	800b83a <udp_input+0x13a>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 800b790:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b792:	8a5b      	ldrh	r3, [r3, #18]
 800b794:	89fa      	ldrh	r2, [r7, #14]
 800b796:	429a      	cmp	r2, r3
 800b798:	d14a      	bne.n	800b830 <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 800b79a:	7cfb      	ldrb	r3, [r7, #19]
 800b79c:	461a      	mov	r2, r3
 800b79e:	6839      	ldr	r1, [r7, #0]
 800b7a0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800b7a2:	f7ff ff49 	bl	800b638 <udp_input_local_match>
 800b7a6:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 800b7a8:	2b00      	cmp	r3, #0
 800b7aa:	d041      	beq.n	800b830 <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 800b7ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b7ae:	7c1b      	ldrb	r3, [r3, #16]
 800b7b0:	f003 0304 	and.w	r3, r3, #4
 800b7b4:	2b00      	cmp	r3, #0
 800b7b6:	d11d      	bne.n	800b7f4 <udp_input+0xf4>
        if (uncon_pcb == NULL) {
 800b7b8:	69fb      	ldr	r3, [r7, #28]
 800b7ba:	2b00      	cmp	r3, #0
 800b7bc:	d102      	bne.n	800b7c4 <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 800b7be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b7c0:	61fb      	str	r3, [r7, #28]
 800b7c2:	e017      	b.n	800b7f4 <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 800b7c4:	7cfb      	ldrb	r3, [r7, #19]
 800b7c6:	2b00      	cmp	r3, #0
 800b7c8:	d014      	beq.n	800b7f4 <udp_input+0xf4>
 800b7ca:	4b53      	ldr	r3, [pc, #332]	; (800b918 <udp_input+0x218>)
 800b7cc:	695b      	ldr	r3, [r3, #20]
 800b7ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b7d2:	d10f      	bne.n	800b7f4 <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 800b7d4:	69fb      	ldr	r3, [r7, #28]
 800b7d6:	681a      	ldr	r2, [r3, #0]
 800b7d8:	683b      	ldr	r3, [r7, #0]
 800b7da:	3304      	adds	r3, #4
 800b7dc:	681b      	ldr	r3, [r3, #0]
 800b7de:	429a      	cmp	r2, r3
 800b7e0:	d008      	beq.n	800b7f4 <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 800b7e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b7e4:	681a      	ldr	r2, [r3, #0]
 800b7e6:	683b      	ldr	r3, [r7, #0]
 800b7e8:	3304      	adds	r3, #4
 800b7ea:	681b      	ldr	r3, [r3, #0]
 800b7ec:	429a      	cmp	r2, r3
 800b7ee:	d101      	bne.n	800b7f4 <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
 800b7f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b7f2:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 800b7f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b7f6:	8a9b      	ldrh	r3, [r3, #20]
 800b7f8:	8a3a      	ldrh	r2, [r7, #16]
 800b7fa:	429a      	cmp	r2, r3
 800b7fc:	d118      	bne.n	800b830 <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
 800b7fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b800:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 800b802:	2b00      	cmp	r3, #0
 800b804:	d005      	beq.n	800b812 <udp_input+0x112>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 800b806:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b808:	685a      	ldr	r2, [r3, #4]
 800b80a:	4b43      	ldr	r3, [pc, #268]	; (800b918 <udp_input+0x218>)
 800b80c:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 800b80e:	429a      	cmp	r2, r3
 800b810:	d10e      	bne.n	800b830 <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
 800b812:	6a3b      	ldr	r3, [r7, #32]
 800b814:	2b00      	cmp	r3, #0
 800b816:	d014      	beq.n	800b842 <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 800b818:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b81a:	68da      	ldr	r2, [r3, #12]
 800b81c:	6a3b      	ldr	r3, [r7, #32]
 800b81e:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 800b820:	4b3e      	ldr	r3, [pc, #248]	; (800b91c <udp_input+0x21c>)
 800b822:	681a      	ldr	r2, [r3, #0]
 800b824:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b826:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 800b828:	4a3c      	ldr	r2, [pc, #240]	; (800b91c <udp_input+0x21c>)
 800b82a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b82c:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 800b82e:	e008      	b.n	800b842 <udp_input+0x142>
      }
    }

    prev = pcb;
 800b830:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b832:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800b834:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b836:	68db      	ldr	r3, [r3, #12]
 800b838:	627b      	str	r3, [r7, #36]	; 0x24
 800b83a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b83c:	2b00      	cmp	r3, #0
 800b83e:	d1a7      	bne.n	800b790 <udp_input+0x90>
 800b840:	e000      	b.n	800b844 <udp_input+0x144>
        break;
 800b842:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 800b844:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b846:	2b00      	cmp	r3, #0
 800b848:	d101      	bne.n	800b84e <udp_input+0x14e>
    pcb = uncon_pcb;
 800b84a:	69fb      	ldr	r3, [r7, #28]
 800b84c:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 800b84e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b850:	2b00      	cmp	r3, #0
 800b852:	d002      	beq.n	800b85a <udp_input+0x15a>
    for_us = 1;
 800b854:	2301      	movs	r3, #1
 800b856:	76fb      	strb	r3, [r7, #27]
 800b858:	e00a      	b.n	800b870 <udp_input+0x170>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 800b85a:	683b      	ldr	r3, [r7, #0]
 800b85c:	3304      	adds	r3, #4
 800b85e:	681a      	ldr	r2, [r3, #0]
 800b860:	4b2d      	ldr	r3, [pc, #180]	; (800b918 <udp_input+0x218>)
 800b862:	695b      	ldr	r3, [r3, #20]
 800b864:	429a      	cmp	r2, r3
 800b866:	bf0c      	ite	eq
 800b868:	2301      	moveq	r3, #1
 800b86a:	2300      	movne	r3, #0
 800b86c:	b2db      	uxtb	r3, r3
 800b86e:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 800b870:	7efb      	ldrb	r3, [r7, #27]
 800b872:	2b00      	cmp	r3, #0
 800b874:	d041      	beq.n	800b8fa <udp_input+0x1fa>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 800b876:	2108      	movs	r1, #8
 800b878:	6878      	ldr	r0, [r7, #4]
 800b87a:	f7fa f837 	bl	80058ec <pbuf_remove_header>
 800b87e:	4603      	mov	r3, r0
 800b880:	2b00      	cmp	r3, #0
 800b882:	d00a      	beq.n	800b89a <udp_input+0x19a>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 800b884:	4b20      	ldr	r3, [pc, #128]	; (800b908 <udp_input+0x208>)
 800b886:	f44f 72b8 	mov.w	r2, #368	; 0x170
 800b88a:	4925      	ldr	r1, [pc, #148]	; (800b920 <udp_input+0x220>)
 800b88c:	4820      	ldr	r0, [pc, #128]	; (800b910 <udp_input+0x210>)
 800b88e:	f002 ff47 	bl	800e720 <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 800b892:	6878      	ldr	r0, [r7, #4]
 800b894:	f7fa f8b0 	bl	80059f8 <pbuf_free>
      goto end;
 800b898:	e032      	b.n	800b900 <udp_input+0x200>
    }

    if (pcb != NULL) {
 800b89a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b89c:	2b00      	cmp	r3, #0
 800b89e:	d012      	beq.n	800b8c6 <udp_input+0x1c6>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 800b8a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b8a2:	699b      	ldr	r3, [r3, #24]
 800b8a4:	2b00      	cmp	r3, #0
 800b8a6:	d00a      	beq.n	800b8be <udp_input+0x1be>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 800b8a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b8aa:	699c      	ldr	r4, [r3, #24]
 800b8ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b8ae:	69d8      	ldr	r0, [r3, #28]
 800b8b0:	8a3b      	ldrh	r3, [r7, #16]
 800b8b2:	9300      	str	r3, [sp, #0]
 800b8b4:	4b1b      	ldr	r3, [pc, #108]	; (800b924 <udp_input+0x224>)
 800b8b6:	687a      	ldr	r2, [r7, #4]
 800b8b8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800b8ba:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 800b8bc:	e021      	b.n	800b902 <udp_input+0x202>
        pbuf_free(p);
 800b8be:	6878      	ldr	r0, [r7, #4]
 800b8c0:	f7fa f89a 	bl	80059f8 <pbuf_free>
        goto end;
 800b8c4:	e01c      	b.n	800b900 <udp_input+0x200>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 800b8c6:	7cfb      	ldrb	r3, [r7, #19]
 800b8c8:	2b00      	cmp	r3, #0
 800b8ca:	d112      	bne.n	800b8f2 <udp_input+0x1f2>
 800b8cc:	4b12      	ldr	r3, [pc, #72]	; (800b918 <udp_input+0x218>)
 800b8ce:	695b      	ldr	r3, [r3, #20]
 800b8d0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800b8d4:	2be0      	cmp	r3, #224	; 0xe0
 800b8d6:	d00c      	beq.n	800b8f2 <udp_input+0x1f2>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 800b8d8:	4b0f      	ldr	r3, [pc, #60]	; (800b918 <udp_input+0x218>)
 800b8da:	899b      	ldrh	r3, [r3, #12]
 800b8dc:	3308      	adds	r3, #8
 800b8de:	b29b      	uxth	r3, r3
 800b8e0:	b21b      	sxth	r3, r3
 800b8e2:	4619      	mov	r1, r3
 800b8e4:	6878      	ldr	r0, [r7, #4]
 800b8e6:	f7fa f874 	bl	80059d2 <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 800b8ea:	2103      	movs	r1, #3
 800b8ec:	6878      	ldr	r0, [r7, #4]
 800b8ee:	f001 fbb3 	bl	800d058 <icmp_dest_unreach>
      pbuf_free(p);
 800b8f2:	6878      	ldr	r0, [r7, #4]
 800b8f4:	f7fa f880 	bl	80059f8 <pbuf_free>
  return;
 800b8f8:	e003      	b.n	800b902 <udp_input+0x202>
    pbuf_free(p);
 800b8fa:	6878      	ldr	r0, [r7, #4]
 800b8fc:	f7fa f87c 	bl	80059f8 <pbuf_free>
  return;
 800b900:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 800b902:	372c      	adds	r7, #44	; 0x2c
 800b904:	46bd      	mov	sp, r7
 800b906:	bd90      	pop	{r4, r7, pc}
 800b908:	08011988 	.word	0x08011988
 800b90c:	08011a2c 	.word	0x08011a2c
 800b910:	080119dc 	.word	0x080119dc
 800b914:	08011a44 	.word	0x08011a44
 800b918:	20004d7c 	.word	0x20004d7c
 800b91c:	20008348 	.word	0x20008348
 800b920:	08011a60 	.word	0x08011a60
 800b924:	20004d8c 	.word	0x20004d8c

0800b928 <udp_send>:
 *
 * @see udp_disconnect() udp_sendto()
 */
err_t
udp_send(struct udp_pcb *pcb, struct pbuf *p)
{
 800b928:	b580      	push	{r7, lr}
 800b92a:	b082      	sub	sp, #8
 800b92c:	af00      	add	r7, sp, #0
 800b92e:	6078      	str	r0, [r7, #4]
 800b930:	6039      	str	r1, [r7, #0]
  LWIP_ERROR("udp_send: invalid pcb", pcb != NULL, return ERR_ARG);
 800b932:	687b      	ldr	r3, [r7, #4]
 800b934:	2b00      	cmp	r3, #0
 800b936:	d109      	bne.n	800b94c <udp_send+0x24>
 800b938:	4b11      	ldr	r3, [pc, #68]	; (800b980 <udp_send+0x58>)
 800b93a:	f240 12d5 	movw	r2, #469	; 0x1d5
 800b93e:	4911      	ldr	r1, [pc, #68]	; (800b984 <udp_send+0x5c>)
 800b940:	4811      	ldr	r0, [pc, #68]	; (800b988 <udp_send+0x60>)
 800b942:	f002 feed 	bl	800e720 <iprintf>
 800b946:	f06f 030f 	mvn.w	r3, #15
 800b94a:	e015      	b.n	800b978 <udp_send+0x50>
  LWIP_ERROR("udp_send: invalid pbuf", p != NULL, return ERR_ARG);
 800b94c:	683b      	ldr	r3, [r7, #0]
 800b94e:	2b00      	cmp	r3, #0
 800b950:	d109      	bne.n	800b966 <udp_send+0x3e>
 800b952:	4b0b      	ldr	r3, [pc, #44]	; (800b980 <udp_send+0x58>)
 800b954:	f44f 72eb 	mov.w	r2, #470	; 0x1d6
 800b958:	490c      	ldr	r1, [pc, #48]	; (800b98c <udp_send+0x64>)
 800b95a:	480b      	ldr	r0, [pc, #44]	; (800b988 <udp_send+0x60>)
 800b95c:	f002 fee0 	bl	800e720 <iprintf>
 800b960:	f06f 030f 	mvn.w	r3, #15
 800b964:	e008      	b.n	800b978 <udp_send+0x50>
  if (IP_IS_ANY_TYPE_VAL(pcb->remote_ip)) {
    return ERR_VAL;
  }

  /* send to the packet using remote ip and port stored in the pcb */
  return udp_sendto(pcb, p, &pcb->remote_ip, pcb->remote_port);
 800b966:	687b      	ldr	r3, [r7, #4]
 800b968:	1d1a      	adds	r2, r3, #4
 800b96a:	687b      	ldr	r3, [r7, #4]
 800b96c:	8a9b      	ldrh	r3, [r3, #20]
 800b96e:	6839      	ldr	r1, [r7, #0]
 800b970:	6878      	ldr	r0, [r7, #4]
 800b972:	f000 f80d 	bl	800b990 <udp_sendto>
 800b976:	4603      	mov	r3, r0
}
 800b978:	4618      	mov	r0, r3
 800b97a:	3708      	adds	r7, #8
 800b97c:	46bd      	mov	sp, r7
 800b97e:	bd80      	pop	{r7, pc}
 800b980:	08011988 	.word	0x08011988
 800b984:	08011a7c 	.word	0x08011a7c
 800b988:	080119dc 	.word	0x080119dc
 800b98c:	08011a94 	.word	0x08011a94

0800b990 <udp_sendto>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto(struct udp_pcb *pcb, struct pbuf *p,
           const ip_addr_t *dst_ip, u16_t dst_port)
{
 800b990:	b580      	push	{r7, lr}
 800b992:	b088      	sub	sp, #32
 800b994:	af02      	add	r7, sp, #8
 800b996:	60f8      	str	r0, [r7, #12]
 800b998:	60b9      	str	r1, [r7, #8]
 800b99a:	607a      	str	r2, [r7, #4]
 800b99c:	807b      	strh	r3, [r7, #2]
                  u16_t dst_port, u8_t have_chksum, u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  struct netif *netif;

  LWIP_ERROR("udp_sendto: invalid pcb", pcb != NULL, return ERR_ARG);
 800b99e:	68fb      	ldr	r3, [r7, #12]
 800b9a0:	2b00      	cmp	r3, #0
 800b9a2:	d109      	bne.n	800b9b8 <udp_sendto+0x28>
 800b9a4:	4b23      	ldr	r3, [pc, #140]	; (800ba34 <udp_sendto+0xa4>)
 800b9a6:	f44f 7206 	mov.w	r2, #536	; 0x218
 800b9aa:	4923      	ldr	r1, [pc, #140]	; (800ba38 <udp_sendto+0xa8>)
 800b9ac:	4823      	ldr	r0, [pc, #140]	; (800ba3c <udp_sendto+0xac>)
 800b9ae:	f002 feb7 	bl	800e720 <iprintf>
 800b9b2:	f06f 030f 	mvn.w	r3, #15
 800b9b6:	e038      	b.n	800ba2a <udp_sendto+0x9a>
  LWIP_ERROR("udp_sendto: invalid pbuf", p != NULL, return ERR_ARG);
 800b9b8:	68bb      	ldr	r3, [r7, #8]
 800b9ba:	2b00      	cmp	r3, #0
 800b9bc:	d109      	bne.n	800b9d2 <udp_sendto+0x42>
 800b9be:	4b1d      	ldr	r3, [pc, #116]	; (800ba34 <udp_sendto+0xa4>)
 800b9c0:	f240 2219 	movw	r2, #537	; 0x219
 800b9c4:	491e      	ldr	r1, [pc, #120]	; (800ba40 <udp_sendto+0xb0>)
 800b9c6:	481d      	ldr	r0, [pc, #116]	; (800ba3c <udp_sendto+0xac>)
 800b9c8:	f002 feaa 	bl	800e720 <iprintf>
 800b9cc:	f06f 030f 	mvn.w	r3, #15
 800b9d0:	e02b      	b.n	800ba2a <udp_sendto+0x9a>
  LWIP_ERROR("udp_sendto: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 800b9d2:	687b      	ldr	r3, [r7, #4]
 800b9d4:	2b00      	cmp	r3, #0
 800b9d6:	d109      	bne.n	800b9ec <udp_sendto+0x5c>
 800b9d8:	4b16      	ldr	r3, [pc, #88]	; (800ba34 <udp_sendto+0xa4>)
 800b9da:	f240 221a 	movw	r2, #538	; 0x21a
 800b9de:	4919      	ldr	r1, [pc, #100]	; (800ba44 <udp_sendto+0xb4>)
 800b9e0:	4816      	ldr	r0, [pc, #88]	; (800ba3c <udp_sendto+0xac>)
 800b9e2:	f002 fe9d 	bl	800e720 <iprintf>
 800b9e6:	f06f 030f 	mvn.w	r3, #15
 800b9ea:	e01e      	b.n	800ba2a <udp_sendto+0x9a>
    return ERR_VAL;
  }

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send\n"));

  if (pcb->netif_idx != NETIF_NO_INDEX) {
 800b9ec:	68fb      	ldr	r3, [r7, #12]
 800b9ee:	7a1b      	ldrb	r3, [r3, #8]
 800b9f0:	2b00      	cmp	r3, #0
 800b9f2:	d006      	beq.n	800ba02 <udp_sendto+0x72>
    netif = netif_get_by_index(pcb->netif_idx);
 800b9f4:	68fb      	ldr	r3, [r7, #12]
 800b9f6:	7a1b      	ldrb	r3, [r3, #8]
 800b9f8:	4618      	mov	r0, r3
 800b9fa:	f7f9 fc9d 	bl	8005338 <netif_get_by_index>
 800b9fe:	6178      	str	r0, [r7, #20]
 800ba00:	e003      	b.n	800ba0a <udp_sendto+0x7a>

    if (netif == NULL)
#endif /* LWIP_MULTICAST_TX_OPTIONS */
    {
      /* find the outgoing network interface for this packet */
      netif = ip_route(&pcb->local_ip, dst_ip);
 800ba02:	6878      	ldr	r0, [r7, #4]
 800ba04:	f001 fbb2 	bl	800d16c <ip4_route>
 800ba08:	6178      	str	r0, [r7, #20]
    }
  }

  /* no outgoing network interface could be found? */
  if (netif == NULL) {
 800ba0a:	697b      	ldr	r3, [r7, #20]
 800ba0c:	2b00      	cmp	r3, #0
 800ba0e:	d102      	bne.n	800ba16 <udp_sendto+0x86>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: No route to "));
    ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, dst_ip);
    LWIP_DEBUGF(UDP_DEBUG, ("\n"));
    UDP_STATS_INC(udp.rterr);
    return ERR_RTE;
 800ba10:	f06f 0303 	mvn.w	r3, #3
 800ba14:	e009      	b.n	800ba2a <udp_sendto+0x9a>
  }
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if(pcb, p, dst_ip, dst_port, netif);
 800ba16:	887a      	ldrh	r2, [r7, #2]
 800ba18:	697b      	ldr	r3, [r7, #20]
 800ba1a:	9300      	str	r3, [sp, #0]
 800ba1c:	4613      	mov	r3, r2
 800ba1e:	687a      	ldr	r2, [r7, #4]
 800ba20:	68b9      	ldr	r1, [r7, #8]
 800ba22:	68f8      	ldr	r0, [r7, #12]
 800ba24:	f000 f810 	bl	800ba48 <udp_sendto_if>
 800ba28:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 800ba2a:	4618      	mov	r0, r3
 800ba2c:	3718      	adds	r7, #24
 800ba2e:	46bd      	mov	sp, r7
 800ba30:	bd80      	pop	{r7, pc}
 800ba32:	bf00      	nop
 800ba34:	08011988 	.word	0x08011988
 800ba38:	08011aac 	.word	0x08011aac
 800ba3c:	080119dc 	.word	0x080119dc
 800ba40:	08011ac4 	.word	0x08011ac4
 800ba44:	08011ae0 	.word	0x08011ae0

0800ba48 <udp_sendto_if>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto_if(struct udp_pcb *pcb, struct pbuf *p,
              const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif)
{
 800ba48:	b580      	push	{r7, lr}
 800ba4a:	b088      	sub	sp, #32
 800ba4c:	af02      	add	r7, sp, #8
 800ba4e:	60f8      	str	r0, [r7, #12]
 800ba50:	60b9      	str	r1, [r7, #8]
 800ba52:	607a      	str	r2, [r7, #4]
 800ba54:	807b      	strh	r3, [r7, #2]
                     u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  const ip_addr_t *src_ip;

  LWIP_ERROR("udp_sendto_if: invalid pcb", pcb != NULL, return ERR_ARG);
 800ba56:	68fb      	ldr	r3, [r7, #12]
 800ba58:	2b00      	cmp	r3, #0
 800ba5a:	d109      	bne.n	800ba70 <udp_sendto_if+0x28>
 800ba5c:	4b2e      	ldr	r3, [pc, #184]	; (800bb18 <udp_sendto_if+0xd0>)
 800ba5e:	f44f 7220 	mov.w	r2, #640	; 0x280
 800ba62:	492e      	ldr	r1, [pc, #184]	; (800bb1c <udp_sendto_if+0xd4>)
 800ba64:	482e      	ldr	r0, [pc, #184]	; (800bb20 <udp_sendto_if+0xd8>)
 800ba66:	f002 fe5b 	bl	800e720 <iprintf>
 800ba6a:	f06f 030f 	mvn.w	r3, #15
 800ba6e:	e04f      	b.n	800bb10 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid pbuf", p != NULL, return ERR_ARG);
 800ba70:	68bb      	ldr	r3, [r7, #8]
 800ba72:	2b00      	cmp	r3, #0
 800ba74:	d109      	bne.n	800ba8a <udp_sendto_if+0x42>
 800ba76:	4b28      	ldr	r3, [pc, #160]	; (800bb18 <udp_sendto_if+0xd0>)
 800ba78:	f240 2281 	movw	r2, #641	; 0x281
 800ba7c:	4929      	ldr	r1, [pc, #164]	; (800bb24 <udp_sendto_if+0xdc>)
 800ba7e:	4828      	ldr	r0, [pc, #160]	; (800bb20 <udp_sendto_if+0xd8>)
 800ba80:	f002 fe4e 	bl	800e720 <iprintf>
 800ba84:	f06f 030f 	mvn.w	r3, #15
 800ba88:	e042      	b.n	800bb10 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 800ba8a:	687b      	ldr	r3, [r7, #4]
 800ba8c:	2b00      	cmp	r3, #0
 800ba8e:	d109      	bne.n	800baa4 <udp_sendto_if+0x5c>
 800ba90:	4b21      	ldr	r3, [pc, #132]	; (800bb18 <udp_sendto_if+0xd0>)
 800ba92:	f240 2282 	movw	r2, #642	; 0x282
 800ba96:	4924      	ldr	r1, [pc, #144]	; (800bb28 <udp_sendto_if+0xe0>)
 800ba98:	4821      	ldr	r0, [pc, #132]	; (800bb20 <udp_sendto_if+0xd8>)
 800ba9a:	f002 fe41 	bl	800e720 <iprintf>
 800ba9e:	f06f 030f 	mvn.w	r3, #15
 800baa2:	e035      	b.n	800bb10 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid netif", netif != NULL, return ERR_ARG);
 800baa4:	6a3b      	ldr	r3, [r7, #32]
 800baa6:	2b00      	cmp	r3, #0
 800baa8:	d109      	bne.n	800babe <udp_sendto_if+0x76>
 800baaa:	4b1b      	ldr	r3, [pc, #108]	; (800bb18 <udp_sendto_if+0xd0>)
 800baac:	f240 2283 	movw	r2, #643	; 0x283
 800bab0:	491e      	ldr	r1, [pc, #120]	; (800bb2c <udp_sendto_if+0xe4>)
 800bab2:	481b      	ldr	r0, [pc, #108]	; (800bb20 <udp_sendto_if+0xd8>)
 800bab4:	f002 fe34 	bl	800e720 <iprintf>
 800bab8:	f06f 030f 	mvn.w	r3, #15
 800babc:	e028      	b.n	800bb10 <udp_sendto_if+0xc8>
#endif /* LWIP_IPV6 */
#if LWIP_IPV4 && LWIP_IPV6
  else
#endif /* LWIP_IPV4 && LWIP_IPV6 */
#if LWIP_IPV4
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800babe:	68fb      	ldr	r3, [r7, #12]
 800bac0:	2b00      	cmp	r3, #0
 800bac2:	d009      	beq.n	800bad8 <udp_sendto_if+0x90>
 800bac4:	68fb      	ldr	r3, [r7, #12]
 800bac6:	681b      	ldr	r3, [r3, #0]
 800bac8:	2b00      	cmp	r3, #0
 800baca:	d005      	beq.n	800bad8 <udp_sendto_if+0x90>
        ip4_addr_ismulticast(ip_2_ip4(&pcb->local_ip))) {
 800bacc:	68fb      	ldr	r3, [r7, #12]
 800bace:	681b      	ldr	r3, [r3, #0]
 800bad0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800bad4:	2be0      	cmp	r3, #224	; 0xe0
 800bad6:	d103      	bne.n	800bae0 <udp_sendto_if+0x98>
      /* if the local_ip is any or multicast
       * use the outgoing network interface IP address as source address */
      src_ip = netif_ip_addr4(netif);
 800bad8:	6a3b      	ldr	r3, [r7, #32]
 800bada:	3304      	adds	r3, #4
 800badc:	617b      	str	r3, [r7, #20]
 800bade:	e00b      	b.n	800baf8 <udp_sendto_if+0xb0>
    } else {
      /* check if UDP PCB local IP address is correct
       * this could be an old address if netif->ip_addr has changed */
      if (!ip4_addr_cmp(ip_2_ip4(&(pcb->local_ip)), netif_ip4_addr(netif))) {
 800bae0:	68fb      	ldr	r3, [r7, #12]
 800bae2:	681a      	ldr	r2, [r3, #0]
 800bae4:	6a3b      	ldr	r3, [r7, #32]
 800bae6:	3304      	adds	r3, #4
 800bae8:	681b      	ldr	r3, [r3, #0]
 800baea:	429a      	cmp	r2, r3
 800baec:	d002      	beq.n	800baf4 <udp_sendto_if+0xac>
        /* local_ip doesn't match, drop the packet */
        return ERR_RTE;
 800baee:	f06f 0303 	mvn.w	r3, #3
 800baf2:	e00d      	b.n	800bb10 <udp_sendto_if+0xc8>
      }
      /* use UDP PCB local IP address as source address */
      src_ip = &pcb->local_ip;
 800baf4:	68fb      	ldr	r3, [r7, #12]
 800baf6:	617b      	str	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_src_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum, src_ip);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if_src(pcb, p, dst_ip, dst_port, netif, src_ip);
 800baf8:	887a      	ldrh	r2, [r7, #2]
 800bafa:	697b      	ldr	r3, [r7, #20]
 800bafc:	9301      	str	r3, [sp, #4]
 800bafe:	6a3b      	ldr	r3, [r7, #32]
 800bb00:	9300      	str	r3, [sp, #0]
 800bb02:	4613      	mov	r3, r2
 800bb04:	687a      	ldr	r2, [r7, #4]
 800bb06:	68b9      	ldr	r1, [r7, #8]
 800bb08:	68f8      	ldr	r0, [r7, #12]
 800bb0a:	f000 f811 	bl	800bb30 <udp_sendto_if_src>
 800bb0e:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 800bb10:	4618      	mov	r0, r3
 800bb12:	3718      	adds	r7, #24
 800bb14:	46bd      	mov	sp, r7
 800bb16:	bd80      	pop	{r7, pc}
 800bb18:	08011988 	.word	0x08011988
 800bb1c:	08011afc 	.word	0x08011afc
 800bb20:	080119dc 	.word	0x080119dc
 800bb24:	08011b18 	.word	0x08011b18
 800bb28:	08011b34 	.word	0x08011b34
 800bb2c:	08011b54 	.word	0x08011b54

0800bb30 <udp_sendto_if_src>:
/** @ingroup udp_raw
 * Same as @ref udp_sendto_if, but with source address */
err_t
udp_sendto_if_src(struct udp_pcb *pcb, struct pbuf *p,
                  const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif, const ip_addr_t *src_ip)
{
 800bb30:	b580      	push	{r7, lr}
 800bb32:	b08c      	sub	sp, #48	; 0x30
 800bb34:	af04      	add	r7, sp, #16
 800bb36:	60f8      	str	r0, [r7, #12]
 800bb38:	60b9      	str	r1, [r7, #8]
 800bb3a:	607a      	str	r2, [r7, #4]
 800bb3c:	807b      	strh	r3, [r7, #2]
  u8_t ip_proto;
  u8_t ttl;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_sendto_if_src: invalid pcb", pcb != NULL, return ERR_ARG);
 800bb3e:	68fb      	ldr	r3, [r7, #12]
 800bb40:	2b00      	cmp	r3, #0
 800bb42:	d109      	bne.n	800bb58 <udp_sendto_if_src+0x28>
 800bb44:	4b65      	ldr	r3, [pc, #404]	; (800bcdc <udp_sendto_if_src+0x1ac>)
 800bb46:	f240 22d1 	movw	r2, #721	; 0x2d1
 800bb4a:	4965      	ldr	r1, [pc, #404]	; (800bce0 <udp_sendto_if_src+0x1b0>)
 800bb4c:	4865      	ldr	r0, [pc, #404]	; (800bce4 <udp_sendto_if_src+0x1b4>)
 800bb4e:	f002 fde7 	bl	800e720 <iprintf>
 800bb52:	f06f 030f 	mvn.w	r3, #15
 800bb56:	e0bc      	b.n	800bcd2 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid pbuf", p != NULL, return ERR_ARG);
 800bb58:	68bb      	ldr	r3, [r7, #8]
 800bb5a:	2b00      	cmp	r3, #0
 800bb5c:	d109      	bne.n	800bb72 <udp_sendto_if_src+0x42>
 800bb5e:	4b5f      	ldr	r3, [pc, #380]	; (800bcdc <udp_sendto_if_src+0x1ac>)
 800bb60:	f240 22d2 	movw	r2, #722	; 0x2d2
 800bb64:	4960      	ldr	r1, [pc, #384]	; (800bce8 <udp_sendto_if_src+0x1b8>)
 800bb66:	485f      	ldr	r0, [pc, #380]	; (800bce4 <udp_sendto_if_src+0x1b4>)
 800bb68:	f002 fdda 	bl	800e720 <iprintf>
 800bb6c:	f06f 030f 	mvn.w	r3, #15
 800bb70:	e0af      	b.n	800bcd2 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 800bb72:	687b      	ldr	r3, [r7, #4]
 800bb74:	2b00      	cmp	r3, #0
 800bb76:	d109      	bne.n	800bb8c <udp_sendto_if_src+0x5c>
 800bb78:	4b58      	ldr	r3, [pc, #352]	; (800bcdc <udp_sendto_if_src+0x1ac>)
 800bb7a:	f240 22d3 	movw	r2, #723	; 0x2d3
 800bb7e:	495b      	ldr	r1, [pc, #364]	; (800bcec <udp_sendto_if_src+0x1bc>)
 800bb80:	4858      	ldr	r0, [pc, #352]	; (800bce4 <udp_sendto_if_src+0x1b4>)
 800bb82:	f002 fdcd 	bl	800e720 <iprintf>
 800bb86:	f06f 030f 	mvn.w	r3, #15
 800bb8a:	e0a2      	b.n	800bcd2 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid src_ip", src_ip != NULL, return ERR_ARG);
 800bb8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bb8e:	2b00      	cmp	r3, #0
 800bb90:	d109      	bne.n	800bba6 <udp_sendto_if_src+0x76>
 800bb92:	4b52      	ldr	r3, [pc, #328]	; (800bcdc <udp_sendto_if_src+0x1ac>)
 800bb94:	f44f 7235 	mov.w	r2, #724	; 0x2d4
 800bb98:	4955      	ldr	r1, [pc, #340]	; (800bcf0 <udp_sendto_if_src+0x1c0>)
 800bb9a:	4852      	ldr	r0, [pc, #328]	; (800bce4 <udp_sendto_if_src+0x1b4>)
 800bb9c:	f002 fdc0 	bl	800e720 <iprintf>
 800bba0:	f06f 030f 	mvn.w	r3, #15
 800bba4:	e095      	b.n	800bcd2 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid netif", netif != NULL, return ERR_ARG);
 800bba6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bba8:	2b00      	cmp	r3, #0
 800bbaa:	d109      	bne.n	800bbc0 <udp_sendto_if_src+0x90>
 800bbac:	4b4b      	ldr	r3, [pc, #300]	; (800bcdc <udp_sendto_if_src+0x1ac>)
 800bbae:	f240 22d5 	movw	r2, #725	; 0x2d5
 800bbb2:	4950      	ldr	r1, [pc, #320]	; (800bcf4 <udp_sendto_if_src+0x1c4>)
 800bbb4:	484b      	ldr	r0, [pc, #300]	; (800bce4 <udp_sendto_if_src+0x1b4>)
 800bbb6:	f002 fdb3 	bl	800e720 <iprintf>
 800bbba:	f06f 030f 	mvn.w	r3, #15
 800bbbe:	e088      	b.n	800bcd2 <udp_sendto_if_src+0x1a2>
    return ERR_VAL;
  }
#endif /* LWIP_IPV4 && IP_SOF_BROADCAST */

  /* if the PCB is not yet bound to a port, bind it here */
  if (pcb->local_port == 0) {
 800bbc0:	68fb      	ldr	r3, [r7, #12]
 800bbc2:	8a5b      	ldrh	r3, [r3, #18]
 800bbc4:	2b00      	cmp	r3, #0
 800bbc6:	d10f      	bne.n	800bbe8 <udp_sendto_if_src+0xb8>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send: not yet bound to a port, binding now\n"));
    err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 800bbc8:	68f9      	ldr	r1, [r7, #12]
 800bbca:	68fb      	ldr	r3, [r7, #12]
 800bbcc:	8a5b      	ldrh	r3, [r3, #18]
 800bbce:	461a      	mov	r2, r3
 800bbd0:	68f8      	ldr	r0, [r7, #12]
 800bbd2:	f000 f893 	bl	800bcfc <udp_bind>
 800bbd6:	4603      	mov	r3, r0
 800bbd8:	76fb      	strb	r3, [r7, #27]
    if (err != ERR_OK) {
 800bbda:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800bbde:	2b00      	cmp	r3, #0
 800bbe0:	d002      	beq.n	800bbe8 <udp_sendto_if_src+0xb8>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: forced port bind failed\n"));
      return err;
 800bbe2:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800bbe6:	e074      	b.n	800bcd2 <udp_sendto_if_src+0x1a2>
    }
  }

  /* packet too large to add a UDP header without causing an overflow? */
  if ((u16_t)(p->tot_len + UDP_HLEN) < p->tot_len) {
 800bbe8:	68bb      	ldr	r3, [r7, #8]
 800bbea:	891b      	ldrh	r3, [r3, #8]
 800bbec:	f64f 72f7 	movw	r2, #65527	; 0xfff7
 800bbf0:	4293      	cmp	r3, r2
 800bbf2:	d902      	bls.n	800bbfa <udp_sendto_if_src+0xca>
    return ERR_MEM;
 800bbf4:	f04f 33ff 	mov.w	r3, #4294967295
 800bbf8:	e06b      	b.n	800bcd2 <udp_sendto_if_src+0x1a2>
  }
  /* not enough space to add an UDP header to first pbuf in given p chain? */
  if (pbuf_add_header(p, UDP_HLEN)) {
 800bbfa:	2108      	movs	r1, #8
 800bbfc:	68b8      	ldr	r0, [r7, #8]
 800bbfe:	f7f9 fe65 	bl	80058cc <pbuf_add_header>
 800bc02:	4603      	mov	r3, r0
 800bc04:	2b00      	cmp	r3, #0
 800bc06:	d015      	beq.n	800bc34 <udp_sendto_if_src+0x104>
    /* allocate header in a separate new pbuf */
    q = pbuf_alloc(PBUF_IP, UDP_HLEN, PBUF_RAM);
 800bc08:	f44f 7220 	mov.w	r2, #640	; 0x280
 800bc0c:	2108      	movs	r1, #8
 800bc0e:	2022      	movs	r0, #34	; 0x22
 800bc10:	f7f9 fc0e 	bl	8005430 <pbuf_alloc>
 800bc14:	61f8      	str	r0, [r7, #28]
    /* new header pbuf could not be allocated? */
    if (q == NULL) {
 800bc16:	69fb      	ldr	r3, [r7, #28]
 800bc18:	2b00      	cmp	r3, #0
 800bc1a:	d102      	bne.n	800bc22 <udp_sendto_if_src+0xf2>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: could not allocate header\n"));
      return ERR_MEM;
 800bc1c:	f04f 33ff 	mov.w	r3, #4294967295
 800bc20:	e057      	b.n	800bcd2 <udp_sendto_if_src+0x1a2>
    }
    if (p->tot_len != 0) {
 800bc22:	68bb      	ldr	r3, [r7, #8]
 800bc24:	891b      	ldrh	r3, [r3, #8]
 800bc26:	2b00      	cmp	r3, #0
 800bc28:	d006      	beq.n	800bc38 <udp_sendto_if_src+0x108>
      /* chain header q in front of given pbuf p (only if p contains data) */
      pbuf_chain(q, p);
 800bc2a:	68b9      	ldr	r1, [r7, #8]
 800bc2c:	69f8      	ldr	r0, [r7, #28]
 800bc2e:	f7f9 fffb 	bl	8005c28 <pbuf_chain>
 800bc32:	e001      	b.n	800bc38 <udp_sendto_if_src+0x108>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_send: added header pbuf %p before given pbuf %p\n", (void *)q, (void *)p));
  } else {
    /* adding space for header within p succeeded */
    /* first pbuf q equals given pbuf */
    q = p;
 800bc34:	68bb      	ldr	r3, [r7, #8]
 800bc36:	61fb      	str	r3, [r7, #28]
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: added header in given pbuf %p\n", (void *)p));
  }
  LWIP_ASSERT("check that first pbuf can hold struct udp_hdr",
 800bc38:	69fb      	ldr	r3, [r7, #28]
 800bc3a:	895b      	ldrh	r3, [r3, #10]
 800bc3c:	2b07      	cmp	r3, #7
 800bc3e:	d806      	bhi.n	800bc4e <udp_sendto_if_src+0x11e>
 800bc40:	4b26      	ldr	r3, [pc, #152]	; (800bcdc <udp_sendto_if_src+0x1ac>)
 800bc42:	f240 320d 	movw	r2, #781	; 0x30d
 800bc46:	492c      	ldr	r1, [pc, #176]	; (800bcf8 <udp_sendto_if_src+0x1c8>)
 800bc48:	4826      	ldr	r0, [pc, #152]	; (800bce4 <udp_sendto_if_src+0x1b4>)
 800bc4a:	f002 fd69 	bl	800e720 <iprintf>
              (q->len >= sizeof(struct udp_hdr)));
  /* q now represents the packet to be sent */
  udphdr = (struct udp_hdr *)q->payload;
 800bc4e:	69fb      	ldr	r3, [r7, #28]
 800bc50:	685b      	ldr	r3, [r3, #4]
 800bc52:	617b      	str	r3, [r7, #20]
  udphdr->src = lwip_htons(pcb->local_port);
 800bc54:	68fb      	ldr	r3, [r7, #12]
 800bc56:	8a5b      	ldrh	r3, [r3, #18]
 800bc58:	4618      	mov	r0, r3
 800bc5a:	f7f8 fb6f 	bl	800433c <lwip_htons>
 800bc5e:	4603      	mov	r3, r0
 800bc60:	461a      	mov	r2, r3
 800bc62:	697b      	ldr	r3, [r7, #20]
 800bc64:	801a      	strh	r2, [r3, #0]
  udphdr->dest = lwip_htons(dst_port);
 800bc66:	887b      	ldrh	r3, [r7, #2]
 800bc68:	4618      	mov	r0, r3
 800bc6a:	f7f8 fb67 	bl	800433c <lwip_htons>
 800bc6e:	4603      	mov	r3, r0
 800bc70:	461a      	mov	r2, r3
 800bc72:	697b      	ldr	r3, [r7, #20]
 800bc74:	805a      	strh	r2, [r3, #2]
  /* in UDP, 0 checksum means 'no checksum' */
  udphdr->chksum = 0x0000;
 800bc76:	697b      	ldr	r3, [r7, #20]
 800bc78:	2200      	movs	r2, #0
 800bc7a:	719a      	strb	r2, [r3, #6]
 800bc7c:	2200      	movs	r2, #0
 800bc7e:	71da      	strb	r2, [r3, #7]
    ip_proto = IP_PROTO_UDPLITE;
  } else
#endif /* LWIP_UDPLITE */
  {      /* UDP */
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP packet length %"U16_F"\n", q->tot_len));
    udphdr->len = lwip_htons(q->tot_len);
 800bc80:	69fb      	ldr	r3, [r7, #28]
 800bc82:	891b      	ldrh	r3, [r3, #8]
 800bc84:	4618      	mov	r0, r3
 800bc86:	f7f8 fb59 	bl	800433c <lwip_htons>
 800bc8a:	4603      	mov	r3, r0
 800bc8c:	461a      	mov	r2, r3
 800bc8e:	697b      	ldr	r3, [r7, #20]
 800bc90:	809a      	strh	r2, [r3, #4]
        }
        udphdr->chksum = udpchksum;
      }
    }
#endif /* CHECKSUM_GEN_UDP */
    ip_proto = IP_PROTO_UDP;
 800bc92:	2311      	movs	r3, #17
 800bc94:	74fb      	strb	r3, [r7, #19]

  /* Determine TTL to use */
#if LWIP_MULTICAST_TX_OPTIONS
  ttl = (ip_addr_ismulticast(dst_ip) ? udp_get_multicast_ttl(pcb) : pcb->ttl);
#else /* LWIP_MULTICAST_TX_OPTIONS */
  ttl = pcb->ttl;
 800bc96:	68fb      	ldr	r3, [r7, #12]
 800bc98:	7adb      	ldrb	r3, [r3, #11]
 800bc9a:	74bb      	strb	r3, [r7, #18]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP checksum 0x%04"X16_F"\n", udphdr->chksum));
  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: ip_output_if (,,,,0x%02"X16_F",)\n", (u16_t)ip_proto));
  /* output to IP */
  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if_src(q, src_ip, dst_ip, ttl, pcb->tos, ip_proto, netif);
 800bc9c:	68fb      	ldr	r3, [r7, #12]
 800bc9e:	7a9b      	ldrb	r3, [r3, #10]
 800bca0:	7cb9      	ldrb	r1, [r7, #18]
 800bca2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800bca4:	9202      	str	r2, [sp, #8]
 800bca6:	7cfa      	ldrb	r2, [r7, #19]
 800bca8:	9201      	str	r2, [sp, #4]
 800bcaa:	9300      	str	r3, [sp, #0]
 800bcac:	460b      	mov	r3, r1
 800bcae:	687a      	ldr	r2, [r7, #4]
 800bcb0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800bcb2:	69f8      	ldr	r0, [r7, #28]
 800bcb4:	f001 fc42 	bl	800d53c <ip4_output_if_src>
 800bcb8:	4603      	mov	r3, r0
 800bcba:	76fb      	strb	r3, [r7, #27]

  /* @todo: must this be increased even if error occurred? */
  MIB2_STATS_INC(mib2.udpoutdatagrams);

  /* did we chain a separate header pbuf earlier? */
  if (q != p) {
 800bcbc:	69fa      	ldr	r2, [r7, #28]
 800bcbe:	68bb      	ldr	r3, [r7, #8]
 800bcc0:	429a      	cmp	r2, r3
 800bcc2:	d004      	beq.n	800bcce <udp_sendto_if_src+0x19e>
    /* free the header pbuf */
    pbuf_free(q);
 800bcc4:	69f8      	ldr	r0, [r7, #28]
 800bcc6:	f7f9 fe97 	bl	80059f8 <pbuf_free>
    q = NULL;
 800bcca:	2300      	movs	r3, #0
 800bccc:	61fb      	str	r3, [r7, #28]
    /* p is still referenced by the caller, and will live on */
  }

  UDP_STATS_INC(udp.xmit);
  return err;
 800bcce:	f997 301b 	ldrsb.w	r3, [r7, #27]
}
 800bcd2:	4618      	mov	r0, r3
 800bcd4:	3720      	adds	r7, #32
 800bcd6:	46bd      	mov	sp, r7
 800bcd8:	bd80      	pop	{r7, pc}
 800bcda:	bf00      	nop
 800bcdc:	08011988 	.word	0x08011988
 800bce0:	08011b74 	.word	0x08011b74
 800bce4:	080119dc 	.word	0x080119dc
 800bce8:	08011b94 	.word	0x08011b94
 800bcec:	08011bb4 	.word	0x08011bb4
 800bcf0:	08011bd8 	.word	0x08011bd8
 800bcf4:	08011bfc 	.word	0x08011bfc
 800bcf8:	08011c20 	.word	0x08011c20

0800bcfc <udp_bind>:
 *
 * @see udp_disconnect()
 */
err_t
udp_bind(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 800bcfc:	b580      	push	{r7, lr}
 800bcfe:	b086      	sub	sp, #24
 800bd00:	af00      	add	r7, sp, #0
 800bd02:	60f8      	str	r0, [r7, #12]
 800bd04:	60b9      	str	r1, [r7, #8]
 800bd06:	4613      	mov	r3, r2
 800bd08:	80fb      	strh	r3, [r7, #6]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 800bd0a:	68bb      	ldr	r3, [r7, #8]
 800bd0c:	2b00      	cmp	r3, #0
 800bd0e:	d101      	bne.n	800bd14 <udp_bind+0x18>
    ipaddr = IP4_ADDR_ANY;
 800bd10:	4b39      	ldr	r3, [pc, #228]	; (800bdf8 <udp_bind+0xfc>)
 800bd12:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("udp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("udp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 800bd14:	68fb      	ldr	r3, [r7, #12]
 800bd16:	2b00      	cmp	r3, #0
 800bd18:	d109      	bne.n	800bd2e <udp_bind+0x32>
 800bd1a:	4b38      	ldr	r3, [pc, #224]	; (800bdfc <udp_bind+0x100>)
 800bd1c:	f240 32b7 	movw	r2, #951	; 0x3b7
 800bd20:	4937      	ldr	r1, [pc, #220]	; (800be00 <udp_bind+0x104>)
 800bd22:	4838      	ldr	r0, [pc, #224]	; (800be04 <udp_bind+0x108>)
 800bd24:	f002 fcfc 	bl	800e720 <iprintf>
 800bd28:	f06f 030f 	mvn.w	r3, #15
 800bd2c:	e060      	b.n	800bdf0 <udp_bind+0xf4>

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_bind(ipaddr = "));
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE, ipaddr);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, (", port = %"U16_F")\n", port));

  rebind = 0;
 800bd2e:	2300      	movs	r3, #0
 800bd30:	74fb      	strb	r3, [r7, #19]
  /* Check for double bind and rebind of the same pcb */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800bd32:	4b35      	ldr	r3, [pc, #212]	; (800be08 <udp_bind+0x10c>)
 800bd34:	681b      	ldr	r3, [r3, #0]
 800bd36:	617b      	str	r3, [r7, #20]
 800bd38:	e009      	b.n	800bd4e <udp_bind+0x52>
    /* is this UDP PCB already on active list? */
    if (pcb == ipcb) {
 800bd3a:	68fa      	ldr	r2, [r7, #12]
 800bd3c:	697b      	ldr	r3, [r7, #20]
 800bd3e:	429a      	cmp	r2, r3
 800bd40:	d102      	bne.n	800bd48 <udp_bind+0x4c>
      rebind = 1;
 800bd42:	2301      	movs	r3, #1
 800bd44:	74fb      	strb	r3, [r7, #19]
      break;
 800bd46:	e005      	b.n	800bd54 <udp_bind+0x58>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800bd48:	697b      	ldr	r3, [r7, #20]
 800bd4a:	68db      	ldr	r3, [r3, #12]
 800bd4c:	617b      	str	r3, [r7, #20]
 800bd4e:	697b      	ldr	r3, [r7, #20]
 800bd50:	2b00      	cmp	r3, #0
 800bd52:	d1f2      	bne.n	800bd3a <udp_bind+0x3e>
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  /* no port specified? */
  if (port == 0) {
 800bd54:	88fb      	ldrh	r3, [r7, #6]
 800bd56:	2b00      	cmp	r3, #0
 800bd58:	d109      	bne.n	800bd6e <udp_bind+0x72>
    port = udp_new_port();
 800bd5a:	f7ff fc35 	bl	800b5c8 <udp_new_port>
 800bd5e:	4603      	mov	r3, r0
 800bd60:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 800bd62:	88fb      	ldrh	r3, [r7, #6]
 800bd64:	2b00      	cmp	r3, #0
 800bd66:	d12c      	bne.n	800bdc2 <udp_bind+0xc6>
      /* no more ports available in local range */
      LWIP_DEBUGF(UDP_DEBUG, ("udp_bind: out of free UDP ports\n"));
      return ERR_USE;
 800bd68:	f06f 0307 	mvn.w	r3, #7
 800bd6c:	e040      	b.n	800bdf0 <udp_bind+0xf4>
    }
  } else {
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800bd6e:	4b26      	ldr	r3, [pc, #152]	; (800be08 <udp_bind+0x10c>)
 800bd70:	681b      	ldr	r3, [r3, #0]
 800bd72:	617b      	str	r3, [r7, #20]
 800bd74:	e022      	b.n	800bdbc <udp_bind+0xc0>
      if (pcb != ipcb) {
 800bd76:	68fa      	ldr	r2, [r7, #12]
 800bd78:	697b      	ldr	r3, [r7, #20]
 800bd7a:	429a      	cmp	r2, r3
 800bd7c:	d01b      	beq.n	800bdb6 <udp_bind+0xba>
        if (!ip_get_option(pcb, SOF_REUSEADDR) ||
            !ip_get_option(ipcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
        {
          /* port matches that of PCB in list and REUSEADDR not set -> reject */
          if ((ipcb->local_port == port) &&
 800bd7e:	697b      	ldr	r3, [r7, #20]
 800bd80:	8a5b      	ldrh	r3, [r3, #18]
 800bd82:	88fa      	ldrh	r2, [r7, #6]
 800bd84:	429a      	cmp	r2, r3
 800bd86:	d116      	bne.n	800bdb6 <udp_bind+0xba>
              /* IP address matches or any IP used? */
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 800bd88:	697b      	ldr	r3, [r7, #20]
 800bd8a:	681a      	ldr	r2, [r3, #0]
 800bd8c:	68bb      	ldr	r3, [r7, #8]
 800bd8e:	681b      	ldr	r3, [r3, #0]
          if ((ipcb->local_port == port) &&
 800bd90:	429a      	cmp	r2, r3
 800bd92:	d00d      	beq.n	800bdb0 <udp_bind+0xb4>
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 800bd94:	68bb      	ldr	r3, [r7, #8]
 800bd96:	2b00      	cmp	r3, #0
 800bd98:	d00a      	beq.n	800bdb0 <udp_bind+0xb4>
 800bd9a:	68bb      	ldr	r3, [r7, #8]
 800bd9c:	681b      	ldr	r3, [r3, #0]
 800bd9e:	2b00      	cmp	r3, #0
 800bda0:	d006      	beq.n	800bdb0 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 800bda2:	697b      	ldr	r3, [r7, #20]
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 800bda4:	2b00      	cmp	r3, #0
 800bda6:	d003      	beq.n	800bdb0 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 800bda8:	697b      	ldr	r3, [r7, #20]
 800bdaa:	681b      	ldr	r3, [r3, #0]
 800bdac:	2b00      	cmp	r3, #0
 800bdae:	d102      	bne.n	800bdb6 <udp_bind+0xba>
            /* other PCB already binds to this local IP and port */
            LWIP_DEBUGF(UDP_DEBUG,
                        ("udp_bind: local port %"U16_F" already bound by another pcb\n", port));
            return ERR_USE;
 800bdb0:	f06f 0307 	mvn.w	r3, #7
 800bdb4:	e01c      	b.n	800bdf0 <udp_bind+0xf4>
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800bdb6:	697b      	ldr	r3, [r7, #20]
 800bdb8:	68db      	ldr	r3, [r3, #12]
 800bdba:	617b      	str	r3, [r7, #20]
 800bdbc:	697b      	ldr	r3, [r7, #20]
 800bdbe:	2b00      	cmp	r3, #0
 800bdc0:	d1d9      	bne.n	800bd76 <udp_bind+0x7a>
        }
      }
    }
  }

  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 800bdc2:	68bb      	ldr	r3, [r7, #8]
 800bdc4:	2b00      	cmp	r3, #0
 800bdc6:	d002      	beq.n	800bdce <udp_bind+0xd2>
 800bdc8:	68bb      	ldr	r3, [r7, #8]
 800bdca:	681b      	ldr	r3, [r3, #0]
 800bdcc:	e000      	b.n	800bdd0 <udp_bind+0xd4>
 800bdce:	2300      	movs	r3, #0
 800bdd0:	68fa      	ldr	r2, [r7, #12]
 800bdd2:	6013      	str	r3, [r2, #0]

  pcb->local_port = port;
 800bdd4:	68fb      	ldr	r3, [r7, #12]
 800bdd6:	88fa      	ldrh	r2, [r7, #6]
 800bdd8:	825a      	strh	r2, [r3, #18]
  mib2_udp_bind(pcb);
  /* pcb not active yet? */
  if (rebind == 0) {
 800bdda:	7cfb      	ldrb	r3, [r7, #19]
 800bddc:	2b00      	cmp	r3, #0
 800bdde:	d106      	bne.n	800bdee <udp_bind+0xf2>
    /* place the PCB on the active list if not already there */
    pcb->next = udp_pcbs;
 800bde0:	4b09      	ldr	r3, [pc, #36]	; (800be08 <udp_bind+0x10c>)
 800bde2:	681a      	ldr	r2, [r3, #0]
 800bde4:	68fb      	ldr	r3, [r7, #12]
 800bde6:	60da      	str	r2, [r3, #12]
    udp_pcbs = pcb;
 800bde8:	4a07      	ldr	r2, [pc, #28]	; (800be08 <udp_bind+0x10c>)
 800bdea:	68fb      	ldr	r3, [r7, #12]
 800bdec:	6013      	str	r3, [r2, #0]
  }
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("udp_bind: bound to "));
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, pcb->local_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->local_port));
  return ERR_OK;
 800bdee:	2300      	movs	r3, #0
}
 800bdf0:	4618      	mov	r0, r3
 800bdf2:	3718      	adds	r7, #24
 800bdf4:	46bd      	mov	sp, r7
 800bdf6:	bd80      	pop	{r7, pc}
 800bdf8:	080124a4 	.word	0x080124a4
 800bdfc:	08011988 	.word	0x08011988
 800be00:	08011c50 	.word	0x08011c50
 800be04:	080119dc 	.word	0x080119dc
 800be08:	20008348 	.word	0x20008348

0800be0c <udp_connect>:
 *
 * @see udp_disconnect()
 */
err_t
udp_connect(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 800be0c:	b580      	push	{r7, lr}
 800be0e:	b086      	sub	sp, #24
 800be10:	af00      	add	r7, sp, #0
 800be12:	60f8      	str	r0, [r7, #12]
 800be14:	60b9      	str	r1, [r7, #8]
 800be16:	4613      	mov	r3, r2
 800be18:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *ipcb;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_connect: invalid pcb", pcb != NULL, return ERR_ARG);
 800be1a:	68fb      	ldr	r3, [r7, #12]
 800be1c:	2b00      	cmp	r3, #0
 800be1e:	d109      	bne.n	800be34 <udp_connect+0x28>
 800be20:	4b2c      	ldr	r3, [pc, #176]	; (800bed4 <udp_connect+0xc8>)
 800be22:	f240 4235 	movw	r2, #1077	; 0x435
 800be26:	492c      	ldr	r1, [pc, #176]	; (800bed8 <udp_connect+0xcc>)
 800be28:	482c      	ldr	r0, [pc, #176]	; (800bedc <udp_connect+0xd0>)
 800be2a:	f002 fc79 	bl	800e720 <iprintf>
 800be2e:	f06f 030f 	mvn.w	r3, #15
 800be32:	e04b      	b.n	800becc <udp_connect+0xc0>
  LWIP_ERROR("udp_connect: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
 800be34:	68bb      	ldr	r3, [r7, #8]
 800be36:	2b00      	cmp	r3, #0
 800be38:	d109      	bne.n	800be4e <udp_connect+0x42>
 800be3a:	4b26      	ldr	r3, [pc, #152]	; (800bed4 <udp_connect+0xc8>)
 800be3c:	f240 4236 	movw	r2, #1078	; 0x436
 800be40:	4927      	ldr	r1, [pc, #156]	; (800bee0 <udp_connect+0xd4>)
 800be42:	4826      	ldr	r0, [pc, #152]	; (800bedc <udp_connect+0xd0>)
 800be44:	f002 fc6c 	bl	800e720 <iprintf>
 800be48:	f06f 030f 	mvn.w	r3, #15
 800be4c:	e03e      	b.n	800becc <udp_connect+0xc0>

  if (pcb->local_port == 0) {
 800be4e:	68fb      	ldr	r3, [r7, #12]
 800be50:	8a5b      	ldrh	r3, [r3, #18]
 800be52:	2b00      	cmp	r3, #0
 800be54:	d10f      	bne.n	800be76 <udp_connect+0x6a>
    err_t err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 800be56:	68f9      	ldr	r1, [r7, #12]
 800be58:	68fb      	ldr	r3, [r7, #12]
 800be5a:	8a5b      	ldrh	r3, [r3, #18]
 800be5c:	461a      	mov	r2, r3
 800be5e:	68f8      	ldr	r0, [r7, #12]
 800be60:	f7ff ff4c 	bl	800bcfc <udp_bind>
 800be64:	4603      	mov	r3, r0
 800be66:	74fb      	strb	r3, [r7, #19]
    if (err != ERR_OK) {
 800be68:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800be6c:	2b00      	cmp	r3, #0
 800be6e:	d002      	beq.n	800be76 <udp_connect+0x6a>
      return err;
 800be70:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800be74:	e02a      	b.n	800becc <udp_connect+0xc0>
    }
  }

  ip_addr_set_ipaddr(&pcb->remote_ip, ipaddr);
 800be76:	68bb      	ldr	r3, [r7, #8]
 800be78:	2b00      	cmp	r3, #0
 800be7a:	d002      	beq.n	800be82 <udp_connect+0x76>
 800be7c:	68bb      	ldr	r3, [r7, #8]
 800be7e:	681b      	ldr	r3, [r3, #0]
 800be80:	e000      	b.n	800be84 <udp_connect+0x78>
 800be82:	2300      	movs	r3, #0
 800be84:	68fa      	ldr	r2, [r7, #12]
 800be86:	6053      	str	r3, [r2, #4]
      ip6_addr_lacks_zone(ip_2_ip6(&pcb->remote_ip), IP6_UNKNOWN)) {
    ip6_addr_select_zone(ip_2_ip6(&pcb->remote_ip), ip_2_ip6(&pcb->local_ip));
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  pcb->remote_port = port;
 800be88:	68fb      	ldr	r3, [r7, #12]
 800be8a:	88fa      	ldrh	r2, [r7, #6]
 800be8c:	829a      	strh	r2, [r3, #20]
  pcb->flags |= UDP_FLAGS_CONNECTED;
 800be8e:	68fb      	ldr	r3, [r7, #12]
 800be90:	7c1b      	ldrb	r3, [r3, #16]
 800be92:	f043 0304 	orr.w	r3, r3, #4
 800be96:	b2da      	uxtb	r2, r3
 800be98:	68fb      	ldr	r3, [r7, #12]
 800be9a:	741a      	strb	r2, [r3, #16]
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                          pcb->remote_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->remote_port));

  /* Insert UDP PCB into the list of active UDP PCBs. */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800be9c:	4b11      	ldr	r3, [pc, #68]	; (800bee4 <udp_connect+0xd8>)
 800be9e:	681b      	ldr	r3, [r3, #0]
 800bea0:	617b      	str	r3, [r7, #20]
 800bea2:	e008      	b.n	800beb6 <udp_connect+0xaa>
    if (pcb == ipcb) {
 800bea4:	68fa      	ldr	r2, [r7, #12]
 800bea6:	697b      	ldr	r3, [r7, #20]
 800bea8:	429a      	cmp	r2, r3
 800beaa:	d101      	bne.n	800beb0 <udp_connect+0xa4>
      /* already on the list, just return */
      return ERR_OK;
 800beac:	2300      	movs	r3, #0
 800beae:	e00d      	b.n	800becc <udp_connect+0xc0>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800beb0:	697b      	ldr	r3, [r7, #20]
 800beb2:	68db      	ldr	r3, [r3, #12]
 800beb4:	617b      	str	r3, [r7, #20]
 800beb6:	697b      	ldr	r3, [r7, #20]
 800beb8:	2b00      	cmp	r3, #0
 800beba:	d1f3      	bne.n	800bea4 <udp_connect+0x98>
    }
  }
  /* PCB not yet on the list, add PCB now */
  pcb->next = udp_pcbs;
 800bebc:	4b09      	ldr	r3, [pc, #36]	; (800bee4 <udp_connect+0xd8>)
 800bebe:	681a      	ldr	r2, [r3, #0]
 800bec0:	68fb      	ldr	r3, [r7, #12]
 800bec2:	60da      	str	r2, [r3, #12]
  udp_pcbs = pcb;
 800bec4:	4a07      	ldr	r2, [pc, #28]	; (800bee4 <udp_connect+0xd8>)
 800bec6:	68fb      	ldr	r3, [r7, #12]
 800bec8:	6013      	str	r3, [r2, #0]
  return ERR_OK;
 800beca:	2300      	movs	r3, #0
}
 800becc:	4618      	mov	r0, r3
 800bece:	3718      	adds	r7, #24
 800bed0:	46bd      	mov	sp, r7
 800bed2:	bd80      	pop	{r7, pc}
 800bed4:	08011988 	.word	0x08011988
 800bed8:	08011c68 	.word	0x08011c68
 800bedc:	080119dc 	.word	0x080119dc
 800bee0:	08011c84 	.word	0x08011c84
 800bee4:	20008348 	.word	0x20008348

0800bee8 <udp_recv>:
 * @param recv function pointer of the callback function
 * @param recv_arg additional argument to pass to the callback function
 */
void
udp_recv(struct udp_pcb *pcb, udp_recv_fn recv, void *recv_arg)
{
 800bee8:	b580      	push	{r7, lr}
 800beea:	b084      	sub	sp, #16
 800beec:	af00      	add	r7, sp, #0
 800beee:	60f8      	str	r0, [r7, #12]
 800bef0:	60b9      	str	r1, [r7, #8]
 800bef2:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_recv: invalid pcb", pcb != NULL, return);
 800bef4:	68fb      	ldr	r3, [r7, #12]
 800bef6:	2b00      	cmp	r3, #0
 800bef8:	d107      	bne.n	800bf0a <udp_recv+0x22>
 800befa:	4b08      	ldr	r3, [pc, #32]	; (800bf1c <udp_recv+0x34>)
 800befc:	f240 428a 	movw	r2, #1162	; 0x48a
 800bf00:	4907      	ldr	r1, [pc, #28]	; (800bf20 <udp_recv+0x38>)
 800bf02:	4808      	ldr	r0, [pc, #32]	; (800bf24 <udp_recv+0x3c>)
 800bf04:	f002 fc0c 	bl	800e720 <iprintf>
 800bf08:	e005      	b.n	800bf16 <udp_recv+0x2e>

  /* remember recv() callback and user data */
  pcb->recv = recv;
 800bf0a:	68fb      	ldr	r3, [r7, #12]
 800bf0c:	68ba      	ldr	r2, [r7, #8]
 800bf0e:	619a      	str	r2, [r3, #24]
  pcb->recv_arg = recv_arg;
 800bf10:	68fb      	ldr	r3, [r7, #12]
 800bf12:	687a      	ldr	r2, [r7, #4]
 800bf14:	61da      	str	r2, [r3, #28]
}
 800bf16:	3710      	adds	r7, #16
 800bf18:	46bd      	mov	sp, r7
 800bf1a:	bd80      	pop	{r7, pc}
 800bf1c:	08011988 	.word	0x08011988
 800bf20:	08011cbc 	.word	0x08011cbc
 800bf24:	080119dc 	.word	0x080119dc

0800bf28 <udp_new>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new(void)
{
 800bf28:	b580      	push	{r7, lr}
 800bf2a:	b082      	sub	sp, #8
 800bf2c:	af00      	add	r7, sp, #0
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct udp_pcb *)memp_malloc(MEMP_UDP_PCB);
 800bf2e:	2000      	movs	r0, #0
 800bf30:	f7f8 fe7c 	bl	8004c2c <memp_malloc>
 800bf34:	6078      	str	r0, [r7, #4]
  /* could allocate UDP PCB? */
  if (pcb != NULL) {
 800bf36:	687b      	ldr	r3, [r7, #4]
 800bf38:	2b00      	cmp	r3, #0
 800bf3a:	d007      	beq.n	800bf4c <udp_new+0x24>
    /* UDP Lite: by initializing to all zeroes, chksum_len is set to 0
     * which means checksum is generated over the whole datagram per default
     * (recommended as default by RFC 3828). */
    /* initialize PCB to all zeroes */
    memset(pcb, 0, sizeof(struct udp_pcb));
 800bf3c:	2220      	movs	r2, #32
 800bf3e:	2100      	movs	r1, #0
 800bf40:	6878      	ldr	r0, [r7, #4]
 800bf42:	f002 fd7d 	bl	800ea40 <memset>
    pcb->ttl = UDP_TTL;
 800bf46:	687b      	ldr	r3, [r7, #4]
 800bf48:	22ff      	movs	r2, #255	; 0xff
 800bf4a:	72da      	strb	r2, [r3, #11]
#if LWIP_MULTICAST_TX_OPTIONS
    udp_set_multicast_ttl(pcb, UDP_TTL);
#endif /* LWIP_MULTICAST_TX_OPTIONS */
  }
  return pcb;
 800bf4c:	687b      	ldr	r3, [r7, #4]
}
 800bf4e:	4618      	mov	r0, r3
 800bf50:	3708      	adds	r7, #8
 800bf52:	46bd      	mov	sp, r7
 800bf54:	bd80      	pop	{r7, pc}
	...

0800bf58 <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800bf58:	b480      	push	{r7}
 800bf5a:	b085      	sub	sp, #20
 800bf5c:	af00      	add	r7, sp, #0
 800bf5e:	6078      	str	r0, [r7, #4]
 800bf60:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 800bf62:	687b      	ldr	r3, [r7, #4]
 800bf64:	2b00      	cmp	r3, #0
 800bf66:	d01e      	beq.n	800bfa6 <udp_netif_ip_addr_changed+0x4e>
 800bf68:	687b      	ldr	r3, [r7, #4]
 800bf6a:	681b      	ldr	r3, [r3, #0]
 800bf6c:	2b00      	cmp	r3, #0
 800bf6e:	d01a      	beq.n	800bfa6 <udp_netif_ip_addr_changed+0x4e>
 800bf70:	683b      	ldr	r3, [r7, #0]
 800bf72:	2b00      	cmp	r3, #0
 800bf74:	d017      	beq.n	800bfa6 <udp_netif_ip_addr_changed+0x4e>
 800bf76:	683b      	ldr	r3, [r7, #0]
 800bf78:	681b      	ldr	r3, [r3, #0]
 800bf7a:	2b00      	cmp	r3, #0
 800bf7c:	d013      	beq.n	800bfa6 <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 800bf7e:	4b0d      	ldr	r3, [pc, #52]	; (800bfb4 <udp_netif_ip_addr_changed+0x5c>)
 800bf80:	681b      	ldr	r3, [r3, #0]
 800bf82:	60fb      	str	r3, [r7, #12]
 800bf84:	e00c      	b.n	800bfa0 <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 800bf86:	68fb      	ldr	r3, [r7, #12]
 800bf88:	681a      	ldr	r2, [r3, #0]
 800bf8a:	687b      	ldr	r3, [r7, #4]
 800bf8c:	681b      	ldr	r3, [r3, #0]
 800bf8e:	429a      	cmp	r2, r3
 800bf90:	d103      	bne.n	800bf9a <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 800bf92:	683b      	ldr	r3, [r7, #0]
 800bf94:	681a      	ldr	r2, [r3, #0]
 800bf96:	68fb      	ldr	r3, [r7, #12]
 800bf98:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 800bf9a:	68fb      	ldr	r3, [r7, #12]
 800bf9c:	68db      	ldr	r3, [r3, #12]
 800bf9e:	60fb      	str	r3, [r7, #12]
 800bfa0:	68fb      	ldr	r3, [r7, #12]
 800bfa2:	2b00      	cmp	r3, #0
 800bfa4:	d1ef      	bne.n	800bf86 <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 800bfa6:	bf00      	nop
 800bfa8:	3714      	adds	r7, #20
 800bfaa:	46bd      	mov	sp, r7
 800bfac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfb0:	4770      	bx	lr
 800bfb2:	bf00      	nop
 800bfb4:	20008348 	.word	0x20008348

0800bfb8 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 800bfb8:	b580      	push	{r7, lr}
 800bfba:	b082      	sub	sp, #8
 800bfbc:	af00      	add	r7, sp, #0
 800bfbe:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 800bfc0:	4915      	ldr	r1, [pc, #84]	; (800c018 <etharp_free_entry+0x60>)
 800bfc2:	687a      	ldr	r2, [r7, #4]
 800bfc4:	4613      	mov	r3, r2
 800bfc6:	005b      	lsls	r3, r3, #1
 800bfc8:	4413      	add	r3, r2
 800bfca:	00db      	lsls	r3, r3, #3
 800bfcc:	440b      	add	r3, r1
 800bfce:	681b      	ldr	r3, [r3, #0]
 800bfd0:	2b00      	cmp	r3, #0
 800bfd2:	d013      	beq.n	800bffc <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 800bfd4:	4910      	ldr	r1, [pc, #64]	; (800c018 <etharp_free_entry+0x60>)
 800bfd6:	687a      	ldr	r2, [r7, #4]
 800bfd8:	4613      	mov	r3, r2
 800bfda:	005b      	lsls	r3, r3, #1
 800bfdc:	4413      	add	r3, r2
 800bfde:	00db      	lsls	r3, r3, #3
 800bfe0:	440b      	add	r3, r1
 800bfe2:	681b      	ldr	r3, [r3, #0]
 800bfe4:	4618      	mov	r0, r3
 800bfe6:	f7f9 fd07 	bl	80059f8 <pbuf_free>
    arp_table[i].q = NULL;
 800bfea:	490b      	ldr	r1, [pc, #44]	; (800c018 <etharp_free_entry+0x60>)
 800bfec:	687a      	ldr	r2, [r7, #4]
 800bfee:	4613      	mov	r3, r2
 800bff0:	005b      	lsls	r3, r3, #1
 800bff2:	4413      	add	r3, r2
 800bff4:	00db      	lsls	r3, r3, #3
 800bff6:	440b      	add	r3, r1
 800bff8:	2200      	movs	r2, #0
 800bffa:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 800bffc:	4906      	ldr	r1, [pc, #24]	; (800c018 <etharp_free_entry+0x60>)
 800bffe:	687a      	ldr	r2, [r7, #4]
 800c000:	4613      	mov	r3, r2
 800c002:	005b      	lsls	r3, r3, #1
 800c004:	4413      	add	r3, r2
 800c006:	00db      	lsls	r3, r3, #3
 800c008:	440b      	add	r3, r1
 800c00a:	3314      	adds	r3, #20
 800c00c:	2200      	movs	r2, #0
 800c00e:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 800c010:	bf00      	nop
 800c012:	3708      	adds	r7, #8
 800c014:	46bd      	mov	sp, r7
 800c016:	bd80      	pop	{r7, pc}
 800c018:	2000834c 	.word	0x2000834c

0800c01c <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 800c01c:	b580      	push	{r7, lr}
 800c01e:	b082      	sub	sp, #8
 800c020:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800c022:	2300      	movs	r3, #0
 800c024:	607b      	str	r3, [r7, #4]
 800c026:	e096      	b.n	800c156 <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 800c028:	494f      	ldr	r1, [pc, #316]	; (800c168 <etharp_tmr+0x14c>)
 800c02a:	687a      	ldr	r2, [r7, #4]
 800c02c:	4613      	mov	r3, r2
 800c02e:	005b      	lsls	r3, r3, #1
 800c030:	4413      	add	r3, r2
 800c032:	00db      	lsls	r3, r3, #3
 800c034:	440b      	add	r3, r1
 800c036:	3314      	adds	r3, #20
 800c038:	781b      	ldrb	r3, [r3, #0]
 800c03a:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 800c03c:	78fb      	ldrb	r3, [r7, #3]
 800c03e:	2b00      	cmp	r3, #0
 800c040:	f000 8086 	beq.w	800c150 <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 800c044:	4948      	ldr	r1, [pc, #288]	; (800c168 <etharp_tmr+0x14c>)
 800c046:	687a      	ldr	r2, [r7, #4]
 800c048:	4613      	mov	r3, r2
 800c04a:	005b      	lsls	r3, r3, #1
 800c04c:	4413      	add	r3, r2
 800c04e:	00db      	lsls	r3, r3, #3
 800c050:	440b      	add	r3, r1
 800c052:	3312      	adds	r3, #18
 800c054:	881b      	ldrh	r3, [r3, #0]
 800c056:	3301      	adds	r3, #1
 800c058:	b298      	uxth	r0, r3
 800c05a:	4943      	ldr	r1, [pc, #268]	; (800c168 <etharp_tmr+0x14c>)
 800c05c:	687a      	ldr	r2, [r7, #4]
 800c05e:	4613      	mov	r3, r2
 800c060:	005b      	lsls	r3, r3, #1
 800c062:	4413      	add	r3, r2
 800c064:	00db      	lsls	r3, r3, #3
 800c066:	440b      	add	r3, r1
 800c068:	3312      	adds	r3, #18
 800c06a:	4602      	mov	r2, r0
 800c06c:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 800c06e:	493e      	ldr	r1, [pc, #248]	; (800c168 <etharp_tmr+0x14c>)
 800c070:	687a      	ldr	r2, [r7, #4]
 800c072:	4613      	mov	r3, r2
 800c074:	005b      	lsls	r3, r3, #1
 800c076:	4413      	add	r3, r2
 800c078:	00db      	lsls	r3, r3, #3
 800c07a:	440b      	add	r3, r1
 800c07c:	3312      	adds	r3, #18
 800c07e:	881b      	ldrh	r3, [r3, #0]
 800c080:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 800c084:	d215      	bcs.n	800c0b2 <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 800c086:	4938      	ldr	r1, [pc, #224]	; (800c168 <etharp_tmr+0x14c>)
 800c088:	687a      	ldr	r2, [r7, #4]
 800c08a:	4613      	mov	r3, r2
 800c08c:	005b      	lsls	r3, r3, #1
 800c08e:	4413      	add	r3, r2
 800c090:	00db      	lsls	r3, r3, #3
 800c092:	440b      	add	r3, r1
 800c094:	3314      	adds	r3, #20
 800c096:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 800c098:	2b01      	cmp	r3, #1
 800c09a:	d10e      	bne.n	800c0ba <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 800c09c:	4932      	ldr	r1, [pc, #200]	; (800c168 <etharp_tmr+0x14c>)
 800c09e:	687a      	ldr	r2, [r7, #4]
 800c0a0:	4613      	mov	r3, r2
 800c0a2:	005b      	lsls	r3, r3, #1
 800c0a4:	4413      	add	r3, r2
 800c0a6:	00db      	lsls	r3, r3, #3
 800c0a8:	440b      	add	r3, r1
 800c0aa:	3312      	adds	r3, #18
 800c0ac:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 800c0ae:	2b04      	cmp	r3, #4
 800c0b0:	d903      	bls.n	800c0ba <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 800c0b2:	6878      	ldr	r0, [r7, #4]
 800c0b4:	f7ff ff80 	bl	800bfb8 <etharp_free_entry>
 800c0b8:	e04a      	b.n	800c150 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 800c0ba:	492b      	ldr	r1, [pc, #172]	; (800c168 <etharp_tmr+0x14c>)
 800c0bc:	687a      	ldr	r2, [r7, #4]
 800c0be:	4613      	mov	r3, r2
 800c0c0:	005b      	lsls	r3, r3, #1
 800c0c2:	4413      	add	r3, r2
 800c0c4:	00db      	lsls	r3, r3, #3
 800c0c6:	440b      	add	r3, r1
 800c0c8:	3314      	adds	r3, #20
 800c0ca:	781b      	ldrb	r3, [r3, #0]
 800c0cc:	2b03      	cmp	r3, #3
 800c0ce:	d10a      	bne.n	800c0e6 <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 800c0d0:	4925      	ldr	r1, [pc, #148]	; (800c168 <etharp_tmr+0x14c>)
 800c0d2:	687a      	ldr	r2, [r7, #4]
 800c0d4:	4613      	mov	r3, r2
 800c0d6:	005b      	lsls	r3, r3, #1
 800c0d8:	4413      	add	r3, r2
 800c0da:	00db      	lsls	r3, r3, #3
 800c0dc:	440b      	add	r3, r1
 800c0de:	3314      	adds	r3, #20
 800c0e0:	2204      	movs	r2, #4
 800c0e2:	701a      	strb	r2, [r3, #0]
 800c0e4:	e034      	b.n	800c150 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 800c0e6:	4920      	ldr	r1, [pc, #128]	; (800c168 <etharp_tmr+0x14c>)
 800c0e8:	687a      	ldr	r2, [r7, #4]
 800c0ea:	4613      	mov	r3, r2
 800c0ec:	005b      	lsls	r3, r3, #1
 800c0ee:	4413      	add	r3, r2
 800c0f0:	00db      	lsls	r3, r3, #3
 800c0f2:	440b      	add	r3, r1
 800c0f4:	3314      	adds	r3, #20
 800c0f6:	781b      	ldrb	r3, [r3, #0]
 800c0f8:	2b04      	cmp	r3, #4
 800c0fa:	d10a      	bne.n	800c112 <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 800c0fc:	491a      	ldr	r1, [pc, #104]	; (800c168 <etharp_tmr+0x14c>)
 800c0fe:	687a      	ldr	r2, [r7, #4]
 800c100:	4613      	mov	r3, r2
 800c102:	005b      	lsls	r3, r3, #1
 800c104:	4413      	add	r3, r2
 800c106:	00db      	lsls	r3, r3, #3
 800c108:	440b      	add	r3, r1
 800c10a:	3314      	adds	r3, #20
 800c10c:	2202      	movs	r2, #2
 800c10e:	701a      	strb	r2, [r3, #0]
 800c110:	e01e      	b.n	800c150 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 800c112:	4915      	ldr	r1, [pc, #84]	; (800c168 <etharp_tmr+0x14c>)
 800c114:	687a      	ldr	r2, [r7, #4]
 800c116:	4613      	mov	r3, r2
 800c118:	005b      	lsls	r3, r3, #1
 800c11a:	4413      	add	r3, r2
 800c11c:	00db      	lsls	r3, r3, #3
 800c11e:	440b      	add	r3, r1
 800c120:	3314      	adds	r3, #20
 800c122:	781b      	ldrb	r3, [r3, #0]
 800c124:	2b01      	cmp	r3, #1
 800c126:	d113      	bne.n	800c150 <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 800c128:	490f      	ldr	r1, [pc, #60]	; (800c168 <etharp_tmr+0x14c>)
 800c12a:	687a      	ldr	r2, [r7, #4]
 800c12c:	4613      	mov	r3, r2
 800c12e:	005b      	lsls	r3, r3, #1
 800c130:	4413      	add	r3, r2
 800c132:	00db      	lsls	r3, r3, #3
 800c134:	440b      	add	r3, r1
 800c136:	3308      	adds	r3, #8
 800c138:	6818      	ldr	r0, [r3, #0]
 800c13a:	687a      	ldr	r2, [r7, #4]
 800c13c:	4613      	mov	r3, r2
 800c13e:	005b      	lsls	r3, r3, #1
 800c140:	4413      	add	r3, r2
 800c142:	00db      	lsls	r3, r3, #3
 800c144:	4a08      	ldr	r2, [pc, #32]	; (800c168 <etharp_tmr+0x14c>)
 800c146:	4413      	add	r3, r2
 800c148:	3304      	adds	r3, #4
 800c14a:	4619      	mov	r1, r3
 800c14c:	f000 fe6e 	bl	800ce2c <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800c150:	687b      	ldr	r3, [r7, #4]
 800c152:	3301      	adds	r3, #1
 800c154:	607b      	str	r3, [r7, #4]
 800c156:	687b      	ldr	r3, [r7, #4]
 800c158:	2b09      	cmp	r3, #9
 800c15a:	f77f af65 	ble.w	800c028 <etharp_tmr+0xc>
      }
    }
  }
}
 800c15e:	bf00      	nop
 800c160:	bf00      	nop
 800c162:	3708      	adds	r7, #8
 800c164:	46bd      	mov	sp, r7
 800c166:	bd80      	pop	{r7, pc}
 800c168:	2000834c 	.word	0x2000834c

0800c16c <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 800c16c:	b580      	push	{r7, lr}
 800c16e:	b08a      	sub	sp, #40	; 0x28
 800c170:	af00      	add	r7, sp, #0
 800c172:	60f8      	str	r0, [r7, #12]
 800c174:	460b      	mov	r3, r1
 800c176:	607a      	str	r2, [r7, #4]
 800c178:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 800c17a:	230a      	movs	r3, #10
 800c17c:	84fb      	strh	r3, [r7, #38]	; 0x26
 800c17e:	230a      	movs	r3, #10
 800c180:	84bb      	strh	r3, [r7, #36]	; 0x24
  s16_t empty = ARP_TABLE_SIZE;
 800c182:	230a      	movs	r3, #10
 800c184:	847b      	strh	r3, [r7, #34]	; 0x22
  s16_t i = 0;
 800c186:	2300      	movs	r3, #0
 800c188:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 800c18a:	230a      	movs	r3, #10
 800c18c:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 800c18e:	2300      	movs	r3, #0
 800c190:	83bb      	strh	r3, [r7, #28]
 800c192:	2300      	movs	r3, #0
 800c194:	837b      	strh	r3, [r7, #26]
 800c196:	2300      	movs	r3, #0
 800c198:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800c19a:	2300      	movs	r3, #0
 800c19c:	843b      	strh	r3, [r7, #32]
 800c19e:	e0ae      	b.n	800c2fe <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 800c1a0:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800c1a4:	49a6      	ldr	r1, [pc, #664]	; (800c440 <etharp_find_entry+0x2d4>)
 800c1a6:	4613      	mov	r3, r2
 800c1a8:	005b      	lsls	r3, r3, #1
 800c1aa:	4413      	add	r3, r2
 800c1ac:	00db      	lsls	r3, r3, #3
 800c1ae:	440b      	add	r3, r1
 800c1b0:	3314      	adds	r3, #20
 800c1b2:	781b      	ldrb	r3, [r3, #0]
 800c1b4:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 800c1b6:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 800c1ba:	2b0a      	cmp	r3, #10
 800c1bc:	d105      	bne.n	800c1ca <etharp_find_entry+0x5e>
 800c1be:	7dfb      	ldrb	r3, [r7, #23]
 800c1c0:	2b00      	cmp	r3, #0
 800c1c2:	d102      	bne.n	800c1ca <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 800c1c4:	8c3b      	ldrh	r3, [r7, #32]
 800c1c6:	847b      	strh	r3, [r7, #34]	; 0x22
 800c1c8:	e095      	b.n	800c2f6 <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 800c1ca:	7dfb      	ldrb	r3, [r7, #23]
 800c1cc:	2b00      	cmp	r3, #0
 800c1ce:	f000 8092 	beq.w	800c2f6 <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 800c1d2:	7dfb      	ldrb	r3, [r7, #23]
 800c1d4:	2b01      	cmp	r3, #1
 800c1d6:	d009      	beq.n	800c1ec <etharp_find_entry+0x80>
 800c1d8:	7dfb      	ldrb	r3, [r7, #23]
 800c1da:	2b01      	cmp	r3, #1
 800c1dc:	d806      	bhi.n	800c1ec <etharp_find_entry+0x80>
 800c1de:	4b99      	ldr	r3, [pc, #612]	; (800c444 <etharp_find_entry+0x2d8>)
 800c1e0:	f240 1223 	movw	r2, #291	; 0x123
 800c1e4:	4998      	ldr	r1, [pc, #608]	; (800c448 <etharp_find_entry+0x2dc>)
 800c1e6:	4899      	ldr	r0, [pc, #612]	; (800c44c <etharp_find_entry+0x2e0>)
 800c1e8:	f002 fa9a 	bl	800e720 <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 800c1ec:	68fb      	ldr	r3, [r7, #12]
 800c1ee:	2b00      	cmp	r3, #0
 800c1f0:	d020      	beq.n	800c234 <etharp_find_entry+0xc8>
 800c1f2:	68fb      	ldr	r3, [r7, #12]
 800c1f4:	6819      	ldr	r1, [r3, #0]
 800c1f6:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800c1fa:	4891      	ldr	r0, [pc, #580]	; (800c440 <etharp_find_entry+0x2d4>)
 800c1fc:	4613      	mov	r3, r2
 800c1fe:	005b      	lsls	r3, r3, #1
 800c200:	4413      	add	r3, r2
 800c202:	00db      	lsls	r3, r3, #3
 800c204:	4403      	add	r3, r0
 800c206:	3304      	adds	r3, #4
 800c208:	681b      	ldr	r3, [r3, #0]
 800c20a:	4299      	cmp	r1, r3
 800c20c:	d112      	bne.n	800c234 <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 800c20e:	687b      	ldr	r3, [r7, #4]
 800c210:	2b00      	cmp	r3, #0
 800c212:	d00c      	beq.n	800c22e <etharp_find_entry+0xc2>
 800c214:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800c218:	4989      	ldr	r1, [pc, #548]	; (800c440 <etharp_find_entry+0x2d4>)
 800c21a:	4613      	mov	r3, r2
 800c21c:	005b      	lsls	r3, r3, #1
 800c21e:	4413      	add	r3, r2
 800c220:	00db      	lsls	r3, r3, #3
 800c222:	440b      	add	r3, r1
 800c224:	3308      	adds	r3, #8
 800c226:	681b      	ldr	r3, [r3, #0]
 800c228:	687a      	ldr	r2, [r7, #4]
 800c22a:	429a      	cmp	r2, r3
 800c22c:	d102      	bne.n	800c234 <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 800c22e:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800c232:	e100      	b.n	800c436 <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 800c234:	7dfb      	ldrb	r3, [r7, #23]
 800c236:	2b01      	cmp	r3, #1
 800c238:	d140      	bne.n	800c2bc <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 800c23a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800c23e:	4980      	ldr	r1, [pc, #512]	; (800c440 <etharp_find_entry+0x2d4>)
 800c240:	4613      	mov	r3, r2
 800c242:	005b      	lsls	r3, r3, #1
 800c244:	4413      	add	r3, r2
 800c246:	00db      	lsls	r3, r3, #3
 800c248:	440b      	add	r3, r1
 800c24a:	681b      	ldr	r3, [r3, #0]
 800c24c:	2b00      	cmp	r3, #0
 800c24e:	d01a      	beq.n	800c286 <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 800c250:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800c254:	497a      	ldr	r1, [pc, #488]	; (800c440 <etharp_find_entry+0x2d4>)
 800c256:	4613      	mov	r3, r2
 800c258:	005b      	lsls	r3, r3, #1
 800c25a:	4413      	add	r3, r2
 800c25c:	00db      	lsls	r3, r3, #3
 800c25e:	440b      	add	r3, r1
 800c260:	3312      	adds	r3, #18
 800c262:	881b      	ldrh	r3, [r3, #0]
 800c264:	8bba      	ldrh	r2, [r7, #28]
 800c266:	429a      	cmp	r2, r3
 800c268:	d845      	bhi.n	800c2f6 <etharp_find_entry+0x18a>
            old_queue = i;
 800c26a:	8c3b      	ldrh	r3, [r7, #32]
 800c26c:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 800c26e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800c272:	4973      	ldr	r1, [pc, #460]	; (800c440 <etharp_find_entry+0x2d4>)
 800c274:	4613      	mov	r3, r2
 800c276:	005b      	lsls	r3, r3, #1
 800c278:	4413      	add	r3, r2
 800c27a:	00db      	lsls	r3, r3, #3
 800c27c:	440b      	add	r3, r1
 800c27e:	3312      	adds	r3, #18
 800c280:	881b      	ldrh	r3, [r3, #0]
 800c282:	83bb      	strh	r3, [r7, #28]
 800c284:	e037      	b.n	800c2f6 <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 800c286:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800c28a:	496d      	ldr	r1, [pc, #436]	; (800c440 <etharp_find_entry+0x2d4>)
 800c28c:	4613      	mov	r3, r2
 800c28e:	005b      	lsls	r3, r3, #1
 800c290:	4413      	add	r3, r2
 800c292:	00db      	lsls	r3, r3, #3
 800c294:	440b      	add	r3, r1
 800c296:	3312      	adds	r3, #18
 800c298:	881b      	ldrh	r3, [r3, #0]
 800c29a:	8b7a      	ldrh	r2, [r7, #26]
 800c29c:	429a      	cmp	r2, r3
 800c29e:	d82a      	bhi.n	800c2f6 <etharp_find_entry+0x18a>
            old_pending = i;
 800c2a0:	8c3b      	ldrh	r3, [r7, #32]
 800c2a2:	84fb      	strh	r3, [r7, #38]	; 0x26
            age_pending = arp_table[i].ctime;
 800c2a4:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800c2a8:	4965      	ldr	r1, [pc, #404]	; (800c440 <etharp_find_entry+0x2d4>)
 800c2aa:	4613      	mov	r3, r2
 800c2ac:	005b      	lsls	r3, r3, #1
 800c2ae:	4413      	add	r3, r2
 800c2b0:	00db      	lsls	r3, r3, #3
 800c2b2:	440b      	add	r3, r1
 800c2b4:	3312      	adds	r3, #18
 800c2b6:	881b      	ldrh	r3, [r3, #0]
 800c2b8:	837b      	strh	r3, [r7, #26]
 800c2ba:	e01c      	b.n	800c2f6 <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 800c2bc:	7dfb      	ldrb	r3, [r7, #23]
 800c2be:	2b01      	cmp	r3, #1
 800c2c0:	d919      	bls.n	800c2f6 <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 800c2c2:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800c2c6:	495e      	ldr	r1, [pc, #376]	; (800c440 <etharp_find_entry+0x2d4>)
 800c2c8:	4613      	mov	r3, r2
 800c2ca:	005b      	lsls	r3, r3, #1
 800c2cc:	4413      	add	r3, r2
 800c2ce:	00db      	lsls	r3, r3, #3
 800c2d0:	440b      	add	r3, r1
 800c2d2:	3312      	adds	r3, #18
 800c2d4:	881b      	ldrh	r3, [r3, #0]
 800c2d6:	8b3a      	ldrh	r2, [r7, #24]
 800c2d8:	429a      	cmp	r2, r3
 800c2da:	d80c      	bhi.n	800c2f6 <etharp_find_entry+0x18a>
            old_stable = i;
 800c2dc:	8c3b      	ldrh	r3, [r7, #32]
 800c2de:	84bb      	strh	r3, [r7, #36]	; 0x24
            age_stable = arp_table[i].ctime;
 800c2e0:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800c2e4:	4956      	ldr	r1, [pc, #344]	; (800c440 <etharp_find_entry+0x2d4>)
 800c2e6:	4613      	mov	r3, r2
 800c2e8:	005b      	lsls	r3, r3, #1
 800c2ea:	4413      	add	r3, r2
 800c2ec:	00db      	lsls	r3, r3, #3
 800c2ee:	440b      	add	r3, r1
 800c2f0:	3312      	adds	r3, #18
 800c2f2:	881b      	ldrh	r3, [r3, #0]
 800c2f4:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800c2f6:	8c3b      	ldrh	r3, [r7, #32]
 800c2f8:	3301      	adds	r3, #1
 800c2fa:	b29b      	uxth	r3, r3
 800c2fc:	843b      	strh	r3, [r7, #32]
 800c2fe:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800c302:	2b09      	cmp	r3, #9
 800c304:	f77f af4c 	ble.w	800c1a0 <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 800c308:	7afb      	ldrb	r3, [r7, #11]
 800c30a:	f003 0302 	and.w	r3, r3, #2
 800c30e:	2b00      	cmp	r3, #0
 800c310:	d108      	bne.n	800c324 <etharp_find_entry+0x1b8>
 800c312:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 800c316:	2b0a      	cmp	r3, #10
 800c318:	d107      	bne.n	800c32a <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 800c31a:	7afb      	ldrb	r3, [r7, #11]
 800c31c:	f003 0301 	and.w	r3, r3, #1
 800c320:	2b00      	cmp	r3, #0
 800c322:	d102      	bne.n	800c32a <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 800c324:	f04f 33ff 	mov.w	r3, #4294967295
 800c328:	e085      	b.n	800c436 <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 800c32a:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 800c32e:	2b09      	cmp	r3, #9
 800c330:	dc02      	bgt.n	800c338 <etharp_find_entry+0x1cc>
    i = empty;
 800c332:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800c334:	843b      	strh	r3, [r7, #32]
 800c336:	e039      	b.n	800c3ac <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 800c338:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 800c33c:	2b09      	cmp	r3, #9
 800c33e:	dc14      	bgt.n	800c36a <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 800c340:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c342:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 800c344:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800c348:	493d      	ldr	r1, [pc, #244]	; (800c440 <etharp_find_entry+0x2d4>)
 800c34a:	4613      	mov	r3, r2
 800c34c:	005b      	lsls	r3, r3, #1
 800c34e:	4413      	add	r3, r2
 800c350:	00db      	lsls	r3, r3, #3
 800c352:	440b      	add	r3, r1
 800c354:	681b      	ldr	r3, [r3, #0]
 800c356:	2b00      	cmp	r3, #0
 800c358:	d018      	beq.n	800c38c <etharp_find_entry+0x220>
 800c35a:	4b3a      	ldr	r3, [pc, #232]	; (800c444 <etharp_find_entry+0x2d8>)
 800c35c:	f240 126d 	movw	r2, #365	; 0x16d
 800c360:	493b      	ldr	r1, [pc, #236]	; (800c450 <etharp_find_entry+0x2e4>)
 800c362:	483a      	ldr	r0, [pc, #232]	; (800c44c <etharp_find_entry+0x2e0>)
 800c364:	f002 f9dc 	bl	800e720 <iprintf>
 800c368:	e010      	b.n	800c38c <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 800c36a:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 800c36e:	2b09      	cmp	r3, #9
 800c370:	dc02      	bgt.n	800c378 <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 800c372:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800c374:	843b      	strh	r3, [r7, #32]
 800c376:	e009      	b.n	800c38c <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 800c378:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800c37c:	2b09      	cmp	r3, #9
 800c37e:	dc02      	bgt.n	800c386 <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 800c380:	8bfb      	ldrh	r3, [r7, #30]
 800c382:	843b      	strh	r3, [r7, #32]
 800c384:	e002      	b.n	800c38c <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 800c386:	f04f 33ff 	mov.w	r3, #4294967295
 800c38a:	e054      	b.n	800c436 <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 800c38c:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800c390:	2b09      	cmp	r3, #9
 800c392:	dd06      	ble.n	800c3a2 <etharp_find_entry+0x236>
 800c394:	4b2b      	ldr	r3, [pc, #172]	; (800c444 <etharp_find_entry+0x2d8>)
 800c396:	f240 127f 	movw	r2, #383	; 0x17f
 800c39a:	492e      	ldr	r1, [pc, #184]	; (800c454 <etharp_find_entry+0x2e8>)
 800c39c:	482b      	ldr	r0, [pc, #172]	; (800c44c <etharp_find_entry+0x2e0>)
 800c39e:	f002 f9bf 	bl	800e720 <iprintf>
    etharp_free_entry(i);
 800c3a2:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800c3a6:	4618      	mov	r0, r3
 800c3a8:	f7ff fe06 	bl	800bfb8 <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 800c3ac:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800c3b0:	2b09      	cmp	r3, #9
 800c3b2:	dd06      	ble.n	800c3c2 <etharp_find_entry+0x256>
 800c3b4:	4b23      	ldr	r3, [pc, #140]	; (800c444 <etharp_find_entry+0x2d8>)
 800c3b6:	f240 1283 	movw	r2, #387	; 0x183
 800c3ba:	4926      	ldr	r1, [pc, #152]	; (800c454 <etharp_find_entry+0x2e8>)
 800c3bc:	4823      	ldr	r0, [pc, #140]	; (800c44c <etharp_find_entry+0x2e0>)
 800c3be:	f002 f9af 	bl	800e720 <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 800c3c2:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800c3c6:	491e      	ldr	r1, [pc, #120]	; (800c440 <etharp_find_entry+0x2d4>)
 800c3c8:	4613      	mov	r3, r2
 800c3ca:	005b      	lsls	r3, r3, #1
 800c3cc:	4413      	add	r3, r2
 800c3ce:	00db      	lsls	r3, r3, #3
 800c3d0:	440b      	add	r3, r1
 800c3d2:	3314      	adds	r3, #20
 800c3d4:	781b      	ldrb	r3, [r3, #0]
 800c3d6:	2b00      	cmp	r3, #0
 800c3d8:	d006      	beq.n	800c3e8 <etharp_find_entry+0x27c>
 800c3da:	4b1a      	ldr	r3, [pc, #104]	; (800c444 <etharp_find_entry+0x2d8>)
 800c3dc:	f44f 72c2 	mov.w	r2, #388	; 0x184
 800c3e0:	491d      	ldr	r1, [pc, #116]	; (800c458 <etharp_find_entry+0x2ec>)
 800c3e2:	481a      	ldr	r0, [pc, #104]	; (800c44c <etharp_find_entry+0x2e0>)
 800c3e4:	f002 f99c 	bl	800e720 <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 800c3e8:	68fb      	ldr	r3, [r7, #12]
 800c3ea:	2b00      	cmp	r3, #0
 800c3ec:	d00b      	beq.n	800c406 <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 800c3ee:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800c3f2:	68fb      	ldr	r3, [r7, #12]
 800c3f4:	6819      	ldr	r1, [r3, #0]
 800c3f6:	4812      	ldr	r0, [pc, #72]	; (800c440 <etharp_find_entry+0x2d4>)
 800c3f8:	4613      	mov	r3, r2
 800c3fa:	005b      	lsls	r3, r3, #1
 800c3fc:	4413      	add	r3, r2
 800c3fe:	00db      	lsls	r3, r3, #3
 800c400:	4403      	add	r3, r0
 800c402:	3304      	adds	r3, #4
 800c404:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 800c406:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800c40a:	490d      	ldr	r1, [pc, #52]	; (800c440 <etharp_find_entry+0x2d4>)
 800c40c:	4613      	mov	r3, r2
 800c40e:	005b      	lsls	r3, r3, #1
 800c410:	4413      	add	r3, r2
 800c412:	00db      	lsls	r3, r3, #3
 800c414:	440b      	add	r3, r1
 800c416:	3312      	adds	r3, #18
 800c418:	2200      	movs	r2, #0
 800c41a:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 800c41c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800c420:	4907      	ldr	r1, [pc, #28]	; (800c440 <etharp_find_entry+0x2d4>)
 800c422:	4613      	mov	r3, r2
 800c424:	005b      	lsls	r3, r3, #1
 800c426:	4413      	add	r3, r2
 800c428:	00db      	lsls	r3, r3, #3
 800c42a:	440b      	add	r3, r1
 800c42c:	3308      	adds	r3, #8
 800c42e:	687a      	ldr	r2, [r7, #4]
 800c430:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 800c432:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 800c436:	4618      	mov	r0, r3
 800c438:	3728      	adds	r7, #40	; 0x28
 800c43a:	46bd      	mov	sp, r7
 800c43c:	bd80      	pop	{r7, pc}
 800c43e:	bf00      	nop
 800c440:	2000834c 	.word	0x2000834c
 800c444:	08011cec 	.word	0x08011cec
 800c448:	08011d24 	.word	0x08011d24
 800c44c:	08011d64 	.word	0x08011d64
 800c450:	08011d8c 	.word	0x08011d8c
 800c454:	08011da4 	.word	0x08011da4
 800c458:	08011db8 	.word	0x08011db8

0800c45c <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 800c45c:	b580      	push	{r7, lr}
 800c45e:	b088      	sub	sp, #32
 800c460:	af02      	add	r7, sp, #8
 800c462:	60f8      	str	r0, [r7, #12]
 800c464:	60b9      	str	r1, [r7, #8]
 800c466:	607a      	str	r2, [r7, #4]
 800c468:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 800c46a:	68fb      	ldr	r3, [r7, #12]
 800c46c:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800c470:	2b06      	cmp	r3, #6
 800c472:	d006      	beq.n	800c482 <etharp_update_arp_entry+0x26>
 800c474:	4b48      	ldr	r3, [pc, #288]	; (800c598 <etharp_update_arp_entry+0x13c>)
 800c476:	f240 12a9 	movw	r2, #425	; 0x1a9
 800c47a:	4948      	ldr	r1, [pc, #288]	; (800c59c <etharp_update_arp_entry+0x140>)
 800c47c:	4848      	ldr	r0, [pc, #288]	; (800c5a0 <etharp_update_arp_entry+0x144>)
 800c47e:	f002 f94f 	bl	800e720 <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 800c482:	68bb      	ldr	r3, [r7, #8]
 800c484:	2b00      	cmp	r3, #0
 800c486:	d012      	beq.n	800c4ae <etharp_update_arp_entry+0x52>
 800c488:	68bb      	ldr	r3, [r7, #8]
 800c48a:	681b      	ldr	r3, [r3, #0]
 800c48c:	2b00      	cmp	r3, #0
 800c48e:	d00e      	beq.n	800c4ae <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 800c490:	68bb      	ldr	r3, [r7, #8]
 800c492:	681b      	ldr	r3, [r3, #0]
 800c494:	68f9      	ldr	r1, [r7, #12]
 800c496:	4618      	mov	r0, r3
 800c498:	f001 f8fe 	bl	800d698 <ip4_addr_isbroadcast_u32>
 800c49c:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 800c49e:	2b00      	cmp	r3, #0
 800c4a0:	d105      	bne.n	800c4ae <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 800c4a2:	68bb      	ldr	r3, [r7, #8]
 800c4a4:	681b      	ldr	r3, [r3, #0]
 800c4a6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 800c4aa:	2be0      	cmp	r3, #224	; 0xe0
 800c4ac:	d102      	bne.n	800c4b4 <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 800c4ae:	f06f 030f 	mvn.w	r3, #15
 800c4b2:	e06c      	b.n	800c58e <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 800c4b4:	78fb      	ldrb	r3, [r7, #3]
 800c4b6:	68fa      	ldr	r2, [r7, #12]
 800c4b8:	4619      	mov	r1, r3
 800c4ba:	68b8      	ldr	r0, [r7, #8]
 800c4bc:	f7ff fe56 	bl	800c16c <etharp_find_entry>
 800c4c0:	4603      	mov	r3, r0
 800c4c2:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 800c4c4:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800c4c8:	2b00      	cmp	r3, #0
 800c4ca:	da02      	bge.n	800c4d2 <etharp_update_arp_entry+0x76>
    return (err_t)i;
 800c4cc:	8afb      	ldrh	r3, [r7, #22]
 800c4ce:	b25b      	sxtb	r3, r3
 800c4d0:	e05d      	b.n	800c58e <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 800c4d2:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800c4d6:	4933      	ldr	r1, [pc, #204]	; (800c5a4 <etharp_update_arp_entry+0x148>)
 800c4d8:	4613      	mov	r3, r2
 800c4da:	005b      	lsls	r3, r3, #1
 800c4dc:	4413      	add	r3, r2
 800c4de:	00db      	lsls	r3, r3, #3
 800c4e0:	440b      	add	r3, r1
 800c4e2:	3314      	adds	r3, #20
 800c4e4:	2202      	movs	r2, #2
 800c4e6:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 800c4e8:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800c4ec:	492d      	ldr	r1, [pc, #180]	; (800c5a4 <etharp_update_arp_entry+0x148>)
 800c4ee:	4613      	mov	r3, r2
 800c4f0:	005b      	lsls	r3, r3, #1
 800c4f2:	4413      	add	r3, r2
 800c4f4:	00db      	lsls	r3, r3, #3
 800c4f6:	440b      	add	r3, r1
 800c4f8:	3308      	adds	r3, #8
 800c4fa:	68fa      	ldr	r2, [r7, #12]
 800c4fc:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 800c4fe:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800c502:	4613      	mov	r3, r2
 800c504:	005b      	lsls	r3, r3, #1
 800c506:	4413      	add	r3, r2
 800c508:	00db      	lsls	r3, r3, #3
 800c50a:	3308      	adds	r3, #8
 800c50c:	4a25      	ldr	r2, [pc, #148]	; (800c5a4 <etharp_update_arp_entry+0x148>)
 800c50e:	4413      	add	r3, r2
 800c510:	3304      	adds	r3, #4
 800c512:	2206      	movs	r2, #6
 800c514:	6879      	ldr	r1, [r7, #4]
 800c516:	4618      	mov	r0, r3
 800c518:	f002 fb06 	bl	800eb28 <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 800c51c:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800c520:	4920      	ldr	r1, [pc, #128]	; (800c5a4 <etharp_update_arp_entry+0x148>)
 800c522:	4613      	mov	r3, r2
 800c524:	005b      	lsls	r3, r3, #1
 800c526:	4413      	add	r3, r2
 800c528:	00db      	lsls	r3, r3, #3
 800c52a:	440b      	add	r3, r1
 800c52c:	3312      	adds	r3, #18
 800c52e:	2200      	movs	r2, #0
 800c530:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 800c532:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800c536:	491b      	ldr	r1, [pc, #108]	; (800c5a4 <etharp_update_arp_entry+0x148>)
 800c538:	4613      	mov	r3, r2
 800c53a:	005b      	lsls	r3, r3, #1
 800c53c:	4413      	add	r3, r2
 800c53e:	00db      	lsls	r3, r3, #3
 800c540:	440b      	add	r3, r1
 800c542:	681b      	ldr	r3, [r3, #0]
 800c544:	2b00      	cmp	r3, #0
 800c546:	d021      	beq.n	800c58c <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 800c548:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800c54c:	4915      	ldr	r1, [pc, #84]	; (800c5a4 <etharp_update_arp_entry+0x148>)
 800c54e:	4613      	mov	r3, r2
 800c550:	005b      	lsls	r3, r3, #1
 800c552:	4413      	add	r3, r2
 800c554:	00db      	lsls	r3, r3, #3
 800c556:	440b      	add	r3, r1
 800c558:	681b      	ldr	r3, [r3, #0]
 800c55a:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 800c55c:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800c560:	4910      	ldr	r1, [pc, #64]	; (800c5a4 <etharp_update_arp_entry+0x148>)
 800c562:	4613      	mov	r3, r2
 800c564:	005b      	lsls	r3, r3, #1
 800c566:	4413      	add	r3, r2
 800c568:	00db      	lsls	r3, r3, #3
 800c56a:	440b      	add	r3, r1
 800c56c:	2200      	movs	r2, #0
 800c56e:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 800c570:	68fb      	ldr	r3, [r7, #12]
 800c572:	f103 0226 	add.w	r2, r3, #38	; 0x26
 800c576:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800c57a:	9300      	str	r3, [sp, #0]
 800c57c:	687b      	ldr	r3, [r7, #4]
 800c57e:	6939      	ldr	r1, [r7, #16]
 800c580:	68f8      	ldr	r0, [r7, #12]
 800c582:	f001 ff97 	bl	800e4b4 <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 800c586:	6938      	ldr	r0, [r7, #16]
 800c588:	f7f9 fa36 	bl	80059f8 <pbuf_free>
  }
  return ERR_OK;
 800c58c:	2300      	movs	r3, #0
}
 800c58e:	4618      	mov	r0, r3
 800c590:	3718      	adds	r7, #24
 800c592:	46bd      	mov	sp, r7
 800c594:	bd80      	pop	{r7, pc}
 800c596:	bf00      	nop
 800c598:	08011cec 	.word	0x08011cec
 800c59c:	08011de4 	.word	0x08011de4
 800c5a0:	08011d64 	.word	0x08011d64
 800c5a4:	2000834c 	.word	0x2000834c

0800c5a8 <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 800c5a8:	b580      	push	{r7, lr}
 800c5aa:	b084      	sub	sp, #16
 800c5ac:	af00      	add	r7, sp, #0
 800c5ae:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800c5b0:	2300      	movs	r3, #0
 800c5b2:	60fb      	str	r3, [r7, #12]
 800c5b4:	e01e      	b.n	800c5f4 <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 800c5b6:	4913      	ldr	r1, [pc, #76]	; (800c604 <etharp_cleanup_netif+0x5c>)
 800c5b8:	68fa      	ldr	r2, [r7, #12]
 800c5ba:	4613      	mov	r3, r2
 800c5bc:	005b      	lsls	r3, r3, #1
 800c5be:	4413      	add	r3, r2
 800c5c0:	00db      	lsls	r3, r3, #3
 800c5c2:	440b      	add	r3, r1
 800c5c4:	3314      	adds	r3, #20
 800c5c6:	781b      	ldrb	r3, [r3, #0]
 800c5c8:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 800c5ca:	7afb      	ldrb	r3, [r7, #11]
 800c5cc:	2b00      	cmp	r3, #0
 800c5ce:	d00e      	beq.n	800c5ee <etharp_cleanup_netif+0x46>
 800c5d0:	490c      	ldr	r1, [pc, #48]	; (800c604 <etharp_cleanup_netif+0x5c>)
 800c5d2:	68fa      	ldr	r2, [r7, #12]
 800c5d4:	4613      	mov	r3, r2
 800c5d6:	005b      	lsls	r3, r3, #1
 800c5d8:	4413      	add	r3, r2
 800c5da:	00db      	lsls	r3, r3, #3
 800c5dc:	440b      	add	r3, r1
 800c5de:	3308      	adds	r3, #8
 800c5e0:	681b      	ldr	r3, [r3, #0]
 800c5e2:	687a      	ldr	r2, [r7, #4]
 800c5e4:	429a      	cmp	r2, r3
 800c5e6:	d102      	bne.n	800c5ee <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 800c5e8:	68f8      	ldr	r0, [r7, #12]
 800c5ea:	f7ff fce5 	bl	800bfb8 <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800c5ee:	68fb      	ldr	r3, [r7, #12]
 800c5f0:	3301      	adds	r3, #1
 800c5f2:	60fb      	str	r3, [r7, #12]
 800c5f4:	68fb      	ldr	r3, [r7, #12]
 800c5f6:	2b09      	cmp	r3, #9
 800c5f8:	dddd      	ble.n	800c5b6 <etharp_cleanup_netif+0xe>
    }
  }
}
 800c5fa:	bf00      	nop
 800c5fc:	bf00      	nop
 800c5fe:	3710      	adds	r7, #16
 800c600:	46bd      	mov	sp, r7
 800c602:	bd80      	pop	{r7, pc}
 800c604:	2000834c 	.word	0x2000834c

0800c608 <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 800c608:	b5b0      	push	{r4, r5, r7, lr}
 800c60a:	b08a      	sub	sp, #40	; 0x28
 800c60c:	af04      	add	r7, sp, #16
 800c60e:	6078      	str	r0, [r7, #4]
 800c610:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 800c612:	683b      	ldr	r3, [r7, #0]
 800c614:	2b00      	cmp	r3, #0
 800c616:	d107      	bne.n	800c628 <etharp_input+0x20>
 800c618:	4b3d      	ldr	r3, [pc, #244]	; (800c710 <etharp_input+0x108>)
 800c61a:	f240 228a 	movw	r2, #650	; 0x28a
 800c61e:	493d      	ldr	r1, [pc, #244]	; (800c714 <etharp_input+0x10c>)
 800c620:	483d      	ldr	r0, [pc, #244]	; (800c718 <etharp_input+0x110>)
 800c622:	f002 f87d 	bl	800e720 <iprintf>
 800c626:	e06f      	b.n	800c708 <etharp_input+0x100>

  hdr = (struct etharp_hdr *)p->payload;
 800c628:	687b      	ldr	r3, [r7, #4]
 800c62a:	685b      	ldr	r3, [r3, #4]
 800c62c:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 800c62e:	693b      	ldr	r3, [r7, #16]
 800c630:	881b      	ldrh	r3, [r3, #0]
 800c632:	b29b      	uxth	r3, r3
 800c634:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c638:	d10c      	bne.n	800c654 <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 800c63a:	693b      	ldr	r3, [r7, #16]
 800c63c:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 800c63e:	2b06      	cmp	r3, #6
 800c640:	d108      	bne.n	800c654 <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 800c642:	693b      	ldr	r3, [r7, #16]
 800c644:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 800c646:	2b04      	cmp	r3, #4
 800c648:	d104      	bne.n	800c654 <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 800c64a:	693b      	ldr	r3, [r7, #16]
 800c64c:	885b      	ldrh	r3, [r3, #2]
 800c64e:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 800c650:	2b08      	cmp	r3, #8
 800c652:	d003      	beq.n	800c65c <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 800c654:	6878      	ldr	r0, [r7, #4]
 800c656:	f7f9 f9cf 	bl	80059f8 <pbuf_free>
    return;
 800c65a:	e055      	b.n	800c708 <etharp_input+0x100>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 800c65c:	693b      	ldr	r3, [r7, #16]
 800c65e:	330e      	adds	r3, #14
 800c660:	681b      	ldr	r3, [r3, #0]
 800c662:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 800c664:	693b      	ldr	r3, [r7, #16]
 800c666:	3318      	adds	r3, #24
 800c668:	681b      	ldr	r3, [r3, #0]
 800c66a:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800c66c:	683b      	ldr	r3, [r7, #0]
 800c66e:	3304      	adds	r3, #4
 800c670:	681b      	ldr	r3, [r3, #0]
 800c672:	2b00      	cmp	r3, #0
 800c674:	d102      	bne.n	800c67c <etharp_input+0x74>
    for_us = 0;
 800c676:	2300      	movs	r3, #0
 800c678:	75fb      	strb	r3, [r7, #23]
 800c67a:	e009      	b.n	800c690 <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 800c67c:	68ba      	ldr	r2, [r7, #8]
 800c67e:	683b      	ldr	r3, [r7, #0]
 800c680:	3304      	adds	r3, #4
 800c682:	681b      	ldr	r3, [r3, #0]
 800c684:	429a      	cmp	r2, r3
 800c686:	bf0c      	ite	eq
 800c688:	2301      	moveq	r3, #1
 800c68a:	2300      	movne	r3, #0
 800c68c:	b2db      	uxtb	r3, r3
 800c68e:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 800c690:	693b      	ldr	r3, [r7, #16]
 800c692:	f103 0208 	add.w	r2, r3, #8
 800c696:	7dfb      	ldrb	r3, [r7, #23]
 800c698:	2b00      	cmp	r3, #0
 800c69a:	d001      	beq.n	800c6a0 <etharp_input+0x98>
 800c69c:	2301      	movs	r3, #1
 800c69e:	e000      	b.n	800c6a2 <etharp_input+0x9a>
 800c6a0:	2302      	movs	r3, #2
 800c6a2:	f107 010c 	add.w	r1, r7, #12
 800c6a6:	6838      	ldr	r0, [r7, #0]
 800c6a8:	f7ff fed8 	bl	800c45c <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 800c6ac:	693b      	ldr	r3, [r7, #16]
 800c6ae:	88db      	ldrh	r3, [r3, #6]
 800c6b0:	b29b      	uxth	r3, r3
 800c6b2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c6b6:	d003      	beq.n	800c6c0 <etharp_input+0xb8>
 800c6b8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c6bc:	d01e      	beq.n	800c6fc <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 800c6be:	e020      	b.n	800c702 <etharp_input+0xfa>
      if (for_us) {
 800c6c0:	7dfb      	ldrb	r3, [r7, #23]
 800c6c2:	2b00      	cmp	r3, #0
 800c6c4:	d01c      	beq.n	800c700 <etharp_input+0xf8>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 800c6c6:	683b      	ldr	r3, [r7, #0]
 800c6c8:	f103 0026 	add.w	r0, r3, #38	; 0x26
 800c6cc:	693b      	ldr	r3, [r7, #16]
 800c6ce:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 800c6d2:	683b      	ldr	r3, [r7, #0]
 800c6d4:	f103 0526 	add.w	r5, r3, #38	; 0x26
 800c6d8:	683b      	ldr	r3, [r7, #0]
 800c6da:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 800c6dc:	693a      	ldr	r2, [r7, #16]
 800c6de:	3208      	adds	r2, #8
        etharp_raw(netif,
 800c6e0:	2102      	movs	r1, #2
 800c6e2:	9103      	str	r1, [sp, #12]
 800c6e4:	f107 010c 	add.w	r1, r7, #12
 800c6e8:	9102      	str	r1, [sp, #8]
 800c6ea:	9201      	str	r2, [sp, #4]
 800c6ec:	9300      	str	r3, [sp, #0]
 800c6ee:	462b      	mov	r3, r5
 800c6f0:	4622      	mov	r2, r4
 800c6f2:	4601      	mov	r1, r0
 800c6f4:	6838      	ldr	r0, [r7, #0]
 800c6f6:	f000 faeb 	bl	800ccd0 <etharp_raw>
      break;
 800c6fa:	e001      	b.n	800c700 <etharp_input+0xf8>
      break;
 800c6fc:	bf00      	nop
 800c6fe:	e000      	b.n	800c702 <etharp_input+0xfa>
      break;
 800c700:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 800c702:	6878      	ldr	r0, [r7, #4]
 800c704:	f7f9 f978 	bl	80059f8 <pbuf_free>
}
 800c708:	3718      	adds	r7, #24
 800c70a:	46bd      	mov	sp, r7
 800c70c:	bdb0      	pop	{r4, r5, r7, pc}
 800c70e:	bf00      	nop
 800c710:	08011cec 	.word	0x08011cec
 800c714:	08011e3c 	.word	0x08011e3c
 800c718:	08011d64 	.word	0x08011d64

0800c71c <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 800c71c:	b580      	push	{r7, lr}
 800c71e:	b086      	sub	sp, #24
 800c720:	af02      	add	r7, sp, #8
 800c722:	60f8      	str	r0, [r7, #12]
 800c724:	60b9      	str	r1, [r7, #8]
 800c726:	4613      	mov	r3, r2
 800c728:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 800c72a:	79fa      	ldrb	r2, [r7, #7]
 800c72c:	4944      	ldr	r1, [pc, #272]	; (800c840 <etharp_output_to_arp_index+0x124>)
 800c72e:	4613      	mov	r3, r2
 800c730:	005b      	lsls	r3, r3, #1
 800c732:	4413      	add	r3, r2
 800c734:	00db      	lsls	r3, r3, #3
 800c736:	440b      	add	r3, r1
 800c738:	3314      	adds	r3, #20
 800c73a:	781b      	ldrb	r3, [r3, #0]
 800c73c:	2b01      	cmp	r3, #1
 800c73e:	d806      	bhi.n	800c74e <etharp_output_to_arp_index+0x32>
 800c740:	4b40      	ldr	r3, [pc, #256]	; (800c844 <etharp_output_to_arp_index+0x128>)
 800c742:	f240 22ee 	movw	r2, #750	; 0x2ee
 800c746:	4940      	ldr	r1, [pc, #256]	; (800c848 <etharp_output_to_arp_index+0x12c>)
 800c748:	4840      	ldr	r0, [pc, #256]	; (800c84c <etharp_output_to_arp_index+0x130>)
 800c74a:	f001 ffe9 	bl	800e720 <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 800c74e:	79fa      	ldrb	r2, [r7, #7]
 800c750:	493b      	ldr	r1, [pc, #236]	; (800c840 <etharp_output_to_arp_index+0x124>)
 800c752:	4613      	mov	r3, r2
 800c754:	005b      	lsls	r3, r3, #1
 800c756:	4413      	add	r3, r2
 800c758:	00db      	lsls	r3, r3, #3
 800c75a:	440b      	add	r3, r1
 800c75c:	3314      	adds	r3, #20
 800c75e:	781b      	ldrb	r3, [r3, #0]
 800c760:	2b02      	cmp	r3, #2
 800c762:	d153      	bne.n	800c80c <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 800c764:	79fa      	ldrb	r2, [r7, #7]
 800c766:	4936      	ldr	r1, [pc, #216]	; (800c840 <etharp_output_to_arp_index+0x124>)
 800c768:	4613      	mov	r3, r2
 800c76a:	005b      	lsls	r3, r3, #1
 800c76c:	4413      	add	r3, r2
 800c76e:	00db      	lsls	r3, r3, #3
 800c770:	440b      	add	r3, r1
 800c772:	3312      	adds	r3, #18
 800c774:	881b      	ldrh	r3, [r3, #0]
 800c776:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 800c77a:	d919      	bls.n	800c7b0 <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 800c77c:	79fa      	ldrb	r2, [r7, #7]
 800c77e:	4613      	mov	r3, r2
 800c780:	005b      	lsls	r3, r3, #1
 800c782:	4413      	add	r3, r2
 800c784:	00db      	lsls	r3, r3, #3
 800c786:	4a2e      	ldr	r2, [pc, #184]	; (800c840 <etharp_output_to_arp_index+0x124>)
 800c788:	4413      	add	r3, r2
 800c78a:	3304      	adds	r3, #4
 800c78c:	4619      	mov	r1, r3
 800c78e:	68f8      	ldr	r0, [r7, #12]
 800c790:	f000 fb4c 	bl	800ce2c <etharp_request>
 800c794:	4603      	mov	r3, r0
 800c796:	2b00      	cmp	r3, #0
 800c798:	d138      	bne.n	800c80c <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 800c79a:	79fa      	ldrb	r2, [r7, #7]
 800c79c:	4928      	ldr	r1, [pc, #160]	; (800c840 <etharp_output_to_arp_index+0x124>)
 800c79e:	4613      	mov	r3, r2
 800c7a0:	005b      	lsls	r3, r3, #1
 800c7a2:	4413      	add	r3, r2
 800c7a4:	00db      	lsls	r3, r3, #3
 800c7a6:	440b      	add	r3, r1
 800c7a8:	3314      	adds	r3, #20
 800c7aa:	2203      	movs	r2, #3
 800c7ac:	701a      	strb	r2, [r3, #0]
 800c7ae:	e02d      	b.n	800c80c <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 800c7b0:	79fa      	ldrb	r2, [r7, #7]
 800c7b2:	4923      	ldr	r1, [pc, #140]	; (800c840 <etharp_output_to_arp_index+0x124>)
 800c7b4:	4613      	mov	r3, r2
 800c7b6:	005b      	lsls	r3, r3, #1
 800c7b8:	4413      	add	r3, r2
 800c7ba:	00db      	lsls	r3, r3, #3
 800c7bc:	440b      	add	r3, r1
 800c7be:	3312      	adds	r3, #18
 800c7c0:	881b      	ldrh	r3, [r3, #0]
 800c7c2:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 800c7c6:	d321      	bcc.n	800c80c <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 800c7c8:	79fa      	ldrb	r2, [r7, #7]
 800c7ca:	4613      	mov	r3, r2
 800c7cc:	005b      	lsls	r3, r3, #1
 800c7ce:	4413      	add	r3, r2
 800c7d0:	00db      	lsls	r3, r3, #3
 800c7d2:	4a1b      	ldr	r2, [pc, #108]	; (800c840 <etharp_output_to_arp_index+0x124>)
 800c7d4:	4413      	add	r3, r2
 800c7d6:	1d19      	adds	r1, r3, #4
 800c7d8:	79fa      	ldrb	r2, [r7, #7]
 800c7da:	4613      	mov	r3, r2
 800c7dc:	005b      	lsls	r3, r3, #1
 800c7de:	4413      	add	r3, r2
 800c7e0:	00db      	lsls	r3, r3, #3
 800c7e2:	3308      	adds	r3, #8
 800c7e4:	4a16      	ldr	r2, [pc, #88]	; (800c840 <etharp_output_to_arp_index+0x124>)
 800c7e6:	4413      	add	r3, r2
 800c7e8:	3304      	adds	r3, #4
 800c7ea:	461a      	mov	r2, r3
 800c7ec:	68f8      	ldr	r0, [r7, #12]
 800c7ee:	f000 fafb 	bl	800cde8 <etharp_request_dst>
 800c7f2:	4603      	mov	r3, r0
 800c7f4:	2b00      	cmp	r3, #0
 800c7f6:	d109      	bne.n	800c80c <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 800c7f8:	79fa      	ldrb	r2, [r7, #7]
 800c7fa:	4911      	ldr	r1, [pc, #68]	; (800c840 <etharp_output_to_arp_index+0x124>)
 800c7fc:	4613      	mov	r3, r2
 800c7fe:	005b      	lsls	r3, r3, #1
 800c800:	4413      	add	r3, r2
 800c802:	00db      	lsls	r3, r3, #3
 800c804:	440b      	add	r3, r1
 800c806:	3314      	adds	r3, #20
 800c808:	2203      	movs	r2, #3
 800c80a:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 800c80c:	68fb      	ldr	r3, [r7, #12]
 800c80e:	f103 0126 	add.w	r1, r3, #38	; 0x26
 800c812:	79fa      	ldrb	r2, [r7, #7]
 800c814:	4613      	mov	r3, r2
 800c816:	005b      	lsls	r3, r3, #1
 800c818:	4413      	add	r3, r2
 800c81a:	00db      	lsls	r3, r3, #3
 800c81c:	3308      	adds	r3, #8
 800c81e:	4a08      	ldr	r2, [pc, #32]	; (800c840 <etharp_output_to_arp_index+0x124>)
 800c820:	4413      	add	r3, r2
 800c822:	3304      	adds	r3, #4
 800c824:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800c828:	9200      	str	r2, [sp, #0]
 800c82a:	460a      	mov	r2, r1
 800c82c:	68b9      	ldr	r1, [r7, #8]
 800c82e:	68f8      	ldr	r0, [r7, #12]
 800c830:	f001 fe40 	bl	800e4b4 <ethernet_output>
 800c834:	4603      	mov	r3, r0
}
 800c836:	4618      	mov	r0, r3
 800c838:	3710      	adds	r7, #16
 800c83a:	46bd      	mov	sp, r7
 800c83c:	bd80      	pop	{r7, pc}
 800c83e:	bf00      	nop
 800c840:	2000834c 	.word	0x2000834c
 800c844:	08011cec 	.word	0x08011cec
 800c848:	08011e5c 	.word	0x08011e5c
 800c84c:	08011d64 	.word	0x08011d64

0800c850 <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 800c850:	b580      	push	{r7, lr}
 800c852:	b08a      	sub	sp, #40	; 0x28
 800c854:	af02      	add	r7, sp, #8
 800c856:	60f8      	str	r0, [r7, #12]
 800c858:	60b9      	str	r1, [r7, #8]
 800c85a:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 800c85c:	687b      	ldr	r3, [r7, #4]
 800c85e:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 800c860:	68fb      	ldr	r3, [r7, #12]
 800c862:	2b00      	cmp	r3, #0
 800c864:	d106      	bne.n	800c874 <etharp_output+0x24>
 800c866:	4b73      	ldr	r3, [pc, #460]	; (800ca34 <etharp_output+0x1e4>)
 800c868:	f240 321e 	movw	r2, #798	; 0x31e
 800c86c:	4972      	ldr	r1, [pc, #456]	; (800ca38 <etharp_output+0x1e8>)
 800c86e:	4873      	ldr	r0, [pc, #460]	; (800ca3c <etharp_output+0x1ec>)
 800c870:	f001 ff56 	bl	800e720 <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 800c874:	68bb      	ldr	r3, [r7, #8]
 800c876:	2b00      	cmp	r3, #0
 800c878:	d106      	bne.n	800c888 <etharp_output+0x38>
 800c87a:	4b6e      	ldr	r3, [pc, #440]	; (800ca34 <etharp_output+0x1e4>)
 800c87c:	f240 321f 	movw	r2, #799	; 0x31f
 800c880:	496f      	ldr	r1, [pc, #444]	; (800ca40 <etharp_output+0x1f0>)
 800c882:	486e      	ldr	r0, [pc, #440]	; (800ca3c <etharp_output+0x1ec>)
 800c884:	f001 ff4c 	bl	800e720 <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 800c888:	687b      	ldr	r3, [r7, #4]
 800c88a:	2b00      	cmp	r3, #0
 800c88c:	d106      	bne.n	800c89c <etharp_output+0x4c>
 800c88e:	4b69      	ldr	r3, [pc, #420]	; (800ca34 <etharp_output+0x1e4>)
 800c890:	f44f 7248 	mov.w	r2, #800	; 0x320
 800c894:	496b      	ldr	r1, [pc, #428]	; (800ca44 <etharp_output+0x1f4>)
 800c896:	4869      	ldr	r0, [pc, #420]	; (800ca3c <etharp_output+0x1ec>)
 800c898:	f001 ff42 	bl	800e720 <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 800c89c:	687b      	ldr	r3, [r7, #4]
 800c89e:	681b      	ldr	r3, [r3, #0]
 800c8a0:	68f9      	ldr	r1, [r7, #12]
 800c8a2:	4618      	mov	r0, r3
 800c8a4:	f000 fef8 	bl	800d698 <ip4_addr_isbroadcast_u32>
 800c8a8:	4603      	mov	r3, r0
 800c8aa:	2b00      	cmp	r3, #0
 800c8ac:	d002      	beq.n	800c8b4 <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 800c8ae:	4b66      	ldr	r3, [pc, #408]	; (800ca48 <etharp_output+0x1f8>)
 800c8b0:	61fb      	str	r3, [r7, #28]
 800c8b2:	e0af      	b.n	800ca14 <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 800c8b4:	687b      	ldr	r3, [r7, #4]
 800c8b6:	681b      	ldr	r3, [r3, #0]
 800c8b8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800c8bc:	2be0      	cmp	r3, #224	; 0xe0
 800c8be:	d118      	bne.n	800c8f2 <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 800c8c0:	2301      	movs	r3, #1
 800c8c2:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 800c8c4:	2300      	movs	r3, #0
 800c8c6:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 800c8c8:	235e      	movs	r3, #94	; 0x5e
 800c8ca:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 800c8cc:	687b      	ldr	r3, [r7, #4]
 800c8ce:	3301      	adds	r3, #1
 800c8d0:	781b      	ldrb	r3, [r3, #0]
 800c8d2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c8d6:	b2db      	uxtb	r3, r3
 800c8d8:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 800c8da:	687b      	ldr	r3, [r7, #4]
 800c8dc:	3302      	adds	r3, #2
 800c8de:	781b      	ldrb	r3, [r3, #0]
 800c8e0:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 800c8e2:	687b      	ldr	r3, [r7, #4]
 800c8e4:	3303      	adds	r3, #3
 800c8e6:	781b      	ldrb	r3, [r3, #0]
 800c8e8:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 800c8ea:	f107 0310 	add.w	r3, r7, #16
 800c8ee:	61fb      	str	r3, [r7, #28]
 800c8f0:	e090      	b.n	800ca14 <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 800c8f2:	687b      	ldr	r3, [r7, #4]
 800c8f4:	681a      	ldr	r2, [r3, #0]
 800c8f6:	68fb      	ldr	r3, [r7, #12]
 800c8f8:	3304      	adds	r3, #4
 800c8fa:	681b      	ldr	r3, [r3, #0]
 800c8fc:	405a      	eors	r2, r3
 800c8fe:	68fb      	ldr	r3, [r7, #12]
 800c900:	3308      	adds	r3, #8
 800c902:	681b      	ldr	r3, [r3, #0]
 800c904:	4013      	ands	r3, r2
 800c906:	2b00      	cmp	r3, #0
 800c908:	d012      	beq.n	800c930 <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 800c90a:	687b      	ldr	r3, [r7, #4]
 800c90c:	681b      	ldr	r3, [r3, #0]
 800c90e:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 800c910:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 800c914:	4293      	cmp	r3, r2
 800c916:	d00b      	beq.n	800c930 <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 800c918:	68fb      	ldr	r3, [r7, #12]
 800c91a:	330c      	adds	r3, #12
 800c91c:	681b      	ldr	r3, [r3, #0]
 800c91e:	2b00      	cmp	r3, #0
 800c920:	d003      	beq.n	800c92a <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 800c922:	68fb      	ldr	r3, [r7, #12]
 800c924:	330c      	adds	r3, #12
 800c926:	61bb      	str	r3, [r7, #24]
 800c928:	e002      	b.n	800c930 <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 800c92a:	f06f 0303 	mvn.w	r3, #3
 800c92e:	e07d      	b.n	800ca2c <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 800c930:	4b46      	ldr	r3, [pc, #280]	; (800ca4c <etharp_output+0x1fc>)
 800c932:	781b      	ldrb	r3, [r3, #0]
 800c934:	4619      	mov	r1, r3
 800c936:	4a46      	ldr	r2, [pc, #280]	; (800ca50 <etharp_output+0x200>)
 800c938:	460b      	mov	r3, r1
 800c93a:	005b      	lsls	r3, r3, #1
 800c93c:	440b      	add	r3, r1
 800c93e:	00db      	lsls	r3, r3, #3
 800c940:	4413      	add	r3, r2
 800c942:	3314      	adds	r3, #20
 800c944:	781b      	ldrb	r3, [r3, #0]
 800c946:	2b01      	cmp	r3, #1
 800c948:	d925      	bls.n	800c996 <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 800c94a:	4b40      	ldr	r3, [pc, #256]	; (800ca4c <etharp_output+0x1fc>)
 800c94c:	781b      	ldrb	r3, [r3, #0]
 800c94e:	4619      	mov	r1, r3
 800c950:	4a3f      	ldr	r2, [pc, #252]	; (800ca50 <etharp_output+0x200>)
 800c952:	460b      	mov	r3, r1
 800c954:	005b      	lsls	r3, r3, #1
 800c956:	440b      	add	r3, r1
 800c958:	00db      	lsls	r3, r3, #3
 800c95a:	4413      	add	r3, r2
 800c95c:	3308      	adds	r3, #8
 800c95e:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 800c960:	68fa      	ldr	r2, [r7, #12]
 800c962:	429a      	cmp	r2, r3
 800c964:	d117      	bne.n	800c996 <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 800c966:	69bb      	ldr	r3, [r7, #24]
 800c968:	681a      	ldr	r2, [r3, #0]
 800c96a:	4b38      	ldr	r3, [pc, #224]	; (800ca4c <etharp_output+0x1fc>)
 800c96c:	781b      	ldrb	r3, [r3, #0]
 800c96e:	4618      	mov	r0, r3
 800c970:	4937      	ldr	r1, [pc, #220]	; (800ca50 <etharp_output+0x200>)
 800c972:	4603      	mov	r3, r0
 800c974:	005b      	lsls	r3, r3, #1
 800c976:	4403      	add	r3, r0
 800c978:	00db      	lsls	r3, r3, #3
 800c97a:	440b      	add	r3, r1
 800c97c:	3304      	adds	r3, #4
 800c97e:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 800c980:	429a      	cmp	r2, r3
 800c982:	d108      	bne.n	800c996 <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 800c984:	4b31      	ldr	r3, [pc, #196]	; (800ca4c <etharp_output+0x1fc>)
 800c986:	781b      	ldrb	r3, [r3, #0]
 800c988:	461a      	mov	r2, r3
 800c98a:	68b9      	ldr	r1, [r7, #8]
 800c98c:	68f8      	ldr	r0, [r7, #12]
 800c98e:	f7ff fec5 	bl	800c71c <etharp_output_to_arp_index>
 800c992:	4603      	mov	r3, r0
 800c994:	e04a      	b.n	800ca2c <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 800c996:	2300      	movs	r3, #0
 800c998:	75fb      	strb	r3, [r7, #23]
 800c99a:	e031      	b.n	800ca00 <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 800c99c:	7dfa      	ldrb	r2, [r7, #23]
 800c99e:	492c      	ldr	r1, [pc, #176]	; (800ca50 <etharp_output+0x200>)
 800c9a0:	4613      	mov	r3, r2
 800c9a2:	005b      	lsls	r3, r3, #1
 800c9a4:	4413      	add	r3, r2
 800c9a6:	00db      	lsls	r3, r3, #3
 800c9a8:	440b      	add	r3, r1
 800c9aa:	3314      	adds	r3, #20
 800c9ac:	781b      	ldrb	r3, [r3, #0]
 800c9ae:	2b01      	cmp	r3, #1
 800c9b0:	d923      	bls.n	800c9fa <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 800c9b2:	7dfa      	ldrb	r2, [r7, #23]
 800c9b4:	4926      	ldr	r1, [pc, #152]	; (800ca50 <etharp_output+0x200>)
 800c9b6:	4613      	mov	r3, r2
 800c9b8:	005b      	lsls	r3, r3, #1
 800c9ba:	4413      	add	r3, r2
 800c9bc:	00db      	lsls	r3, r3, #3
 800c9be:	440b      	add	r3, r1
 800c9c0:	3308      	adds	r3, #8
 800c9c2:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 800c9c4:	68fa      	ldr	r2, [r7, #12]
 800c9c6:	429a      	cmp	r2, r3
 800c9c8:	d117      	bne.n	800c9fa <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 800c9ca:	69bb      	ldr	r3, [r7, #24]
 800c9cc:	6819      	ldr	r1, [r3, #0]
 800c9ce:	7dfa      	ldrb	r2, [r7, #23]
 800c9d0:	481f      	ldr	r0, [pc, #124]	; (800ca50 <etharp_output+0x200>)
 800c9d2:	4613      	mov	r3, r2
 800c9d4:	005b      	lsls	r3, r3, #1
 800c9d6:	4413      	add	r3, r2
 800c9d8:	00db      	lsls	r3, r3, #3
 800c9da:	4403      	add	r3, r0
 800c9dc:	3304      	adds	r3, #4
 800c9de:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 800c9e0:	4299      	cmp	r1, r3
 800c9e2:	d10a      	bne.n	800c9fa <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 800c9e4:	4a19      	ldr	r2, [pc, #100]	; (800ca4c <etharp_output+0x1fc>)
 800c9e6:	7dfb      	ldrb	r3, [r7, #23]
 800c9e8:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 800c9ea:	7dfb      	ldrb	r3, [r7, #23]
 800c9ec:	461a      	mov	r2, r3
 800c9ee:	68b9      	ldr	r1, [r7, #8]
 800c9f0:	68f8      	ldr	r0, [r7, #12]
 800c9f2:	f7ff fe93 	bl	800c71c <etharp_output_to_arp_index>
 800c9f6:	4603      	mov	r3, r0
 800c9f8:	e018      	b.n	800ca2c <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 800c9fa:	7dfb      	ldrb	r3, [r7, #23]
 800c9fc:	3301      	adds	r3, #1
 800c9fe:	75fb      	strb	r3, [r7, #23]
 800ca00:	7dfb      	ldrb	r3, [r7, #23]
 800ca02:	2b09      	cmp	r3, #9
 800ca04:	d9ca      	bls.n	800c99c <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 800ca06:	68ba      	ldr	r2, [r7, #8]
 800ca08:	69b9      	ldr	r1, [r7, #24]
 800ca0a:	68f8      	ldr	r0, [r7, #12]
 800ca0c:	f000 f822 	bl	800ca54 <etharp_query>
 800ca10:	4603      	mov	r3, r0
 800ca12:	e00b      	b.n	800ca2c <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 800ca14:	68fb      	ldr	r3, [r7, #12]
 800ca16:	f103 0226 	add.w	r2, r3, #38	; 0x26
 800ca1a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800ca1e:	9300      	str	r3, [sp, #0]
 800ca20:	69fb      	ldr	r3, [r7, #28]
 800ca22:	68b9      	ldr	r1, [r7, #8]
 800ca24:	68f8      	ldr	r0, [r7, #12]
 800ca26:	f001 fd45 	bl	800e4b4 <ethernet_output>
 800ca2a:	4603      	mov	r3, r0
}
 800ca2c:	4618      	mov	r0, r3
 800ca2e:	3720      	adds	r7, #32
 800ca30:	46bd      	mov	sp, r7
 800ca32:	bd80      	pop	{r7, pc}
 800ca34:	08011cec 	.word	0x08011cec
 800ca38:	08011e3c 	.word	0x08011e3c
 800ca3c:	08011d64 	.word	0x08011d64
 800ca40:	08011e8c 	.word	0x08011e8c
 800ca44:	08011e2c 	.word	0x08011e2c
 800ca48:	080124a8 	.word	0x080124a8
 800ca4c:	2000843c 	.word	0x2000843c
 800ca50:	2000834c 	.word	0x2000834c

0800ca54 <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 800ca54:	b580      	push	{r7, lr}
 800ca56:	b08c      	sub	sp, #48	; 0x30
 800ca58:	af02      	add	r7, sp, #8
 800ca5a:	60f8      	str	r0, [r7, #12]
 800ca5c:	60b9      	str	r1, [r7, #8]
 800ca5e:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 800ca60:	68fb      	ldr	r3, [r7, #12]
 800ca62:	3326      	adds	r3, #38	; 0x26
 800ca64:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 800ca66:	23ff      	movs	r3, #255	; 0xff
 800ca68:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  int is_new_entry = 0;
 800ca6c:	2300      	movs	r3, #0
 800ca6e:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 800ca70:	68bb      	ldr	r3, [r7, #8]
 800ca72:	681b      	ldr	r3, [r3, #0]
 800ca74:	68f9      	ldr	r1, [r7, #12]
 800ca76:	4618      	mov	r0, r3
 800ca78:	f000 fe0e 	bl	800d698 <ip4_addr_isbroadcast_u32>
 800ca7c:	4603      	mov	r3, r0
 800ca7e:	2b00      	cmp	r3, #0
 800ca80:	d10c      	bne.n	800ca9c <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 800ca82:	68bb      	ldr	r3, [r7, #8]
 800ca84:	681b      	ldr	r3, [r3, #0]
 800ca86:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 800ca8a:	2be0      	cmp	r3, #224	; 0xe0
 800ca8c:	d006      	beq.n	800ca9c <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 800ca8e:	68bb      	ldr	r3, [r7, #8]
 800ca90:	2b00      	cmp	r3, #0
 800ca92:	d003      	beq.n	800ca9c <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 800ca94:	68bb      	ldr	r3, [r7, #8]
 800ca96:	681b      	ldr	r3, [r3, #0]
 800ca98:	2b00      	cmp	r3, #0
 800ca9a:	d102      	bne.n	800caa2 <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 800ca9c:	f06f 030f 	mvn.w	r3, #15
 800caa0:	e101      	b.n	800cca6 <etharp_query+0x252>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 800caa2:	68fa      	ldr	r2, [r7, #12]
 800caa4:	2101      	movs	r1, #1
 800caa6:	68b8      	ldr	r0, [r7, #8]
 800caa8:	f7ff fb60 	bl	800c16c <etharp_find_entry>
 800caac:	4603      	mov	r3, r0
 800caae:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 800cab0:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800cab4:	2b00      	cmp	r3, #0
 800cab6:	da02      	bge.n	800cabe <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 800cab8:	8a7b      	ldrh	r3, [r7, #18]
 800caba:	b25b      	sxtb	r3, r3
 800cabc:	e0f3      	b.n	800cca6 <etharp_query+0x252>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 800cabe:	8a7b      	ldrh	r3, [r7, #18]
 800cac0:	2b7e      	cmp	r3, #126	; 0x7e
 800cac2:	d906      	bls.n	800cad2 <etharp_query+0x7e>
 800cac4:	4b7a      	ldr	r3, [pc, #488]	; (800ccb0 <etharp_query+0x25c>)
 800cac6:	f240 32c1 	movw	r2, #961	; 0x3c1
 800caca:	497a      	ldr	r1, [pc, #488]	; (800ccb4 <etharp_query+0x260>)
 800cacc:	487a      	ldr	r0, [pc, #488]	; (800ccb8 <etharp_query+0x264>)
 800cace:	f001 fe27 	bl	800e720 <iprintf>
  i = (netif_addr_idx_t)i_err;
 800cad2:	8a7b      	ldrh	r3, [r7, #18]
 800cad4:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 800cad6:	7c7a      	ldrb	r2, [r7, #17]
 800cad8:	4978      	ldr	r1, [pc, #480]	; (800ccbc <etharp_query+0x268>)
 800cada:	4613      	mov	r3, r2
 800cadc:	005b      	lsls	r3, r3, #1
 800cade:	4413      	add	r3, r2
 800cae0:	00db      	lsls	r3, r3, #3
 800cae2:	440b      	add	r3, r1
 800cae4:	3314      	adds	r3, #20
 800cae6:	781b      	ldrb	r3, [r3, #0]
 800cae8:	2b00      	cmp	r3, #0
 800caea:	d115      	bne.n	800cb18 <etharp_query+0xc4>
    is_new_entry = 1;
 800caec:	2301      	movs	r3, #1
 800caee:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 800caf0:	7c7a      	ldrb	r2, [r7, #17]
 800caf2:	4972      	ldr	r1, [pc, #456]	; (800ccbc <etharp_query+0x268>)
 800caf4:	4613      	mov	r3, r2
 800caf6:	005b      	lsls	r3, r3, #1
 800caf8:	4413      	add	r3, r2
 800cafa:	00db      	lsls	r3, r3, #3
 800cafc:	440b      	add	r3, r1
 800cafe:	3314      	adds	r3, #20
 800cb00:	2201      	movs	r2, #1
 800cb02:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 800cb04:	7c7a      	ldrb	r2, [r7, #17]
 800cb06:	496d      	ldr	r1, [pc, #436]	; (800ccbc <etharp_query+0x268>)
 800cb08:	4613      	mov	r3, r2
 800cb0a:	005b      	lsls	r3, r3, #1
 800cb0c:	4413      	add	r3, r2
 800cb0e:	00db      	lsls	r3, r3, #3
 800cb10:	440b      	add	r3, r1
 800cb12:	3308      	adds	r3, #8
 800cb14:	68fa      	ldr	r2, [r7, #12]
 800cb16:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 800cb18:	7c7a      	ldrb	r2, [r7, #17]
 800cb1a:	4968      	ldr	r1, [pc, #416]	; (800ccbc <etharp_query+0x268>)
 800cb1c:	4613      	mov	r3, r2
 800cb1e:	005b      	lsls	r3, r3, #1
 800cb20:	4413      	add	r3, r2
 800cb22:	00db      	lsls	r3, r3, #3
 800cb24:	440b      	add	r3, r1
 800cb26:	3314      	adds	r3, #20
 800cb28:	781b      	ldrb	r3, [r3, #0]
 800cb2a:	2b01      	cmp	r3, #1
 800cb2c:	d011      	beq.n	800cb52 <etharp_query+0xfe>
 800cb2e:	7c7a      	ldrb	r2, [r7, #17]
 800cb30:	4962      	ldr	r1, [pc, #392]	; (800ccbc <etharp_query+0x268>)
 800cb32:	4613      	mov	r3, r2
 800cb34:	005b      	lsls	r3, r3, #1
 800cb36:	4413      	add	r3, r2
 800cb38:	00db      	lsls	r3, r3, #3
 800cb3a:	440b      	add	r3, r1
 800cb3c:	3314      	adds	r3, #20
 800cb3e:	781b      	ldrb	r3, [r3, #0]
 800cb40:	2b01      	cmp	r3, #1
 800cb42:	d806      	bhi.n	800cb52 <etharp_query+0xfe>
 800cb44:	4b5a      	ldr	r3, [pc, #360]	; (800ccb0 <etharp_query+0x25c>)
 800cb46:	f240 32cd 	movw	r2, #973	; 0x3cd
 800cb4a:	495d      	ldr	r1, [pc, #372]	; (800ccc0 <etharp_query+0x26c>)
 800cb4c:	485a      	ldr	r0, [pc, #360]	; (800ccb8 <etharp_query+0x264>)
 800cb4e:	f001 fde7 	bl	800e720 <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 800cb52:	6a3b      	ldr	r3, [r7, #32]
 800cb54:	2b00      	cmp	r3, #0
 800cb56:	d102      	bne.n	800cb5e <etharp_query+0x10a>
 800cb58:	687b      	ldr	r3, [r7, #4]
 800cb5a:	2b00      	cmp	r3, #0
 800cb5c:	d10c      	bne.n	800cb78 <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 800cb5e:	68b9      	ldr	r1, [r7, #8]
 800cb60:	68f8      	ldr	r0, [r7, #12]
 800cb62:	f000 f963 	bl	800ce2c <etharp_request>
 800cb66:	4603      	mov	r3, r0
 800cb68:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 800cb6c:	687b      	ldr	r3, [r7, #4]
 800cb6e:	2b00      	cmp	r3, #0
 800cb70:	d102      	bne.n	800cb78 <etharp_query+0x124>
      return result;
 800cb72:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800cb76:	e096      	b.n	800cca6 <etharp_query+0x252>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 800cb78:	687b      	ldr	r3, [r7, #4]
 800cb7a:	2b00      	cmp	r3, #0
 800cb7c:	d106      	bne.n	800cb8c <etharp_query+0x138>
 800cb7e:	4b4c      	ldr	r3, [pc, #304]	; (800ccb0 <etharp_query+0x25c>)
 800cb80:	f240 32e1 	movw	r2, #993	; 0x3e1
 800cb84:	494f      	ldr	r1, [pc, #316]	; (800ccc4 <etharp_query+0x270>)
 800cb86:	484c      	ldr	r0, [pc, #304]	; (800ccb8 <etharp_query+0x264>)
 800cb88:	f001 fdca 	bl	800e720 <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 800cb8c:	7c7a      	ldrb	r2, [r7, #17]
 800cb8e:	494b      	ldr	r1, [pc, #300]	; (800ccbc <etharp_query+0x268>)
 800cb90:	4613      	mov	r3, r2
 800cb92:	005b      	lsls	r3, r3, #1
 800cb94:	4413      	add	r3, r2
 800cb96:	00db      	lsls	r3, r3, #3
 800cb98:	440b      	add	r3, r1
 800cb9a:	3314      	adds	r3, #20
 800cb9c:	781b      	ldrb	r3, [r3, #0]
 800cb9e:	2b01      	cmp	r3, #1
 800cba0:	d917      	bls.n	800cbd2 <etharp_query+0x17e>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 800cba2:	4a49      	ldr	r2, [pc, #292]	; (800ccc8 <etharp_query+0x274>)
 800cba4:	7c7b      	ldrb	r3, [r7, #17]
 800cba6:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 800cba8:	7c7a      	ldrb	r2, [r7, #17]
 800cbaa:	4613      	mov	r3, r2
 800cbac:	005b      	lsls	r3, r3, #1
 800cbae:	4413      	add	r3, r2
 800cbb0:	00db      	lsls	r3, r3, #3
 800cbb2:	3308      	adds	r3, #8
 800cbb4:	4a41      	ldr	r2, [pc, #260]	; (800ccbc <etharp_query+0x268>)
 800cbb6:	4413      	add	r3, r2
 800cbb8:	3304      	adds	r3, #4
 800cbba:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800cbbe:	9200      	str	r2, [sp, #0]
 800cbc0:	697a      	ldr	r2, [r7, #20]
 800cbc2:	6879      	ldr	r1, [r7, #4]
 800cbc4:	68f8      	ldr	r0, [r7, #12]
 800cbc6:	f001 fc75 	bl	800e4b4 <ethernet_output>
 800cbca:	4603      	mov	r3, r0
 800cbcc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800cbd0:	e067      	b.n	800cca2 <etharp_query+0x24e>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 800cbd2:	7c7a      	ldrb	r2, [r7, #17]
 800cbd4:	4939      	ldr	r1, [pc, #228]	; (800ccbc <etharp_query+0x268>)
 800cbd6:	4613      	mov	r3, r2
 800cbd8:	005b      	lsls	r3, r3, #1
 800cbda:	4413      	add	r3, r2
 800cbdc:	00db      	lsls	r3, r3, #3
 800cbde:	440b      	add	r3, r1
 800cbe0:	3314      	adds	r3, #20
 800cbe2:	781b      	ldrb	r3, [r3, #0]
 800cbe4:	2b01      	cmp	r3, #1
 800cbe6:	d15c      	bne.n	800cca2 <etharp_query+0x24e>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 800cbe8:	2300      	movs	r3, #0
 800cbea:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 800cbec:	687b      	ldr	r3, [r7, #4]
 800cbee:	61fb      	str	r3, [r7, #28]
    while (p) {
 800cbf0:	e01c      	b.n	800cc2c <etharp_query+0x1d8>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 800cbf2:	69fb      	ldr	r3, [r7, #28]
 800cbf4:	895a      	ldrh	r2, [r3, #10]
 800cbf6:	69fb      	ldr	r3, [r7, #28]
 800cbf8:	891b      	ldrh	r3, [r3, #8]
 800cbfa:	429a      	cmp	r2, r3
 800cbfc:	d10a      	bne.n	800cc14 <etharp_query+0x1c0>
 800cbfe:	69fb      	ldr	r3, [r7, #28]
 800cc00:	681b      	ldr	r3, [r3, #0]
 800cc02:	2b00      	cmp	r3, #0
 800cc04:	d006      	beq.n	800cc14 <etharp_query+0x1c0>
 800cc06:	4b2a      	ldr	r3, [pc, #168]	; (800ccb0 <etharp_query+0x25c>)
 800cc08:	f240 32f1 	movw	r2, #1009	; 0x3f1
 800cc0c:	492f      	ldr	r1, [pc, #188]	; (800cccc <etharp_query+0x278>)
 800cc0e:	482a      	ldr	r0, [pc, #168]	; (800ccb8 <etharp_query+0x264>)
 800cc10:	f001 fd86 	bl	800e720 <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 800cc14:	69fb      	ldr	r3, [r7, #28]
 800cc16:	7b1b      	ldrb	r3, [r3, #12]
 800cc18:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cc1c:	2b00      	cmp	r3, #0
 800cc1e:	d002      	beq.n	800cc26 <etharp_query+0x1d2>
        copy_needed = 1;
 800cc20:	2301      	movs	r3, #1
 800cc22:	61bb      	str	r3, [r7, #24]
        break;
 800cc24:	e005      	b.n	800cc32 <etharp_query+0x1de>
      }
      p = p->next;
 800cc26:	69fb      	ldr	r3, [r7, #28]
 800cc28:	681b      	ldr	r3, [r3, #0]
 800cc2a:	61fb      	str	r3, [r7, #28]
    while (p) {
 800cc2c:	69fb      	ldr	r3, [r7, #28]
 800cc2e:	2b00      	cmp	r3, #0
 800cc30:	d1df      	bne.n	800cbf2 <etharp_query+0x19e>
    }
    if (copy_needed) {
 800cc32:	69bb      	ldr	r3, [r7, #24]
 800cc34:	2b00      	cmp	r3, #0
 800cc36:	d007      	beq.n	800cc48 <etharp_query+0x1f4>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 800cc38:	687a      	ldr	r2, [r7, #4]
 800cc3a:	f44f 7120 	mov.w	r1, #640	; 0x280
 800cc3e:	200e      	movs	r0, #14
 800cc40:	f7f9 f9d8 	bl	8005ff4 <pbuf_clone>
 800cc44:	61f8      	str	r0, [r7, #28]
 800cc46:	e004      	b.n	800cc52 <etharp_query+0x1fe>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 800cc48:	687b      	ldr	r3, [r7, #4]
 800cc4a:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 800cc4c:	69f8      	ldr	r0, [r7, #28]
 800cc4e:	f7f8 ff73 	bl	8005b38 <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 800cc52:	69fb      	ldr	r3, [r7, #28]
 800cc54:	2b00      	cmp	r3, #0
 800cc56:	d021      	beq.n	800cc9c <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 800cc58:	7c7a      	ldrb	r2, [r7, #17]
 800cc5a:	4918      	ldr	r1, [pc, #96]	; (800ccbc <etharp_query+0x268>)
 800cc5c:	4613      	mov	r3, r2
 800cc5e:	005b      	lsls	r3, r3, #1
 800cc60:	4413      	add	r3, r2
 800cc62:	00db      	lsls	r3, r3, #3
 800cc64:	440b      	add	r3, r1
 800cc66:	681b      	ldr	r3, [r3, #0]
 800cc68:	2b00      	cmp	r3, #0
 800cc6a:	d00a      	beq.n	800cc82 <etharp_query+0x22e>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 800cc6c:	7c7a      	ldrb	r2, [r7, #17]
 800cc6e:	4913      	ldr	r1, [pc, #76]	; (800ccbc <etharp_query+0x268>)
 800cc70:	4613      	mov	r3, r2
 800cc72:	005b      	lsls	r3, r3, #1
 800cc74:	4413      	add	r3, r2
 800cc76:	00db      	lsls	r3, r3, #3
 800cc78:	440b      	add	r3, r1
 800cc7a:	681b      	ldr	r3, [r3, #0]
 800cc7c:	4618      	mov	r0, r3
 800cc7e:	f7f8 febb 	bl	80059f8 <pbuf_free>
      }
      arp_table[i].q = p;
 800cc82:	7c7a      	ldrb	r2, [r7, #17]
 800cc84:	490d      	ldr	r1, [pc, #52]	; (800ccbc <etharp_query+0x268>)
 800cc86:	4613      	mov	r3, r2
 800cc88:	005b      	lsls	r3, r3, #1
 800cc8a:	4413      	add	r3, r2
 800cc8c:	00db      	lsls	r3, r3, #3
 800cc8e:	440b      	add	r3, r1
 800cc90:	69fa      	ldr	r2, [r7, #28]
 800cc92:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 800cc94:	2300      	movs	r3, #0
 800cc96:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800cc9a:	e002      	b.n	800cca2 <etharp_query+0x24e>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 800cc9c:	23ff      	movs	r3, #255	; 0xff
 800cc9e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }
  return result;
 800cca2:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 800cca6:	4618      	mov	r0, r3
 800cca8:	3728      	adds	r7, #40	; 0x28
 800ccaa:	46bd      	mov	sp, r7
 800ccac:	bd80      	pop	{r7, pc}
 800ccae:	bf00      	nop
 800ccb0:	08011cec 	.word	0x08011cec
 800ccb4:	08011e98 	.word	0x08011e98
 800ccb8:	08011d64 	.word	0x08011d64
 800ccbc:	2000834c 	.word	0x2000834c
 800ccc0:	08011ea8 	.word	0x08011ea8
 800ccc4:	08011e8c 	.word	0x08011e8c
 800ccc8:	2000843c 	.word	0x2000843c
 800cccc:	08011ed0 	.word	0x08011ed0

0800ccd0 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 800ccd0:	b580      	push	{r7, lr}
 800ccd2:	b08a      	sub	sp, #40	; 0x28
 800ccd4:	af02      	add	r7, sp, #8
 800ccd6:	60f8      	str	r0, [r7, #12]
 800ccd8:	60b9      	str	r1, [r7, #8]
 800ccda:	607a      	str	r2, [r7, #4]
 800ccdc:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 800ccde:	2300      	movs	r3, #0
 800cce0:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 800cce2:	68fb      	ldr	r3, [r7, #12]
 800cce4:	2b00      	cmp	r3, #0
 800cce6:	d106      	bne.n	800ccf6 <etharp_raw+0x26>
 800cce8:	4b3a      	ldr	r3, [pc, #232]	; (800cdd4 <etharp_raw+0x104>)
 800ccea:	f240 4257 	movw	r2, #1111	; 0x457
 800ccee:	493a      	ldr	r1, [pc, #232]	; (800cdd8 <etharp_raw+0x108>)
 800ccf0:	483a      	ldr	r0, [pc, #232]	; (800cddc <etharp_raw+0x10c>)
 800ccf2:	f001 fd15 	bl	800e720 <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 800ccf6:	f44f 7220 	mov.w	r2, #640	; 0x280
 800ccfa:	211c      	movs	r1, #28
 800ccfc:	200e      	movs	r0, #14
 800ccfe:	f7f8 fb97 	bl	8005430 <pbuf_alloc>
 800cd02:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 800cd04:	69bb      	ldr	r3, [r7, #24]
 800cd06:	2b00      	cmp	r3, #0
 800cd08:	d102      	bne.n	800cd10 <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 800cd0a:	f04f 33ff 	mov.w	r3, #4294967295
 800cd0e:	e05d      	b.n	800cdcc <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 800cd10:	69bb      	ldr	r3, [r7, #24]
 800cd12:	895b      	ldrh	r3, [r3, #10]
 800cd14:	2b1b      	cmp	r3, #27
 800cd16:	d806      	bhi.n	800cd26 <etharp_raw+0x56>
 800cd18:	4b2e      	ldr	r3, [pc, #184]	; (800cdd4 <etharp_raw+0x104>)
 800cd1a:	f240 4262 	movw	r2, #1122	; 0x462
 800cd1e:	4930      	ldr	r1, [pc, #192]	; (800cde0 <etharp_raw+0x110>)
 800cd20:	482e      	ldr	r0, [pc, #184]	; (800cddc <etharp_raw+0x10c>)
 800cd22:	f001 fcfd 	bl	800e720 <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 800cd26:	69bb      	ldr	r3, [r7, #24]
 800cd28:	685b      	ldr	r3, [r3, #4]
 800cd2a:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 800cd2c:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800cd2e:	4618      	mov	r0, r3
 800cd30:	f7f7 fb04 	bl	800433c <lwip_htons>
 800cd34:	4603      	mov	r3, r0
 800cd36:	461a      	mov	r2, r3
 800cd38:	697b      	ldr	r3, [r7, #20]
 800cd3a:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 800cd3c:	68fb      	ldr	r3, [r7, #12]
 800cd3e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800cd42:	2b06      	cmp	r3, #6
 800cd44:	d006      	beq.n	800cd54 <etharp_raw+0x84>
 800cd46:	4b23      	ldr	r3, [pc, #140]	; (800cdd4 <etharp_raw+0x104>)
 800cd48:	f240 4269 	movw	r2, #1129	; 0x469
 800cd4c:	4925      	ldr	r1, [pc, #148]	; (800cde4 <etharp_raw+0x114>)
 800cd4e:	4823      	ldr	r0, [pc, #140]	; (800cddc <etharp_raw+0x10c>)
 800cd50:	f001 fce6 	bl	800e720 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 800cd54:	697b      	ldr	r3, [r7, #20]
 800cd56:	3308      	adds	r3, #8
 800cd58:	2206      	movs	r2, #6
 800cd5a:	6839      	ldr	r1, [r7, #0]
 800cd5c:	4618      	mov	r0, r3
 800cd5e:	f001 fee3 	bl	800eb28 <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 800cd62:	697b      	ldr	r3, [r7, #20]
 800cd64:	3312      	adds	r3, #18
 800cd66:	2206      	movs	r2, #6
 800cd68:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800cd6a:	4618      	mov	r0, r3
 800cd6c:	f001 fedc 	bl	800eb28 <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 800cd70:	697b      	ldr	r3, [r7, #20]
 800cd72:	330e      	adds	r3, #14
 800cd74:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800cd76:	6812      	ldr	r2, [r2, #0]
 800cd78:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 800cd7a:	697b      	ldr	r3, [r7, #20]
 800cd7c:	3318      	adds	r3, #24
 800cd7e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800cd80:	6812      	ldr	r2, [r2, #0]
 800cd82:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 800cd84:	697b      	ldr	r3, [r7, #20]
 800cd86:	2200      	movs	r2, #0
 800cd88:	701a      	strb	r2, [r3, #0]
 800cd8a:	2200      	movs	r2, #0
 800cd8c:	f042 0201 	orr.w	r2, r2, #1
 800cd90:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 800cd92:	697b      	ldr	r3, [r7, #20]
 800cd94:	2200      	movs	r2, #0
 800cd96:	f042 0208 	orr.w	r2, r2, #8
 800cd9a:	709a      	strb	r2, [r3, #2]
 800cd9c:	2200      	movs	r2, #0
 800cd9e:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 800cda0:	697b      	ldr	r3, [r7, #20]
 800cda2:	2206      	movs	r2, #6
 800cda4:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 800cda6:	697b      	ldr	r3, [r7, #20]
 800cda8:	2204      	movs	r2, #4
 800cdaa:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 800cdac:	f640 0306 	movw	r3, #2054	; 0x806
 800cdb0:	9300      	str	r3, [sp, #0]
 800cdb2:	687b      	ldr	r3, [r7, #4]
 800cdb4:	68ba      	ldr	r2, [r7, #8]
 800cdb6:	69b9      	ldr	r1, [r7, #24]
 800cdb8:	68f8      	ldr	r0, [r7, #12]
 800cdba:	f001 fb7b 	bl	800e4b4 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 800cdbe:	69b8      	ldr	r0, [r7, #24]
 800cdc0:	f7f8 fe1a 	bl	80059f8 <pbuf_free>
  p = NULL;
 800cdc4:	2300      	movs	r3, #0
 800cdc6:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 800cdc8:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800cdcc:	4618      	mov	r0, r3
 800cdce:	3720      	adds	r7, #32
 800cdd0:	46bd      	mov	sp, r7
 800cdd2:	bd80      	pop	{r7, pc}
 800cdd4:	08011cec 	.word	0x08011cec
 800cdd8:	08011e3c 	.word	0x08011e3c
 800cddc:	08011d64 	.word	0x08011d64
 800cde0:	08011eec 	.word	0x08011eec
 800cde4:	08011f20 	.word	0x08011f20

0800cde8 <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 800cde8:	b580      	push	{r7, lr}
 800cdea:	b088      	sub	sp, #32
 800cdec:	af04      	add	r7, sp, #16
 800cdee:	60f8      	str	r0, [r7, #12]
 800cdf0:	60b9      	str	r1, [r7, #8]
 800cdf2:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800cdf4:	68fb      	ldr	r3, [r7, #12]
 800cdf6:	f103 0126 	add.w	r1, r3, #38	; 0x26
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 800cdfa:	68fb      	ldr	r3, [r7, #12]
 800cdfc:	f103 0026 	add.w	r0, r3, #38	; 0x26
 800ce00:	68fb      	ldr	r3, [r7, #12]
 800ce02:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800ce04:	2201      	movs	r2, #1
 800ce06:	9203      	str	r2, [sp, #12]
 800ce08:	68ba      	ldr	r2, [r7, #8]
 800ce0a:	9202      	str	r2, [sp, #8]
 800ce0c:	4a06      	ldr	r2, [pc, #24]	; (800ce28 <etharp_request_dst+0x40>)
 800ce0e:	9201      	str	r2, [sp, #4]
 800ce10:	9300      	str	r3, [sp, #0]
 800ce12:	4603      	mov	r3, r0
 800ce14:	687a      	ldr	r2, [r7, #4]
 800ce16:	68f8      	ldr	r0, [r7, #12]
 800ce18:	f7ff ff5a 	bl	800ccd0 <etharp_raw>
 800ce1c:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 800ce1e:	4618      	mov	r0, r3
 800ce20:	3710      	adds	r7, #16
 800ce22:	46bd      	mov	sp, r7
 800ce24:	bd80      	pop	{r7, pc}
 800ce26:	bf00      	nop
 800ce28:	080124b0 	.word	0x080124b0

0800ce2c <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 800ce2c:	b580      	push	{r7, lr}
 800ce2e:	b082      	sub	sp, #8
 800ce30:	af00      	add	r7, sp, #0
 800ce32:	6078      	str	r0, [r7, #4]
 800ce34:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 800ce36:	4a05      	ldr	r2, [pc, #20]	; (800ce4c <etharp_request+0x20>)
 800ce38:	6839      	ldr	r1, [r7, #0]
 800ce3a:	6878      	ldr	r0, [r7, #4]
 800ce3c:	f7ff ffd4 	bl	800cde8 <etharp_request_dst>
 800ce40:	4603      	mov	r3, r0
}
 800ce42:	4618      	mov	r0, r3
 800ce44:	3708      	adds	r7, #8
 800ce46:	46bd      	mov	sp, r7
 800ce48:	bd80      	pop	{r7, pc}
 800ce4a:	bf00      	nop
 800ce4c:	080124a8 	.word	0x080124a8

0800ce50 <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 800ce50:	b580      	push	{r7, lr}
 800ce52:	b08e      	sub	sp, #56	; 0x38
 800ce54:	af04      	add	r7, sp, #16
 800ce56:	6078      	str	r0, [r7, #4]
 800ce58:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 800ce5a:	4b79      	ldr	r3, [pc, #484]	; (800d040 <icmp_input+0x1f0>)
 800ce5c:	689b      	ldr	r3, [r3, #8]
 800ce5e:	627b      	str	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 800ce60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ce62:	781b      	ldrb	r3, [r3, #0]
 800ce64:	f003 030f 	and.w	r3, r3, #15
 800ce68:	b2db      	uxtb	r3, r3
 800ce6a:	009b      	lsls	r3, r3, #2
 800ce6c:	b2db      	uxtb	r3, r3
 800ce6e:	847b      	strh	r3, [r7, #34]	; 0x22
  if (hlen < IP_HLEN) {
 800ce70:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800ce72:	2b13      	cmp	r3, #19
 800ce74:	f240 80cd 	bls.w	800d012 <icmp_input+0x1c2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 800ce78:	687b      	ldr	r3, [r7, #4]
 800ce7a:	895b      	ldrh	r3, [r3, #10]
 800ce7c:	2b03      	cmp	r3, #3
 800ce7e:	f240 80ca 	bls.w	800d016 <icmp_input+0x1c6>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 800ce82:	687b      	ldr	r3, [r7, #4]
 800ce84:	685b      	ldr	r3, [r3, #4]
 800ce86:	781b      	ldrb	r3, [r3, #0]
 800ce88:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 800ce8c:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 800ce90:	2b00      	cmp	r3, #0
 800ce92:	f000 80b7 	beq.w	800d004 <icmp_input+0x1b4>
 800ce96:	2b08      	cmp	r3, #8
 800ce98:	f040 80b7 	bne.w	800d00a <icmp_input+0x1ba>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 800ce9c:	4b69      	ldr	r3, [pc, #420]	; (800d044 <icmp_input+0x1f4>)
 800ce9e:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800cea0:	4b67      	ldr	r3, [pc, #412]	; (800d040 <icmp_input+0x1f0>)
 800cea2:	695b      	ldr	r3, [r3, #20]
 800cea4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800cea8:	2be0      	cmp	r3, #224	; 0xe0
 800ceaa:	f000 80bb 	beq.w	800d024 <icmp_input+0x1d4>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 800ceae:	4b64      	ldr	r3, [pc, #400]	; (800d040 <icmp_input+0x1f0>)
 800ceb0:	695b      	ldr	r3, [r3, #20]
 800ceb2:	4a63      	ldr	r2, [pc, #396]	; (800d040 <icmp_input+0x1f0>)
 800ceb4:	6812      	ldr	r2, [r2, #0]
 800ceb6:	4611      	mov	r1, r2
 800ceb8:	4618      	mov	r0, r3
 800ceba:	f000 fbed 	bl	800d698 <ip4_addr_isbroadcast_u32>
 800cebe:	4603      	mov	r3, r0
 800cec0:	2b00      	cmp	r3, #0
 800cec2:	f040 80b1 	bne.w	800d028 <icmp_input+0x1d8>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 800cec6:	687b      	ldr	r3, [r7, #4]
 800cec8:	891b      	ldrh	r3, [r3, #8]
 800ceca:	2b07      	cmp	r3, #7
 800cecc:	f240 80a5 	bls.w	800d01a <icmp_input+0x1ca>
          return;
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 800ced0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800ced2:	330e      	adds	r3, #14
 800ced4:	4619      	mov	r1, r3
 800ced6:	6878      	ldr	r0, [r7, #4]
 800ced8:	f7f8 fcf8 	bl	80058cc <pbuf_add_header>
 800cedc:	4603      	mov	r3, r0
 800cede:	2b00      	cmp	r3, #0
 800cee0:	d04b      	beq.n	800cf7a <icmp_input+0x12a>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 800cee2:	687b      	ldr	r3, [r7, #4]
 800cee4:	891a      	ldrh	r2, [r3, #8]
 800cee6:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800cee8:	4413      	add	r3, r2
 800ceea:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 800ceec:	687b      	ldr	r3, [r7, #4]
 800ceee:	891b      	ldrh	r3, [r3, #8]
 800cef0:	8b7a      	ldrh	r2, [r7, #26]
 800cef2:	429a      	cmp	r2, r3
 800cef4:	f0c0 809a 	bcc.w	800d02c <icmp_input+0x1dc>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 800cef8:	8b7b      	ldrh	r3, [r7, #26]
 800cefa:	f44f 7220 	mov.w	r2, #640	; 0x280
 800cefe:	4619      	mov	r1, r3
 800cf00:	200e      	movs	r0, #14
 800cf02:	f7f8 fa95 	bl	8005430 <pbuf_alloc>
 800cf06:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 800cf08:	697b      	ldr	r3, [r7, #20]
 800cf0a:	2b00      	cmp	r3, #0
 800cf0c:	f000 8090 	beq.w	800d030 <icmp_input+0x1e0>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 800cf10:	697b      	ldr	r3, [r7, #20]
 800cf12:	895b      	ldrh	r3, [r3, #10]
 800cf14:	461a      	mov	r2, r3
 800cf16:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800cf18:	3308      	adds	r3, #8
 800cf1a:	429a      	cmp	r2, r3
 800cf1c:	d203      	bcs.n	800cf26 <icmp_input+0xd6>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 800cf1e:	6978      	ldr	r0, [r7, #20]
 800cf20:	f7f8 fd6a 	bl	80059f8 <pbuf_free>
          goto icmperr;
 800cf24:	e085      	b.n	800d032 <icmp_input+0x1e2>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 800cf26:	697b      	ldr	r3, [r7, #20]
 800cf28:	685b      	ldr	r3, [r3, #4]
 800cf2a:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800cf2c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800cf2e:	4618      	mov	r0, r3
 800cf30:	f001 fdfa 	bl	800eb28 <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 800cf34:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800cf36:	4619      	mov	r1, r3
 800cf38:	6978      	ldr	r0, [r7, #20]
 800cf3a:	f7f8 fcd7 	bl	80058ec <pbuf_remove_header>
 800cf3e:	4603      	mov	r3, r0
 800cf40:	2b00      	cmp	r3, #0
 800cf42:	d009      	beq.n	800cf58 <icmp_input+0x108>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 800cf44:	4b40      	ldr	r3, [pc, #256]	; (800d048 <icmp_input+0x1f8>)
 800cf46:	22b6      	movs	r2, #182	; 0xb6
 800cf48:	4940      	ldr	r1, [pc, #256]	; (800d04c <icmp_input+0x1fc>)
 800cf4a:	4841      	ldr	r0, [pc, #260]	; (800d050 <icmp_input+0x200>)
 800cf4c:	f001 fbe8 	bl	800e720 <iprintf>
          pbuf_free(r);
 800cf50:	6978      	ldr	r0, [r7, #20]
 800cf52:	f7f8 fd51 	bl	80059f8 <pbuf_free>
          goto icmperr;
 800cf56:	e06c      	b.n	800d032 <icmp_input+0x1e2>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 800cf58:	6879      	ldr	r1, [r7, #4]
 800cf5a:	6978      	ldr	r0, [r7, #20]
 800cf5c:	f7f8 fe74 	bl	8005c48 <pbuf_copy>
 800cf60:	4603      	mov	r3, r0
 800cf62:	2b00      	cmp	r3, #0
 800cf64:	d003      	beq.n	800cf6e <icmp_input+0x11e>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 800cf66:	6978      	ldr	r0, [r7, #20]
 800cf68:	f7f8 fd46 	bl	80059f8 <pbuf_free>
          goto icmperr;
 800cf6c:	e061      	b.n	800d032 <icmp_input+0x1e2>
        }
        /* free the original p */
        pbuf_free(p);
 800cf6e:	6878      	ldr	r0, [r7, #4]
 800cf70:	f7f8 fd42 	bl	80059f8 <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 800cf74:	697b      	ldr	r3, [r7, #20]
 800cf76:	607b      	str	r3, [r7, #4]
 800cf78:	e00f      	b.n	800cf9a <icmp_input+0x14a>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 800cf7a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800cf7c:	330e      	adds	r3, #14
 800cf7e:	4619      	mov	r1, r3
 800cf80:	6878      	ldr	r0, [r7, #4]
 800cf82:	f7f8 fcb3 	bl	80058ec <pbuf_remove_header>
 800cf86:	4603      	mov	r3, r0
 800cf88:	2b00      	cmp	r3, #0
 800cf8a:	d006      	beq.n	800cf9a <icmp_input+0x14a>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 800cf8c:	4b2e      	ldr	r3, [pc, #184]	; (800d048 <icmp_input+0x1f8>)
 800cf8e:	22c7      	movs	r2, #199	; 0xc7
 800cf90:	4930      	ldr	r1, [pc, #192]	; (800d054 <icmp_input+0x204>)
 800cf92:	482f      	ldr	r0, [pc, #188]	; (800d050 <icmp_input+0x200>)
 800cf94:	f001 fbc4 	bl	800e720 <iprintf>
          goto icmperr;
 800cf98:	e04b      	b.n	800d032 <icmp_input+0x1e2>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 800cf9a:	687b      	ldr	r3, [r7, #4]
 800cf9c:	685b      	ldr	r3, [r3, #4]
 800cf9e:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 800cfa0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800cfa2:	4619      	mov	r1, r3
 800cfa4:	6878      	ldr	r0, [r7, #4]
 800cfa6:	f7f8 fc91 	bl	80058cc <pbuf_add_header>
 800cfaa:	4603      	mov	r3, r0
 800cfac:	2b00      	cmp	r3, #0
 800cfae:	d12b      	bne.n	800d008 <icmp_input+0x1b8>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 800cfb0:	687b      	ldr	r3, [r7, #4]
 800cfb2:	685b      	ldr	r3, [r3, #4]
 800cfb4:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 800cfb6:	69fb      	ldr	r3, [r7, #28]
 800cfb8:	681a      	ldr	r2, [r3, #0]
 800cfba:	68fb      	ldr	r3, [r7, #12]
 800cfbc:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 800cfbe:	4b20      	ldr	r3, [pc, #128]	; (800d040 <icmp_input+0x1f0>)
 800cfc0:	691a      	ldr	r2, [r3, #16]
 800cfc2:	68fb      	ldr	r3, [r7, #12]
 800cfc4:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 800cfc6:	693b      	ldr	r3, [r7, #16]
 800cfc8:	2200      	movs	r2, #0
 800cfca:	701a      	strb	r2, [r3, #0]
        else {
          iecho->chksum = 0;
        }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF */
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
 800cfcc:	693b      	ldr	r3, [r7, #16]
 800cfce:	2200      	movs	r2, #0
 800cfd0:	709a      	strb	r2, [r3, #2]
 800cfd2:	2200      	movs	r2, #0
 800cfd4:	70da      	strb	r2, [r3, #3]
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 800cfd6:	68fb      	ldr	r3, [r7, #12]
 800cfd8:	22ff      	movs	r2, #255	; 0xff
 800cfda:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 800cfdc:	68fb      	ldr	r3, [r7, #12]
 800cfde:	2200      	movs	r2, #0
 800cfe0:	729a      	strb	r2, [r3, #10]
 800cfe2:	2200      	movs	r2, #0
 800cfe4:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 800cfe6:	683b      	ldr	r3, [r7, #0]
 800cfe8:	9302      	str	r3, [sp, #8]
 800cfea:	2301      	movs	r3, #1
 800cfec:	9301      	str	r3, [sp, #4]
 800cfee:	2300      	movs	r3, #0
 800cff0:	9300      	str	r3, [sp, #0]
 800cff2:	23ff      	movs	r3, #255	; 0xff
 800cff4:	2200      	movs	r2, #0
 800cff6:	69f9      	ldr	r1, [r7, #28]
 800cff8:	6878      	ldr	r0, [r7, #4]
 800cffa:	f000 fa75 	bl	800d4e8 <ip4_output_if>
 800cffe:	4603      	mov	r3, r0
 800d000:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 800d002:	e001      	b.n	800d008 <icmp_input+0x1b8>
      break;
 800d004:	bf00      	nop
 800d006:	e000      	b.n	800d00a <icmp_input+0x1ba>
      break;
 800d008:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 800d00a:	6878      	ldr	r0, [r7, #4]
 800d00c:	f7f8 fcf4 	bl	80059f8 <pbuf_free>
  return;
 800d010:	e013      	b.n	800d03a <icmp_input+0x1ea>
    goto lenerr;
 800d012:	bf00      	nop
 800d014:	e002      	b.n	800d01c <icmp_input+0x1cc>
    goto lenerr;
 800d016:	bf00      	nop
 800d018:	e000      	b.n	800d01c <icmp_input+0x1cc>
        goto lenerr;
 800d01a:	bf00      	nop
lenerr:
  pbuf_free(p);
 800d01c:	6878      	ldr	r0, [r7, #4]
 800d01e:	f7f8 fceb 	bl	80059f8 <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 800d022:	e00a      	b.n	800d03a <icmp_input+0x1ea>
        goto icmperr;
 800d024:	bf00      	nop
 800d026:	e004      	b.n	800d032 <icmp_input+0x1e2>
        goto icmperr;
 800d028:	bf00      	nop
 800d02a:	e002      	b.n	800d032 <icmp_input+0x1e2>
          goto icmperr;
 800d02c:	bf00      	nop
 800d02e:	e000      	b.n	800d032 <icmp_input+0x1e2>
          goto icmperr;
 800d030:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 800d032:	6878      	ldr	r0, [r7, #4]
 800d034:	f7f8 fce0 	bl	80059f8 <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 800d038:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 800d03a:	3728      	adds	r7, #40	; 0x28
 800d03c:	46bd      	mov	sp, r7
 800d03e:	bd80      	pop	{r7, pc}
 800d040:	20004d7c 	.word	0x20004d7c
 800d044:	20004d90 	.word	0x20004d90
 800d048:	08011f64 	.word	0x08011f64
 800d04c:	08011f9c 	.word	0x08011f9c
 800d050:	08011fd4 	.word	0x08011fd4
 800d054:	08011ffc 	.word	0x08011ffc

0800d058 <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 800d058:	b580      	push	{r7, lr}
 800d05a:	b082      	sub	sp, #8
 800d05c:	af00      	add	r7, sp, #0
 800d05e:	6078      	str	r0, [r7, #4]
 800d060:	460b      	mov	r3, r1
 800d062:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 800d064:	78fb      	ldrb	r3, [r7, #3]
 800d066:	461a      	mov	r2, r3
 800d068:	2103      	movs	r1, #3
 800d06a:	6878      	ldr	r0, [r7, #4]
 800d06c:	f000 f814 	bl	800d098 <icmp_send_response>
}
 800d070:	bf00      	nop
 800d072:	3708      	adds	r7, #8
 800d074:	46bd      	mov	sp, r7
 800d076:	bd80      	pop	{r7, pc}

0800d078 <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 800d078:	b580      	push	{r7, lr}
 800d07a:	b082      	sub	sp, #8
 800d07c:	af00      	add	r7, sp, #0
 800d07e:	6078      	str	r0, [r7, #4]
 800d080:	460b      	mov	r3, r1
 800d082:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 800d084:	78fb      	ldrb	r3, [r7, #3]
 800d086:	461a      	mov	r2, r3
 800d088:	210b      	movs	r1, #11
 800d08a:	6878      	ldr	r0, [r7, #4]
 800d08c:	f000 f804 	bl	800d098 <icmp_send_response>
}
 800d090:	bf00      	nop
 800d092:	3708      	adds	r7, #8
 800d094:	46bd      	mov	sp, r7
 800d096:	bd80      	pop	{r7, pc}

0800d098 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 800d098:	b580      	push	{r7, lr}
 800d09a:	b08c      	sub	sp, #48	; 0x30
 800d09c:	af04      	add	r7, sp, #16
 800d09e:	6078      	str	r0, [r7, #4]
 800d0a0:	460b      	mov	r3, r1
 800d0a2:	70fb      	strb	r3, [r7, #3]
 800d0a4:	4613      	mov	r3, r2
 800d0a6:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 800d0a8:	f44f 7220 	mov.w	r2, #640	; 0x280
 800d0ac:	2124      	movs	r1, #36	; 0x24
 800d0ae:	2022      	movs	r0, #34	; 0x22
 800d0b0:	f7f8 f9be 	bl	8005430 <pbuf_alloc>
 800d0b4:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 800d0b6:	69fb      	ldr	r3, [r7, #28]
 800d0b8:	2b00      	cmp	r3, #0
 800d0ba:	d04c      	beq.n	800d156 <icmp_send_response+0xbe>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 800d0bc:	69fb      	ldr	r3, [r7, #28]
 800d0be:	895b      	ldrh	r3, [r3, #10]
 800d0c0:	2b23      	cmp	r3, #35	; 0x23
 800d0c2:	d806      	bhi.n	800d0d2 <icmp_send_response+0x3a>
 800d0c4:	4b26      	ldr	r3, [pc, #152]	; (800d160 <icmp_send_response+0xc8>)
 800d0c6:	f44f 72b4 	mov.w	r2, #360	; 0x168
 800d0ca:	4926      	ldr	r1, [pc, #152]	; (800d164 <icmp_send_response+0xcc>)
 800d0cc:	4826      	ldr	r0, [pc, #152]	; (800d168 <icmp_send_response+0xd0>)
 800d0ce:	f001 fb27 	bl	800e720 <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 800d0d2:	687b      	ldr	r3, [r7, #4]
 800d0d4:	685b      	ldr	r3, [r3, #4]
 800d0d6:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 800d0d8:	69fb      	ldr	r3, [r7, #28]
 800d0da:	685b      	ldr	r3, [r3, #4]
 800d0dc:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 800d0de:	697b      	ldr	r3, [r7, #20]
 800d0e0:	78fa      	ldrb	r2, [r7, #3]
 800d0e2:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 800d0e4:	697b      	ldr	r3, [r7, #20]
 800d0e6:	78ba      	ldrb	r2, [r7, #2]
 800d0e8:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 800d0ea:	697b      	ldr	r3, [r7, #20]
 800d0ec:	2200      	movs	r2, #0
 800d0ee:	711a      	strb	r2, [r3, #4]
 800d0f0:	2200      	movs	r2, #0
 800d0f2:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 800d0f4:	697b      	ldr	r3, [r7, #20]
 800d0f6:	2200      	movs	r2, #0
 800d0f8:	719a      	strb	r2, [r3, #6]
 800d0fa:	2200      	movs	r2, #0
 800d0fc:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 800d0fe:	69fb      	ldr	r3, [r7, #28]
 800d100:	685b      	ldr	r3, [r3, #4]
 800d102:	f103 0008 	add.w	r0, r3, #8
 800d106:	687b      	ldr	r3, [r7, #4]
 800d108:	685b      	ldr	r3, [r3, #4]
 800d10a:	221c      	movs	r2, #28
 800d10c:	4619      	mov	r1, r3
 800d10e:	f001 fd0b 	bl	800eb28 <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 800d112:	69bb      	ldr	r3, [r7, #24]
 800d114:	68db      	ldr	r3, [r3, #12]
 800d116:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 800d118:	f107 030c 	add.w	r3, r7, #12
 800d11c:	4618      	mov	r0, r3
 800d11e:	f000 f825 	bl	800d16c <ip4_route>
 800d122:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 800d124:	693b      	ldr	r3, [r7, #16]
 800d126:	2b00      	cmp	r3, #0
 800d128:	d011      	beq.n	800d14e <icmp_send_response+0xb6>
    /* calculate checksum */
    icmphdr->chksum = 0;
 800d12a:	697b      	ldr	r3, [r7, #20]
 800d12c:	2200      	movs	r2, #0
 800d12e:	709a      	strb	r2, [r3, #2]
 800d130:	2200      	movs	r2, #0
 800d132:	70da      	strb	r2, [r3, #3]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 800d134:	f107 020c 	add.w	r2, r7, #12
 800d138:	693b      	ldr	r3, [r7, #16]
 800d13a:	9302      	str	r3, [sp, #8]
 800d13c:	2301      	movs	r3, #1
 800d13e:	9301      	str	r3, [sp, #4]
 800d140:	2300      	movs	r3, #0
 800d142:	9300      	str	r3, [sp, #0]
 800d144:	23ff      	movs	r3, #255	; 0xff
 800d146:	2100      	movs	r1, #0
 800d148:	69f8      	ldr	r0, [r7, #28]
 800d14a:	f000 f9cd 	bl	800d4e8 <ip4_output_if>
  }
  pbuf_free(q);
 800d14e:	69f8      	ldr	r0, [r7, #28]
 800d150:	f7f8 fc52 	bl	80059f8 <pbuf_free>
 800d154:	e000      	b.n	800d158 <icmp_send_response+0xc0>
    return;
 800d156:	bf00      	nop
}
 800d158:	3720      	adds	r7, #32
 800d15a:	46bd      	mov	sp, r7
 800d15c:	bd80      	pop	{r7, pc}
 800d15e:	bf00      	nop
 800d160:	08011f64 	.word	0x08011f64
 800d164:	08012030 	.word	0x08012030
 800d168:	08011fd4 	.word	0x08011fd4

0800d16c <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 800d16c:	b480      	push	{r7}
 800d16e:	b085      	sub	sp, #20
 800d170:	af00      	add	r7, sp, #0
 800d172:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 800d174:	4b33      	ldr	r3, [pc, #204]	; (800d244 <ip4_route+0xd8>)
 800d176:	681b      	ldr	r3, [r3, #0]
 800d178:	60fb      	str	r3, [r7, #12]
 800d17a:	e036      	b.n	800d1ea <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800d17c:	68fb      	ldr	r3, [r7, #12]
 800d17e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800d182:	f003 0301 	and.w	r3, r3, #1
 800d186:	b2db      	uxtb	r3, r3
 800d188:	2b00      	cmp	r3, #0
 800d18a:	d02b      	beq.n	800d1e4 <ip4_route+0x78>
 800d18c:	68fb      	ldr	r3, [r7, #12]
 800d18e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800d192:	089b      	lsrs	r3, r3, #2
 800d194:	f003 0301 	and.w	r3, r3, #1
 800d198:	b2db      	uxtb	r3, r3
 800d19a:	2b00      	cmp	r3, #0
 800d19c:	d022      	beq.n	800d1e4 <ip4_route+0x78>
 800d19e:	68fb      	ldr	r3, [r7, #12]
 800d1a0:	3304      	adds	r3, #4
 800d1a2:	681b      	ldr	r3, [r3, #0]
 800d1a4:	2b00      	cmp	r3, #0
 800d1a6:	d01d      	beq.n	800d1e4 <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 800d1a8:	687b      	ldr	r3, [r7, #4]
 800d1aa:	681a      	ldr	r2, [r3, #0]
 800d1ac:	68fb      	ldr	r3, [r7, #12]
 800d1ae:	3304      	adds	r3, #4
 800d1b0:	681b      	ldr	r3, [r3, #0]
 800d1b2:	405a      	eors	r2, r3
 800d1b4:	68fb      	ldr	r3, [r7, #12]
 800d1b6:	3308      	adds	r3, #8
 800d1b8:	681b      	ldr	r3, [r3, #0]
 800d1ba:	4013      	ands	r3, r2
 800d1bc:	2b00      	cmp	r3, #0
 800d1be:	d101      	bne.n	800d1c4 <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 800d1c0:	68fb      	ldr	r3, [r7, #12]
 800d1c2:	e038      	b.n	800d236 <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 800d1c4:	68fb      	ldr	r3, [r7, #12]
 800d1c6:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800d1ca:	f003 0302 	and.w	r3, r3, #2
 800d1ce:	2b00      	cmp	r3, #0
 800d1d0:	d108      	bne.n	800d1e4 <ip4_route+0x78>
 800d1d2:	687b      	ldr	r3, [r7, #4]
 800d1d4:	681a      	ldr	r2, [r3, #0]
 800d1d6:	68fb      	ldr	r3, [r7, #12]
 800d1d8:	330c      	adds	r3, #12
 800d1da:	681b      	ldr	r3, [r3, #0]
 800d1dc:	429a      	cmp	r2, r3
 800d1de:	d101      	bne.n	800d1e4 <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 800d1e0:	68fb      	ldr	r3, [r7, #12]
 800d1e2:	e028      	b.n	800d236 <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 800d1e4:	68fb      	ldr	r3, [r7, #12]
 800d1e6:	681b      	ldr	r3, [r3, #0]
 800d1e8:	60fb      	str	r3, [r7, #12]
 800d1ea:	68fb      	ldr	r3, [r7, #12]
 800d1ec:	2b00      	cmp	r3, #0
 800d1ee:	d1c5      	bne.n	800d17c <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 800d1f0:	4b15      	ldr	r3, [pc, #84]	; (800d248 <ip4_route+0xdc>)
 800d1f2:	681b      	ldr	r3, [r3, #0]
 800d1f4:	2b00      	cmp	r3, #0
 800d1f6:	d01a      	beq.n	800d22e <ip4_route+0xc2>
 800d1f8:	4b13      	ldr	r3, [pc, #76]	; (800d248 <ip4_route+0xdc>)
 800d1fa:	681b      	ldr	r3, [r3, #0]
 800d1fc:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800d200:	f003 0301 	and.w	r3, r3, #1
 800d204:	2b00      	cmp	r3, #0
 800d206:	d012      	beq.n	800d22e <ip4_route+0xc2>
 800d208:	4b0f      	ldr	r3, [pc, #60]	; (800d248 <ip4_route+0xdc>)
 800d20a:	681b      	ldr	r3, [r3, #0]
 800d20c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800d210:	f003 0304 	and.w	r3, r3, #4
 800d214:	2b00      	cmp	r3, #0
 800d216:	d00a      	beq.n	800d22e <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 800d218:	4b0b      	ldr	r3, [pc, #44]	; (800d248 <ip4_route+0xdc>)
 800d21a:	681b      	ldr	r3, [r3, #0]
 800d21c:	3304      	adds	r3, #4
 800d21e:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 800d220:	2b00      	cmp	r3, #0
 800d222:	d004      	beq.n	800d22e <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 800d224:	687b      	ldr	r3, [r7, #4]
 800d226:	681b      	ldr	r3, [r3, #0]
 800d228:	b2db      	uxtb	r3, r3
 800d22a:	2b7f      	cmp	r3, #127	; 0x7f
 800d22c:	d101      	bne.n	800d232 <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 800d22e:	2300      	movs	r3, #0
 800d230:	e001      	b.n	800d236 <ip4_route+0xca>
  }

  return netif_default;
 800d232:	4b05      	ldr	r3, [pc, #20]	; (800d248 <ip4_route+0xdc>)
 800d234:	681b      	ldr	r3, [r3, #0]
}
 800d236:	4618      	mov	r0, r3
 800d238:	3714      	adds	r7, #20
 800d23a:	46bd      	mov	sp, r7
 800d23c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d240:	4770      	bx	lr
 800d242:	bf00      	nop
 800d244:	200082e0 	.word	0x200082e0
 800d248:	200082e4 	.word	0x200082e4

0800d24c <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 800d24c:	b580      	push	{r7, lr}
 800d24e:	b082      	sub	sp, #8
 800d250:	af00      	add	r7, sp, #0
 800d252:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 800d254:	687b      	ldr	r3, [r7, #4]
 800d256:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800d25a:	f003 0301 	and.w	r3, r3, #1
 800d25e:	b2db      	uxtb	r3, r3
 800d260:	2b00      	cmp	r3, #0
 800d262:	d016      	beq.n	800d292 <ip4_input_accept+0x46>
 800d264:	687b      	ldr	r3, [r7, #4]
 800d266:	3304      	adds	r3, #4
 800d268:	681b      	ldr	r3, [r3, #0]
 800d26a:	2b00      	cmp	r3, #0
 800d26c:	d011      	beq.n	800d292 <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 800d26e:	4b0b      	ldr	r3, [pc, #44]	; (800d29c <ip4_input_accept+0x50>)
 800d270:	695a      	ldr	r2, [r3, #20]
 800d272:	687b      	ldr	r3, [r7, #4]
 800d274:	3304      	adds	r3, #4
 800d276:	681b      	ldr	r3, [r3, #0]
 800d278:	429a      	cmp	r2, r3
 800d27a:	d008      	beq.n	800d28e <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 800d27c:	4b07      	ldr	r3, [pc, #28]	; (800d29c <ip4_input_accept+0x50>)
 800d27e:	695b      	ldr	r3, [r3, #20]
 800d280:	6879      	ldr	r1, [r7, #4]
 800d282:	4618      	mov	r0, r3
 800d284:	f000 fa08 	bl	800d698 <ip4_addr_isbroadcast_u32>
 800d288:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 800d28a:	2b00      	cmp	r3, #0
 800d28c:	d001      	beq.n	800d292 <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 800d28e:	2301      	movs	r3, #1
 800d290:	e000      	b.n	800d294 <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 800d292:	2300      	movs	r3, #0
}
 800d294:	4618      	mov	r0, r3
 800d296:	3708      	adds	r7, #8
 800d298:	46bd      	mov	sp, r7
 800d29a:	bd80      	pop	{r7, pc}
 800d29c:	20004d7c 	.word	0x20004d7c

0800d2a0 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 800d2a0:	b580      	push	{r7, lr}
 800d2a2:	b086      	sub	sp, #24
 800d2a4:	af00      	add	r7, sp, #0
 800d2a6:	6078      	str	r0, [r7, #4]
 800d2a8:	6039      	str	r1, [r7, #0]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 800d2aa:	687b      	ldr	r3, [r7, #4]
 800d2ac:	685b      	ldr	r3, [r3, #4]
 800d2ae:	617b      	str	r3, [r7, #20]
  if (IPH_V(iphdr) != 4) {
 800d2b0:	697b      	ldr	r3, [r7, #20]
 800d2b2:	781b      	ldrb	r3, [r3, #0]
 800d2b4:	091b      	lsrs	r3, r3, #4
 800d2b6:	b2db      	uxtb	r3, r3
 800d2b8:	2b04      	cmp	r3, #4
 800d2ba:	d004      	beq.n	800d2c6 <ip4_input+0x26>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 800d2bc:	6878      	ldr	r0, [r7, #4]
 800d2be:	f7f8 fb9b 	bl	80059f8 <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 800d2c2:	2300      	movs	r3, #0
 800d2c4:	e107      	b.n	800d4d6 <ip4_input+0x236>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 800d2c6:	697b      	ldr	r3, [r7, #20]
 800d2c8:	781b      	ldrb	r3, [r3, #0]
 800d2ca:	f003 030f 	and.w	r3, r3, #15
 800d2ce:	b2db      	uxtb	r3, r3
 800d2d0:	009b      	lsls	r3, r3, #2
 800d2d2:	b2db      	uxtb	r3, r3
 800d2d4:	81fb      	strh	r3, [r7, #14]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 800d2d6:	697b      	ldr	r3, [r7, #20]
 800d2d8:	885b      	ldrh	r3, [r3, #2]
 800d2da:	b29b      	uxth	r3, r3
 800d2dc:	4618      	mov	r0, r3
 800d2de:	f7f7 f82d 	bl	800433c <lwip_htons>
 800d2e2:	4603      	mov	r3, r0
 800d2e4:	81bb      	strh	r3, [r7, #12]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 800d2e6:	687b      	ldr	r3, [r7, #4]
 800d2e8:	891b      	ldrh	r3, [r3, #8]
 800d2ea:	89ba      	ldrh	r2, [r7, #12]
 800d2ec:	429a      	cmp	r2, r3
 800d2ee:	d204      	bcs.n	800d2fa <ip4_input+0x5a>
    pbuf_realloc(p, iphdr_len);
 800d2f0:	89bb      	ldrh	r3, [r7, #12]
 800d2f2:	4619      	mov	r1, r3
 800d2f4:	6878      	ldr	r0, [r7, #4]
 800d2f6:	f7f8 f9f9 	bl	80056ec <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 800d2fa:	687b      	ldr	r3, [r7, #4]
 800d2fc:	895b      	ldrh	r3, [r3, #10]
 800d2fe:	89fa      	ldrh	r2, [r7, #14]
 800d300:	429a      	cmp	r2, r3
 800d302:	d807      	bhi.n	800d314 <ip4_input+0x74>
 800d304:	687b      	ldr	r3, [r7, #4]
 800d306:	891b      	ldrh	r3, [r3, #8]
 800d308:	89ba      	ldrh	r2, [r7, #12]
 800d30a:	429a      	cmp	r2, r3
 800d30c:	d802      	bhi.n	800d314 <ip4_input+0x74>
 800d30e:	89fb      	ldrh	r3, [r7, #14]
 800d310:	2b13      	cmp	r3, #19
 800d312:	d804      	bhi.n	800d31e <ip4_input+0x7e>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 800d314:	6878      	ldr	r0, [r7, #4]
 800d316:	f7f8 fb6f 	bl	80059f8 <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 800d31a:	2300      	movs	r3, #0
 800d31c:	e0db      	b.n	800d4d6 <ip4_input+0x236>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 800d31e:	697b      	ldr	r3, [r7, #20]
 800d320:	691b      	ldr	r3, [r3, #16]
 800d322:	4a6f      	ldr	r2, [pc, #444]	; (800d4e0 <ip4_input+0x240>)
 800d324:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 800d326:	697b      	ldr	r3, [r7, #20]
 800d328:	68db      	ldr	r3, [r3, #12]
 800d32a:	4a6d      	ldr	r2, [pc, #436]	; (800d4e0 <ip4_input+0x240>)
 800d32c:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800d32e:	4b6c      	ldr	r3, [pc, #432]	; (800d4e0 <ip4_input+0x240>)
 800d330:	695b      	ldr	r3, [r3, #20]
 800d332:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800d336:	2be0      	cmp	r3, #224	; 0xe0
 800d338:	d112      	bne.n	800d360 <ip4_input+0xc0>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 800d33a:	683b      	ldr	r3, [r7, #0]
 800d33c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800d340:	f003 0301 	and.w	r3, r3, #1
 800d344:	b2db      	uxtb	r3, r3
 800d346:	2b00      	cmp	r3, #0
 800d348:	d007      	beq.n	800d35a <ip4_input+0xba>
 800d34a:	683b      	ldr	r3, [r7, #0]
 800d34c:	3304      	adds	r3, #4
 800d34e:	681b      	ldr	r3, [r3, #0]
 800d350:	2b00      	cmp	r3, #0
 800d352:	d002      	beq.n	800d35a <ip4_input+0xba>
      netif = inp;
 800d354:	683b      	ldr	r3, [r7, #0]
 800d356:	613b      	str	r3, [r7, #16]
 800d358:	e02a      	b.n	800d3b0 <ip4_input+0x110>
    } else {
      netif = NULL;
 800d35a:	2300      	movs	r3, #0
 800d35c:	613b      	str	r3, [r7, #16]
 800d35e:	e027      	b.n	800d3b0 <ip4_input+0x110>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 800d360:	6838      	ldr	r0, [r7, #0]
 800d362:	f7ff ff73 	bl	800d24c <ip4_input_accept>
 800d366:	4603      	mov	r3, r0
 800d368:	2b00      	cmp	r3, #0
 800d36a:	d002      	beq.n	800d372 <ip4_input+0xd2>
      netif = inp;
 800d36c:	683b      	ldr	r3, [r7, #0]
 800d36e:	613b      	str	r3, [r7, #16]
 800d370:	e01e      	b.n	800d3b0 <ip4_input+0x110>
    } else {
      netif = NULL;
 800d372:	2300      	movs	r3, #0
 800d374:	613b      	str	r3, [r7, #16]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 800d376:	4b5a      	ldr	r3, [pc, #360]	; (800d4e0 <ip4_input+0x240>)
 800d378:	695b      	ldr	r3, [r3, #20]
 800d37a:	b2db      	uxtb	r3, r3
 800d37c:	2b7f      	cmp	r3, #127	; 0x7f
 800d37e:	d017      	beq.n	800d3b0 <ip4_input+0x110>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 800d380:	4b58      	ldr	r3, [pc, #352]	; (800d4e4 <ip4_input+0x244>)
 800d382:	681b      	ldr	r3, [r3, #0]
 800d384:	613b      	str	r3, [r7, #16]
 800d386:	e00e      	b.n	800d3a6 <ip4_input+0x106>
          if (netif == inp) {
 800d388:	693a      	ldr	r2, [r7, #16]
 800d38a:	683b      	ldr	r3, [r7, #0]
 800d38c:	429a      	cmp	r2, r3
 800d38e:	d006      	beq.n	800d39e <ip4_input+0xfe>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 800d390:	6938      	ldr	r0, [r7, #16]
 800d392:	f7ff ff5b 	bl	800d24c <ip4_input_accept>
 800d396:	4603      	mov	r3, r0
 800d398:	2b00      	cmp	r3, #0
 800d39a:	d108      	bne.n	800d3ae <ip4_input+0x10e>
 800d39c:	e000      	b.n	800d3a0 <ip4_input+0x100>
            continue;
 800d39e:	bf00      	nop
        NETIF_FOREACH(netif) {
 800d3a0:	693b      	ldr	r3, [r7, #16]
 800d3a2:	681b      	ldr	r3, [r3, #0]
 800d3a4:	613b      	str	r3, [r7, #16]
 800d3a6:	693b      	ldr	r3, [r7, #16]
 800d3a8:	2b00      	cmp	r3, #0
 800d3aa:	d1ed      	bne.n	800d388 <ip4_input+0xe8>
 800d3ac:	e000      	b.n	800d3b0 <ip4_input+0x110>
            break;
 800d3ae:	bf00      	nop
      && !ip4_addr_isany_val(*ip4_current_src_addr())
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 800d3b0:	4b4b      	ldr	r3, [pc, #300]	; (800d4e0 <ip4_input+0x240>)
 800d3b2:	691b      	ldr	r3, [r3, #16]
 800d3b4:	6839      	ldr	r1, [r7, #0]
 800d3b6:	4618      	mov	r0, r3
 800d3b8:	f000 f96e 	bl	800d698 <ip4_addr_isbroadcast_u32>
 800d3bc:	4603      	mov	r3, r0
 800d3be:	2b00      	cmp	r3, #0
 800d3c0:	d105      	bne.n	800d3ce <ip4_input+0x12e>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 800d3c2:	4b47      	ldr	r3, [pc, #284]	; (800d4e0 <ip4_input+0x240>)
 800d3c4:	691b      	ldr	r3, [r3, #16]
 800d3c6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 800d3ca:	2be0      	cmp	r3, #224	; 0xe0
 800d3cc:	d104      	bne.n	800d3d8 <ip4_input+0x138>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 800d3ce:	6878      	ldr	r0, [r7, #4]
 800d3d0:	f7f8 fb12 	bl	80059f8 <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 800d3d4:	2300      	movs	r3, #0
 800d3d6:	e07e      	b.n	800d4d6 <ip4_input+0x236>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 800d3d8:	693b      	ldr	r3, [r7, #16]
 800d3da:	2b00      	cmp	r3, #0
 800d3dc:	d104      	bne.n	800d3e8 <ip4_input+0x148>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 800d3de:	6878      	ldr	r0, [r7, #4]
 800d3e0:	f7f8 fb0a 	bl	80059f8 <pbuf_free>
    return ERR_OK;
 800d3e4:	2300      	movs	r3, #0
 800d3e6:	e076      	b.n	800d4d6 <ip4_input+0x236>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 800d3e8:	697b      	ldr	r3, [r7, #20]
 800d3ea:	88db      	ldrh	r3, [r3, #6]
 800d3ec:	b29b      	uxth	r3, r3
 800d3ee:	461a      	mov	r2, r3
 800d3f0:	f64f 733f 	movw	r3, #65343	; 0xff3f
 800d3f4:	4013      	ands	r3, r2
 800d3f6:	2b00      	cmp	r3, #0
 800d3f8:	d00b      	beq.n	800d412 <ip4_input+0x172>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 800d3fa:	6878      	ldr	r0, [r7, #4]
 800d3fc:	f000 fc92 	bl	800dd24 <ip4_reass>
 800d400:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 800d402:	687b      	ldr	r3, [r7, #4]
 800d404:	2b00      	cmp	r3, #0
 800d406:	d101      	bne.n	800d40c <ip4_input+0x16c>
      return ERR_OK;
 800d408:	2300      	movs	r3, #0
 800d40a:	e064      	b.n	800d4d6 <ip4_input+0x236>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 800d40c:	687b      	ldr	r3, [r7, #4]
 800d40e:	685b      	ldr	r3, [r3, #4]
 800d410:	617b      	str	r3, [r7, #20]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 800d412:	4a33      	ldr	r2, [pc, #204]	; (800d4e0 <ip4_input+0x240>)
 800d414:	693b      	ldr	r3, [r7, #16]
 800d416:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 800d418:	4a31      	ldr	r2, [pc, #196]	; (800d4e0 <ip4_input+0x240>)
 800d41a:	683b      	ldr	r3, [r7, #0]
 800d41c:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 800d41e:	4a30      	ldr	r2, [pc, #192]	; (800d4e0 <ip4_input+0x240>)
 800d420:	697b      	ldr	r3, [r7, #20]
 800d422:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 800d424:	697b      	ldr	r3, [r7, #20]
 800d426:	781b      	ldrb	r3, [r3, #0]
 800d428:	f003 030f 	and.w	r3, r3, #15
 800d42c:	b2db      	uxtb	r3, r3
 800d42e:	009b      	lsls	r3, r3, #2
 800d430:	b2db      	uxtb	r3, r3
 800d432:	b29a      	uxth	r2, r3
 800d434:	4b2a      	ldr	r3, [pc, #168]	; (800d4e0 <ip4_input+0x240>)
 800d436:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 800d438:	89fb      	ldrh	r3, [r7, #14]
 800d43a:	4619      	mov	r1, r3
 800d43c:	6878      	ldr	r0, [r7, #4]
 800d43e:	f7f8 fa55 	bl	80058ec <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 800d442:	697b      	ldr	r3, [r7, #20]
 800d444:	7a5b      	ldrb	r3, [r3, #9]
 800d446:	2b11      	cmp	r3, #17
 800d448:	d006      	beq.n	800d458 <ip4_input+0x1b8>
 800d44a:	2b11      	cmp	r3, #17
 800d44c:	dc13      	bgt.n	800d476 <ip4_input+0x1d6>
 800d44e:	2b01      	cmp	r3, #1
 800d450:	d00c      	beq.n	800d46c <ip4_input+0x1cc>
 800d452:	2b06      	cmp	r3, #6
 800d454:	d005      	beq.n	800d462 <ip4_input+0x1c2>
 800d456:	e00e      	b.n	800d476 <ip4_input+0x1d6>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 800d458:	6839      	ldr	r1, [r7, #0]
 800d45a:	6878      	ldr	r0, [r7, #4]
 800d45c:	f7fe f950 	bl	800b700 <udp_input>
        break;
 800d460:	e026      	b.n	800d4b0 <ip4_input+0x210>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 800d462:	6839      	ldr	r1, [r7, #0]
 800d464:	6878      	ldr	r0, [r7, #4]
 800d466:	f7fa f991 	bl	800778c <tcp_input>
        break;
 800d46a:	e021      	b.n	800d4b0 <ip4_input+0x210>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 800d46c:	6839      	ldr	r1, [r7, #0]
 800d46e:	6878      	ldr	r0, [r7, #4]
 800d470:	f7ff fcee 	bl	800ce50 <icmp_input>
        break;
 800d474:	e01c      	b.n	800d4b0 <ip4_input+0x210>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 800d476:	4b1a      	ldr	r3, [pc, #104]	; (800d4e0 <ip4_input+0x240>)
 800d478:	695b      	ldr	r3, [r3, #20]
 800d47a:	6939      	ldr	r1, [r7, #16]
 800d47c:	4618      	mov	r0, r3
 800d47e:	f000 f90b 	bl	800d698 <ip4_addr_isbroadcast_u32>
 800d482:	4603      	mov	r3, r0
 800d484:	2b00      	cmp	r3, #0
 800d486:	d10f      	bne.n	800d4a8 <ip4_input+0x208>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800d488:	4b15      	ldr	r3, [pc, #84]	; (800d4e0 <ip4_input+0x240>)
 800d48a:	695b      	ldr	r3, [r3, #20]
 800d48c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 800d490:	2be0      	cmp	r3, #224	; 0xe0
 800d492:	d009      	beq.n	800d4a8 <ip4_input+0x208>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 800d494:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800d498:	4619      	mov	r1, r3
 800d49a:	6878      	ldr	r0, [r7, #4]
 800d49c:	f7f8 fa99 	bl	80059d2 <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 800d4a0:	2102      	movs	r1, #2
 800d4a2:	6878      	ldr	r0, [r7, #4]
 800d4a4:	f7ff fdd8 	bl	800d058 <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 800d4a8:	6878      	ldr	r0, [r7, #4]
 800d4aa:	f7f8 faa5 	bl	80059f8 <pbuf_free>
        break;
 800d4ae:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 800d4b0:	4b0b      	ldr	r3, [pc, #44]	; (800d4e0 <ip4_input+0x240>)
 800d4b2:	2200      	movs	r2, #0
 800d4b4:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 800d4b6:	4b0a      	ldr	r3, [pc, #40]	; (800d4e0 <ip4_input+0x240>)
 800d4b8:	2200      	movs	r2, #0
 800d4ba:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 800d4bc:	4b08      	ldr	r3, [pc, #32]	; (800d4e0 <ip4_input+0x240>)
 800d4be:	2200      	movs	r2, #0
 800d4c0:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 800d4c2:	4b07      	ldr	r3, [pc, #28]	; (800d4e0 <ip4_input+0x240>)
 800d4c4:	2200      	movs	r2, #0
 800d4c6:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 800d4c8:	4b05      	ldr	r3, [pc, #20]	; (800d4e0 <ip4_input+0x240>)
 800d4ca:	2200      	movs	r2, #0
 800d4cc:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 800d4ce:	4b04      	ldr	r3, [pc, #16]	; (800d4e0 <ip4_input+0x240>)
 800d4d0:	2200      	movs	r2, #0
 800d4d2:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 800d4d4:	2300      	movs	r3, #0
}
 800d4d6:	4618      	mov	r0, r3
 800d4d8:	3718      	adds	r7, #24
 800d4da:	46bd      	mov	sp, r7
 800d4dc:	bd80      	pop	{r7, pc}
 800d4de:	bf00      	nop
 800d4e0:	20004d7c 	.word	0x20004d7c
 800d4e4:	200082e0 	.word	0x200082e0

0800d4e8 <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 800d4e8:	b580      	push	{r7, lr}
 800d4ea:	b08a      	sub	sp, #40	; 0x28
 800d4ec:	af04      	add	r7, sp, #16
 800d4ee:	60f8      	str	r0, [r7, #12]
 800d4f0:	60b9      	str	r1, [r7, #8]
 800d4f2:	607a      	str	r2, [r7, #4]
 800d4f4:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 800d4f6:	68bb      	ldr	r3, [r7, #8]
 800d4f8:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 800d4fa:	687b      	ldr	r3, [r7, #4]
 800d4fc:	2b00      	cmp	r3, #0
 800d4fe:	d009      	beq.n	800d514 <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 800d500:	68bb      	ldr	r3, [r7, #8]
 800d502:	2b00      	cmp	r3, #0
 800d504:	d003      	beq.n	800d50e <ip4_output_if+0x26>
 800d506:	68bb      	ldr	r3, [r7, #8]
 800d508:	681b      	ldr	r3, [r3, #0]
 800d50a:	2b00      	cmp	r3, #0
 800d50c:	d102      	bne.n	800d514 <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 800d50e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d510:	3304      	adds	r3, #4
 800d512:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 800d514:	78fa      	ldrb	r2, [r7, #3]
 800d516:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d518:	9302      	str	r3, [sp, #8]
 800d51a:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800d51e:	9301      	str	r3, [sp, #4]
 800d520:	f897 3020 	ldrb.w	r3, [r7, #32]
 800d524:	9300      	str	r3, [sp, #0]
 800d526:	4613      	mov	r3, r2
 800d528:	687a      	ldr	r2, [r7, #4]
 800d52a:	6979      	ldr	r1, [r7, #20]
 800d52c:	68f8      	ldr	r0, [r7, #12]
 800d52e:	f000 f805 	bl	800d53c <ip4_output_if_src>
 800d532:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 800d534:	4618      	mov	r0, r3
 800d536:	3718      	adds	r7, #24
 800d538:	46bd      	mov	sp, r7
 800d53a:	bd80      	pop	{r7, pc}

0800d53c <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 800d53c:	b580      	push	{r7, lr}
 800d53e:	b088      	sub	sp, #32
 800d540:	af00      	add	r7, sp, #0
 800d542:	60f8      	str	r0, [r7, #12]
 800d544:	60b9      	str	r1, [r7, #8]
 800d546:	607a      	str	r2, [r7, #4]
 800d548:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 800d54a:	68fb      	ldr	r3, [r7, #12]
 800d54c:	7b9b      	ldrb	r3, [r3, #14]
 800d54e:	2b01      	cmp	r3, #1
 800d550:	d006      	beq.n	800d560 <ip4_output_if_src+0x24>
 800d552:	4b4b      	ldr	r3, [pc, #300]	; (800d680 <ip4_output_if_src+0x144>)
 800d554:	f44f 7255 	mov.w	r2, #852	; 0x354
 800d558:	494a      	ldr	r1, [pc, #296]	; (800d684 <ip4_output_if_src+0x148>)
 800d55a:	484b      	ldr	r0, [pc, #300]	; (800d688 <ip4_output_if_src+0x14c>)
 800d55c:	f001 f8e0 	bl	800e720 <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 800d560:	687b      	ldr	r3, [r7, #4]
 800d562:	2b00      	cmp	r3, #0
 800d564:	d060      	beq.n	800d628 <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 800d566:	2314      	movs	r3, #20
 800d568:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 800d56a:	2114      	movs	r1, #20
 800d56c:	68f8      	ldr	r0, [r7, #12]
 800d56e:	f7f8 f9ad 	bl	80058cc <pbuf_add_header>
 800d572:	4603      	mov	r3, r0
 800d574:	2b00      	cmp	r3, #0
 800d576:	d002      	beq.n	800d57e <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 800d578:	f06f 0301 	mvn.w	r3, #1
 800d57c:	e07c      	b.n	800d678 <ip4_output_if_src+0x13c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 800d57e:	68fb      	ldr	r3, [r7, #12]
 800d580:	685b      	ldr	r3, [r3, #4]
 800d582:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 800d584:	68fb      	ldr	r3, [r7, #12]
 800d586:	895b      	ldrh	r3, [r3, #10]
 800d588:	2b13      	cmp	r3, #19
 800d58a:	d806      	bhi.n	800d59a <ip4_output_if_src+0x5e>
 800d58c:	4b3c      	ldr	r3, [pc, #240]	; (800d680 <ip4_output_if_src+0x144>)
 800d58e:	f44f 7262 	mov.w	r2, #904	; 0x388
 800d592:	493e      	ldr	r1, [pc, #248]	; (800d68c <ip4_output_if_src+0x150>)
 800d594:	483c      	ldr	r0, [pc, #240]	; (800d688 <ip4_output_if_src+0x14c>)
 800d596:	f001 f8c3 	bl	800e720 <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 800d59a:	69fb      	ldr	r3, [r7, #28]
 800d59c:	78fa      	ldrb	r2, [r7, #3]
 800d59e:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 800d5a0:	69fb      	ldr	r3, [r7, #28]
 800d5a2:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 800d5a6:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 800d5a8:	687b      	ldr	r3, [r7, #4]
 800d5aa:	681a      	ldr	r2, [r3, #0]
 800d5ac:	69fb      	ldr	r3, [r7, #28]
 800d5ae:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 800d5b0:	8b7b      	ldrh	r3, [r7, #26]
 800d5b2:	089b      	lsrs	r3, r3, #2
 800d5b4:	b29b      	uxth	r3, r3
 800d5b6:	b2db      	uxtb	r3, r3
 800d5b8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d5bc:	b2da      	uxtb	r2, r3
 800d5be:	69fb      	ldr	r3, [r7, #28]
 800d5c0:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 800d5c2:	69fb      	ldr	r3, [r7, #28]
 800d5c4:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 800d5c8:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 800d5ca:	68fb      	ldr	r3, [r7, #12]
 800d5cc:	891b      	ldrh	r3, [r3, #8]
 800d5ce:	4618      	mov	r0, r3
 800d5d0:	f7f6 feb4 	bl	800433c <lwip_htons>
 800d5d4:	4603      	mov	r3, r0
 800d5d6:	461a      	mov	r2, r3
 800d5d8:	69fb      	ldr	r3, [r7, #28]
 800d5da:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 800d5dc:	69fb      	ldr	r3, [r7, #28]
 800d5de:	2200      	movs	r2, #0
 800d5e0:	719a      	strb	r2, [r3, #6]
 800d5e2:	2200      	movs	r2, #0
 800d5e4:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 800d5e6:	4b2a      	ldr	r3, [pc, #168]	; (800d690 <ip4_output_if_src+0x154>)
 800d5e8:	881b      	ldrh	r3, [r3, #0]
 800d5ea:	4618      	mov	r0, r3
 800d5ec:	f7f6 fea6 	bl	800433c <lwip_htons>
 800d5f0:	4603      	mov	r3, r0
 800d5f2:	461a      	mov	r2, r3
 800d5f4:	69fb      	ldr	r3, [r7, #28]
 800d5f6:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 800d5f8:	4b25      	ldr	r3, [pc, #148]	; (800d690 <ip4_output_if_src+0x154>)
 800d5fa:	881b      	ldrh	r3, [r3, #0]
 800d5fc:	3301      	adds	r3, #1
 800d5fe:	b29a      	uxth	r2, r3
 800d600:	4b23      	ldr	r3, [pc, #140]	; (800d690 <ip4_output_if_src+0x154>)
 800d602:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 800d604:	68bb      	ldr	r3, [r7, #8]
 800d606:	2b00      	cmp	r3, #0
 800d608:	d104      	bne.n	800d614 <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 800d60a:	4b22      	ldr	r3, [pc, #136]	; (800d694 <ip4_output_if_src+0x158>)
 800d60c:	681a      	ldr	r2, [r3, #0]
 800d60e:	69fb      	ldr	r3, [r7, #28]
 800d610:	60da      	str	r2, [r3, #12]
 800d612:	e003      	b.n	800d61c <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 800d614:	68bb      	ldr	r3, [r7, #8]
 800d616:	681a      	ldr	r2, [r3, #0]
 800d618:	69fb      	ldr	r3, [r7, #28]
 800d61a:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 800d61c:	69fb      	ldr	r3, [r7, #28]
 800d61e:	2200      	movs	r2, #0
 800d620:	729a      	strb	r2, [r3, #10]
 800d622:	2200      	movs	r2, #0
 800d624:	72da      	strb	r2, [r3, #11]
 800d626:	e00f      	b.n	800d648 <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 800d628:	68fb      	ldr	r3, [r7, #12]
 800d62a:	895b      	ldrh	r3, [r3, #10]
 800d62c:	2b13      	cmp	r3, #19
 800d62e:	d802      	bhi.n	800d636 <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 800d630:	f06f 0301 	mvn.w	r3, #1
 800d634:	e020      	b.n	800d678 <ip4_output_if_src+0x13c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 800d636:	68fb      	ldr	r3, [r7, #12]
 800d638:	685b      	ldr	r3, [r3, #4]
 800d63a:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 800d63c:	69fb      	ldr	r3, [r7, #28]
 800d63e:	691b      	ldr	r3, [r3, #16]
 800d640:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 800d642:	f107 0314 	add.w	r3, r7, #20
 800d646:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 800d648:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d64a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800d64c:	2b00      	cmp	r3, #0
 800d64e:	d00c      	beq.n	800d66a <ip4_output_if_src+0x12e>
 800d650:	68fb      	ldr	r3, [r7, #12]
 800d652:	891a      	ldrh	r2, [r3, #8]
 800d654:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d656:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800d658:	429a      	cmp	r2, r3
 800d65a:	d906      	bls.n	800d66a <ip4_output_if_src+0x12e>
    return ip4_frag(p, netif, dest);
 800d65c:	687a      	ldr	r2, [r7, #4]
 800d65e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800d660:	68f8      	ldr	r0, [r7, #12]
 800d662:	f000 fd53 	bl	800e10c <ip4_frag>
 800d666:	4603      	mov	r3, r0
 800d668:	e006      	b.n	800d678 <ip4_output_if_src+0x13c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 800d66a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d66c:	695b      	ldr	r3, [r3, #20]
 800d66e:	687a      	ldr	r2, [r7, #4]
 800d670:	68f9      	ldr	r1, [r7, #12]
 800d672:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d674:	4798      	blx	r3
 800d676:	4603      	mov	r3, r0
}
 800d678:	4618      	mov	r0, r3
 800d67a:	3720      	adds	r7, #32
 800d67c:	46bd      	mov	sp, r7
 800d67e:	bd80      	pop	{r7, pc}
 800d680:	0801205c 	.word	0x0801205c
 800d684:	08012090 	.word	0x08012090
 800d688:	0801209c 	.word	0x0801209c
 800d68c:	080120c4 	.word	0x080120c4
 800d690:	2000843e 	.word	0x2000843e
 800d694:	080124a4 	.word	0x080124a4

0800d698 <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 800d698:	b480      	push	{r7}
 800d69a:	b085      	sub	sp, #20
 800d69c:	af00      	add	r7, sp, #0
 800d69e:	6078      	str	r0, [r7, #4]
 800d6a0:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 800d6a2:	687b      	ldr	r3, [r7, #4]
 800d6a4:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 800d6a6:	687b      	ldr	r3, [r7, #4]
 800d6a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d6ac:	d002      	beq.n	800d6b4 <ip4_addr_isbroadcast_u32+0x1c>
 800d6ae:	687b      	ldr	r3, [r7, #4]
 800d6b0:	2b00      	cmp	r3, #0
 800d6b2:	d101      	bne.n	800d6b8 <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 800d6b4:	2301      	movs	r3, #1
 800d6b6:	e02a      	b.n	800d70e <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 800d6b8:	683b      	ldr	r3, [r7, #0]
 800d6ba:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800d6be:	f003 0302 	and.w	r3, r3, #2
 800d6c2:	2b00      	cmp	r3, #0
 800d6c4:	d101      	bne.n	800d6ca <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 800d6c6:	2300      	movs	r3, #0
 800d6c8:	e021      	b.n	800d70e <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 800d6ca:	683b      	ldr	r3, [r7, #0]
 800d6cc:	3304      	adds	r3, #4
 800d6ce:	681b      	ldr	r3, [r3, #0]
 800d6d0:	687a      	ldr	r2, [r7, #4]
 800d6d2:	429a      	cmp	r2, r3
 800d6d4:	d101      	bne.n	800d6da <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 800d6d6:	2300      	movs	r3, #0
 800d6d8:	e019      	b.n	800d70e <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 800d6da:	68fa      	ldr	r2, [r7, #12]
 800d6dc:	683b      	ldr	r3, [r7, #0]
 800d6de:	3304      	adds	r3, #4
 800d6e0:	681b      	ldr	r3, [r3, #0]
 800d6e2:	405a      	eors	r2, r3
 800d6e4:	683b      	ldr	r3, [r7, #0]
 800d6e6:	3308      	adds	r3, #8
 800d6e8:	681b      	ldr	r3, [r3, #0]
 800d6ea:	4013      	ands	r3, r2
 800d6ec:	2b00      	cmp	r3, #0
 800d6ee:	d10d      	bne.n	800d70c <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 800d6f0:	683b      	ldr	r3, [r7, #0]
 800d6f2:	3308      	adds	r3, #8
 800d6f4:	681b      	ldr	r3, [r3, #0]
 800d6f6:	43da      	mvns	r2, r3
 800d6f8:	687b      	ldr	r3, [r7, #4]
 800d6fa:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 800d6fc:	683b      	ldr	r3, [r7, #0]
 800d6fe:	3308      	adds	r3, #8
 800d700:	681b      	ldr	r3, [r3, #0]
 800d702:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 800d704:	429a      	cmp	r2, r3
 800d706:	d101      	bne.n	800d70c <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 800d708:	2301      	movs	r3, #1
 800d70a:	e000      	b.n	800d70e <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 800d70c:	2300      	movs	r3, #0
  }
}
 800d70e:	4618      	mov	r0, r3
 800d710:	3714      	adds	r7, #20
 800d712:	46bd      	mov	sp, r7
 800d714:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d718:	4770      	bx	lr
	...

0800d71c <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 800d71c:	b580      	push	{r7, lr}
 800d71e:	b084      	sub	sp, #16
 800d720:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 800d722:	2300      	movs	r3, #0
 800d724:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 800d726:	4b12      	ldr	r3, [pc, #72]	; (800d770 <ip_reass_tmr+0x54>)
 800d728:	681b      	ldr	r3, [r3, #0]
 800d72a:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 800d72c:	e018      	b.n	800d760 <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 800d72e:	68fb      	ldr	r3, [r7, #12]
 800d730:	7fdb      	ldrb	r3, [r3, #31]
 800d732:	2b00      	cmp	r3, #0
 800d734:	d00b      	beq.n	800d74e <ip_reass_tmr+0x32>
      r->timer--;
 800d736:	68fb      	ldr	r3, [r7, #12]
 800d738:	7fdb      	ldrb	r3, [r3, #31]
 800d73a:	3b01      	subs	r3, #1
 800d73c:	b2da      	uxtb	r2, r3
 800d73e:	68fb      	ldr	r3, [r7, #12]
 800d740:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 800d742:	68fb      	ldr	r3, [r7, #12]
 800d744:	60bb      	str	r3, [r7, #8]
      r = r->next;
 800d746:	68fb      	ldr	r3, [r7, #12]
 800d748:	681b      	ldr	r3, [r3, #0]
 800d74a:	60fb      	str	r3, [r7, #12]
 800d74c:	e008      	b.n	800d760 <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 800d74e:	68fb      	ldr	r3, [r7, #12]
 800d750:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 800d752:	68fb      	ldr	r3, [r7, #12]
 800d754:	681b      	ldr	r3, [r3, #0]
 800d756:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 800d758:	68b9      	ldr	r1, [r7, #8]
 800d75a:	6878      	ldr	r0, [r7, #4]
 800d75c:	f000 f80a 	bl	800d774 <ip_reass_free_complete_datagram>
  while (r != NULL) {
 800d760:	68fb      	ldr	r3, [r7, #12]
 800d762:	2b00      	cmp	r3, #0
 800d764:	d1e3      	bne.n	800d72e <ip_reass_tmr+0x12>
    }
  }
}
 800d766:	bf00      	nop
 800d768:	bf00      	nop
 800d76a:	3710      	adds	r7, #16
 800d76c:	46bd      	mov	sp, r7
 800d76e:	bd80      	pop	{r7, pc}
 800d770:	20008440 	.word	0x20008440

0800d774 <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 800d774:	b580      	push	{r7, lr}
 800d776:	b088      	sub	sp, #32
 800d778:	af00      	add	r7, sp, #0
 800d77a:	6078      	str	r0, [r7, #4]
 800d77c:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 800d77e:	2300      	movs	r3, #0
 800d780:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 800d782:	683a      	ldr	r2, [r7, #0]
 800d784:	687b      	ldr	r3, [r7, #4]
 800d786:	429a      	cmp	r2, r3
 800d788:	d105      	bne.n	800d796 <ip_reass_free_complete_datagram+0x22>
 800d78a:	4b45      	ldr	r3, [pc, #276]	; (800d8a0 <ip_reass_free_complete_datagram+0x12c>)
 800d78c:	22ab      	movs	r2, #171	; 0xab
 800d78e:	4945      	ldr	r1, [pc, #276]	; (800d8a4 <ip_reass_free_complete_datagram+0x130>)
 800d790:	4845      	ldr	r0, [pc, #276]	; (800d8a8 <ip_reass_free_complete_datagram+0x134>)
 800d792:	f000 ffc5 	bl	800e720 <iprintf>
  if (prev != NULL) {
 800d796:	683b      	ldr	r3, [r7, #0]
 800d798:	2b00      	cmp	r3, #0
 800d79a:	d00a      	beq.n	800d7b2 <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 800d79c:	683b      	ldr	r3, [r7, #0]
 800d79e:	681b      	ldr	r3, [r3, #0]
 800d7a0:	687a      	ldr	r2, [r7, #4]
 800d7a2:	429a      	cmp	r2, r3
 800d7a4:	d005      	beq.n	800d7b2 <ip_reass_free_complete_datagram+0x3e>
 800d7a6:	4b3e      	ldr	r3, [pc, #248]	; (800d8a0 <ip_reass_free_complete_datagram+0x12c>)
 800d7a8:	22ad      	movs	r2, #173	; 0xad
 800d7aa:	4940      	ldr	r1, [pc, #256]	; (800d8ac <ip_reass_free_complete_datagram+0x138>)
 800d7ac:	483e      	ldr	r0, [pc, #248]	; (800d8a8 <ip_reass_free_complete_datagram+0x134>)
 800d7ae:	f000 ffb7 	bl	800e720 <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 800d7b2:	687b      	ldr	r3, [r7, #4]
 800d7b4:	685b      	ldr	r3, [r3, #4]
 800d7b6:	685b      	ldr	r3, [r3, #4]
 800d7b8:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 800d7ba:	697b      	ldr	r3, [r7, #20]
 800d7bc:	889b      	ldrh	r3, [r3, #4]
 800d7be:	b29b      	uxth	r3, r3
 800d7c0:	2b00      	cmp	r3, #0
 800d7c2:	d12a      	bne.n	800d81a <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 800d7c4:	687b      	ldr	r3, [r7, #4]
 800d7c6:	685b      	ldr	r3, [r3, #4]
 800d7c8:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 800d7ca:	697b      	ldr	r3, [r7, #20]
 800d7cc:	681a      	ldr	r2, [r3, #0]
 800d7ce:	687b      	ldr	r3, [r7, #4]
 800d7d0:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 800d7d2:	69bb      	ldr	r3, [r7, #24]
 800d7d4:	6858      	ldr	r0, [r3, #4]
 800d7d6:	687b      	ldr	r3, [r7, #4]
 800d7d8:	3308      	adds	r3, #8
 800d7da:	2214      	movs	r2, #20
 800d7dc:	4619      	mov	r1, r3
 800d7de:	f001 f9a3 	bl	800eb28 <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 800d7e2:	2101      	movs	r1, #1
 800d7e4:	69b8      	ldr	r0, [r7, #24]
 800d7e6:	f7ff fc47 	bl	800d078 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 800d7ea:	69b8      	ldr	r0, [r7, #24]
 800d7ec:	f7f8 f98c 	bl	8005b08 <pbuf_clen>
 800d7f0:	4603      	mov	r3, r0
 800d7f2:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 800d7f4:	8bfa      	ldrh	r2, [r7, #30]
 800d7f6:	8a7b      	ldrh	r3, [r7, #18]
 800d7f8:	4413      	add	r3, r2
 800d7fa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d7fe:	db05      	blt.n	800d80c <ip_reass_free_complete_datagram+0x98>
 800d800:	4b27      	ldr	r3, [pc, #156]	; (800d8a0 <ip_reass_free_complete_datagram+0x12c>)
 800d802:	22bc      	movs	r2, #188	; 0xbc
 800d804:	492a      	ldr	r1, [pc, #168]	; (800d8b0 <ip_reass_free_complete_datagram+0x13c>)
 800d806:	4828      	ldr	r0, [pc, #160]	; (800d8a8 <ip_reass_free_complete_datagram+0x134>)
 800d808:	f000 ff8a 	bl	800e720 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 800d80c:	8bfa      	ldrh	r2, [r7, #30]
 800d80e:	8a7b      	ldrh	r3, [r7, #18]
 800d810:	4413      	add	r3, r2
 800d812:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 800d814:	69b8      	ldr	r0, [r7, #24]
 800d816:	f7f8 f8ef 	bl	80059f8 <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 800d81a:	687b      	ldr	r3, [r7, #4]
 800d81c:	685b      	ldr	r3, [r3, #4]
 800d81e:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 800d820:	e01f      	b.n	800d862 <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 800d822:	69bb      	ldr	r3, [r7, #24]
 800d824:	685b      	ldr	r3, [r3, #4]
 800d826:	617b      	str	r3, [r7, #20]
    pcur = p;
 800d828:	69bb      	ldr	r3, [r7, #24]
 800d82a:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 800d82c:	697b      	ldr	r3, [r7, #20]
 800d82e:	681b      	ldr	r3, [r3, #0]
 800d830:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 800d832:	68f8      	ldr	r0, [r7, #12]
 800d834:	f7f8 f968 	bl	8005b08 <pbuf_clen>
 800d838:	4603      	mov	r3, r0
 800d83a:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 800d83c:	8bfa      	ldrh	r2, [r7, #30]
 800d83e:	8a7b      	ldrh	r3, [r7, #18]
 800d840:	4413      	add	r3, r2
 800d842:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d846:	db05      	blt.n	800d854 <ip_reass_free_complete_datagram+0xe0>
 800d848:	4b15      	ldr	r3, [pc, #84]	; (800d8a0 <ip_reass_free_complete_datagram+0x12c>)
 800d84a:	22cc      	movs	r2, #204	; 0xcc
 800d84c:	4918      	ldr	r1, [pc, #96]	; (800d8b0 <ip_reass_free_complete_datagram+0x13c>)
 800d84e:	4816      	ldr	r0, [pc, #88]	; (800d8a8 <ip_reass_free_complete_datagram+0x134>)
 800d850:	f000 ff66 	bl	800e720 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 800d854:	8bfa      	ldrh	r2, [r7, #30]
 800d856:	8a7b      	ldrh	r3, [r7, #18]
 800d858:	4413      	add	r3, r2
 800d85a:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 800d85c:	68f8      	ldr	r0, [r7, #12]
 800d85e:	f7f8 f8cb 	bl	80059f8 <pbuf_free>
  while (p != NULL) {
 800d862:	69bb      	ldr	r3, [r7, #24]
 800d864:	2b00      	cmp	r3, #0
 800d866:	d1dc      	bne.n	800d822 <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 800d868:	6839      	ldr	r1, [r7, #0]
 800d86a:	6878      	ldr	r0, [r7, #4]
 800d86c:	f000 f8c2 	bl	800d9f4 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 800d870:	4b10      	ldr	r3, [pc, #64]	; (800d8b4 <ip_reass_free_complete_datagram+0x140>)
 800d872:	881b      	ldrh	r3, [r3, #0]
 800d874:	8bfa      	ldrh	r2, [r7, #30]
 800d876:	429a      	cmp	r2, r3
 800d878:	d905      	bls.n	800d886 <ip_reass_free_complete_datagram+0x112>
 800d87a:	4b09      	ldr	r3, [pc, #36]	; (800d8a0 <ip_reass_free_complete_datagram+0x12c>)
 800d87c:	22d2      	movs	r2, #210	; 0xd2
 800d87e:	490e      	ldr	r1, [pc, #56]	; (800d8b8 <ip_reass_free_complete_datagram+0x144>)
 800d880:	4809      	ldr	r0, [pc, #36]	; (800d8a8 <ip_reass_free_complete_datagram+0x134>)
 800d882:	f000 ff4d 	bl	800e720 <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 800d886:	4b0b      	ldr	r3, [pc, #44]	; (800d8b4 <ip_reass_free_complete_datagram+0x140>)
 800d888:	881a      	ldrh	r2, [r3, #0]
 800d88a:	8bfb      	ldrh	r3, [r7, #30]
 800d88c:	1ad3      	subs	r3, r2, r3
 800d88e:	b29a      	uxth	r2, r3
 800d890:	4b08      	ldr	r3, [pc, #32]	; (800d8b4 <ip_reass_free_complete_datagram+0x140>)
 800d892:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 800d894:	8bfb      	ldrh	r3, [r7, #30]
}
 800d896:	4618      	mov	r0, r3
 800d898:	3720      	adds	r7, #32
 800d89a:	46bd      	mov	sp, r7
 800d89c:	bd80      	pop	{r7, pc}
 800d89e:	bf00      	nop
 800d8a0:	080120f4 	.word	0x080120f4
 800d8a4:	08012130 	.word	0x08012130
 800d8a8:	0801213c 	.word	0x0801213c
 800d8ac:	08012164 	.word	0x08012164
 800d8b0:	08012178 	.word	0x08012178
 800d8b4:	20008444 	.word	0x20008444
 800d8b8:	08012198 	.word	0x08012198

0800d8bc <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 800d8bc:	b580      	push	{r7, lr}
 800d8be:	b08a      	sub	sp, #40	; 0x28
 800d8c0:	af00      	add	r7, sp, #0
 800d8c2:	6078      	str	r0, [r7, #4]
 800d8c4:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 800d8c6:	2300      	movs	r3, #0
 800d8c8:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 800d8ca:	2300      	movs	r3, #0
 800d8cc:	623b      	str	r3, [r7, #32]
    prev = NULL;
 800d8ce:	2300      	movs	r3, #0
 800d8d0:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 800d8d2:	2300      	movs	r3, #0
 800d8d4:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 800d8d6:	2300      	movs	r3, #0
 800d8d8:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 800d8da:	4b28      	ldr	r3, [pc, #160]	; (800d97c <ip_reass_remove_oldest_datagram+0xc0>)
 800d8dc:	681b      	ldr	r3, [r3, #0]
 800d8de:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 800d8e0:	e030      	b.n	800d944 <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 800d8e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d8e4:	695a      	ldr	r2, [r3, #20]
 800d8e6:	687b      	ldr	r3, [r7, #4]
 800d8e8:	68db      	ldr	r3, [r3, #12]
 800d8ea:	429a      	cmp	r2, r3
 800d8ec:	d10c      	bne.n	800d908 <ip_reass_remove_oldest_datagram+0x4c>
 800d8ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d8f0:	699a      	ldr	r2, [r3, #24]
 800d8f2:	687b      	ldr	r3, [r7, #4]
 800d8f4:	691b      	ldr	r3, [r3, #16]
 800d8f6:	429a      	cmp	r2, r3
 800d8f8:	d106      	bne.n	800d908 <ip_reass_remove_oldest_datagram+0x4c>
 800d8fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d8fc:	899a      	ldrh	r2, [r3, #12]
 800d8fe:	687b      	ldr	r3, [r7, #4]
 800d900:	889b      	ldrh	r3, [r3, #4]
 800d902:	b29b      	uxth	r3, r3
 800d904:	429a      	cmp	r2, r3
 800d906:	d014      	beq.n	800d932 <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 800d908:	693b      	ldr	r3, [r7, #16]
 800d90a:	3301      	adds	r3, #1
 800d90c:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 800d90e:	6a3b      	ldr	r3, [r7, #32]
 800d910:	2b00      	cmp	r3, #0
 800d912:	d104      	bne.n	800d91e <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 800d914:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d916:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 800d918:	69fb      	ldr	r3, [r7, #28]
 800d91a:	61bb      	str	r3, [r7, #24]
 800d91c:	e009      	b.n	800d932 <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 800d91e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d920:	7fda      	ldrb	r2, [r3, #31]
 800d922:	6a3b      	ldr	r3, [r7, #32]
 800d924:	7fdb      	ldrb	r3, [r3, #31]
 800d926:	429a      	cmp	r2, r3
 800d928:	d803      	bhi.n	800d932 <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 800d92a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d92c:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 800d92e:	69fb      	ldr	r3, [r7, #28]
 800d930:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 800d932:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d934:	681b      	ldr	r3, [r3, #0]
 800d936:	2b00      	cmp	r3, #0
 800d938:	d001      	beq.n	800d93e <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 800d93a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d93c:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 800d93e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d940:	681b      	ldr	r3, [r3, #0]
 800d942:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 800d944:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d946:	2b00      	cmp	r3, #0
 800d948:	d1cb      	bne.n	800d8e2 <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 800d94a:	6a3b      	ldr	r3, [r7, #32]
 800d94c:	2b00      	cmp	r3, #0
 800d94e:	d008      	beq.n	800d962 <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 800d950:	69b9      	ldr	r1, [r7, #24]
 800d952:	6a38      	ldr	r0, [r7, #32]
 800d954:	f7ff ff0e 	bl	800d774 <ip_reass_free_complete_datagram>
 800d958:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 800d95a:	697a      	ldr	r2, [r7, #20]
 800d95c:	68fb      	ldr	r3, [r7, #12]
 800d95e:	4413      	add	r3, r2
 800d960:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 800d962:	697a      	ldr	r2, [r7, #20]
 800d964:	683b      	ldr	r3, [r7, #0]
 800d966:	429a      	cmp	r2, r3
 800d968:	da02      	bge.n	800d970 <ip_reass_remove_oldest_datagram+0xb4>
 800d96a:	693b      	ldr	r3, [r7, #16]
 800d96c:	2b01      	cmp	r3, #1
 800d96e:	dcac      	bgt.n	800d8ca <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 800d970:	697b      	ldr	r3, [r7, #20]
}
 800d972:	4618      	mov	r0, r3
 800d974:	3728      	adds	r7, #40	; 0x28
 800d976:	46bd      	mov	sp, r7
 800d978:	bd80      	pop	{r7, pc}
 800d97a:	bf00      	nop
 800d97c:	20008440 	.word	0x20008440

0800d980 <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 800d980:	b580      	push	{r7, lr}
 800d982:	b084      	sub	sp, #16
 800d984:	af00      	add	r7, sp, #0
 800d986:	6078      	str	r0, [r7, #4]
 800d988:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 800d98a:	2004      	movs	r0, #4
 800d98c:	f7f7 f94e 	bl	8004c2c <memp_malloc>
 800d990:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 800d992:	68fb      	ldr	r3, [r7, #12]
 800d994:	2b00      	cmp	r3, #0
 800d996:	d110      	bne.n	800d9ba <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 800d998:	6839      	ldr	r1, [r7, #0]
 800d99a:	6878      	ldr	r0, [r7, #4]
 800d99c:	f7ff ff8e 	bl	800d8bc <ip_reass_remove_oldest_datagram>
 800d9a0:	4602      	mov	r2, r0
 800d9a2:	683b      	ldr	r3, [r7, #0]
 800d9a4:	4293      	cmp	r3, r2
 800d9a6:	dc03      	bgt.n	800d9b0 <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 800d9a8:	2004      	movs	r0, #4
 800d9aa:	f7f7 f93f 	bl	8004c2c <memp_malloc>
 800d9ae:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 800d9b0:	68fb      	ldr	r3, [r7, #12]
 800d9b2:	2b00      	cmp	r3, #0
 800d9b4:	d101      	bne.n	800d9ba <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 800d9b6:	2300      	movs	r3, #0
 800d9b8:	e016      	b.n	800d9e8 <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 800d9ba:	2220      	movs	r2, #32
 800d9bc:	2100      	movs	r1, #0
 800d9be:	68f8      	ldr	r0, [r7, #12]
 800d9c0:	f001 f83e 	bl	800ea40 <memset>
  ipr->timer = IP_REASS_MAXAGE;
 800d9c4:	68fb      	ldr	r3, [r7, #12]
 800d9c6:	220f      	movs	r2, #15
 800d9c8:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 800d9ca:	4b09      	ldr	r3, [pc, #36]	; (800d9f0 <ip_reass_enqueue_new_datagram+0x70>)
 800d9cc:	681a      	ldr	r2, [r3, #0]
 800d9ce:	68fb      	ldr	r3, [r7, #12]
 800d9d0:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 800d9d2:	4a07      	ldr	r2, [pc, #28]	; (800d9f0 <ip_reass_enqueue_new_datagram+0x70>)
 800d9d4:	68fb      	ldr	r3, [r7, #12]
 800d9d6:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 800d9d8:	68fb      	ldr	r3, [r7, #12]
 800d9da:	3308      	adds	r3, #8
 800d9dc:	2214      	movs	r2, #20
 800d9de:	6879      	ldr	r1, [r7, #4]
 800d9e0:	4618      	mov	r0, r3
 800d9e2:	f001 f8a1 	bl	800eb28 <memcpy>
  return ipr;
 800d9e6:	68fb      	ldr	r3, [r7, #12]
}
 800d9e8:	4618      	mov	r0, r3
 800d9ea:	3710      	adds	r7, #16
 800d9ec:	46bd      	mov	sp, r7
 800d9ee:	bd80      	pop	{r7, pc}
 800d9f0:	20008440 	.word	0x20008440

0800d9f4 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 800d9f4:	b580      	push	{r7, lr}
 800d9f6:	b082      	sub	sp, #8
 800d9f8:	af00      	add	r7, sp, #0
 800d9fa:	6078      	str	r0, [r7, #4]
 800d9fc:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 800d9fe:	4b10      	ldr	r3, [pc, #64]	; (800da40 <ip_reass_dequeue_datagram+0x4c>)
 800da00:	681b      	ldr	r3, [r3, #0]
 800da02:	687a      	ldr	r2, [r7, #4]
 800da04:	429a      	cmp	r2, r3
 800da06:	d104      	bne.n	800da12 <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 800da08:	687b      	ldr	r3, [r7, #4]
 800da0a:	681b      	ldr	r3, [r3, #0]
 800da0c:	4a0c      	ldr	r2, [pc, #48]	; (800da40 <ip_reass_dequeue_datagram+0x4c>)
 800da0e:	6013      	str	r3, [r2, #0]
 800da10:	e00d      	b.n	800da2e <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 800da12:	683b      	ldr	r3, [r7, #0]
 800da14:	2b00      	cmp	r3, #0
 800da16:	d106      	bne.n	800da26 <ip_reass_dequeue_datagram+0x32>
 800da18:	4b0a      	ldr	r3, [pc, #40]	; (800da44 <ip_reass_dequeue_datagram+0x50>)
 800da1a:	f240 1245 	movw	r2, #325	; 0x145
 800da1e:	490a      	ldr	r1, [pc, #40]	; (800da48 <ip_reass_dequeue_datagram+0x54>)
 800da20:	480a      	ldr	r0, [pc, #40]	; (800da4c <ip_reass_dequeue_datagram+0x58>)
 800da22:	f000 fe7d 	bl	800e720 <iprintf>
    prev->next = ipr->next;
 800da26:	687b      	ldr	r3, [r7, #4]
 800da28:	681a      	ldr	r2, [r3, #0]
 800da2a:	683b      	ldr	r3, [r7, #0]
 800da2c:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 800da2e:	6879      	ldr	r1, [r7, #4]
 800da30:	2004      	movs	r0, #4
 800da32:	f7f7 f96b 	bl	8004d0c <memp_free>
}
 800da36:	bf00      	nop
 800da38:	3708      	adds	r7, #8
 800da3a:	46bd      	mov	sp, r7
 800da3c:	bd80      	pop	{r7, pc}
 800da3e:	bf00      	nop
 800da40:	20008440 	.word	0x20008440
 800da44:	080120f4 	.word	0x080120f4
 800da48:	080121bc 	.word	0x080121bc
 800da4c:	0801213c 	.word	0x0801213c

0800da50 <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 800da50:	b580      	push	{r7, lr}
 800da52:	b08c      	sub	sp, #48	; 0x30
 800da54:	af00      	add	r7, sp, #0
 800da56:	60f8      	str	r0, [r7, #12]
 800da58:	60b9      	str	r1, [r7, #8]
 800da5a:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 800da5c:	2300      	movs	r3, #0
 800da5e:	62bb      	str	r3, [r7, #40]	; 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 800da60:	2301      	movs	r3, #1
 800da62:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 800da64:	68bb      	ldr	r3, [r7, #8]
 800da66:	685b      	ldr	r3, [r3, #4]
 800da68:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 800da6a:	69fb      	ldr	r3, [r7, #28]
 800da6c:	885b      	ldrh	r3, [r3, #2]
 800da6e:	b29b      	uxth	r3, r3
 800da70:	4618      	mov	r0, r3
 800da72:	f7f6 fc63 	bl	800433c <lwip_htons>
 800da76:	4603      	mov	r3, r0
 800da78:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 800da7a:	69fb      	ldr	r3, [r7, #28]
 800da7c:	781b      	ldrb	r3, [r3, #0]
 800da7e:	f003 030f 	and.w	r3, r3, #15
 800da82:	b2db      	uxtb	r3, r3
 800da84:	009b      	lsls	r3, r3, #2
 800da86:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 800da88:	7e7b      	ldrb	r3, [r7, #25]
 800da8a:	b29b      	uxth	r3, r3
 800da8c:	8b7a      	ldrh	r2, [r7, #26]
 800da8e:	429a      	cmp	r2, r3
 800da90:	d202      	bcs.n	800da98 <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 800da92:	f04f 33ff 	mov.w	r3, #4294967295
 800da96:	e135      	b.n	800dd04 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 800da98:	7e7b      	ldrb	r3, [r7, #25]
 800da9a:	b29b      	uxth	r3, r3
 800da9c:	8b7a      	ldrh	r2, [r7, #26]
 800da9e:	1ad3      	subs	r3, r2, r3
 800daa0:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 800daa2:	69fb      	ldr	r3, [r7, #28]
 800daa4:	88db      	ldrh	r3, [r3, #6]
 800daa6:	b29b      	uxth	r3, r3
 800daa8:	4618      	mov	r0, r3
 800daaa:	f7f6 fc47 	bl	800433c <lwip_htons>
 800daae:	4603      	mov	r3, r0
 800dab0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800dab4:	b29b      	uxth	r3, r3
 800dab6:	00db      	lsls	r3, r3, #3
 800dab8:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 800daba:	68bb      	ldr	r3, [r7, #8]
 800dabc:	685b      	ldr	r3, [r3, #4]
 800dabe:	62fb      	str	r3, [r7, #44]	; 0x2c
  iprh->next_pbuf = NULL;
 800dac0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dac2:	2200      	movs	r2, #0
 800dac4:	701a      	strb	r2, [r3, #0]
 800dac6:	2200      	movs	r2, #0
 800dac8:	705a      	strb	r2, [r3, #1]
 800daca:	2200      	movs	r2, #0
 800dacc:	709a      	strb	r2, [r3, #2]
 800dace:	2200      	movs	r2, #0
 800dad0:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 800dad2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dad4:	8afa      	ldrh	r2, [r7, #22]
 800dad6:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 800dad8:	8afa      	ldrh	r2, [r7, #22]
 800dada:	8b7b      	ldrh	r3, [r7, #26]
 800dadc:	4413      	add	r3, r2
 800dade:	b29a      	uxth	r2, r3
 800dae0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dae2:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 800dae4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dae6:	88db      	ldrh	r3, [r3, #6]
 800dae8:	b29b      	uxth	r3, r3
 800daea:	8afa      	ldrh	r2, [r7, #22]
 800daec:	429a      	cmp	r2, r3
 800daee:	d902      	bls.n	800daf6 <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 800daf0:	f04f 33ff 	mov.w	r3, #4294967295
 800daf4:	e106      	b.n	800dd04 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 800daf6:	68fb      	ldr	r3, [r7, #12]
 800daf8:	685b      	ldr	r3, [r3, #4]
 800dafa:	627b      	str	r3, [r7, #36]	; 0x24
 800dafc:	e068      	b.n	800dbd0 <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 800dafe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800db00:	685b      	ldr	r3, [r3, #4]
 800db02:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 800db04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800db06:	889b      	ldrh	r3, [r3, #4]
 800db08:	b29a      	uxth	r2, r3
 800db0a:	693b      	ldr	r3, [r7, #16]
 800db0c:	889b      	ldrh	r3, [r3, #4]
 800db0e:	b29b      	uxth	r3, r3
 800db10:	429a      	cmp	r2, r3
 800db12:	d235      	bcs.n	800db80 <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 800db14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800db16:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800db18:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 800db1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800db1c:	2b00      	cmp	r3, #0
 800db1e:	d020      	beq.n	800db62 <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 800db20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800db22:	889b      	ldrh	r3, [r3, #4]
 800db24:	b29a      	uxth	r2, r3
 800db26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800db28:	88db      	ldrh	r3, [r3, #6]
 800db2a:	b29b      	uxth	r3, r3
 800db2c:	429a      	cmp	r2, r3
 800db2e:	d307      	bcc.n	800db40 <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 800db30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800db32:	88db      	ldrh	r3, [r3, #6]
 800db34:	b29a      	uxth	r2, r3
 800db36:	693b      	ldr	r3, [r7, #16]
 800db38:	889b      	ldrh	r3, [r3, #4]
 800db3a:	b29b      	uxth	r3, r3
 800db3c:	429a      	cmp	r2, r3
 800db3e:	d902      	bls.n	800db46 <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 800db40:	f04f 33ff 	mov.w	r3, #4294967295
 800db44:	e0de      	b.n	800dd04 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 800db46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800db48:	68ba      	ldr	r2, [r7, #8]
 800db4a:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 800db4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800db4e:	88db      	ldrh	r3, [r3, #6]
 800db50:	b29a      	uxth	r2, r3
 800db52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800db54:	889b      	ldrh	r3, [r3, #4]
 800db56:	b29b      	uxth	r3, r3
 800db58:	429a      	cmp	r2, r3
 800db5a:	d03d      	beq.n	800dbd8 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 800db5c:	2300      	movs	r3, #0
 800db5e:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 800db60:	e03a      	b.n	800dbd8 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 800db62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800db64:	88db      	ldrh	r3, [r3, #6]
 800db66:	b29a      	uxth	r2, r3
 800db68:	693b      	ldr	r3, [r7, #16]
 800db6a:	889b      	ldrh	r3, [r3, #4]
 800db6c:	b29b      	uxth	r3, r3
 800db6e:	429a      	cmp	r2, r3
 800db70:	d902      	bls.n	800db78 <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 800db72:	f04f 33ff 	mov.w	r3, #4294967295
 800db76:	e0c5      	b.n	800dd04 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 800db78:	68fb      	ldr	r3, [r7, #12]
 800db7a:	68ba      	ldr	r2, [r7, #8]
 800db7c:	605a      	str	r2, [r3, #4]
      break;
 800db7e:	e02b      	b.n	800dbd8 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 800db80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800db82:	889b      	ldrh	r3, [r3, #4]
 800db84:	b29a      	uxth	r2, r3
 800db86:	693b      	ldr	r3, [r7, #16]
 800db88:	889b      	ldrh	r3, [r3, #4]
 800db8a:	b29b      	uxth	r3, r3
 800db8c:	429a      	cmp	r2, r3
 800db8e:	d102      	bne.n	800db96 <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 800db90:	f04f 33ff 	mov.w	r3, #4294967295
 800db94:	e0b6      	b.n	800dd04 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 800db96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800db98:	889b      	ldrh	r3, [r3, #4]
 800db9a:	b29a      	uxth	r2, r3
 800db9c:	693b      	ldr	r3, [r7, #16]
 800db9e:	88db      	ldrh	r3, [r3, #6]
 800dba0:	b29b      	uxth	r3, r3
 800dba2:	429a      	cmp	r2, r3
 800dba4:	d202      	bcs.n	800dbac <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 800dba6:	f04f 33ff 	mov.w	r3, #4294967295
 800dbaa:	e0ab      	b.n	800dd04 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 800dbac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dbae:	2b00      	cmp	r3, #0
 800dbb0:	d009      	beq.n	800dbc6 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 800dbb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dbb4:	88db      	ldrh	r3, [r3, #6]
 800dbb6:	b29a      	uxth	r2, r3
 800dbb8:	693b      	ldr	r3, [r7, #16]
 800dbba:	889b      	ldrh	r3, [r3, #4]
 800dbbc:	b29b      	uxth	r3, r3
 800dbbe:	429a      	cmp	r2, r3
 800dbc0:	d001      	beq.n	800dbc6 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 800dbc2:	2300      	movs	r3, #0
 800dbc4:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 800dbc6:	693b      	ldr	r3, [r7, #16]
 800dbc8:	681b      	ldr	r3, [r3, #0]
 800dbca:	627b      	str	r3, [r7, #36]	; 0x24
    iprh_prev = iprh_tmp;
 800dbcc:	693b      	ldr	r3, [r7, #16]
 800dbce:	62bb      	str	r3, [r7, #40]	; 0x28
  for (q = ipr->p; q != NULL;) {
 800dbd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dbd2:	2b00      	cmp	r3, #0
 800dbd4:	d193      	bne.n	800dafe <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 800dbd6:	e000      	b.n	800dbda <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 800dbd8:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 800dbda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dbdc:	2b00      	cmp	r3, #0
 800dbde:	d12d      	bne.n	800dc3c <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 800dbe0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dbe2:	2b00      	cmp	r3, #0
 800dbe4:	d01c      	beq.n	800dc20 <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 800dbe6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dbe8:	88db      	ldrh	r3, [r3, #6]
 800dbea:	b29a      	uxth	r2, r3
 800dbec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dbee:	889b      	ldrh	r3, [r3, #4]
 800dbf0:	b29b      	uxth	r3, r3
 800dbf2:	429a      	cmp	r2, r3
 800dbf4:	d906      	bls.n	800dc04 <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 800dbf6:	4b45      	ldr	r3, [pc, #276]	; (800dd0c <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800dbf8:	f44f 72db 	mov.w	r2, #438	; 0x1b6
 800dbfc:	4944      	ldr	r1, [pc, #272]	; (800dd10 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 800dbfe:	4845      	ldr	r0, [pc, #276]	; (800dd14 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800dc00:	f000 fd8e 	bl	800e720 <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 800dc04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dc06:	68ba      	ldr	r2, [r7, #8]
 800dc08:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 800dc0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dc0c:	88db      	ldrh	r3, [r3, #6]
 800dc0e:	b29a      	uxth	r2, r3
 800dc10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dc12:	889b      	ldrh	r3, [r3, #4]
 800dc14:	b29b      	uxth	r3, r3
 800dc16:	429a      	cmp	r2, r3
 800dc18:	d010      	beq.n	800dc3c <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 800dc1a:	2300      	movs	r3, #0
 800dc1c:	623b      	str	r3, [r7, #32]
 800dc1e:	e00d      	b.n	800dc3c <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 800dc20:	68fb      	ldr	r3, [r7, #12]
 800dc22:	685b      	ldr	r3, [r3, #4]
 800dc24:	2b00      	cmp	r3, #0
 800dc26:	d006      	beq.n	800dc36 <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 800dc28:	4b38      	ldr	r3, [pc, #224]	; (800dd0c <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800dc2a:	f44f 72df 	mov.w	r2, #446	; 0x1be
 800dc2e:	493a      	ldr	r1, [pc, #232]	; (800dd18 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 800dc30:	4838      	ldr	r0, [pc, #224]	; (800dd14 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800dc32:	f000 fd75 	bl	800e720 <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 800dc36:	68fb      	ldr	r3, [r7, #12]
 800dc38:	68ba      	ldr	r2, [r7, #8]
 800dc3a:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 800dc3c:	687b      	ldr	r3, [r7, #4]
 800dc3e:	2b00      	cmp	r3, #0
 800dc40:	d105      	bne.n	800dc4e <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 800dc42:	68fb      	ldr	r3, [r7, #12]
 800dc44:	7f9b      	ldrb	r3, [r3, #30]
 800dc46:	f003 0301 	and.w	r3, r3, #1
 800dc4a:	2b00      	cmp	r3, #0
 800dc4c:	d059      	beq.n	800dd02 <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 800dc4e:	6a3b      	ldr	r3, [r7, #32]
 800dc50:	2b00      	cmp	r3, #0
 800dc52:	d04f      	beq.n	800dcf4 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 800dc54:	68fb      	ldr	r3, [r7, #12]
 800dc56:	685b      	ldr	r3, [r3, #4]
 800dc58:	2b00      	cmp	r3, #0
 800dc5a:	d006      	beq.n	800dc6a <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 800dc5c:	68fb      	ldr	r3, [r7, #12]
 800dc5e:	685b      	ldr	r3, [r3, #4]
 800dc60:	685b      	ldr	r3, [r3, #4]
 800dc62:	889b      	ldrh	r3, [r3, #4]
 800dc64:	b29b      	uxth	r3, r3
 800dc66:	2b00      	cmp	r3, #0
 800dc68:	d002      	beq.n	800dc70 <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 800dc6a:	2300      	movs	r3, #0
 800dc6c:	623b      	str	r3, [r7, #32]
 800dc6e:	e041      	b.n	800dcf4 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 800dc70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dc72:	62bb      	str	r3, [r7, #40]	; 0x28
        q = iprh->next_pbuf;
 800dc74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dc76:	681b      	ldr	r3, [r3, #0]
 800dc78:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 800dc7a:	e012      	b.n	800dca2 <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 800dc7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dc7e:	685b      	ldr	r3, [r3, #4]
 800dc80:	62fb      	str	r3, [r7, #44]	; 0x2c
          if (iprh_prev->end != iprh->start) {
 800dc82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dc84:	88db      	ldrh	r3, [r3, #6]
 800dc86:	b29a      	uxth	r2, r3
 800dc88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dc8a:	889b      	ldrh	r3, [r3, #4]
 800dc8c:	b29b      	uxth	r3, r3
 800dc8e:	429a      	cmp	r2, r3
 800dc90:	d002      	beq.n	800dc98 <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 800dc92:	2300      	movs	r3, #0
 800dc94:	623b      	str	r3, [r7, #32]
            break;
 800dc96:	e007      	b.n	800dca8 <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 800dc98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dc9a:	62bb      	str	r3, [r7, #40]	; 0x28
          q = iprh->next_pbuf;
 800dc9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dc9e:	681b      	ldr	r3, [r3, #0]
 800dca0:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 800dca2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dca4:	2b00      	cmp	r3, #0
 800dca6:	d1e9      	bne.n	800dc7c <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 800dca8:	6a3b      	ldr	r3, [r7, #32]
 800dcaa:	2b00      	cmp	r3, #0
 800dcac:	d022      	beq.n	800dcf4 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 800dcae:	68fb      	ldr	r3, [r7, #12]
 800dcb0:	685b      	ldr	r3, [r3, #4]
 800dcb2:	2b00      	cmp	r3, #0
 800dcb4:	d106      	bne.n	800dcc4 <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 800dcb6:	4b15      	ldr	r3, [pc, #84]	; (800dd0c <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800dcb8:	f240 12df 	movw	r2, #479	; 0x1df
 800dcbc:	4917      	ldr	r1, [pc, #92]	; (800dd1c <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 800dcbe:	4815      	ldr	r0, [pc, #84]	; (800dd14 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800dcc0:	f000 fd2e 	bl	800e720 <iprintf>
          LWIP_ASSERT("sanity check",
 800dcc4:	68fb      	ldr	r3, [r7, #12]
 800dcc6:	685b      	ldr	r3, [r3, #4]
 800dcc8:	685b      	ldr	r3, [r3, #4]
 800dcca:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800dccc:	429a      	cmp	r2, r3
 800dcce:	d106      	bne.n	800dcde <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 800dcd0:	4b0e      	ldr	r3, [pc, #56]	; (800dd0c <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800dcd2:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800dcd6:	4911      	ldr	r1, [pc, #68]	; (800dd1c <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 800dcd8:	480e      	ldr	r0, [pc, #56]	; (800dd14 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800dcda:	f000 fd21 	bl	800e720 <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 800dcde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dce0:	681b      	ldr	r3, [r3, #0]
 800dce2:	2b00      	cmp	r3, #0
 800dce4:	d006      	beq.n	800dcf4 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 800dce6:	4b09      	ldr	r3, [pc, #36]	; (800dd0c <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800dce8:	f44f 72f1 	mov.w	r2, #482	; 0x1e2
 800dcec:	490c      	ldr	r1, [pc, #48]	; (800dd20 <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 800dcee:	4809      	ldr	r0, [pc, #36]	; (800dd14 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800dcf0:	f000 fd16 	bl	800e720 <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 800dcf4:	6a3b      	ldr	r3, [r7, #32]
 800dcf6:	2b00      	cmp	r3, #0
 800dcf8:	bf14      	ite	ne
 800dcfa:	2301      	movne	r3, #1
 800dcfc:	2300      	moveq	r3, #0
 800dcfe:	b2db      	uxtb	r3, r3
 800dd00:	e000      	b.n	800dd04 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 800dd02:	2300      	movs	r3, #0
}
 800dd04:	4618      	mov	r0, r3
 800dd06:	3730      	adds	r7, #48	; 0x30
 800dd08:	46bd      	mov	sp, r7
 800dd0a:	bd80      	pop	{r7, pc}
 800dd0c:	080120f4 	.word	0x080120f4
 800dd10:	080121d8 	.word	0x080121d8
 800dd14:	0801213c 	.word	0x0801213c
 800dd18:	080121f8 	.word	0x080121f8
 800dd1c:	08012230 	.word	0x08012230
 800dd20:	08012240 	.word	0x08012240

0800dd24 <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 800dd24:	b580      	push	{r7, lr}
 800dd26:	b08e      	sub	sp, #56	; 0x38
 800dd28:	af00      	add	r7, sp, #0
 800dd2a:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 800dd2c:	687b      	ldr	r3, [r7, #4]
 800dd2e:	685b      	ldr	r3, [r3, #4]
 800dd30:	62bb      	str	r3, [r7, #40]	; 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 800dd32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dd34:	781b      	ldrb	r3, [r3, #0]
 800dd36:	f003 030f 	and.w	r3, r3, #15
 800dd3a:	b2db      	uxtb	r3, r3
 800dd3c:	009b      	lsls	r3, r3, #2
 800dd3e:	b2db      	uxtb	r3, r3
 800dd40:	2b14      	cmp	r3, #20
 800dd42:	f040 8171 	bne.w	800e028 <ip4_reass+0x304>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 800dd46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dd48:	88db      	ldrh	r3, [r3, #6]
 800dd4a:	b29b      	uxth	r3, r3
 800dd4c:	4618      	mov	r0, r3
 800dd4e:	f7f6 faf5 	bl	800433c <lwip_htons>
 800dd52:	4603      	mov	r3, r0
 800dd54:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800dd58:	b29b      	uxth	r3, r3
 800dd5a:	00db      	lsls	r3, r3, #3
 800dd5c:	84fb      	strh	r3, [r7, #38]	; 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 800dd5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dd60:	885b      	ldrh	r3, [r3, #2]
 800dd62:	b29b      	uxth	r3, r3
 800dd64:	4618      	mov	r0, r3
 800dd66:	f7f6 fae9 	bl	800433c <lwip_htons>
 800dd6a:	4603      	mov	r3, r0
 800dd6c:	84bb      	strh	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 800dd6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dd70:	781b      	ldrb	r3, [r3, #0]
 800dd72:	f003 030f 	and.w	r3, r3, #15
 800dd76:	b2db      	uxtb	r3, r3
 800dd78:	009b      	lsls	r3, r3, #2
 800dd7a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (hlen > len) {
 800dd7e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800dd82:	b29b      	uxth	r3, r3
 800dd84:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800dd86:	429a      	cmp	r2, r3
 800dd88:	f0c0 8150 	bcc.w	800e02c <ip4_reass+0x308>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 800dd8c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800dd90:	b29b      	uxth	r3, r3
 800dd92:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800dd94:	1ad3      	subs	r3, r2, r3
 800dd96:	84bb      	strh	r3, [r7, #36]	; 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 800dd98:	6878      	ldr	r0, [r7, #4]
 800dd9a:	f7f7 feb5 	bl	8005b08 <pbuf_clen>
 800dd9e:	4603      	mov	r3, r0
 800dda0:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 800dda2:	4b8c      	ldr	r3, [pc, #560]	; (800dfd4 <ip4_reass+0x2b0>)
 800dda4:	881b      	ldrh	r3, [r3, #0]
 800dda6:	461a      	mov	r2, r3
 800dda8:	8c3b      	ldrh	r3, [r7, #32]
 800ddaa:	4413      	add	r3, r2
 800ddac:	2b0a      	cmp	r3, #10
 800ddae:	dd10      	ble.n	800ddd2 <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 800ddb0:	8c3b      	ldrh	r3, [r7, #32]
 800ddb2:	4619      	mov	r1, r3
 800ddb4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ddb6:	f7ff fd81 	bl	800d8bc <ip_reass_remove_oldest_datagram>
 800ddba:	4603      	mov	r3, r0
 800ddbc:	2b00      	cmp	r3, #0
 800ddbe:	f000 8137 	beq.w	800e030 <ip4_reass+0x30c>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 800ddc2:	4b84      	ldr	r3, [pc, #528]	; (800dfd4 <ip4_reass+0x2b0>)
 800ddc4:	881b      	ldrh	r3, [r3, #0]
 800ddc6:	461a      	mov	r2, r3
 800ddc8:	8c3b      	ldrh	r3, [r7, #32]
 800ddca:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 800ddcc:	2b0a      	cmp	r3, #10
 800ddce:	f300 812f 	bgt.w	800e030 <ip4_reass+0x30c>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 800ddd2:	4b81      	ldr	r3, [pc, #516]	; (800dfd8 <ip4_reass+0x2b4>)
 800ddd4:	681b      	ldr	r3, [r3, #0]
 800ddd6:	633b      	str	r3, [r7, #48]	; 0x30
 800ddd8:	e015      	b.n	800de06 <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 800ddda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dddc:	695a      	ldr	r2, [r3, #20]
 800ddde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dde0:	68db      	ldr	r3, [r3, #12]
 800dde2:	429a      	cmp	r2, r3
 800dde4:	d10c      	bne.n	800de00 <ip4_reass+0xdc>
 800dde6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dde8:	699a      	ldr	r2, [r3, #24]
 800ddea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ddec:	691b      	ldr	r3, [r3, #16]
 800ddee:	429a      	cmp	r2, r3
 800ddf0:	d106      	bne.n	800de00 <ip4_reass+0xdc>
 800ddf2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ddf4:	899a      	ldrh	r2, [r3, #12]
 800ddf6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ddf8:	889b      	ldrh	r3, [r3, #4]
 800ddfa:	b29b      	uxth	r3, r3
 800ddfc:	429a      	cmp	r2, r3
 800ddfe:	d006      	beq.n	800de0e <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 800de00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800de02:	681b      	ldr	r3, [r3, #0]
 800de04:	633b      	str	r3, [r7, #48]	; 0x30
 800de06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800de08:	2b00      	cmp	r3, #0
 800de0a:	d1e6      	bne.n	800ddda <ip4_reass+0xb6>
 800de0c:	e000      	b.n	800de10 <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 800de0e:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 800de10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800de12:	2b00      	cmp	r3, #0
 800de14:	d109      	bne.n	800de2a <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 800de16:	8c3b      	ldrh	r3, [r7, #32]
 800de18:	4619      	mov	r1, r3
 800de1a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800de1c:	f7ff fdb0 	bl	800d980 <ip_reass_enqueue_new_datagram>
 800de20:	6338      	str	r0, [r7, #48]	; 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 800de22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800de24:	2b00      	cmp	r3, #0
 800de26:	d11c      	bne.n	800de62 <ip4_reass+0x13e>
      goto nullreturn;
 800de28:	e105      	b.n	800e036 <ip4_reass+0x312>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 800de2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800de2c:	88db      	ldrh	r3, [r3, #6]
 800de2e:	b29b      	uxth	r3, r3
 800de30:	4618      	mov	r0, r3
 800de32:	f7f6 fa83 	bl	800433c <lwip_htons>
 800de36:	4603      	mov	r3, r0
 800de38:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800de3c:	2b00      	cmp	r3, #0
 800de3e:	d110      	bne.n	800de62 <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 800de40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800de42:	89db      	ldrh	r3, [r3, #14]
 800de44:	4618      	mov	r0, r3
 800de46:	f7f6 fa79 	bl	800433c <lwip_htons>
 800de4a:	4603      	mov	r3, r0
 800de4c:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 800de50:	2b00      	cmp	r3, #0
 800de52:	d006      	beq.n	800de62 <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 800de54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800de56:	3308      	adds	r3, #8
 800de58:	2214      	movs	r2, #20
 800de5a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800de5c:	4618      	mov	r0, r3
 800de5e:	f000 fe63 	bl	800eb28 <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 800de62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800de64:	88db      	ldrh	r3, [r3, #6]
 800de66:	b29b      	uxth	r3, r3
 800de68:	f003 0320 	and.w	r3, r3, #32
 800de6c:	2b00      	cmp	r3, #0
 800de6e:	bf0c      	ite	eq
 800de70:	2301      	moveq	r3, #1
 800de72:	2300      	movne	r3, #0
 800de74:	b2db      	uxtb	r3, r3
 800de76:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 800de78:	69fb      	ldr	r3, [r7, #28]
 800de7a:	2b00      	cmp	r3, #0
 800de7c:	d00e      	beq.n	800de9c <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 800de7e:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800de80:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800de82:	4413      	add	r3, r2
 800de84:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 800de86:	8b7a      	ldrh	r2, [r7, #26]
 800de88:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800de8a:	429a      	cmp	r2, r3
 800de8c:	f0c0 80a0 	bcc.w	800dfd0 <ip4_reass+0x2ac>
 800de90:	8b7b      	ldrh	r3, [r7, #26]
 800de92:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 800de96:	4293      	cmp	r3, r2
 800de98:	f200 809a 	bhi.w	800dfd0 <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 800de9c:	69fa      	ldr	r2, [r7, #28]
 800de9e:	6879      	ldr	r1, [r7, #4]
 800dea0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800dea2:	f7ff fdd5 	bl	800da50 <ip_reass_chain_frag_into_datagram_and_validate>
 800dea6:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 800dea8:	697b      	ldr	r3, [r7, #20]
 800deaa:	f1b3 3fff 	cmp.w	r3, #4294967295
 800deae:	f000 809b 	beq.w	800dfe8 <ip4_reass+0x2c4>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 800deb2:	4b48      	ldr	r3, [pc, #288]	; (800dfd4 <ip4_reass+0x2b0>)
 800deb4:	881a      	ldrh	r2, [r3, #0]
 800deb6:	8c3b      	ldrh	r3, [r7, #32]
 800deb8:	4413      	add	r3, r2
 800deba:	b29a      	uxth	r2, r3
 800debc:	4b45      	ldr	r3, [pc, #276]	; (800dfd4 <ip4_reass+0x2b0>)
 800debe:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 800dec0:	69fb      	ldr	r3, [r7, #28]
 800dec2:	2b00      	cmp	r3, #0
 800dec4:	d00d      	beq.n	800dee2 <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 800dec6:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800dec8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800deca:	4413      	add	r3, r2
 800decc:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 800dece:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ded0:	8a7a      	ldrh	r2, [r7, #18]
 800ded2:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 800ded4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ded6:	7f9b      	ldrb	r3, [r3, #30]
 800ded8:	f043 0301 	orr.w	r3, r3, #1
 800dedc:	b2da      	uxtb	r2, r3
 800dede:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dee0:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 800dee2:	697b      	ldr	r3, [r7, #20]
 800dee4:	2b01      	cmp	r3, #1
 800dee6:	d171      	bne.n	800dfcc <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 800dee8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800deea:	8b9b      	ldrh	r3, [r3, #28]
 800deec:	3314      	adds	r3, #20
 800deee:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 800def0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800def2:	685b      	ldr	r3, [r3, #4]
 800def4:	685b      	ldr	r3, [r3, #4]
 800def6:	681b      	ldr	r3, [r3, #0]
 800def8:	637b      	str	r3, [r7, #52]	; 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 800defa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800defc:	685b      	ldr	r3, [r3, #4]
 800defe:	685b      	ldr	r3, [r3, #4]
 800df00:	62bb      	str	r3, [r7, #40]	; 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 800df02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800df04:	3308      	adds	r3, #8
 800df06:	2214      	movs	r2, #20
 800df08:	4619      	mov	r1, r3
 800df0a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800df0c:	f000 fe0c 	bl	800eb28 <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 800df10:	8a3b      	ldrh	r3, [r7, #16]
 800df12:	4618      	mov	r0, r3
 800df14:	f7f6 fa12 	bl	800433c <lwip_htons>
 800df18:	4603      	mov	r3, r0
 800df1a:	461a      	mov	r2, r3
 800df1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800df1e:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 800df20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800df22:	2200      	movs	r2, #0
 800df24:	719a      	strb	r2, [r3, #6]
 800df26:	2200      	movs	r2, #0
 800df28:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 800df2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800df2c:	2200      	movs	r2, #0
 800df2e:	729a      	strb	r2, [r3, #10]
 800df30:	2200      	movs	r2, #0
 800df32:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 800df34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800df36:	685b      	ldr	r3, [r3, #4]
 800df38:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 800df3a:	e00d      	b.n	800df58 <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 800df3c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800df3e:	685b      	ldr	r3, [r3, #4]
 800df40:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 800df42:	2114      	movs	r1, #20
 800df44:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800df46:	f7f7 fcd1 	bl	80058ec <pbuf_remove_header>
      pbuf_cat(p, r);
 800df4a:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800df4c:	6878      	ldr	r0, [r7, #4]
 800df4e:	f7f7 fe15 	bl	8005b7c <pbuf_cat>
      r = iprh->next_pbuf;
 800df52:	68fb      	ldr	r3, [r7, #12]
 800df54:	681b      	ldr	r3, [r3, #0]
 800df56:	637b      	str	r3, [r7, #52]	; 0x34
    while (r != NULL) {
 800df58:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800df5a:	2b00      	cmp	r3, #0
 800df5c:	d1ee      	bne.n	800df3c <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 800df5e:	4b1e      	ldr	r3, [pc, #120]	; (800dfd8 <ip4_reass+0x2b4>)
 800df60:	681b      	ldr	r3, [r3, #0]
 800df62:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800df64:	429a      	cmp	r2, r3
 800df66:	d102      	bne.n	800df6e <ip4_reass+0x24a>
      ipr_prev = NULL;
 800df68:	2300      	movs	r3, #0
 800df6a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800df6c:	e010      	b.n	800df90 <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 800df6e:	4b1a      	ldr	r3, [pc, #104]	; (800dfd8 <ip4_reass+0x2b4>)
 800df70:	681b      	ldr	r3, [r3, #0]
 800df72:	62fb      	str	r3, [r7, #44]	; 0x2c
 800df74:	e007      	b.n	800df86 <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 800df76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800df78:	681b      	ldr	r3, [r3, #0]
 800df7a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800df7c:	429a      	cmp	r2, r3
 800df7e:	d006      	beq.n	800df8e <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 800df80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800df82:	681b      	ldr	r3, [r3, #0]
 800df84:	62fb      	str	r3, [r7, #44]	; 0x2c
 800df86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800df88:	2b00      	cmp	r3, #0
 800df8a:	d1f4      	bne.n	800df76 <ip4_reass+0x252>
 800df8c:	e000      	b.n	800df90 <ip4_reass+0x26c>
          break;
 800df8e:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 800df90:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800df92:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800df94:	f7ff fd2e 	bl	800d9f4 <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 800df98:	6878      	ldr	r0, [r7, #4]
 800df9a:	f7f7 fdb5 	bl	8005b08 <pbuf_clen>
 800df9e:	4603      	mov	r3, r0
 800dfa0:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 800dfa2:	4b0c      	ldr	r3, [pc, #48]	; (800dfd4 <ip4_reass+0x2b0>)
 800dfa4:	881b      	ldrh	r3, [r3, #0]
 800dfa6:	8c3a      	ldrh	r2, [r7, #32]
 800dfa8:	429a      	cmp	r2, r3
 800dfaa:	d906      	bls.n	800dfba <ip4_reass+0x296>
 800dfac:	4b0b      	ldr	r3, [pc, #44]	; (800dfdc <ip4_reass+0x2b8>)
 800dfae:	f240 229b 	movw	r2, #667	; 0x29b
 800dfb2:	490b      	ldr	r1, [pc, #44]	; (800dfe0 <ip4_reass+0x2bc>)
 800dfb4:	480b      	ldr	r0, [pc, #44]	; (800dfe4 <ip4_reass+0x2c0>)
 800dfb6:	f000 fbb3 	bl	800e720 <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 800dfba:	4b06      	ldr	r3, [pc, #24]	; (800dfd4 <ip4_reass+0x2b0>)
 800dfbc:	881a      	ldrh	r2, [r3, #0]
 800dfbe:	8c3b      	ldrh	r3, [r7, #32]
 800dfc0:	1ad3      	subs	r3, r2, r3
 800dfc2:	b29a      	uxth	r2, r3
 800dfc4:	4b03      	ldr	r3, [pc, #12]	; (800dfd4 <ip4_reass+0x2b0>)
 800dfc6:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 800dfc8:	687b      	ldr	r3, [r7, #4]
 800dfca:	e038      	b.n	800e03e <ip4_reass+0x31a>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 800dfcc:	2300      	movs	r3, #0
 800dfce:	e036      	b.n	800e03e <ip4_reass+0x31a>
      goto nullreturn_ipr;
 800dfd0:	bf00      	nop
 800dfd2:	e00a      	b.n	800dfea <ip4_reass+0x2c6>
 800dfd4:	20008444 	.word	0x20008444
 800dfd8:	20008440 	.word	0x20008440
 800dfdc:	080120f4 	.word	0x080120f4
 800dfe0:	08012264 	.word	0x08012264
 800dfe4:	0801213c 	.word	0x0801213c
    goto nullreturn_ipr;
 800dfe8:	bf00      	nop

nullreturn_ipr:
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 800dfea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dfec:	2b00      	cmp	r3, #0
 800dfee:	d106      	bne.n	800dffe <ip4_reass+0x2da>
 800dff0:	4b15      	ldr	r3, [pc, #84]	; (800e048 <ip4_reass+0x324>)
 800dff2:	f44f 722a 	mov.w	r2, #680	; 0x2a8
 800dff6:	4915      	ldr	r1, [pc, #84]	; (800e04c <ip4_reass+0x328>)
 800dff8:	4815      	ldr	r0, [pc, #84]	; (800e050 <ip4_reass+0x32c>)
 800dffa:	f000 fb91 	bl	800e720 <iprintf>
  if (ipr->p == NULL) {
 800dffe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e000:	685b      	ldr	r3, [r3, #4]
 800e002:	2b00      	cmp	r3, #0
 800e004:	d116      	bne.n	800e034 <ip4_reass+0x310>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 800e006:	4b13      	ldr	r3, [pc, #76]	; (800e054 <ip4_reass+0x330>)
 800e008:	681b      	ldr	r3, [r3, #0]
 800e00a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e00c:	429a      	cmp	r2, r3
 800e00e:	d006      	beq.n	800e01e <ip4_reass+0x2fa>
 800e010:	4b0d      	ldr	r3, [pc, #52]	; (800e048 <ip4_reass+0x324>)
 800e012:	f240 22ab 	movw	r2, #683	; 0x2ab
 800e016:	4910      	ldr	r1, [pc, #64]	; (800e058 <ip4_reass+0x334>)
 800e018:	480d      	ldr	r0, [pc, #52]	; (800e050 <ip4_reass+0x32c>)
 800e01a:	f000 fb81 	bl	800e720 <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 800e01e:	2100      	movs	r1, #0
 800e020:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800e022:	f7ff fce7 	bl	800d9f4 <ip_reass_dequeue_datagram>
 800e026:	e006      	b.n	800e036 <ip4_reass+0x312>
    goto nullreturn;
 800e028:	bf00      	nop
 800e02a:	e004      	b.n	800e036 <ip4_reass+0x312>
    goto nullreturn;
 800e02c:	bf00      	nop
 800e02e:	e002      	b.n	800e036 <ip4_reass+0x312>
      goto nullreturn;
 800e030:	bf00      	nop
 800e032:	e000      	b.n	800e036 <ip4_reass+0x312>
  }

nullreturn:
 800e034:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 800e036:	6878      	ldr	r0, [r7, #4]
 800e038:	f7f7 fcde 	bl	80059f8 <pbuf_free>
  return NULL;
 800e03c:	2300      	movs	r3, #0
}
 800e03e:	4618      	mov	r0, r3
 800e040:	3738      	adds	r7, #56	; 0x38
 800e042:	46bd      	mov	sp, r7
 800e044:	bd80      	pop	{r7, pc}
 800e046:	bf00      	nop
 800e048:	080120f4 	.word	0x080120f4
 800e04c:	08012280 	.word	0x08012280
 800e050:	0801213c 	.word	0x0801213c
 800e054:	20008440 	.word	0x20008440
 800e058:	0801228c 	.word	0x0801228c

0800e05c <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 800e05c:	b580      	push	{r7, lr}
 800e05e:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 800e060:	2005      	movs	r0, #5
 800e062:	f7f6 fde3 	bl	8004c2c <memp_malloc>
 800e066:	4603      	mov	r3, r0
}
 800e068:	4618      	mov	r0, r3
 800e06a:	bd80      	pop	{r7, pc}

0800e06c <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 800e06c:	b580      	push	{r7, lr}
 800e06e:	b082      	sub	sp, #8
 800e070:	af00      	add	r7, sp, #0
 800e072:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 800e074:	687b      	ldr	r3, [r7, #4]
 800e076:	2b00      	cmp	r3, #0
 800e078:	d106      	bne.n	800e088 <ip_frag_free_pbuf_custom_ref+0x1c>
 800e07a:	4b07      	ldr	r3, [pc, #28]	; (800e098 <ip_frag_free_pbuf_custom_ref+0x2c>)
 800e07c:	f44f 7231 	mov.w	r2, #708	; 0x2c4
 800e080:	4906      	ldr	r1, [pc, #24]	; (800e09c <ip_frag_free_pbuf_custom_ref+0x30>)
 800e082:	4807      	ldr	r0, [pc, #28]	; (800e0a0 <ip_frag_free_pbuf_custom_ref+0x34>)
 800e084:	f000 fb4c 	bl	800e720 <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 800e088:	6879      	ldr	r1, [r7, #4]
 800e08a:	2005      	movs	r0, #5
 800e08c:	f7f6 fe3e 	bl	8004d0c <memp_free>
}
 800e090:	bf00      	nop
 800e092:	3708      	adds	r7, #8
 800e094:	46bd      	mov	sp, r7
 800e096:	bd80      	pop	{r7, pc}
 800e098:	080120f4 	.word	0x080120f4
 800e09c:	080122ac 	.word	0x080122ac
 800e0a0:	0801213c 	.word	0x0801213c

0800e0a4 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 800e0a4:	b580      	push	{r7, lr}
 800e0a6:	b084      	sub	sp, #16
 800e0a8:	af00      	add	r7, sp, #0
 800e0aa:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 800e0ac:	687b      	ldr	r3, [r7, #4]
 800e0ae:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 800e0b0:	68fb      	ldr	r3, [r7, #12]
 800e0b2:	2b00      	cmp	r3, #0
 800e0b4:	d106      	bne.n	800e0c4 <ipfrag_free_pbuf_custom+0x20>
 800e0b6:	4b11      	ldr	r3, [pc, #68]	; (800e0fc <ipfrag_free_pbuf_custom+0x58>)
 800e0b8:	f240 22ce 	movw	r2, #718	; 0x2ce
 800e0bc:	4910      	ldr	r1, [pc, #64]	; (800e100 <ipfrag_free_pbuf_custom+0x5c>)
 800e0be:	4811      	ldr	r0, [pc, #68]	; (800e104 <ipfrag_free_pbuf_custom+0x60>)
 800e0c0:	f000 fb2e 	bl	800e720 <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 800e0c4:	68fa      	ldr	r2, [r7, #12]
 800e0c6:	687b      	ldr	r3, [r7, #4]
 800e0c8:	429a      	cmp	r2, r3
 800e0ca:	d006      	beq.n	800e0da <ipfrag_free_pbuf_custom+0x36>
 800e0cc:	4b0b      	ldr	r3, [pc, #44]	; (800e0fc <ipfrag_free_pbuf_custom+0x58>)
 800e0ce:	f240 22cf 	movw	r2, #719	; 0x2cf
 800e0d2:	490d      	ldr	r1, [pc, #52]	; (800e108 <ipfrag_free_pbuf_custom+0x64>)
 800e0d4:	480b      	ldr	r0, [pc, #44]	; (800e104 <ipfrag_free_pbuf_custom+0x60>)
 800e0d6:	f000 fb23 	bl	800e720 <iprintf>
  if (pcr->original != NULL) {
 800e0da:	68fb      	ldr	r3, [r7, #12]
 800e0dc:	695b      	ldr	r3, [r3, #20]
 800e0de:	2b00      	cmp	r3, #0
 800e0e0:	d004      	beq.n	800e0ec <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 800e0e2:	68fb      	ldr	r3, [r7, #12]
 800e0e4:	695b      	ldr	r3, [r3, #20]
 800e0e6:	4618      	mov	r0, r3
 800e0e8:	f7f7 fc86 	bl	80059f8 <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 800e0ec:	68f8      	ldr	r0, [r7, #12]
 800e0ee:	f7ff ffbd 	bl	800e06c <ip_frag_free_pbuf_custom_ref>
}
 800e0f2:	bf00      	nop
 800e0f4:	3710      	adds	r7, #16
 800e0f6:	46bd      	mov	sp, r7
 800e0f8:	bd80      	pop	{r7, pc}
 800e0fa:	bf00      	nop
 800e0fc:	080120f4 	.word	0x080120f4
 800e100:	080122b8 	.word	0x080122b8
 800e104:	0801213c 	.word	0x0801213c
 800e108:	080122c4 	.word	0x080122c4

0800e10c <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 800e10c:	b580      	push	{r7, lr}
 800e10e:	b094      	sub	sp, #80	; 0x50
 800e110:	af02      	add	r7, sp, #8
 800e112:	60f8      	str	r0, [r7, #12]
 800e114:	60b9      	str	r1, [r7, #8]
 800e116:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 800e118:	2300      	movs	r3, #0
 800e11a:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 800e11e:	68bb      	ldr	r3, [r7, #8]
 800e120:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800e122:	3b14      	subs	r3, #20
 800e124:	2b00      	cmp	r3, #0
 800e126:	da00      	bge.n	800e12a <ip4_frag+0x1e>
 800e128:	3307      	adds	r3, #7
 800e12a:	10db      	asrs	r3, r3, #3
 800e12c:	877b      	strh	r3, [r7, #58]	; 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 800e12e:	2314      	movs	r3, #20
 800e130:	87fb      	strh	r3, [r7, #62]	; 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 800e132:	68fb      	ldr	r3, [r7, #12]
 800e134:	685b      	ldr	r3, [r3, #4]
 800e136:	637b      	str	r3, [r7, #52]	; 0x34
  iphdr = original_iphdr;
 800e138:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e13a:	633b      	str	r3, [r7, #48]	; 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 800e13c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e13e:	781b      	ldrb	r3, [r3, #0]
 800e140:	f003 030f 	and.w	r3, r3, #15
 800e144:	b2db      	uxtb	r3, r3
 800e146:	009b      	lsls	r3, r3, #2
 800e148:	b2db      	uxtb	r3, r3
 800e14a:	2b14      	cmp	r3, #20
 800e14c:	d002      	beq.n	800e154 <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 800e14e:	f06f 0305 	mvn.w	r3, #5
 800e152:	e110      	b.n	800e376 <ip4_frag+0x26a>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 800e154:	68fb      	ldr	r3, [r7, #12]
 800e156:	895b      	ldrh	r3, [r3, #10]
 800e158:	2b13      	cmp	r3, #19
 800e15a:	d809      	bhi.n	800e170 <ip4_frag+0x64>
 800e15c:	4b88      	ldr	r3, [pc, #544]	; (800e380 <ip4_frag+0x274>)
 800e15e:	f44f 723f 	mov.w	r2, #764	; 0x2fc
 800e162:	4988      	ldr	r1, [pc, #544]	; (800e384 <ip4_frag+0x278>)
 800e164:	4888      	ldr	r0, [pc, #544]	; (800e388 <ip4_frag+0x27c>)
 800e166:	f000 fadb 	bl	800e720 <iprintf>
 800e16a:	f06f 0305 	mvn.w	r3, #5
 800e16e:	e102      	b.n	800e376 <ip4_frag+0x26a>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 800e170:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e172:	88db      	ldrh	r3, [r3, #6]
 800e174:	b29b      	uxth	r3, r3
 800e176:	4618      	mov	r0, r3
 800e178:	f7f6 f8e0 	bl	800433c <lwip_htons>
 800e17c:	4603      	mov	r3, r0
 800e17e:	87bb      	strh	r3, [r7, #60]	; 0x3c
  ofo = tmp & IP_OFFMASK;
 800e180:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800e182:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800e186:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 800e18a:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800e18c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800e190:	62fb      	str	r3, [r7, #44]	; 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 800e192:	68fb      	ldr	r3, [r7, #12]
 800e194:	891b      	ldrh	r3, [r3, #8]
 800e196:	3b14      	subs	r3, #20
 800e198:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

  while (left) {
 800e19c:	e0e1      	b.n	800e362 <ip4_frag+0x256>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 800e19e:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800e1a0:	00db      	lsls	r3, r3, #3
 800e1a2:	b29b      	uxth	r3, r3
 800e1a4:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800e1a8:	4293      	cmp	r3, r2
 800e1aa:	bf28      	it	cs
 800e1ac:	4613      	movcs	r3, r2
 800e1ae:	857b      	strh	r3, [r7, #42]	; 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 800e1b0:	f44f 7220 	mov.w	r2, #640	; 0x280
 800e1b4:	2114      	movs	r1, #20
 800e1b6:	200e      	movs	r0, #14
 800e1b8:	f7f7 f93a 	bl	8005430 <pbuf_alloc>
 800e1bc:	6278      	str	r0, [r7, #36]	; 0x24
    if (rambuf == NULL) {
 800e1be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e1c0:	2b00      	cmp	r3, #0
 800e1c2:	f000 80d5 	beq.w	800e370 <ip4_frag+0x264>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 800e1c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e1c8:	895b      	ldrh	r3, [r3, #10]
 800e1ca:	2b13      	cmp	r3, #19
 800e1cc:	d806      	bhi.n	800e1dc <ip4_frag+0xd0>
 800e1ce:	4b6c      	ldr	r3, [pc, #432]	; (800e380 <ip4_frag+0x274>)
 800e1d0:	f44f 7249 	mov.w	r2, #804	; 0x324
 800e1d4:	496d      	ldr	r1, [pc, #436]	; (800e38c <ip4_frag+0x280>)
 800e1d6:	486c      	ldr	r0, [pc, #432]	; (800e388 <ip4_frag+0x27c>)
 800e1d8:	f000 faa2 	bl	800e720 <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 800e1dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e1de:	685b      	ldr	r3, [r3, #4]
 800e1e0:	2214      	movs	r2, #20
 800e1e2:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800e1e4:	4618      	mov	r0, r3
 800e1e6:	f000 fc9f 	bl	800eb28 <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 800e1ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e1ec:	685b      	ldr	r3, [r3, #4]
 800e1ee:	633b      	str	r3, [r7, #48]	; 0x30

    left_to_copy = fragsize;
 800e1f0:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800e1f2:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
    while (left_to_copy) {
 800e1f6:	e064      	b.n	800e2c2 <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 800e1f8:	68fb      	ldr	r3, [r7, #12]
 800e1fa:	895a      	ldrh	r2, [r3, #10]
 800e1fc:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800e1fe:	1ad3      	subs	r3, r2, r3
 800e200:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 800e202:	68fb      	ldr	r3, [r7, #12]
 800e204:	895b      	ldrh	r3, [r3, #10]
 800e206:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 800e208:	429a      	cmp	r2, r3
 800e20a:	d906      	bls.n	800e21a <ip4_frag+0x10e>
 800e20c:	4b5c      	ldr	r3, [pc, #368]	; (800e380 <ip4_frag+0x274>)
 800e20e:	f240 322d 	movw	r2, #813	; 0x32d
 800e212:	495f      	ldr	r1, [pc, #380]	; (800e390 <ip4_frag+0x284>)
 800e214:	485c      	ldr	r0, [pc, #368]	; (800e388 <ip4_frag+0x27c>)
 800e216:	f000 fa83 	bl	800e720 <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 800e21a:	8bfa      	ldrh	r2, [r7, #30]
 800e21c:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800e220:	4293      	cmp	r3, r2
 800e222:	bf28      	it	cs
 800e224:	4613      	movcs	r3, r2
 800e226:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 800e22a:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800e22e:	2b00      	cmp	r3, #0
 800e230:	d105      	bne.n	800e23e <ip4_frag+0x132>
        poff = 0;
 800e232:	2300      	movs	r3, #0
 800e234:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 800e236:	68fb      	ldr	r3, [r7, #12]
 800e238:	681b      	ldr	r3, [r3, #0]
 800e23a:	60fb      	str	r3, [r7, #12]
        continue;
 800e23c:	e041      	b.n	800e2c2 <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 800e23e:	f7ff ff0d 	bl	800e05c <ip_frag_alloc_pbuf_custom_ref>
 800e242:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 800e244:	69bb      	ldr	r3, [r7, #24]
 800e246:	2b00      	cmp	r3, #0
 800e248:	d103      	bne.n	800e252 <ip4_frag+0x146>
        pbuf_free(rambuf);
 800e24a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800e24c:	f7f7 fbd4 	bl	80059f8 <pbuf_free>
        goto memerr;
 800e250:	e08f      	b.n	800e372 <ip4_frag+0x266>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 800e252:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 800e254:	68fb      	ldr	r3, [r7, #12]
 800e256:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 800e258:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800e25a:	4413      	add	r3, r2
 800e25c:	f8b7 1046 	ldrh.w	r1, [r7, #70]	; 0x46
 800e260:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 800e264:	9201      	str	r2, [sp, #4]
 800e266:	9300      	str	r3, [sp, #0]
 800e268:	4603      	mov	r3, r0
 800e26a:	2241      	movs	r2, #65	; 0x41
 800e26c:	2000      	movs	r0, #0
 800e26e:	f7f7 fa09 	bl	8005684 <pbuf_alloced_custom>
 800e272:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 800e274:	697b      	ldr	r3, [r7, #20]
 800e276:	2b00      	cmp	r3, #0
 800e278:	d106      	bne.n	800e288 <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 800e27a:	69b8      	ldr	r0, [r7, #24]
 800e27c:	f7ff fef6 	bl	800e06c <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 800e280:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800e282:	f7f7 fbb9 	bl	80059f8 <pbuf_free>
        goto memerr;
 800e286:	e074      	b.n	800e372 <ip4_frag+0x266>
      }
      pbuf_ref(p);
 800e288:	68f8      	ldr	r0, [r7, #12]
 800e28a:	f7f7 fc55 	bl	8005b38 <pbuf_ref>
      pcr->original = p;
 800e28e:	69bb      	ldr	r3, [r7, #24]
 800e290:	68fa      	ldr	r2, [r7, #12]
 800e292:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 800e294:	69bb      	ldr	r3, [r7, #24]
 800e296:	4a3f      	ldr	r2, [pc, #252]	; (800e394 <ip4_frag+0x288>)
 800e298:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 800e29a:	6979      	ldr	r1, [r7, #20]
 800e29c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800e29e:	f7f7 fc6d 	bl	8005b7c <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 800e2a2:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 800e2a6:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800e2aa:	1ad3      	subs	r3, r2, r3
 800e2ac:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
      if (left_to_copy) {
 800e2b0:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800e2b4:	2b00      	cmp	r3, #0
 800e2b6:	d004      	beq.n	800e2c2 <ip4_frag+0x1b6>
        poff = 0;
 800e2b8:	2300      	movs	r3, #0
 800e2ba:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 800e2bc:	68fb      	ldr	r3, [r7, #12]
 800e2be:	681b      	ldr	r3, [r3, #0]
 800e2c0:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 800e2c2:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800e2c6:	2b00      	cmp	r3, #0
 800e2c8:	d196      	bne.n	800e1f8 <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 800e2ca:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 800e2cc:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800e2d0:	4413      	add	r3, r2
 800e2d2:	87fb      	strh	r3, [r7, #62]	; 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 800e2d4:	68bb      	ldr	r3, [r7, #8]
 800e2d6:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800e2d8:	f1a3 0213 	sub.w	r2, r3, #19
 800e2dc:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800e2e0:	429a      	cmp	r2, r3
 800e2e2:	bfcc      	ite	gt
 800e2e4:	2301      	movgt	r3, #1
 800e2e6:	2300      	movle	r3, #0
 800e2e8:	b2db      	uxtb	r3, r3
 800e2ea:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 800e2ec:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800e2f0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800e2f4:	87bb      	strh	r3, [r7, #60]	; 0x3c
    if (!last || mf_set) {
 800e2f6:	6a3b      	ldr	r3, [r7, #32]
 800e2f8:	2b00      	cmp	r3, #0
 800e2fa:	d002      	beq.n	800e302 <ip4_frag+0x1f6>
 800e2fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e2fe:	2b00      	cmp	r3, #0
 800e300:	d003      	beq.n	800e30a <ip4_frag+0x1fe>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 800e302:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800e304:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800e308:	87bb      	strh	r3, [r7, #60]	; 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 800e30a:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800e30c:	4618      	mov	r0, r3
 800e30e:	f7f6 f815 	bl	800433c <lwip_htons>
 800e312:	4603      	mov	r3, r0
 800e314:	461a      	mov	r2, r3
 800e316:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e318:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 800e31a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800e31c:	3314      	adds	r3, #20
 800e31e:	b29b      	uxth	r3, r3
 800e320:	4618      	mov	r0, r3
 800e322:	f7f6 f80b 	bl	800433c <lwip_htons>
 800e326:	4603      	mov	r3, r0
 800e328:	461a      	mov	r2, r3
 800e32a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e32c:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 800e32e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e330:	2200      	movs	r2, #0
 800e332:	729a      	strb	r2, [r3, #10]
 800e334:	2200      	movs	r2, #0
 800e336:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 800e338:	68bb      	ldr	r3, [r7, #8]
 800e33a:	695b      	ldr	r3, [r3, #20]
 800e33c:	687a      	ldr	r2, [r7, #4]
 800e33e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800e340:	68b8      	ldr	r0, [r7, #8]
 800e342:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 800e344:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800e346:	f7f7 fb57 	bl	80059f8 <pbuf_free>
    left = (u16_t)(left - fragsize);
 800e34a:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800e34e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800e350:	1ad3      	subs	r3, r2, r3
 800e352:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
    ofo = (u16_t)(ofo + nfb);
 800e356:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 800e35a:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800e35c:	4413      	add	r3, r2
 800e35e:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  while (left) {
 800e362:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800e366:	2b00      	cmp	r3, #0
 800e368:	f47f af19 	bne.w	800e19e <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 800e36c:	2300      	movs	r3, #0
 800e36e:	e002      	b.n	800e376 <ip4_frag+0x26a>
      goto memerr;
 800e370:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 800e372:	f04f 33ff 	mov.w	r3, #4294967295
}
 800e376:	4618      	mov	r0, r3
 800e378:	3748      	adds	r7, #72	; 0x48
 800e37a:	46bd      	mov	sp, r7
 800e37c:	bd80      	pop	{r7, pc}
 800e37e:	bf00      	nop
 800e380:	080120f4 	.word	0x080120f4
 800e384:	080122d0 	.word	0x080122d0
 800e388:	0801213c 	.word	0x0801213c
 800e38c:	080122ec 	.word	0x080122ec
 800e390:	0801230c 	.word	0x0801230c
 800e394:	0800e0a5 	.word	0x0800e0a5

0800e398 <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 800e398:	b580      	push	{r7, lr}
 800e39a:	b086      	sub	sp, #24
 800e39c:	af00      	add	r7, sp, #0
 800e39e:	6078      	str	r0, [r7, #4]
 800e3a0:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 800e3a2:	230e      	movs	r3, #14
 800e3a4:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 800e3a6:	687b      	ldr	r3, [r7, #4]
 800e3a8:	895b      	ldrh	r3, [r3, #10]
 800e3aa:	2b0e      	cmp	r3, #14
 800e3ac:	d96e      	bls.n	800e48c <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 800e3ae:	687b      	ldr	r3, [r7, #4]
 800e3b0:	7bdb      	ldrb	r3, [r3, #15]
 800e3b2:	2b00      	cmp	r3, #0
 800e3b4:	d106      	bne.n	800e3c4 <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 800e3b6:	683b      	ldr	r3, [r7, #0]
 800e3b8:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800e3bc:	3301      	adds	r3, #1
 800e3be:	b2da      	uxtb	r2, r3
 800e3c0:	687b      	ldr	r3, [r7, #4]
 800e3c2:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 800e3c4:	687b      	ldr	r3, [r7, #4]
 800e3c6:	685b      	ldr	r3, [r3, #4]
 800e3c8:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 800e3ca:	693b      	ldr	r3, [r7, #16]
 800e3cc:	7b1a      	ldrb	r2, [r3, #12]
 800e3ce:	7b5b      	ldrb	r3, [r3, #13]
 800e3d0:	021b      	lsls	r3, r3, #8
 800e3d2:	4313      	orrs	r3, r2
 800e3d4:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 800e3d6:	693b      	ldr	r3, [r7, #16]
 800e3d8:	781b      	ldrb	r3, [r3, #0]
 800e3da:	f003 0301 	and.w	r3, r3, #1
 800e3de:	2b00      	cmp	r3, #0
 800e3e0:	d023      	beq.n	800e42a <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 800e3e2:	693b      	ldr	r3, [r7, #16]
 800e3e4:	781b      	ldrb	r3, [r3, #0]
 800e3e6:	2b01      	cmp	r3, #1
 800e3e8:	d10f      	bne.n	800e40a <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 800e3ea:	693b      	ldr	r3, [r7, #16]
 800e3ec:	785b      	ldrb	r3, [r3, #1]
 800e3ee:	2b00      	cmp	r3, #0
 800e3f0:	d11b      	bne.n	800e42a <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 800e3f2:	693b      	ldr	r3, [r7, #16]
 800e3f4:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 800e3f6:	2b5e      	cmp	r3, #94	; 0x5e
 800e3f8:	d117      	bne.n	800e42a <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 800e3fa:	687b      	ldr	r3, [r7, #4]
 800e3fc:	7b5b      	ldrb	r3, [r3, #13]
 800e3fe:	f043 0310 	orr.w	r3, r3, #16
 800e402:	b2da      	uxtb	r2, r3
 800e404:	687b      	ldr	r3, [r7, #4]
 800e406:	735a      	strb	r2, [r3, #13]
 800e408:	e00f      	b.n	800e42a <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 800e40a:	693b      	ldr	r3, [r7, #16]
 800e40c:	2206      	movs	r2, #6
 800e40e:	4928      	ldr	r1, [pc, #160]	; (800e4b0 <ethernet_input+0x118>)
 800e410:	4618      	mov	r0, r3
 800e412:	f000 faeb 	bl	800e9ec <memcmp>
 800e416:	4603      	mov	r3, r0
 800e418:	2b00      	cmp	r3, #0
 800e41a:	d106      	bne.n	800e42a <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 800e41c:	687b      	ldr	r3, [r7, #4]
 800e41e:	7b5b      	ldrb	r3, [r3, #13]
 800e420:	f043 0308 	orr.w	r3, r3, #8
 800e424:	b2da      	uxtb	r2, r3
 800e426:	687b      	ldr	r3, [r7, #4]
 800e428:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 800e42a:	89fb      	ldrh	r3, [r7, #14]
 800e42c:	2b08      	cmp	r3, #8
 800e42e:	d003      	beq.n	800e438 <ethernet_input+0xa0>
 800e430:	f5b3 6fc1 	cmp.w	r3, #1544	; 0x608
 800e434:	d014      	beq.n	800e460 <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 800e436:	e032      	b.n	800e49e <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 800e438:	683b      	ldr	r3, [r7, #0]
 800e43a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800e43e:	f003 0308 	and.w	r3, r3, #8
 800e442:	2b00      	cmp	r3, #0
 800e444:	d024      	beq.n	800e490 <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 800e446:	8afb      	ldrh	r3, [r7, #22]
 800e448:	4619      	mov	r1, r3
 800e44a:	6878      	ldr	r0, [r7, #4]
 800e44c:	f7f7 fa4e 	bl	80058ec <pbuf_remove_header>
 800e450:	4603      	mov	r3, r0
 800e452:	2b00      	cmp	r3, #0
 800e454:	d11e      	bne.n	800e494 <ethernet_input+0xfc>
        ip4_input(p, netif);
 800e456:	6839      	ldr	r1, [r7, #0]
 800e458:	6878      	ldr	r0, [r7, #4]
 800e45a:	f7fe ff21 	bl	800d2a0 <ip4_input>
      break;
 800e45e:	e013      	b.n	800e488 <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 800e460:	683b      	ldr	r3, [r7, #0]
 800e462:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800e466:	f003 0308 	and.w	r3, r3, #8
 800e46a:	2b00      	cmp	r3, #0
 800e46c:	d014      	beq.n	800e498 <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 800e46e:	8afb      	ldrh	r3, [r7, #22]
 800e470:	4619      	mov	r1, r3
 800e472:	6878      	ldr	r0, [r7, #4]
 800e474:	f7f7 fa3a 	bl	80058ec <pbuf_remove_header>
 800e478:	4603      	mov	r3, r0
 800e47a:	2b00      	cmp	r3, #0
 800e47c:	d10e      	bne.n	800e49c <ethernet_input+0x104>
        etharp_input(p, netif);
 800e47e:	6839      	ldr	r1, [r7, #0]
 800e480:	6878      	ldr	r0, [r7, #4]
 800e482:	f7fe f8c1 	bl	800c608 <etharp_input>
      break;
 800e486:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 800e488:	2300      	movs	r3, #0
 800e48a:	e00c      	b.n	800e4a6 <ethernet_input+0x10e>
    goto free_and_return;
 800e48c:	bf00      	nop
 800e48e:	e006      	b.n	800e49e <ethernet_input+0x106>
        goto free_and_return;
 800e490:	bf00      	nop
 800e492:	e004      	b.n	800e49e <ethernet_input+0x106>
        goto free_and_return;
 800e494:	bf00      	nop
 800e496:	e002      	b.n	800e49e <ethernet_input+0x106>
        goto free_and_return;
 800e498:	bf00      	nop
 800e49a:	e000      	b.n	800e49e <ethernet_input+0x106>
        goto free_and_return;
 800e49c:	bf00      	nop

free_and_return:
  pbuf_free(p);
 800e49e:	6878      	ldr	r0, [r7, #4]
 800e4a0:	f7f7 faaa 	bl	80059f8 <pbuf_free>
  return ERR_OK;
 800e4a4:	2300      	movs	r3, #0
}
 800e4a6:	4618      	mov	r0, r3
 800e4a8:	3718      	adds	r7, #24
 800e4aa:	46bd      	mov	sp, r7
 800e4ac:	bd80      	pop	{r7, pc}
 800e4ae:	bf00      	nop
 800e4b0:	080124a8 	.word	0x080124a8

0800e4b4 <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 800e4b4:	b580      	push	{r7, lr}
 800e4b6:	b086      	sub	sp, #24
 800e4b8:	af00      	add	r7, sp, #0
 800e4ba:	60f8      	str	r0, [r7, #12]
 800e4bc:	60b9      	str	r1, [r7, #8]
 800e4be:	607a      	str	r2, [r7, #4]
 800e4c0:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 800e4c2:	8c3b      	ldrh	r3, [r7, #32]
 800e4c4:	4618      	mov	r0, r3
 800e4c6:	f7f5 ff39 	bl	800433c <lwip_htons>
 800e4ca:	4603      	mov	r3, r0
 800e4cc:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 800e4ce:	210e      	movs	r1, #14
 800e4d0:	68b8      	ldr	r0, [r7, #8]
 800e4d2:	f7f7 f9fb 	bl	80058cc <pbuf_add_header>
 800e4d6:	4603      	mov	r3, r0
 800e4d8:	2b00      	cmp	r3, #0
 800e4da:	d125      	bne.n	800e528 <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 800e4dc:	68bb      	ldr	r3, [r7, #8]
 800e4de:	685b      	ldr	r3, [r3, #4]
 800e4e0:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 800e4e2:	693b      	ldr	r3, [r7, #16]
 800e4e4:	8afa      	ldrh	r2, [r7, #22]
 800e4e6:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 800e4e8:	693b      	ldr	r3, [r7, #16]
 800e4ea:	2206      	movs	r2, #6
 800e4ec:	6839      	ldr	r1, [r7, #0]
 800e4ee:	4618      	mov	r0, r3
 800e4f0:	f000 fb1a 	bl	800eb28 <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 800e4f4:	693b      	ldr	r3, [r7, #16]
 800e4f6:	3306      	adds	r3, #6
 800e4f8:	2206      	movs	r2, #6
 800e4fa:	6879      	ldr	r1, [r7, #4]
 800e4fc:	4618      	mov	r0, r3
 800e4fe:	f000 fb13 	bl	800eb28 <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 800e502:	68fb      	ldr	r3, [r7, #12]
 800e504:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800e508:	2b06      	cmp	r3, #6
 800e50a:	d006      	beq.n	800e51a <ethernet_output+0x66>
 800e50c:	4b0a      	ldr	r3, [pc, #40]	; (800e538 <ethernet_output+0x84>)
 800e50e:	f44f 7299 	mov.w	r2, #306	; 0x132
 800e512:	490a      	ldr	r1, [pc, #40]	; (800e53c <ethernet_output+0x88>)
 800e514:	480a      	ldr	r0, [pc, #40]	; (800e540 <ethernet_output+0x8c>)
 800e516:	f000 f903 	bl	800e720 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 800e51a:	68fb      	ldr	r3, [r7, #12]
 800e51c:	699b      	ldr	r3, [r3, #24]
 800e51e:	68b9      	ldr	r1, [r7, #8]
 800e520:	68f8      	ldr	r0, [r7, #12]
 800e522:	4798      	blx	r3
 800e524:	4603      	mov	r3, r0
 800e526:	e002      	b.n	800e52e <ethernet_output+0x7a>
      goto pbuf_header_failed;
 800e528:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 800e52a:	f06f 0301 	mvn.w	r3, #1
}
 800e52e:	4618      	mov	r0, r3
 800e530:	3718      	adds	r7, #24
 800e532:	46bd      	mov	sp, r7
 800e534:	bd80      	pop	{r7, pc}
 800e536:	bf00      	nop
 800e538:	0801231c 	.word	0x0801231c
 800e53c:	08012354 	.word	0x08012354
 800e540:	08012388 	.word	0x08012388

0800e544 <rand>:
 800e544:	4b16      	ldr	r3, [pc, #88]	; (800e5a0 <rand+0x5c>)
 800e546:	b510      	push	{r4, lr}
 800e548:	681c      	ldr	r4, [r3, #0]
 800e54a:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800e54c:	b9b3      	cbnz	r3, 800e57c <rand+0x38>
 800e54e:	2018      	movs	r0, #24
 800e550:	f000 fb62 	bl	800ec18 <malloc>
 800e554:	4602      	mov	r2, r0
 800e556:	6320      	str	r0, [r4, #48]	; 0x30
 800e558:	b920      	cbnz	r0, 800e564 <rand+0x20>
 800e55a:	4b12      	ldr	r3, [pc, #72]	; (800e5a4 <rand+0x60>)
 800e55c:	4812      	ldr	r0, [pc, #72]	; (800e5a8 <rand+0x64>)
 800e55e:	2152      	movs	r1, #82	; 0x52
 800e560:	f000 faf0 	bl	800eb44 <__assert_func>
 800e564:	4911      	ldr	r1, [pc, #68]	; (800e5ac <rand+0x68>)
 800e566:	4b12      	ldr	r3, [pc, #72]	; (800e5b0 <rand+0x6c>)
 800e568:	e9c0 1300 	strd	r1, r3, [r0]
 800e56c:	4b11      	ldr	r3, [pc, #68]	; (800e5b4 <rand+0x70>)
 800e56e:	6083      	str	r3, [r0, #8]
 800e570:	230b      	movs	r3, #11
 800e572:	8183      	strh	r3, [r0, #12]
 800e574:	2100      	movs	r1, #0
 800e576:	2001      	movs	r0, #1
 800e578:	e9c2 0104 	strd	r0, r1, [r2, #16]
 800e57c:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800e57e:	480e      	ldr	r0, [pc, #56]	; (800e5b8 <rand+0x74>)
 800e580:	690b      	ldr	r3, [r1, #16]
 800e582:	694c      	ldr	r4, [r1, #20]
 800e584:	4a0d      	ldr	r2, [pc, #52]	; (800e5bc <rand+0x78>)
 800e586:	4358      	muls	r0, r3
 800e588:	fb02 0004 	mla	r0, r2, r4, r0
 800e58c:	fba3 3202 	umull	r3, r2, r3, r2
 800e590:	3301      	adds	r3, #1
 800e592:	eb40 0002 	adc.w	r0, r0, r2
 800e596:	e9c1 3004 	strd	r3, r0, [r1, #16]
 800e59a:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 800e59e:	bd10      	pop	{r4, pc}
 800e5a0:	20000084 	.word	0x20000084
 800e5a4:	080124b6 	.word	0x080124b6
 800e5a8:	080124cd 	.word	0x080124cd
 800e5ac:	abcd330e 	.word	0xabcd330e
 800e5b0:	e66d1234 	.word	0xe66d1234
 800e5b4:	0005deec 	.word	0x0005deec
 800e5b8:	5851f42d 	.word	0x5851f42d
 800e5bc:	4c957f2d 	.word	0x4c957f2d

0800e5c0 <std>:
 800e5c0:	2300      	movs	r3, #0
 800e5c2:	b510      	push	{r4, lr}
 800e5c4:	4604      	mov	r4, r0
 800e5c6:	e9c0 3300 	strd	r3, r3, [r0]
 800e5ca:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800e5ce:	6083      	str	r3, [r0, #8]
 800e5d0:	8181      	strh	r1, [r0, #12]
 800e5d2:	6643      	str	r3, [r0, #100]	; 0x64
 800e5d4:	81c2      	strh	r2, [r0, #14]
 800e5d6:	6183      	str	r3, [r0, #24]
 800e5d8:	4619      	mov	r1, r3
 800e5da:	2208      	movs	r2, #8
 800e5dc:	305c      	adds	r0, #92	; 0x5c
 800e5de:	f000 fa2f 	bl	800ea40 <memset>
 800e5e2:	4b05      	ldr	r3, [pc, #20]	; (800e5f8 <std+0x38>)
 800e5e4:	6263      	str	r3, [r4, #36]	; 0x24
 800e5e6:	4b05      	ldr	r3, [pc, #20]	; (800e5fc <std+0x3c>)
 800e5e8:	62a3      	str	r3, [r4, #40]	; 0x28
 800e5ea:	4b05      	ldr	r3, [pc, #20]	; (800e600 <std+0x40>)
 800e5ec:	62e3      	str	r3, [r4, #44]	; 0x2c
 800e5ee:	4b05      	ldr	r3, [pc, #20]	; (800e604 <std+0x44>)
 800e5f0:	6224      	str	r4, [r4, #32]
 800e5f2:	6323      	str	r3, [r4, #48]	; 0x30
 800e5f4:	bd10      	pop	{r4, pc}
 800e5f6:	bf00      	nop
 800e5f8:	0800e83d 	.word	0x0800e83d
 800e5fc:	0800e85f 	.word	0x0800e85f
 800e600:	0800e897 	.word	0x0800e897
 800e604:	0800e8bb 	.word	0x0800e8bb

0800e608 <stdio_exit_handler>:
 800e608:	4a02      	ldr	r2, [pc, #8]	; (800e614 <stdio_exit_handler+0xc>)
 800e60a:	4903      	ldr	r1, [pc, #12]	; (800e618 <stdio_exit_handler+0x10>)
 800e60c:	4803      	ldr	r0, [pc, #12]	; (800e61c <stdio_exit_handler+0x14>)
 800e60e:	f000 b869 	b.w	800e6e4 <_fwalk_sglue>
 800e612:	bf00      	nop
 800e614:	2000002c 	.word	0x2000002c
 800e618:	0800f6e5 	.word	0x0800f6e5
 800e61c:	20000038 	.word	0x20000038

0800e620 <cleanup_stdio>:
 800e620:	6841      	ldr	r1, [r0, #4]
 800e622:	4b0c      	ldr	r3, [pc, #48]	; (800e654 <cleanup_stdio+0x34>)
 800e624:	4299      	cmp	r1, r3
 800e626:	b510      	push	{r4, lr}
 800e628:	4604      	mov	r4, r0
 800e62a:	d001      	beq.n	800e630 <cleanup_stdio+0x10>
 800e62c:	f001 f85a 	bl	800f6e4 <_fflush_r>
 800e630:	68a1      	ldr	r1, [r4, #8]
 800e632:	4b09      	ldr	r3, [pc, #36]	; (800e658 <cleanup_stdio+0x38>)
 800e634:	4299      	cmp	r1, r3
 800e636:	d002      	beq.n	800e63e <cleanup_stdio+0x1e>
 800e638:	4620      	mov	r0, r4
 800e63a:	f001 f853 	bl	800f6e4 <_fflush_r>
 800e63e:	68e1      	ldr	r1, [r4, #12]
 800e640:	4b06      	ldr	r3, [pc, #24]	; (800e65c <cleanup_stdio+0x3c>)
 800e642:	4299      	cmp	r1, r3
 800e644:	d004      	beq.n	800e650 <cleanup_stdio+0x30>
 800e646:	4620      	mov	r0, r4
 800e648:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e64c:	f001 b84a 	b.w	800f6e4 <_fflush_r>
 800e650:	bd10      	pop	{r4, pc}
 800e652:	bf00      	nop
 800e654:	20008448 	.word	0x20008448
 800e658:	200084b0 	.word	0x200084b0
 800e65c:	20008518 	.word	0x20008518

0800e660 <global_stdio_init.part.0>:
 800e660:	b510      	push	{r4, lr}
 800e662:	4b0b      	ldr	r3, [pc, #44]	; (800e690 <global_stdio_init.part.0+0x30>)
 800e664:	4c0b      	ldr	r4, [pc, #44]	; (800e694 <global_stdio_init.part.0+0x34>)
 800e666:	4a0c      	ldr	r2, [pc, #48]	; (800e698 <global_stdio_init.part.0+0x38>)
 800e668:	601a      	str	r2, [r3, #0]
 800e66a:	4620      	mov	r0, r4
 800e66c:	2200      	movs	r2, #0
 800e66e:	2104      	movs	r1, #4
 800e670:	f7ff ffa6 	bl	800e5c0 <std>
 800e674:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800e678:	2201      	movs	r2, #1
 800e67a:	2109      	movs	r1, #9
 800e67c:	f7ff ffa0 	bl	800e5c0 <std>
 800e680:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800e684:	2202      	movs	r2, #2
 800e686:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e68a:	2112      	movs	r1, #18
 800e68c:	f7ff bf98 	b.w	800e5c0 <std>
 800e690:	20008580 	.word	0x20008580
 800e694:	20008448 	.word	0x20008448
 800e698:	0800e609 	.word	0x0800e609

0800e69c <__sfp_lock_acquire>:
 800e69c:	4801      	ldr	r0, [pc, #4]	; (800e6a4 <__sfp_lock_acquire+0x8>)
 800e69e:	f000 ba41 	b.w	800eb24 <__retarget_lock_acquire_recursive>
 800e6a2:	bf00      	nop
 800e6a4:	20008589 	.word	0x20008589

0800e6a8 <__sfp_lock_release>:
 800e6a8:	4801      	ldr	r0, [pc, #4]	; (800e6b0 <__sfp_lock_release+0x8>)
 800e6aa:	f000 ba3c 	b.w	800eb26 <__retarget_lock_release_recursive>
 800e6ae:	bf00      	nop
 800e6b0:	20008589 	.word	0x20008589

0800e6b4 <__sinit>:
 800e6b4:	b510      	push	{r4, lr}
 800e6b6:	4604      	mov	r4, r0
 800e6b8:	f7ff fff0 	bl	800e69c <__sfp_lock_acquire>
 800e6bc:	6a23      	ldr	r3, [r4, #32]
 800e6be:	b11b      	cbz	r3, 800e6c8 <__sinit+0x14>
 800e6c0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e6c4:	f7ff bff0 	b.w	800e6a8 <__sfp_lock_release>
 800e6c8:	4b04      	ldr	r3, [pc, #16]	; (800e6dc <__sinit+0x28>)
 800e6ca:	6223      	str	r3, [r4, #32]
 800e6cc:	4b04      	ldr	r3, [pc, #16]	; (800e6e0 <__sinit+0x2c>)
 800e6ce:	681b      	ldr	r3, [r3, #0]
 800e6d0:	2b00      	cmp	r3, #0
 800e6d2:	d1f5      	bne.n	800e6c0 <__sinit+0xc>
 800e6d4:	f7ff ffc4 	bl	800e660 <global_stdio_init.part.0>
 800e6d8:	e7f2      	b.n	800e6c0 <__sinit+0xc>
 800e6da:	bf00      	nop
 800e6dc:	0800e621 	.word	0x0800e621
 800e6e0:	20008580 	.word	0x20008580

0800e6e4 <_fwalk_sglue>:
 800e6e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e6e8:	4607      	mov	r7, r0
 800e6ea:	4688      	mov	r8, r1
 800e6ec:	4614      	mov	r4, r2
 800e6ee:	2600      	movs	r6, #0
 800e6f0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800e6f4:	f1b9 0901 	subs.w	r9, r9, #1
 800e6f8:	d505      	bpl.n	800e706 <_fwalk_sglue+0x22>
 800e6fa:	6824      	ldr	r4, [r4, #0]
 800e6fc:	2c00      	cmp	r4, #0
 800e6fe:	d1f7      	bne.n	800e6f0 <_fwalk_sglue+0xc>
 800e700:	4630      	mov	r0, r6
 800e702:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e706:	89ab      	ldrh	r3, [r5, #12]
 800e708:	2b01      	cmp	r3, #1
 800e70a:	d907      	bls.n	800e71c <_fwalk_sglue+0x38>
 800e70c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800e710:	3301      	adds	r3, #1
 800e712:	d003      	beq.n	800e71c <_fwalk_sglue+0x38>
 800e714:	4629      	mov	r1, r5
 800e716:	4638      	mov	r0, r7
 800e718:	47c0      	blx	r8
 800e71a:	4306      	orrs	r6, r0
 800e71c:	3568      	adds	r5, #104	; 0x68
 800e71e:	e7e9      	b.n	800e6f4 <_fwalk_sglue+0x10>

0800e720 <iprintf>:
 800e720:	b40f      	push	{r0, r1, r2, r3}
 800e722:	b507      	push	{r0, r1, r2, lr}
 800e724:	4906      	ldr	r1, [pc, #24]	; (800e740 <iprintf+0x20>)
 800e726:	ab04      	add	r3, sp, #16
 800e728:	6808      	ldr	r0, [r1, #0]
 800e72a:	f853 2b04 	ldr.w	r2, [r3], #4
 800e72e:	6881      	ldr	r1, [r0, #8]
 800e730:	9301      	str	r3, [sp, #4]
 800e732:	f000 fca7 	bl	800f084 <_vfiprintf_r>
 800e736:	b003      	add	sp, #12
 800e738:	f85d eb04 	ldr.w	lr, [sp], #4
 800e73c:	b004      	add	sp, #16
 800e73e:	4770      	bx	lr
 800e740:	20000084 	.word	0x20000084

0800e744 <_puts_r>:
 800e744:	6a03      	ldr	r3, [r0, #32]
 800e746:	b570      	push	{r4, r5, r6, lr}
 800e748:	6884      	ldr	r4, [r0, #8]
 800e74a:	4605      	mov	r5, r0
 800e74c:	460e      	mov	r6, r1
 800e74e:	b90b      	cbnz	r3, 800e754 <_puts_r+0x10>
 800e750:	f7ff ffb0 	bl	800e6b4 <__sinit>
 800e754:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800e756:	07db      	lsls	r3, r3, #31
 800e758:	d405      	bmi.n	800e766 <_puts_r+0x22>
 800e75a:	89a3      	ldrh	r3, [r4, #12]
 800e75c:	0598      	lsls	r0, r3, #22
 800e75e:	d402      	bmi.n	800e766 <_puts_r+0x22>
 800e760:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e762:	f000 f9df 	bl	800eb24 <__retarget_lock_acquire_recursive>
 800e766:	89a3      	ldrh	r3, [r4, #12]
 800e768:	0719      	lsls	r1, r3, #28
 800e76a:	d513      	bpl.n	800e794 <_puts_r+0x50>
 800e76c:	6923      	ldr	r3, [r4, #16]
 800e76e:	b18b      	cbz	r3, 800e794 <_puts_r+0x50>
 800e770:	3e01      	subs	r6, #1
 800e772:	68a3      	ldr	r3, [r4, #8]
 800e774:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800e778:	3b01      	subs	r3, #1
 800e77a:	60a3      	str	r3, [r4, #8]
 800e77c:	b9e9      	cbnz	r1, 800e7ba <_puts_r+0x76>
 800e77e:	2b00      	cmp	r3, #0
 800e780:	da2e      	bge.n	800e7e0 <_puts_r+0x9c>
 800e782:	4622      	mov	r2, r4
 800e784:	210a      	movs	r1, #10
 800e786:	4628      	mov	r0, r5
 800e788:	f000 f89b 	bl	800e8c2 <__swbuf_r>
 800e78c:	3001      	adds	r0, #1
 800e78e:	d007      	beq.n	800e7a0 <_puts_r+0x5c>
 800e790:	250a      	movs	r5, #10
 800e792:	e007      	b.n	800e7a4 <_puts_r+0x60>
 800e794:	4621      	mov	r1, r4
 800e796:	4628      	mov	r0, r5
 800e798:	f000 f8d0 	bl	800e93c <__swsetup_r>
 800e79c:	2800      	cmp	r0, #0
 800e79e:	d0e7      	beq.n	800e770 <_puts_r+0x2c>
 800e7a0:	f04f 35ff 	mov.w	r5, #4294967295
 800e7a4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800e7a6:	07da      	lsls	r2, r3, #31
 800e7a8:	d405      	bmi.n	800e7b6 <_puts_r+0x72>
 800e7aa:	89a3      	ldrh	r3, [r4, #12]
 800e7ac:	059b      	lsls	r3, r3, #22
 800e7ae:	d402      	bmi.n	800e7b6 <_puts_r+0x72>
 800e7b0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e7b2:	f000 f9b8 	bl	800eb26 <__retarget_lock_release_recursive>
 800e7b6:	4628      	mov	r0, r5
 800e7b8:	bd70      	pop	{r4, r5, r6, pc}
 800e7ba:	2b00      	cmp	r3, #0
 800e7bc:	da04      	bge.n	800e7c8 <_puts_r+0x84>
 800e7be:	69a2      	ldr	r2, [r4, #24]
 800e7c0:	429a      	cmp	r2, r3
 800e7c2:	dc06      	bgt.n	800e7d2 <_puts_r+0x8e>
 800e7c4:	290a      	cmp	r1, #10
 800e7c6:	d004      	beq.n	800e7d2 <_puts_r+0x8e>
 800e7c8:	6823      	ldr	r3, [r4, #0]
 800e7ca:	1c5a      	adds	r2, r3, #1
 800e7cc:	6022      	str	r2, [r4, #0]
 800e7ce:	7019      	strb	r1, [r3, #0]
 800e7d0:	e7cf      	b.n	800e772 <_puts_r+0x2e>
 800e7d2:	4622      	mov	r2, r4
 800e7d4:	4628      	mov	r0, r5
 800e7d6:	f000 f874 	bl	800e8c2 <__swbuf_r>
 800e7da:	3001      	adds	r0, #1
 800e7dc:	d1c9      	bne.n	800e772 <_puts_r+0x2e>
 800e7de:	e7df      	b.n	800e7a0 <_puts_r+0x5c>
 800e7e0:	6823      	ldr	r3, [r4, #0]
 800e7e2:	250a      	movs	r5, #10
 800e7e4:	1c5a      	adds	r2, r3, #1
 800e7e6:	6022      	str	r2, [r4, #0]
 800e7e8:	701d      	strb	r5, [r3, #0]
 800e7ea:	e7db      	b.n	800e7a4 <_puts_r+0x60>

0800e7ec <puts>:
 800e7ec:	4b02      	ldr	r3, [pc, #8]	; (800e7f8 <puts+0xc>)
 800e7ee:	4601      	mov	r1, r0
 800e7f0:	6818      	ldr	r0, [r3, #0]
 800e7f2:	f7ff bfa7 	b.w	800e744 <_puts_r>
 800e7f6:	bf00      	nop
 800e7f8:	20000084 	.word	0x20000084

0800e7fc <siprintf>:
 800e7fc:	b40e      	push	{r1, r2, r3}
 800e7fe:	b500      	push	{lr}
 800e800:	b09c      	sub	sp, #112	; 0x70
 800e802:	ab1d      	add	r3, sp, #116	; 0x74
 800e804:	9002      	str	r0, [sp, #8]
 800e806:	9006      	str	r0, [sp, #24]
 800e808:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800e80c:	4809      	ldr	r0, [pc, #36]	; (800e834 <siprintf+0x38>)
 800e80e:	9107      	str	r1, [sp, #28]
 800e810:	9104      	str	r1, [sp, #16]
 800e812:	4909      	ldr	r1, [pc, #36]	; (800e838 <siprintf+0x3c>)
 800e814:	f853 2b04 	ldr.w	r2, [r3], #4
 800e818:	9105      	str	r1, [sp, #20]
 800e81a:	6800      	ldr	r0, [r0, #0]
 800e81c:	9301      	str	r3, [sp, #4]
 800e81e:	a902      	add	r1, sp, #8
 800e820:	f000 fb08 	bl	800ee34 <_svfiprintf_r>
 800e824:	9b02      	ldr	r3, [sp, #8]
 800e826:	2200      	movs	r2, #0
 800e828:	701a      	strb	r2, [r3, #0]
 800e82a:	b01c      	add	sp, #112	; 0x70
 800e82c:	f85d eb04 	ldr.w	lr, [sp], #4
 800e830:	b003      	add	sp, #12
 800e832:	4770      	bx	lr
 800e834:	20000084 	.word	0x20000084
 800e838:	ffff0208 	.word	0xffff0208

0800e83c <__sread>:
 800e83c:	b510      	push	{r4, lr}
 800e83e:	460c      	mov	r4, r1
 800e840:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e844:	f000 f926 	bl	800ea94 <_read_r>
 800e848:	2800      	cmp	r0, #0
 800e84a:	bfab      	itete	ge
 800e84c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800e84e:	89a3      	ldrhlt	r3, [r4, #12]
 800e850:	181b      	addge	r3, r3, r0
 800e852:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800e856:	bfac      	ite	ge
 800e858:	6563      	strge	r3, [r4, #84]	; 0x54
 800e85a:	81a3      	strhlt	r3, [r4, #12]
 800e85c:	bd10      	pop	{r4, pc}

0800e85e <__swrite>:
 800e85e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e862:	461f      	mov	r7, r3
 800e864:	898b      	ldrh	r3, [r1, #12]
 800e866:	05db      	lsls	r3, r3, #23
 800e868:	4605      	mov	r5, r0
 800e86a:	460c      	mov	r4, r1
 800e86c:	4616      	mov	r6, r2
 800e86e:	d505      	bpl.n	800e87c <__swrite+0x1e>
 800e870:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e874:	2302      	movs	r3, #2
 800e876:	2200      	movs	r2, #0
 800e878:	f000 f8fa 	bl	800ea70 <_lseek_r>
 800e87c:	89a3      	ldrh	r3, [r4, #12]
 800e87e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e882:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800e886:	81a3      	strh	r3, [r4, #12]
 800e888:	4632      	mov	r2, r6
 800e88a:	463b      	mov	r3, r7
 800e88c:	4628      	mov	r0, r5
 800e88e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e892:	f000 b911 	b.w	800eab8 <_write_r>

0800e896 <__sseek>:
 800e896:	b510      	push	{r4, lr}
 800e898:	460c      	mov	r4, r1
 800e89a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e89e:	f000 f8e7 	bl	800ea70 <_lseek_r>
 800e8a2:	1c43      	adds	r3, r0, #1
 800e8a4:	89a3      	ldrh	r3, [r4, #12]
 800e8a6:	bf15      	itete	ne
 800e8a8:	6560      	strne	r0, [r4, #84]	; 0x54
 800e8aa:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800e8ae:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800e8b2:	81a3      	strheq	r3, [r4, #12]
 800e8b4:	bf18      	it	ne
 800e8b6:	81a3      	strhne	r3, [r4, #12]
 800e8b8:	bd10      	pop	{r4, pc}

0800e8ba <__sclose>:
 800e8ba:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e8be:	f000 b8c7 	b.w	800ea50 <_close_r>

0800e8c2 <__swbuf_r>:
 800e8c2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e8c4:	460e      	mov	r6, r1
 800e8c6:	4614      	mov	r4, r2
 800e8c8:	4605      	mov	r5, r0
 800e8ca:	b118      	cbz	r0, 800e8d4 <__swbuf_r+0x12>
 800e8cc:	6a03      	ldr	r3, [r0, #32]
 800e8ce:	b90b      	cbnz	r3, 800e8d4 <__swbuf_r+0x12>
 800e8d0:	f7ff fef0 	bl	800e6b4 <__sinit>
 800e8d4:	69a3      	ldr	r3, [r4, #24]
 800e8d6:	60a3      	str	r3, [r4, #8]
 800e8d8:	89a3      	ldrh	r3, [r4, #12]
 800e8da:	071a      	lsls	r2, r3, #28
 800e8dc:	d525      	bpl.n	800e92a <__swbuf_r+0x68>
 800e8de:	6923      	ldr	r3, [r4, #16]
 800e8e0:	b31b      	cbz	r3, 800e92a <__swbuf_r+0x68>
 800e8e2:	6823      	ldr	r3, [r4, #0]
 800e8e4:	6922      	ldr	r2, [r4, #16]
 800e8e6:	1a98      	subs	r0, r3, r2
 800e8e8:	6963      	ldr	r3, [r4, #20]
 800e8ea:	b2f6      	uxtb	r6, r6
 800e8ec:	4283      	cmp	r3, r0
 800e8ee:	4637      	mov	r7, r6
 800e8f0:	dc04      	bgt.n	800e8fc <__swbuf_r+0x3a>
 800e8f2:	4621      	mov	r1, r4
 800e8f4:	4628      	mov	r0, r5
 800e8f6:	f000 fef5 	bl	800f6e4 <_fflush_r>
 800e8fa:	b9e0      	cbnz	r0, 800e936 <__swbuf_r+0x74>
 800e8fc:	68a3      	ldr	r3, [r4, #8]
 800e8fe:	3b01      	subs	r3, #1
 800e900:	60a3      	str	r3, [r4, #8]
 800e902:	6823      	ldr	r3, [r4, #0]
 800e904:	1c5a      	adds	r2, r3, #1
 800e906:	6022      	str	r2, [r4, #0]
 800e908:	701e      	strb	r6, [r3, #0]
 800e90a:	6962      	ldr	r2, [r4, #20]
 800e90c:	1c43      	adds	r3, r0, #1
 800e90e:	429a      	cmp	r2, r3
 800e910:	d004      	beq.n	800e91c <__swbuf_r+0x5a>
 800e912:	89a3      	ldrh	r3, [r4, #12]
 800e914:	07db      	lsls	r3, r3, #31
 800e916:	d506      	bpl.n	800e926 <__swbuf_r+0x64>
 800e918:	2e0a      	cmp	r6, #10
 800e91a:	d104      	bne.n	800e926 <__swbuf_r+0x64>
 800e91c:	4621      	mov	r1, r4
 800e91e:	4628      	mov	r0, r5
 800e920:	f000 fee0 	bl	800f6e4 <_fflush_r>
 800e924:	b938      	cbnz	r0, 800e936 <__swbuf_r+0x74>
 800e926:	4638      	mov	r0, r7
 800e928:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e92a:	4621      	mov	r1, r4
 800e92c:	4628      	mov	r0, r5
 800e92e:	f000 f805 	bl	800e93c <__swsetup_r>
 800e932:	2800      	cmp	r0, #0
 800e934:	d0d5      	beq.n	800e8e2 <__swbuf_r+0x20>
 800e936:	f04f 37ff 	mov.w	r7, #4294967295
 800e93a:	e7f4      	b.n	800e926 <__swbuf_r+0x64>

0800e93c <__swsetup_r>:
 800e93c:	b538      	push	{r3, r4, r5, lr}
 800e93e:	4b2a      	ldr	r3, [pc, #168]	; (800e9e8 <__swsetup_r+0xac>)
 800e940:	4605      	mov	r5, r0
 800e942:	6818      	ldr	r0, [r3, #0]
 800e944:	460c      	mov	r4, r1
 800e946:	b118      	cbz	r0, 800e950 <__swsetup_r+0x14>
 800e948:	6a03      	ldr	r3, [r0, #32]
 800e94a:	b90b      	cbnz	r3, 800e950 <__swsetup_r+0x14>
 800e94c:	f7ff feb2 	bl	800e6b4 <__sinit>
 800e950:	89a3      	ldrh	r3, [r4, #12]
 800e952:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800e956:	0718      	lsls	r0, r3, #28
 800e958:	d422      	bmi.n	800e9a0 <__swsetup_r+0x64>
 800e95a:	06d9      	lsls	r1, r3, #27
 800e95c:	d407      	bmi.n	800e96e <__swsetup_r+0x32>
 800e95e:	2309      	movs	r3, #9
 800e960:	602b      	str	r3, [r5, #0]
 800e962:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800e966:	81a3      	strh	r3, [r4, #12]
 800e968:	f04f 30ff 	mov.w	r0, #4294967295
 800e96c:	e034      	b.n	800e9d8 <__swsetup_r+0x9c>
 800e96e:	0758      	lsls	r0, r3, #29
 800e970:	d512      	bpl.n	800e998 <__swsetup_r+0x5c>
 800e972:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800e974:	b141      	cbz	r1, 800e988 <__swsetup_r+0x4c>
 800e976:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800e97a:	4299      	cmp	r1, r3
 800e97c:	d002      	beq.n	800e984 <__swsetup_r+0x48>
 800e97e:	4628      	mov	r0, r5
 800e980:	f000 f8fe 	bl	800eb80 <_free_r>
 800e984:	2300      	movs	r3, #0
 800e986:	6363      	str	r3, [r4, #52]	; 0x34
 800e988:	89a3      	ldrh	r3, [r4, #12]
 800e98a:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800e98e:	81a3      	strh	r3, [r4, #12]
 800e990:	2300      	movs	r3, #0
 800e992:	6063      	str	r3, [r4, #4]
 800e994:	6923      	ldr	r3, [r4, #16]
 800e996:	6023      	str	r3, [r4, #0]
 800e998:	89a3      	ldrh	r3, [r4, #12]
 800e99a:	f043 0308 	orr.w	r3, r3, #8
 800e99e:	81a3      	strh	r3, [r4, #12]
 800e9a0:	6923      	ldr	r3, [r4, #16]
 800e9a2:	b94b      	cbnz	r3, 800e9b8 <__swsetup_r+0x7c>
 800e9a4:	89a3      	ldrh	r3, [r4, #12]
 800e9a6:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800e9aa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800e9ae:	d003      	beq.n	800e9b8 <__swsetup_r+0x7c>
 800e9b0:	4621      	mov	r1, r4
 800e9b2:	4628      	mov	r0, r5
 800e9b4:	f000 fef6 	bl	800f7a4 <__smakebuf_r>
 800e9b8:	89a0      	ldrh	r0, [r4, #12]
 800e9ba:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800e9be:	f010 0301 	ands.w	r3, r0, #1
 800e9c2:	d00a      	beq.n	800e9da <__swsetup_r+0x9e>
 800e9c4:	2300      	movs	r3, #0
 800e9c6:	60a3      	str	r3, [r4, #8]
 800e9c8:	6963      	ldr	r3, [r4, #20]
 800e9ca:	425b      	negs	r3, r3
 800e9cc:	61a3      	str	r3, [r4, #24]
 800e9ce:	6923      	ldr	r3, [r4, #16]
 800e9d0:	b943      	cbnz	r3, 800e9e4 <__swsetup_r+0xa8>
 800e9d2:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800e9d6:	d1c4      	bne.n	800e962 <__swsetup_r+0x26>
 800e9d8:	bd38      	pop	{r3, r4, r5, pc}
 800e9da:	0781      	lsls	r1, r0, #30
 800e9dc:	bf58      	it	pl
 800e9de:	6963      	ldrpl	r3, [r4, #20]
 800e9e0:	60a3      	str	r3, [r4, #8]
 800e9e2:	e7f4      	b.n	800e9ce <__swsetup_r+0x92>
 800e9e4:	2000      	movs	r0, #0
 800e9e6:	e7f7      	b.n	800e9d8 <__swsetup_r+0x9c>
 800e9e8:	20000084 	.word	0x20000084

0800e9ec <memcmp>:
 800e9ec:	b510      	push	{r4, lr}
 800e9ee:	3901      	subs	r1, #1
 800e9f0:	4402      	add	r2, r0
 800e9f2:	4290      	cmp	r0, r2
 800e9f4:	d101      	bne.n	800e9fa <memcmp+0xe>
 800e9f6:	2000      	movs	r0, #0
 800e9f8:	e005      	b.n	800ea06 <memcmp+0x1a>
 800e9fa:	7803      	ldrb	r3, [r0, #0]
 800e9fc:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800ea00:	42a3      	cmp	r3, r4
 800ea02:	d001      	beq.n	800ea08 <memcmp+0x1c>
 800ea04:	1b18      	subs	r0, r3, r4
 800ea06:	bd10      	pop	{r4, pc}
 800ea08:	3001      	adds	r0, #1
 800ea0a:	e7f2      	b.n	800e9f2 <memcmp+0x6>

0800ea0c <memmove>:
 800ea0c:	4288      	cmp	r0, r1
 800ea0e:	b510      	push	{r4, lr}
 800ea10:	eb01 0402 	add.w	r4, r1, r2
 800ea14:	d902      	bls.n	800ea1c <memmove+0x10>
 800ea16:	4284      	cmp	r4, r0
 800ea18:	4623      	mov	r3, r4
 800ea1a:	d807      	bhi.n	800ea2c <memmove+0x20>
 800ea1c:	1e43      	subs	r3, r0, #1
 800ea1e:	42a1      	cmp	r1, r4
 800ea20:	d008      	beq.n	800ea34 <memmove+0x28>
 800ea22:	f811 2b01 	ldrb.w	r2, [r1], #1
 800ea26:	f803 2f01 	strb.w	r2, [r3, #1]!
 800ea2a:	e7f8      	b.n	800ea1e <memmove+0x12>
 800ea2c:	4402      	add	r2, r0
 800ea2e:	4601      	mov	r1, r0
 800ea30:	428a      	cmp	r2, r1
 800ea32:	d100      	bne.n	800ea36 <memmove+0x2a>
 800ea34:	bd10      	pop	{r4, pc}
 800ea36:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800ea3a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800ea3e:	e7f7      	b.n	800ea30 <memmove+0x24>

0800ea40 <memset>:
 800ea40:	4402      	add	r2, r0
 800ea42:	4603      	mov	r3, r0
 800ea44:	4293      	cmp	r3, r2
 800ea46:	d100      	bne.n	800ea4a <memset+0xa>
 800ea48:	4770      	bx	lr
 800ea4a:	f803 1b01 	strb.w	r1, [r3], #1
 800ea4e:	e7f9      	b.n	800ea44 <memset+0x4>

0800ea50 <_close_r>:
 800ea50:	b538      	push	{r3, r4, r5, lr}
 800ea52:	4d06      	ldr	r5, [pc, #24]	; (800ea6c <_close_r+0x1c>)
 800ea54:	2300      	movs	r3, #0
 800ea56:	4604      	mov	r4, r0
 800ea58:	4608      	mov	r0, r1
 800ea5a:	602b      	str	r3, [r5, #0]
 800ea5c:	f7f2 f825 	bl	8000aaa <_close>
 800ea60:	1c43      	adds	r3, r0, #1
 800ea62:	d102      	bne.n	800ea6a <_close_r+0x1a>
 800ea64:	682b      	ldr	r3, [r5, #0]
 800ea66:	b103      	cbz	r3, 800ea6a <_close_r+0x1a>
 800ea68:	6023      	str	r3, [r4, #0]
 800ea6a:	bd38      	pop	{r3, r4, r5, pc}
 800ea6c:	20008584 	.word	0x20008584

0800ea70 <_lseek_r>:
 800ea70:	b538      	push	{r3, r4, r5, lr}
 800ea72:	4d07      	ldr	r5, [pc, #28]	; (800ea90 <_lseek_r+0x20>)
 800ea74:	4604      	mov	r4, r0
 800ea76:	4608      	mov	r0, r1
 800ea78:	4611      	mov	r1, r2
 800ea7a:	2200      	movs	r2, #0
 800ea7c:	602a      	str	r2, [r5, #0]
 800ea7e:	461a      	mov	r2, r3
 800ea80:	f7f2 f83a 	bl	8000af8 <_lseek>
 800ea84:	1c43      	adds	r3, r0, #1
 800ea86:	d102      	bne.n	800ea8e <_lseek_r+0x1e>
 800ea88:	682b      	ldr	r3, [r5, #0]
 800ea8a:	b103      	cbz	r3, 800ea8e <_lseek_r+0x1e>
 800ea8c:	6023      	str	r3, [r4, #0]
 800ea8e:	bd38      	pop	{r3, r4, r5, pc}
 800ea90:	20008584 	.word	0x20008584

0800ea94 <_read_r>:
 800ea94:	b538      	push	{r3, r4, r5, lr}
 800ea96:	4d07      	ldr	r5, [pc, #28]	; (800eab4 <_read_r+0x20>)
 800ea98:	4604      	mov	r4, r0
 800ea9a:	4608      	mov	r0, r1
 800ea9c:	4611      	mov	r1, r2
 800ea9e:	2200      	movs	r2, #0
 800eaa0:	602a      	str	r2, [r5, #0]
 800eaa2:	461a      	mov	r2, r3
 800eaa4:	f7f1 ffe4 	bl	8000a70 <_read>
 800eaa8:	1c43      	adds	r3, r0, #1
 800eaaa:	d102      	bne.n	800eab2 <_read_r+0x1e>
 800eaac:	682b      	ldr	r3, [r5, #0]
 800eaae:	b103      	cbz	r3, 800eab2 <_read_r+0x1e>
 800eab0:	6023      	str	r3, [r4, #0]
 800eab2:	bd38      	pop	{r3, r4, r5, pc}
 800eab4:	20008584 	.word	0x20008584

0800eab8 <_write_r>:
 800eab8:	b538      	push	{r3, r4, r5, lr}
 800eaba:	4d07      	ldr	r5, [pc, #28]	; (800ead8 <_write_r+0x20>)
 800eabc:	4604      	mov	r4, r0
 800eabe:	4608      	mov	r0, r1
 800eac0:	4611      	mov	r1, r2
 800eac2:	2200      	movs	r2, #0
 800eac4:	602a      	str	r2, [r5, #0]
 800eac6:	461a      	mov	r2, r3
 800eac8:	f7f1 fd68 	bl	800059c <_write>
 800eacc:	1c43      	adds	r3, r0, #1
 800eace:	d102      	bne.n	800ead6 <_write_r+0x1e>
 800ead0:	682b      	ldr	r3, [r5, #0]
 800ead2:	b103      	cbz	r3, 800ead6 <_write_r+0x1e>
 800ead4:	6023      	str	r3, [r4, #0]
 800ead6:	bd38      	pop	{r3, r4, r5, pc}
 800ead8:	20008584 	.word	0x20008584

0800eadc <__libc_init_array>:
 800eadc:	b570      	push	{r4, r5, r6, lr}
 800eade:	4d0d      	ldr	r5, [pc, #52]	; (800eb14 <__libc_init_array+0x38>)
 800eae0:	4c0d      	ldr	r4, [pc, #52]	; (800eb18 <__libc_init_array+0x3c>)
 800eae2:	1b64      	subs	r4, r4, r5
 800eae4:	10a4      	asrs	r4, r4, #2
 800eae6:	2600      	movs	r6, #0
 800eae8:	42a6      	cmp	r6, r4
 800eaea:	d109      	bne.n	800eb00 <__libc_init_array+0x24>
 800eaec:	4d0b      	ldr	r5, [pc, #44]	; (800eb1c <__libc_init_array+0x40>)
 800eaee:	4c0c      	ldr	r4, [pc, #48]	; (800eb20 <__libc_init_array+0x44>)
 800eaf0:	f000 ff48 	bl	800f984 <_init>
 800eaf4:	1b64      	subs	r4, r4, r5
 800eaf6:	10a4      	asrs	r4, r4, #2
 800eaf8:	2600      	movs	r6, #0
 800eafa:	42a6      	cmp	r6, r4
 800eafc:	d105      	bne.n	800eb0a <__libc_init_array+0x2e>
 800eafe:	bd70      	pop	{r4, r5, r6, pc}
 800eb00:	f855 3b04 	ldr.w	r3, [r5], #4
 800eb04:	4798      	blx	r3
 800eb06:	3601      	adds	r6, #1
 800eb08:	e7ee      	b.n	800eae8 <__libc_init_array+0xc>
 800eb0a:	f855 3b04 	ldr.w	r3, [r5], #4
 800eb0e:	4798      	blx	r3
 800eb10:	3601      	adds	r6, #1
 800eb12:	e7f2      	b.n	800eafa <__libc_init_array+0x1e>
 800eb14:	0801259c 	.word	0x0801259c
 800eb18:	0801259c 	.word	0x0801259c
 800eb1c:	0801259c 	.word	0x0801259c
 800eb20:	080125a0 	.word	0x080125a0

0800eb24 <__retarget_lock_acquire_recursive>:
 800eb24:	4770      	bx	lr

0800eb26 <__retarget_lock_release_recursive>:
 800eb26:	4770      	bx	lr

0800eb28 <memcpy>:
 800eb28:	440a      	add	r2, r1
 800eb2a:	4291      	cmp	r1, r2
 800eb2c:	f100 33ff 	add.w	r3, r0, #4294967295
 800eb30:	d100      	bne.n	800eb34 <memcpy+0xc>
 800eb32:	4770      	bx	lr
 800eb34:	b510      	push	{r4, lr}
 800eb36:	f811 4b01 	ldrb.w	r4, [r1], #1
 800eb3a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800eb3e:	4291      	cmp	r1, r2
 800eb40:	d1f9      	bne.n	800eb36 <memcpy+0xe>
 800eb42:	bd10      	pop	{r4, pc}

0800eb44 <__assert_func>:
 800eb44:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800eb46:	4614      	mov	r4, r2
 800eb48:	461a      	mov	r2, r3
 800eb4a:	4b09      	ldr	r3, [pc, #36]	; (800eb70 <__assert_func+0x2c>)
 800eb4c:	681b      	ldr	r3, [r3, #0]
 800eb4e:	4605      	mov	r5, r0
 800eb50:	68d8      	ldr	r0, [r3, #12]
 800eb52:	b14c      	cbz	r4, 800eb68 <__assert_func+0x24>
 800eb54:	4b07      	ldr	r3, [pc, #28]	; (800eb74 <__assert_func+0x30>)
 800eb56:	9100      	str	r1, [sp, #0]
 800eb58:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800eb5c:	4906      	ldr	r1, [pc, #24]	; (800eb78 <__assert_func+0x34>)
 800eb5e:	462b      	mov	r3, r5
 800eb60:	f000 fde8 	bl	800f734 <fiprintf>
 800eb64:	f000 fe8c 	bl	800f880 <abort>
 800eb68:	4b04      	ldr	r3, [pc, #16]	; (800eb7c <__assert_func+0x38>)
 800eb6a:	461c      	mov	r4, r3
 800eb6c:	e7f3      	b.n	800eb56 <__assert_func+0x12>
 800eb6e:	bf00      	nop
 800eb70:	20000084 	.word	0x20000084
 800eb74:	08012525 	.word	0x08012525
 800eb78:	08012532 	.word	0x08012532
 800eb7c:	08012560 	.word	0x08012560

0800eb80 <_free_r>:
 800eb80:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800eb82:	2900      	cmp	r1, #0
 800eb84:	d044      	beq.n	800ec10 <_free_r+0x90>
 800eb86:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800eb8a:	9001      	str	r0, [sp, #4]
 800eb8c:	2b00      	cmp	r3, #0
 800eb8e:	f1a1 0404 	sub.w	r4, r1, #4
 800eb92:	bfb8      	it	lt
 800eb94:	18e4      	addlt	r4, r4, r3
 800eb96:	f000 f8e7 	bl	800ed68 <__malloc_lock>
 800eb9a:	4a1e      	ldr	r2, [pc, #120]	; (800ec14 <_free_r+0x94>)
 800eb9c:	9801      	ldr	r0, [sp, #4]
 800eb9e:	6813      	ldr	r3, [r2, #0]
 800eba0:	b933      	cbnz	r3, 800ebb0 <_free_r+0x30>
 800eba2:	6063      	str	r3, [r4, #4]
 800eba4:	6014      	str	r4, [r2, #0]
 800eba6:	b003      	add	sp, #12
 800eba8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800ebac:	f000 b8e2 	b.w	800ed74 <__malloc_unlock>
 800ebb0:	42a3      	cmp	r3, r4
 800ebb2:	d908      	bls.n	800ebc6 <_free_r+0x46>
 800ebb4:	6825      	ldr	r5, [r4, #0]
 800ebb6:	1961      	adds	r1, r4, r5
 800ebb8:	428b      	cmp	r3, r1
 800ebba:	bf01      	itttt	eq
 800ebbc:	6819      	ldreq	r1, [r3, #0]
 800ebbe:	685b      	ldreq	r3, [r3, #4]
 800ebc0:	1949      	addeq	r1, r1, r5
 800ebc2:	6021      	streq	r1, [r4, #0]
 800ebc4:	e7ed      	b.n	800eba2 <_free_r+0x22>
 800ebc6:	461a      	mov	r2, r3
 800ebc8:	685b      	ldr	r3, [r3, #4]
 800ebca:	b10b      	cbz	r3, 800ebd0 <_free_r+0x50>
 800ebcc:	42a3      	cmp	r3, r4
 800ebce:	d9fa      	bls.n	800ebc6 <_free_r+0x46>
 800ebd0:	6811      	ldr	r1, [r2, #0]
 800ebd2:	1855      	adds	r5, r2, r1
 800ebd4:	42a5      	cmp	r5, r4
 800ebd6:	d10b      	bne.n	800ebf0 <_free_r+0x70>
 800ebd8:	6824      	ldr	r4, [r4, #0]
 800ebda:	4421      	add	r1, r4
 800ebdc:	1854      	adds	r4, r2, r1
 800ebde:	42a3      	cmp	r3, r4
 800ebe0:	6011      	str	r1, [r2, #0]
 800ebe2:	d1e0      	bne.n	800eba6 <_free_r+0x26>
 800ebe4:	681c      	ldr	r4, [r3, #0]
 800ebe6:	685b      	ldr	r3, [r3, #4]
 800ebe8:	6053      	str	r3, [r2, #4]
 800ebea:	440c      	add	r4, r1
 800ebec:	6014      	str	r4, [r2, #0]
 800ebee:	e7da      	b.n	800eba6 <_free_r+0x26>
 800ebf0:	d902      	bls.n	800ebf8 <_free_r+0x78>
 800ebf2:	230c      	movs	r3, #12
 800ebf4:	6003      	str	r3, [r0, #0]
 800ebf6:	e7d6      	b.n	800eba6 <_free_r+0x26>
 800ebf8:	6825      	ldr	r5, [r4, #0]
 800ebfa:	1961      	adds	r1, r4, r5
 800ebfc:	428b      	cmp	r3, r1
 800ebfe:	bf04      	itt	eq
 800ec00:	6819      	ldreq	r1, [r3, #0]
 800ec02:	685b      	ldreq	r3, [r3, #4]
 800ec04:	6063      	str	r3, [r4, #4]
 800ec06:	bf04      	itt	eq
 800ec08:	1949      	addeq	r1, r1, r5
 800ec0a:	6021      	streq	r1, [r4, #0]
 800ec0c:	6054      	str	r4, [r2, #4]
 800ec0e:	e7ca      	b.n	800eba6 <_free_r+0x26>
 800ec10:	b003      	add	sp, #12
 800ec12:	bd30      	pop	{r4, r5, pc}
 800ec14:	2000858c 	.word	0x2000858c

0800ec18 <malloc>:
 800ec18:	4b02      	ldr	r3, [pc, #8]	; (800ec24 <malloc+0xc>)
 800ec1a:	4601      	mov	r1, r0
 800ec1c:	6818      	ldr	r0, [r3, #0]
 800ec1e:	f000 b823 	b.w	800ec68 <_malloc_r>
 800ec22:	bf00      	nop
 800ec24:	20000084 	.word	0x20000084

0800ec28 <sbrk_aligned>:
 800ec28:	b570      	push	{r4, r5, r6, lr}
 800ec2a:	4e0e      	ldr	r6, [pc, #56]	; (800ec64 <sbrk_aligned+0x3c>)
 800ec2c:	460c      	mov	r4, r1
 800ec2e:	6831      	ldr	r1, [r6, #0]
 800ec30:	4605      	mov	r5, r0
 800ec32:	b911      	cbnz	r1, 800ec3a <sbrk_aligned+0x12>
 800ec34:	f000 fe14 	bl	800f860 <_sbrk_r>
 800ec38:	6030      	str	r0, [r6, #0]
 800ec3a:	4621      	mov	r1, r4
 800ec3c:	4628      	mov	r0, r5
 800ec3e:	f000 fe0f 	bl	800f860 <_sbrk_r>
 800ec42:	1c43      	adds	r3, r0, #1
 800ec44:	d00a      	beq.n	800ec5c <sbrk_aligned+0x34>
 800ec46:	1cc4      	adds	r4, r0, #3
 800ec48:	f024 0403 	bic.w	r4, r4, #3
 800ec4c:	42a0      	cmp	r0, r4
 800ec4e:	d007      	beq.n	800ec60 <sbrk_aligned+0x38>
 800ec50:	1a21      	subs	r1, r4, r0
 800ec52:	4628      	mov	r0, r5
 800ec54:	f000 fe04 	bl	800f860 <_sbrk_r>
 800ec58:	3001      	adds	r0, #1
 800ec5a:	d101      	bne.n	800ec60 <sbrk_aligned+0x38>
 800ec5c:	f04f 34ff 	mov.w	r4, #4294967295
 800ec60:	4620      	mov	r0, r4
 800ec62:	bd70      	pop	{r4, r5, r6, pc}
 800ec64:	20008590 	.word	0x20008590

0800ec68 <_malloc_r>:
 800ec68:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ec6c:	1ccd      	adds	r5, r1, #3
 800ec6e:	f025 0503 	bic.w	r5, r5, #3
 800ec72:	3508      	adds	r5, #8
 800ec74:	2d0c      	cmp	r5, #12
 800ec76:	bf38      	it	cc
 800ec78:	250c      	movcc	r5, #12
 800ec7a:	2d00      	cmp	r5, #0
 800ec7c:	4607      	mov	r7, r0
 800ec7e:	db01      	blt.n	800ec84 <_malloc_r+0x1c>
 800ec80:	42a9      	cmp	r1, r5
 800ec82:	d905      	bls.n	800ec90 <_malloc_r+0x28>
 800ec84:	230c      	movs	r3, #12
 800ec86:	603b      	str	r3, [r7, #0]
 800ec88:	2600      	movs	r6, #0
 800ec8a:	4630      	mov	r0, r6
 800ec8c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ec90:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800ed64 <_malloc_r+0xfc>
 800ec94:	f000 f868 	bl	800ed68 <__malloc_lock>
 800ec98:	f8d8 3000 	ldr.w	r3, [r8]
 800ec9c:	461c      	mov	r4, r3
 800ec9e:	bb5c      	cbnz	r4, 800ecf8 <_malloc_r+0x90>
 800eca0:	4629      	mov	r1, r5
 800eca2:	4638      	mov	r0, r7
 800eca4:	f7ff ffc0 	bl	800ec28 <sbrk_aligned>
 800eca8:	1c43      	adds	r3, r0, #1
 800ecaa:	4604      	mov	r4, r0
 800ecac:	d155      	bne.n	800ed5a <_malloc_r+0xf2>
 800ecae:	f8d8 4000 	ldr.w	r4, [r8]
 800ecb2:	4626      	mov	r6, r4
 800ecb4:	2e00      	cmp	r6, #0
 800ecb6:	d145      	bne.n	800ed44 <_malloc_r+0xdc>
 800ecb8:	2c00      	cmp	r4, #0
 800ecba:	d048      	beq.n	800ed4e <_malloc_r+0xe6>
 800ecbc:	6823      	ldr	r3, [r4, #0]
 800ecbe:	4631      	mov	r1, r6
 800ecc0:	4638      	mov	r0, r7
 800ecc2:	eb04 0903 	add.w	r9, r4, r3
 800ecc6:	f000 fdcb 	bl	800f860 <_sbrk_r>
 800ecca:	4581      	cmp	r9, r0
 800eccc:	d13f      	bne.n	800ed4e <_malloc_r+0xe6>
 800ecce:	6821      	ldr	r1, [r4, #0]
 800ecd0:	1a6d      	subs	r5, r5, r1
 800ecd2:	4629      	mov	r1, r5
 800ecd4:	4638      	mov	r0, r7
 800ecd6:	f7ff ffa7 	bl	800ec28 <sbrk_aligned>
 800ecda:	3001      	adds	r0, #1
 800ecdc:	d037      	beq.n	800ed4e <_malloc_r+0xe6>
 800ecde:	6823      	ldr	r3, [r4, #0]
 800ece0:	442b      	add	r3, r5
 800ece2:	6023      	str	r3, [r4, #0]
 800ece4:	f8d8 3000 	ldr.w	r3, [r8]
 800ece8:	2b00      	cmp	r3, #0
 800ecea:	d038      	beq.n	800ed5e <_malloc_r+0xf6>
 800ecec:	685a      	ldr	r2, [r3, #4]
 800ecee:	42a2      	cmp	r2, r4
 800ecf0:	d12b      	bne.n	800ed4a <_malloc_r+0xe2>
 800ecf2:	2200      	movs	r2, #0
 800ecf4:	605a      	str	r2, [r3, #4]
 800ecf6:	e00f      	b.n	800ed18 <_malloc_r+0xb0>
 800ecf8:	6822      	ldr	r2, [r4, #0]
 800ecfa:	1b52      	subs	r2, r2, r5
 800ecfc:	d41f      	bmi.n	800ed3e <_malloc_r+0xd6>
 800ecfe:	2a0b      	cmp	r2, #11
 800ed00:	d917      	bls.n	800ed32 <_malloc_r+0xca>
 800ed02:	1961      	adds	r1, r4, r5
 800ed04:	42a3      	cmp	r3, r4
 800ed06:	6025      	str	r5, [r4, #0]
 800ed08:	bf18      	it	ne
 800ed0a:	6059      	strne	r1, [r3, #4]
 800ed0c:	6863      	ldr	r3, [r4, #4]
 800ed0e:	bf08      	it	eq
 800ed10:	f8c8 1000 	streq.w	r1, [r8]
 800ed14:	5162      	str	r2, [r4, r5]
 800ed16:	604b      	str	r3, [r1, #4]
 800ed18:	4638      	mov	r0, r7
 800ed1a:	f104 060b 	add.w	r6, r4, #11
 800ed1e:	f000 f829 	bl	800ed74 <__malloc_unlock>
 800ed22:	f026 0607 	bic.w	r6, r6, #7
 800ed26:	1d23      	adds	r3, r4, #4
 800ed28:	1af2      	subs	r2, r6, r3
 800ed2a:	d0ae      	beq.n	800ec8a <_malloc_r+0x22>
 800ed2c:	1b9b      	subs	r3, r3, r6
 800ed2e:	50a3      	str	r3, [r4, r2]
 800ed30:	e7ab      	b.n	800ec8a <_malloc_r+0x22>
 800ed32:	42a3      	cmp	r3, r4
 800ed34:	6862      	ldr	r2, [r4, #4]
 800ed36:	d1dd      	bne.n	800ecf4 <_malloc_r+0x8c>
 800ed38:	f8c8 2000 	str.w	r2, [r8]
 800ed3c:	e7ec      	b.n	800ed18 <_malloc_r+0xb0>
 800ed3e:	4623      	mov	r3, r4
 800ed40:	6864      	ldr	r4, [r4, #4]
 800ed42:	e7ac      	b.n	800ec9e <_malloc_r+0x36>
 800ed44:	4634      	mov	r4, r6
 800ed46:	6876      	ldr	r6, [r6, #4]
 800ed48:	e7b4      	b.n	800ecb4 <_malloc_r+0x4c>
 800ed4a:	4613      	mov	r3, r2
 800ed4c:	e7cc      	b.n	800ece8 <_malloc_r+0x80>
 800ed4e:	230c      	movs	r3, #12
 800ed50:	603b      	str	r3, [r7, #0]
 800ed52:	4638      	mov	r0, r7
 800ed54:	f000 f80e 	bl	800ed74 <__malloc_unlock>
 800ed58:	e797      	b.n	800ec8a <_malloc_r+0x22>
 800ed5a:	6025      	str	r5, [r4, #0]
 800ed5c:	e7dc      	b.n	800ed18 <_malloc_r+0xb0>
 800ed5e:	605b      	str	r3, [r3, #4]
 800ed60:	deff      	udf	#255	; 0xff
 800ed62:	bf00      	nop
 800ed64:	2000858c 	.word	0x2000858c

0800ed68 <__malloc_lock>:
 800ed68:	4801      	ldr	r0, [pc, #4]	; (800ed70 <__malloc_lock+0x8>)
 800ed6a:	f7ff bedb 	b.w	800eb24 <__retarget_lock_acquire_recursive>
 800ed6e:	bf00      	nop
 800ed70:	20008588 	.word	0x20008588

0800ed74 <__malloc_unlock>:
 800ed74:	4801      	ldr	r0, [pc, #4]	; (800ed7c <__malloc_unlock+0x8>)
 800ed76:	f7ff bed6 	b.w	800eb26 <__retarget_lock_release_recursive>
 800ed7a:	bf00      	nop
 800ed7c:	20008588 	.word	0x20008588

0800ed80 <__ssputs_r>:
 800ed80:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ed84:	688e      	ldr	r6, [r1, #8]
 800ed86:	461f      	mov	r7, r3
 800ed88:	42be      	cmp	r6, r7
 800ed8a:	680b      	ldr	r3, [r1, #0]
 800ed8c:	4682      	mov	sl, r0
 800ed8e:	460c      	mov	r4, r1
 800ed90:	4690      	mov	r8, r2
 800ed92:	d82c      	bhi.n	800edee <__ssputs_r+0x6e>
 800ed94:	898a      	ldrh	r2, [r1, #12]
 800ed96:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800ed9a:	d026      	beq.n	800edea <__ssputs_r+0x6a>
 800ed9c:	6965      	ldr	r5, [r4, #20]
 800ed9e:	6909      	ldr	r1, [r1, #16]
 800eda0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800eda4:	eba3 0901 	sub.w	r9, r3, r1
 800eda8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800edac:	1c7b      	adds	r3, r7, #1
 800edae:	444b      	add	r3, r9
 800edb0:	106d      	asrs	r5, r5, #1
 800edb2:	429d      	cmp	r5, r3
 800edb4:	bf38      	it	cc
 800edb6:	461d      	movcc	r5, r3
 800edb8:	0553      	lsls	r3, r2, #21
 800edba:	d527      	bpl.n	800ee0c <__ssputs_r+0x8c>
 800edbc:	4629      	mov	r1, r5
 800edbe:	f7ff ff53 	bl	800ec68 <_malloc_r>
 800edc2:	4606      	mov	r6, r0
 800edc4:	b360      	cbz	r0, 800ee20 <__ssputs_r+0xa0>
 800edc6:	6921      	ldr	r1, [r4, #16]
 800edc8:	464a      	mov	r2, r9
 800edca:	f7ff fead 	bl	800eb28 <memcpy>
 800edce:	89a3      	ldrh	r3, [r4, #12]
 800edd0:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800edd4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800edd8:	81a3      	strh	r3, [r4, #12]
 800edda:	6126      	str	r6, [r4, #16]
 800eddc:	6165      	str	r5, [r4, #20]
 800edde:	444e      	add	r6, r9
 800ede0:	eba5 0509 	sub.w	r5, r5, r9
 800ede4:	6026      	str	r6, [r4, #0]
 800ede6:	60a5      	str	r5, [r4, #8]
 800ede8:	463e      	mov	r6, r7
 800edea:	42be      	cmp	r6, r7
 800edec:	d900      	bls.n	800edf0 <__ssputs_r+0x70>
 800edee:	463e      	mov	r6, r7
 800edf0:	6820      	ldr	r0, [r4, #0]
 800edf2:	4632      	mov	r2, r6
 800edf4:	4641      	mov	r1, r8
 800edf6:	f7ff fe09 	bl	800ea0c <memmove>
 800edfa:	68a3      	ldr	r3, [r4, #8]
 800edfc:	1b9b      	subs	r3, r3, r6
 800edfe:	60a3      	str	r3, [r4, #8]
 800ee00:	6823      	ldr	r3, [r4, #0]
 800ee02:	4433      	add	r3, r6
 800ee04:	6023      	str	r3, [r4, #0]
 800ee06:	2000      	movs	r0, #0
 800ee08:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ee0c:	462a      	mov	r2, r5
 800ee0e:	f000 fd3e 	bl	800f88e <_realloc_r>
 800ee12:	4606      	mov	r6, r0
 800ee14:	2800      	cmp	r0, #0
 800ee16:	d1e0      	bne.n	800edda <__ssputs_r+0x5a>
 800ee18:	6921      	ldr	r1, [r4, #16]
 800ee1a:	4650      	mov	r0, sl
 800ee1c:	f7ff feb0 	bl	800eb80 <_free_r>
 800ee20:	230c      	movs	r3, #12
 800ee22:	f8ca 3000 	str.w	r3, [sl]
 800ee26:	89a3      	ldrh	r3, [r4, #12]
 800ee28:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ee2c:	81a3      	strh	r3, [r4, #12]
 800ee2e:	f04f 30ff 	mov.w	r0, #4294967295
 800ee32:	e7e9      	b.n	800ee08 <__ssputs_r+0x88>

0800ee34 <_svfiprintf_r>:
 800ee34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ee38:	4698      	mov	r8, r3
 800ee3a:	898b      	ldrh	r3, [r1, #12]
 800ee3c:	061b      	lsls	r3, r3, #24
 800ee3e:	b09d      	sub	sp, #116	; 0x74
 800ee40:	4607      	mov	r7, r0
 800ee42:	460d      	mov	r5, r1
 800ee44:	4614      	mov	r4, r2
 800ee46:	d50e      	bpl.n	800ee66 <_svfiprintf_r+0x32>
 800ee48:	690b      	ldr	r3, [r1, #16]
 800ee4a:	b963      	cbnz	r3, 800ee66 <_svfiprintf_r+0x32>
 800ee4c:	2140      	movs	r1, #64	; 0x40
 800ee4e:	f7ff ff0b 	bl	800ec68 <_malloc_r>
 800ee52:	6028      	str	r0, [r5, #0]
 800ee54:	6128      	str	r0, [r5, #16]
 800ee56:	b920      	cbnz	r0, 800ee62 <_svfiprintf_r+0x2e>
 800ee58:	230c      	movs	r3, #12
 800ee5a:	603b      	str	r3, [r7, #0]
 800ee5c:	f04f 30ff 	mov.w	r0, #4294967295
 800ee60:	e0d0      	b.n	800f004 <_svfiprintf_r+0x1d0>
 800ee62:	2340      	movs	r3, #64	; 0x40
 800ee64:	616b      	str	r3, [r5, #20]
 800ee66:	2300      	movs	r3, #0
 800ee68:	9309      	str	r3, [sp, #36]	; 0x24
 800ee6a:	2320      	movs	r3, #32
 800ee6c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800ee70:	f8cd 800c 	str.w	r8, [sp, #12]
 800ee74:	2330      	movs	r3, #48	; 0x30
 800ee76:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800f01c <_svfiprintf_r+0x1e8>
 800ee7a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800ee7e:	f04f 0901 	mov.w	r9, #1
 800ee82:	4623      	mov	r3, r4
 800ee84:	469a      	mov	sl, r3
 800ee86:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ee8a:	b10a      	cbz	r2, 800ee90 <_svfiprintf_r+0x5c>
 800ee8c:	2a25      	cmp	r2, #37	; 0x25
 800ee8e:	d1f9      	bne.n	800ee84 <_svfiprintf_r+0x50>
 800ee90:	ebba 0b04 	subs.w	fp, sl, r4
 800ee94:	d00b      	beq.n	800eeae <_svfiprintf_r+0x7a>
 800ee96:	465b      	mov	r3, fp
 800ee98:	4622      	mov	r2, r4
 800ee9a:	4629      	mov	r1, r5
 800ee9c:	4638      	mov	r0, r7
 800ee9e:	f7ff ff6f 	bl	800ed80 <__ssputs_r>
 800eea2:	3001      	adds	r0, #1
 800eea4:	f000 80a9 	beq.w	800effa <_svfiprintf_r+0x1c6>
 800eea8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800eeaa:	445a      	add	r2, fp
 800eeac:	9209      	str	r2, [sp, #36]	; 0x24
 800eeae:	f89a 3000 	ldrb.w	r3, [sl]
 800eeb2:	2b00      	cmp	r3, #0
 800eeb4:	f000 80a1 	beq.w	800effa <_svfiprintf_r+0x1c6>
 800eeb8:	2300      	movs	r3, #0
 800eeba:	f04f 32ff 	mov.w	r2, #4294967295
 800eebe:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800eec2:	f10a 0a01 	add.w	sl, sl, #1
 800eec6:	9304      	str	r3, [sp, #16]
 800eec8:	9307      	str	r3, [sp, #28]
 800eeca:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800eece:	931a      	str	r3, [sp, #104]	; 0x68
 800eed0:	4654      	mov	r4, sl
 800eed2:	2205      	movs	r2, #5
 800eed4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800eed8:	4850      	ldr	r0, [pc, #320]	; (800f01c <_svfiprintf_r+0x1e8>)
 800eeda:	f7f1 f991 	bl	8000200 <memchr>
 800eede:	9a04      	ldr	r2, [sp, #16]
 800eee0:	b9d8      	cbnz	r0, 800ef1a <_svfiprintf_r+0xe6>
 800eee2:	06d0      	lsls	r0, r2, #27
 800eee4:	bf44      	itt	mi
 800eee6:	2320      	movmi	r3, #32
 800eee8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800eeec:	0711      	lsls	r1, r2, #28
 800eeee:	bf44      	itt	mi
 800eef0:	232b      	movmi	r3, #43	; 0x2b
 800eef2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800eef6:	f89a 3000 	ldrb.w	r3, [sl]
 800eefa:	2b2a      	cmp	r3, #42	; 0x2a
 800eefc:	d015      	beq.n	800ef2a <_svfiprintf_r+0xf6>
 800eefe:	9a07      	ldr	r2, [sp, #28]
 800ef00:	4654      	mov	r4, sl
 800ef02:	2000      	movs	r0, #0
 800ef04:	f04f 0c0a 	mov.w	ip, #10
 800ef08:	4621      	mov	r1, r4
 800ef0a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ef0e:	3b30      	subs	r3, #48	; 0x30
 800ef10:	2b09      	cmp	r3, #9
 800ef12:	d94d      	bls.n	800efb0 <_svfiprintf_r+0x17c>
 800ef14:	b1b0      	cbz	r0, 800ef44 <_svfiprintf_r+0x110>
 800ef16:	9207      	str	r2, [sp, #28]
 800ef18:	e014      	b.n	800ef44 <_svfiprintf_r+0x110>
 800ef1a:	eba0 0308 	sub.w	r3, r0, r8
 800ef1e:	fa09 f303 	lsl.w	r3, r9, r3
 800ef22:	4313      	orrs	r3, r2
 800ef24:	9304      	str	r3, [sp, #16]
 800ef26:	46a2      	mov	sl, r4
 800ef28:	e7d2      	b.n	800eed0 <_svfiprintf_r+0x9c>
 800ef2a:	9b03      	ldr	r3, [sp, #12]
 800ef2c:	1d19      	adds	r1, r3, #4
 800ef2e:	681b      	ldr	r3, [r3, #0]
 800ef30:	9103      	str	r1, [sp, #12]
 800ef32:	2b00      	cmp	r3, #0
 800ef34:	bfbb      	ittet	lt
 800ef36:	425b      	neglt	r3, r3
 800ef38:	f042 0202 	orrlt.w	r2, r2, #2
 800ef3c:	9307      	strge	r3, [sp, #28]
 800ef3e:	9307      	strlt	r3, [sp, #28]
 800ef40:	bfb8      	it	lt
 800ef42:	9204      	strlt	r2, [sp, #16]
 800ef44:	7823      	ldrb	r3, [r4, #0]
 800ef46:	2b2e      	cmp	r3, #46	; 0x2e
 800ef48:	d10c      	bne.n	800ef64 <_svfiprintf_r+0x130>
 800ef4a:	7863      	ldrb	r3, [r4, #1]
 800ef4c:	2b2a      	cmp	r3, #42	; 0x2a
 800ef4e:	d134      	bne.n	800efba <_svfiprintf_r+0x186>
 800ef50:	9b03      	ldr	r3, [sp, #12]
 800ef52:	1d1a      	adds	r2, r3, #4
 800ef54:	681b      	ldr	r3, [r3, #0]
 800ef56:	9203      	str	r2, [sp, #12]
 800ef58:	2b00      	cmp	r3, #0
 800ef5a:	bfb8      	it	lt
 800ef5c:	f04f 33ff 	movlt.w	r3, #4294967295
 800ef60:	3402      	adds	r4, #2
 800ef62:	9305      	str	r3, [sp, #20]
 800ef64:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800f02c <_svfiprintf_r+0x1f8>
 800ef68:	7821      	ldrb	r1, [r4, #0]
 800ef6a:	2203      	movs	r2, #3
 800ef6c:	4650      	mov	r0, sl
 800ef6e:	f7f1 f947 	bl	8000200 <memchr>
 800ef72:	b138      	cbz	r0, 800ef84 <_svfiprintf_r+0x150>
 800ef74:	9b04      	ldr	r3, [sp, #16]
 800ef76:	eba0 000a 	sub.w	r0, r0, sl
 800ef7a:	2240      	movs	r2, #64	; 0x40
 800ef7c:	4082      	lsls	r2, r0
 800ef7e:	4313      	orrs	r3, r2
 800ef80:	3401      	adds	r4, #1
 800ef82:	9304      	str	r3, [sp, #16]
 800ef84:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ef88:	4825      	ldr	r0, [pc, #148]	; (800f020 <_svfiprintf_r+0x1ec>)
 800ef8a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800ef8e:	2206      	movs	r2, #6
 800ef90:	f7f1 f936 	bl	8000200 <memchr>
 800ef94:	2800      	cmp	r0, #0
 800ef96:	d038      	beq.n	800f00a <_svfiprintf_r+0x1d6>
 800ef98:	4b22      	ldr	r3, [pc, #136]	; (800f024 <_svfiprintf_r+0x1f0>)
 800ef9a:	bb1b      	cbnz	r3, 800efe4 <_svfiprintf_r+0x1b0>
 800ef9c:	9b03      	ldr	r3, [sp, #12]
 800ef9e:	3307      	adds	r3, #7
 800efa0:	f023 0307 	bic.w	r3, r3, #7
 800efa4:	3308      	adds	r3, #8
 800efa6:	9303      	str	r3, [sp, #12]
 800efa8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800efaa:	4433      	add	r3, r6
 800efac:	9309      	str	r3, [sp, #36]	; 0x24
 800efae:	e768      	b.n	800ee82 <_svfiprintf_r+0x4e>
 800efb0:	fb0c 3202 	mla	r2, ip, r2, r3
 800efb4:	460c      	mov	r4, r1
 800efb6:	2001      	movs	r0, #1
 800efb8:	e7a6      	b.n	800ef08 <_svfiprintf_r+0xd4>
 800efba:	2300      	movs	r3, #0
 800efbc:	3401      	adds	r4, #1
 800efbe:	9305      	str	r3, [sp, #20]
 800efc0:	4619      	mov	r1, r3
 800efc2:	f04f 0c0a 	mov.w	ip, #10
 800efc6:	4620      	mov	r0, r4
 800efc8:	f810 2b01 	ldrb.w	r2, [r0], #1
 800efcc:	3a30      	subs	r2, #48	; 0x30
 800efce:	2a09      	cmp	r2, #9
 800efd0:	d903      	bls.n	800efda <_svfiprintf_r+0x1a6>
 800efd2:	2b00      	cmp	r3, #0
 800efd4:	d0c6      	beq.n	800ef64 <_svfiprintf_r+0x130>
 800efd6:	9105      	str	r1, [sp, #20]
 800efd8:	e7c4      	b.n	800ef64 <_svfiprintf_r+0x130>
 800efda:	fb0c 2101 	mla	r1, ip, r1, r2
 800efde:	4604      	mov	r4, r0
 800efe0:	2301      	movs	r3, #1
 800efe2:	e7f0      	b.n	800efc6 <_svfiprintf_r+0x192>
 800efe4:	ab03      	add	r3, sp, #12
 800efe6:	9300      	str	r3, [sp, #0]
 800efe8:	462a      	mov	r2, r5
 800efea:	4b0f      	ldr	r3, [pc, #60]	; (800f028 <_svfiprintf_r+0x1f4>)
 800efec:	a904      	add	r1, sp, #16
 800efee:	4638      	mov	r0, r7
 800eff0:	f3af 8000 	nop.w
 800eff4:	1c42      	adds	r2, r0, #1
 800eff6:	4606      	mov	r6, r0
 800eff8:	d1d6      	bne.n	800efa8 <_svfiprintf_r+0x174>
 800effa:	89ab      	ldrh	r3, [r5, #12]
 800effc:	065b      	lsls	r3, r3, #25
 800effe:	f53f af2d 	bmi.w	800ee5c <_svfiprintf_r+0x28>
 800f002:	9809      	ldr	r0, [sp, #36]	; 0x24
 800f004:	b01d      	add	sp, #116	; 0x74
 800f006:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f00a:	ab03      	add	r3, sp, #12
 800f00c:	9300      	str	r3, [sp, #0]
 800f00e:	462a      	mov	r2, r5
 800f010:	4b05      	ldr	r3, [pc, #20]	; (800f028 <_svfiprintf_r+0x1f4>)
 800f012:	a904      	add	r1, sp, #16
 800f014:	4638      	mov	r0, r7
 800f016:	f000 f9bd 	bl	800f394 <_printf_i>
 800f01a:	e7eb      	b.n	800eff4 <_svfiprintf_r+0x1c0>
 800f01c:	08012561 	.word	0x08012561
 800f020:	0801256b 	.word	0x0801256b
 800f024:	00000000 	.word	0x00000000
 800f028:	0800ed81 	.word	0x0800ed81
 800f02c:	08012567 	.word	0x08012567

0800f030 <__sfputc_r>:
 800f030:	6893      	ldr	r3, [r2, #8]
 800f032:	3b01      	subs	r3, #1
 800f034:	2b00      	cmp	r3, #0
 800f036:	b410      	push	{r4}
 800f038:	6093      	str	r3, [r2, #8]
 800f03a:	da08      	bge.n	800f04e <__sfputc_r+0x1e>
 800f03c:	6994      	ldr	r4, [r2, #24]
 800f03e:	42a3      	cmp	r3, r4
 800f040:	db01      	blt.n	800f046 <__sfputc_r+0x16>
 800f042:	290a      	cmp	r1, #10
 800f044:	d103      	bne.n	800f04e <__sfputc_r+0x1e>
 800f046:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f04a:	f7ff bc3a 	b.w	800e8c2 <__swbuf_r>
 800f04e:	6813      	ldr	r3, [r2, #0]
 800f050:	1c58      	adds	r0, r3, #1
 800f052:	6010      	str	r0, [r2, #0]
 800f054:	7019      	strb	r1, [r3, #0]
 800f056:	4608      	mov	r0, r1
 800f058:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f05c:	4770      	bx	lr

0800f05e <__sfputs_r>:
 800f05e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f060:	4606      	mov	r6, r0
 800f062:	460f      	mov	r7, r1
 800f064:	4614      	mov	r4, r2
 800f066:	18d5      	adds	r5, r2, r3
 800f068:	42ac      	cmp	r4, r5
 800f06a:	d101      	bne.n	800f070 <__sfputs_r+0x12>
 800f06c:	2000      	movs	r0, #0
 800f06e:	e007      	b.n	800f080 <__sfputs_r+0x22>
 800f070:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f074:	463a      	mov	r2, r7
 800f076:	4630      	mov	r0, r6
 800f078:	f7ff ffda 	bl	800f030 <__sfputc_r>
 800f07c:	1c43      	adds	r3, r0, #1
 800f07e:	d1f3      	bne.n	800f068 <__sfputs_r+0xa>
 800f080:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800f084 <_vfiprintf_r>:
 800f084:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f088:	460d      	mov	r5, r1
 800f08a:	b09d      	sub	sp, #116	; 0x74
 800f08c:	4614      	mov	r4, r2
 800f08e:	4698      	mov	r8, r3
 800f090:	4606      	mov	r6, r0
 800f092:	b118      	cbz	r0, 800f09c <_vfiprintf_r+0x18>
 800f094:	6a03      	ldr	r3, [r0, #32]
 800f096:	b90b      	cbnz	r3, 800f09c <_vfiprintf_r+0x18>
 800f098:	f7ff fb0c 	bl	800e6b4 <__sinit>
 800f09c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800f09e:	07d9      	lsls	r1, r3, #31
 800f0a0:	d405      	bmi.n	800f0ae <_vfiprintf_r+0x2a>
 800f0a2:	89ab      	ldrh	r3, [r5, #12]
 800f0a4:	059a      	lsls	r2, r3, #22
 800f0a6:	d402      	bmi.n	800f0ae <_vfiprintf_r+0x2a>
 800f0a8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800f0aa:	f7ff fd3b 	bl	800eb24 <__retarget_lock_acquire_recursive>
 800f0ae:	89ab      	ldrh	r3, [r5, #12]
 800f0b0:	071b      	lsls	r3, r3, #28
 800f0b2:	d501      	bpl.n	800f0b8 <_vfiprintf_r+0x34>
 800f0b4:	692b      	ldr	r3, [r5, #16]
 800f0b6:	b99b      	cbnz	r3, 800f0e0 <_vfiprintf_r+0x5c>
 800f0b8:	4629      	mov	r1, r5
 800f0ba:	4630      	mov	r0, r6
 800f0bc:	f7ff fc3e 	bl	800e93c <__swsetup_r>
 800f0c0:	b170      	cbz	r0, 800f0e0 <_vfiprintf_r+0x5c>
 800f0c2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800f0c4:	07dc      	lsls	r4, r3, #31
 800f0c6:	d504      	bpl.n	800f0d2 <_vfiprintf_r+0x4e>
 800f0c8:	f04f 30ff 	mov.w	r0, #4294967295
 800f0cc:	b01d      	add	sp, #116	; 0x74
 800f0ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f0d2:	89ab      	ldrh	r3, [r5, #12]
 800f0d4:	0598      	lsls	r0, r3, #22
 800f0d6:	d4f7      	bmi.n	800f0c8 <_vfiprintf_r+0x44>
 800f0d8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800f0da:	f7ff fd24 	bl	800eb26 <__retarget_lock_release_recursive>
 800f0de:	e7f3      	b.n	800f0c8 <_vfiprintf_r+0x44>
 800f0e0:	2300      	movs	r3, #0
 800f0e2:	9309      	str	r3, [sp, #36]	; 0x24
 800f0e4:	2320      	movs	r3, #32
 800f0e6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800f0ea:	f8cd 800c 	str.w	r8, [sp, #12]
 800f0ee:	2330      	movs	r3, #48	; 0x30
 800f0f0:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800f2a4 <_vfiprintf_r+0x220>
 800f0f4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800f0f8:	f04f 0901 	mov.w	r9, #1
 800f0fc:	4623      	mov	r3, r4
 800f0fe:	469a      	mov	sl, r3
 800f100:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f104:	b10a      	cbz	r2, 800f10a <_vfiprintf_r+0x86>
 800f106:	2a25      	cmp	r2, #37	; 0x25
 800f108:	d1f9      	bne.n	800f0fe <_vfiprintf_r+0x7a>
 800f10a:	ebba 0b04 	subs.w	fp, sl, r4
 800f10e:	d00b      	beq.n	800f128 <_vfiprintf_r+0xa4>
 800f110:	465b      	mov	r3, fp
 800f112:	4622      	mov	r2, r4
 800f114:	4629      	mov	r1, r5
 800f116:	4630      	mov	r0, r6
 800f118:	f7ff ffa1 	bl	800f05e <__sfputs_r>
 800f11c:	3001      	adds	r0, #1
 800f11e:	f000 80a9 	beq.w	800f274 <_vfiprintf_r+0x1f0>
 800f122:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800f124:	445a      	add	r2, fp
 800f126:	9209      	str	r2, [sp, #36]	; 0x24
 800f128:	f89a 3000 	ldrb.w	r3, [sl]
 800f12c:	2b00      	cmp	r3, #0
 800f12e:	f000 80a1 	beq.w	800f274 <_vfiprintf_r+0x1f0>
 800f132:	2300      	movs	r3, #0
 800f134:	f04f 32ff 	mov.w	r2, #4294967295
 800f138:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800f13c:	f10a 0a01 	add.w	sl, sl, #1
 800f140:	9304      	str	r3, [sp, #16]
 800f142:	9307      	str	r3, [sp, #28]
 800f144:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800f148:	931a      	str	r3, [sp, #104]	; 0x68
 800f14a:	4654      	mov	r4, sl
 800f14c:	2205      	movs	r2, #5
 800f14e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f152:	4854      	ldr	r0, [pc, #336]	; (800f2a4 <_vfiprintf_r+0x220>)
 800f154:	f7f1 f854 	bl	8000200 <memchr>
 800f158:	9a04      	ldr	r2, [sp, #16]
 800f15a:	b9d8      	cbnz	r0, 800f194 <_vfiprintf_r+0x110>
 800f15c:	06d1      	lsls	r1, r2, #27
 800f15e:	bf44      	itt	mi
 800f160:	2320      	movmi	r3, #32
 800f162:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f166:	0713      	lsls	r3, r2, #28
 800f168:	bf44      	itt	mi
 800f16a:	232b      	movmi	r3, #43	; 0x2b
 800f16c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f170:	f89a 3000 	ldrb.w	r3, [sl]
 800f174:	2b2a      	cmp	r3, #42	; 0x2a
 800f176:	d015      	beq.n	800f1a4 <_vfiprintf_r+0x120>
 800f178:	9a07      	ldr	r2, [sp, #28]
 800f17a:	4654      	mov	r4, sl
 800f17c:	2000      	movs	r0, #0
 800f17e:	f04f 0c0a 	mov.w	ip, #10
 800f182:	4621      	mov	r1, r4
 800f184:	f811 3b01 	ldrb.w	r3, [r1], #1
 800f188:	3b30      	subs	r3, #48	; 0x30
 800f18a:	2b09      	cmp	r3, #9
 800f18c:	d94d      	bls.n	800f22a <_vfiprintf_r+0x1a6>
 800f18e:	b1b0      	cbz	r0, 800f1be <_vfiprintf_r+0x13a>
 800f190:	9207      	str	r2, [sp, #28]
 800f192:	e014      	b.n	800f1be <_vfiprintf_r+0x13a>
 800f194:	eba0 0308 	sub.w	r3, r0, r8
 800f198:	fa09 f303 	lsl.w	r3, r9, r3
 800f19c:	4313      	orrs	r3, r2
 800f19e:	9304      	str	r3, [sp, #16]
 800f1a0:	46a2      	mov	sl, r4
 800f1a2:	e7d2      	b.n	800f14a <_vfiprintf_r+0xc6>
 800f1a4:	9b03      	ldr	r3, [sp, #12]
 800f1a6:	1d19      	adds	r1, r3, #4
 800f1a8:	681b      	ldr	r3, [r3, #0]
 800f1aa:	9103      	str	r1, [sp, #12]
 800f1ac:	2b00      	cmp	r3, #0
 800f1ae:	bfbb      	ittet	lt
 800f1b0:	425b      	neglt	r3, r3
 800f1b2:	f042 0202 	orrlt.w	r2, r2, #2
 800f1b6:	9307      	strge	r3, [sp, #28]
 800f1b8:	9307      	strlt	r3, [sp, #28]
 800f1ba:	bfb8      	it	lt
 800f1bc:	9204      	strlt	r2, [sp, #16]
 800f1be:	7823      	ldrb	r3, [r4, #0]
 800f1c0:	2b2e      	cmp	r3, #46	; 0x2e
 800f1c2:	d10c      	bne.n	800f1de <_vfiprintf_r+0x15a>
 800f1c4:	7863      	ldrb	r3, [r4, #1]
 800f1c6:	2b2a      	cmp	r3, #42	; 0x2a
 800f1c8:	d134      	bne.n	800f234 <_vfiprintf_r+0x1b0>
 800f1ca:	9b03      	ldr	r3, [sp, #12]
 800f1cc:	1d1a      	adds	r2, r3, #4
 800f1ce:	681b      	ldr	r3, [r3, #0]
 800f1d0:	9203      	str	r2, [sp, #12]
 800f1d2:	2b00      	cmp	r3, #0
 800f1d4:	bfb8      	it	lt
 800f1d6:	f04f 33ff 	movlt.w	r3, #4294967295
 800f1da:	3402      	adds	r4, #2
 800f1dc:	9305      	str	r3, [sp, #20]
 800f1de:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800f2b4 <_vfiprintf_r+0x230>
 800f1e2:	7821      	ldrb	r1, [r4, #0]
 800f1e4:	2203      	movs	r2, #3
 800f1e6:	4650      	mov	r0, sl
 800f1e8:	f7f1 f80a 	bl	8000200 <memchr>
 800f1ec:	b138      	cbz	r0, 800f1fe <_vfiprintf_r+0x17a>
 800f1ee:	9b04      	ldr	r3, [sp, #16]
 800f1f0:	eba0 000a 	sub.w	r0, r0, sl
 800f1f4:	2240      	movs	r2, #64	; 0x40
 800f1f6:	4082      	lsls	r2, r0
 800f1f8:	4313      	orrs	r3, r2
 800f1fa:	3401      	adds	r4, #1
 800f1fc:	9304      	str	r3, [sp, #16]
 800f1fe:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f202:	4829      	ldr	r0, [pc, #164]	; (800f2a8 <_vfiprintf_r+0x224>)
 800f204:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800f208:	2206      	movs	r2, #6
 800f20a:	f7f0 fff9 	bl	8000200 <memchr>
 800f20e:	2800      	cmp	r0, #0
 800f210:	d03f      	beq.n	800f292 <_vfiprintf_r+0x20e>
 800f212:	4b26      	ldr	r3, [pc, #152]	; (800f2ac <_vfiprintf_r+0x228>)
 800f214:	bb1b      	cbnz	r3, 800f25e <_vfiprintf_r+0x1da>
 800f216:	9b03      	ldr	r3, [sp, #12]
 800f218:	3307      	adds	r3, #7
 800f21a:	f023 0307 	bic.w	r3, r3, #7
 800f21e:	3308      	adds	r3, #8
 800f220:	9303      	str	r3, [sp, #12]
 800f222:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f224:	443b      	add	r3, r7
 800f226:	9309      	str	r3, [sp, #36]	; 0x24
 800f228:	e768      	b.n	800f0fc <_vfiprintf_r+0x78>
 800f22a:	fb0c 3202 	mla	r2, ip, r2, r3
 800f22e:	460c      	mov	r4, r1
 800f230:	2001      	movs	r0, #1
 800f232:	e7a6      	b.n	800f182 <_vfiprintf_r+0xfe>
 800f234:	2300      	movs	r3, #0
 800f236:	3401      	adds	r4, #1
 800f238:	9305      	str	r3, [sp, #20]
 800f23a:	4619      	mov	r1, r3
 800f23c:	f04f 0c0a 	mov.w	ip, #10
 800f240:	4620      	mov	r0, r4
 800f242:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f246:	3a30      	subs	r2, #48	; 0x30
 800f248:	2a09      	cmp	r2, #9
 800f24a:	d903      	bls.n	800f254 <_vfiprintf_r+0x1d0>
 800f24c:	2b00      	cmp	r3, #0
 800f24e:	d0c6      	beq.n	800f1de <_vfiprintf_r+0x15a>
 800f250:	9105      	str	r1, [sp, #20]
 800f252:	e7c4      	b.n	800f1de <_vfiprintf_r+0x15a>
 800f254:	fb0c 2101 	mla	r1, ip, r1, r2
 800f258:	4604      	mov	r4, r0
 800f25a:	2301      	movs	r3, #1
 800f25c:	e7f0      	b.n	800f240 <_vfiprintf_r+0x1bc>
 800f25e:	ab03      	add	r3, sp, #12
 800f260:	9300      	str	r3, [sp, #0]
 800f262:	462a      	mov	r2, r5
 800f264:	4b12      	ldr	r3, [pc, #72]	; (800f2b0 <_vfiprintf_r+0x22c>)
 800f266:	a904      	add	r1, sp, #16
 800f268:	4630      	mov	r0, r6
 800f26a:	f3af 8000 	nop.w
 800f26e:	4607      	mov	r7, r0
 800f270:	1c78      	adds	r0, r7, #1
 800f272:	d1d6      	bne.n	800f222 <_vfiprintf_r+0x19e>
 800f274:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800f276:	07d9      	lsls	r1, r3, #31
 800f278:	d405      	bmi.n	800f286 <_vfiprintf_r+0x202>
 800f27a:	89ab      	ldrh	r3, [r5, #12]
 800f27c:	059a      	lsls	r2, r3, #22
 800f27e:	d402      	bmi.n	800f286 <_vfiprintf_r+0x202>
 800f280:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800f282:	f7ff fc50 	bl	800eb26 <__retarget_lock_release_recursive>
 800f286:	89ab      	ldrh	r3, [r5, #12]
 800f288:	065b      	lsls	r3, r3, #25
 800f28a:	f53f af1d 	bmi.w	800f0c8 <_vfiprintf_r+0x44>
 800f28e:	9809      	ldr	r0, [sp, #36]	; 0x24
 800f290:	e71c      	b.n	800f0cc <_vfiprintf_r+0x48>
 800f292:	ab03      	add	r3, sp, #12
 800f294:	9300      	str	r3, [sp, #0]
 800f296:	462a      	mov	r2, r5
 800f298:	4b05      	ldr	r3, [pc, #20]	; (800f2b0 <_vfiprintf_r+0x22c>)
 800f29a:	a904      	add	r1, sp, #16
 800f29c:	4630      	mov	r0, r6
 800f29e:	f000 f879 	bl	800f394 <_printf_i>
 800f2a2:	e7e4      	b.n	800f26e <_vfiprintf_r+0x1ea>
 800f2a4:	08012561 	.word	0x08012561
 800f2a8:	0801256b 	.word	0x0801256b
 800f2ac:	00000000 	.word	0x00000000
 800f2b0:	0800f05f 	.word	0x0800f05f
 800f2b4:	08012567 	.word	0x08012567

0800f2b8 <_printf_common>:
 800f2b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f2bc:	4616      	mov	r6, r2
 800f2be:	4699      	mov	r9, r3
 800f2c0:	688a      	ldr	r2, [r1, #8]
 800f2c2:	690b      	ldr	r3, [r1, #16]
 800f2c4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800f2c8:	4293      	cmp	r3, r2
 800f2ca:	bfb8      	it	lt
 800f2cc:	4613      	movlt	r3, r2
 800f2ce:	6033      	str	r3, [r6, #0]
 800f2d0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800f2d4:	4607      	mov	r7, r0
 800f2d6:	460c      	mov	r4, r1
 800f2d8:	b10a      	cbz	r2, 800f2de <_printf_common+0x26>
 800f2da:	3301      	adds	r3, #1
 800f2dc:	6033      	str	r3, [r6, #0]
 800f2de:	6823      	ldr	r3, [r4, #0]
 800f2e0:	0699      	lsls	r1, r3, #26
 800f2e2:	bf42      	ittt	mi
 800f2e4:	6833      	ldrmi	r3, [r6, #0]
 800f2e6:	3302      	addmi	r3, #2
 800f2e8:	6033      	strmi	r3, [r6, #0]
 800f2ea:	6825      	ldr	r5, [r4, #0]
 800f2ec:	f015 0506 	ands.w	r5, r5, #6
 800f2f0:	d106      	bne.n	800f300 <_printf_common+0x48>
 800f2f2:	f104 0a19 	add.w	sl, r4, #25
 800f2f6:	68e3      	ldr	r3, [r4, #12]
 800f2f8:	6832      	ldr	r2, [r6, #0]
 800f2fa:	1a9b      	subs	r3, r3, r2
 800f2fc:	42ab      	cmp	r3, r5
 800f2fe:	dc26      	bgt.n	800f34e <_printf_common+0x96>
 800f300:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800f304:	1e13      	subs	r3, r2, #0
 800f306:	6822      	ldr	r2, [r4, #0]
 800f308:	bf18      	it	ne
 800f30a:	2301      	movne	r3, #1
 800f30c:	0692      	lsls	r2, r2, #26
 800f30e:	d42b      	bmi.n	800f368 <_printf_common+0xb0>
 800f310:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800f314:	4649      	mov	r1, r9
 800f316:	4638      	mov	r0, r7
 800f318:	47c0      	blx	r8
 800f31a:	3001      	adds	r0, #1
 800f31c:	d01e      	beq.n	800f35c <_printf_common+0xa4>
 800f31e:	6823      	ldr	r3, [r4, #0]
 800f320:	6922      	ldr	r2, [r4, #16]
 800f322:	f003 0306 	and.w	r3, r3, #6
 800f326:	2b04      	cmp	r3, #4
 800f328:	bf02      	ittt	eq
 800f32a:	68e5      	ldreq	r5, [r4, #12]
 800f32c:	6833      	ldreq	r3, [r6, #0]
 800f32e:	1aed      	subeq	r5, r5, r3
 800f330:	68a3      	ldr	r3, [r4, #8]
 800f332:	bf0c      	ite	eq
 800f334:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800f338:	2500      	movne	r5, #0
 800f33a:	4293      	cmp	r3, r2
 800f33c:	bfc4      	itt	gt
 800f33e:	1a9b      	subgt	r3, r3, r2
 800f340:	18ed      	addgt	r5, r5, r3
 800f342:	2600      	movs	r6, #0
 800f344:	341a      	adds	r4, #26
 800f346:	42b5      	cmp	r5, r6
 800f348:	d11a      	bne.n	800f380 <_printf_common+0xc8>
 800f34a:	2000      	movs	r0, #0
 800f34c:	e008      	b.n	800f360 <_printf_common+0xa8>
 800f34e:	2301      	movs	r3, #1
 800f350:	4652      	mov	r2, sl
 800f352:	4649      	mov	r1, r9
 800f354:	4638      	mov	r0, r7
 800f356:	47c0      	blx	r8
 800f358:	3001      	adds	r0, #1
 800f35a:	d103      	bne.n	800f364 <_printf_common+0xac>
 800f35c:	f04f 30ff 	mov.w	r0, #4294967295
 800f360:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f364:	3501      	adds	r5, #1
 800f366:	e7c6      	b.n	800f2f6 <_printf_common+0x3e>
 800f368:	18e1      	adds	r1, r4, r3
 800f36a:	1c5a      	adds	r2, r3, #1
 800f36c:	2030      	movs	r0, #48	; 0x30
 800f36e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800f372:	4422      	add	r2, r4
 800f374:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800f378:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800f37c:	3302      	adds	r3, #2
 800f37e:	e7c7      	b.n	800f310 <_printf_common+0x58>
 800f380:	2301      	movs	r3, #1
 800f382:	4622      	mov	r2, r4
 800f384:	4649      	mov	r1, r9
 800f386:	4638      	mov	r0, r7
 800f388:	47c0      	blx	r8
 800f38a:	3001      	adds	r0, #1
 800f38c:	d0e6      	beq.n	800f35c <_printf_common+0xa4>
 800f38e:	3601      	adds	r6, #1
 800f390:	e7d9      	b.n	800f346 <_printf_common+0x8e>
	...

0800f394 <_printf_i>:
 800f394:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800f398:	7e0f      	ldrb	r7, [r1, #24]
 800f39a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800f39c:	2f78      	cmp	r7, #120	; 0x78
 800f39e:	4691      	mov	r9, r2
 800f3a0:	4680      	mov	r8, r0
 800f3a2:	460c      	mov	r4, r1
 800f3a4:	469a      	mov	sl, r3
 800f3a6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800f3aa:	d807      	bhi.n	800f3bc <_printf_i+0x28>
 800f3ac:	2f62      	cmp	r7, #98	; 0x62
 800f3ae:	d80a      	bhi.n	800f3c6 <_printf_i+0x32>
 800f3b0:	2f00      	cmp	r7, #0
 800f3b2:	f000 80d4 	beq.w	800f55e <_printf_i+0x1ca>
 800f3b6:	2f58      	cmp	r7, #88	; 0x58
 800f3b8:	f000 80c0 	beq.w	800f53c <_printf_i+0x1a8>
 800f3bc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800f3c0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800f3c4:	e03a      	b.n	800f43c <_printf_i+0xa8>
 800f3c6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800f3ca:	2b15      	cmp	r3, #21
 800f3cc:	d8f6      	bhi.n	800f3bc <_printf_i+0x28>
 800f3ce:	a101      	add	r1, pc, #4	; (adr r1, 800f3d4 <_printf_i+0x40>)
 800f3d0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800f3d4:	0800f42d 	.word	0x0800f42d
 800f3d8:	0800f441 	.word	0x0800f441
 800f3dc:	0800f3bd 	.word	0x0800f3bd
 800f3e0:	0800f3bd 	.word	0x0800f3bd
 800f3e4:	0800f3bd 	.word	0x0800f3bd
 800f3e8:	0800f3bd 	.word	0x0800f3bd
 800f3ec:	0800f441 	.word	0x0800f441
 800f3f0:	0800f3bd 	.word	0x0800f3bd
 800f3f4:	0800f3bd 	.word	0x0800f3bd
 800f3f8:	0800f3bd 	.word	0x0800f3bd
 800f3fc:	0800f3bd 	.word	0x0800f3bd
 800f400:	0800f545 	.word	0x0800f545
 800f404:	0800f46d 	.word	0x0800f46d
 800f408:	0800f4ff 	.word	0x0800f4ff
 800f40c:	0800f3bd 	.word	0x0800f3bd
 800f410:	0800f3bd 	.word	0x0800f3bd
 800f414:	0800f567 	.word	0x0800f567
 800f418:	0800f3bd 	.word	0x0800f3bd
 800f41c:	0800f46d 	.word	0x0800f46d
 800f420:	0800f3bd 	.word	0x0800f3bd
 800f424:	0800f3bd 	.word	0x0800f3bd
 800f428:	0800f507 	.word	0x0800f507
 800f42c:	682b      	ldr	r3, [r5, #0]
 800f42e:	1d1a      	adds	r2, r3, #4
 800f430:	681b      	ldr	r3, [r3, #0]
 800f432:	602a      	str	r2, [r5, #0]
 800f434:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800f438:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800f43c:	2301      	movs	r3, #1
 800f43e:	e09f      	b.n	800f580 <_printf_i+0x1ec>
 800f440:	6820      	ldr	r0, [r4, #0]
 800f442:	682b      	ldr	r3, [r5, #0]
 800f444:	0607      	lsls	r7, r0, #24
 800f446:	f103 0104 	add.w	r1, r3, #4
 800f44a:	6029      	str	r1, [r5, #0]
 800f44c:	d501      	bpl.n	800f452 <_printf_i+0xbe>
 800f44e:	681e      	ldr	r6, [r3, #0]
 800f450:	e003      	b.n	800f45a <_printf_i+0xc6>
 800f452:	0646      	lsls	r6, r0, #25
 800f454:	d5fb      	bpl.n	800f44e <_printf_i+0xba>
 800f456:	f9b3 6000 	ldrsh.w	r6, [r3]
 800f45a:	2e00      	cmp	r6, #0
 800f45c:	da03      	bge.n	800f466 <_printf_i+0xd2>
 800f45e:	232d      	movs	r3, #45	; 0x2d
 800f460:	4276      	negs	r6, r6
 800f462:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800f466:	485a      	ldr	r0, [pc, #360]	; (800f5d0 <_printf_i+0x23c>)
 800f468:	230a      	movs	r3, #10
 800f46a:	e012      	b.n	800f492 <_printf_i+0xfe>
 800f46c:	682b      	ldr	r3, [r5, #0]
 800f46e:	6820      	ldr	r0, [r4, #0]
 800f470:	1d19      	adds	r1, r3, #4
 800f472:	6029      	str	r1, [r5, #0]
 800f474:	0605      	lsls	r5, r0, #24
 800f476:	d501      	bpl.n	800f47c <_printf_i+0xe8>
 800f478:	681e      	ldr	r6, [r3, #0]
 800f47a:	e002      	b.n	800f482 <_printf_i+0xee>
 800f47c:	0641      	lsls	r1, r0, #25
 800f47e:	d5fb      	bpl.n	800f478 <_printf_i+0xe4>
 800f480:	881e      	ldrh	r6, [r3, #0]
 800f482:	4853      	ldr	r0, [pc, #332]	; (800f5d0 <_printf_i+0x23c>)
 800f484:	2f6f      	cmp	r7, #111	; 0x6f
 800f486:	bf0c      	ite	eq
 800f488:	2308      	moveq	r3, #8
 800f48a:	230a      	movne	r3, #10
 800f48c:	2100      	movs	r1, #0
 800f48e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800f492:	6865      	ldr	r5, [r4, #4]
 800f494:	60a5      	str	r5, [r4, #8]
 800f496:	2d00      	cmp	r5, #0
 800f498:	bfa2      	ittt	ge
 800f49a:	6821      	ldrge	r1, [r4, #0]
 800f49c:	f021 0104 	bicge.w	r1, r1, #4
 800f4a0:	6021      	strge	r1, [r4, #0]
 800f4a2:	b90e      	cbnz	r6, 800f4a8 <_printf_i+0x114>
 800f4a4:	2d00      	cmp	r5, #0
 800f4a6:	d04b      	beq.n	800f540 <_printf_i+0x1ac>
 800f4a8:	4615      	mov	r5, r2
 800f4aa:	fbb6 f1f3 	udiv	r1, r6, r3
 800f4ae:	fb03 6711 	mls	r7, r3, r1, r6
 800f4b2:	5dc7      	ldrb	r7, [r0, r7]
 800f4b4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800f4b8:	4637      	mov	r7, r6
 800f4ba:	42bb      	cmp	r3, r7
 800f4bc:	460e      	mov	r6, r1
 800f4be:	d9f4      	bls.n	800f4aa <_printf_i+0x116>
 800f4c0:	2b08      	cmp	r3, #8
 800f4c2:	d10b      	bne.n	800f4dc <_printf_i+0x148>
 800f4c4:	6823      	ldr	r3, [r4, #0]
 800f4c6:	07de      	lsls	r6, r3, #31
 800f4c8:	d508      	bpl.n	800f4dc <_printf_i+0x148>
 800f4ca:	6923      	ldr	r3, [r4, #16]
 800f4cc:	6861      	ldr	r1, [r4, #4]
 800f4ce:	4299      	cmp	r1, r3
 800f4d0:	bfde      	ittt	le
 800f4d2:	2330      	movle	r3, #48	; 0x30
 800f4d4:	f805 3c01 	strble.w	r3, [r5, #-1]
 800f4d8:	f105 35ff 	addle.w	r5, r5, #4294967295
 800f4dc:	1b52      	subs	r2, r2, r5
 800f4de:	6122      	str	r2, [r4, #16]
 800f4e0:	f8cd a000 	str.w	sl, [sp]
 800f4e4:	464b      	mov	r3, r9
 800f4e6:	aa03      	add	r2, sp, #12
 800f4e8:	4621      	mov	r1, r4
 800f4ea:	4640      	mov	r0, r8
 800f4ec:	f7ff fee4 	bl	800f2b8 <_printf_common>
 800f4f0:	3001      	adds	r0, #1
 800f4f2:	d14a      	bne.n	800f58a <_printf_i+0x1f6>
 800f4f4:	f04f 30ff 	mov.w	r0, #4294967295
 800f4f8:	b004      	add	sp, #16
 800f4fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f4fe:	6823      	ldr	r3, [r4, #0]
 800f500:	f043 0320 	orr.w	r3, r3, #32
 800f504:	6023      	str	r3, [r4, #0]
 800f506:	4833      	ldr	r0, [pc, #204]	; (800f5d4 <_printf_i+0x240>)
 800f508:	2778      	movs	r7, #120	; 0x78
 800f50a:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800f50e:	6823      	ldr	r3, [r4, #0]
 800f510:	6829      	ldr	r1, [r5, #0]
 800f512:	061f      	lsls	r7, r3, #24
 800f514:	f851 6b04 	ldr.w	r6, [r1], #4
 800f518:	d402      	bmi.n	800f520 <_printf_i+0x18c>
 800f51a:	065f      	lsls	r7, r3, #25
 800f51c:	bf48      	it	mi
 800f51e:	b2b6      	uxthmi	r6, r6
 800f520:	07df      	lsls	r7, r3, #31
 800f522:	bf48      	it	mi
 800f524:	f043 0320 	orrmi.w	r3, r3, #32
 800f528:	6029      	str	r1, [r5, #0]
 800f52a:	bf48      	it	mi
 800f52c:	6023      	strmi	r3, [r4, #0]
 800f52e:	b91e      	cbnz	r6, 800f538 <_printf_i+0x1a4>
 800f530:	6823      	ldr	r3, [r4, #0]
 800f532:	f023 0320 	bic.w	r3, r3, #32
 800f536:	6023      	str	r3, [r4, #0]
 800f538:	2310      	movs	r3, #16
 800f53a:	e7a7      	b.n	800f48c <_printf_i+0xf8>
 800f53c:	4824      	ldr	r0, [pc, #144]	; (800f5d0 <_printf_i+0x23c>)
 800f53e:	e7e4      	b.n	800f50a <_printf_i+0x176>
 800f540:	4615      	mov	r5, r2
 800f542:	e7bd      	b.n	800f4c0 <_printf_i+0x12c>
 800f544:	682b      	ldr	r3, [r5, #0]
 800f546:	6826      	ldr	r6, [r4, #0]
 800f548:	6961      	ldr	r1, [r4, #20]
 800f54a:	1d18      	adds	r0, r3, #4
 800f54c:	6028      	str	r0, [r5, #0]
 800f54e:	0635      	lsls	r5, r6, #24
 800f550:	681b      	ldr	r3, [r3, #0]
 800f552:	d501      	bpl.n	800f558 <_printf_i+0x1c4>
 800f554:	6019      	str	r1, [r3, #0]
 800f556:	e002      	b.n	800f55e <_printf_i+0x1ca>
 800f558:	0670      	lsls	r0, r6, #25
 800f55a:	d5fb      	bpl.n	800f554 <_printf_i+0x1c0>
 800f55c:	8019      	strh	r1, [r3, #0]
 800f55e:	2300      	movs	r3, #0
 800f560:	6123      	str	r3, [r4, #16]
 800f562:	4615      	mov	r5, r2
 800f564:	e7bc      	b.n	800f4e0 <_printf_i+0x14c>
 800f566:	682b      	ldr	r3, [r5, #0]
 800f568:	1d1a      	adds	r2, r3, #4
 800f56a:	602a      	str	r2, [r5, #0]
 800f56c:	681d      	ldr	r5, [r3, #0]
 800f56e:	6862      	ldr	r2, [r4, #4]
 800f570:	2100      	movs	r1, #0
 800f572:	4628      	mov	r0, r5
 800f574:	f7f0 fe44 	bl	8000200 <memchr>
 800f578:	b108      	cbz	r0, 800f57e <_printf_i+0x1ea>
 800f57a:	1b40      	subs	r0, r0, r5
 800f57c:	6060      	str	r0, [r4, #4]
 800f57e:	6863      	ldr	r3, [r4, #4]
 800f580:	6123      	str	r3, [r4, #16]
 800f582:	2300      	movs	r3, #0
 800f584:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800f588:	e7aa      	b.n	800f4e0 <_printf_i+0x14c>
 800f58a:	6923      	ldr	r3, [r4, #16]
 800f58c:	462a      	mov	r2, r5
 800f58e:	4649      	mov	r1, r9
 800f590:	4640      	mov	r0, r8
 800f592:	47d0      	blx	sl
 800f594:	3001      	adds	r0, #1
 800f596:	d0ad      	beq.n	800f4f4 <_printf_i+0x160>
 800f598:	6823      	ldr	r3, [r4, #0]
 800f59a:	079b      	lsls	r3, r3, #30
 800f59c:	d413      	bmi.n	800f5c6 <_printf_i+0x232>
 800f59e:	68e0      	ldr	r0, [r4, #12]
 800f5a0:	9b03      	ldr	r3, [sp, #12]
 800f5a2:	4298      	cmp	r0, r3
 800f5a4:	bfb8      	it	lt
 800f5a6:	4618      	movlt	r0, r3
 800f5a8:	e7a6      	b.n	800f4f8 <_printf_i+0x164>
 800f5aa:	2301      	movs	r3, #1
 800f5ac:	4632      	mov	r2, r6
 800f5ae:	4649      	mov	r1, r9
 800f5b0:	4640      	mov	r0, r8
 800f5b2:	47d0      	blx	sl
 800f5b4:	3001      	adds	r0, #1
 800f5b6:	d09d      	beq.n	800f4f4 <_printf_i+0x160>
 800f5b8:	3501      	adds	r5, #1
 800f5ba:	68e3      	ldr	r3, [r4, #12]
 800f5bc:	9903      	ldr	r1, [sp, #12]
 800f5be:	1a5b      	subs	r3, r3, r1
 800f5c0:	42ab      	cmp	r3, r5
 800f5c2:	dcf2      	bgt.n	800f5aa <_printf_i+0x216>
 800f5c4:	e7eb      	b.n	800f59e <_printf_i+0x20a>
 800f5c6:	2500      	movs	r5, #0
 800f5c8:	f104 0619 	add.w	r6, r4, #25
 800f5cc:	e7f5      	b.n	800f5ba <_printf_i+0x226>
 800f5ce:	bf00      	nop
 800f5d0:	08012572 	.word	0x08012572
 800f5d4:	08012583 	.word	0x08012583

0800f5d8 <__sflush_r>:
 800f5d8:	898a      	ldrh	r2, [r1, #12]
 800f5da:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f5de:	4605      	mov	r5, r0
 800f5e0:	0710      	lsls	r0, r2, #28
 800f5e2:	460c      	mov	r4, r1
 800f5e4:	d458      	bmi.n	800f698 <__sflush_r+0xc0>
 800f5e6:	684b      	ldr	r3, [r1, #4]
 800f5e8:	2b00      	cmp	r3, #0
 800f5ea:	dc05      	bgt.n	800f5f8 <__sflush_r+0x20>
 800f5ec:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800f5ee:	2b00      	cmp	r3, #0
 800f5f0:	dc02      	bgt.n	800f5f8 <__sflush_r+0x20>
 800f5f2:	2000      	movs	r0, #0
 800f5f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f5f8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800f5fa:	2e00      	cmp	r6, #0
 800f5fc:	d0f9      	beq.n	800f5f2 <__sflush_r+0x1a>
 800f5fe:	2300      	movs	r3, #0
 800f600:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800f604:	682f      	ldr	r7, [r5, #0]
 800f606:	6a21      	ldr	r1, [r4, #32]
 800f608:	602b      	str	r3, [r5, #0]
 800f60a:	d032      	beq.n	800f672 <__sflush_r+0x9a>
 800f60c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800f60e:	89a3      	ldrh	r3, [r4, #12]
 800f610:	075a      	lsls	r2, r3, #29
 800f612:	d505      	bpl.n	800f620 <__sflush_r+0x48>
 800f614:	6863      	ldr	r3, [r4, #4]
 800f616:	1ac0      	subs	r0, r0, r3
 800f618:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800f61a:	b10b      	cbz	r3, 800f620 <__sflush_r+0x48>
 800f61c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800f61e:	1ac0      	subs	r0, r0, r3
 800f620:	2300      	movs	r3, #0
 800f622:	4602      	mov	r2, r0
 800f624:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800f626:	6a21      	ldr	r1, [r4, #32]
 800f628:	4628      	mov	r0, r5
 800f62a:	47b0      	blx	r6
 800f62c:	1c43      	adds	r3, r0, #1
 800f62e:	89a3      	ldrh	r3, [r4, #12]
 800f630:	d106      	bne.n	800f640 <__sflush_r+0x68>
 800f632:	6829      	ldr	r1, [r5, #0]
 800f634:	291d      	cmp	r1, #29
 800f636:	d82b      	bhi.n	800f690 <__sflush_r+0xb8>
 800f638:	4a29      	ldr	r2, [pc, #164]	; (800f6e0 <__sflush_r+0x108>)
 800f63a:	410a      	asrs	r2, r1
 800f63c:	07d6      	lsls	r6, r2, #31
 800f63e:	d427      	bmi.n	800f690 <__sflush_r+0xb8>
 800f640:	2200      	movs	r2, #0
 800f642:	6062      	str	r2, [r4, #4]
 800f644:	04d9      	lsls	r1, r3, #19
 800f646:	6922      	ldr	r2, [r4, #16]
 800f648:	6022      	str	r2, [r4, #0]
 800f64a:	d504      	bpl.n	800f656 <__sflush_r+0x7e>
 800f64c:	1c42      	adds	r2, r0, #1
 800f64e:	d101      	bne.n	800f654 <__sflush_r+0x7c>
 800f650:	682b      	ldr	r3, [r5, #0]
 800f652:	b903      	cbnz	r3, 800f656 <__sflush_r+0x7e>
 800f654:	6560      	str	r0, [r4, #84]	; 0x54
 800f656:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800f658:	602f      	str	r7, [r5, #0]
 800f65a:	2900      	cmp	r1, #0
 800f65c:	d0c9      	beq.n	800f5f2 <__sflush_r+0x1a>
 800f65e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800f662:	4299      	cmp	r1, r3
 800f664:	d002      	beq.n	800f66c <__sflush_r+0x94>
 800f666:	4628      	mov	r0, r5
 800f668:	f7ff fa8a 	bl	800eb80 <_free_r>
 800f66c:	2000      	movs	r0, #0
 800f66e:	6360      	str	r0, [r4, #52]	; 0x34
 800f670:	e7c0      	b.n	800f5f4 <__sflush_r+0x1c>
 800f672:	2301      	movs	r3, #1
 800f674:	4628      	mov	r0, r5
 800f676:	47b0      	blx	r6
 800f678:	1c41      	adds	r1, r0, #1
 800f67a:	d1c8      	bne.n	800f60e <__sflush_r+0x36>
 800f67c:	682b      	ldr	r3, [r5, #0]
 800f67e:	2b00      	cmp	r3, #0
 800f680:	d0c5      	beq.n	800f60e <__sflush_r+0x36>
 800f682:	2b1d      	cmp	r3, #29
 800f684:	d001      	beq.n	800f68a <__sflush_r+0xb2>
 800f686:	2b16      	cmp	r3, #22
 800f688:	d101      	bne.n	800f68e <__sflush_r+0xb6>
 800f68a:	602f      	str	r7, [r5, #0]
 800f68c:	e7b1      	b.n	800f5f2 <__sflush_r+0x1a>
 800f68e:	89a3      	ldrh	r3, [r4, #12]
 800f690:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f694:	81a3      	strh	r3, [r4, #12]
 800f696:	e7ad      	b.n	800f5f4 <__sflush_r+0x1c>
 800f698:	690f      	ldr	r7, [r1, #16]
 800f69a:	2f00      	cmp	r7, #0
 800f69c:	d0a9      	beq.n	800f5f2 <__sflush_r+0x1a>
 800f69e:	0793      	lsls	r3, r2, #30
 800f6a0:	680e      	ldr	r6, [r1, #0]
 800f6a2:	bf08      	it	eq
 800f6a4:	694b      	ldreq	r3, [r1, #20]
 800f6a6:	600f      	str	r7, [r1, #0]
 800f6a8:	bf18      	it	ne
 800f6aa:	2300      	movne	r3, #0
 800f6ac:	eba6 0807 	sub.w	r8, r6, r7
 800f6b0:	608b      	str	r3, [r1, #8]
 800f6b2:	f1b8 0f00 	cmp.w	r8, #0
 800f6b6:	dd9c      	ble.n	800f5f2 <__sflush_r+0x1a>
 800f6b8:	6a21      	ldr	r1, [r4, #32]
 800f6ba:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800f6bc:	4643      	mov	r3, r8
 800f6be:	463a      	mov	r2, r7
 800f6c0:	4628      	mov	r0, r5
 800f6c2:	47b0      	blx	r6
 800f6c4:	2800      	cmp	r0, #0
 800f6c6:	dc06      	bgt.n	800f6d6 <__sflush_r+0xfe>
 800f6c8:	89a3      	ldrh	r3, [r4, #12]
 800f6ca:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f6ce:	81a3      	strh	r3, [r4, #12]
 800f6d0:	f04f 30ff 	mov.w	r0, #4294967295
 800f6d4:	e78e      	b.n	800f5f4 <__sflush_r+0x1c>
 800f6d6:	4407      	add	r7, r0
 800f6d8:	eba8 0800 	sub.w	r8, r8, r0
 800f6dc:	e7e9      	b.n	800f6b2 <__sflush_r+0xda>
 800f6de:	bf00      	nop
 800f6e0:	dfbffffe 	.word	0xdfbffffe

0800f6e4 <_fflush_r>:
 800f6e4:	b538      	push	{r3, r4, r5, lr}
 800f6e6:	690b      	ldr	r3, [r1, #16]
 800f6e8:	4605      	mov	r5, r0
 800f6ea:	460c      	mov	r4, r1
 800f6ec:	b913      	cbnz	r3, 800f6f4 <_fflush_r+0x10>
 800f6ee:	2500      	movs	r5, #0
 800f6f0:	4628      	mov	r0, r5
 800f6f2:	bd38      	pop	{r3, r4, r5, pc}
 800f6f4:	b118      	cbz	r0, 800f6fe <_fflush_r+0x1a>
 800f6f6:	6a03      	ldr	r3, [r0, #32]
 800f6f8:	b90b      	cbnz	r3, 800f6fe <_fflush_r+0x1a>
 800f6fa:	f7fe ffdb 	bl	800e6b4 <__sinit>
 800f6fe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f702:	2b00      	cmp	r3, #0
 800f704:	d0f3      	beq.n	800f6ee <_fflush_r+0xa>
 800f706:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800f708:	07d0      	lsls	r0, r2, #31
 800f70a:	d404      	bmi.n	800f716 <_fflush_r+0x32>
 800f70c:	0599      	lsls	r1, r3, #22
 800f70e:	d402      	bmi.n	800f716 <_fflush_r+0x32>
 800f710:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800f712:	f7ff fa07 	bl	800eb24 <__retarget_lock_acquire_recursive>
 800f716:	4628      	mov	r0, r5
 800f718:	4621      	mov	r1, r4
 800f71a:	f7ff ff5d 	bl	800f5d8 <__sflush_r>
 800f71e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800f720:	07da      	lsls	r2, r3, #31
 800f722:	4605      	mov	r5, r0
 800f724:	d4e4      	bmi.n	800f6f0 <_fflush_r+0xc>
 800f726:	89a3      	ldrh	r3, [r4, #12]
 800f728:	059b      	lsls	r3, r3, #22
 800f72a:	d4e1      	bmi.n	800f6f0 <_fflush_r+0xc>
 800f72c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800f72e:	f7ff f9fa 	bl	800eb26 <__retarget_lock_release_recursive>
 800f732:	e7dd      	b.n	800f6f0 <_fflush_r+0xc>

0800f734 <fiprintf>:
 800f734:	b40e      	push	{r1, r2, r3}
 800f736:	b503      	push	{r0, r1, lr}
 800f738:	4601      	mov	r1, r0
 800f73a:	ab03      	add	r3, sp, #12
 800f73c:	4805      	ldr	r0, [pc, #20]	; (800f754 <fiprintf+0x20>)
 800f73e:	f853 2b04 	ldr.w	r2, [r3], #4
 800f742:	6800      	ldr	r0, [r0, #0]
 800f744:	9301      	str	r3, [sp, #4]
 800f746:	f7ff fc9d 	bl	800f084 <_vfiprintf_r>
 800f74a:	b002      	add	sp, #8
 800f74c:	f85d eb04 	ldr.w	lr, [sp], #4
 800f750:	b003      	add	sp, #12
 800f752:	4770      	bx	lr
 800f754:	20000084 	.word	0x20000084

0800f758 <__swhatbuf_r>:
 800f758:	b570      	push	{r4, r5, r6, lr}
 800f75a:	460c      	mov	r4, r1
 800f75c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f760:	2900      	cmp	r1, #0
 800f762:	b096      	sub	sp, #88	; 0x58
 800f764:	4615      	mov	r5, r2
 800f766:	461e      	mov	r6, r3
 800f768:	da0d      	bge.n	800f786 <__swhatbuf_r+0x2e>
 800f76a:	89a3      	ldrh	r3, [r4, #12]
 800f76c:	f013 0f80 	tst.w	r3, #128	; 0x80
 800f770:	f04f 0100 	mov.w	r1, #0
 800f774:	bf0c      	ite	eq
 800f776:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800f77a:	2340      	movne	r3, #64	; 0x40
 800f77c:	2000      	movs	r0, #0
 800f77e:	6031      	str	r1, [r6, #0]
 800f780:	602b      	str	r3, [r5, #0]
 800f782:	b016      	add	sp, #88	; 0x58
 800f784:	bd70      	pop	{r4, r5, r6, pc}
 800f786:	466a      	mov	r2, sp
 800f788:	f000 f848 	bl	800f81c <_fstat_r>
 800f78c:	2800      	cmp	r0, #0
 800f78e:	dbec      	blt.n	800f76a <__swhatbuf_r+0x12>
 800f790:	9901      	ldr	r1, [sp, #4]
 800f792:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800f796:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800f79a:	4259      	negs	r1, r3
 800f79c:	4159      	adcs	r1, r3
 800f79e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800f7a2:	e7eb      	b.n	800f77c <__swhatbuf_r+0x24>

0800f7a4 <__smakebuf_r>:
 800f7a4:	898b      	ldrh	r3, [r1, #12]
 800f7a6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800f7a8:	079d      	lsls	r5, r3, #30
 800f7aa:	4606      	mov	r6, r0
 800f7ac:	460c      	mov	r4, r1
 800f7ae:	d507      	bpl.n	800f7c0 <__smakebuf_r+0x1c>
 800f7b0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800f7b4:	6023      	str	r3, [r4, #0]
 800f7b6:	6123      	str	r3, [r4, #16]
 800f7b8:	2301      	movs	r3, #1
 800f7ba:	6163      	str	r3, [r4, #20]
 800f7bc:	b002      	add	sp, #8
 800f7be:	bd70      	pop	{r4, r5, r6, pc}
 800f7c0:	ab01      	add	r3, sp, #4
 800f7c2:	466a      	mov	r2, sp
 800f7c4:	f7ff ffc8 	bl	800f758 <__swhatbuf_r>
 800f7c8:	9900      	ldr	r1, [sp, #0]
 800f7ca:	4605      	mov	r5, r0
 800f7cc:	4630      	mov	r0, r6
 800f7ce:	f7ff fa4b 	bl	800ec68 <_malloc_r>
 800f7d2:	b948      	cbnz	r0, 800f7e8 <__smakebuf_r+0x44>
 800f7d4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f7d8:	059a      	lsls	r2, r3, #22
 800f7da:	d4ef      	bmi.n	800f7bc <__smakebuf_r+0x18>
 800f7dc:	f023 0303 	bic.w	r3, r3, #3
 800f7e0:	f043 0302 	orr.w	r3, r3, #2
 800f7e4:	81a3      	strh	r3, [r4, #12]
 800f7e6:	e7e3      	b.n	800f7b0 <__smakebuf_r+0xc>
 800f7e8:	89a3      	ldrh	r3, [r4, #12]
 800f7ea:	6020      	str	r0, [r4, #0]
 800f7ec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f7f0:	81a3      	strh	r3, [r4, #12]
 800f7f2:	9b00      	ldr	r3, [sp, #0]
 800f7f4:	6163      	str	r3, [r4, #20]
 800f7f6:	9b01      	ldr	r3, [sp, #4]
 800f7f8:	6120      	str	r0, [r4, #16]
 800f7fa:	b15b      	cbz	r3, 800f814 <__smakebuf_r+0x70>
 800f7fc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f800:	4630      	mov	r0, r6
 800f802:	f000 f81d 	bl	800f840 <_isatty_r>
 800f806:	b128      	cbz	r0, 800f814 <__smakebuf_r+0x70>
 800f808:	89a3      	ldrh	r3, [r4, #12]
 800f80a:	f023 0303 	bic.w	r3, r3, #3
 800f80e:	f043 0301 	orr.w	r3, r3, #1
 800f812:	81a3      	strh	r3, [r4, #12]
 800f814:	89a3      	ldrh	r3, [r4, #12]
 800f816:	431d      	orrs	r5, r3
 800f818:	81a5      	strh	r5, [r4, #12]
 800f81a:	e7cf      	b.n	800f7bc <__smakebuf_r+0x18>

0800f81c <_fstat_r>:
 800f81c:	b538      	push	{r3, r4, r5, lr}
 800f81e:	4d07      	ldr	r5, [pc, #28]	; (800f83c <_fstat_r+0x20>)
 800f820:	2300      	movs	r3, #0
 800f822:	4604      	mov	r4, r0
 800f824:	4608      	mov	r0, r1
 800f826:	4611      	mov	r1, r2
 800f828:	602b      	str	r3, [r5, #0]
 800f82a:	f7f1 f94a 	bl	8000ac2 <_fstat>
 800f82e:	1c43      	adds	r3, r0, #1
 800f830:	d102      	bne.n	800f838 <_fstat_r+0x1c>
 800f832:	682b      	ldr	r3, [r5, #0]
 800f834:	b103      	cbz	r3, 800f838 <_fstat_r+0x1c>
 800f836:	6023      	str	r3, [r4, #0]
 800f838:	bd38      	pop	{r3, r4, r5, pc}
 800f83a:	bf00      	nop
 800f83c:	20008584 	.word	0x20008584

0800f840 <_isatty_r>:
 800f840:	b538      	push	{r3, r4, r5, lr}
 800f842:	4d06      	ldr	r5, [pc, #24]	; (800f85c <_isatty_r+0x1c>)
 800f844:	2300      	movs	r3, #0
 800f846:	4604      	mov	r4, r0
 800f848:	4608      	mov	r0, r1
 800f84a:	602b      	str	r3, [r5, #0]
 800f84c:	f7f1 f949 	bl	8000ae2 <_isatty>
 800f850:	1c43      	adds	r3, r0, #1
 800f852:	d102      	bne.n	800f85a <_isatty_r+0x1a>
 800f854:	682b      	ldr	r3, [r5, #0]
 800f856:	b103      	cbz	r3, 800f85a <_isatty_r+0x1a>
 800f858:	6023      	str	r3, [r4, #0]
 800f85a:	bd38      	pop	{r3, r4, r5, pc}
 800f85c:	20008584 	.word	0x20008584

0800f860 <_sbrk_r>:
 800f860:	b538      	push	{r3, r4, r5, lr}
 800f862:	4d06      	ldr	r5, [pc, #24]	; (800f87c <_sbrk_r+0x1c>)
 800f864:	2300      	movs	r3, #0
 800f866:	4604      	mov	r4, r0
 800f868:	4608      	mov	r0, r1
 800f86a:	602b      	str	r3, [r5, #0]
 800f86c:	f7f1 f952 	bl	8000b14 <_sbrk>
 800f870:	1c43      	adds	r3, r0, #1
 800f872:	d102      	bne.n	800f87a <_sbrk_r+0x1a>
 800f874:	682b      	ldr	r3, [r5, #0]
 800f876:	b103      	cbz	r3, 800f87a <_sbrk_r+0x1a>
 800f878:	6023      	str	r3, [r4, #0]
 800f87a:	bd38      	pop	{r3, r4, r5, pc}
 800f87c:	20008584 	.word	0x20008584

0800f880 <abort>:
 800f880:	b508      	push	{r3, lr}
 800f882:	2006      	movs	r0, #6
 800f884:	f000 f85a 	bl	800f93c <raise>
 800f888:	2001      	movs	r0, #1
 800f88a:	f7f1 f8e7 	bl	8000a5c <_exit>

0800f88e <_realloc_r>:
 800f88e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f892:	4680      	mov	r8, r0
 800f894:	4614      	mov	r4, r2
 800f896:	460e      	mov	r6, r1
 800f898:	b921      	cbnz	r1, 800f8a4 <_realloc_r+0x16>
 800f89a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f89e:	4611      	mov	r1, r2
 800f8a0:	f7ff b9e2 	b.w	800ec68 <_malloc_r>
 800f8a4:	b92a      	cbnz	r2, 800f8b2 <_realloc_r+0x24>
 800f8a6:	f7ff f96b 	bl	800eb80 <_free_r>
 800f8aa:	4625      	mov	r5, r4
 800f8ac:	4628      	mov	r0, r5
 800f8ae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f8b2:	f000 f85f 	bl	800f974 <_malloc_usable_size_r>
 800f8b6:	4284      	cmp	r4, r0
 800f8b8:	4607      	mov	r7, r0
 800f8ba:	d802      	bhi.n	800f8c2 <_realloc_r+0x34>
 800f8bc:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800f8c0:	d812      	bhi.n	800f8e8 <_realloc_r+0x5a>
 800f8c2:	4621      	mov	r1, r4
 800f8c4:	4640      	mov	r0, r8
 800f8c6:	f7ff f9cf 	bl	800ec68 <_malloc_r>
 800f8ca:	4605      	mov	r5, r0
 800f8cc:	2800      	cmp	r0, #0
 800f8ce:	d0ed      	beq.n	800f8ac <_realloc_r+0x1e>
 800f8d0:	42bc      	cmp	r4, r7
 800f8d2:	4622      	mov	r2, r4
 800f8d4:	4631      	mov	r1, r6
 800f8d6:	bf28      	it	cs
 800f8d8:	463a      	movcs	r2, r7
 800f8da:	f7ff f925 	bl	800eb28 <memcpy>
 800f8de:	4631      	mov	r1, r6
 800f8e0:	4640      	mov	r0, r8
 800f8e2:	f7ff f94d 	bl	800eb80 <_free_r>
 800f8e6:	e7e1      	b.n	800f8ac <_realloc_r+0x1e>
 800f8e8:	4635      	mov	r5, r6
 800f8ea:	e7df      	b.n	800f8ac <_realloc_r+0x1e>

0800f8ec <_raise_r>:
 800f8ec:	291f      	cmp	r1, #31
 800f8ee:	b538      	push	{r3, r4, r5, lr}
 800f8f0:	4604      	mov	r4, r0
 800f8f2:	460d      	mov	r5, r1
 800f8f4:	d904      	bls.n	800f900 <_raise_r+0x14>
 800f8f6:	2316      	movs	r3, #22
 800f8f8:	6003      	str	r3, [r0, #0]
 800f8fa:	f04f 30ff 	mov.w	r0, #4294967295
 800f8fe:	bd38      	pop	{r3, r4, r5, pc}
 800f900:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800f902:	b112      	cbz	r2, 800f90a <_raise_r+0x1e>
 800f904:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800f908:	b94b      	cbnz	r3, 800f91e <_raise_r+0x32>
 800f90a:	4620      	mov	r0, r4
 800f90c:	f000 f830 	bl	800f970 <_getpid_r>
 800f910:	462a      	mov	r2, r5
 800f912:	4601      	mov	r1, r0
 800f914:	4620      	mov	r0, r4
 800f916:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f91a:	f000 b817 	b.w	800f94c <_kill_r>
 800f91e:	2b01      	cmp	r3, #1
 800f920:	d00a      	beq.n	800f938 <_raise_r+0x4c>
 800f922:	1c59      	adds	r1, r3, #1
 800f924:	d103      	bne.n	800f92e <_raise_r+0x42>
 800f926:	2316      	movs	r3, #22
 800f928:	6003      	str	r3, [r0, #0]
 800f92a:	2001      	movs	r0, #1
 800f92c:	e7e7      	b.n	800f8fe <_raise_r+0x12>
 800f92e:	2400      	movs	r4, #0
 800f930:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800f934:	4628      	mov	r0, r5
 800f936:	4798      	blx	r3
 800f938:	2000      	movs	r0, #0
 800f93a:	e7e0      	b.n	800f8fe <_raise_r+0x12>

0800f93c <raise>:
 800f93c:	4b02      	ldr	r3, [pc, #8]	; (800f948 <raise+0xc>)
 800f93e:	4601      	mov	r1, r0
 800f940:	6818      	ldr	r0, [r3, #0]
 800f942:	f7ff bfd3 	b.w	800f8ec <_raise_r>
 800f946:	bf00      	nop
 800f948:	20000084 	.word	0x20000084

0800f94c <_kill_r>:
 800f94c:	b538      	push	{r3, r4, r5, lr}
 800f94e:	4d07      	ldr	r5, [pc, #28]	; (800f96c <_kill_r+0x20>)
 800f950:	2300      	movs	r3, #0
 800f952:	4604      	mov	r4, r0
 800f954:	4608      	mov	r0, r1
 800f956:	4611      	mov	r1, r2
 800f958:	602b      	str	r3, [r5, #0]
 800f95a:	f7f1 f86d 	bl	8000a38 <_kill>
 800f95e:	1c43      	adds	r3, r0, #1
 800f960:	d102      	bne.n	800f968 <_kill_r+0x1c>
 800f962:	682b      	ldr	r3, [r5, #0]
 800f964:	b103      	cbz	r3, 800f968 <_kill_r+0x1c>
 800f966:	6023      	str	r3, [r4, #0]
 800f968:	bd38      	pop	{r3, r4, r5, pc}
 800f96a:	bf00      	nop
 800f96c:	20008584 	.word	0x20008584

0800f970 <_getpid_r>:
 800f970:	f7f1 b85a 	b.w	8000a28 <_getpid>

0800f974 <_malloc_usable_size_r>:
 800f974:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f978:	1f18      	subs	r0, r3, #4
 800f97a:	2b00      	cmp	r3, #0
 800f97c:	bfbc      	itt	lt
 800f97e:	580b      	ldrlt	r3, [r1, r0]
 800f980:	18c0      	addlt	r0, r0, r3
 800f982:	4770      	bx	lr

0800f984 <_init>:
 800f984:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f986:	bf00      	nop
 800f988:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f98a:	bc08      	pop	{r3}
 800f98c:	469e      	mov	lr, r3
 800f98e:	4770      	bx	lr

0800f990 <_fini>:
 800f990:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f992:	bf00      	nop
 800f994:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f996:	bc08      	pop	{r3}
 800f998:	469e      	mov	lr, r3
 800f99a:	4770      	bx	lr
