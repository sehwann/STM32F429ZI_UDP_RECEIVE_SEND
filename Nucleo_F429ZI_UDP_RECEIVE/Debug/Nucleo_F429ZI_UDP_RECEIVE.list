
Nucleo_F429ZI_UDP_RECEIVE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000f230  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002bcc  0800f3e0  0800f3e0  0001f3e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08011fac  08011fac  00030088  2**0
                  CONTENTS
  4 .ARM          00000008  08011fac  08011fac  00021fac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08011fb4  08011fb4  00030088  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08011fb4  08011fb4  00021fb4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08011fb8  08011fb8  00021fb8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000088  20000000  08011fbc  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00030088  2**0
                  CONTENTS
 10 .bss          000084a0  20000088  20000088  00030088  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20008528  20008528  00030088  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00030088  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  000300b8  2**0
                  CONTENTS, READONLY
 14 .debug_info   0001ae75  00000000  00000000  000300fb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00004ed6  00000000  00000000  0004af70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001398  00000000  00000000  0004fe48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000fae  00000000  00000000  000511e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0002f949  00000000  00000000  0005218e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00023a66  00000000  00000000  00081ad7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000eaddb  00000000  00000000  000a553d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00005778  00000000  00000000  00190318  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000007b  00000000  00000000  00195a90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000088 	.word	0x20000088
 80001cc:	00000000 	.word	0x00000000
 80001d0:	0800f3c8 	.word	0x0800f3c8

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	2000008c 	.word	0x2000008c
 80001ec:	0800f3c8 	.word	0x0800f3c8

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b970 	b.w	8000588 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9e08      	ldr	r6, [sp, #32]
 80002c6:	460d      	mov	r5, r1
 80002c8:	4604      	mov	r4, r0
 80002ca:	460f      	mov	r7, r1
 80002cc:	2b00      	cmp	r3, #0
 80002ce:	d14a      	bne.n	8000366 <__udivmoddi4+0xa6>
 80002d0:	428a      	cmp	r2, r1
 80002d2:	4694      	mov	ip, r2
 80002d4:	d965      	bls.n	80003a2 <__udivmoddi4+0xe2>
 80002d6:	fab2 f382 	clz	r3, r2
 80002da:	b143      	cbz	r3, 80002ee <__udivmoddi4+0x2e>
 80002dc:	fa02 fc03 	lsl.w	ip, r2, r3
 80002e0:	f1c3 0220 	rsb	r2, r3, #32
 80002e4:	409f      	lsls	r7, r3
 80002e6:	fa20 f202 	lsr.w	r2, r0, r2
 80002ea:	4317      	orrs	r7, r2
 80002ec:	409c      	lsls	r4, r3
 80002ee:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002f2:	fa1f f58c 	uxth.w	r5, ip
 80002f6:	fbb7 f1fe 	udiv	r1, r7, lr
 80002fa:	0c22      	lsrs	r2, r4, #16
 80002fc:	fb0e 7711 	mls	r7, lr, r1, r7
 8000300:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000304:	fb01 f005 	mul.w	r0, r1, r5
 8000308:	4290      	cmp	r0, r2
 800030a:	d90a      	bls.n	8000322 <__udivmoddi4+0x62>
 800030c:	eb1c 0202 	adds.w	r2, ip, r2
 8000310:	f101 37ff 	add.w	r7, r1, #4294967295
 8000314:	f080 811c 	bcs.w	8000550 <__udivmoddi4+0x290>
 8000318:	4290      	cmp	r0, r2
 800031a:	f240 8119 	bls.w	8000550 <__udivmoddi4+0x290>
 800031e:	3902      	subs	r1, #2
 8000320:	4462      	add	r2, ip
 8000322:	1a12      	subs	r2, r2, r0
 8000324:	b2a4      	uxth	r4, r4
 8000326:	fbb2 f0fe 	udiv	r0, r2, lr
 800032a:	fb0e 2210 	mls	r2, lr, r0, r2
 800032e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000332:	fb00 f505 	mul.w	r5, r0, r5
 8000336:	42a5      	cmp	r5, r4
 8000338:	d90a      	bls.n	8000350 <__udivmoddi4+0x90>
 800033a:	eb1c 0404 	adds.w	r4, ip, r4
 800033e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000342:	f080 8107 	bcs.w	8000554 <__udivmoddi4+0x294>
 8000346:	42a5      	cmp	r5, r4
 8000348:	f240 8104 	bls.w	8000554 <__udivmoddi4+0x294>
 800034c:	4464      	add	r4, ip
 800034e:	3802      	subs	r0, #2
 8000350:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000354:	1b64      	subs	r4, r4, r5
 8000356:	2100      	movs	r1, #0
 8000358:	b11e      	cbz	r6, 8000362 <__udivmoddi4+0xa2>
 800035a:	40dc      	lsrs	r4, r3
 800035c:	2300      	movs	r3, #0
 800035e:	e9c6 4300 	strd	r4, r3, [r6]
 8000362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000366:	428b      	cmp	r3, r1
 8000368:	d908      	bls.n	800037c <__udivmoddi4+0xbc>
 800036a:	2e00      	cmp	r6, #0
 800036c:	f000 80ed 	beq.w	800054a <__udivmoddi4+0x28a>
 8000370:	2100      	movs	r1, #0
 8000372:	e9c6 0500 	strd	r0, r5, [r6]
 8000376:	4608      	mov	r0, r1
 8000378:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800037c:	fab3 f183 	clz	r1, r3
 8000380:	2900      	cmp	r1, #0
 8000382:	d149      	bne.n	8000418 <__udivmoddi4+0x158>
 8000384:	42ab      	cmp	r3, r5
 8000386:	d302      	bcc.n	800038e <__udivmoddi4+0xce>
 8000388:	4282      	cmp	r2, r0
 800038a:	f200 80f8 	bhi.w	800057e <__udivmoddi4+0x2be>
 800038e:	1a84      	subs	r4, r0, r2
 8000390:	eb65 0203 	sbc.w	r2, r5, r3
 8000394:	2001      	movs	r0, #1
 8000396:	4617      	mov	r7, r2
 8000398:	2e00      	cmp	r6, #0
 800039a:	d0e2      	beq.n	8000362 <__udivmoddi4+0xa2>
 800039c:	e9c6 4700 	strd	r4, r7, [r6]
 80003a0:	e7df      	b.n	8000362 <__udivmoddi4+0xa2>
 80003a2:	b902      	cbnz	r2, 80003a6 <__udivmoddi4+0xe6>
 80003a4:	deff      	udf	#255	; 0xff
 80003a6:	fab2 f382 	clz	r3, r2
 80003aa:	2b00      	cmp	r3, #0
 80003ac:	f040 8090 	bne.w	80004d0 <__udivmoddi4+0x210>
 80003b0:	1a8a      	subs	r2, r1, r2
 80003b2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003b6:	fa1f fe8c 	uxth.w	lr, ip
 80003ba:	2101      	movs	r1, #1
 80003bc:	fbb2 f5f7 	udiv	r5, r2, r7
 80003c0:	fb07 2015 	mls	r0, r7, r5, r2
 80003c4:	0c22      	lsrs	r2, r4, #16
 80003c6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003ca:	fb0e f005 	mul.w	r0, lr, r5
 80003ce:	4290      	cmp	r0, r2
 80003d0:	d908      	bls.n	80003e4 <__udivmoddi4+0x124>
 80003d2:	eb1c 0202 	adds.w	r2, ip, r2
 80003d6:	f105 38ff 	add.w	r8, r5, #4294967295
 80003da:	d202      	bcs.n	80003e2 <__udivmoddi4+0x122>
 80003dc:	4290      	cmp	r0, r2
 80003de:	f200 80cb 	bhi.w	8000578 <__udivmoddi4+0x2b8>
 80003e2:	4645      	mov	r5, r8
 80003e4:	1a12      	subs	r2, r2, r0
 80003e6:	b2a4      	uxth	r4, r4
 80003e8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003ec:	fb07 2210 	mls	r2, r7, r0, r2
 80003f0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003f4:	fb0e fe00 	mul.w	lr, lr, r0
 80003f8:	45a6      	cmp	lr, r4
 80003fa:	d908      	bls.n	800040e <__udivmoddi4+0x14e>
 80003fc:	eb1c 0404 	adds.w	r4, ip, r4
 8000400:	f100 32ff 	add.w	r2, r0, #4294967295
 8000404:	d202      	bcs.n	800040c <__udivmoddi4+0x14c>
 8000406:	45a6      	cmp	lr, r4
 8000408:	f200 80bb 	bhi.w	8000582 <__udivmoddi4+0x2c2>
 800040c:	4610      	mov	r0, r2
 800040e:	eba4 040e 	sub.w	r4, r4, lr
 8000412:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000416:	e79f      	b.n	8000358 <__udivmoddi4+0x98>
 8000418:	f1c1 0720 	rsb	r7, r1, #32
 800041c:	408b      	lsls	r3, r1
 800041e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000422:	ea4c 0c03 	orr.w	ip, ip, r3
 8000426:	fa05 f401 	lsl.w	r4, r5, r1
 800042a:	fa20 f307 	lsr.w	r3, r0, r7
 800042e:	40fd      	lsrs	r5, r7
 8000430:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000434:	4323      	orrs	r3, r4
 8000436:	fbb5 f8f9 	udiv	r8, r5, r9
 800043a:	fa1f fe8c 	uxth.w	lr, ip
 800043e:	fb09 5518 	mls	r5, r9, r8, r5
 8000442:	0c1c      	lsrs	r4, r3, #16
 8000444:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000448:	fb08 f50e 	mul.w	r5, r8, lr
 800044c:	42a5      	cmp	r5, r4
 800044e:	fa02 f201 	lsl.w	r2, r2, r1
 8000452:	fa00 f001 	lsl.w	r0, r0, r1
 8000456:	d90b      	bls.n	8000470 <__udivmoddi4+0x1b0>
 8000458:	eb1c 0404 	adds.w	r4, ip, r4
 800045c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000460:	f080 8088 	bcs.w	8000574 <__udivmoddi4+0x2b4>
 8000464:	42a5      	cmp	r5, r4
 8000466:	f240 8085 	bls.w	8000574 <__udivmoddi4+0x2b4>
 800046a:	f1a8 0802 	sub.w	r8, r8, #2
 800046e:	4464      	add	r4, ip
 8000470:	1b64      	subs	r4, r4, r5
 8000472:	b29d      	uxth	r5, r3
 8000474:	fbb4 f3f9 	udiv	r3, r4, r9
 8000478:	fb09 4413 	mls	r4, r9, r3, r4
 800047c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000480:	fb03 fe0e 	mul.w	lr, r3, lr
 8000484:	45a6      	cmp	lr, r4
 8000486:	d908      	bls.n	800049a <__udivmoddi4+0x1da>
 8000488:	eb1c 0404 	adds.w	r4, ip, r4
 800048c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000490:	d26c      	bcs.n	800056c <__udivmoddi4+0x2ac>
 8000492:	45a6      	cmp	lr, r4
 8000494:	d96a      	bls.n	800056c <__udivmoddi4+0x2ac>
 8000496:	3b02      	subs	r3, #2
 8000498:	4464      	add	r4, ip
 800049a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800049e:	fba3 9502 	umull	r9, r5, r3, r2
 80004a2:	eba4 040e 	sub.w	r4, r4, lr
 80004a6:	42ac      	cmp	r4, r5
 80004a8:	46c8      	mov	r8, r9
 80004aa:	46ae      	mov	lr, r5
 80004ac:	d356      	bcc.n	800055c <__udivmoddi4+0x29c>
 80004ae:	d053      	beq.n	8000558 <__udivmoddi4+0x298>
 80004b0:	b156      	cbz	r6, 80004c8 <__udivmoddi4+0x208>
 80004b2:	ebb0 0208 	subs.w	r2, r0, r8
 80004b6:	eb64 040e 	sbc.w	r4, r4, lr
 80004ba:	fa04 f707 	lsl.w	r7, r4, r7
 80004be:	40ca      	lsrs	r2, r1
 80004c0:	40cc      	lsrs	r4, r1
 80004c2:	4317      	orrs	r7, r2
 80004c4:	e9c6 7400 	strd	r7, r4, [r6]
 80004c8:	4618      	mov	r0, r3
 80004ca:	2100      	movs	r1, #0
 80004cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004d0:	f1c3 0120 	rsb	r1, r3, #32
 80004d4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004d8:	fa20 f201 	lsr.w	r2, r0, r1
 80004dc:	fa25 f101 	lsr.w	r1, r5, r1
 80004e0:	409d      	lsls	r5, r3
 80004e2:	432a      	orrs	r2, r5
 80004e4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004e8:	fa1f fe8c 	uxth.w	lr, ip
 80004ec:	fbb1 f0f7 	udiv	r0, r1, r7
 80004f0:	fb07 1510 	mls	r5, r7, r0, r1
 80004f4:	0c11      	lsrs	r1, r2, #16
 80004f6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004fa:	fb00 f50e 	mul.w	r5, r0, lr
 80004fe:	428d      	cmp	r5, r1
 8000500:	fa04 f403 	lsl.w	r4, r4, r3
 8000504:	d908      	bls.n	8000518 <__udivmoddi4+0x258>
 8000506:	eb1c 0101 	adds.w	r1, ip, r1
 800050a:	f100 38ff 	add.w	r8, r0, #4294967295
 800050e:	d22f      	bcs.n	8000570 <__udivmoddi4+0x2b0>
 8000510:	428d      	cmp	r5, r1
 8000512:	d92d      	bls.n	8000570 <__udivmoddi4+0x2b0>
 8000514:	3802      	subs	r0, #2
 8000516:	4461      	add	r1, ip
 8000518:	1b49      	subs	r1, r1, r5
 800051a:	b292      	uxth	r2, r2
 800051c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000520:	fb07 1115 	mls	r1, r7, r5, r1
 8000524:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000528:	fb05 f10e 	mul.w	r1, r5, lr
 800052c:	4291      	cmp	r1, r2
 800052e:	d908      	bls.n	8000542 <__udivmoddi4+0x282>
 8000530:	eb1c 0202 	adds.w	r2, ip, r2
 8000534:	f105 38ff 	add.w	r8, r5, #4294967295
 8000538:	d216      	bcs.n	8000568 <__udivmoddi4+0x2a8>
 800053a:	4291      	cmp	r1, r2
 800053c:	d914      	bls.n	8000568 <__udivmoddi4+0x2a8>
 800053e:	3d02      	subs	r5, #2
 8000540:	4462      	add	r2, ip
 8000542:	1a52      	subs	r2, r2, r1
 8000544:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000548:	e738      	b.n	80003bc <__udivmoddi4+0xfc>
 800054a:	4631      	mov	r1, r6
 800054c:	4630      	mov	r0, r6
 800054e:	e708      	b.n	8000362 <__udivmoddi4+0xa2>
 8000550:	4639      	mov	r1, r7
 8000552:	e6e6      	b.n	8000322 <__udivmoddi4+0x62>
 8000554:	4610      	mov	r0, r2
 8000556:	e6fb      	b.n	8000350 <__udivmoddi4+0x90>
 8000558:	4548      	cmp	r0, r9
 800055a:	d2a9      	bcs.n	80004b0 <__udivmoddi4+0x1f0>
 800055c:	ebb9 0802 	subs.w	r8, r9, r2
 8000560:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000564:	3b01      	subs	r3, #1
 8000566:	e7a3      	b.n	80004b0 <__udivmoddi4+0x1f0>
 8000568:	4645      	mov	r5, r8
 800056a:	e7ea      	b.n	8000542 <__udivmoddi4+0x282>
 800056c:	462b      	mov	r3, r5
 800056e:	e794      	b.n	800049a <__udivmoddi4+0x1da>
 8000570:	4640      	mov	r0, r8
 8000572:	e7d1      	b.n	8000518 <__udivmoddi4+0x258>
 8000574:	46d0      	mov	r8, sl
 8000576:	e77b      	b.n	8000470 <__udivmoddi4+0x1b0>
 8000578:	3d02      	subs	r5, #2
 800057a:	4462      	add	r2, ip
 800057c:	e732      	b.n	80003e4 <__udivmoddi4+0x124>
 800057e:	4608      	mov	r0, r1
 8000580:	e70a      	b.n	8000398 <__udivmoddi4+0xd8>
 8000582:	4464      	add	r4, ip
 8000584:	3802      	subs	r0, #2
 8000586:	e742      	b.n	800040e <__udivmoddi4+0x14e>

08000588 <__aeabi_idiv0>:
 8000588:	4770      	bx	lr
 800058a:	bf00      	nop

0800058c <_write>:

/* Private variables ---------------------------------------------------------*/
UART_HandleTypeDef huart3;

/* USER CODE BEGIN PV */
int _write(int file, char *ptr, int len) {
 800058c:	b580      	push	{r7, lr}
 800058e:	b084      	sub	sp, #16
 8000590:	af00      	add	r7, sp, #0
 8000592:	60f8      	str	r0, [r7, #12]
 8000594:	60b9      	str	r1, [r7, #8]
 8000596:	607a      	str	r2, [r7, #4]
	if (HAL_UART_Transmit(&huart3, (uint8_t*) ptr, len, 1000) == HAL_OK)
 8000598:	687b      	ldr	r3, [r7, #4]
 800059a:	b29a      	uxth	r2, r3
 800059c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80005a0:	68b9      	ldr	r1, [r7, #8]
 80005a2:	4807      	ldr	r0, [pc, #28]	; (80005c0 <_write+0x34>)
 80005a4:	f002 fdb9 	bl	800311a <HAL_UART_Transmit>
 80005a8:	4603      	mov	r3, r0
 80005aa:	2b00      	cmp	r3, #0
 80005ac:	d101      	bne.n	80005b2 <_write+0x26>
		return len;
 80005ae:	687b      	ldr	r3, [r7, #4]
 80005b0:	e001      	b.n	80005b6 <_write+0x2a>
	return -1;
 80005b2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80005b6:	4618      	mov	r0, r3
 80005b8:	3710      	adds	r7, #16
 80005ba:	46bd      	mov	sp, r7
 80005bc:	bd80      	pop	{r7, pc}
 80005be:	bf00      	nop
 80005c0:	200000a4 	.word	0x200000a4

080005c4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005c4:	b580      	push	{r7, lr}
 80005c6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005c8:	f000 fc8a 	bl	8000ee0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005cc:	f000 f816 	bl	80005fc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005d0:	f000 f8a8 	bl	8000724 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 80005d4:	f000 f87c 	bl	80006d0 <MX_USART3_UART_Init>
  MX_LWIP_Init();
 80005d8:	f003 f914 	bl	8003804 <MX_LWIP_Init>
  /* USER CODE BEGIN 2 */

  /* tcp echo server Init */
    udp_echoserver_init();
 80005dc:	f000 fab0 	bl	8000b40 <udp_echoserver_init>
    printf("Ready\n");
 80005e0:	4804      	ldr	r0, [pc, #16]	; (80005f4 <main+0x30>)
 80005e2:	f00d ffed 	bl	800e5c0 <puts>
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  /* Read a received packet from the Ethernet buffers and send it
		 to the lwIP for handling */
	  ethernetif_input(&gnetif);
 80005e6:	4804      	ldr	r0, [pc, #16]	; (80005f8 <main+0x34>)
 80005e8:	f003 fb7c 	bl	8003ce4 <ethernetif_input>

	  /* Handle timeouts */
	  sys_check_timeouts();
 80005ec:	f00a fe5a 	bl	800b2a4 <sys_check_timeouts>
	  ethernetif_input(&gnetif);
 80005f0:	e7f9      	b.n	80005e6 <main+0x22>
 80005f2:	bf00      	nop
 80005f4:	0800f3e0 	.word	0x0800f3e0
 80005f8:	200000f0 	.word	0x200000f0

080005fc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005fc:	b580      	push	{r7, lr}
 80005fe:	b094      	sub	sp, #80	; 0x50
 8000600:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000602:	f107 0320 	add.w	r3, r7, #32
 8000606:	2230      	movs	r2, #48	; 0x30
 8000608:	2100      	movs	r1, #0
 800060a:	4618      	mov	r0, r3
 800060c:	f00e f8c8 	bl	800e7a0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000610:	f107 030c 	add.w	r3, r7, #12
 8000614:	2200      	movs	r2, #0
 8000616:	601a      	str	r2, [r3, #0]
 8000618:	605a      	str	r2, [r3, #4]
 800061a:	609a      	str	r2, [r3, #8]
 800061c:	60da      	str	r2, [r3, #12]
 800061e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000620:	2300      	movs	r3, #0
 8000622:	60bb      	str	r3, [r7, #8]
 8000624:	4b28      	ldr	r3, [pc, #160]	; (80006c8 <SystemClock_Config+0xcc>)
 8000626:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000628:	4a27      	ldr	r2, [pc, #156]	; (80006c8 <SystemClock_Config+0xcc>)
 800062a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800062e:	6413      	str	r3, [r2, #64]	; 0x40
 8000630:	4b25      	ldr	r3, [pc, #148]	; (80006c8 <SystemClock_Config+0xcc>)
 8000632:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000634:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000638:	60bb      	str	r3, [r7, #8]
 800063a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800063c:	2300      	movs	r3, #0
 800063e:	607b      	str	r3, [r7, #4]
 8000640:	4b22      	ldr	r3, [pc, #136]	; (80006cc <SystemClock_Config+0xd0>)
 8000642:	681b      	ldr	r3, [r3, #0]
 8000644:	4a21      	ldr	r2, [pc, #132]	; (80006cc <SystemClock_Config+0xd0>)
 8000646:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800064a:	6013      	str	r3, [r2, #0]
 800064c:	4b1f      	ldr	r3, [pc, #124]	; (80006cc <SystemClock_Config+0xd0>)
 800064e:	681b      	ldr	r3, [r3, #0]
 8000650:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000654:	607b      	str	r3, [r7, #4]
 8000656:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000658:	2301      	movs	r3, #1
 800065a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 800065c:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000660:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000662:	2302      	movs	r3, #2
 8000664:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000666:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800066a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 800066c:	2304      	movs	r3, #4
 800066e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000670:	23a8      	movs	r3, #168	; 0xa8
 8000672:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000674:	2302      	movs	r3, #2
 8000676:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000678:	2307      	movs	r3, #7
 800067a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800067c:	f107 0320 	add.w	r3, r7, #32
 8000680:	4618      	mov	r0, r3
 8000682:	f002 f865 	bl	8002750 <HAL_RCC_OscConfig>
 8000686:	4603      	mov	r3, r0
 8000688:	2b00      	cmp	r3, #0
 800068a:	d001      	beq.n	8000690 <SystemClock_Config+0x94>
  {
    Error_Handler();
 800068c:	f000 f8f8 	bl	8000880 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000690:	230f      	movs	r3, #15
 8000692:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000694:	2302      	movs	r3, #2
 8000696:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000698:	2300      	movs	r3, #0
 800069a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800069c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80006a0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80006a2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006a6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80006a8:	f107 030c 	add.w	r3, r7, #12
 80006ac:	2105      	movs	r1, #5
 80006ae:	4618      	mov	r0, r3
 80006b0:	f002 fac6 	bl	8002c40 <HAL_RCC_ClockConfig>
 80006b4:	4603      	mov	r3, r0
 80006b6:	2b00      	cmp	r3, #0
 80006b8:	d001      	beq.n	80006be <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80006ba:	f000 f8e1 	bl	8000880 <Error_Handler>
  }
}
 80006be:	bf00      	nop
 80006c0:	3750      	adds	r7, #80	; 0x50
 80006c2:	46bd      	mov	sp, r7
 80006c4:	bd80      	pop	{r7, pc}
 80006c6:	bf00      	nop
 80006c8:	40023800 	.word	0x40023800
 80006cc:	40007000 	.word	0x40007000

080006d0 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80006d0:	b580      	push	{r7, lr}
 80006d2:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80006d4:	4b11      	ldr	r3, [pc, #68]	; (800071c <MX_USART3_UART_Init+0x4c>)
 80006d6:	4a12      	ldr	r2, [pc, #72]	; (8000720 <MX_USART3_UART_Init+0x50>)
 80006d8:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80006da:	4b10      	ldr	r3, [pc, #64]	; (800071c <MX_USART3_UART_Init+0x4c>)
 80006dc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80006e0:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80006e2:	4b0e      	ldr	r3, [pc, #56]	; (800071c <MX_USART3_UART_Init+0x4c>)
 80006e4:	2200      	movs	r2, #0
 80006e6:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80006e8:	4b0c      	ldr	r3, [pc, #48]	; (800071c <MX_USART3_UART_Init+0x4c>)
 80006ea:	2200      	movs	r2, #0
 80006ec:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80006ee:	4b0b      	ldr	r3, [pc, #44]	; (800071c <MX_USART3_UART_Init+0x4c>)
 80006f0:	2200      	movs	r2, #0
 80006f2:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80006f4:	4b09      	ldr	r3, [pc, #36]	; (800071c <MX_USART3_UART_Init+0x4c>)
 80006f6:	220c      	movs	r2, #12
 80006f8:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006fa:	4b08      	ldr	r3, [pc, #32]	; (800071c <MX_USART3_UART_Init+0x4c>)
 80006fc:	2200      	movs	r2, #0
 80006fe:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000700:	4b06      	ldr	r3, [pc, #24]	; (800071c <MX_USART3_UART_Init+0x4c>)
 8000702:	2200      	movs	r2, #0
 8000704:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000706:	4805      	ldr	r0, [pc, #20]	; (800071c <MX_USART3_UART_Init+0x4c>)
 8000708:	f002 fcba 	bl	8003080 <HAL_UART_Init>
 800070c:	4603      	mov	r3, r0
 800070e:	2b00      	cmp	r3, #0
 8000710:	d001      	beq.n	8000716 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8000712:	f000 f8b5 	bl	8000880 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000716:	bf00      	nop
 8000718:	bd80      	pop	{r7, pc}
 800071a:	bf00      	nop
 800071c:	200000a4 	.word	0x200000a4
 8000720:	40004800 	.word	0x40004800

08000724 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000724:	b580      	push	{r7, lr}
 8000726:	b08c      	sub	sp, #48	; 0x30
 8000728:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800072a:	f107 031c 	add.w	r3, r7, #28
 800072e:	2200      	movs	r2, #0
 8000730:	601a      	str	r2, [r3, #0]
 8000732:	605a      	str	r2, [r3, #4]
 8000734:	609a      	str	r2, [r3, #8]
 8000736:	60da      	str	r2, [r3, #12]
 8000738:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800073a:	2300      	movs	r3, #0
 800073c:	61bb      	str	r3, [r7, #24]
 800073e:	4b4c      	ldr	r3, [pc, #304]	; (8000870 <MX_GPIO_Init+0x14c>)
 8000740:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000742:	4a4b      	ldr	r2, [pc, #300]	; (8000870 <MX_GPIO_Init+0x14c>)
 8000744:	f043 0304 	orr.w	r3, r3, #4
 8000748:	6313      	str	r3, [r2, #48]	; 0x30
 800074a:	4b49      	ldr	r3, [pc, #292]	; (8000870 <MX_GPIO_Init+0x14c>)
 800074c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800074e:	f003 0304 	and.w	r3, r3, #4
 8000752:	61bb      	str	r3, [r7, #24]
 8000754:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000756:	2300      	movs	r3, #0
 8000758:	617b      	str	r3, [r7, #20]
 800075a:	4b45      	ldr	r3, [pc, #276]	; (8000870 <MX_GPIO_Init+0x14c>)
 800075c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800075e:	4a44      	ldr	r2, [pc, #272]	; (8000870 <MX_GPIO_Init+0x14c>)
 8000760:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000764:	6313      	str	r3, [r2, #48]	; 0x30
 8000766:	4b42      	ldr	r3, [pc, #264]	; (8000870 <MX_GPIO_Init+0x14c>)
 8000768:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800076a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800076e:	617b      	str	r3, [r7, #20]
 8000770:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000772:	2300      	movs	r3, #0
 8000774:	613b      	str	r3, [r7, #16]
 8000776:	4b3e      	ldr	r3, [pc, #248]	; (8000870 <MX_GPIO_Init+0x14c>)
 8000778:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800077a:	4a3d      	ldr	r2, [pc, #244]	; (8000870 <MX_GPIO_Init+0x14c>)
 800077c:	f043 0301 	orr.w	r3, r3, #1
 8000780:	6313      	str	r3, [r2, #48]	; 0x30
 8000782:	4b3b      	ldr	r3, [pc, #236]	; (8000870 <MX_GPIO_Init+0x14c>)
 8000784:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000786:	f003 0301 	and.w	r3, r3, #1
 800078a:	613b      	str	r3, [r7, #16]
 800078c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800078e:	2300      	movs	r3, #0
 8000790:	60fb      	str	r3, [r7, #12]
 8000792:	4b37      	ldr	r3, [pc, #220]	; (8000870 <MX_GPIO_Init+0x14c>)
 8000794:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000796:	4a36      	ldr	r2, [pc, #216]	; (8000870 <MX_GPIO_Init+0x14c>)
 8000798:	f043 0302 	orr.w	r3, r3, #2
 800079c:	6313      	str	r3, [r2, #48]	; 0x30
 800079e:	4b34      	ldr	r3, [pc, #208]	; (8000870 <MX_GPIO_Init+0x14c>)
 80007a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007a2:	f003 0302 	and.w	r3, r3, #2
 80007a6:	60fb      	str	r3, [r7, #12]
 80007a8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80007aa:	2300      	movs	r3, #0
 80007ac:	60bb      	str	r3, [r7, #8]
 80007ae:	4b30      	ldr	r3, [pc, #192]	; (8000870 <MX_GPIO_Init+0x14c>)
 80007b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007b2:	4a2f      	ldr	r2, [pc, #188]	; (8000870 <MX_GPIO_Init+0x14c>)
 80007b4:	f043 0308 	orr.w	r3, r3, #8
 80007b8:	6313      	str	r3, [r2, #48]	; 0x30
 80007ba:	4b2d      	ldr	r3, [pc, #180]	; (8000870 <MX_GPIO_Init+0x14c>)
 80007bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007be:	f003 0308 	and.w	r3, r3, #8
 80007c2:	60bb      	str	r3, [r7, #8]
 80007c4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80007c6:	2300      	movs	r3, #0
 80007c8:	607b      	str	r3, [r7, #4]
 80007ca:	4b29      	ldr	r3, [pc, #164]	; (8000870 <MX_GPIO_Init+0x14c>)
 80007cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ce:	4a28      	ldr	r2, [pc, #160]	; (8000870 <MX_GPIO_Init+0x14c>)
 80007d0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80007d4:	6313      	str	r3, [r2, #48]	; 0x30
 80007d6:	4b26      	ldr	r3, [pc, #152]	; (8000870 <MX_GPIO_Init+0x14c>)
 80007d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80007de:	607b      	str	r3, [r7, #4]
 80007e0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 80007e2:	2200      	movs	r2, #0
 80007e4:	f244 0181 	movw	r1, #16513	; 0x4081
 80007e8:	4822      	ldr	r0, [pc, #136]	; (8000874 <MX_GPIO_Init+0x150>)
 80007ea:	f001 ff97 	bl	800271c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 80007ee:	2200      	movs	r2, #0
 80007f0:	2140      	movs	r1, #64	; 0x40
 80007f2:	4821      	ldr	r0, [pc, #132]	; (8000878 <MX_GPIO_Init+0x154>)
 80007f4:	f001 ff92 	bl	800271c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 80007f8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80007fc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80007fe:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000802:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000804:	2300      	movs	r3, #0
 8000806:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000808:	f107 031c 	add.w	r3, r7, #28
 800080c:	4619      	mov	r1, r3
 800080e:	481b      	ldr	r0, [pc, #108]	; (800087c <MX_GPIO_Init+0x158>)
 8000810:	f001 fdd8 	bl	80023c4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8000814:	f244 0381 	movw	r3, #16513	; 0x4081
 8000818:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800081a:	2301      	movs	r3, #1
 800081c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800081e:	2300      	movs	r3, #0
 8000820:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000822:	2300      	movs	r3, #0
 8000824:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000826:	f107 031c 	add.w	r3, r7, #28
 800082a:	4619      	mov	r1, r3
 800082c:	4811      	ldr	r0, [pc, #68]	; (8000874 <MX_GPIO_Init+0x150>)
 800082e:	f001 fdc9 	bl	80023c4 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000832:	2340      	movs	r3, #64	; 0x40
 8000834:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000836:	2301      	movs	r3, #1
 8000838:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800083a:	2300      	movs	r3, #0
 800083c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800083e:	2300      	movs	r3, #0
 8000840:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000842:	f107 031c 	add.w	r3, r7, #28
 8000846:	4619      	mov	r1, r3
 8000848:	480b      	ldr	r0, [pc, #44]	; (8000878 <MX_GPIO_Init+0x154>)
 800084a:	f001 fdbb 	bl	80023c4 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 800084e:	2380      	movs	r3, #128	; 0x80
 8000850:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000852:	2300      	movs	r3, #0
 8000854:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000856:	2300      	movs	r3, #0
 8000858:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800085a:	f107 031c 	add.w	r3, r7, #28
 800085e:	4619      	mov	r1, r3
 8000860:	4805      	ldr	r0, [pc, #20]	; (8000878 <MX_GPIO_Init+0x154>)
 8000862:	f001 fdaf 	bl	80023c4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000866:	bf00      	nop
 8000868:	3730      	adds	r7, #48	; 0x30
 800086a:	46bd      	mov	sp, r7
 800086c:	bd80      	pop	{r7, pc}
 800086e:	bf00      	nop
 8000870:	40023800 	.word	0x40023800
 8000874:	40020400 	.word	0x40020400
 8000878:	40021800 	.word	0x40021800
 800087c:	40020800 	.word	0x40020800

08000880 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000880:	b480      	push	{r7}
 8000882:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000884:	b672      	cpsid	i
}
 8000886:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000888:	e7fe      	b.n	8000888 <Error_Handler+0x8>
	...

0800088c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800088c:	b480      	push	{r7}
 800088e:	b083      	sub	sp, #12
 8000890:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000892:	2300      	movs	r3, #0
 8000894:	607b      	str	r3, [r7, #4]
 8000896:	4b10      	ldr	r3, [pc, #64]	; (80008d8 <HAL_MspInit+0x4c>)
 8000898:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800089a:	4a0f      	ldr	r2, [pc, #60]	; (80008d8 <HAL_MspInit+0x4c>)
 800089c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80008a0:	6453      	str	r3, [r2, #68]	; 0x44
 80008a2:	4b0d      	ldr	r3, [pc, #52]	; (80008d8 <HAL_MspInit+0x4c>)
 80008a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008a6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80008aa:	607b      	str	r3, [r7, #4]
 80008ac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80008ae:	2300      	movs	r3, #0
 80008b0:	603b      	str	r3, [r7, #0]
 80008b2:	4b09      	ldr	r3, [pc, #36]	; (80008d8 <HAL_MspInit+0x4c>)
 80008b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008b6:	4a08      	ldr	r2, [pc, #32]	; (80008d8 <HAL_MspInit+0x4c>)
 80008b8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80008bc:	6413      	str	r3, [r2, #64]	; 0x40
 80008be:	4b06      	ldr	r3, [pc, #24]	; (80008d8 <HAL_MspInit+0x4c>)
 80008c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008c6:	603b      	str	r3, [r7, #0]
 80008c8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008ca:	bf00      	nop
 80008cc:	370c      	adds	r7, #12
 80008ce:	46bd      	mov	sp, r7
 80008d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008d4:	4770      	bx	lr
 80008d6:	bf00      	nop
 80008d8:	40023800 	.word	0x40023800

080008dc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80008dc:	b580      	push	{r7, lr}
 80008de:	b08a      	sub	sp, #40	; 0x28
 80008e0:	af00      	add	r7, sp, #0
 80008e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008e4:	f107 0314 	add.w	r3, r7, #20
 80008e8:	2200      	movs	r2, #0
 80008ea:	601a      	str	r2, [r3, #0]
 80008ec:	605a      	str	r2, [r3, #4]
 80008ee:	609a      	str	r2, [r3, #8]
 80008f0:	60da      	str	r2, [r3, #12]
 80008f2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 80008f4:	687b      	ldr	r3, [r7, #4]
 80008f6:	681b      	ldr	r3, [r3, #0]
 80008f8:	4a19      	ldr	r2, [pc, #100]	; (8000960 <HAL_UART_MspInit+0x84>)
 80008fa:	4293      	cmp	r3, r2
 80008fc:	d12c      	bne.n	8000958 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80008fe:	2300      	movs	r3, #0
 8000900:	613b      	str	r3, [r7, #16]
 8000902:	4b18      	ldr	r3, [pc, #96]	; (8000964 <HAL_UART_MspInit+0x88>)
 8000904:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000906:	4a17      	ldr	r2, [pc, #92]	; (8000964 <HAL_UART_MspInit+0x88>)
 8000908:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800090c:	6413      	str	r3, [r2, #64]	; 0x40
 800090e:	4b15      	ldr	r3, [pc, #84]	; (8000964 <HAL_UART_MspInit+0x88>)
 8000910:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000912:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000916:	613b      	str	r3, [r7, #16]
 8000918:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800091a:	2300      	movs	r3, #0
 800091c:	60fb      	str	r3, [r7, #12]
 800091e:	4b11      	ldr	r3, [pc, #68]	; (8000964 <HAL_UART_MspInit+0x88>)
 8000920:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000922:	4a10      	ldr	r2, [pc, #64]	; (8000964 <HAL_UART_MspInit+0x88>)
 8000924:	f043 0308 	orr.w	r3, r3, #8
 8000928:	6313      	str	r3, [r2, #48]	; 0x30
 800092a:	4b0e      	ldr	r3, [pc, #56]	; (8000964 <HAL_UART_MspInit+0x88>)
 800092c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800092e:	f003 0308 	and.w	r3, r3, #8
 8000932:	60fb      	str	r3, [r7, #12]
 8000934:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000936:	f44f 7340 	mov.w	r3, #768	; 0x300
 800093a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800093c:	2302      	movs	r3, #2
 800093e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000940:	2300      	movs	r3, #0
 8000942:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000944:	2303      	movs	r3, #3
 8000946:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000948:	2307      	movs	r3, #7
 800094a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800094c:	f107 0314 	add.w	r3, r7, #20
 8000950:	4619      	mov	r1, r3
 8000952:	4805      	ldr	r0, [pc, #20]	; (8000968 <HAL_UART_MspInit+0x8c>)
 8000954:	f001 fd36 	bl	80023c4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000958:	bf00      	nop
 800095a:	3728      	adds	r7, #40	; 0x28
 800095c:	46bd      	mov	sp, r7
 800095e:	bd80      	pop	{r7, pc}
 8000960:	40004800 	.word	0x40004800
 8000964:	40023800 	.word	0x40023800
 8000968:	40020c00 	.word	0x40020c00

0800096c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800096c:	b480      	push	{r7}
 800096e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000970:	e7fe      	b.n	8000970 <NMI_Handler+0x4>

08000972 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000972:	b480      	push	{r7}
 8000974:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000976:	e7fe      	b.n	8000976 <HardFault_Handler+0x4>

08000978 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000978:	b480      	push	{r7}
 800097a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800097c:	e7fe      	b.n	800097c <MemManage_Handler+0x4>

0800097e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800097e:	b480      	push	{r7}
 8000980:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000982:	e7fe      	b.n	8000982 <BusFault_Handler+0x4>

08000984 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000984:	b480      	push	{r7}
 8000986:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000988:	e7fe      	b.n	8000988 <UsageFault_Handler+0x4>

0800098a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800098a:	b480      	push	{r7}
 800098c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800098e:	bf00      	nop
 8000990:	46bd      	mov	sp, r7
 8000992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000996:	4770      	bx	lr

08000998 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000998:	b480      	push	{r7}
 800099a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800099c:	bf00      	nop
 800099e:	46bd      	mov	sp, r7
 80009a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009a4:	4770      	bx	lr

080009a6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80009a6:	b480      	push	{r7}
 80009a8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80009aa:	bf00      	nop
 80009ac:	46bd      	mov	sp, r7
 80009ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009b2:	4770      	bx	lr

080009b4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80009b4:	b580      	push	{r7, lr}
 80009b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80009b8:	f000 fae4 	bl	8000f84 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80009bc:	bf00      	nop
 80009be:	bd80      	pop	{r7, pc}

080009c0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80009c0:	b480      	push	{r7}
 80009c2:	af00      	add	r7, sp, #0
  return 1;
 80009c4:	2301      	movs	r3, #1
}
 80009c6:	4618      	mov	r0, r3
 80009c8:	46bd      	mov	sp, r7
 80009ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ce:	4770      	bx	lr

080009d0 <_kill>:

int _kill(int pid, int sig)
{
 80009d0:	b480      	push	{r7}
 80009d2:	b083      	sub	sp, #12
 80009d4:	af00      	add	r7, sp, #0
 80009d6:	6078      	str	r0, [r7, #4]
 80009d8:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80009da:	4b05      	ldr	r3, [pc, #20]	; (80009f0 <_kill+0x20>)
 80009dc:	2216      	movs	r2, #22
 80009de:	601a      	str	r2, [r3, #0]
  return -1;
 80009e0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80009e4:	4618      	mov	r0, r3
 80009e6:	370c      	adds	r7, #12
 80009e8:	46bd      	mov	sp, r7
 80009ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ee:	4770      	bx	lr
 80009f0:	20008518 	.word	0x20008518

080009f4 <_exit>:

void _exit (int status)
{
 80009f4:	b580      	push	{r7, lr}
 80009f6:	b082      	sub	sp, #8
 80009f8:	af00      	add	r7, sp, #0
 80009fa:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80009fc:	f04f 31ff 	mov.w	r1, #4294967295
 8000a00:	6878      	ldr	r0, [r7, #4]
 8000a02:	f7ff ffe5 	bl	80009d0 <_kill>
  while (1) {}    /* Make sure we hang here */
 8000a06:	e7fe      	b.n	8000a06 <_exit+0x12>

08000a08 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000a08:	b580      	push	{r7, lr}
 8000a0a:	b086      	sub	sp, #24
 8000a0c:	af00      	add	r7, sp, #0
 8000a0e:	60f8      	str	r0, [r7, #12]
 8000a10:	60b9      	str	r1, [r7, #8]
 8000a12:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a14:	2300      	movs	r3, #0
 8000a16:	617b      	str	r3, [r7, #20]
 8000a18:	e00a      	b.n	8000a30 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000a1a:	f3af 8000 	nop.w
 8000a1e:	4601      	mov	r1, r0
 8000a20:	68bb      	ldr	r3, [r7, #8]
 8000a22:	1c5a      	adds	r2, r3, #1
 8000a24:	60ba      	str	r2, [r7, #8]
 8000a26:	b2ca      	uxtb	r2, r1
 8000a28:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a2a:	697b      	ldr	r3, [r7, #20]
 8000a2c:	3301      	adds	r3, #1
 8000a2e:	617b      	str	r3, [r7, #20]
 8000a30:	697a      	ldr	r2, [r7, #20]
 8000a32:	687b      	ldr	r3, [r7, #4]
 8000a34:	429a      	cmp	r2, r3
 8000a36:	dbf0      	blt.n	8000a1a <_read+0x12>
  }

  return len;
 8000a38:	687b      	ldr	r3, [r7, #4]
}
 8000a3a:	4618      	mov	r0, r3
 8000a3c:	3718      	adds	r7, #24
 8000a3e:	46bd      	mov	sp, r7
 8000a40:	bd80      	pop	{r7, pc}

08000a42 <_close>:
  }
  return len;
}

int _close(int file)
{
 8000a42:	b480      	push	{r7}
 8000a44:	b083      	sub	sp, #12
 8000a46:	af00      	add	r7, sp, #0
 8000a48:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000a4a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000a4e:	4618      	mov	r0, r3
 8000a50:	370c      	adds	r7, #12
 8000a52:	46bd      	mov	sp, r7
 8000a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a58:	4770      	bx	lr

08000a5a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000a5a:	b480      	push	{r7}
 8000a5c:	b083      	sub	sp, #12
 8000a5e:	af00      	add	r7, sp, #0
 8000a60:	6078      	str	r0, [r7, #4]
 8000a62:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000a64:	683b      	ldr	r3, [r7, #0]
 8000a66:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000a6a:	605a      	str	r2, [r3, #4]
  return 0;
 8000a6c:	2300      	movs	r3, #0
}
 8000a6e:	4618      	mov	r0, r3
 8000a70:	370c      	adds	r7, #12
 8000a72:	46bd      	mov	sp, r7
 8000a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a78:	4770      	bx	lr

08000a7a <_isatty>:

int _isatty(int file)
{
 8000a7a:	b480      	push	{r7}
 8000a7c:	b083      	sub	sp, #12
 8000a7e:	af00      	add	r7, sp, #0
 8000a80:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000a82:	2301      	movs	r3, #1
}
 8000a84:	4618      	mov	r0, r3
 8000a86:	370c      	adds	r7, #12
 8000a88:	46bd      	mov	sp, r7
 8000a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a8e:	4770      	bx	lr

08000a90 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000a90:	b480      	push	{r7}
 8000a92:	b085      	sub	sp, #20
 8000a94:	af00      	add	r7, sp, #0
 8000a96:	60f8      	str	r0, [r7, #12]
 8000a98:	60b9      	str	r1, [r7, #8]
 8000a9a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000a9c:	2300      	movs	r3, #0
}
 8000a9e:	4618      	mov	r0, r3
 8000aa0:	3714      	adds	r7, #20
 8000aa2:	46bd      	mov	sp, r7
 8000aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aa8:	4770      	bx	lr
	...

08000aac <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000aac:	b480      	push	{r7}
 8000aae:	b087      	sub	sp, #28
 8000ab0:	af00      	add	r7, sp, #0
 8000ab2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000ab4:	4a14      	ldr	r2, [pc, #80]	; (8000b08 <_sbrk+0x5c>)
 8000ab6:	4b15      	ldr	r3, [pc, #84]	; (8000b0c <_sbrk+0x60>)
 8000ab8:	1ad3      	subs	r3, r2, r3
 8000aba:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000abc:	697b      	ldr	r3, [r7, #20]
 8000abe:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000ac0:	4b13      	ldr	r3, [pc, #76]	; (8000b10 <_sbrk+0x64>)
 8000ac2:	681b      	ldr	r3, [r3, #0]
 8000ac4:	2b00      	cmp	r3, #0
 8000ac6:	d102      	bne.n	8000ace <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000ac8:	4b11      	ldr	r3, [pc, #68]	; (8000b10 <_sbrk+0x64>)
 8000aca:	4a12      	ldr	r2, [pc, #72]	; (8000b14 <_sbrk+0x68>)
 8000acc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000ace:	4b10      	ldr	r3, [pc, #64]	; (8000b10 <_sbrk+0x64>)
 8000ad0:	681a      	ldr	r2, [r3, #0]
 8000ad2:	687b      	ldr	r3, [r7, #4]
 8000ad4:	4413      	add	r3, r2
 8000ad6:	693a      	ldr	r2, [r7, #16]
 8000ad8:	429a      	cmp	r2, r3
 8000ada:	d205      	bcs.n	8000ae8 <_sbrk+0x3c>
  {
    errno = ENOMEM;
 8000adc:	4b0e      	ldr	r3, [pc, #56]	; (8000b18 <_sbrk+0x6c>)
 8000ade:	220c      	movs	r2, #12
 8000ae0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000ae2:	f04f 33ff 	mov.w	r3, #4294967295
 8000ae6:	e009      	b.n	8000afc <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 8000ae8:	4b09      	ldr	r3, [pc, #36]	; (8000b10 <_sbrk+0x64>)
 8000aea:	681b      	ldr	r3, [r3, #0]
 8000aec:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000aee:	4b08      	ldr	r3, [pc, #32]	; (8000b10 <_sbrk+0x64>)
 8000af0:	681a      	ldr	r2, [r3, #0]
 8000af2:	687b      	ldr	r3, [r7, #4]
 8000af4:	4413      	add	r3, r2
 8000af6:	4a06      	ldr	r2, [pc, #24]	; (8000b10 <_sbrk+0x64>)
 8000af8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000afa:	68fb      	ldr	r3, [r7, #12]
}
 8000afc:	4618      	mov	r0, r3
 8000afe:	371c      	adds	r7, #28
 8000b00:	46bd      	mov	sp, r7
 8000b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b06:	4770      	bx	lr
 8000b08:	20030000 	.word	0x20030000
 8000b0c:	00000400 	.word	0x00000400
 8000b10:	200000e8 	.word	0x200000e8
 8000b14:	20008528 	.word	0x20008528
 8000b18:	20008518 	.word	0x20008518

08000b1c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000b1c:	b480      	push	{r7}
 8000b1e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000b20:	4b06      	ldr	r3, [pc, #24]	; (8000b3c <SystemInit+0x20>)
 8000b22:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000b26:	4a05      	ldr	r2, [pc, #20]	; (8000b3c <SystemInit+0x20>)
 8000b28:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000b2c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000b30:	bf00      	nop
 8000b32:	46bd      	mov	sp, r7
 8000b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b38:	4770      	bx	lr
 8000b3a:	bf00      	nop
 8000b3c:	e000ed00 	.word	0xe000ed00

08000b40 <udp_echoserver_init>:
  * @brief  Initialize the server application.
  * @param  None
  * @retval None
  */
void udp_echoserver_init(void)
{
 8000b40:	b580      	push	{r7, lr}
 8000b42:	b082      	sub	sp, #8
 8000b44:	af00      	add	r7, sp, #0
   struct udp_pcb *upcb;
   err_t err;
   
   /* Create a new UDP control block  */
   upcb = udp_new();
 8000b46:	f00b f8d9 	bl	800bcfc <udp_new>
 8000b4a:	6078      	str	r0, [r7, #4]
   
   if (upcb)
 8000b4c:	687b      	ldr	r3, [r7, #4]
 8000b4e:	2b00      	cmp	r3, #0
 8000b50:	d00f      	beq.n	8000b72 <udp_echoserver_init+0x32>
   {
     /* Bind the upcb to the UDP_PORT port */
     /* Using IP_ADDR_ANY allow the upcb to be used by any local interface */
      err = udp_bind(upcb, IP_ADDR_ANY, UDP_SERVER_PORT);
 8000b52:	2207      	movs	r2, #7
 8000b54:	4909      	ldr	r1, [pc, #36]	; (8000b7c <udp_echoserver_init+0x3c>)
 8000b56:	6878      	ldr	r0, [r7, #4]
 8000b58:	f00a ff92 	bl	800ba80 <udp_bind>
 8000b5c:	4603      	mov	r3, r0
 8000b5e:	70fb      	strb	r3, [r7, #3]
      
      if(err == ERR_OK)
 8000b60:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8000b64:	2b00      	cmp	r3, #0
 8000b66:	d104      	bne.n	8000b72 <udp_echoserver_init+0x32>
      {
        /* Set a receive callback for the upcb */
        udp_recv(upcb, udp_echoserver_receive_callback, NULL);
 8000b68:	2200      	movs	r2, #0
 8000b6a:	4905      	ldr	r1, [pc, #20]	; (8000b80 <udp_echoserver_init+0x40>)
 8000b6c:	6878      	ldr	r0, [r7, #4]
 8000b6e:	f00b f8a5 	bl	800bcbc <udp_recv>
      }
   }
}
 8000b72:	bf00      	nop
 8000b74:	3708      	adds	r7, #8
 8000b76:	46bd      	mov	sp, r7
 8000b78:	bd80      	pop	{r7, pc}
 8000b7a:	bf00      	nop
 8000b7c:	08011ebc 	.word	0x08011ebc
 8000b80:	08000b85 	.word	0x08000b85

08000b84 <udp_echoserver_receive_callback>:
  * @param port the remote port from which the packet was received
  * @retval None
  */
extern UART_HandleTypeDef huart3;
void udp_echoserver_receive_callback(void *arg, struct udp_pcb *upcb, struct pbuf *p, const ip_addr_t *addr, u16_t port)
{
 8000b84:	b580      	push	{r7, lr}
 8000b86:	b084      	sub	sp, #16
 8000b88:	af00      	add	r7, sp, #0
 8000b8a:	60f8      	str	r0, [r7, #12]
 8000b8c:	60b9      	str	r1, [r7, #8]
 8000b8e:	607a      	str	r2, [r7, #4]
 8000b90:	603b      	str	r3, [r7, #0]
	HAL_UART_Transmit(&huart3, p->payload, p->len, 10);
 8000b92:	687b      	ldr	r3, [r7, #4]
 8000b94:	6859      	ldr	r1, [r3, #4]
 8000b96:	687b      	ldr	r3, [r7, #4]
 8000b98:	895a      	ldrh	r2, [r3, #10]
 8000b9a:	230a      	movs	r3, #10
 8000b9c:	480a      	ldr	r0, [pc, #40]	; (8000bc8 <udp_echoserver_receive_callback+0x44>)
 8000b9e:	f002 fabc 	bl	800311a <HAL_UART_Transmit>
  /* Connect to the remote client */
  udp_connect(upcb, addr, UDP_CLIENT_PORT);
 8000ba2:	2207      	movs	r2, #7
 8000ba4:	6839      	ldr	r1, [r7, #0]
 8000ba6:	68b8      	ldr	r0, [r7, #8]
 8000ba8:	f00a fff2 	bl	800bb90 <udp_connect>
    
  /* Tell the client that we have accepted it */
  udp_send(upcb, p);
 8000bac:	6879      	ldr	r1, [r7, #4]
 8000bae:	68b8      	ldr	r0, [r7, #8]
 8000bb0:	f00a fd7c 	bl	800b6ac <udp_send>

  /* free the UDP connection, so we can accept new clients */
  udp_disconnect(upcb);
 8000bb4:	68b8      	ldr	r0, [r7, #8]
 8000bb6:	f00b f859 	bl	800bc6c <udp_disconnect>
	
  /* Free the p buffer */
  pbuf_free(p);
 8000bba:	6878      	ldr	r0, [r7, #4]
 8000bbc:	f004 fe70 	bl	80058a0 <pbuf_free>
   
}
 8000bc0:	bf00      	nop
 8000bc2:	3710      	adds	r7, #16
 8000bc4:	46bd      	mov	sp, r7
 8000bc6:	bd80      	pop	{r7, pc}
 8000bc8:	200000a4 	.word	0x200000a4

08000bcc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8000bcc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000c04 <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000bd0:	480d      	ldr	r0, [pc, #52]	; (8000c08 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000bd2:	490e      	ldr	r1, [pc, #56]	; (8000c0c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000bd4:	4a0e      	ldr	r2, [pc, #56]	; (8000c10 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000bd6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000bd8:	e002      	b.n	8000be0 <LoopCopyDataInit>

08000bda <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000bda:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000bdc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000bde:	3304      	adds	r3, #4

08000be0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000be0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000be2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000be4:	d3f9      	bcc.n	8000bda <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000be6:	4a0b      	ldr	r2, [pc, #44]	; (8000c14 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000be8:	4c0b      	ldr	r4, [pc, #44]	; (8000c18 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000bea:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000bec:	e001      	b.n	8000bf2 <LoopFillZerobss>

08000bee <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000bee:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000bf0:	3204      	adds	r2, #4

08000bf2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000bf2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000bf4:	d3fb      	bcc.n	8000bee <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000bf6:	f7ff ff91 	bl	8000b1c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000bfa:	f00d fe1f 	bl	800e83c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000bfe:	f7ff fce1 	bl	80005c4 <main>
  bx  lr    
 8000c02:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8000c04:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8000c08:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c0c:	20000088 	.word	0x20000088
  ldr r2, =_sidata
 8000c10:	08011fbc 	.word	0x08011fbc
  ldr r2, =_sbss
 8000c14:	20000088 	.word	0x20000088
  ldr r4, =_ebss
 8000c18:	20008528 	.word	0x20008528

08000c1c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000c1c:	e7fe      	b.n	8000c1c <ADC_IRQHandler>

08000c1e <LAN8742_RegisterBusIO>:
  * @param  ioctx: holds device IO functions.  
  * @retval LAN8742_STATUS_OK  if OK
  *         LAN8742_STATUS_ERROR if missing mandatory function
  */
int32_t  LAN8742_RegisterBusIO(lan8742_Object_t *pObj, lan8742_IOCtx_t *ioctx)
{
 8000c1e:	b480      	push	{r7}
 8000c20:	b083      	sub	sp, #12
 8000c22:	af00      	add	r7, sp, #0
 8000c24:	6078      	str	r0, [r7, #4]
 8000c26:	6039      	str	r1, [r7, #0]
  if(!pObj || !ioctx->ReadReg || !ioctx->WriteReg || !ioctx->GetTick)
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	2b00      	cmp	r3, #0
 8000c2c:	d00b      	beq.n	8000c46 <LAN8742_RegisterBusIO+0x28>
 8000c2e:	683b      	ldr	r3, [r7, #0]
 8000c30:	68db      	ldr	r3, [r3, #12]
 8000c32:	2b00      	cmp	r3, #0
 8000c34:	d007      	beq.n	8000c46 <LAN8742_RegisterBusIO+0x28>
 8000c36:	683b      	ldr	r3, [r7, #0]
 8000c38:	689b      	ldr	r3, [r3, #8]
 8000c3a:	2b00      	cmp	r3, #0
 8000c3c:	d003      	beq.n	8000c46 <LAN8742_RegisterBusIO+0x28>
 8000c3e:	683b      	ldr	r3, [r7, #0]
 8000c40:	691b      	ldr	r3, [r3, #16]
 8000c42:	2b00      	cmp	r3, #0
 8000c44:	d102      	bne.n	8000c4c <LAN8742_RegisterBusIO+0x2e>
  {
    return LAN8742_STATUS_ERROR;
 8000c46:	f04f 33ff 	mov.w	r3, #4294967295
 8000c4a:	e014      	b.n	8000c76 <LAN8742_RegisterBusIO+0x58>
  }
  
  pObj->IO.Init = ioctx->Init;
 8000c4c:	683b      	ldr	r3, [r7, #0]
 8000c4e:	681a      	ldr	r2, [r3, #0]
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	609a      	str	r2, [r3, #8]
  pObj->IO.DeInit = ioctx->DeInit;
 8000c54:	683b      	ldr	r3, [r7, #0]
 8000c56:	685a      	ldr	r2, [r3, #4]
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	60da      	str	r2, [r3, #12]
  pObj->IO.ReadReg = ioctx->ReadReg;
 8000c5c:	683b      	ldr	r3, [r7, #0]
 8000c5e:	68da      	ldr	r2, [r3, #12]
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	615a      	str	r2, [r3, #20]
  pObj->IO.WriteReg = ioctx->WriteReg;
 8000c64:	683b      	ldr	r3, [r7, #0]
 8000c66:	689a      	ldr	r2, [r3, #8]
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	611a      	str	r2, [r3, #16]
  pObj->IO.GetTick = ioctx->GetTick;
 8000c6c:	683b      	ldr	r3, [r7, #0]
 8000c6e:	691a      	ldr	r2, [r3, #16]
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	619a      	str	r2, [r3, #24]
  
  return LAN8742_STATUS_OK;
 8000c74:	2300      	movs	r3, #0
}
 8000c76:	4618      	mov	r0, r3
 8000c78:	370c      	adds	r7, #12
 8000c7a:	46bd      	mov	sp, r7
 8000c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c80:	4770      	bx	lr

08000c82 <LAN8742_Init>:
  *         LAN8742_STATUS_READ_ERROR if connot read register
  *         LAN8742_STATUS_WRITE_ERROR if connot write to register
  *         LAN8742_STATUS_RESET_TIMEOUT if cannot perform a software reset
  */
 int32_t LAN8742_Init(lan8742_Object_t *pObj)
 {
 8000c82:	b580      	push	{r7, lr}
 8000c84:	b086      	sub	sp, #24
 8000c86:	af00      	add	r7, sp, #0
 8000c88:	6078      	str	r0, [r7, #4]
   uint32_t tickstart = 0, regvalue = 0, addr = 0;
 8000c8a:	2300      	movs	r3, #0
 8000c8c:	60fb      	str	r3, [r7, #12]
 8000c8e:	2300      	movs	r3, #0
 8000c90:	60bb      	str	r3, [r7, #8]
 8000c92:	2300      	movs	r3, #0
 8000c94:	617b      	str	r3, [r7, #20]
   int32_t status = LAN8742_STATUS_OK;
 8000c96:	2300      	movs	r3, #0
 8000c98:	613b      	str	r3, [r7, #16]
   
   if(pObj->Is_Initialized == 0)
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	685b      	ldr	r3, [r3, #4]
 8000c9e:	2b00      	cmp	r3, #0
 8000ca0:	d17c      	bne.n	8000d9c <LAN8742_Init+0x11a>
   {
     if(pObj->IO.Init != 0)
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	689b      	ldr	r3, [r3, #8]
 8000ca6:	2b00      	cmp	r3, #0
 8000ca8:	d002      	beq.n	8000cb0 <LAN8742_Init+0x2e>
     {
       /* GPIO and Clocks initialization */
       pObj->IO.Init();
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	689b      	ldr	r3, [r3, #8]
 8000cae:	4798      	blx	r3
     }
   
     /* for later check */
     pObj->DevAddr = LAN8742_MAX_DEV_ADDR + 1;
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	2220      	movs	r2, #32
 8000cb4:	601a      	str	r2, [r3, #0]
   
     /* Get the device address from special mode register */  
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 8000cb6:	2300      	movs	r3, #0
 8000cb8:	617b      	str	r3, [r7, #20]
 8000cba:	e01c      	b.n	8000cf6 <LAN8742_Init+0x74>
     {
       if(pObj->IO.ReadReg(addr, LAN8742_SMR, &regvalue) < 0)
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	695b      	ldr	r3, [r3, #20]
 8000cc0:	f107 0208 	add.w	r2, r7, #8
 8000cc4:	2112      	movs	r1, #18
 8000cc6:	6978      	ldr	r0, [r7, #20]
 8000cc8:	4798      	blx	r3
 8000cca:	4603      	mov	r3, r0
 8000ccc:	2b00      	cmp	r3, #0
 8000cce:	da03      	bge.n	8000cd8 <LAN8742_Init+0x56>
       { 
         status = LAN8742_STATUS_READ_ERROR;
 8000cd0:	f06f 0304 	mvn.w	r3, #4
 8000cd4:	613b      	str	r3, [r7, #16]
         /* Can't read from this device address 
            continue with next address */
         continue;
 8000cd6:	e00b      	b.n	8000cf0 <LAN8742_Init+0x6e>
       }
     
       if((regvalue & LAN8742_SMR_PHY_ADDR) == addr)
 8000cd8:	68bb      	ldr	r3, [r7, #8]
 8000cda:	f003 031f 	and.w	r3, r3, #31
 8000cde:	697a      	ldr	r2, [r7, #20]
 8000ce0:	429a      	cmp	r2, r3
 8000ce2:	d105      	bne.n	8000cf0 <LAN8742_Init+0x6e>
       {
         pObj->DevAddr = addr;
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	697a      	ldr	r2, [r7, #20]
 8000ce8:	601a      	str	r2, [r3, #0]
         status = LAN8742_STATUS_OK;
 8000cea:	2300      	movs	r3, #0
 8000cec:	613b      	str	r3, [r7, #16]
         break;
 8000cee:	e005      	b.n	8000cfc <LAN8742_Init+0x7a>
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 8000cf0:	697b      	ldr	r3, [r7, #20]
 8000cf2:	3301      	adds	r3, #1
 8000cf4:	617b      	str	r3, [r7, #20]
 8000cf6:	697b      	ldr	r3, [r7, #20]
 8000cf8:	2b1f      	cmp	r3, #31
 8000cfa:	d9df      	bls.n	8000cbc <LAN8742_Init+0x3a>
       }
     }
   
     if(pObj->DevAddr > LAN8742_MAX_DEV_ADDR)
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	681b      	ldr	r3, [r3, #0]
 8000d00:	2b1f      	cmp	r3, #31
 8000d02:	d902      	bls.n	8000d0a <LAN8742_Init+0x88>
     {
       status = LAN8742_STATUS_ADDRESS_ERROR;
 8000d04:	f06f 0302 	mvn.w	r3, #2
 8000d08:	613b      	str	r3, [r7, #16]
     }
     
     /* if device address is matched */
     if(status == LAN8742_STATUS_OK)
 8000d0a:	693b      	ldr	r3, [r7, #16]
 8000d0c:	2b00      	cmp	r3, #0
 8000d0e:	d145      	bne.n	8000d9c <LAN8742_Init+0x11a>
     {
       /* set a software reset  */
       if(pObj->IO.WriteReg(pObj->DevAddr, LAN8742_BCR, LAN8742_BCR_SOFT_RESET) >= 0)
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	691b      	ldr	r3, [r3, #16]
 8000d14:	687a      	ldr	r2, [r7, #4]
 8000d16:	6810      	ldr	r0, [r2, #0]
 8000d18:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000d1c:	2100      	movs	r1, #0
 8000d1e:	4798      	blx	r3
 8000d20:	4603      	mov	r3, r0
 8000d22:	2b00      	cmp	r3, #0
 8000d24:	db37      	blt.n	8000d96 <LAN8742_Init+0x114>
       { 
         /* get software reset status */
         if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &regvalue) >= 0)
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	695b      	ldr	r3, [r3, #20]
 8000d2a:	687a      	ldr	r2, [r7, #4]
 8000d2c:	6810      	ldr	r0, [r2, #0]
 8000d2e:	f107 0208 	add.w	r2, r7, #8
 8000d32:	2100      	movs	r1, #0
 8000d34:	4798      	blx	r3
 8000d36:	4603      	mov	r3, r0
 8000d38:	2b00      	cmp	r3, #0
 8000d3a:	db28      	blt.n	8000d8e <LAN8742_Init+0x10c>
         { 
           tickstart = pObj->IO.GetTick();
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	699b      	ldr	r3, [r3, #24]
 8000d40:	4798      	blx	r3
 8000d42:	4603      	mov	r3, r0
 8000d44:	60fb      	str	r3, [r7, #12]
           
           /* wait until software reset is done or timeout occured  */
           while(regvalue & LAN8742_BCR_SOFT_RESET)
 8000d46:	e01c      	b.n	8000d82 <LAN8742_Init+0x100>
           {
             if((pObj->IO.GetTick() - tickstart) <= LAN8742_SW_RESET_TO)
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	699b      	ldr	r3, [r3, #24]
 8000d4c:	4798      	blx	r3
 8000d4e:	4603      	mov	r3, r0
 8000d50:	461a      	mov	r2, r3
 8000d52:	68fb      	ldr	r3, [r7, #12]
 8000d54:	1ad3      	subs	r3, r2, r3
 8000d56:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8000d5a:	d80e      	bhi.n	8000d7a <LAN8742_Init+0xf8>
             {
               if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &regvalue) < 0)
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	695b      	ldr	r3, [r3, #20]
 8000d60:	687a      	ldr	r2, [r7, #4]
 8000d62:	6810      	ldr	r0, [r2, #0]
 8000d64:	f107 0208 	add.w	r2, r7, #8
 8000d68:	2100      	movs	r1, #0
 8000d6a:	4798      	blx	r3
 8000d6c:	4603      	mov	r3, r0
 8000d6e:	2b00      	cmp	r3, #0
 8000d70:	da07      	bge.n	8000d82 <LAN8742_Init+0x100>
               { 
                 status = LAN8742_STATUS_READ_ERROR;
 8000d72:	f06f 0304 	mvn.w	r3, #4
 8000d76:	613b      	str	r3, [r7, #16]
                 break;
 8000d78:	e010      	b.n	8000d9c <LAN8742_Init+0x11a>
               }
             }
             else
             {
               status = LAN8742_STATUS_RESET_TIMEOUT;
 8000d7a:	f06f 0301 	mvn.w	r3, #1
 8000d7e:	613b      	str	r3, [r7, #16]
               break;
 8000d80:	e00c      	b.n	8000d9c <LAN8742_Init+0x11a>
           while(regvalue & LAN8742_BCR_SOFT_RESET)
 8000d82:	68bb      	ldr	r3, [r7, #8]
 8000d84:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000d88:	2b00      	cmp	r3, #0
 8000d8a:	d1dd      	bne.n	8000d48 <LAN8742_Init+0xc6>
 8000d8c:	e006      	b.n	8000d9c <LAN8742_Init+0x11a>
             }
           } 
         }
         else
         {
           status = LAN8742_STATUS_READ_ERROR;
 8000d8e:	f06f 0304 	mvn.w	r3, #4
 8000d92:	613b      	str	r3, [r7, #16]
 8000d94:	e002      	b.n	8000d9c <LAN8742_Init+0x11a>
         }
       }
       else
       {
         status = LAN8742_STATUS_WRITE_ERROR;
 8000d96:	f06f 0303 	mvn.w	r3, #3
 8000d9a:	613b      	str	r3, [r7, #16]
       }
     }
   }
      
   if(status == LAN8742_STATUS_OK)
 8000d9c:	693b      	ldr	r3, [r7, #16]
 8000d9e:	2b00      	cmp	r3, #0
 8000da0:	d112      	bne.n	8000dc8 <LAN8742_Init+0x146>
   {
     tickstart =  pObj->IO.GetTick();
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	699b      	ldr	r3, [r3, #24]
 8000da6:	4798      	blx	r3
 8000da8:	4603      	mov	r3, r0
 8000daa:	60fb      	str	r3, [r7, #12]
     
     /* Wait for 2s to perform initialization */
     while((pObj->IO.GetTick() - tickstart) <= LAN8742_INIT_TO)
 8000dac:	bf00      	nop
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	699b      	ldr	r3, [r3, #24]
 8000db2:	4798      	blx	r3
 8000db4:	4603      	mov	r3, r0
 8000db6:	461a      	mov	r2, r3
 8000db8:	68fb      	ldr	r3, [r7, #12]
 8000dba:	1ad3      	subs	r3, r2, r3
 8000dbc:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8000dc0:	d9f5      	bls.n	8000dae <LAN8742_Init+0x12c>
     {
     }
     pObj->Is_Initialized = 1;
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	2201      	movs	r2, #1
 8000dc6:	605a      	str	r2, [r3, #4]
   }
   
   return status;
 8000dc8:	693b      	ldr	r3, [r7, #16]
 }
 8000dca:	4618      	mov	r0, r3
 8000dcc:	3718      	adds	r7, #24
 8000dce:	46bd      	mov	sp, r7
 8000dd0:	bd80      	pop	{r7, pc}

08000dd2 <LAN8742_GetLinkState>:
  *         LAN8742_STATUS_10MBITS_HALFDUPLEX  if 10Mb/s HD       
  *         LAN8742_STATUS_READ_ERROR if connot read register
  *         LAN8742_STATUS_WRITE_ERROR if connot write to register
  */
int32_t LAN8742_GetLinkState(lan8742_Object_t *pObj)
{
 8000dd2:	b580      	push	{r7, lr}
 8000dd4:	b084      	sub	sp, #16
 8000dd6:	af00      	add	r7, sp, #0
 8000dd8:	6078      	str	r0, [r7, #4]
  uint32_t readval = 0;
 8000dda:	2300      	movs	r3, #0
 8000ddc:	60fb      	str	r3, [r7, #12]
  
  /* Read Status register  */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	695b      	ldr	r3, [r3, #20]
 8000de2:	687a      	ldr	r2, [r7, #4]
 8000de4:	6810      	ldr	r0, [r2, #0]
 8000de6:	f107 020c 	add.w	r2, r7, #12
 8000dea:	2101      	movs	r1, #1
 8000dec:	4798      	blx	r3
 8000dee:	4603      	mov	r3, r0
 8000df0:	2b00      	cmp	r3, #0
 8000df2:	da02      	bge.n	8000dfa <LAN8742_GetLinkState+0x28>
  {
    return LAN8742_STATUS_READ_ERROR;
 8000df4:	f06f 0304 	mvn.w	r3, #4
 8000df8:	e06e      	b.n	8000ed8 <LAN8742_GetLinkState+0x106>
  }
  
  /* Read Status register again */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	695b      	ldr	r3, [r3, #20]
 8000dfe:	687a      	ldr	r2, [r7, #4]
 8000e00:	6810      	ldr	r0, [r2, #0]
 8000e02:	f107 020c 	add.w	r2, r7, #12
 8000e06:	2101      	movs	r1, #1
 8000e08:	4798      	blx	r3
 8000e0a:	4603      	mov	r3, r0
 8000e0c:	2b00      	cmp	r3, #0
 8000e0e:	da02      	bge.n	8000e16 <LAN8742_GetLinkState+0x44>
  {
    return LAN8742_STATUS_READ_ERROR;
 8000e10:	f06f 0304 	mvn.w	r3, #4
 8000e14:	e060      	b.n	8000ed8 <LAN8742_GetLinkState+0x106>
  }
  
  if((readval & LAN8742_BSR_LINK_STATUS) == 0)
 8000e16:	68fb      	ldr	r3, [r7, #12]
 8000e18:	f003 0304 	and.w	r3, r3, #4
 8000e1c:	2b00      	cmp	r3, #0
 8000e1e:	d101      	bne.n	8000e24 <LAN8742_GetLinkState+0x52>
  {
    /* Return Link Down status */
    return LAN8742_STATUS_LINK_DOWN;    
 8000e20:	2301      	movs	r3, #1
 8000e22:	e059      	b.n	8000ed8 <LAN8742_GetLinkState+0x106>
  }
  
  /* Check Auto negotiaition */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &readval) < 0)
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	695b      	ldr	r3, [r3, #20]
 8000e28:	687a      	ldr	r2, [r7, #4]
 8000e2a:	6810      	ldr	r0, [r2, #0]
 8000e2c:	f107 020c 	add.w	r2, r7, #12
 8000e30:	2100      	movs	r1, #0
 8000e32:	4798      	blx	r3
 8000e34:	4603      	mov	r3, r0
 8000e36:	2b00      	cmp	r3, #0
 8000e38:	da02      	bge.n	8000e40 <LAN8742_GetLinkState+0x6e>
  {
    return LAN8742_STATUS_READ_ERROR;
 8000e3a:	f06f 0304 	mvn.w	r3, #4
 8000e3e:	e04b      	b.n	8000ed8 <LAN8742_GetLinkState+0x106>
  }
  
  if((readval & LAN8742_BCR_AUTONEGO_EN) != LAN8742_BCR_AUTONEGO_EN)
 8000e40:	68fb      	ldr	r3, [r7, #12]
 8000e42:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000e46:	2b00      	cmp	r3, #0
 8000e48:	d11b      	bne.n	8000e82 <LAN8742_GetLinkState+0xb0>
  {
    if(((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT) && ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)) 
 8000e4a:	68fb      	ldr	r3, [r7, #12]
 8000e4c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000e50:	2b00      	cmp	r3, #0
 8000e52:	d006      	beq.n	8000e62 <LAN8742_GetLinkState+0x90>
 8000e54:	68fb      	ldr	r3, [r7, #12]
 8000e56:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000e5a:	2b00      	cmp	r3, #0
 8000e5c:	d001      	beq.n	8000e62 <LAN8742_GetLinkState+0x90>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 8000e5e:	2302      	movs	r3, #2
 8000e60:	e03a      	b.n	8000ed8 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT)
 8000e62:	68fb      	ldr	r3, [r7, #12]
 8000e64:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000e68:	2b00      	cmp	r3, #0
 8000e6a:	d001      	beq.n	8000e70 <LAN8742_GetLinkState+0x9e>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 8000e6c:	2303      	movs	r3, #3
 8000e6e:	e033      	b.n	8000ed8 <LAN8742_GetLinkState+0x106>
    }        
    else if ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)
 8000e70:	68fb      	ldr	r3, [r7, #12]
 8000e72:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000e76:	2b00      	cmp	r3, #0
 8000e78:	d001      	beq.n	8000e7e <LAN8742_GetLinkState+0xac>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 8000e7a:	2304      	movs	r3, #4
 8000e7c:	e02c      	b.n	8000ed8 <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 8000e7e:	2305      	movs	r3, #5
 8000e80:	e02a      	b.n	8000ed8 <LAN8742_GetLinkState+0x106>
    }  		
  }
  else /* Auto Nego enabled */
  {
    if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_PHYSCSR, &readval) < 0)
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	695b      	ldr	r3, [r3, #20]
 8000e86:	687a      	ldr	r2, [r7, #4]
 8000e88:	6810      	ldr	r0, [r2, #0]
 8000e8a:	f107 020c 	add.w	r2, r7, #12
 8000e8e:	211f      	movs	r1, #31
 8000e90:	4798      	blx	r3
 8000e92:	4603      	mov	r3, r0
 8000e94:	2b00      	cmp	r3, #0
 8000e96:	da02      	bge.n	8000e9e <LAN8742_GetLinkState+0xcc>
    {
      return LAN8742_STATUS_READ_ERROR;
 8000e98:	f06f 0304 	mvn.w	r3, #4
 8000e9c:	e01c      	b.n	8000ed8 <LAN8742_GetLinkState+0x106>
    }
    
    /* Check if auto nego not done */
    if((readval & LAN8742_PHYSCSR_AUTONEGO_DONE) == 0)
 8000e9e:	68fb      	ldr	r3, [r7, #12]
 8000ea0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000ea4:	2b00      	cmp	r3, #0
 8000ea6:	d101      	bne.n	8000eac <LAN8742_GetLinkState+0xda>
    {
      return LAN8742_STATUS_AUTONEGO_NOTDONE;
 8000ea8:	2306      	movs	r3, #6
 8000eaa:	e015      	b.n	8000ed8 <LAN8742_GetLinkState+0x106>
    }
    
    if((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_FD)
 8000eac:	68fb      	ldr	r3, [r7, #12]
 8000eae:	f003 031c 	and.w	r3, r3, #28
 8000eb2:	2b18      	cmp	r3, #24
 8000eb4:	d101      	bne.n	8000eba <LAN8742_GetLinkState+0xe8>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 8000eb6:	2302      	movs	r3, #2
 8000eb8:	e00e      	b.n	8000ed8 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_HD)
 8000eba:	68fb      	ldr	r3, [r7, #12]
 8000ebc:	f003 031c 	and.w	r3, r3, #28
 8000ec0:	2b08      	cmp	r3, #8
 8000ec2:	d101      	bne.n	8000ec8 <LAN8742_GetLinkState+0xf6>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 8000ec4:	2303      	movs	r3, #3
 8000ec6:	e007      	b.n	8000ed8 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_10BT_FD)
 8000ec8:	68fb      	ldr	r3, [r7, #12]
 8000eca:	f003 031c 	and.w	r3, r3, #28
 8000ece:	2b14      	cmp	r3, #20
 8000ed0:	d101      	bne.n	8000ed6 <LAN8742_GetLinkState+0x104>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 8000ed2:	2304      	movs	r3, #4
 8000ed4:	e000      	b.n	8000ed8 <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 8000ed6:	2305      	movs	r3, #5
    }				
  }
}
 8000ed8:	4618      	mov	r0, r3
 8000eda:	3710      	adds	r7, #16
 8000edc:	46bd      	mov	sp, r7
 8000ede:	bd80      	pop	{r7, pc}

08000ee0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ee0:	b580      	push	{r7, lr}
 8000ee2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000ee4:	4b0e      	ldr	r3, [pc, #56]	; (8000f20 <HAL_Init+0x40>)
 8000ee6:	681b      	ldr	r3, [r3, #0]
 8000ee8:	4a0d      	ldr	r2, [pc, #52]	; (8000f20 <HAL_Init+0x40>)
 8000eea:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000eee:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000ef0:	4b0b      	ldr	r3, [pc, #44]	; (8000f20 <HAL_Init+0x40>)
 8000ef2:	681b      	ldr	r3, [r3, #0]
 8000ef4:	4a0a      	ldr	r2, [pc, #40]	; (8000f20 <HAL_Init+0x40>)
 8000ef6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000efa:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000efc:	4b08      	ldr	r3, [pc, #32]	; (8000f20 <HAL_Init+0x40>)
 8000efe:	681b      	ldr	r3, [r3, #0]
 8000f00:	4a07      	ldr	r2, [pc, #28]	; (8000f20 <HAL_Init+0x40>)
 8000f02:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000f06:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f08:	2003      	movs	r0, #3
 8000f0a:	f000 f931 	bl	8001170 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000f0e:	2000      	movs	r0, #0
 8000f10:	f000 f808 	bl	8000f24 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000f14:	f7ff fcba 	bl	800088c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000f18:	2300      	movs	r3, #0
}
 8000f1a:	4618      	mov	r0, r3
 8000f1c:	bd80      	pop	{r7, pc}
 8000f1e:	bf00      	nop
 8000f20:	40023c00 	.word	0x40023c00

08000f24 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f24:	b580      	push	{r7, lr}
 8000f26:	b082      	sub	sp, #8
 8000f28:	af00      	add	r7, sp, #0
 8000f2a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000f2c:	4b12      	ldr	r3, [pc, #72]	; (8000f78 <HAL_InitTick+0x54>)
 8000f2e:	681a      	ldr	r2, [r3, #0]
 8000f30:	4b12      	ldr	r3, [pc, #72]	; (8000f7c <HAL_InitTick+0x58>)
 8000f32:	781b      	ldrb	r3, [r3, #0]
 8000f34:	4619      	mov	r1, r3
 8000f36:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f3a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000f3e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f42:	4618      	mov	r0, r3
 8000f44:	f000 f93b 	bl	80011be <HAL_SYSTICK_Config>
 8000f48:	4603      	mov	r3, r0
 8000f4a:	2b00      	cmp	r3, #0
 8000f4c:	d001      	beq.n	8000f52 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000f4e:	2301      	movs	r3, #1
 8000f50:	e00e      	b.n	8000f70 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	2b0f      	cmp	r3, #15
 8000f56:	d80a      	bhi.n	8000f6e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f58:	2200      	movs	r2, #0
 8000f5a:	6879      	ldr	r1, [r7, #4]
 8000f5c:	f04f 30ff 	mov.w	r0, #4294967295
 8000f60:	f000 f911 	bl	8001186 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000f64:	4a06      	ldr	r2, [pc, #24]	; (8000f80 <HAL_InitTick+0x5c>)
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000f6a:	2300      	movs	r3, #0
 8000f6c:	e000      	b.n	8000f70 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000f6e:	2301      	movs	r3, #1
}
 8000f70:	4618      	mov	r0, r3
 8000f72:	3708      	adds	r7, #8
 8000f74:	46bd      	mov	sp, r7
 8000f76:	bd80      	pop	{r7, pc}
 8000f78:	20000000 	.word	0x20000000
 8000f7c:	20000008 	.word	0x20000008
 8000f80:	20000004 	.word	0x20000004

08000f84 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f84:	b480      	push	{r7}
 8000f86:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000f88:	4b06      	ldr	r3, [pc, #24]	; (8000fa4 <HAL_IncTick+0x20>)
 8000f8a:	781b      	ldrb	r3, [r3, #0]
 8000f8c:	461a      	mov	r2, r3
 8000f8e:	4b06      	ldr	r3, [pc, #24]	; (8000fa8 <HAL_IncTick+0x24>)
 8000f90:	681b      	ldr	r3, [r3, #0]
 8000f92:	4413      	add	r3, r2
 8000f94:	4a04      	ldr	r2, [pc, #16]	; (8000fa8 <HAL_IncTick+0x24>)
 8000f96:	6013      	str	r3, [r2, #0]
}
 8000f98:	bf00      	nop
 8000f9a:	46bd      	mov	sp, r7
 8000f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa0:	4770      	bx	lr
 8000fa2:	bf00      	nop
 8000fa4:	20000008 	.word	0x20000008
 8000fa8:	200000ec 	.word	0x200000ec

08000fac <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000fac:	b480      	push	{r7}
 8000fae:	af00      	add	r7, sp, #0
  return uwTick;
 8000fb0:	4b03      	ldr	r3, [pc, #12]	; (8000fc0 <HAL_GetTick+0x14>)
 8000fb2:	681b      	ldr	r3, [r3, #0]
}
 8000fb4:	4618      	mov	r0, r3
 8000fb6:	46bd      	mov	sp, r7
 8000fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fbc:	4770      	bx	lr
 8000fbe:	bf00      	nop
 8000fc0:	200000ec 	.word	0x200000ec

08000fc4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	b084      	sub	sp, #16
 8000fc8:	af00      	add	r7, sp, #0
 8000fca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000fcc:	f7ff ffee 	bl	8000fac <HAL_GetTick>
 8000fd0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000fd6:	68fb      	ldr	r3, [r7, #12]
 8000fd8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000fdc:	d005      	beq.n	8000fea <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000fde:	4b0a      	ldr	r3, [pc, #40]	; (8001008 <HAL_Delay+0x44>)
 8000fe0:	781b      	ldrb	r3, [r3, #0]
 8000fe2:	461a      	mov	r2, r3
 8000fe4:	68fb      	ldr	r3, [r7, #12]
 8000fe6:	4413      	add	r3, r2
 8000fe8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000fea:	bf00      	nop
 8000fec:	f7ff ffde 	bl	8000fac <HAL_GetTick>
 8000ff0:	4602      	mov	r2, r0
 8000ff2:	68bb      	ldr	r3, [r7, #8]
 8000ff4:	1ad3      	subs	r3, r2, r3
 8000ff6:	68fa      	ldr	r2, [r7, #12]
 8000ff8:	429a      	cmp	r2, r3
 8000ffa:	d8f7      	bhi.n	8000fec <HAL_Delay+0x28>
  {
  }
}
 8000ffc:	bf00      	nop
 8000ffe:	bf00      	nop
 8001000:	3710      	adds	r7, #16
 8001002:	46bd      	mov	sp, r7
 8001004:	bd80      	pop	{r7, pc}
 8001006:	bf00      	nop
 8001008:	20000008 	.word	0x20000008

0800100c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800100c:	b480      	push	{r7}
 800100e:	b085      	sub	sp, #20
 8001010:	af00      	add	r7, sp, #0
 8001012:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	f003 0307 	and.w	r3, r3, #7
 800101a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800101c:	4b0c      	ldr	r3, [pc, #48]	; (8001050 <__NVIC_SetPriorityGrouping+0x44>)
 800101e:	68db      	ldr	r3, [r3, #12]
 8001020:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001022:	68ba      	ldr	r2, [r7, #8]
 8001024:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001028:	4013      	ands	r3, r2
 800102a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800102c:	68fb      	ldr	r3, [r7, #12]
 800102e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001030:	68bb      	ldr	r3, [r7, #8]
 8001032:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001034:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001038:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800103c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800103e:	4a04      	ldr	r2, [pc, #16]	; (8001050 <__NVIC_SetPriorityGrouping+0x44>)
 8001040:	68bb      	ldr	r3, [r7, #8]
 8001042:	60d3      	str	r3, [r2, #12]
}
 8001044:	bf00      	nop
 8001046:	3714      	adds	r7, #20
 8001048:	46bd      	mov	sp, r7
 800104a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800104e:	4770      	bx	lr
 8001050:	e000ed00 	.word	0xe000ed00

08001054 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001054:	b480      	push	{r7}
 8001056:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001058:	4b04      	ldr	r3, [pc, #16]	; (800106c <__NVIC_GetPriorityGrouping+0x18>)
 800105a:	68db      	ldr	r3, [r3, #12]
 800105c:	0a1b      	lsrs	r3, r3, #8
 800105e:	f003 0307 	and.w	r3, r3, #7
}
 8001062:	4618      	mov	r0, r3
 8001064:	46bd      	mov	sp, r7
 8001066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800106a:	4770      	bx	lr
 800106c:	e000ed00 	.word	0xe000ed00

08001070 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001070:	b480      	push	{r7}
 8001072:	b083      	sub	sp, #12
 8001074:	af00      	add	r7, sp, #0
 8001076:	4603      	mov	r3, r0
 8001078:	6039      	str	r1, [r7, #0]
 800107a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800107c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001080:	2b00      	cmp	r3, #0
 8001082:	db0a      	blt.n	800109a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001084:	683b      	ldr	r3, [r7, #0]
 8001086:	b2da      	uxtb	r2, r3
 8001088:	490c      	ldr	r1, [pc, #48]	; (80010bc <__NVIC_SetPriority+0x4c>)
 800108a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800108e:	0112      	lsls	r2, r2, #4
 8001090:	b2d2      	uxtb	r2, r2
 8001092:	440b      	add	r3, r1
 8001094:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001098:	e00a      	b.n	80010b0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800109a:	683b      	ldr	r3, [r7, #0]
 800109c:	b2da      	uxtb	r2, r3
 800109e:	4908      	ldr	r1, [pc, #32]	; (80010c0 <__NVIC_SetPriority+0x50>)
 80010a0:	79fb      	ldrb	r3, [r7, #7]
 80010a2:	f003 030f 	and.w	r3, r3, #15
 80010a6:	3b04      	subs	r3, #4
 80010a8:	0112      	lsls	r2, r2, #4
 80010aa:	b2d2      	uxtb	r2, r2
 80010ac:	440b      	add	r3, r1
 80010ae:	761a      	strb	r2, [r3, #24]
}
 80010b0:	bf00      	nop
 80010b2:	370c      	adds	r7, #12
 80010b4:	46bd      	mov	sp, r7
 80010b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ba:	4770      	bx	lr
 80010bc:	e000e100 	.word	0xe000e100
 80010c0:	e000ed00 	.word	0xe000ed00

080010c4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80010c4:	b480      	push	{r7}
 80010c6:	b089      	sub	sp, #36	; 0x24
 80010c8:	af00      	add	r7, sp, #0
 80010ca:	60f8      	str	r0, [r7, #12]
 80010cc:	60b9      	str	r1, [r7, #8]
 80010ce:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80010d0:	68fb      	ldr	r3, [r7, #12]
 80010d2:	f003 0307 	and.w	r3, r3, #7
 80010d6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80010d8:	69fb      	ldr	r3, [r7, #28]
 80010da:	f1c3 0307 	rsb	r3, r3, #7
 80010de:	2b04      	cmp	r3, #4
 80010e0:	bf28      	it	cs
 80010e2:	2304      	movcs	r3, #4
 80010e4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80010e6:	69fb      	ldr	r3, [r7, #28]
 80010e8:	3304      	adds	r3, #4
 80010ea:	2b06      	cmp	r3, #6
 80010ec:	d902      	bls.n	80010f4 <NVIC_EncodePriority+0x30>
 80010ee:	69fb      	ldr	r3, [r7, #28]
 80010f0:	3b03      	subs	r3, #3
 80010f2:	e000      	b.n	80010f6 <NVIC_EncodePriority+0x32>
 80010f4:	2300      	movs	r3, #0
 80010f6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010f8:	f04f 32ff 	mov.w	r2, #4294967295
 80010fc:	69bb      	ldr	r3, [r7, #24]
 80010fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001102:	43da      	mvns	r2, r3
 8001104:	68bb      	ldr	r3, [r7, #8]
 8001106:	401a      	ands	r2, r3
 8001108:	697b      	ldr	r3, [r7, #20]
 800110a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800110c:	f04f 31ff 	mov.w	r1, #4294967295
 8001110:	697b      	ldr	r3, [r7, #20]
 8001112:	fa01 f303 	lsl.w	r3, r1, r3
 8001116:	43d9      	mvns	r1, r3
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800111c:	4313      	orrs	r3, r2
         );
}
 800111e:	4618      	mov	r0, r3
 8001120:	3724      	adds	r7, #36	; 0x24
 8001122:	46bd      	mov	sp, r7
 8001124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001128:	4770      	bx	lr
	...

0800112c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800112c:	b580      	push	{r7, lr}
 800112e:	b082      	sub	sp, #8
 8001130:	af00      	add	r7, sp, #0
 8001132:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	3b01      	subs	r3, #1
 8001138:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800113c:	d301      	bcc.n	8001142 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800113e:	2301      	movs	r3, #1
 8001140:	e00f      	b.n	8001162 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001142:	4a0a      	ldr	r2, [pc, #40]	; (800116c <SysTick_Config+0x40>)
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	3b01      	subs	r3, #1
 8001148:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800114a:	210f      	movs	r1, #15
 800114c:	f04f 30ff 	mov.w	r0, #4294967295
 8001150:	f7ff ff8e 	bl	8001070 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001154:	4b05      	ldr	r3, [pc, #20]	; (800116c <SysTick_Config+0x40>)
 8001156:	2200      	movs	r2, #0
 8001158:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800115a:	4b04      	ldr	r3, [pc, #16]	; (800116c <SysTick_Config+0x40>)
 800115c:	2207      	movs	r2, #7
 800115e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001160:	2300      	movs	r3, #0
}
 8001162:	4618      	mov	r0, r3
 8001164:	3708      	adds	r7, #8
 8001166:	46bd      	mov	sp, r7
 8001168:	bd80      	pop	{r7, pc}
 800116a:	bf00      	nop
 800116c:	e000e010 	.word	0xe000e010

08001170 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001170:	b580      	push	{r7, lr}
 8001172:	b082      	sub	sp, #8
 8001174:	af00      	add	r7, sp, #0
 8001176:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001178:	6878      	ldr	r0, [r7, #4]
 800117a:	f7ff ff47 	bl	800100c <__NVIC_SetPriorityGrouping>
}
 800117e:	bf00      	nop
 8001180:	3708      	adds	r7, #8
 8001182:	46bd      	mov	sp, r7
 8001184:	bd80      	pop	{r7, pc}

08001186 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001186:	b580      	push	{r7, lr}
 8001188:	b086      	sub	sp, #24
 800118a:	af00      	add	r7, sp, #0
 800118c:	4603      	mov	r3, r0
 800118e:	60b9      	str	r1, [r7, #8]
 8001190:	607a      	str	r2, [r7, #4]
 8001192:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001194:	2300      	movs	r3, #0
 8001196:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001198:	f7ff ff5c 	bl	8001054 <__NVIC_GetPriorityGrouping>
 800119c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800119e:	687a      	ldr	r2, [r7, #4]
 80011a0:	68b9      	ldr	r1, [r7, #8]
 80011a2:	6978      	ldr	r0, [r7, #20]
 80011a4:	f7ff ff8e 	bl	80010c4 <NVIC_EncodePriority>
 80011a8:	4602      	mov	r2, r0
 80011aa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80011ae:	4611      	mov	r1, r2
 80011b0:	4618      	mov	r0, r3
 80011b2:	f7ff ff5d 	bl	8001070 <__NVIC_SetPriority>
}
 80011b6:	bf00      	nop
 80011b8:	3718      	adds	r7, #24
 80011ba:	46bd      	mov	sp, r7
 80011bc:	bd80      	pop	{r7, pc}

080011be <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80011be:	b580      	push	{r7, lr}
 80011c0:	b082      	sub	sp, #8
 80011c2:	af00      	add	r7, sp, #0
 80011c4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80011c6:	6878      	ldr	r0, [r7, #4]
 80011c8:	f7ff ffb0 	bl	800112c <SysTick_Config>
 80011cc:	4603      	mov	r3, r0
}
 80011ce:	4618      	mov	r0, r3
 80011d0:	3708      	adds	r7, #8
 80011d2:	46bd      	mov	sp, r7
 80011d4:	bd80      	pop	{r7, pc}
	...

080011d8 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 80011d8:	b580      	push	{r7, lr}
 80011da:	b084      	sub	sp, #16
 80011dc:	af00      	add	r7, sp, #0
 80011de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	d101      	bne.n	80011ea <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 80011e6:	2301      	movs	r3, #1
 80011e8:	e06c      	b.n	80012c4 <HAL_ETH_Init+0xec>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	d106      	bne.n	8001202 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	2223      	movs	r2, #35	; 0x23
 80011f8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 80011fc:	6878      	ldr	r0, [r7, #4]
 80011fe:	f002 fde1 	bl	8003dc4 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001202:	2300      	movs	r3, #0
 8001204:	60bb      	str	r3, [r7, #8]
 8001206:	4b31      	ldr	r3, [pc, #196]	; (80012cc <HAL_ETH_Init+0xf4>)
 8001208:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800120a:	4a30      	ldr	r2, [pc, #192]	; (80012cc <HAL_ETH_Init+0xf4>)
 800120c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001210:	6453      	str	r3, [r2, #68]	; 0x44
 8001212:	4b2e      	ldr	r3, [pc, #184]	; (80012cc <HAL_ETH_Init+0xf4>)
 8001214:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001216:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800121a:	60bb      	str	r3, [r7, #8]
 800121c:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 800121e:	4b2c      	ldr	r3, [pc, #176]	; (80012d0 <HAL_ETH_Init+0xf8>)
 8001220:	685b      	ldr	r3, [r3, #4]
 8001222:	4a2b      	ldr	r2, [pc, #172]	; (80012d0 <HAL_ETH_Init+0xf8>)
 8001224:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8001228:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 800122a:	4b29      	ldr	r3, [pc, #164]	; (80012d0 <HAL_ETH_Init+0xf8>)
 800122c:	685a      	ldr	r2, [r3, #4]
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	689b      	ldr	r3, [r3, #8]
 8001232:	4927      	ldr	r1, [pc, #156]	; (80012d0 <HAL_ETH_Init+0xf8>)
 8001234:	4313      	orrs	r3, r2
 8001236:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 8001238:	4b25      	ldr	r3, [pc, #148]	; (80012d0 <HAL_ETH_Init+0xf8>)
 800123a:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	687a      	ldr	r2, [r7, #4]
 8001248:	6812      	ldr	r2, [r2, #0]
 800124a:	f043 0301 	orr.w	r3, r3, #1
 800124e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001252:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001254:	f7ff feaa 	bl	8000fac <HAL_GetTick>
 8001258:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 800125a:	e011      	b.n	8001280 <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 800125c:	f7ff fea6 	bl	8000fac <HAL_GetTick>
 8001260:	4602      	mov	r2, r0
 8001262:	68fb      	ldr	r3, [r7, #12]
 8001264:	1ad3      	subs	r3, r2, r3
 8001266:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800126a:	d909      	bls.n	8001280 <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	2204      	movs	r2, #4
 8001270:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	22e0      	movs	r2, #224	; 0xe0
 8001278:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 800127c:	2301      	movs	r3, #1
 800127e:	e021      	b.n	80012c4 <HAL_ETH_Init+0xec>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	f003 0301 	and.w	r3, r3, #1
 800128e:	2b00      	cmp	r3, #0
 8001290:	d1e4      	bne.n	800125c <HAL_ETH_Init+0x84>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8001292:	6878      	ldr	r0, [r7, #4]
 8001294:	f000 fdf0 	bl	8001e78 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8001298:	6878      	ldr	r0, [r7, #4]
 800129a:	f000 fe97 	bl	8001fcc <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 800129e:	6878      	ldr	r0, [r7, #4]
 80012a0:	f000 feed 	bl	800207e <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	685b      	ldr	r3, [r3, #4]
 80012a8:	461a      	mov	r2, r3
 80012aa:	2100      	movs	r1, #0
 80012ac:	6878      	ldr	r0, [r7, #4]
 80012ae:	f000 fe55 	bl	8001f5c <ETH_MACAddressConfig>

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	2200      	movs	r2, #0
 80012b6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	2210      	movs	r2, #16
 80012be:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80012c2:	2300      	movs	r3, #0
}
 80012c4:	4618      	mov	r0, r3
 80012c6:	3710      	adds	r7, #16
 80012c8:	46bd      	mov	sp, r7
 80012ca:	bd80      	pop	{r7, pc}
 80012cc:	40023800 	.word	0x40023800
 80012d0:	40013800 	.word	0x40013800

080012d4 <HAL_ETH_Start>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start(ETH_HandleTypeDef *heth)
{
 80012d4:	b580      	push	{r7, lr}
 80012d6:	b084      	sub	sp, #16
 80012d8:	af00      	add	r7, sp, #0
 80012da:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1;

  if (heth->gState == HAL_ETH_STATE_READY)
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80012e2:	2b10      	cmp	r3, #16
 80012e4:	d150      	bne.n	8001388 <HAL_ETH_Start+0xb4>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	2223      	movs	r2, #35	; 0x23
 80012ea:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Set nombre of descriptors to build */
    heth->RxDescList.RxBuildDescCnt = ETH_RX_DESC_CNT;
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	2204      	movs	r2, #4
 80012f2:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Build all descriptors */
    ETH_UpdateDescriptor(heth);
 80012f4:	6878      	ldr	r0, [r7, #4]
 80012f6:	f000 f9fd 	bl	80016f4 <ETH_UpdateDescriptor>

    /* Enable the MAC transmission */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	681a      	ldr	r2, [r3, #0]
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	f042 0208 	orr.w	r2, r2, #8
 8001308:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8001312:	2001      	movs	r0, #1
 8001314:	f7ff fe56 	bl	8000fc4 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	68fa      	ldr	r2, [r7, #12]
 800131e:	601a      	str	r2, [r3, #0]

    /* Enable the MAC reception */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	681a      	ldr	r2, [r3, #0]
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	f042 0204 	orr.w	r2, r2, #4
 800132e:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8001338:	2001      	movs	r0, #1
 800133a:	f7ff fe43 	bl	8000fc4 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	68fa      	ldr	r2, [r7, #12]
 8001344:	601a      	str	r2, [r3, #0]

    /* Flush Transmit FIFO */
    ETH_FlushTransmitFIFO(heth);
 8001346:	6878      	ldr	r0, [r7, #4]
 8001348:	f000 fc36 	bl	8001bb8 <ETH_FlushTransmitFIFO>

    /* Enable the DMA transmission */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001354:	699b      	ldr	r3, [r3, #24]
 8001356:	687a      	ldr	r2, [r7, #4]
 8001358:	6812      	ldr	r2, [r2, #0]
 800135a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800135e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001362:	6193      	str	r3, [r2, #24]

    /* Enable the DMA reception */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800136c:	699b      	ldr	r3, [r3, #24]
 800136e:	687a      	ldr	r2, [r7, #4]
 8001370:	6812      	ldr	r2, [r2, #0]
 8001372:	f043 0302 	orr.w	r3, r3, #2
 8001376:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800137a:	6193      	str	r3, [r2, #24]

    heth->gState = HAL_ETH_STATE_STARTED;
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	2223      	movs	r2, #35	; 0x23
 8001380:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 8001384:	2300      	movs	r3, #0
 8001386:	e000      	b.n	800138a <HAL_ETH_Start+0xb6>
  }
  else
  {
    return HAL_ERROR;
 8001388:	2301      	movs	r3, #1
  }
}
 800138a:	4618      	mov	r0, r3
 800138c:	3710      	adds	r7, #16
 800138e:	46bd      	mov	sp, r7
 8001390:	bd80      	pop	{r7, pc}

08001392 <HAL_ETH_Stop>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop(ETH_HandleTypeDef *heth)
{
 8001392:	b580      	push	{r7, lr}
 8001394:	b084      	sub	sp, #16
 8001396:	af00      	add	r7, sp, #0
 8001398:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1;

  if (heth->gState == HAL_ETH_STATE_STARTED)
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80013a0:	2b23      	cmp	r3, #35	; 0x23
 80013a2:	d14a      	bne.n	800143a <HAL_ETH_Stop+0xa8>
  {
    /* Set the ETH peripheral state to BUSY */
    heth->gState = HAL_ETH_STATE_BUSY;
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	2223      	movs	r2, #35	; 0x23
 80013a8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    /* Disable the DMA transmission */
    CLEAR_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80013b4:	699b      	ldr	r3, [r3, #24]
 80013b6:	687a      	ldr	r2, [r7, #4]
 80013b8:	6812      	ldr	r2, [r2, #0]
 80013ba:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80013be:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80013c2:	6193      	str	r3, [r2, #24]

    /* Disable the DMA reception */
    CLEAR_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80013cc:	699b      	ldr	r3, [r3, #24]
 80013ce:	687a      	ldr	r2, [r7, #4]
 80013d0:	6812      	ldr	r2, [r2, #0]
 80013d2:	f023 0302 	bic.w	r3, r3, #2
 80013d6:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80013da:	6193      	str	r3, [r2, #24]

    /* Disable the MAC reception */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	681a      	ldr	r2, [r3, #0]
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	f022 0204 	bic.w	r2, r2, #4
 80013ea:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80013f4:	2001      	movs	r0, #1
 80013f6:	f7ff fde5 	bl	8000fc4 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	68fa      	ldr	r2, [r7, #12]
 8001400:	601a      	str	r2, [r3, #0]

    /* Flush Transmit FIFO */
    ETH_FlushTransmitFIFO(heth);
 8001402:	6878      	ldr	r0, [r7, #4]
 8001404:	f000 fbd8 	bl	8001bb8 <ETH_FlushTransmitFIFO>

    /* Disable the MAC transmission */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	681a      	ldr	r2, [r3, #0]
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	f022 0208 	bic.w	r2, r2, #8
 8001416:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8001420:	2001      	movs	r0, #1
 8001422:	f7ff fdcf 	bl	8000fc4 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	68fa      	ldr	r2, [r7, #12]
 800142c:	601a      	str	r2, [r3, #0]

    heth->gState = HAL_ETH_STATE_READY;
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	2210      	movs	r2, #16
 8001432:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Return function status */
    return HAL_OK;
 8001436:	2300      	movs	r3, #0
 8001438:	e000      	b.n	800143c <HAL_ETH_Stop+0xaa>
  }
  else
  {
    return HAL_ERROR;
 800143a:	2301      	movs	r3, #1
  }
}
 800143c:	4618      	mov	r0, r3
 800143e:	3710      	adds	r7, #16
 8001440:	46bd      	mov	sp, r7
 8001442:	bd80      	pop	{r7, pc}

08001444 <HAL_ETH_Transmit>:
  * @param  pTxConfig: Hold the configuration of packet to be transmitted
  * @param  Timeout: timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Transmit(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig, uint32_t Timeout)
{
 8001444:	b580      	push	{r7, lr}
 8001446:	b086      	sub	sp, #24
 8001448:	af00      	add	r7, sp, #0
 800144a:	60f8      	str	r0, [r7, #12]
 800144c:	60b9      	str	r1, [r7, #8]
 800144e:	607a      	str	r2, [r7, #4]
  uint32_t tickstart;
  ETH_DMADescTypeDef *dmatxdesc;

  if (pTxConfig == NULL)
 8001450:	68bb      	ldr	r3, [r7, #8]
 8001452:	2b00      	cmp	r3, #0
 8001454:	d109      	bne.n	800146a <HAL_ETH_Transmit+0x26>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 8001456:	68fb      	ldr	r3, [r7, #12]
 8001458:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800145c:	f043 0201 	orr.w	r2, r3, #1
 8001460:	68fb      	ldr	r3, [r7, #12]
 8001462:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    return HAL_ERROR;
 8001466:	2301      	movs	r3, #1
 8001468:	e07c      	b.n	8001564 <HAL_ETH_Transmit+0x120>
  }

  if (heth->gState == HAL_ETH_STATE_STARTED)
 800146a:	68fb      	ldr	r3, [r7, #12]
 800146c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001470:	2b23      	cmp	r3, #35	; 0x23
 8001472:	d176      	bne.n	8001562 <HAL_ETH_Transmit+0x11e>
  {
    /* Config DMA Tx descriptor by Tx Packet info */
    if (ETH_Prepare_Tx_Descriptors(heth, pTxConfig, 0) != HAL_ETH_ERROR_NONE)
 8001474:	2200      	movs	r2, #0
 8001476:	68b9      	ldr	r1, [r7, #8]
 8001478:	68f8      	ldr	r0, [r7, #12]
 800147a:	f000 fe6d 	bl	8002158 <ETH_Prepare_Tx_Descriptors>
 800147e:	4603      	mov	r3, r0
 8001480:	2b00      	cmp	r3, #0
 8001482:	d009      	beq.n	8001498 <HAL_ETH_Transmit+0x54>
    {
      /* Set the ETH error code */
      heth->ErrorCode |= HAL_ETH_ERROR_BUSY;
 8001484:	68fb      	ldr	r3, [r7, #12]
 8001486:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800148a:	f043 0202 	orr.w	r2, r3, #2
 800148e:	68fb      	ldr	r3, [r7, #12]
 8001490:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      return HAL_ERROR;
 8001494:	2301      	movs	r3, #1
 8001496:	e065      	b.n	8001564 <HAL_ETH_Transmit+0x120>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001498:	f3bf 8f4f 	dsb	sy
}
 800149c:	bf00      	nop
    }

    /* Ensure completion of descriptor preparation before transmission start */
    __DSB();

    dmatxdesc = (ETH_DMADescTypeDef *)(&heth->TxDescList)->TxDesc[heth->TxDescList.CurTxDesc];
 800149e:	68fb      	ldr	r3, [r7, #12]
 80014a0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80014a2:	68fb      	ldr	r3, [r7, #12]
 80014a4:	3206      	adds	r2, #6
 80014a6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80014aa:	617b      	str	r3, [r7, #20]

    /* Incr current tx desc index */
    INCR_TX_DESC_INDEX(heth->TxDescList.CurTxDesc, 1U);
 80014ac:	68fb      	ldr	r3, [r7, #12]
 80014ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014b0:	1c5a      	adds	r2, r3, #1
 80014b2:	68fb      	ldr	r3, [r7, #12]
 80014b4:	629a      	str	r2, [r3, #40]	; 0x28
 80014b6:	68fb      	ldr	r3, [r7, #12]
 80014b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014ba:	2b03      	cmp	r3, #3
 80014bc:	d904      	bls.n	80014c8 <HAL_ETH_Transmit+0x84>
 80014be:	68fb      	ldr	r3, [r7, #12]
 80014c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014c2:	1f1a      	subs	r2, r3, #4
 80014c4:	68fb      	ldr	r3, [r7, #12]
 80014c6:	629a      	str	r2, [r3, #40]	; 0x28

    /* Start transmission */
    /* issue a poll command to Tx DMA by writing address of next immediate free descriptor */
    WRITE_REG(heth->Instance->DMATPDR, (uint32_t)(heth->TxDescList.TxDesc[heth->TxDescList.CurTxDesc]));
 80014c8:	68fb      	ldr	r3, [r7, #12]
 80014ca:	6a99      	ldr	r1, [r3, #40]	; 0x28
 80014cc:	68fb      	ldr	r3, [r7, #12]
 80014ce:	681a      	ldr	r2, [r3, #0]
 80014d0:	68fb      	ldr	r3, [r7, #12]
 80014d2:	3106      	adds	r1, #6
 80014d4:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80014d8:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80014dc:	6053      	str	r3, [r2, #4]

    tickstart = HAL_GetTick();
 80014de:	f7ff fd65 	bl	8000fac <HAL_GetTick>
 80014e2:	6138      	str	r0, [r7, #16]

    /* Wait for data to be transmitted or timeout occurred */
    while ((dmatxdesc->DESC0 & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 80014e4:	e037      	b.n	8001556 <HAL_ETH_Transmit+0x112>
    {
      if ((heth->Instance->DMASR & ETH_DMASR_FBES) != (uint32_t)RESET)
 80014e6:	68fb      	ldr	r3, [r7, #12]
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80014ee:	695b      	ldr	r3, [r3, #20]
 80014f0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	d011      	beq.n	800151c <HAL_ETH_Transmit+0xd8>
      {
        heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 80014f8:	68fb      	ldr	r3, [r7, #12]
 80014fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80014fe:	f043 0208 	orr.w	r2, r3, #8
 8001502:	68fb      	ldr	r3, [r7, #12]
 8001504:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        heth->DMAErrorCode = heth->Instance->DMASR;
 8001508:	68fb      	ldr	r3, [r7, #12]
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001510:	695a      	ldr	r2, [r3, #20]
 8001512:	68fb      	ldr	r3, [r7, #12]
 8001514:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        /* Return function status */
        return HAL_ERROR;
 8001518:	2301      	movs	r3, #1
 800151a:	e023      	b.n	8001564 <HAL_ETH_Transmit+0x120>
      }

      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001522:	d018      	beq.n	8001556 <HAL_ETH_Transmit+0x112>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8001524:	f7ff fd42 	bl	8000fac <HAL_GetTick>
 8001528:	4602      	mov	r2, r0
 800152a:	693b      	ldr	r3, [r7, #16]
 800152c:	1ad3      	subs	r3, r2, r3
 800152e:	687a      	ldr	r2, [r7, #4]
 8001530:	429a      	cmp	r2, r3
 8001532:	d302      	bcc.n	800153a <HAL_ETH_Transmit+0xf6>
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	2b00      	cmp	r3, #0
 8001538:	d10d      	bne.n	8001556 <HAL_ETH_Transmit+0x112>
        {
          heth->ErrorCode |= HAL_ETH_ERROR_TIMEOUT;
 800153a:	68fb      	ldr	r3, [r7, #12]
 800153c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001540:	f043 0204 	orr.w	r2, r3, #4
 8001544:	68fb      	ldr	r3, [r7, #12]
 8001546:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          /* Clear TX descriptor so that we can proceed */
          dmatxdesc->DESC0 = (ETH_DMATXDESC_FS | ETH_DMATXDESC_LS);
 800154a:	697b      	ldr	r3, [r7, #20]
 800154c:	f04f 5240 	mov.w	r2, #805306368	; 0x30000000
 8001550:	601a      	str	r2, [r3, #0]
          return HAL_ERROR;
 8001552:	2301      	movs	r3, #1
 8001554:	e006      	b.n	8001564 <HAL_ETH_Transmit+0x120>
    while ((dmatxdesc->DESC0 & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8001556:	697b      	ldr	r3, [r7, #20]
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	2b00      	cmp	r3, #0
 800155c:	dbc3      	blt.n	80014e6 <HAL_ETH_Transmit+0xa2>
        }
      }
    }

    /* Return function status */
    return HAL_OK;
 800155e:	2300      	movs	r3, #0
 8001560:	e000      	b.n	8001564 <HAL_ETH_Transmit+0x120>
  }
  else
  {
    return HAL_ERROR;
 8001562:	2301      	movs	r3, #1
  }
}
 8001564:	4618      	mov	r0, r3
 8001566:	3718      	adds	r7, #24
 8001568:	46bd      	mov	sp, r7
 800156a:	bd80      	pop	{r7, pc}

0800156c <HAL_ETH_ReadData>:
  *         the configuration information for ETHERNET module
  * @param  pAppBuff: Pointer to an application buffer to receive the packet.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadData(ETH_HandleTypeDef *heth, void **pAppBuff)
{
 800156c:	b580      	push	{r7, lr}
 800156e:	b088      	sub	sp, #32
 8001570:	af00      	add	r7, sp, #0
 8001572:	6078      	str	r0, [r7, #4]
 8001574:	6039      	str	r1, [r7, #0]
  uint32_t descidx;
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t desccnt = 0U;
 8001576:	2300      	movs	r3, #0
 8001578:	617b      	str	r3, [r7, #20]
  uint32_t desccntmax;
  uint32_t bufflength;
  uint8_t rxdataready = 0U;
 800157a:	2300      	movs	r3, #0
 800157c:	73fb      	strb	r3, [r7, #15]


  if (pAppBuff == NULL)
 800157e:	683b      	ldr	r3, [r7, #0]
 8001580:	2b00      	cmp	r3, #0
 8001582:	d109      	bne.n	8001598 <HAL_ETH_ReadData+0x2c>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800158a:	f043 0201 	orr.w	r2, r3, #1
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    return HAL_ERROR;
 8001594:	2301      	movs	r3, #1
 8001596:	e0a8      	b.n	80016ea <HAL_ETH_ReadData+0x17e>
  }

  if (heth->gState != HAL_ETH_STATE_STARTED)
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800159e:	2b23      	cmp	r3, #35	; 0x23
 80015a0:	d001      	beq.n	80015a6 <HAL_ETH_ReadData+0x3a>
  {
    return HAL_ERROR;
 80015a2:	2301      	movs	r3, #1
 80015a4:	e0a1      	b.n	80016ea <HAL_ETH_ReadData+0x17e>
  }

  descidx = heth->RxDescList.RxDescIdx;
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80015aa:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	69fa      	ldr	r2, [r7, #28]
 80015b0:	3212      	adds	r2, #18
 80015b2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80015b6:	61bb      	str	r3, [r7, #24]
  desccntmax = ETH_RX_DESC_CNT - heth->RxDescList.RxBuildDescCnt;
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80015bc:	f1c3 0304 	rsb	r3, r3, #4
 80015c0:	60bb      	str	r3, [r7, #8]

  /* Check if descriptor is not owned by DMA */
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 80015c2:	e06a      	b.n	800169a <HAL_ETH_ReadData+0x12e>
         && (rxdataready == 0U))
  {
    if (READ_BIT(dmarxdesc->DESC0,  ETH_DMARXDESC_LS)  != (uint32_t)RESET)
 80015c4:	69bb      	ldr	r3, [r7, #24]
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	d007      	beq.n	80015e0 <HAL_ETH_ReadData+0x74>
    {
      /* Get timestamp high */
      heth->RxDescList.TimeStamp.TimeStampHigh = dmarxdesc->DESC6;
 80015d0:	69bb      	ldr	r3, [r7, #24]
 80015d2:	699a      	ldr	r2, [r3, #24]
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	679a      	str	r2, [r3, #120]	; 0x78
      /* Get timestamp low */
      heth->RxDescList.TimeStamp.TimeStampLow  = dmarxdesc->DESC7;
 80015d8:	69bb      	ldr	r3, [r7, #24]
 80015da:	69da      	ldr	r2, [r3, #28]
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	675a      	str	r2, [r3, #116]	; 0x74
    }
    if ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_FS) != (uint32_t)RESET) || (heth->RxDescList.pRxStart != NULL))
 80015e0:	69bb      	ldr	r3, [r7, #24]
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	d103      	bne.n	80015f4 <HAL_ETH_ReadData+0x88>
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d040      	beq.n	8001676 <HAL_ETH_ReadData+0x10a>
    {
      /* Check first descriptor */
      if (READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_FS) != (uint32_t)RESET)
 80015f4:	69bb      	ldr	r3, [r7, #24]
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	d005      	beq.n	800160c <HAL_ETH_ReadData+0xa0>
      {
        heth->RxDescList.RxDescCnt = 0;
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	2200      	movs	r2, #0
 8001604:	661a      	str	r2, [r3, #96]	; 0x60
        heth->RxDescList.RxDataLength = 0;
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	2200      	movs	r2, #0
 800160a:	665a      	str	r2, [r3, #100]	; 0x64
      }

      /* Check if last descriptor */
      bufflength = heth->Init.RxBuffLen;
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	695b      	ldr	r3, [r3, #20]
 8001610:	613b      	str	r3, [r7, #16]
      if (READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_LS) != (uint32_t)RESET)
 8001612:	69bb      	ldr	r3, [r7, #24]
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800161a:	2b00      	cmp	r3, #0
 800161c:	d00c      	beq.n	8001638 <HAL_ETH_ReadData+0xcc>
      {
        /* Get the Frame Length of the received packet: substruct 4 bytes of the CRC */
        bufflength = ((dmarxdesc->DESC0 & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT) - 4U;
 800161e:	69bb      	ldr	r3, [r7, #24]
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	0c1b      	lsrs	r3, r3, #16
 8001624:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8001628:	3b04      	subs	r3, #4
 800162a:	613b      	str	r3, [r7, #16]

        /* Save Last descriptor index */
        heth->RxDescList.pRxLastRxDesc = dmarxdesc->DESC0;
 800162c:	69bb      	ldr	r3, [r7, #24]
 800162e:	681a      	ldr	r2, [r3, #0]
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	671a      	str	r2, [r3, #112]	; 0x70

        /* Packet ready */
        rxdataready = 1;
 8001634:	2301      	movs	r3, #1
 8001636:	73fb      	strb	r3, [r7, #15]
      }

      /* Link data */
      WRITE_REG(dmarxdesc->BackupAddr0, dmarxdesc->DESC2);
 8001638:	69bb      	ldr	r3, [r7, #24]
 800163a:	689a      	ldr	r2, [r3, #8]
 800163c:	69bb      	ldr	r3, [r7, #24]
 800163e:	621a      	str	r2, [r3, #32]
      /*Call registered Link callback*/
      heth->rxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
                           (uint8_t *)dmarxdesc->BackupAddr0, bufflength);
#else
      /* Link callback */
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	f103 007c 	add.w	r0, r3, #124	; 0x7c
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	f103 0180 	add.w	r1, r3, #128	; 0x80
                             (uint8_t *)dmarxdesc->BackupAddr0, (uint16_t) bufflength);
 800164c:	69bb      	ldr	r3, [r7, #24]
 800164e:	6a1b      	ldr	r3, [r3, #32]
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 8001650:	461a      	mov	r2, r3
 8001652:	693b      	ldr	r3, [r7, #16]
 8001654:	b29b      	uxth	r3, r3
 8001656:	f002 fd85 	bl	8004164 <HAL_ETH_RxLinkCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      heth->RxDescList.RxDescCnt++;
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800165e:	1c5a      	adds	r2, r3, #1
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	661a      	str	r2, [r3, #96]	; 0x60
      heth->RxDescList.RxDataLength += bufflength;
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8001668:	693b      	ldr	r3, [r7, #16]
 800166a:	441a      	add	r2, r3
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	665a      	str	r2, [r3, #100]	; 0x64

      /* Clear buffer pointer */
      dmarxdesc->BackupAddr0 = 0;
 8001670:	69bb      	ldr	r3, [r7, #24]
 8001672:	2200      	movs	r2, #0
 8001674:	621a      	str	r2, [r3, #32]
    }

    /* Increment current rx descriptor index */
    INCR_RX_DESC_INDEX(descidx, 1U);
 8001676:	69fb      	ldr	r3, [r7, #28]
 8001678:	3301      	adds	r3, #1
 800167a:	61fb      	str	r3, [r7, #28]
 800167c:	69fb      	ldr	r3, [r7, #28]
 800167e:	2b03      	cmp	r3, #3
 8001680:	d902      	bls.n	8001688 <HAL_ETH_ReadData+0x11c>
 8001682:	69fb      	ldr	r3, [r7, #28]
 8001684:	3b04      	subs	r3, #4
 8001686:	61fb      	str	r3, [r7, #28]
    /* Get current descriptor address */
    dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	69fa      	ldr	r2, [r7, #28]
 800168c:	3212      	adds	r2, #18
 800168e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001692:	61bb      	str	r3, [r7, #24]
    desccnt++;
 8001694:	697b      	ldr	r3, [r7, #20]
 8001696:	3301      	adds	r3, #1
 8001698:	617b      	str	r3, [r7, #20]
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 800169a:	69bb      	ldr	r3, [r7, #24]
 800169c:	681b      	ldr	r3, [r3, #0]
         && (rxdataready == 0U))
 800169e:	2b00      	cmp	r3, #0
 80016a0:	db06      	blt.n	80016b0 <HAL_ETH_ReadData+0x144>
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 80016a2:	697a      	ldr	r2, [r7, #20]
 80016a4:	68bb      	ldr	r3, [r7, #8]
 80016a6:	429a      	cmp	r2, r3
 80016a8:	d202      	bcs.n	80016b0 <HAL_ETH_ReadData+0x144>
         && (rxdataready == 0U))
 80016aa:	7bfb      	ldrb	r3, [r7, #15]
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	d089      	beq.n	80015c4 <HAL_ETH_ReadData+0x58>
  }

  heth->RxDescList.RxBuildDescCnt += desccnt;
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80016b4:	697b      	ldr	r3, [r7, #20]
 80016b6:	441a      	add	r2, r3
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	66da      	str	r2, [r3, #108]	; 0x6c
  if ((heth->RxDescList.RxBuildDescCnt) != 0U)
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d002      	beq.n	80016ca <HAL_ETH_ReadData+0x15e>
  {
    /* Update Descriptors */
    ETH_UpdateDescriptor(heth);
 80016c4:	6878      	ldr	r0, [r7, #4]
 80016c6:	f000 f815 	bl	80016f4 <ETH_UpdateDescriptor>
  }

  heth->RxDescList.RxDescIdx = descidx;
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	69fa      	ldr	r2, [r7, #28]
 80016ce:	65da      	str	r2, [r3, #92]	; 0x5c

  if (rxdataready == 1U)
 80016d0:	7bfb      	ldrb	r3, [r7, #15]
 80016d2:	2b01      	cmp	r3, #1
 80016d4:	d108      	bne.n	80016e8 <HAL_ETH_ReadData+0x17c>
  {
    /* Return received packet */
    *pAppBuff = heth->RxDescList.pRxStart;
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 80016da:	683b      	ldr	r3, [r7, #0]
 80016dc:	601a      	str	r2, [r3, #0]
    /* Reset first element */
    heth->RxDescList.pRxStart = NULL;
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	2200      	movs	r2, #0
 80016e2:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 80016e4:	2300      	movs	r3, #0
 80016e6:	e000      	b.n	80016ea <HAL_ETH_ReadData+0x17e>
  }

  /* Packet not ready */
  return HAL_ERROR;
 80016e8:	2301      	movs	r3, #1
}
 80016ea:	4618      	mov	r0, r3
 80016ec:	3720      	adds	r7, #32
 80016ee:	46bd      	mov	sp, r7
 80016f0:	bd80      	pop	{r7, pc}
	...

080016f4 <ETH_UpdateDescriptor>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_UpdateDescriptor(ETH_HandleTypeDef *heth)
{
 80016f4:	b580      	push	{r7, lr}
 80016f6:	b088      	sub	sp, #32
 80016f8:	af00      	add	r7, sp, #0
 80016fa:	6078      	str	r0, [r7, #4]
  uint32_t descidx;
  uint32_t desccount;
  ETH_DMADescTypeDef *dmarxdesc;
  uint8_t *buff = NULL;
 80016fc:	2300      	movs	r3, #0
 80016fe:	60fb      	str	r3, [r7, #12]
  uint8_t allocStatus = 1U;
 8001700:	2301      	movs	r3, #1
 8001702:	74fb      	strb	r3, [r7, #19]

  descidx = heth->RxDescList.RxBuildDescIdx;
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001708:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	69fa      	ldr	r2, [r7, #28]
 800170e:	3212      	adds	r2, #18
 8001710:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001714:	617b      	str	r3, [r7, #20]
  desccount = heth->RxDescList.RxBuildDescCnt;
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800171a:	61bb      	str	r3, [r7, #24]

  while ((desccount > 0U) && (allocStatus != 0U))
 800171c:	e040      	b.n	80017a0 <ETH_UpdateDescriptor+0xac>
  {
    /* Check if a buffer's attached the descriptor */
    if (READ_REG(dmarxdesc->BackupAddr0) == 0U)
 800171e:	697b      	ldr	r3, [r7, #20]
 8001720:	6a1b      	ldr	r3, [r3, #32]
 8001722:	2b00      	cmp	r3, #0
 8001724:	d112      	bne.n	800174c <ETH_UpdateDescriptor+0x58>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Allocate callback*/
      heth->rxAllocateCallback(&buff);
#else
      /* Allocate callback */
      HAL_ETH_RxAllocateCallback(&buff);
 8001726:	f107 030c 	add.w	r3, r7, #12
 800172a:	4618      	mov	r0, r3
 800172c:	f002 fcea 	bl	8004104 <HAL_ETH_RxAllocateCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      if (buff == NULL)
 8001730:	68fb      	ldr	r3, [r7, #12]
 8001732:	2b00      	cmp	r3, #0
 8001734:	d102      	bne.n	800173c <ETH_UpdateDescriptor+0x48>
      {
        allocStatus = 0U;
 8001736:	2300      	movs	r3, #0
 8001738:	74fb      	strb	r3, [r7, #19]
 800173a:	e007      	b.n	800174c <ETH_UpdateDescriptor+0x58>
      }
      else
      {
        WRITE_REG(dmarxdesc->BackupAddr0, (uint32_t)buff);
 800173c:	68fb      	ldr	r3, [r7, #12]
 800173e:	461a      	mov	r2, r3
 8001740:	697b      	ldr	r3, [r7, #20]
 8001742:	621a      	str	r2, [r3, #32]
        WRITE_REG(dmarxdesc->DESC2, (uint32_t)buff);
 8001744:	68fb      	ldr	r3, [r7, #12]
 8001746:	461a      	mov	r2, r3
 8001748:	697b      	ldr	r3, [r7, #20]
 800174a:	609a      	str	r2, [r3, #8]
      }
    }

    if (allocStatus != 0U)
 800174c:	7cfb      	ldrb	r3, [r7, #19]
 800174e:	2b00      	cmp	r3, #0
 8001750:	d026      	beq.n	80017a0 <ETH_UpdateDescriptor+0xac>
    {
      if (heth->RxDescList.ItMode == 0U)
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001756:	2b00      	cmp	r3, #0
 8001758:	d103      	bne.n	8001762 <ETH_UpdateDescriptor+0x6e>
      {
        WRITE_REG(dmarxdesc->DESC1, ETH_DMARXDESC_DIC | ETH_RX_BUF_SIZE | ETH_DMARXDESC_RCH);
 800175a:	697b      	ldr	r3, [r7, #20]
 800175c:	4a1e      	ldr	r2, [pc, #120]	; (80017d8 <ETH_UpdateDescriptor+0xe4>)
 800175e:	605a      	str	r2, [r3, #4]
 8001760:	e003      	b.n	800176a <ETH_UpdateDescriptor+0x76>
      }
      else
      {
        WRITE_REG(dmarxdesc->DESC1, ETH_RX_BUF_SIZE | ETH_DMARXDESC_RCH);
 8001762:	697b      	ldr	r3, [r7, #20]
 8001764:	f44f 428c 	mov.w	r2, #17920	; 0x4600
 8001768:	605a      	str	r2, [r3, #4]
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 800176a:	f3bf 8f5f 	dmb	sy
}
 800176e:	bf00      	nop
         is fully performed.
         The __DMB() instruction is added to avoid any potential compiler optimization that
         may lead to abnormal behavior. */
      __DMB();

      SET_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN);
 8001770:	697b      	ldr	r3, [r7, #20]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8001778:	697b      	ldr	r3, [r7, #20]
 800177a:	601a      	str	r2, [r3, #0]

      /* Increment current rx descriptor index */
      INCR_RX_DESC_INDEX(descidx, 1U);
 800177c:	69fb      	ldr	r3, [r7, #28]
 800177e:	3301      	adds	r3, #1
 8001780:	61fb      	str	r3, [r7, #28]
 8001782:	69fb      	ldr	r3, [r7, #28]
 8001784:	2b03      	cmp	r3, #3
 8001786:	d902      	bls.n	800178e <ETH_UpdateDescriptor+0x9a>
 8001788:	69fb      	ldr	r3, [r7, #28]
 800178a:	3b04      	subs	r3, #4
 800178c:	61fb      	str	r3, [r7, #28]
      /* Get current descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	69fa      	ldr	r2, [r7, #28]
 8001792:	3212      	adds	r2, #18
 8001794:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001798:	617b      	str	r3, [r7, #20]
      desccount--;
 800179a:	69bb      	ldr	r3, [r7, #24]
 800179c:	3b01      	subs	r3, #1
 800179e:	61bb      	str	r3, [r7, #24]
  while ((desccount > 0U) && (allocStatus != 0U))
 80017a0:	69bb      	ldr	r3, [r7, #24]
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d002      	beq.n	80017ac <ETH_UpdateDescriptor+0xb8>
 80017a6:	7cfb      	ldrb	r3, [r7, #19]
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	d1b8      	bne.n	800171e <ETH_UpdateDescriptor+0x2a>
    }
  }

  if (heth->RxDescList.RxBuildDescCnt != desccount)
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80017b0:	69ba      	ldr	r2, [r7, #24]
 80017b2:	429a      	cmp	r2, r3
 80017b4:	d00c      	beq.n	80017d0 <ETH_UpdateDescriptor+0xdc>
  {
    /* Set the Tail pointer address */
    WRITE_REG(heth->Instance->DMARPDR, 0);
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80017be:	461a      	mov	r2, r3
 80017c0:	2300      	movs	r3, #0
 80017c2:	6093      	str	r3, [r2, #8]

    heth->RxDescList.RxBuildDescIdx = descidx;
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	69fa      	ldr	r2, [r7, #28]
 80017c8:	669a      	str	r2, [r3, #104]	; 0x68
    heth->RxDescList.RxBuildDescCnt = desccount;
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	69ba      	ldr	r2, [r7, #24]
 80017ce:	66da      	str	r2, [r3, #108]	; 0x6c
  }
}
 80017d0:	bf00      	nop
 80017d2:	3720      	adds	r7, #32
 80017d4:	46bd      	mov	sp, r7
 80017d6:	bd80      	pop	{r7, pc}
 80017d8:	80004600 	.word	0x80004600

080017dc <HAL_ETH_ReadPHYRegister>:
  * @param pRegValue: parameter to hold read value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                          uint32_t *pRegValue)
{
 80017dc:	b580      	push	{r7, lr}
 80017de:	b086      	sub	sp, #24
 80017e0:	af00      	add	r7, sp, #0
 80017e2:	60f8      	str	r0, [r7, #12]
 80017e4:	60b9      	str	r1, [r7, #8]
 80017e6:	607a      	str	r2, [r7, #4]
 80017e8:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg1;
  uint32_t tickstart;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 80017ea:	68fb      	ldr	r3, [r7, #12]
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	691b      	ldr	r3, [r3, #16]
 80017f0:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 80017f2:	697b      	ldr	r3, [r7, #20]
 80017f4:	f003 031c 	and.w	r3, r3, #28
 80017f8:	617b      	str	r3, [r7, #20]

  /* Prepare the MII address register value */
  tmpreg1 |= ((PHYAddr << 11U) & ETH_MACMIIAR_PA);                        /* Set the PHY device address   */
 80017fa:	68bb      	ldr	r3, [r7, #8]
 80017fc:	02db      	lsls	r3, r3, #11
 80017fe:	b29b      	uxth	r3, r3
 8001800:	697a      	ldr	r2, [r7, #20]
 8001802:	4313      	orrs	r3, r2
 8001804:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);                /* Set the PHY register address */
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	019b      	lsls	r3, r3, #6
 800180a:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 800180e:	697a      	ldr	r2, [r7, #20]
 8001810:	4313      	orrs	r3, r2
 8001812:	617b      	str	r3, [r7, #20]
  tmpreg1 &= ~ETH_MACMIIAR_MW;                                            /* Set the read mode            */
 8001814:	697b      	ldr	r3, [r7, #20]
 8001816:	f023 0302 	bic.w	r3, r3, #2
 800181a:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                             /* Set the MII Busy bit         */
 800181c:	697b      	ldr	r3, [r7, #20]
 800181e:	f043 0301 	orr.w	r3, r3, #1
 8001822:	617b      	str	r3, [r7, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8001824:	68fb      	ldr	r3, [r7, #12]
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	697a      	ldr	r2, [r7, #20]
 800182a:	611a      	str	r2, [r3, #16]


  tickstart = HAL_GetTick();
 800182c:	f7ff fbbe 	bl	8000fac <HAL_GetTick>
 8001830:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001832:	e00d      	b.n	8001850 <HAL_ETH_ReadPHYRegister+0x74>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_READ_TO)
 8001834:	f7ff fbba 	bl	8000fac <HAL_GetTick>
 8001838:	4602      	mov	r2, r0
 800183a:	693b      	ldr	r3, [r7, #16]
 800183c:	1ad3      	subs	r3, r2, r3
 800183e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001842:	d301      	bcc.n	8001848 <HAL_ETH_ReadPHYRegister+0x6c>
    {
      return HAL_ERROR;
 8001844:	2301      	movs	r3, #1
 8001846:	e010      	b.n	800186a <HAL_ETH_ReadPHYRegister+0x8e>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 8001848:	68fb      	ldr	r3, [r7, #12]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	691b      	ldr	r3, [r3, #16]
 800184e:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001850:	697b      	ldr	r3, [r7, #20]
 8001852:	f003 0301 	and.w	r3, r3, #1
 8001856:	2b00      	cmp	r3, #0
 8001858:	d1ec      	bne.n	8001834 <HAL_ETH_ReadPHYRegister+0x58>
  }

  /* Get MACMIIDR value */
  *pRegValue = (uint16_t)(heth->Instance->MACMIIDR);
 800185a:	68fb      	ldr	r3, [r7, #12]
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	695b      	ldr	r3, [r3, #20]
 8001860:	b29b      	uxth	r3, r3
 8001862:	461a      	mov	r2, r3
 8001864:	683b      	ldr	r3, [r7, #0]
 8001866:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8001868:	2300      	movs	r3, #0
}
 800186a:	4618      	mov	r0, r3
 800186c:	3718      	adds	r7, #24
 800186e:	46bd      	mov	sp, r7
 8001870:	bd80      	pop	{r7, pc}

08001872 <HAL_ETH_WritePHYRegister>:
  * @param  RegValue: the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                           uint32_t RegValue)
{
 8001872:	b580      	push	{r7, lr}
 8001874:	b086      	sub	sp, #24
 8001876:	af00      	add	r7, sp, #0
 8001878:	60f8      	str	r0, [r7, #12]
 800187a:	60b9      	str	r1, [r7, #8]
 800187c:	607a      	str	r2, [r7, #4]
 800187e:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg1;
  uint32_t tickstart;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 8001880:	68fb      	ldr	r3, [r7, #12]
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	691b      	ldr	r3, [r3, #16]
 8001886:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8001888:	697b      	ldr	r3, [r7, #20]
 800188a:	f003 031c 	and.w	r3, r3, #28
 800188e:	617b      	str	r3, [r7, #20]

  /* Prepare the MII register address value */
  tmpreg1 |= ((PHYAddr << 11U) & ETH_MACMIIAR_PA);                      /* Set the PHY device address */
 8001890:	68bb      	ldr	r3, [r7, #8]
 8001892:	02db      	lsls	r3, r3, #11
 8001894:	b29b      	uxth	r3, r3
 8001896:	697a      	ldr	r2, [r7, #20]
 8001898:	4313      	orrs	r3, r2
 800189a:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);              /* Set the PHY register address */
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	019b      	lsls	r3, r3, #6
 80018a0:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 80018a4:	697a      	ldr	r2, [r7, #20]
 80018a6:	4313      	orrs	r3, r2
 80018a8:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MW;                                           /* Set the write mode */
 80018aa:	697b      	ldr	r3, [r7, #20]
 80018ac:	f043 0302 	orr.w	r3, r3, #2
 80018b0:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                           /* Set the MII Busy bit */
 80018b2:	697b      	ldr	r3, [r7, #20]
 80018b4:	f043 0301 	orr.w	r3, r3, #1
 80018b8:	617b      	str	r3, [r7, #20]

  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 80018ba:	683b      	ldr	r3, [r7, #0]
 80018bc:	b29a      	uxth	r2, r3
 80018be:	68fb      	ldr	r3, [r7, #12]
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	615a      	str	r2, [r3, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 80018c4:	68fb      	ldr	r3, [r7, #12]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	697a      	ldr	r2, [r7, #20]
 80018ca:	611a      	str	r2, [r3, #16]

  /* Get tick */
  tickstart = HAL_GetTick();
 80018cc:	f7ff fb6e 	bl	8000fac <HAL_GetTick>
 80018d0:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 80018d2:	e00d      	b.n	80018f0 <HAL_ETH_WritePHYRegister+0x7e>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_WRITE_TO)
 80018d4:	f7ff fb6a 	bl	8000fac <HAL_GetTick>
 80018d8:	4602      	mov	r2, r0
 80018da:	693b      	ldr	r3, [r7, #16]
 80018dc:	1ad3      	subs	r3, r2, r3
 80018de:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80018e2:	d301      	bcc.n	80018e8 <HAL_ETH_WritePHYRegister+0x76>
    {
      return HAL_ERROR;
 80018e4:	2301      	movs	r3, #1
 80018e6:	e009      	b.n	80018fc <HAL_ETH_WritePHYRegister+0x8a>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 80018e8:	68fb      	ldr	r3, [r7, #12]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	691b      	ldr	r3, [r3, #16]
 80018ee:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 80018f0:	697b      	ldr	r3, [r7, #20]
 80018f2:	f003 0301 	and.w	r3, r3, #1
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d1ec      	bne.n	80018d4 <HAL_ETH_WritePHYRegister+0x62>
  }

  return HAL_OK;
 80018fa:	2300      	movs	r3, #0
}
 80018fc:	4618      	mov	r0, r3
 80018fe:	3718      	adds	r7, #24
 8001900:	46bd      	mov	sp, r7
 8001902:	bd80      	pop	{r7, pc}

08001904 <HAL_ETH_GetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that will hold
  *         the configuration of the MAC.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_ETH_GetMACConfig(ETH_HandleTypeDef *heth, ETH_MACConfigTypeDef *macconf)
{
 8001904:	b480      	push	{r7}
 8001906:	b083      	sub	sp, #12
 8001908:	af00      	add	r7, sp, #0
 800190a:	6078      	str	r0, [r7, #4]
 800190c:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 800190e:	683b      	ldr	r3, [r7, #0]
 8001910:	2b00      	cmp	r3, #0
 8001912:	d101      	bne.n	8001918 <HAL_ETH_GetMACConfig+0x14>
  {
    return HAL_ERROR;
 8001914:	2301      	movs	r3, #1
 8001916:	e0d9      	b.n	8001acc <HAL_ETH_GetMACConfig+0x1c8>
  }

  /* Get MAC parameters */
  macconf->DeferralCheck = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DC) >> 4) > 0U) ? ENABLE : DISABLE;
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	f003 0310 	and.w	r3, r3, #16
 8001922:	2b00      	cmp	r3, #0
 8001924:	bf14      	ite	ne
 8001926:	2301      	movne	r3, #1
 8001928:	2300      	moveq	r3, #0
 800192a:	b2db      	uxtb	r3, r3
 800192c:	461a      	mov	r2, r3
 800192e:	683b      	ldr	r3, [r7, #0]
 8001930:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  macconf->BackOffLimit = READ_BIT(heth->Instance->MACCR, ETH_MACCR_BL);
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	f003 0260 	and.w	r2, r3, #96	; 0x60
 800193e:	683b      	ldr	r3, [r7, #0]
 8001940:	625a      	str	r2, [r3, #36]	; 0x24
  macconf->RetryTransmission = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_RD) >> 9) == 0U) ? ENABLE : DISABLE;
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800194c:	2b00      	cmp	r3, #0
 800194e:	bf0c      	ite	eq
 8001950:	2301      	moveq	r3, #1
 8001952:	2300      	movne	r3, #0
 8001954:	b2db      	uxtb	r3, r3
 8001956:	461a      	mov	r2, r3
 8001958:	683b      	ldr	r3, [r7, #0]
 800195a:	f883 2020 	strb.w	r2, [r3, #32]
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSD) >> 16) > 0U)
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
                                        ? ENABLE : DISABLE;
 8001968:	2b00      	cmp	r3, #0
 800196a:	bf14      	ite	ne
 800196c:	2301      	movne	r3, #1
 800196e:	2300      	moveq	r3, #0
 8001970:	b2db      	uxtb	r3, r3
 8001972:	461a      	mov	r2, r3
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSD) >> 16) > 0U)
 8001974:	683b      	ldr	r3, [r7, #0]
 8001976:	77da      	strb	r2, [r3, #31]
  macconf->ReceiveOwn = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_ROD) >> 13) == 0U) ? ENABLE : DISABLE;
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001982:	2b00      	cmp	r3, #0
 8001984:	bf0c      	ite	eq
 8001986:	2301      	moveq	r3, #1
 8001988:	2300      	movne	r3, #0
 800198a:	b2db      	uxtb	r3, r3
 800198c:	461a      	mov	r2, r3
 800198e:	683b      	ldr	r3, [r7, #0]
 8001990:	779a      	strb	r2, [r3, #30]
  macconf->LoopbackMode = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_LM) >> 12) > 0U) ? ENABLE : DISABLE;
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800199c:	2b00      	cmp	r3, #0
 800199e:	bf14      	ite	ne
 80019a0:	2301      	movne	r3, #1
 80019a2:	2300      	moveq	r3, #0
 80019a4:	b2db      	uxtb	r3, r3
 80019a6:	461a      	mov	r2, r3
 80019a8:	683b      	ldr	r3, [r7, #0]
 80019aa:	771a      	strb	r2, [r3, #28]
  macconf->DuplexMode = READ_BIT(heth->Instance->MACCR, ETH_MACCR_DM);
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	f403 6200 	and.w	r2, r3, #2048	; 0x800
 80019b6:	683b      	ldr	r3, [r7, #0]
 80019b8:	619a      	str	r2, [r3, #24]
  macconf->Speed = READ_BIT(heth->Instance->MACCR, ETH_MACCR_FES);
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	f403 4280 	and.w	r2, r3, #16384	; 0x4000
 80019c4:	683b      	ldr	r3, [r7, #0]
 80019c6:	615a      	str	r2, [r3, #20]
  macconf->Jabber = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JD) >> 22) == 0U) ? ENABLE : DISABLE;
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	bf0c      	ite	eq
 80019d6:	2301      	moveq	r3, #1
 80019d8:	2300      	movne	r3, #0
 80019da:	b2db      	uxtb	r3, r3
 80019dc:	461a      	mov	r2, r3
 80019de:	683b      	ldr	r3, [r7, #0]
 80019e0:	745a      	strb	r2, [r3, #17]
  macconf->Watchdog = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_WD) >> 23) == 0U) ? ENABLE : DISABLE;
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	bf0c      	ite	eq
 80019f0:	2301      	moveq	r3, #1
 80019f2:	2300      	movne	r3, #0
 80019f4:	b2db      	uxtb	r3, r3
 80019f6:	461a      	mov	r2, r3
 80019f8:	683b      	ldr	r3, [r7, #0]
 80019fa:	741a      	strb	r2, [r3, #16]
  macconf->AutomaticPadCRCStrip = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_APCS) >> 7) > 0U) ? ENABLE : DISABLE;
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	bf14      	ite	ne
 8001a0a:	2301      	movne	r3, #1
 8001a0c:	2300      	moveq	r3, #0
 8001a0e:	b2db      	uxtb	r3, r3
 8001a10:	461a      	mov	r2, r3
 8001a12:	683b      	ldr	r3, [r7, #0]
 8001a14:	73da      	strb	r2, [r3, #15]
  macconf->InterPacketGapVal = READ_BIT(heth->Instance->MACCR, ETH_MACCR_IFG);
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	f403 2260 	and.w	r2, r3, #917504	; 0xe0000
 8001a20:	683b      	ldr	r3, [r7, #0]
 8001a22:	609a      	str	r2, [r3, #8]
  macconf->ChecksumOffload = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPCO) >> 10U) > 0U) ? ENABLE : DISABLE;
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	bf14      	ite	ne
 8001a32:	2301      	movne	r3, #1
 8001a34:	2300      	moveq	r3, #0
 8001a36:	b2db      	uxtb	r3, r3
 8001a38:	461a      	mov	r2, r3
 8001a3a:	683b      	ldr	r3, [r7, #0]
 8001a3c:	711a      	strb	r2, [r3, #4]


  macconf->TransmitFlowControl = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_TFCE) >> 1) > 0U) ? ENABLE : DISABLE;
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	699b      	ldr	r3, [r3, #24]
 8001a44:	f003 0302 	and.w	r3, r3, #2
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	bf14      	ite	ne
 8001a4c:	2301      	movne	r3, #1
 8001a4e:	2300      	moveq	r3, #0
 8001a50:	b2db      	uxtb	r3, r3
 8001a52:	461a      	mov	r2, r3
 8001a54:	683b      	ldr	r3, [r7, #0]
 8001a56:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  macconf->ZeroQuantaPause = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_ZQPD) >> 7) == 0U) ? ENABLE : DISABLE;
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	699b      	ldr	r3, [r3, #24]
 8001a60:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	bf0c      	ite	eq
 8001a68:	2301      	moveq	r3, #1
 8001a6a:	2300      	movne	r3, #0
 8001a6c:	b2db      	uxtb	r3, r3
 8001a6e:	461a      	mov	r2, r3
 8001a70:	683b      	ldr	r3, [r7, #0]
 8001a72:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
  macconf->PauseLowThreshold = READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_PLT);
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	699b      	ldr	r3, [r3, #24]
 8001a7c:	f003 0230 	and.w	r2, r3, #48	; 0x30
 8001a80:	683b      	ldr	r3, [r7, #0]
 8001a82:	651a      	str	r2, [r3, #80]	; 0x50
  macconf->PauseTime = (READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_PT) >> 16);
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	699b      	ldr	r3, [r3, #24]
 8001a8a:	0c1b      	lsrs	r3, r3, #16
 8001a8c:	b29a      	uxth	r2, r3
 8001a8e:	683b      	ldr	r3, [r7, #0]
 8001a90:	649a      	str	r2, [r3, #72]	; 0x48
  macconf->ReceiveFlowControl = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_RFCE) >> 2U) > 0U) ? ENABLE : DISABLE;
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	699b      	ldr	r3, [r3, #24]
 8001a98:	f003 0304 	and.w	r3, r3, #4
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	bf14      	ite	ne
 8001aa0:	2301      	movne	r3, #1
 8001aa2:	2300      	moveq	r3, #0
 8001aa4:	b2db      	uxtb	r3, r3
 8001aa6:	461a      	mov	r2, r3
 8001aa8:	683b      	ldr	r3, [r7, #0]
 8001aaa:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_UPFD) >> 3U) > 0U)
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	699b      	ldr	r3, [r3, #24]
 8001ab4:	f003 0308 	and.w	r3, r3, #8
                                      ? ENABLE : DISABLE;
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	bf14      	ite	ne
 8001abc:	2301      	movne	r3, #1
 8001abe:	2300      	moveq	r3, #0
 8001ac0:	b2db      	uxtb	r3, r3
 8001ac2:	461a      	mov	r2, r3
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_UPFD) >> 3U) > 0U)
 8001ac4:	683b      	ldr	r3, [r7, #0]
 8001ac6:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55

  return HAL_OK;
 8001aca:	2300      	movs	r3, #0
}
 8001acc:	4618      	mov	r0, r3
 8001ace:	370c      	adds	r7, #12
 8001ad0:	46bd      	mov	sp, r7
 8001ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad6:	4770      	bx	lr

08001ad8 <HAL_ETH_SetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that contains
  *         the configuration of the MAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8001ad8:	b580      	push	{r7, lr}
 8001ada:	b082      	sub	sp, #8
 8001adc:	af00      	add	r7, sp, #0
 8001ade:	6078      	str	r0, [r7, #4]
 8001ae0:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 8001ae2:	683b      	ldr	r3, [r7, #0]
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	d101      	bne.n	8001aec <HAL_ETH_SetMACConfig+0x14>
  {
    return HAL_ERROR;
 8001ae8:	2301      	movs	r3, #1
 8001aea:	e00b      	b.n	8001b04 <HAL_ETH_SetMACConfig+0x2c>
  }

  if (heth->gState == HAL_ETH_STATE_READY)
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001af2:	2b10      	cmp	r3, #16
 8001af4:	d105      	bne.n	8001b02 <HAL_ETH_SetMACConfig+0x2a>
  {
    ETH_SetMACConfig(heth, macconf);
 8001af6:	6839      	ldr	r1, [r7, #0]
 8001af8:	6878      	ldr	r0, [r7, #4]
 8001afa:	f000 f883 	bl	8001c04 <ETH_SetMACConfig>

    return HAL_OK;
 8001afe:	2300      	movs	r3, #0
 8001b00:	e000      	b.n	8001b04 <HAL_ETH_SetMACConfig+0x2c>
  }
  else
  {
    return HAL_ERROR;
 8001b02:	2301      	movs	r3, #1
  }
}
 8001b04:	4618      	mov	r0, r3
 8001b06:	3708      	adds	r7, #8
 8001b08:	46bd      	mov	sp, r7
 8001b0a:	bd80      	pop	{r7, pc}

08001b0c <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 8001b0c:	b580      	push	{r7, lr}
 8001b0e:	b084      	sub	sp, #16
 8001b10:	af00      	add	r7, sp, #0
 8001b12:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg = (heth->Instance)->MACMIIAR;
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	691b      	ldr	r3, [r3, #16]
 8001b1a:	60fb      	str	r3, [r7, #12]
  /* Clear CSR Clock Range CR[2:0] bits */
  tmpreg &= ETH_MACMIIAR_CR_MASK;
 8001b1c:	68fb      	ldr	r3, [r7, #12]
 8001b1e:	f023 031c 	bic.w	r3, r3, #28
 8001b22:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8001b24:	f001 fa78 	bl	8003018 <HAL_RCC_GetHCLKFreq>
 8001b28:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if ((hclk >= 20000000U) && (hclk < 35000000U))
 8001b2a:	68bb      	ldr	r3, [r7, #8]
 8001b2c:	4a1d      	ldr	r2, [pc, #116]	; (8001ba4 <HAL_ETH_SetMDIOClockRange+0x98>)
 8001b2e:	4293      	cmp	r3, r2
 8001b30:	d908      	bls.n	8001b44 <HAL_ETH_SetMDIOClockRange+0x38>
 8001b32:	68bb      	ldr	r3, [r7, #8]
 8001b34:	4a1c      	ldr	r2, [pc, #112]	; (8001ba8 <HAL_ETH_SetMDIOClockRange+0x9c>)
 8001b36:	4293      	cmp	r3, r2
 8001b38:	d804      	bhi.n	8001b44 <HAL_ETH_SetMDIOClockRange+0x38>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 8001b3a:	68fb      	ldr	r3, [r7, #12]
 8001b3c:	f043 0308 	orr.w	r3, r3, #8
 8001b40:	60fb      	str	r3, [r7, #12]
 8001b42:	e027      	b.n	8001b94 <HAL_ETH_SetMDIOClockRange+0x88>
  }
  else if ((hclk >= 35000000U) && (hclk < 60000000U))
 8001b44:	68bb      	ldr	r3, [r7, #8]
 8001b46:	4a18      	ldr	r2, [pc, #96]	; (8001ba8 <HAL_ETH_SetMDIOClockRange+0x9c>)
 8001b48:	4293      	cmp	r3, r2
 8001b4a:	d908      	bls.n	8001b5e <HAL_ETH_SetMDIOClockRange+0x52>
 8001b4c:	68bb      	ldr	r3, [r7, #8]
 8001b4e:	4a17      	ldr	r2, [pc, #92]	; (8001bac <HAL_ETH_SetMDIOClockRange+0xa0>)
 8001b50:	4293      	cmp	r3, r2
 8001b52:	d204      	bcs.n	8001b5e <HAL_ETH_SetMDIOClockRange+0x52>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 8001b54:	68fb      	ldr	r3, [r7, #12]
 8001b56:	f043 030c 	orr.w	r3, r3, #12
 8001b5a:	60fb      	str	r3, [r7, #12]
 8001b5c:	e01a      	b.n	8001b94 <HAL_ETH_SetMDIOClockRange+0x88>
  }
  else if ((hclk >= 60000000U) && (hclk < 100000000U))
 8001b5e:	68bb      	ldr	r3, [r7, #8]
 8001b60:	4a12      	ldr	r2, [pc, #72]	; (8001bac <HAL_ETH_SetMDIOClockRange+0xa0>)
 8001b62:	4293      	cmp	r3, r2
 8001b64:	d303      	bcc.n	8001b6e <HAL_ETH_SetMDIOClockRange+0x62>
 8001b66:	68bb      	ldr	r3, [r7, #8]
 8001b68:	4a11      	ldr	r2, [pc, #68]	; (8001bb0 <HAL_ETH_SetMDIOClockRange+0xa4>)
 8001b6a:	4293      	cmp	r3, r2
 8001b6c:	d911      	bls.n	8001b92 <HAL_ETH_SetMDIOClockRange+0x86>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }
  else if ((hclk >= 100000000U) && (hclk < 150000000U))
 8001b6e:	68bb      	ldr	r3, [r7, #8]
 8001b70:	4a0f      	ldr	r2, [pc, #60]	; (8001bb0 <HAL_ETH_SetMDIOClockRange+0xa4>)
 8001b72:	4293      	cmp	r3, r2
 8001b74:	d908      	bls.n	8001b88 <HAL_ETH_SetMDIOClockRange+0x7c>
 8001b76:	68bb      	ldr	r3, [r7, #8]
 8001b78:	4a0e      	ldr	r2, [pc, #56]	; (8001bb4 <HAL_ETH_SetMDIOClockRange+0xa8>)
 8001b7a:	4293      	cmp	r3, r2
 8001b7c:	d804      	bhi.n	8001b88 <HAL_ETH_SetMDIOClockRange+0x7c>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 8001b7e:	68fb      	ldr	r3, [r7, #12]
 8001b80:	f043 0304 	orr.w	r3, r3, #4
 8001b84:	60fb      	str	r3, [r7, #12]
 8001b86:	e005      	b.n	8001b94 <HAL_ETH_SetMDIOClockRange+0x88>
  }
  else /* ((hclk >= 150000000)&&(hclk <= 183000000))*/
  {
    /* CSR Clock Range between 150-183 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div102;
 8001b88:	68fb      	ldr	r3, [r7, #12]
 8001b8a:	f043 0310 	orr.w	r3, r3, #16
 8001b8e:	60fb      	str	r3, [r7, #12]
 8001b90:	e000      	b.n	8001b94 <HAL_ETH_SetMDIOClockRange+0x88>
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
 8001b92:	bf00      	nop
  }

  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tmpreg;
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	68fa      	ldr	r2, [r7, #12]
 8001b9a:	611a      	str	r2, [r3, #16]
}
 8001b9c:	bf00      	nop
 8001b9e:	3710      	adds	r7, #16
 8001ba0:	46bd      	mov	sp, r7
 8001ba2:	bd80      	pop	{r7, pc}
 8001ba4:	01312cff 	.word	0x01312cff
 8001ba8:	02160ebf 	.word	0x02160ebf
 8001bac:	03938700 	.word	0x03938700
 8001bb0:	05f5e0ff 	.word	0x05f5e0ff
 8001bb4:	08f0d17f 	.word	0x08f0d17f

08001bb8 <ETH_FlushTransmitFIFO>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_FlushTransmitFIFO(ETH_HandleTypeDef *heth)
{
 8001bb8:	b580      	push	{r7, lr}
 8001bba:	b084      	sub	sp, #16
 8001bbc:	af00      	add	r7, sp, #0
 8001bbe:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 8001bc0:	2300      	movs	r3, #0
 8001bc2:	60fb      	str	r3, [r7, #12]

  /* Set the Flush Transmit FIFO bit */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001bcc:	699b      	ldr	r3, [r3, #24]
 8001bce:	687a      	ldr	r2, [r7, #4]
 8001bd0:	6812      	ldr	r2, [r2, #0]
 8001bd2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001bd6:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001bda:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->DMAOMR;
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001be4:	699b      	ldr	r3, [r3, #24]
 8001be6:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001be8:	2001      	movs	r0, #1
 8001bea:	f7ff f9eb 	bl	8000fc4 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg;
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	681a      	ldr	r2, [r3, #0]
 8001bf2:	68fb      	ldr	r3, [r7, #12]
 8001bf4:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001bf8:	6193      	str	r3, [r2, #24]
}
 8001bfa:	bf00      	nop
 8001bfc:	3710      	adds	r7, #16
 8001bfe:	46bd      	mov	sp, r7
 8001c00:	bd80      	pop	{r7, pc}
	...

08001c04 <ETH_SetMACConfig>:

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8001c04:	b580      	push	{r7, lr}
 8001c06:	b084      	sub	sp, #16
 8001c08:	af00      	add	r7, sp, #0
 8001c0a:	6078      	str	r0, [r7, #4]
 8001c0c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	60fb      	str	r3, [r7, #12]
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8001c16:	68fa      	ldr	r2, [r7, #12]
 8001c18:	4b51      	ldr	r3, [pc, #324]	; (8001d60 <ETH_SetMACConfig+0x15c>)
 8001c1a:	4013      	ands	r3, r2
 8001c1c:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8001c1e:	683b      	ldr	r3, [r7, #0]
 8001c20:	7c1b      	ldrb	r3, [r3, #16]
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d102      	bne.n	8001c2c <ETH_SetMACConfig+0x28>
 8001c26:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8001c2a:	e000      	b.n	8001c2e <ETH_SetMACConfig+0x2a>
 8001c2c:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8001c2e:	683b      	ldr	r3, [r7, #0]
 8001c30:	7c5b      	ldrb	r3, [r3, #17]
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d102      	bne.n	8001c3c <ETH_SetMACConfig+0x38>
 8001c36:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001c3a:	e000      	b.n	8001c3e <ETH_SetMACConfig+0x3a>
 8001c3c:	2300      	movs	r3, #0
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8001c3e:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 8001c40:	683b      	ldr	r3, [r7, #0]
 8001c42:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8001c44:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8001c46:	683b      	ldr	r3, [r7, #0]
 8001c48:	7fdb      	ldrb	r3, [r3, #31]
 8001c4a:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 8001c4c:	431a      	orrs	r2, r3
                        macconf->Speed |
 8001c4e:	683b      	ldr	r3, [r7, #0]
 8001c50:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8001c52:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8001c54:	683a      	ldr	r2, [r7, #0]
 8001c56:	7f92      	ldrb	r2, [r2, #30]
 8001c58:	2a00      	cmp	r2, #0
 8001c5a:	d102      	bne.n	8001c62 <ETH_SetMACConfig+0x5e>
 8001c5c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001c60:	e000      	b.n	8001c64 <ETH_SetMACConfig+0x60>
 8001c62:	2200      	movs	r2, #0
                        macconf->Speed |
 8001c64:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8001c66:	683b      	ldr	r3, [r7, #0]
 8001c68:	7f1b      	ldrb	r3, [r3, #28]
 8001c6a:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8001c6c:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 8001c6e:	683b      	ldr	r3, [r7, #0]
 8001c70:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8001c72:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8001c74:	683b      	ldr	r3, [r7, #0]
 8001c76:	791b      	ldrb	r3, [r3, #4]
 8001c78:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 8001c7a:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8001c7c:	683a      	ldr	r2, [r7, #0]
 8001c7e:	f892 2020 	ldrb.w	r2, [r2, #32]
 8001c82:	2a00      	cmp	r2, #0
 8001c84:	d102      	bne.n	8001c8c <ETH_SetMACConfig+0x88>
 8001c86:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001c8a:	e000      	b.n	8001c8e <ETH_SetMACConfig+0x8a>
 8001c8c:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8001c8e:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8001c90:	683b      	ldr	r3, [r7, #0]
 8001c92:	7bdb      	ldrb	r3, [r3, #15]
 8001c94:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8001c96:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 8001c98:	683b      	ldr	r3, [r7, #0]
 8001c9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8001c9c:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 8001c9e:	683b      	ldr	r3, [r7, #0]
 8001ca0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8001ca4:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8001ca6:	4313      	orrs	r3, r2
 8001ca8:	68fa      	ldr	r2, [r7, #12]
 8001caa:	4313      	orrs	r3, r2
 8001cac:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	68fa      	ldr	r2, [r7, #12]
 8001cb4:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001cbe:	2001      	movs	r0, #1
 8001cc0:	f7ff f980 	bl	8000fc4 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	68fa      	ldr	r2, [r7, #12]
 8001cca:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	699b      	ldr	r3, [r3, #24]
 8001cd2:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8001cd4:	68fa      	ldr	r2, [r7, #12]
 8001cd6:	f64f 7341 	movw	r3, #65345	; 0xff41
 8001cda:	4013      	ands	r3, r2
 8001cdc:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8001cde:	683b      	ldr	r3, [r7, #0]
 8001ce0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001ce2:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8001ce4:	683a      	ldr	r2, [r7, #0]
 8001ce6:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 8001cea:	2a00      	cmp	r2, #0
 8001cec:	d101      	bne.n	8001cf2 <ETH_SetMACConfig+0xee>
 8001cee:	2280      	movs	r2, #128	; 0x80
 8001cf0:	e000      	b.n	8001cf4 <ETH_SetMACConfig+0xf0>
 8001cf2:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8001cf4:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 8001cf6:	683b      	ldr	r3, [r7, #0]
 8001cf8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8001cfa:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8001cfc:	683a      	ldr	r2, [r7, #0]
 8001cfe:	f892 2055 	ldrb.w	r2, [r2, #85]	; 0x55
 8001d02:	2a01      	cmp	r2, #1
 8001d04:	d101      	bne.n	8001d0a <ETH_SetMACConfig+0x106>
 8001d06:	2208      	movs	r2, #8
 8001d08:	e000      	b.n	8001d0c <ETH_SetMACConfig+0x108>
 8001d0a:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 8001d0c:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 8001d0e:	683a      	ldr	r2, [r7, #0]
 8001d10:	f892 2056 	ldrb.w	r2, [r2, #86]	; 0x56
 8001d14:	2a01      	cmp	r2, #1
 8001d16:	d101      	bne.n	8001d1c <ETH_SetMACConfig+0x118>
 8001d18:	2204      	movs	r2, #4
 8001d1a:	e000      	b.n	8001d1e <ETH_SetMACConfig+0x11a>
 8001d1c:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8001d1e:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 8001d20:	683a      	ldr	r2, [r7, #0]
 8001d22:	f892 2054 	ldrb.w	r2, [r2, #84]	; 0x54
 8001d26:	2a01      	cmp	r2, #1
 8001d28:	d101      	bne.n	8001d2e <ETH_SetMACConfig+0x12a>
 8001d2a:	2202      	movs	r2, #2
 8001d2c:	e000      	b.n	8001d30 <ETH_SetMACConfig+0x12c>
 8001d2e:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8001d30:	4313      	orrs	r3, r2
 8001d32:	68fa      	ldr	r2, [r7, #12]
 8001d34:	4313      	orrs	r3, r2
 8001d36:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	68fa      	ldr	r2, [r7, #12]
 8001d3e:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	699b      	ldr	r3, [r3, #24]
 8001d46:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001d48:	2001      	movs	r0, #1
 8001d4a:	f7ff f93b 	bl	8000fc4 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	68fa      	ldr	r2, [r7, #12]
 8001d54:	619a      	str	r2, [r3, #24]
}
 8001d56:	bf00      	nop
 8001d58:	3710      	adds	r7, #16
 8001d5a:	46bd      	mov	sp, r7
 8001d5c:	bd80      	pop	{r7, pc}
 8001d5e:	bf00      	nop
 8001d60:	ff20810f 	.word	0xff20810f

08001d64 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8001d64:	b580      	push	{r7, lr}
 8001d66:	b084      	sub	sp, #16
 8001d68:	af00      	add	r7, sp, #0
 8001d6a:	6078      	str	r0, [r7, #4]
 8001d6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001d76:	699b      	ldr	r3, [r3, #24]
 8001d78:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 8001d7a:	68fa      	ldr	r2, [r7, #12]
 8001d7c:	4b3d      	ldr	r3, [pc, #244]	; (8001e74 <ETH_SetDMAConfig+0x110>)
 8001d7e:	4013      	ands	r3, r2
 8001d80:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8001d82:	683b      	ldr	r3, [r7, #0]
 8001d84:	7b1b      	ldrb	r3, [r3, #12]
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d102      	bne.n	8001d90 <ETH_SetDMAConfig+0x2c>
 8001d8a:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001d8e:	e000      	b.n	8001d92 <ETH_SetDMAConfig+0x2e>
 8001d90:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8001d92:	683b      	ldr	r3, [r7, #0]
 8001d94:	7b5b      	ldrb	r3, [r3, #13]
 8001d96:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8001d98:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8001d9a:	683a      	ldr	r2, [r7, #0]
 8001d9c:	7f52      	ldrb	r2, [r2, #29]
 8001d9e:	2a00      	cmp	r2, #0
 8001da0:	d102      	bne.n	8001da8 <ETH_SetDMAConfig+0x44>
 8001da2:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8001da6:	e000      	b.n	8001daa <ETH_SetDMAConfig+0x46>
 8001da8:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8001daa:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8001dac:	683b      	ldr	r3, [r7, #0]
 8001dae:	7b9b      	ldrb	r3, [r3, #14]
 8001db0:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8001db2:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 8001db4:	683b      	ldr	r3, [r7, #0]
 8001db6:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8001db8:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8001dba:	683b      	ldr	r3, [r7, #0]
 8001dbc:	7f1b      	ldrb	r3, [r3, #28]
 8001dbe:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 8001dc0:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8001dc2:	683b      	ldr	r3, [r7, #0]
 8001dc4:	7f9b      	ldrb	r3, [r3, #30]
 8001dc6:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8001dc8:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 8001dca:	683b      	ldr	r3, [r7, #0]
 8001dcc:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8001dce:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 8001dd0:	683b      	ldr	r3, [r7, #0]
 8001dd2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001dd6:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8001dd8:	4313      	orrs	r3, r2
 8001dda:	68fa      	ldr	r2, [r7, #12]
 8001ddc:	4313      	orrs	r3, r2
 8001dde:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001de8:	461a      	mov	r2, r3
 8001dea:	68fb      	ldr	r3, [r7, #12]
 8001dec:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001df6:	699b      	ldr	r3, [r3, #24]
 8001df8:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001dfa:	2001      	movs	r0, #1
 8001dfc:	f7ff f8e2 	bl	8000fc4 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001e08:	461a      	mov	r2, r3
 8001e0a:	68fb      	ldr	r3, [r7, #12]
 8001e0c:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8001e0e:	683b      	ldr	r3, [r7, #0]
 8001e10:	791b      	ldrb	r3, [r3, #4]
 8001e12:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 8001e14:	683b      	ldr	r3, [r7, #0]
 8001e16:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8001e18:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8001e1a:	683b      	ldr	r3, [r7, #0]
 8001e1c:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 8001e1e:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 8001e20:	683b      	ldr	r3, [r7, #0]
 8001e22:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8001e24:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8001e26:	683b      	ldr	r3, [r7, #0]
 8001e28:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001e2c:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 8001e2e:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8001e30:	683b      	ldr	r3, [r7, #0]
 8001e32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e34:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8001e36:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 8001e38:	683b      	ldr	r3, [r7, #0]
 8001e3a:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8001e3c:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8001e3e:	687a      	ldr	r2, [r7, #4]
 8001e40:	6812      	ldr	r2, [r2, #0]
 8001e42:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001e46:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001e4a:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001e58:	2001      	movs	r0, #1
 8001e5a:	f7ff f8b3 	bl	8000fc4 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001e66:	461a      	mov	r2, r3
 8001e68:	68fb      	ldr	r3, [r7, #12]
 8001e6a:	6013      	str	r3, [r2, #0]
}
 8001e6c:	bf00      	nop
 8001e6e:	3710      	adds	r7, #16
 8001e70:	46bd      	mov	sp, r7
 8001e72:	bd80      	pop	{r7, pc}
 8001e74:	f8de3f23 	.word	0xf8de3f23

08001e78 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8001e78:	b580      	push	{r7, lr}
 8001e7a:	b0a6      	sub	sp, #152	; 0x98
 8001e7c:	af00      	add	r7, sp, #0
 8001e7e:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 8001e80:	2301      	movs	r3, #1
 8001e82:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
  macDefaultConf.Jabber = ENABLE;
 8001e86:	2301      	movs	r3, #1
 8001e88:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 8001e8c:	2300      	movs	r3, #0
 8001e8e:	63fb      	str	r3, [r7, #60]	; 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8001e90:	2300      	movs	r3, #0
 8001e92:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 8001e96:	2301      	movs	r3, #1
 8001e98:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 8001e9c:	2300      	movs	r3, #0
 8001e9e:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
  macDefaultConf.ChecksumOffload = ENABLE;
 8001ea2:	2301      	movs	r3, #1
 8001ea4:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 8001ea8:	2300      	movs	r3, #0
 8001eaa:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 8001eae:	2300      	movs	r3, #0
 8001eb0:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8001eb4:	2300      	movs	r3, #0
 8001eb6:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 8001eb8:	2300      	movs	r3, #0
 8001eba:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.PauseTime = 0x0U;
 8001ebe:	2300      	movs	r3, #0
 8001ec0:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 8001ec2:	2300      	movs	r3, #0
 8001ec4:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8001ec8:	2300      	movs	r3, #0
 8001eca:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8001ece:	2300      	movs	r3, #0
 8001ed0:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 8001ed4:	2300      	movs	r3, #0
 8001ed6:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 8001eda:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001ede:	64bb      	str	r3, [r7, #72]	; 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8001ee0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001ee4:	64fb      	str	r3, [r7, #76]	; 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8001ee6:	2300      	movs	r3, #0
 8001ee8:	f887 3089 	strb.w	r3, [r7, #137]	; 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8001eec:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001ef0:	4619      	mov	r1, r3
 8001ef2:	6878      	ldr	r0, [r7, #4]
 8001ef4:	f7ff fe86 	bl	8001c04 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 8001ef8:	2301      	movs	r3, #1
 8001efa:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 8001efc:	2301      	movs	r3, #1
 8001efe:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 8001f00:	2301      	movs	r3, #1
 8001f02:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 8001f06:	2301      	movs	r3, #1
 8001f08:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8001f0a:	2300      	movs	r3, #0
 8001f0c:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 8001f0e:	2300      	movs	r3, #0
 8001f10:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 8001f14:	2300      	movs	r3, #0
 8001f16:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8001f1a:	2300      	movs	r3, #0
 8001f1c:	62bb      	str	r3, [r7, #40]	; 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 8001f1e:	2301      	movs	r3, #1
 8001f20:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8001f24:	2301      	movs	r3, #1
 8001f26:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8001f28:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001f2c:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8001f2e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001f32:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8001f34:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001f38:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 8001f3a:	2301      	movs	r3, #1
 8001f3c:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 8001f40:	2300      	movs	r3, #0
 8001f42:	633b      	str	r3, [r7, #48]	; 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8001f44:	2300      	movs	r3, #0
 8001f46:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8001f48:	f107 0308 	add.w	r3, r7, #8
 8001f4c:	4619      	mov	r1, r3
 8001f4e:	6878      	ldr	r0, [r7, #4]
 8001f50:	f7ff ff08 	bl	8001d64 <ETH_SetDMAConfig>
}
 8001f54:	bf00      	nop
 8001f56:	3798      	adds	r7, #152	; 0x98
 8001f58:	46bd      	mov	sp, r7
 8001f5a:	bd80      	pop	{r7, pc}

08001f5c <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8001f5c:	b480      	push	{r7}
 8001f5e:	b087      	sub	sp, #28
 8001f60:	af00      	add	r7, sp, #0
 8001f62:	60f8      	str	r0, [r7, #12]
 8001f64:	60b9      	str	r1, [r7, #8]
 8001f66:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	3305      	adds	r3, #5
 8001f6c:	781b      	ldrb	r3, [r3, #0]
 8001f6e:	021b      	lsls	r3, r3, #8
 8001f70:	687a      	ldr	r2, [r7, #4]
 8001f72:	3204      	adds	r2, #4
 8001f74:	7812      	ldrb	r2, [r2, #0]
 8001f76:	4313      	orrs	r3, r2
 8001f78:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 8001f7a:	68ba      	ldr	r2, [r7, #8]
 8001f7c:	4b11      	ldr	r3, [pc, #68]	; (8001fc4 <ETH_MACAddressConfig+0x68>)
 8001f7e:	4413      	add	r3, r2
 8001f80:	461a      	mov	r2, r3
 8001f82:	697b      	ldr	r3, [r7, #20]
 8001f84:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	3303      	adds	r3, #3
 8001f8a:	781b      	ldrb	r3, [r3, #0]
 8001f8c:	061a      	lsls	r2, r3, #24
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	3302      	adds	r3, #2
 8001f92:	781b      	ldrb	r3, [r3, #0]
 8001f94:	041b      	lsls	r3, r3, #16
 8001f96:	431a      	orrs	r2, r3
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	3301      	adds	r3, #1
 8001f9c:	781b      	ldrb	r3, [r3, #0]
 8001f9e:	021b      	lsls	r3, r3, #8
 8001fa0:	4313      	orrs	r3, r2
 8001fa2:	687a      	ldr	r2, [r7, #4]
 8001fa4:	7812      	ldrb	r2, [r2, #0]
 8001fa6:	4313      	orrs	r3, r2
 8001fa8:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 8001faa:	68ba      	ldr	r2, [r7, #8]
 8001fac:	4b06      	ldr	r3, [pc, #24]	; (8001fc8 <ETH_MACAddressConfig+0x6c>)
 8001fae:	4413      	add	r3, r2
 8001fb0:	461a      	mov	r2, r3
 8001fb2:	697b      	ldr	r3, [r7, #20]
 8001fb4:	6013      	str	r3, [r2, #0]
}
 8001fb6:	bf00      	nop
 8001fb8:	371c      	adds	r7, #28
 8001fba:	46bd      	mov	sp, r7
 8001fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc0:	4770      	bx	lr
 8001fc2:	bf00      	nop
 8001fc4:	40028040 	.word	0x40028040
 8001fc8:	40028044 	.word	0x40028044

08001fcc <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8001fcc:	b480      	push	{r7}
 8001fce:	b085      	sub	sp, #20
 8001fd0:	af00      	add	r7, sp, #0
 8001fd2:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8001fd4:	2300      	movs	r3, #0
 8001fd6:	60fb      	str	r3, [r7, #12]
 8001fd8:	e03e      	b.n	8002058 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	68d9      	ldr	r1, [r3, #12]
 8001fde:	68fa      	ldr	r2, [r7, #12]
 8001fe0:	4613      	mov	r3, r2
 8001fe2:	009b      	lsls	r3, r3, #2
 8001fe4:	4413      	add	r3, r2
 8001fe6:	00db      	lsls	r3, r3, #3
 8001fe8:	440b      	add	r3, r1
 8001fea:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 8001fec:	68bb      	ldr	r3, [r7, #8]
 8001fee:	2200      	movs	r2, #0
 8001ff0:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8001ff2:	68bb      	ldr	r3, [r7, #8]
 8001ff4:	2200      	movs	r2, #0
 8001ff6:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 8001ff8:	68bb      	ldr	r3, [r7, #8]
 8001ffa:	2200      	movs	r2, #0
 8001ffc:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 8001ffe:	68bb      	ldr	r3, [r7, #8]
 8002000:	2200      	movs	r2, #0
 8002002:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8002004:	68b9      	ldr	r1, [r7, #8]
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	68fa      	ldr	r2, [r7, #12]
 800200a:	3206      	adds	r2, #6
 800200c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 8002010:	68bb      	ldr	r3, [r7, #8]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8002018:	68bb      	ldr	r3, [r7, #8]
 800201a:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	2b02      	cmp	r3, #2
 8002020:	d80c      	bhi.n	800203c <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	68d9      	ldr	r1, [r3, #12]
 8002026:	68fb      	ldr	r3, [r7, #12]
 8002028:	1c5a      	adds	r2, r3, #1
 800202a:	4613      	mov	r3, r2
 800202c:	009b      	lsls	r3, r3, #2
 800202e:	4413      	add	r3, r2
 8002030:	00db      	lsls	r3, r3, #3
 8002032:	440b      	add	r3, r1
 8002034:	461a      	mov	r2, r3
 8002036:	68bb      	ldr	r3, [r7, #8]
 8002038:	60da      	str	r2, [r3, #12]
 800203a:	e004      	b.n	8002046 <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	68db      	ldr	r3, [r3, #12]
 8002040:	461a      	mov	r2, r3
 8002042:	68bb      	ldr	r3, [r7, #8]
 8002044:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 8002046:	68bb      	ldr	r3, [r7, #8]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 800204e:	68bb      	ldr	r3, [r7, #8]
 8002050:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8002052:	68fb      	ldr	r3, [r7, #12]
 8002054:	3301      	adds	r3, #1
 8002056:	60fb      	str	r3, [r7, #12]
 8002058:	68fb      	ldr	r3, [r7, #12]
 800205a:	2b03      	cmp	r3, #3
 800205c:	d9bd      	bls.n	8001fda <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	2200      	movs	r2, #0
 8002062:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	68da      	ldr	r2, [r3, #12]
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002070:	611a      	str	r2, [r3, #16]
}
 8002072:	bf00      	nop
 8002074:	3714      	adds	r7, #20
 8002076:	46bd      	mov	sp, r7
 8002078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800207c:	4770      	bx	lr

0800207e <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 800207e:	b480      	push	{r7}
 8002080:	b085      	sub	sp, #20
 8002082:	af00      	add	r7, sp, #0
 8002084:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8002086:	2300      	movs	r3, #0
 8002088:	60fb      	str	r3, [r7, #12]
 800208a:	e046      	b.n	800211a <ETH_DMARxDescListInit+0x9c>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	6919      	ldr	r1, [r3, #16]
 8002090:	68fa      	ldr	r2, [r7, #12]
 8002092:	4613      	mov	r3, r2
 8002094:	009b      	lsls	r3, r3, #2
 8002096:	4413      	add	r3, r2
 8002098:	00db      	lsls	r3, r3, #3
 800209a:	440b      	add	r3, r1
 800209c:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 800209e:	68bb      	ldr	r3, [r7, #8]
 80020a0:	2200      	movs	r2, #0
 80020a2:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 80020a4:	68bb      	ldr	r3, [r7, #8]
 80020a6:	2200      	movs	r2, #0
 80020a8:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 80020aa:	68bb      	ldr	r3, [r7, #8]
 80020ac:	2200      	movs	r2, #0
 80020ae:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 80020b0:	68bb      	ldr	r3, [r7, #8]
 80020b2:	2200      	movs	r2, #0
 80020b4:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 80020b6:	68bb      	ldr	r3, [r7, #8]
 80020b8:	2200      	movs	r2, #0
 80020ba:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 80020bc:	68bb      	ldr	r3, [r7, #8]
 80020be:	2200      	movs	r2, #0
 80020c0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 80020c2:	68bb      	ldr	r3, [r7, #8]
 80020c4:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80020c8:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 80020ca:	68bb      	ldr	r3, [r7, #8]
 80020cc:	f44f 428c 	mov.w	r2, #17920	; 0x4600
 80020d0:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 80020d2:	68bb      	ldr	r3, [r7, #8]
 80020d4:	685b      	ldr	r3, [r3, #4]
 80020d6:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80020da:	68bb      	ldr	r3, [r7, #8]
 80020dc:	605a      	str	r2, [r3, #4]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 80020de:	68b9      	ldr	r1, [r7, #8]
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	68fa      	ldr	r2, [r7, #12]
 80020e4:	3212      	adds	r2, #18
 80020e6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 80020ea:	68fb      	ldr	r3, [r7, #12]
 80020ec:	2b02      	cmp	r3, #2
 80020ee:	d80c      	bhi.n	800210a <ETH_DMARxDescListInit+0x8c>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	6919      	ldr	r1, [r3, #16]
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	1c5a      	adds	r2, r3, #1
 80020f8:	4613      	mov	r3, r2
 80020fa:	009b      	lsls	r3, r3, #2
 80020fc:	4413      	add	r3, r2
 80020fe:	00db      	lsls	r3, r3, #3
 8002100:	440b      	add	r3, r1
 8002102:	461a      	mov	r2, r3
 8002104:	68bb      	ldr	r3, [r7, #8]
 8002106:	60da      	str	r2, [r3, #12]
 8002108:	e004      	b.n	8002114 <ETH_DMARxDescListInit+0x96>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	691b      	ldr	r3, [r3, #16]
 800210e:	461a      	mov	r2, r3
 8002110:	68bb      	ldr	r3, [r7, #8]
 8002112:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	3301      	adds	r3, #1
 8002118:	60fb      	str	r3, [r7, #12]
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	2b03      	cmp	r3, #3
 800211e:	d9b5      	bls.n	800208c <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	2200      	movs	r2, #0
 8002124:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	2200      	movs	r2, #0
 800212a:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	2200      	movs	r2, #0
 8002130:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	2200      	movs	r2, #0
 8002136:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	2200      	movs	r2, #0
 800213c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	691a      	ldr	r2, [r3, #16]
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800214a:	60da      	str	r2, [r3, #12]
}
 800214c:	bf00      	nop
 800214e:	3714      	adds	r7, #20
 8002150:	46bd      	mov	sp, r7
 8002152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002156:	4770      	bx	lr

08002158 <ETH_Prepare_Tx_Descriptors>:
  * @param  pTxConfig: Tx packet configuration
  * @param  ItMode: Enable or disable Tx EOT interrept
  * @retval Status
  */
static uint32_t ETH_Prepare_Tx_Descriptors(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig, uint32_t ItMode)
{
 8002158:	b480      	push	{r7}
 800215a:	b08d      	sub	sp, #52	; 0x34
 800215c:	af00      	add	r7, sp, #0
 800215e:	60f8      	str	r0, [r7, #12]
 8002160:	60b9      	str	r1, [r7, #8]
 8002162:	607a      	str	r2, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	3318      	adds	r3, #24
 8002168:	617b      	str	r3, [r7, #20]
  uint32_t descidx = dmatxdesclist->CurTxDesc;
 800216a:	697b      	ldr	r3, [r7, #20]
 800216c:	691b      	ldr	r3, [r3, #16]
 800216e:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t firstdescidx = dmatxdesclist->CurTxDesc;
 8002170:	697b      	ldr	r3, [r7, #20]
 8002172:	691b      	ldr	r3, [r3, #16]
 8002174:	613b      	str	r3, [r7, #16]
  uint32_t idx;
  uint32_t descnbr = 0;
 8002176:	2300      	movs	r3, #0
 8002178:	627b      	str	r3, [r7, #36]	; 0x24
  ETH_DMADescTypeDef *dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 800217a:	697b      	ldr	r3, [r7, #20]
 800217c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800217e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002182:	623b      	str	r3, [r7, #32]

  ETH_BufferTypeDef  *txbuffer = pTxConfig->TxBuffer;
 8002184:	68bb      	ldr	r3, [r7, #8]
 8002186:	689b      	ldr	r3, [r3, #8]
 8002188:	61fb      	str	r3, [r7, #28]
  uint32_t           bd_count = 0;
 800218a:	2300      	movs	r3, #0
 800218c:	61bb      	str	r3, [r7, #24]

  /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
  if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 800218e:	6a3b      	ldr	r3, [r7, #32]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002196:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800219a:	d007      	beq.n	80021ac <ETH_Prepare_Tx_Descriptors+0x54>
      || (dmatxdesclist->PacketAddress[descidx] != NULL))
 800219c:	697a      	ldr	r2, [r7, #20]
 800219e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80021a0:	3304      	adds	r3, #4
 80021a2:	009b      	lsls	r3, r3, #2
 80021a4:	4413      	add	r3, r2
 80021a6:	685b      	ldr	r3, [r3, #4]
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d001      	beq.n	80021b0 <ETH_Prepare_Tx_Descriptors+0x58>
  {
    return HAL_ETH_ERROR_BUSY;
 80021ac:	2302      	movs	r3, #2
 80021ae:	e103      	b.n	80023b8 <ETH_Prepare_Tx_Descriptors+0x260>
  }


  descnbr += 1U;
 80021b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021b2:	3301      	adds	r3, #1
 80021b4:	627b      	str	r3, [r7, #36]	; 0x24

  /* Set header or buffer 1 address */
  WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 80021b6:	69fb      	ldr	r3, [r7, #28]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	461a      	mov	r2, r3
 80021bc:	6a3b      	ldr	r3, [r7, #32]
 80021be:	609a      	str	r2, [r3, #8]

  /* Set header or buffer 1 Length */
  MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 80021c0:	6a3b      	ldr	r3, [r7, #32]
 80021c2:	685b      	ldr	r3, [r3, #4]
 80021c4:	f423 53ff 	bic.w	r3, r3, #8160	; 0x1fe0
 80021c8:	f023 031f 	bic.w	r3, r3, #31
 80021cc:	69fa      	ldr	r2, [r7, #28]
 80021ce:	6852      	ldr	r2, [r2, #4]
 80021d0:	431a      	orrs	r2, r3
 80021d2:	6a3b      	ldr	r3, [r7, #32]
 80021d4:	605a      	str	r2, [r3, #4]

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != 0U)
 80021d6:	68bb      	ldr	r3, [r7, #8]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	f003 0301 	and.w	r3, r3, #1
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d008      	beq.n	80021f4 <ETH_Prepare_Tx_Descriptors+0x9c>
  {
    MODIFY_REG(dmatxdesc->DESC0, ETH_DMATXDESC_CIC, pTxConfig->ChecksumCtrl);
 80021e2:	6a3b      	ldr	r3, [r7, #32]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80021ea:	68bb      	ldr	r3, [r7, #8]
 80021ec:	695b      	ldr	r3, [r3, #20]
 80021ee:	431a      	orrs	r2, r3
 80021f0:	6a3b      	ldr	r3, [r7, #32]
 80021f2:	601a      	str	r2, [r3, #0]
  }

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CRCPAD) != 0U)
 80021f4:	68bb      	ldr	r3, [r7, #8]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	f003 0320 	and.w	r3, r3, #32
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d008      	beq.n	8002212 <ETH_Prepare_Tx_Descriptors+0xba>
  {
    MODIFY_REG(dmatxdesc->DESC0, ETH_CRC_PAD_DISABLE, pTxConfig->CRCPadCtrl);
 8002200:	6a3b      	ldr	r3, [r7, #32]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002208:	68bb      	ldr	r3, [r7, #8]
 800220a:	691b      	ldr	r3, [r3, #16]
 800220c:	431a      	orrs	r2, r3
 800220e:	6a3b      	ldr	r3, [r7, #32]
 8002210:	601a      	str	r2, [r3, #0]
  }


  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != 0U)
 8002212:	68bb      	ldr	r3, [r7, #8]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	f003 0304 	and.w	r3, r3, #4
 800221a:	2b00      	cmp	r3, #0
 800221c:	d005      	beq.n	800222a <ETH_Prepare_Tx_Descriptors+0xd2>
  {
    /* Set Vlan Type */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_VF);
 800221e:	6a3b      	ldr	r3, [r7, #32]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8002226:	6a3b      	ldr	r3, [r7, #32]
 8002228:	601a      	str	r2, [r3, #0]
  }

  /* Mark it as First Descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 800222a:	6a3b      	ldr	r3, [r7, #32]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8002232:	6a3b      	ldr	r3, [r7, #32]
 8002234:	601a      	str	r2, [r3, #0]
  __ASM volatile ("dmb 0xF":::"memory");
 8002236:	f3bf 8f5f 	dmb	sy
}
 800223a:	bf00      	nop

  /* Ensure rest of descriptor is written to RAM before the OWN bit */
  __DMB();
  /* set OWN bit of FIRST descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 800223c:	6a3b      	ldr	r3, [r7, #32]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002244:	6a3b      	ldr	r3, [r7, #32]
 8002246:	601a      	str	r2, [r3, #0]

  /* only if the packet is split into more than one descriptors > 1 */
  while (txbuffer->next != NULL)
 8002248:	e084      	b.n	8002354 <ETH_Prepare_Tx_Descriptors+0x1fc>
  {
    /* Clear the LD bit of previous descriptor */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 800224a:	6a3b      	ldr	r3, [r7, #32]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8002252:	6a3b      	ldr	r3, [r7, #32]
 8002254:	601a      	str	r2, [r3, #0]
    if (ItMode != ((uint32_t)RESET))
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	2b00      	cmp	r3, #0
 800225a:	d006      	beq.n	800226a <ETH_Prepare_Tx_Descriptors+0x112>
    {
      /* Set Interrupt on completion bit */
      SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 800225c:	6a3b      	ldr	r3, [r7, #32]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8002264:	6a3b      	ldr	r3, [r7, #32]
 8002266:	601a      	str	r2, [r3, #0]
 8002268:	e005      	b.n	8002276 <ETH_Prepare_Tx_Descriptors+0x11e>
    }
    else
    {
      /* Clear Interrupt on completion bit */
      CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 800226a:	6a3b      	ldr	r3, [r7, #32]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8002272:	6a3b      	ldr	r3, [r7, #32]
 8002274:	601a      	str	r2, [r3, #0]
    }
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 8002276:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002278:	3301      	adds	r3, #1
 800227a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800227c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800227e:	2b03      	cmp	r3, #3
 8002280:	d902      	bls.n	8002288 <ETH_Prepare_Tx_Descriptors+0x130>
 8002282:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002284:	3b04      	subs	r3, #4
 8002286:	62fb      	str	r3, [r7, #44]	; 0x2c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8002288:	697b      	ldr	r3, [r7, #20]
 800228a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800228c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002290:	623b      	str	r3, [r7, #32]

    /* Clear the FD bit of new Descriptor */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 8002292:	6a3b      	ldr	r3, [r7, #32]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800229a:	6a3b      	ldr	r3, [r7, #32]
 800229c:	601a      	str	r2, [r3, #0]

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 800229e:	6a3b      	ldr	r3, [r7, #32]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80022a6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80022aa:	d007      	beq.n	80022bc <ETH_Prepare_Tx_Descriptors+0x164>
        || (dmatxdesclist->PacketAddress[descidx] != NULL))
 80022ac:	697a      	ldr	r2, [r7, #20]
 80022ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80022b0:	3304      	adds	r3, #4
 80022b2:	009b      	lsls	r3, r3, #2
 80022b4:	4413      	add	r3, r2
 80022b6:	685b      	ldr	r3, [r3, #4]
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d029      	beq.n	8002310 <ETH_Prepare_Tx_Descriptors+0x1b8>
    {
      descidx = firstdescidx;
 80022bc:	693b      	ldr	r3, [r7, #16]
 80022be:	62fb      	str	r3, [r7, #44]	; 0x2c
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 80022c0:	697b      	ldr	r3, [r7, #20]
 80022c2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80022c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80022c8:	623b      	str	r3, [r7, #32]

      /* clear previous desc own bit */
      for (idx = 0; idx < descnbr; idx ++)
 80022ca:	2300      	movs	r3, #0
 80022cc:	62bb      	str	r3, [r7, #40]	; 0x28
 80022ce:	e019      	b.n	8002304 <ETH_Prepare_Tx_Descriptors+0x1ac>
  __ASM volatile ("dmb 0xF":::"memory");
 80022d0:	f3bf 8f5f 	dmb	sy
}
 80022d4:	bf00      	nop
      {
        /* Ensure rest of descriptor is written to RAM before the OWN bit */
        __DMB();

        CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 80022d6:	6a3b      	ldr	r3, [r7, #32]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80022de:	6a3b      	ldr	r3, [r7, #32]
 80022e0:	601a      	str	r2, [r3, #0]

        /* Increment current tx descriptor index */
        INCR_TX_DESC_INDEX(descidx, 1U);
 80022e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80022e4:	3301      	adds	r3, #1
 80022e6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80022e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80022ea:	2b03      	cmp	r3, #3
 80022ec:	d902      	bls.n	80022f4 <ETH_Prepare_Tx_Descriptors+0x19c>
 80022ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80022f0:	3b04      	subs	r3, #4
 80022f2:	62fb      	str	r3, [r7, #44]	; 0x2c
        /* Get current descriptor address */
        dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 80022f4:	697b      	ldr	r3, [r7, #20]
 80022f6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80022f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80022fc:	623b      	str	r3, [r7, #32]
      for (idx = 0; idx < descnbr; idx ++)
 80022fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002300:	3301      	adds	r3, #1
 8002302:	62bb      	str	r3, [r7, #40]	; 0x28
 8002304:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002306:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002308:	429a      	cmp	r2, r3
 800230a:	d3e1      	bcc.n	80022d0 <ETH_Prepare_Tx_Descriptors+0x178>
      }

      return HAL_ETH_ERROR_BUSY;
 800230c:	2302      	movs	r3, #2
 800230e:	e053      	b.n	80023b8 <ETH_Prepare_Tx_Descriptors+0x260>
    }

    descnbr += 1U;
 8002310:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002312:	3301      	adds	r3, #1
 8002314:	627b      	str	r3, [r7, #36]	; 0x24

    /* Get the next Tx buffer in the list */
    txbuffer = txbuffer->next;
 8002316:	69fb      	ldr	r3, [r7, #28]
 8002318:	689b      	ldr	r3, [r3, #8]
 800231a:	61fb      	str	r3, [r7, #28]

    /* Set header or buffer 1 address */
    WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 800231c:	69fb      	ldr	r3, [r7, #28]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	461a      	mov	r2, r3
 8002322:	6a3b      	ldr	r3, [r7, #32]
 8002324:	609a      	str	r2, [r3, #8]

    /* Set header or buffer 1 Length */
    MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 8002326:	6a3b      	ldr	r3, [r7, #32]
 8002328:	685b      	ldr	r3, [r3, #4]
 800232a:	f423 53ff 	bic.w	r3, r3, #8160	; 0x1fe0
 800232e:	f023 031f 	bic.w	r3, r3, #31
 8002332:	69fa      	ldr	r2, [r7, #28]
 8002334:	6852      	ldr	r2, [r2, #4]
 8002336:	431a      	orrs	r2, r3
 8002338:	6a3b      	ldr	r3, [r7, #32]
 800233a:	605a      	str	r2, [r3, #4]

    bd_count += 1U;
 800233c:	69bb      	ldr	r3, [r7, #24]
 800233e:	3301      	adds	r3, #1
 8002340:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("dmb 0xF":::"memory");
 8002342:	f3bf 8f5f 	dmb	sy
}
 8002346:	bf00      	nop

    /* Ensure rest of descriptor is written to RAM before the OWN bit */
    __DMB();
    /* Set Own bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 8002348:	6a3b      	ldr	r3, [r7, #32]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002350:	6a3b      	ldr	r3, [r7, #32]
 8002352:	601a      	str	r2, [r3, #0]
  while (txbuffer->next != NULL)
 8002354:	69fb      	ldr	r3, [r7, #28]
 8002356:	689b      	ldr	r3, [r3, #8]
 8002358:	2b00      	cmp	r3, #0
 800235a:	f47f af76 	bne.w	800224a <ETH_Prepare_Tx_Descriptors+0xf2>
  }

  if (ItMode != ((uint32_t)RESET))
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	2b00      	cmp	r3, #0
 8002362:	d006      	beq.n	8002372 <ETH_Prepare_Tx_Descriptors+0x21a>
  {
    /* Set Interrupt on completion bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8002364:	6a3b      	ldr	r3, [r7, #32]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800236c:	6a3b      	ldr	r3, [r7, #32]
 800236e:	601a      	str	r2, [r3, #0]
 8002370:	e005      	b.n	800237e <ETH_Prepare_Tx_Descriptors+0x226>
  }
  else
  {
    /* Clear Interrupt on completion bit */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8002372:	6a3b      	ldr	r3, [r7, #32]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 800237a:	6a3b      	ldr	r3, [r7, #32]
 800237c:	601a      	str	r2, [r3, #0]
  }

  /* Mark it as LAST descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 800237e:	6a3b      	ldr	r3, [r7, #32]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8002386:	6a3b      	ldr	r3, [r7, #32]
 8002388:	601a      	str	r2, [r3, #0]
  /* Save the current packet address to expose it to the application */
  dmatxdesclist->PacketAddress[descidx] = dmatxdesclist->CurrentPacketAddress;
 800238a:	697b      	ldr	r3, [r7, #20]
 800238c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800238e:	6979      	ldr	r1, [r7, #20]
 8002390:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002392:	3304      	adds	r3, #4
 8002394:	009b      	lsls	r3, r3, #2
 8002396:	440b      	add	r3, r1
 8002398:	605a      	str	r2, [r3, #4]

  dmatxdesclist->CurTxDesc = descidx;
 800239a:	697b      	ldr	r3, [r7, #20]
 800239c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800239e:	611a      	str	r2, [r3, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 80023a0:	b672      	cpsid	i
}
 80023a2:	bf00      	nop

  /* disable the interrupt */
  __disable_irq();

  dmatxdesclist->BuffersInUse += bd_count + 1U;
 80023a4:	697b      	ldr	r3, [r7, #20]
 80023a6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80023a8:	69bb      	ldr	r3, [r7, #24]
 80023aa:	4413      	add	r3, r2
 80023ac:	1c5a      	adds	r2, r3, #1
 80023ae:	697b      	ldr	r3, [r7, #20]
 80023b0:	629a      	str	r2, [r3, #40]	; 0x28
  __ASM volatile ("cpsie i" : : : "memory");
 80023b2:	b662      	cpsie	i
}
 80023b4:	bf00      	nop
  /* Enable interrupts back */
  __enable_irq();


  /* Return function status */
  return HAL_ETH_ERROR_NONE;
 80023b6:	2300      	movs	r3, #0
}
 80023b8:	4618      	mov	r0, r3
 80023ba:	3734      	adds	r7, #52	; 0x34
 80023bc:	46bd      	mov	sp, r7
 80023be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c2:	4770      	bx	lr

080023c4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80023c4:	b480      	push	{r7}
 80023c6:	b089      	sub	sp, #36	; 0x24
 80023c8:	af00      	add	r7, sp, #0
 80023ca:	6078      	str	r0, [r7, #4]
 80023cc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80023ce:	2300      	movs	r3, #0
 80023d0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80023d2:	2300      	movs	r3, #0
 80023d4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80023d6:	2300      	movs	r3, #0
 80023d8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80023da:	2300      	movs	r3, #0
 80023dc:	61fb      	str	r3, [r7, #28]
 80023de:	e177      	b.n	80026d0 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80023e0:	2201      	movs	r2, #1
 80023e2:	69fb      	ldr	r3, [r7, #28]
 80023e4:	fa02 f303 	lsl.w	r3, r2, r3
 80023e8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80023ea:	683b      	ldr	r3, [r7, #0]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	697a      	ldr	r2, [r7, #20]
 80023f0:	4013      	ands	r3, r2
 80023f2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80023f4:	693a      	ldr	r2, [r7, #16]
 80023f6:	697b      	ldr	r3, [r7, #20]
 80023f8:	429a      	cmp	r2, r3
 80023fa:	f040 8166 	bne.w	80026ca <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80023fe:	683b      	ldr	r3, [r7, #0]
 8002400:	685b      	ldr	r3, [r3, #4]
 8002402:	f003 0303 	and.w	r3, r3, #3
 8002406:	2b01      	cmp	r3, #1
 8002408:	d005      	beq.n	8002416 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800240a:	683b      	ldr	r3, [r7, #0]
 800240c:	685b      	ldr	r3, [r3, #4]
 800240e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002412:	2b02      	cmp	r3, #2
 8002414:	d130      	bne.n	8002478 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	689b      	ldr	r3, [r3, #8]
 800241a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800241c:	69fb      	ldr	r3, [r7, #28]
 800241e:	005b      	lsls	r3, r3, #1
 8002420:	2203      	movs	r2, #3
 8002422:	fa02 f303 	lsl.w	r3, r2, r3
 8002426:	43db      	mvns	r3, r3
 8002428:	69ba      	ldr	r2, [r7, #24]
 800242a:	4013      	ands	r3, r2
 800242c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800242e:	683b      	ldr	r3, [r7, #0]
 8002430:	68da      	ldr	r2, [r3, #12]
 8002432:	69fb      	ldr	r3, [r7, #28]
 8002434:	005b      	lsls	r3, r3, #1
 8002436:	fa02 f303 	lsl.w	r3, r2, r3
 800243a:	69ba      	ldr	r2, [r7, #24]
 800243c:	4313      	orrs	r3, r2
 800243e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	69ba      	ldr	r2, [r7, #24]
 8002444:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	685b      	ldr	r3, [r3, #4]
 800244a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800244c:	2201      	movs	r2, #1
 800244e:	69fb      	ldr	r3, [r7, #28]
 8002450:	fa02 f303 	lsl.w	r3, r2, r3
 8002454:	43db      	mvns	r3, r3
 8002456:	69ba      	ldr	r2, [r7, #24]
 8002458:	4013      	ands	r3, r2
 800245a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800245c:	683b      	ldr	r3, [r7, #0]
 800245e:	685b      	ldr	r3, [r3, #4]
 8002460:	091b      	lsrs	r3, r3, #4
 8002462:	f003 0201 	and.w	r2, r3, #1
 8002466:	69fb      	ldr	r3, [r7, #28]
 8002468:	fa02 f303 	lsl.w	r3, r2, r3
 800246c:	69ba      	ldr	r2, [r7, #24]
 800246e:	4313      	orrs	r3, r2
 8002470:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	69ba      	ldr	r2, [r7, #24]
 8002476:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002478:	683b      	ldr	r3, [r7, #0]
 800247a:	685b      	ldr	r3, [r3, #4]
 800247c:	f003 0303 	and.w	r3, r3, #3
 8002480:	2b03      	cmp	r3, #3
 8002482:	d017      	beq.n	80024b4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	68db      	ldr	r3, [r3, #12]
 8002488:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800248a:	69fb      	ldr	r3, [r7, #28]
 800248c:	005b      	lsls	r3, r3, #1
 800248e:	2203      	movs	r2, #3
 8002490:	fa02 f303 	lsl.w	r3, r2, r3
 8002494:	43db      	mvns	r3, r3
 8002496:	69ba      	ldr	r2, [r7, #24]
 8002498:	4013      	ands	r3, r2
 800249a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800249c:	683b      	ldr	r3, [r7, #0]
 800249e:	689a      	ldr	r2, [r3, #8]
 80024a0:	69fb      	ldr	r3, [r7, #28]
 80024a2:	005b      	lsls	r3, r3, #1
 80024a4:	fa02 f303 	lsl.w	r3, r2, r3
 80024a8:	69ba      	ldr	r2, [r7, #24]
 80024aa:	4313      	orrs	r3, r2
 80024ac:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	69ba      	ldr	r2, [r7, #24]
 80024b2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80024b4:	683b      	ldr	r3, [r7, #0]
 80024b6:	685b      	ldr	r3, [r3, #4]
 80024b8:	f003 0303 	and.w	r3, r3, #3
 80024bc:	2b02      	cmp	r3, #2
 80024be:	d123      	bne.n	8002508 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80024c0:	69fb      	ldr	r3, [r7, #28]
 80024c2:	08da      	lsrs	r2, r3, #3
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	3208      	adds	r2, #8
 80024c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80024cc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80024ce:	69fb      	ldr	r3, [r7, #28]
 80024d0:	f003 0307 	and.w	r3, r3, #7
 80024d4:	009b      	lsls	r3, r3, #2
 80024d6:	220f      	movs	r2, #15
 80024d8:	fa02 f303 	lsl.w	r3, r2, r3
 80024dc:	43db      	mvns	r3, r3
 80024de:	69ba      	ldr	r2, [r7, #24]
 80024e0:	4013      	ands	r3, r2
 80024e2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80024e4:	683b      	ldr	r3, [r7, #0]
 80024e6:	691a      	ldr	r2, [r3, #16]
 80024e8:	69fb      	ldr	r3, [r7, #28]
 80024ea:	f003 0307 	and.w	r3, r3, #7
 80024ee:	009b      	lsls	r3, r3, #2
 80024f0:	fa02 f303 	lsl.w	r3, r2, r3
 80024f4:	69ba      	ldr	r2, [r7, #24]
 80024f6:	4313      	orrs	r3, r2
 80024f8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80024fa:	69fb      	ldr	r3, [r7, #28]
 80024fc:	08da      	lsrs	r2, r3, #3
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	3208      	adds	r2, #8
 8002502:	69b9      	ldr	r1, [r7, #24]
 8002504:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800250e:	69fb      	ldr	r3, [r7, #28]
 8002510:	005b      	lsls	r3, r3, #1
 8002512:	2203      	movs	r2, #3
 8002514:	fa02 f303 	lsl.w	r3, r2, r3
 8002518:	43db      	mvns	r3, r3
 800251a:	69ba      	ldr	r2, [r7, #24]
 800251c:	4013      	ands	r3, r2
 800251e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002520:	683b      	ldr	r3, [r7, #0]
 8002522:	685b      	ldr	r3, [r3, #4]
 8002524:	f003 0203 	and.w	r2, r3, #3
 8002528:	69fb      	ldr	r3, [r7, #28]
 800252a:	005b      	lsls	r3, r3, #1
 800252c:	fa02 f303 	lsl.w	r3, r2, r3
 8002530:	69ba      	ldr	r2, [r7, #24]
 8002532:	4313      	orrs	r3, r2
 8002534:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	69ba      	ldr	r2, [r7, #24]
 800253a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800253c:	683b      	ldr	r3, [r7, #0]
 800253e:	685b      	ldr	r3, [r3, #4]
 8002540:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002544:	2b00      	cmp	r3, #0
 8002546:	f000 80c0 	beq.w	80026ca <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800254a:	2300      	movs	r3, #0
 800254c:	60fb      	str	r3, [r7, #12]
 800254e:	4b66      	ldr	r3, [pc, #408]	; (80026e8 <HAL_GPIO_Init+0x324>)
 8002550:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002552:	4a65      	ldr	r2, [pc, #404]	; (80026e8 <HAL_GPIO_Init+0x324>)
 8002554:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002558:	6453      	str	r3, [r2, #68]	; 0x44
 800255a:	4b63      	ldr	r3, [pc, #396]	; (80026e8 <HAL_GPIO_Init+0x324>)
 800255c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800255e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002562:	60fb      	str	r3, [r7, #12]
 8002564:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002566:	4a61      	ldr	r2, [pc, #388]	; (80026ec <HAL_GPIO_Init+0x328>)
 8002568:	69fb      	ldr	r3, [r7, #28]
 800256a:	089b      	lsrs	r3, r3, #2
 800256c:	3302      	adds	r3, #2
 800256e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002572:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002574:	69fb      	ldr	r3, [r7, #28]
 8002576:	f003 0303 	and.w	r3, r3, #3
 800257a:	009b      	lsls	r3, r3, #2
 800257c:	220f      	movs	r2, #15
 800257e:	fa02 f303 	lsl.w	r3, r2, r3
 8002582:	43db      	mvns	r3, r3
 8002584:	69ba      	ldr	r2, [r7, #24]
 8002586:	4013      	ands	r3, r2
 8002588:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	4a58      	ldr	r2, [pc, #352]	; (80026f0 <HAL_GPIO_Init+0x32c>)
 800258e:	4293      	cmp	r3, r2
 8002590:	d037      	beq.n	8002602 <HAL_GPIO_Init+0x23e>
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	4a57      	ldr	r2, [pc, #348]	; (80026f4 <HAL_GPIO_Init+0x330>)
 8002596:	4293      	cmp	r3, r2
 8002598:	d031      	beq.n	80025fe <HAL_GPIO_Init+0x23a>
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	4a56      	ldr	r2, [pc, #344]	; (80026f8 <HAL_GPIO_Init+0x334>)
 800259e:	4293      	cmp	r3, r2
 80025a0:	d02b      	beq.n	80025fa <HAL_GPIO_Init+0x236>
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	4a55      	ldr	r2, [pc, #340]	; (80026fc <HAL_GPIO_Init+0x338>)
 80025a6:	4293      	cmp	r3, r2
 80025a8:	d025      	beq.n	80025f6 <HAL_GPIO_Init+0x232>
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	4a54      	ldr	r2, [pc, #336]	; (8002700 <HAL_GPIO_Init+0x33c>)
 80025ae:	4293      	cmp	r3, r2
 80025b0:	d01f      	beq.n	80025f2 <HAL_GPIO_Init+0x22e>
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	4a53      	ldr	r2, [pc, #332]	; (8002704 <HAL_GPIO_Init+0x340>)
 80025b6:	4293      	cmp	r3, r2
 80025b8:	d019      	beq.n	80025ee <HAL_GPIO_Init+0x22a>
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	4a52      	ldr	r2, [pc, #328]	; (8002708 <HAL_GPIO_Init+0x344>)
 80025be:	4293      	cmp	r3, r2
 80025c0:	d013      	beq.n	80025ea <HAL_GPIO_Init+0x226>
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	4a51      	ldr	r2, [pc, #324]	; (800270c <HAL_GPIO_Init+0x348>)
 80025c6:	4293      	cmp	r3, r2
 80025c8:	d00d      	beq.n	80025e6 <HAL_GPIO_Init+0x222>
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	4a50      	ldr	r2, [pc, #320]	; (8002710 <HAL_GPIO_Init+0x34c>)
 80025ce:	4293      	cmp	r3, r2
 80025d0:	d007      	beq.n	80025e2 <HAL_GPIO_Init+0x21e>
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	4a4f      	ldr	r2, [pc, #316]	; (8002714 <HAL_GPIO_Init+0x350>)
 80025d6:	4293      	cmp	r3, r2
 80025d8:	d101      	bne.n	80025de <HAL_GPIO_Init+0x21a>
 80025da:	2309      	movs	r3, #9
 80025dc:	e012      	b.n	8002604 <HAL_GPIO_Init+0x240>
 80025de:	230a      	movs	r3, #10
 80025e0:	e010      	b.n	8002604 <HAL_GPIO_Init+0x240>
 80025e2:	2308      	movs	r3, #8
 80025e4:	e00e      	b.n	8002604 <HAL_GPIO_Init+0x240>
 80025e6:	2307      	movs	r3, #7
 80025e8:	e00c      	b.n	8002604 <HAL_GPIO_Init+0x240>
 80025ea:	2306      	movs	r3, #6
 80025ec:	e00a      	b.n	8002604 <HAL_GPIO_Init+0x240>
 80025ee:	2305      	movs	r3, #5
 80025f0:	e008      	b.n	8002604 <HAL_GPIO_Init+0x240>
 80025f2:	2304      	movs	r3, #4
 80025f4:	e006      	b.n	8002604 <HAL_GPIO_Init+0x240>
 80025f6:	2303      	movs	r3, #3
 80025f8:	e004      	b.n	8002604 <HAL_GPIO_Init+0x240>
 80025fa:	2302      	movs	r3, #2
 80025fc:	e002      	b.n	8002604 <HAL_GPIO_Init+0x240>
 80025fe:	2301      	movs	r3, #1
 8002600:	e000      	b.n	8002604 <HAL_GPIO_Init+0x240>
 8002602:	2300      	movs	r3, #0
 8002604:	69fa      	ldr	r2, [r7, #28]
 8002606:	f002 0203 	and.w	r2, r2, #3
 800260a:	0092      	lsls	r2, r2, #2
 800260c:	4093      	lsls	r3, r2
 800260e:	69ba      	ldr	r2, [r7, #24]
 8002610:	4313      	orrs	r3, r2
 8002612:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002614:	4935      	ldr	r1, [pc, #212]	; (80026ec <HAL_GPIO_Init+0x328>)
 8002616:	69fb      	ldr	r3, [r7, #28]
 8002618:	089b      	lsrs	r3, r3, #2
 800261a:	3302      	adds	r3, #2
 800261c:	69ba      	ldr	r2, [r7, #24]
 800261e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002622:	4b3d      	ldr	r3, [pc, #244]	; (8002718 <HAL_GPIO_Init+0x354>)
 8002624:	689b      	ldr	r3, [r3, #8]
 8002626:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002628:	693b      	ldr	r3, [r7, #16]
 800262a:	43db      	mvns	r3, r3
 800262c:	69ba      	ldr	r2, [r7, #24]
 800262e:	4013      	ands	r3, r2
 8002630:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002632:	683b      	ldr	r3, [r7, #0]
 8002634:	685b      	ldr	r3, [r3, #4]
 8002636:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800263a:	2b00      	cmp	r3, #0
 800263c:	d003      	beq.n	8002646 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800263e:	69ba      	ldr	r2, [r7, #24]
 8002640:	693b      	ldr	r3, [r7, #16]
 8002642:	4313      	orrs	r3, r2
 8002644:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002646:	4a34      	ldr	r2, [pc, #208]	; (8002718 <HAL_GPIO_Init+0x354>)
 8002648:	69bb      	ldr	r3, [r7, #24]
 800264a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800264c:	4b32      	ldr	r3, [pc, #200]	; (8002718 <HAL_GPIO_Init+0x354>)
 800264e:	68db      	ldr	r3, [r3, #12]
 8002650:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002652:	693b      	ldr	r3, [r7, #16]
 8002654:	43db      	mvns	r3, r3
 8002656:	69ba      	ldr	r2, [r7, #24]
 8002658:	4013      	ands	r3, r2
 800265a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800265c:	683b      	ldr	r3, [r7, #0]
 800265e:	685b      	ldr	r3, [r3, #4]
 8002660:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002664:	2b00      	cmp	r3, #0
 8002666:	d003      	beq.n	8002670 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002668:	69ba      	ldr	r2, [r7, #24]
 800266a:	693b      	ldr	r3, [r7, #16]
 800266c:	4313      	orrs	r3, r2
 800266e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002670:	4a29      	ldr	r2, [pc, #164]	; (8002718 <HAL_GPIO_Init+0x354>)
 8002672:	69bb      	ldr	r3, [r7, #24]
 8002674:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002676:	4b28      	ldr	r3, [pc, #160]	; (8002718 <HAL_GPIO_Init+0x354>)
 8002678:	685b      	ldr	r3, [r3, #4]
 800267a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800267c:	693b      	ldr	r3, [r7, #16]
 800267e:	43db      	mvns	r3, r3
 8002680:	69ba      	ldr	r2, [r7, #24]
 8002682:	4013      	ands	r3, r2
 8002684:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002686:	683b      	ldr	r3, [r7, #0]
 8002688:	685b      	ldr	r3, [r3, #4]
 800268a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800268e:	2b00      	cmp	r3, #0
 8002690:	d003      	beq.n	800269a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002692:	69ba      	ldr	r2, [r7, #24]
 8002694:	693b      	ldr	r3, [r7, #16]
 8002696:	4313      	orrs	r3, r2
 8002698:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800269a:	4a1f      	ldr	r2, [pc, #124]	; (8002718 <HAL_GPIO_Init+0x354>)
 800269c:	69bb      	ldr	r3, [r7, #24]
 800269e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80026a0:	4b1d      	ldr	r3, [pc, #116]	; (8002718 <HAL_GPIO_Init+0x354>)
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80026a6:	693b      	ldr	r3, [r7, #16]
 80026a8:	43db      	mvns	r3, r3
 80026aa:	69ba      	ldr	r2, [r7, #24]
 80026ac:	4013      	ands	r3, r2
 80026ae:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80026b0:	683b      	ldr	r3, [r7, #0]
 80026b2:	685b      	ldr	r3, [r3, #4]
 80026b4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d003      	beq.n	80026c4 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80026bc:	69ba      	ldr	r2, [r7, #24]
 80026be:	693b      	ldr	r3, [r7, #16]
 80026c0:	4313      	orrs	r3, r2
 80026c2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80026c4:	4a14      	ldr	r2, [pc, #80]	; (8002718 <HAL_GPIO_Init+0x354>)
 80026c6:	69bb      	ldr	r3, [r7, #24]
 80026c8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80026ca:	69fb      	ldr	r3, [r7, #28]
 80026cc:	3301      	adds	r3, #1
 80026ce:	61fb      	str	r3, [r7, #28]
 80026d0:	69fb      	ldr	r3, [r7, #28]
 80026d2:	2b0f      	cmp	r3, #15
 80026d4:	f67f ae84 	bls.w	80023e0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80026d8:	bf00      	nop
 80026da:	bf00      	nop
 80026dc:	3724      	adds	r7, #36	; 0x24
 80026de:	46bd      	mov	sp, r7
 80026e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026e4:	4770      	bx	lr
 80026e6:	bf00      	nop
 80026e8:	40023800 	.word	0x40023800
 80026ec:	40013800 	.word	0x40013800
 80026f0:	40020000 	.word	0x40020000
 80026f4:	40020400 	.word	0x40020400
 80026f8:	40020800 	.word	0x40020800
 80026fc:	40020c00 	.word	0x40020c00
 8002700:	40021000 	.word	0x40021000
 8002704:	40021400 	.word	0x40021400
 8002708:	40021800 	.word	0x40021800
 800270c:	40021c00 	.word	0x40021c00
 8002710:	40022000 	.word	0x40022000
 8002714:	40022400 	.word	0x40022400
 8002718:	40013c00 	.word	0x40013c00

0800271c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800271c:	b480      	push	{r7}
 800271e:	b083      	sub	sp, #12
 8002720:	af00      	add	r7, sp, #0
 8002722:	6078      	str	r0, [r7, #4]
 8002724:	460b      	mov	r3, r1
 8002726:	807b      	strh	r3, [r7, #2]
 8002728:	4613      	mov	r3, r2
 800272a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800272c:	787b      	ldrb	r3, [r7, #1]
 800272e:	2b00      	cmp	r3, #0
 8002730:	d003      	beq.n	800273a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002732:	887a      	ldrh	r2, [r7, #2]
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002738:	e003      	b.n	8002742 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800273a:	887b      	ldrh	r3, [r7, #2]
 800273c:	041a      	lsls	r2, r3, #16
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	619a      	str	r2, [r3, #24]
}
 8002742:	bf00      	nop
 8002744:	370c      	adds	r7, #12
 8002746:	46bd      	mov	sp, r7
 8002748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800274c:	4770      	bx	lr
	...

08002750 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002750:	b580      	push	{r7, lr}
 8002752:	b086      	sub	sp, #24
 8002754:	af00      	add	r7, sp, #0
 8002756:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	2b00      	cmp	r3, #0
 800275c:	d101      	bne.n	8002762 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800275e:	2301      	movs	r3, #1
 8002760:	e267      	b.n	8002c32 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	f003 0301 	and.w	r3, r3, #1
 800276a:	2b00      	cmp	r3, #0
 800276c:	d075      	beq.n	800285a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800276e:	4b88      	ldr	r3, [pc, #544]	; (8002990 <HAL_RCC_OscConfig+0x240>)
 8002770:	689b      	ldr	r3, [r3, #8]
 8002772:	f003 030c 	and.w	r3, r3, #12
 8002776:	2b04      	cmp	r3, #4
 8002778:	d00c      	beq.n	8002794 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800277a:	4b85      	ldr	r3, [pc, #532]	; (8002990 <HAL_RCC_OscConfig+0x240>)
 800277c:	689b      	ldr	r3, [r3, #8]
 800277e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002782:	2b08      	cmp	r3, #8
 8002784:	d112      	bne.n	80027ac <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002786:	4b82      	ldr	r3, [pc, #520]	; (8002990 <HAL_RCC_OscConfig+0x240>)
 8002788:	685b      	ldr	r3, [r3, #4]
 800278a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800278e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002792:	d10b      	bne.n	80027ac <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002794:	4b7e      	ldr	r3, [pc, #504]	; (8002990 <HAL_RCC_OscConfig+0x240>)
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800279c:	2b00      	cmp	r3, #0
 800279e:	d05b      	beq.n	8002858 <HAL_RCC_OscConfig+0x108>
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	685b      	ldr	r3, [r3, #4]
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d157      	bne.n	8002858 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80027a8:	2301      	movs	r3, #1
 80027aa:	e242      	b.n	8002c32 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	685b      	ldr	r3, [r3, #4]
 80027b0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80027b4:	d106      	bne.n	80027c4 <HAL_RCC_OscConfig+0x74>
 80027b6:	4b76      	ldr	r3, [pc, #472]	; (8002990 <HAL_RCC_OscConfig+0x240>)
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	4a75      	ldr	r2, [pc, #468]	; (8002990 <HAL_RCC_OscConfig+0x240>)
 80027bc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80027c0:	6013      	str	r3, [r2, #0]
 80027c2:	e01d      	b.n	8002800 <HAL_RCC_OscConfig+0xb0>
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	685b      	ldr	r3, [r3, #4]
 80027c8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80027cc:	d10c      	bne.n	80027e8 <HAL_RCC_OscConfig+0x98>
 80027ce:	4b70      	ldr	r3, [pc, #448]	; (8002990 <HAL_RCC_OscConfig+0x240>)
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	4a6f      	ldr	r2, [pc, #444]	; (8002990 <HAL_RCC_OscConfig+0x240>)
 80027d4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80027d8:	6013      	str	r3, [r2, #0]
 80027da:	4b6d      	ldr	r3, [pc, #436]	; (8002990 <HAL_RCC_OscConfig+0x240>)
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	4a6c      	ldr	r2, [pc, #432]	; (8002990 <HAL_RCC_OscConfig+0x240>)
 80027e0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80027e4:	6013      	str	r3, [r2, #0]
 80027e6:	e00b      	b.n	8002800 <HAL_RCC_OscConfig+0xb0>
 80027e8:	4b69      	ldr	r3, [pc, #420]	; (8002990 <HAL_RCC_OscConfig+0x240>)
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	4a68      	ldr	r2, [pc, #416]	; (8002990 <HAL_RCC_OscConfig+0x240>)
 80027ee:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80027f2:	6013      	str	r3, [r2, #0]
 80027f4:	4b66      	ldr	r3, [pc, #408]	; (8002990 <HAL_RCC_OscConfig+0x240>)
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	4a65      	ldr	r2, [pc, #404]	; (8002990 <HAL_RCC_OscConfig+0x240>)
 80027fa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80027fe:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	685b      	ldr	r3, [r3, #4]
 8002804:	2b00      	cmp	r3, #0
 8002806:	d013      	beq.n	8002830 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002808:	f7fe fbd0 	bl	8000fac <HAL_GetTick>
 800280c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800280e:	e008      	b.n	8002822 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002810:	f7fe fbcc 	bl	8000fac <HAL_GetTick>
 8002814:	4602      	mov	r2, r0
 8002816:	693b      	ldr	r3, [r7, #16]
 8002818:	1ad3      	subs	r3, r2, r3
 800281a:	2b64      	cmp	r3, #100	; 0x64
 800281c:	d901      	bls.n	8002822 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800281e:	2303      	movs	r3, #3
 8002820:	e207      	b.n	8002c32 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002822:	4b5b      	ldr	r3, [pc, #364]	; (8002990 <HAL_RCC_OscConfig+0x240>)
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800282a:	2b00      	cmp	r3, #0
 800282c:	d0f0      	beq.n	8002810 <HAL_RCC_OscConfig+0xc0>
 800282e:	e014      	b.n	800285a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002830:	f7fe fbbc 	bl	8000fac <HAL_GetTick>
 8002834:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002836:	e008      	b.n	800284a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002838:	f7fe fbb8 	bl	8000fac <HAL_GetTick>
 800283c:	4602      	mov	r2, r0
 800283e:	693b      	ldr	r3, [r7, #16]
 8002840:	1ad3      	subs	r3, r2, r3
 8002842:	2b64      	cmp	r3, #100	; 0x64
 8002844:	d901      	bls.n	800284a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002846:	2303      	movs	r3, #3
 8002848:	e1f3      	b.n	8002c32 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800284a:	4b51      	ldr	r3, [pc, #324]	; (8002990 <HAL_RCC_OscConfig+0x240>)
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002852:	2b00      	cmp	r3, #0
 8002854:	d1f0      	bne.n	8002838 <HAL_RCC_OscConfig+0xe8>
 8002856:	e000      	b.n	800285a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002858:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	f003 0302 	and.w	r3, r3, #2
 8002862:	2b00      	cmp	r3, #0
 8002864:	d063      	beq.n	800292e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002866:	4b4a      	ldr	r3, [pc, #296]	; (8002990 <HAL_RCC_OscConfig+0x240>)
 8002868:	689b      	ldr	r3, [r3, #8]
 800286a:	f003 030c 	and.w	r3, r3, #12
 800286e:	2b00      	cmp	r3, #0
 8002870:	d00b      	beq.n	800288a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002872:	4b47      	ldr	r3, [pc, #284]	; (8002990 <HAL_RCC_OscConfig+0x240>)
 8002874:	689b      	ldr	r3, [r3, #8]
 8002876:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800287a:	2b08      	cmp	r3, #8
 800287c:	d11c      	bne.n	80028b8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800287e:	4b44      	ldr	r3, [pc, #272]	; (8002990 <HAL_RCC_OscConfig+0x240>)
 8002880:	685b      	ldr	r3, [r3, #4]
 8002882:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002886:	2b00      	cmp	r3, #0
 8002888:	d116      	bne.n	80028b8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800288a:	4b41      	ldr	r3, [pc, #260]	; (8002990 <HAL_RCC_OscConfig+0x240>)
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	f003 0302 	and.w	r3, r3, #2
 8002892:	2b00      	cmp	r3, #0
 8002894:	d005      	beq.n	80028a2 <HAL_RCC_OscConfig+0x152>
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	68db      	ldr	r3, [r3, #12]
 800289a:	2b01      	cmp	r3, #1
 800289c:	d001      	beq.n	80028a2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800289e:	2301      	movs	r3, #1
 80028a0:	e1c7      	b.n	8002c32 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80028a2:	4b3b      	ldr	r3, [pc, #236]	; (8002990 <HAL_RCC_OscConfig+0x240>)
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	691b      	ldr	r3, [r3, #16]
 80028ae:	00db      	lsls	r3, r3, #3
 80028b0:	4937      	ldr	r1, [pc, #220]	; (8002990 <HAL_RCC_OscConfig+0x240>)
 80028b2:	4313      	orrs	r3, r2
 80028b4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80028b6:	e03a      	b.n	800292e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	68db      	ldr	r3, [r3, #12]
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d020      	beq.n	8002902 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80028c0:	4b34      	ldr	r3, [pc, #208]	; (8002994 <HAL_RCC_OscConfig+0x244>)
 80028c2:	2201      	movs	r2, #1
 80028c4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028c6:	f7fe fb71 	bl	8000fac <HAL_GetTick>
 80028ca:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80028cc:	e008      	b.n	80028e0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80028ce:	f7fe fb6d 	bl	8000fac <HAL_GetTick>
 80028d2:	4602      	mov	r2, r0
 80028d4:	693b      	ldr	r3, [r7, #16]
 80028d6:	1ad3      	subs	r3, r2, r3
 80028d8:	2b02      	cmp	r3, #2
 80028da:	d901      	bls.n	80028e0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80028dc:	2303      	movs	r3, #3
 80028de:	e1a8      	b.n	8002c32 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80028e0:	4b2b      	ldr	r3, [pc, #172]	; (8002990 <HAL_RCC_OscConfig+0x240>)
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	f003 0302 	and.w	r3, r3, #2
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d0f0      	beq.n	80028ce <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80028ec:	4b28      	ldr	r3, [pc, #160]	; (8002990 <HAL_RCC_OscConfig+0x240>)
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	691b      	ldr	r3, [r3, #16]
 80028f8:	00db      	lsls	r3, r3, #3
 80028fa:	4925      	ldr	r1, [pc, #148]	; (8002990 <HAL_RCC_OscConfig+0x240>)
 80028fc:	4313      	orrs	r3, r2
 80028fe:	600b      	str	r3, [r1, #0]
 8002900:	e015      	b.n	800292e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002902:	4b24      	ldr	r3, [pc, #144]	; (8002994 <HAL_RCC_OscConfig+0x244>)
 8002904:	2200      	movs	r2, #0
 8002906:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002908:	f7fe fb50 	bl	8000fac <HAL_GetTick>
 800290c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800290e:	e008      	b.n	8002922 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002910:	f7fe fb4c 	bl	8000fac <HAL_GetTick>
 8002914:	4602      	mov	r2, r0
 8002916:	693b      	ldr	r3, [r7, #16]
 8002918:	1ad3      	subs	r3, r2, r3
 800291a:	2b02      	cmp	r3, #2
 800291c:	d901      	bls.n	8002922 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800291e:	2303      	movs	r3, #3
 8002920:	e187      	b.n	8002c32 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002922:	4b1b      	ldr	r3, [pc, #108]	; (8002990 <HAL_RCC_OscConfig+0x240>)
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	f003 0302 	and.w	r3, r3, #2
 800292a:	2b00      	cmp	r3, #0
 800292c:	d1f0      	bne.n	8002910 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	f003 0308 	and.w	r3, r3, #8
 8002936:	2b00      	cmp	r3, #0
 8002938:	d036      	beq.n	80029a8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	695b      	ldr	r3, [r3, #20]
 800293e:	2b00      	cmp	r3, #0
 8002940:	d016      	beq.n	8002970 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002942:	4b15      	ldr	r3, [pc, #84]	; (8002998 <HAL_RCC_OscConfig+0x248>)
 8002944:	2201      	movs	r2, #1
 8002946:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002948:	f7fe fb30 	bl	8000fac <HAL_GetTick>
 800294c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800294e:	e008      	b.n	8002962 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002950:	f7fe fb2c 	bl	8000fac <HAL_GetTick>
 8002954:	4602      	mov	r2, r0
 8002956:	693b      	ldr	r3, [r7, #16]
 8002958:	1ad3      	subs	r3, r2, r3
 800295a:	2b02      	cmp	r3, #2
 800295c:	d901      	bls.n	8002962 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800295e:	2303      	movs	r3, #3
 8002960:	e167      	b.n	8002c32 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002962:	4b0b      	ldr	r3, [pc, #44]	; (8002990 <HAL_RCC_OscConfig+0x240>)
 8002964:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002966:	f003 0302 	and.w	r3, r3, #2
 800296a:	2b00      	cmp	r3, #0
 800296c:	d0f0      	beq.n	8002950 <HAL_RCC_OscConfig+0x200>
 800296e:	e01b      	b.n	80029a8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002970:	4b09      	ldr	r3, [pc, #36]	; (8002998 <HAL_RCC_OscConfig+0x248>)
 8002972:	2200      	movs	r2, #0
 8002974:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002976:	f7fe fb19 	bl	8000fac <HAL_GetTick>
 800297a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800297c:	e00e      	b.n	800299c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800297e:	f7fe fb15 	bl	8000fac <HAL_GetTick>
 8002982:	4602      	mov	r2, r0
 8002984:	693b      	ldr	r3, [r7, #16]
 8002986:	1ad3      	subs	r3, r2, r3
 8002988:	2b02      	cmp	r3, #2
 800298a:	d907      	bls.n	800299c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800298c:	2303      	movs	r3, #3
 800298e:	e150      	b.n	8002c32 <HAL_RCC_OscConfig+0x4e2>
 8002990:	40023800 	.word	0x40023800
 8002994:	42470000 	.word	0x42470000
 8002998:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800299c:	4b88      	ldr	r3, [pc, #544]	; (8002bc0 <HAL_RCC_OscConfig+0x470>)
 800299e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80029a0:	f003 0302 	and.w	r3, r3, #2
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d1ea      	bne.n	800297e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	f003 0304 	and.w	r3, r3, #4
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	f000 8097 	beq.w	8002ae4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80029b6:	2300      	movs	r3, #0
 80029b8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80029ba:	4b81      	ldr	r3, [pc, #516]	; (8002bc0 <HAL_RCC_OscConfig+0x470>)
 80029bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d10f      	bne.n	80029e6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80029c6:	2300      	movs	r3, #0
 80029c8:	60bb      	str	r3, [r7, #8]
 80029ca:	4b7d      	ldr	r3, [pc, #500]	; (8002bc0 <HAL_RCC_OscConfig+0x470>)
 80029cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029ce:	4a7c      	ldr	r2, [pc, #496]	; (8002bc0 <HAL_RCC_OscConfig+0x470>)
 80029d0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80029d4:	6413      	str	r3, [r2, #64]	; 0x40
 80029d6:	4b7a      	ldr	r3, [pc, #488]	; (8002bc0 <HAL_RCC_OscConfig+0x470>)
 80029d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80029de:	60bb      	str	r3, [r7, #8]
 80029e0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80029e2:	2301      	movs	r3, #1
 80029e4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80029e6:	4b77      	ldr	r3, [pc, #476]	; (8002bc4 <HAL_RCC_OscConfig+0x474>)
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d118      	bne.n	8002a24 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80029f2:	4b74      	ldr	r3, [pc, #464]	; (8002bc4 <HAL_RCC_OscConfig+0x474>)
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	4a73      	ldr	r2, [pc, #460]	; (8002bc4 <HAL_RCC_OscConfig+0x474>)
 80029f8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80029fc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80029fe:	f7fe fad5 	bl	8000fac <HAL_GetTick>
 8002a02:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a04:	e008      	b.n	8002a18 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002a06:	f7fe fad1 	bl	8000fac <HAL_GetTick>
 8002a0a:	4602      	mov	r2, r0
 8002a0c:	693b      	ldr	r3, [r7, #16]
 8002a0e:	1ad3      	subs	r3, r2, r3
 8002a10:	2b02      	cmp	r3, #2
 8002a12:	d901      	bls.n	8002a18 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002a14:	2303      	movs	r3, #3
 8002a16:	e10c      	b.n	8002c32 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a18:	4b6a      	ldr	r3, [pc, #424]	; (8002bc4 <HAL_RCC_OscConfig+0x474>)
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d0f0      	beq.n	8002a06 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	689b      	ldr	r3, [r3, #8]
 8002a28:	2b01      	cmp	r3, #1
 8002a2a:	d106      	bne.n	8002a3a <HAL_RCC_OscConfig+0x2ea>
 8002a2c:	4b64      	ldr	r3, [pc, #400]	; (8002bc0 <HAL_RCC_OscConfig+0x470>)
 8002a2e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a30:	4a63      	ldr	r2, [pc, #396]	; (8002bc0 <HAL_RCC_OscConfig+0x470>)
 8002a32:	f043 0301 	orr.w	r3, r3, #1
 8002a36:	6713      	str	r3, [r2, #112]	; 0x70
 8002a38:	e01c      	b.n	8002a74 <HAL_RCC_OscConfig+0x324>
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	689b      	ldr	r3, [r3, #8]
 8002a3e:	2b05      	cmp	r3, #5
 8002a40:	d10c      	bne.n	8002a5c <HAL_RCC_OscConfig+0x30c>
 8002a42:	4b5f      	ldr	r3, [pc, #380]	; (8002bc0 <HAL_RCC_OscConfig+0x470>)
 8002a44:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a46:	4a5e      	ldr	r2, [pc, #376]	; (8002bc0 <HAL_RCC_OscConfig+0x470>)
 8002a48:	f043 0304 	orr.w	r3, r3, #4
 8002a4c:	6713      	str	r3, [r2, #112]	; 0x70
 8002a4e:	4b5c      	ldr	r3, [pc, #368]	; (8002bc0 <HAL_RCC_OscConfig+0x470>)
 8002a50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a52:	4a5b      	ldr	r2, [pc, #364]	; (8002bc0 <HAL_RCC_OscConfig+0x470>)
 8002a54:	f043 0301 	orr.w	r3, r3, #1
 8002a58:	6713      	str	r3, [r2, #112]	; 0x70
 8002a5a:	e00b      	b.n	8002a74 <HAL_RCC_OscConfig+0x324>
 8002a5c:	4b58      	ldr	r3, [pc, #352]	; (8002bc0 <HAL_RCC_OscConfig+0x470>)
 8002a5e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a60:	4a57      	ldr	r2, [pc, #348]	; (8002bc0 <HAL_RCC_OscConfig+0x470>)
 8002a62:	f023 0301 	bic.w	r3, r3, #1
 8002a66:	6713      	str	r3, [r2, #112]	; 0x70
 8002a68:	4b55      	ldr	r3, [pc, #340]	; (8002bc0 <HAL_RCC_OscConfig+0x470>)
 8002a6a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a6c:	4a54      	ldr	r2, [pc, #336]	; (8002bc0 <HAL_RCC_OscConfig+0x470>)
 8002a6e:	f023 0304 	bic.w	r3, r3, #4
 8002a72:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	689b      	ldr	r3, [r3, #8]
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d015      	beq.n	8002aa8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a7c:	f7fe fa96 	bl	8000fac <HAL_GetTick>
 8002a80:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a82:	e00a      	b.n	8002a9a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002a84:	f7fe fa92 	bl	8000fac <HAL_GetTick>
 8002a88:	4602      	mov	r2, r0
 8002a8a:	693b      	ldr	r3, [r7, #16]
 8002a8c:	1ad3      	subs	r3, r2, r3
 8002a8e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a92:	4293      	cmp	r3, r2
 8002a94:	d901      	bls.n	8002a9a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002a96:	2303      	movs	r3, #3
 8002a98:	e0cb      	b.n	8002c32 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a9a:	4b49      	ldr	r3, [pc, #292]	; (8002bc0 <HAL_RCC_OscConfig+0x470>)
 8002a9c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a9e:	f003 0302 	and.w	r3, r3, #2
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d0ee      	beq.n	8002a84 <HAL_RCC_OscConfig+0x334>
 8002aa6:	e014      	b.n	8002ad2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002aa8:	f7fe fa80 	bl	8000fac <HAL_GetTick>
 8002aac:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002aae:	e00a      	b.n	8002ac6 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002ab0:	f7fe fa7c 	bl	8000fac <HAL_GetTick>
 8002ab4:	4602      	mov	r2, r0
 8002ab6:	693b      	ldr	r3, [r7, #16]
 8002ab8:	1ad3      	subs	r3, r2, r3
 8002aba:	f241 3288 	movw	r2, #5000	; 0x1388
 8002abe:	4293      	cmp	r3, r2
 8002ac0:	d901      	bls.n	8002ac6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002ac2:	2303      	movs	r3, #3
 8002ac4:	e0b5      	b.n	8002c32 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002ac6:	4b3e      	ldr	r3, [pc, #248]	; (8002bc0 <HAL_RCC_OscConfig+0x470>)
 8002ac8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002aca:	f003 0302 	and.w	r3, r3, #2
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d1ee      	bne.n	8002ab0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002ad2:	7dfb      	ldrb	r3, [r7, #23]
 8002ad4:	2b01      	cmp	r3, #1
 8002ad6:	d105      	bne.n	8002ae4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002ad8:	4b39      	ldr	r3, [pc, #228]	; (8002bc0 <HAL_RCC_OscConfig+0x470>)
 8002ada:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002adc:	4a38      	ldr	r2, [pc, #224]	; (8002bc0 <HAL_RCC_OscConfig+0x470>)
 8002ade:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002ae2:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	699b      	ldr	r3, [r3, #24]
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	f000 80a1 	beq.w	8002c30 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002aee:	4b34      	ldr	r3, [pc, #208]	; (8002bc0 <HAL_RCC_OscConfig+0x470>)
 8002af0:	689b      	ldr	r3, [r3, #8]
 8002af2:	f003 030c 	and.w	r3, r3, #12
 8002af6:	2b08      	cmp	r3, #8
 8002af8:	d05c      	beq.n	8002bb4 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	699b      	ldr	r3, [r3, #24]
 8002afe:	2b02      	cmp	r3, #2
 8002b00:	d141      	bne.n	8002b86 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b02:	4b31      	ldr	r3, [pc, #196]	; (8002bc8 <HAL_RCC_OscConfig+0x478>)
 8002b04:	2200      	movs	r2, #0
 8002b06:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b08:	f7fe fa50 	bl	8000fac <HAL_GetTick>
 8002b0c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002b0e:	e008      	b.n	8002b22 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002b10:	f7fe fa4c 	bl	8000fac <HAL_GetTick>
 8002b14:	4602      	mov	r2, r0
 8002b16:	693b      	ldr	r3, [r7, #16]
 8002b18:	1ad3      	subs	r3, r2, r3
 8002b1a:	2b02      	cmp	r3, #2
 8002b1c:	d901      	bls.n	8002b22 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002b1e:	2303      	movs	r3, #3
 8002b20:	e087      	b.n	8002c32 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002b22:	4b27      	ldr	r3, [pc, #156]	; (8002bc0 <HAL_RCC_OscConfig+0x470>)
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d1f0      	bne.n	8002b10 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	69da      	ldr	r2, [r3, #28]
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	6a1b      	ldr	r3, [r3, #32]
 8002b36:	431a      	orrs	r2, r3
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b3c:	019b      	lsls	r3, r3, #6
 8002b3e:	431a      	orrs	r2, r3
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b44:	085b      	lsrs	r3, r3, #1
 8002b46:	3b01      	subs	r3, #1
 8002b48:	041b      	lsls	r3, r3, #16
 8002b4a:	431a      	orrs	r2, r3
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b50:	061b      	lsls	r3, r3, #24
 8002b52:	491b      	ldr	r1, [pc, #108]	; (8002bc0 <HAL_RCC_OscConfig+0x470>)
 8002b54:	4313      	orrs	r3, r2
 8002b56:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002b58:	4b1b      	ldr	r3, [pc, #108]	; (8002bc8 <HAL_RCC_OscConfig+0x478>)
 8002b5a:	2201      	movs	r2, #1
 8002b5c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b5e:	f7fe fa25 	bl	8000fac <HAL_GetTick>
 8002b62:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002b64:	e008      	b.n	8002b78 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002b66:	f7fe fa21 	bl	8000fac <HAL_GetTick>
 8002b6a:	4602      	mov	r2, r0
 8002b6c:	693b      	ldr	r3, [r7, #16]
 8002b6e:	1ad3      	subs	r3, r2, r3
 8002b70:	2b02      	cmp	r3, #2
 8002b72:	d901      	bls.n	8002b78 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002b74:	2303      	movs	r3, #3
 8002b76:	e05c      	b.n	8002c32 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002b78:	4b11      	ldr	r3, [pc, #68]	; (8002bc0 <HAL_RCC_OscConfig+0x470>)
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d0f0      	beq.n	8002b66 <HAL_RCC_OscConfig+0x416>
 8002b84:	e054      	b.n	8002c30 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b86:	4b10      	ldr	r3, [pc, #64]	; (8002bc8 <HAL_RCC_OscConfig+0x478>)
 8002b88:	2200      	movs	r2, #0
 8002b8a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b8c:	f7fe fa0e 	bl	8000fac <HAL_GetTick>
 8002b90:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002b92:	e008      	b.n	8002ba6 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002b94:	f7fe fa0a 	bl	8000fac <HAL_GetTick>
 8002b98:	4602      	mov	r2, r0
 8002b9a:	693b      	ldr	r3, [r7, #16]
 8002b9c:	1ad3      	subs	r3, r2, r3
 8002b9e:	2b02      	cmp	r3, #2
 8002ba0:	d901      	bls.n	8002ba6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002ba2:	2303      	movs	r3, #3
 8002ba4:	e045      	b.n	8002c32 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002ba6:	4b06      	ldr	r3, [pc, #24]	; (8002bc0 <HAL_RCC_OscConfig+0x470>)
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d1f0      	bne.n	8002b94 <HAL_RCC_OscConfig+0x444>
 8002bb2:	e03d      	b.n	8002c30 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	699b      	ldr	r3, [r3, #24]
 8002bb8:	2b01      	cmp	r3, #1
 8002bba:	d107      	bne.n	8002bcc <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002bbc:	2301      	movs	r3, #1
 8002bbe:	e038      	b.n	8002c32 <HAL_RCC_OscConfig+0x4e2>
 8002bc0:	40023800 	.word	0x40023800
 8002bc4:	40007000 	.word	0x40007000
 8002bc8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002bcc:	4b1b      	ldr	r3, [pc, #108]	; (8002c3c <HAL_RCC_OscConfig+0x4ec>)
 8002bce:	685b      	ldr	r3, [r3, #4]
 8002bd0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	699b      	ldr	r3, [r3, #24]
 8002bd6:	2b01      	cmp	r3, #1
 8002bd8:	d028      	beq.n	8002c2c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002be4:	429a      	cmp	r2, r3
 8002be6:	d121      	bne.n	8002c2c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002bf2:	429a      	cmp	r2, r3
 8002bf4:	d11a      	bne.n	8002c2c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002bf6:	68fa      	ldr	r2, [r7, #12]
 8002bf8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002bfc:	4013      	ands	r3, r2
 8002bfe:	687a      	ldr	r2, [r7, #4]
 8002c00:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002c02:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002c04:	4293      	cmp	r3, r2
 8002c06:	d111      	bne.n	8002c2c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c12:	085b      	lsrs	r3, r3, #1
 8002c14:	3b01      	subs	r3, #1
 8002c16:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002c18:	429a      	cmp	r2, r3
 8002c1a:	d107      	bne.n	8002c2c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c26:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002c28:	429a      	cmp	r2, r3
 8002c2a:	d001      	beq.n	8002c30 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002c2c:	2301      	movs	r3, #1
 8002c2e:	e000      	b.n	8002c32 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002c30:	2300      	movs	r3, #0
}
 8002c32:	4618      	mov	r0, r3
 8002c34:	3718      	adds	r7, #24
 8002c36:	46bd      	mov	sp, r7
 8002c38:	bd80      	pop	{r7, pc}
 8002c3a:	bf00      	nop
 8002c3c:	40023800 	.word	0x40023800

08002c40 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002c40:	b580      	push	{r7, lr}
 8002c42:	b084      	sub	sp, #16
 8002c44:	af00      	add	r7, sp, #0
 8002c46:	6078      	str	r0, [r7, #4]
 8002c48:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d101      	bne.n	8002c54 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002c50:	2301      	movs	r3, #1
 8002c52:	e0cc      	b.n	8002dee <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002c54:	4b68      	ldr	r3, [pc, #416]	; (8002df8 <HAL_RCC_ClockConfig+0x1b8>)
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	f003 030f 	and.w	r3, r3, #15
 8002c5c:	683a      	ldr	r2, [r7, #0]
 8002c5e:	429a      	cmp	r2, r3
 8002c60:	d90c      	bls.n	8002c7c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c62:	4b65      	ldr	r3, [pc, #404]	; (8002df8 <HAL_RCC_ClockConfig+0x1b8>)
 8002c64:	683a      	ldr	r2, [r7, #0]
 8002c66:	b2d2      	uxtb	r2, r2
 8002c68:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c6a:	4b63      	ldr	r3, [pc, #396]	; (8002df8 <HAL_RCC_ClockConfig+0x1b8>)
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	f003 030f 	and.w	r3, r3, #15
 8002c72:	683a      	ldr	r2, [r7, #0]
 8002c74:	429a      	cmp	r2, r3
 8002c76:	d001      	beq.n	8002c7c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002c78:	2301      	movs	r3, #1
 8002c7a:	e0b8      	b.n	8002dee <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	f003 0302 	and.w	r3, r3, #2
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d020      	beq.n	8002cca <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	f003 0304 	and.w	r3, r3, #4
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d005      	beq.n	8002ca0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002c94:	4b59      	ldr	r3, [pc, #356]	; (8002dfc <HAL_RCC_ClockConfig+0x1bc>)
 8002c96:	689b      	ldr	r3, [r3, #8]
 8002c98:	4a58      	ldr	r2, [pc, #352]	; (8002dfc <HAL_RCC_ClockConfig+0x1bc>)
 8002c9a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002c9e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	f003 0308 	and.w	r3, r3, #8
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d005      	beq.n	8002cb8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002cac:	4b53      	ldr	r3, [pc, #332]	; (8002dfc <HAL_RCC_ClockConfig+0x1bc>)
 8002cae:	689b      	ldr	r3, [r3, #8]
 8002cb0:	4a52      	ldr	r2, [pc, #328]	; (8002dfc <HAL_RCC_ClockConfig+0x1bc>)
 8002cb2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002cb6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002cb8:	4b50      	ldr	r3, [pc, #320]	; (8002dfc <HAL_RCC_ClockConfig+0x1bc>)
 8002cba:	689b      	ldr	r3, [r3, #8]
 8002cbc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	689b      	ldr	r3, [r3, #8]
 8002cc4:	494d      	ldr	r1, [pc, #308]	; (8002dfc <HAL_RCC_ClockConfig+0x1bc>)
 8002cc6:	4313      	orrs	r3, r2
 8002cc8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	f003 0301 	and.w	r3, r3, #1
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d044      	beq.n	8002d60 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	685b      	ldr	r3, [r3, #4]
 8002cda:	2b01      	cmp	r3, #1
 8002cdc:	d107      	bne.n	8002cee <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002cde:	4b47      	ldr	r3, [pc, #284]	; (8002dfc <HAL_RCC_ClockConfig+0x1bc>)
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d119      	bne.n	8002d1e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002cea:	2301      	movs	r3, #1
 8002cec:	e07f      	b.n	8002dee <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	685b      	ldr	r3, [r3, #4]
 8002cf2:	2b02      	cmp	r3, #2
 8002cf4:	d003      	beq.n	8002cfe <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002cfa:	2b03      	cmp	r3, #3
 8002cfc:	d107      	bne.n	8002d0e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002cfe:	4b3f      	ldr	r3, [pc, #252]	; (8002dfc <HAL_RCC_ClockConfig+0x1bc>)
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d109      	bne.n	8002d1e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002d0a:	2301      	movs	r3, #1
 8002d0c:	e06f      	b.n	8002dee <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d0e:	4b3b      	ldr	r3, [pc, #236]	; (8002dfc <HAL_RCC_ClockConfig+0x1bc>)
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	f003 0302 	and.w	r3, r3, #2
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d101      	bne.n	8002d1e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002d1a:	2301      	movs	r3, #1
 8002d1c:	e067      	b.n	8002dee <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002d1e:	4b37      	ldr	r3, [pc, #220]	; (8002dfc <HAL_RCC_ClockConfig+0x1bc>)
 8002d20:	689b      	ldr	r3, [r3, #8]
 8002d22:	f023 0203 	bic.w	r2, r3, #3
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	685b      	ldr	r3, [r3, #4]
 8002d2a:	4934      	ldr	r1, [pc, #208]	; (8002dfc <HAL_RCC_ClockConfig+0x1bc>)
 8002d2c:	4313      	orrs	r3, r2
 8002d2e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002d30:	f7fe f93c 	bl	8000fac <HAL_GetTick>
 8002d34:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d36:	e00a      	b.n	8002d4e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002d38:	f7fe f938 	bl	8000fac <HAL_GetTick>
 8002d3c:	4602      	mov	r2, r0
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	1ad3      	subs	r3, r2, r3
 8002d42:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d46:	4293      	cmp	r3, r2
 8002d48:	d901      	bls.n	8002d4e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002d4a:	2303      	movs	r3, #3
 8002d4c:	e04f      	b.n	8002dee <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d4e:	4b2b      	ldr	r3, [pc, #172]	; (8002dfc <HAL_RCC_ClockConfig+0x1bc>)
 8002d50:	689b      	ldr	r3, [r3, #8]
 8002d52:	f003 020c 	and.w	r2, r3, #12
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	685b      	ldr	r3, [r3, #4]
 8002d5a:	009b      	lsls	r3, r3, #2
 8002d5c:	429a      	cmp	r2, r3
 8002d5e:	d1eb      	bne.n	8002d38 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002d60:	4b25      	ldr	r3, [pc, #148]	; (8002df8 <HAL_RCC_ClockConfig+0x1b8>)
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	f003 030f 	and.w	r3, r3, #15
 8002d68:	683a      	ldr	r2, [r7, #0]
 8002d6a:	429a      	cmp	r2, r3
 8002d6c:	d20c      	bcs.n	8002d88 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d6e:	4b22      	ldr	r3, [pc, #136]	; (8002df8 <HAL_RCC_ClockConfig+0x1b8>)
 8002d70:	683a      	ldr	r2, [r7, #0]
 8002d72:	b2d2      	uxtb	r2, r2
 8002d74:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d76:	4b20      	ldr	r3, [pc, #128]	; (8002df8 <HAL_RCC_ClockConfig+0x1b8>)
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	f003 030f 	and.w	r3, r3, #15
 8002d7e:	683a      	ldr	r2, [r7, #0]
 8002d80:	429a      	cmp	r2, r3
 8002d82:	d001      	beq.n	8002d88 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002d84:	2301      	movs	r3, #1
 8002d86:	e032      	b.n	8002dee <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	f003 0304 	and.w	r3, r3, #4
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d008      	beq.n	8002da6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002d94:	4b19      	ldr	r3, [pc, #100]	; (8002dfc <HAL_RCC_ClockConfig+0x1bc>)
 8002d96:	689b      	ldr	r3, [r3, #8]
 8002d98:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	68db      	ldr	r3, [r3, #12]
 8002da0:	4916      	ldr	r1, [pc, #88]	; (8002dfc <HAL_RCC_ClockConfig+0x1bc>)
 8002da2:	4313      	orrs	r3, r2
 8002da4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	f003 0308 	and.w	r3, r3, #8
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d009      	beq.n	8002dc6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002db2:	4b12      	ldr	r3, [pc, #72]	; (8002dfc <HAL_RCC_ClockConfig+0x1bc>)
 8002db4:	689b      	ldr	r3, [r3, #8]
 8002db6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	691b      	ldr	r3, [r3, #16]
 8002dbe:	00db      	lsls	r3, r3, #3
 8002dc0:	490e      	ldr	r1, [pc, #56]	; (8002dfc <HAL_RCC_ClockConfig+0x1bc>)
 8002dc2:	4313      	orrs	r3, r2
 8002dc4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002dc6:	f000 f821 	bl	8002e0c <HAL_RCC_GetSysClockFreq>
 8002dca:	4602      	mov	r2, r0
 8002dcc:	4b0b      	ldr	r3, [pc, #44]	; (8002dfc <HAL_RCC_ClockConfig+0x1bc>)
 8002dce:	689b      	ldr	r3, [r3, #8]
 8002dd0:	091b      	lsrs	r3, r3, #4
 8002dd2:	f003 030f 	and.w	r3, r3, #15
 8002dd6:	490a      	ldr	r1, [pc, #40]	; (8002e00 <HAL_RCC_ClockConfig+0x1c0>)
 8002dd8:	5ccb      	ldrb	r3, [r1, r3]
 8002dda:	fa22 f303 	lsr.w	r3, r2, r3
 8002dde:	4a09      	ldr	r2, [pc, #36]	; (8002e04 <HAL_RCC_ClockConfig+0x1c4>)
 8002de0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002de2:	4b09      	ldr	r3, [pc, #36]	; (8002e08 <HAL_RCC_ClockConfig+0x1c8>)
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	4618      	mov	r0, r3
 8002de8:	f7fe f89c 	bl	8000f24 <HAL_InitTick>

  return HAL_OK;
 8002dec:	2300      	movs	r3, #0
}
 8002dee:	4618      	mov	r0, r3
 8002df0:	3710      	adds	r7, #16
 8002df2:	46bd      	mov	sp, r7
 8002df4:	bd80      	pop	{r7, pc}
 8002df6:	bf00      	nop
 8002df8:	40023c00 	.word	0x40023c00
 8002dfc:	40023800 	.word	0x40023800
 8002e00:	08011dc8 	.word	0x08011dc8
 8002e04:	20000000 	.word	0x20000000
 8002e08:	20000004 	.word	0x20000004

08002e0c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002e0c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002e10:	b094      	sub	sp, #80	; 0x50
 8002e12:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002e14:	2300      	movs	r3, #0
 8002e16:	647b      	str	r3, [r7, #68]	; 0x44
 8002e18:	2300      	movs	r3, #0
 8002e1a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002e1c:	2300      	movs	r3, #0
 8002e1e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8002e20:	2300      	movs	r3, #0
 8002e22:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002e24:	4b79      	ldr	r3, [pc, #484]	; (800300c <HAL_RCC_GetSysClockFreq+0x200>)
 8002e26:	689b      	ldr	r3, [r3, #8]
 8002e28:	f003 030c 	and.w	r3, r3, #12
 8002e2c:	2b08      	cmp	r3, #8
 8002e2e:	d00d      	beq.n	8002e4c <HAL_RCC_GetSysClockFreq+0x40>
 8002e30:	2b08      	cmp	r3, #8
 8002e32:	f200 80e1 	bhi.w	8002ff8 <HAL_RCC_GetSysClockFreq+0x1ec>
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d002      	beq.n	8002e40 <HAL_RCC_GetSysClockFreq+0x34>
 8002e3a:	2b04      	cmp	r3, #4
 8002e3c:	d003      	beq.n	8002e46 <HAL_RCC_GetSysClockFreq+0x3a>
 8002e3e:	e0db      	b.n	8002ff8 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002e40:	4b73      	ldr	r3, [pc, #460]	; (8003010 <HAL_RCC_GetSysClockFreq+0x204>)
 8002e42:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8002e44:	e0db      	b.n	8002ffe <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002e46:	4b73      	ldr	r3, [pc, #460]	; (8003014 <HAL_RCC_GetSysClockFreq+0x208>)
 8002e48:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002e4a:	e0d8      	b.n	8002ffe <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002e4c:	4b6f      	ldr	r3, [pc, #444]	; (800300c <HAL_RCC_GetSysClockFreq+0x200>)
 8002e4e:	685b      	ldr	r3, [r3, #4]
 8002e50:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002e54:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002e56:	4b6d      	ldr	r3, [pc, #436]	; (800300c <HAL_RCC_GetSysClockFreq+0x200>)
 8002e58:	685b      	ldr	r3, [r3, #4]
 8002e5a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d063      	beq.n	8002f2a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002e62:	4b6a      	ldr	r3, [pc, #424]	; (800300c <HAL_RCC_GetSysClockFreq+0x200>)
 8002e64:	685b      	ldr	r3, [r3, #4]
 8002e66:	099b      	lsrs	r3, r3, #6
 8002e68:	2200      	movs	r2, #0
 8002e6a:	63bb      	str	r3, [r7, #56]	; 0x38
 8002e6c:	63fa      	str	r2, [r7, #60]	; 0x3c
 8002e6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e70:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002e74:	633b      	str	r3, [r7, #48]	; 0x30
 8002e76:	2300      	movs	r3, #0
 8002e78:	637b      	str	r3, [r7, #52]	; 0x34
 8002e7a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8002e7e:	4622      	mov	r2, r4
 8002e80:	462b      	mov	r3, r5
 8002e82:	f04f 0000 	mov.w	r0, #0
 8002e86:	f04f 0100 	mov.w	r1, #0
 8002e8a:	0159      	lsls	r1, r3, #5
 8002e8c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002e90:	0150      	lsls	r0, r2, #5
 8002e92:	4602      	mov	r2, r0
 8002e94:	460b      	mov	r3, r1
 8002e96:	4621      	mov	r1, r4
 8002e98:	1a51      	subs	r1, r2, r1
 8002e9a:	6139      	str	r1, [r7, #16]
 8002e9c:	4629      	mov	r1, r5
 8002e9e:	eb63 0301 	sbc.w	r3, r3, r1
 8002ea2:	617b      	str	r3, [r7, #20]
 8002ea4:	f04f 0200 	mov.w	r2, #0
 8002ea8:	f04f 0300 	mov.w	r3, #0
 8002eac:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002eb0:	4659      	mov	r1, fp
 8002eb2:	018b      	lsls	r3, r1, #6
 8002eb4:	4651      	mov	r1, sl
 8002eb6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002eba:	4651      	mov	r1, sl
 8002ebc:	018a      	lsls	r2, r1, #6
 8002ebe:	4651      	mov	r1, sl
 8002ec0:	ebb2 0801 	subs.w	r8, r2, r1
 8002ec4:	4659      	mov	r1, fp
 8002ec6:	eb63 0901 	sbc.w	r9, r3, r1
 8002eca:	f04f 0200 	mov.w	r2, #0
 8002ece:	f04f 0300 	mov.w	r3, #0
 8002ed2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002ed6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002eda:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002ede:	4690      	mov	r8, r2
 8002ee0:	4699      	mov	r9, r3
 8002ee2:	4623      	mov	r3, r4
 8002ee4:	eb18 0303 	adds.w	r3, r8, r3
 8002ee8:	60bb      	str	r3, [r7, #8]
 8002eea:	462b      	mov	r3, r5
 8002eec:	eb49 0303 	adc.w	r3, r9, r3
 8002ef0:	60fb      	str	r3, [r7, #12]
 8002ef2:	f04f 0200 	mov.w	r2, #0
 8002ef6:	f04f 0300 	mov.w	r3, #0
 8002efa:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002efe:	4629      	mov	r1, r5
 8002f00:	024b      	lsls	r3, r1, #9
 8002f02:	4621      	mov	r1, r4
 8002f04:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002f08:	4621      	mov	r1, r4
 8002f0a:	024a      	lsls	r2, r1, #9
 8002f0c:	4610      	mov	r0, r2
 8002f0e:	4619      	mov	r1, r3
 8002f10:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002f12:	2200      	movs	r2, #0
 8002f14:	62bb      	str	r3, [r7, #40]	; 0x28
 8002f16:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002f18:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002f1c:	f7fd f9b8 	bl	8000290 <__aeabi_uldivmod>
 8002f20:	4602      	mov	r2, r0
 8002f22:	460b      	mov	r3, r1
 8002f24:	4613      	mov	r3, r2
 8002f26:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002f28:	e058      	b.n	8002fdc <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002f2a:	4b38      	ldr	r3, [pc, #224]	; (800300c <HAL_RCC_GetSysClockFreq+0x200>)
 8002f2c:	685b      	ldr	r3, [r3, #4]
 8002f2e:	099b      	lsrs	r3, r3, #6
 8002f30:	2200      	movs	r2, #0
 8002f32:	4618      	mov	r0, r3
 8002f34:	4611      	mov	r1, r2
 8002f36:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002f3a:	623b      	str	r3, [r7, #32]
 8002f3c:	2300      	movs	r3, #0
 8002f3e:	627b      	str	r3, [r7, #36]	; 0x24
 8002f40:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002f44:	4642      	mov	r2, r8
 8002f46:	464b      	mov	r3, r9
 8002f48:	f04f 0000 	mov.w	r0, #0
 8002f4c:	f04f 0100 	mov.w	r1, #0
 8002f50:	0159      	lsls	r1, r3, #5
 8002f52:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002f56:	0150      	lsls	r0, r2, #5
 8002f58:	4602      	mov	r2, r0
 8002f5a:	460b      	mov	r3, r1
 8002f5c:	4641      	mov	r1, r8
 8002f5e:	ebb2 0a01 	subs.w	sl, r2, r1
 8002f62:	4649      	mov	r1, r9
 8002f64:	eb63 0b01 	sbc.w	fp, r3, r1
 8002f68:	f04f 0200 	mov.w	r2, #0
 8002f6c:	f04f 0300 	mov.w	r3, #0
 8002f70:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002f74:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002f78:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002f7c:	ebb2 040a 	subs.w	r4, r2, sl
 8002f80:	eb63 050b 	sbc.w	r5, r3, fp
 8002f84:	f04f 0200 	mov.w	r2, #0
 8002f88:	f04f 0300 	mov.w	r3, #0
 8002f8c:	00eb      	lsls	r3, r5, #3
 8002f8e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002f92:	00e2      	lsls	r2, r4, #3
 8002f94:	4614      	mov	r4, r2
 8002f96:	461d      	mov	r5, r3
 8002f98:	4643      	mov	r3, r8
 8002f9a:	18e3      	adds	r3, r4, r3
 8002f9c:	603b      	str	r3, [r7, #0]
 8002f9e:	464b      	mov	r3, r9
 8002fa0:	eb45 0303 	adc.w	r3, r5, r3
 8002fa4:	607b      	str	r3, [r7, #4]
 8002fa6:	f04f 0200 	mov.w	r2, #0
 8002faa:	f04f 0300 	mov.w	r3, #0
 8002fae:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002fb2:	4629      	mov	r1, r5
 8002fb4:	028b      	lsls	r3, r1, #10
 8002fb6:	4621      	mov	r1, r4
 8002fb8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002fbc:	4621      	mov	r1, r4
 8002fbe:	028a      	lsls	r2, r1, #10
 8002fc0:	4610      	mov	r0, r2
 8002fc2:	4619      	mov	r1, r3
 8002fc4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002fc6:	2200      	movs	r2, #0
 8002fc8:	61bb      	str	r3, [r7, #24]
 8002fca:	61fa      	str	r2, [r7, #28]
 8002fcc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002fd0:	f7fd f95e 	bl	8000290 <__aeabi_uldivmod>
 8002fd4:	4602      	mov	r2, r0
 8002fd6:	460b      	mov	r3, r1
 8002fd8:	4613      	mov	r3, r2
 8002fda:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002fdc:	4b0b      	ldr	r3, [pc, #44]	; (800300c <HAL_RCC_GetSysClockFreq+0x200>)
 8002fde:	685b      	ldr	r3, [r3, #4]
 8002fe0:	0c1b      	lsrs	r3, r3, #16
 8002fe2:	f003 0303 	and.w	r3, r3, #3
 8002fe6:	3301      	adds	r3, #1
 8002fe8:	005b      	lsls	r3, r3, #1
 8002fea:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8002fec:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002fee:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002ff0:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ff4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002ff6:	e002      	b.n	8002ffe <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002ff8:	4b05      	ldr	r3, [pc, #20]	; (8003010 <HAL_RCC_GetSysClockFreq+0x204>)
 8002ffa:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002ffc:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002ffe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8003000:	4618      	mov	r0, r3
 8003002:	3750      	adds	r7, #80	; 0x50
 8003004:	46bd      	mov	sp, r7
 8003006:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800300a:	bf00      	nop
 800300c:	40023800 	.word	0x40023800
 8003010:	00f42400 	.word	0x00f42400
 8003014:	007a1200 	.word	0x007a1200

08003018 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003018:	b480      	push	{r7}
 800301a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800301c:	4b03      	ldr	r3, [pc, #12]	; (800302c <HAL_RCC_GetHCLKFreq+0x14>)
 800301e:	681b      	ldr	r3, [r3, #0]
}
 8003020:	4618      	mov	r0, r3
 8003022:	46bd      	mov	sp, r7
 8003024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003028:	4770      	bx	lr
 800302a:	bf00      	nop
 800302c:	20000000 	.word	0x20000000

08003030 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003030:	b580      	push	{r7, lr}
 8003032:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003034:	f7ff fff0 	bl	8003018 <HAL_RCC_GetHCLKFreq>
 8003038:	4602      	mov	r2, r0
 800303a:	4b05      	ldr	r3, [pc, #20]	; (8003050 <HAL_RCC_GetPCLK1Freq+0x20>)
 800303c:	689b      	ldr	r3, [r3, #8]
 800303e:	0a9b      	lsrs	r3, r3, #10
 8003040:	f003 0307 	and.w	r3, r3, #7
 8003044:	4903      	ldr	r1, [pc, #12]	; (8003054 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003046:	5ccb      	ldrb	r3, [r1, r3]
 8003048:	fa22 f303 	lsr.w	r3, r2, r3
}
 800304c:	4618      	mov	r0, r3
 800304e:	bd80      	pop	{r7, pc}
 8003050:	40023800 	.word	0x40023800
 8003054:	08011dd8 	.word	0x08011dd8

08003058 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003058:	b580      	push	{r7, lr}
 800305a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800305c:	f7ff ffdc 	bl	8003018 <HAL_RCC_GetHCLKFreq>
 8003060:	4602      	mov	r2, r0
 8003062:	4b05      	ldr	r3, [pc, #20]	; (8003078 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003064:	689b      	ldr	r3, [r3, #8]
 8003066:	0b5b      	lsrs	r3, r3, #13
 8003068:	f003 0307 	and.w	r3, r3, #7
 800306c:	4903      	ldr	r1, [pc, #12]	; (800307c <HAL_RCC_GetPCLK2Freq+0x24>)
 800306e:	5ccb      	ldrb	r3, [r1, r3]
 8003070:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003074:	4618      	mov	r0, r3
 8003076:	bd80      	pop	{r7, pc}
 8003078:	40023800 	.word	0x40023800
 800307c:	08011dd8 	.word	0x08011dd8

08003080 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003080:	b580      	push	{r7, lr}
 8003082:	b082      	sub	sp, #8
 8003084:	af00      	add	r7, sp, #0
 8003086:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	2b00      	cmp	r3, #0
 800308c:	d101      	bne.n	8003092 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800308e:	2301      	movs	r3, #1
 8003090:	e03f      	b.n	8003112 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003098:	b2db      	uxtb	r3, r3
 800309a:	2b00      	cmp	r3, #0
 800309c:	d106      	bne.n	80030ac <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	2200      	movs	r2, #0
 80030a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80030a6:	6878      	ldr	r0, [r7, #4]
 80030a8:	f7fd fc18 	bl	80008dc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	2224      	movs	r2, #36	; 0x24
 80030b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	68da      	ldr	r2, [r3, #12]
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80030c2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80030c4:	6878      	ldr	r0, [r7, #4]
 80030c6:	f000 f929 	bl	800331c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	691a      	ldr	r2, [r3, #16]
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80030d8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	695a      	ldr	r2, [r3, #20]
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80030e8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	68da      	ldr	r2, [r3, #12]
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80030f8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	2200      	movs	r2, #0
 80030fe:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	2220      	movs	r2, #32
 8003104:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	2220      	movs	r2, #32
 800310c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003110:	2300      	movs	r3, #0
}
 8003112:	4618      	mov	r0, r3
 8003114:	3708      	adds	r7, #8
 8003116:	46bd      	mov	sp, r7
 8003118:	bd80      	pop	{r7, pc}

0800311a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800311a:	b580      	push	{r7, lr}
 800311c:	b08a      	sub	sp, #40	; 0x28
 800311e:	af02      	add	r7, sp, #8
 8003120:	60f8      	str	r0, [r7, #12]
 8003122:	60b9      	str	r1, [r7, #8]
 8003124:	603b      	str	r3, [r7, #0]
 8003126:	4613      	mov	r3, r2
 8003128:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800312a:	2300      	movs	r3, #0
 800312c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003134:	b2db      	uxtb	r3, r3
 8003136:	2b20      	cmp	r3, #32
 8003138:	d17c      	bne.n	8003234 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800313a:	68bb      	ldr	r3, [r7, #8]
 800313c:	2b00      	cmp	r3, #0
 800313e:	d002      	beq.n	8003146 <HAL_UART_Transmit+0x2c>
 8003140:	88fb      	ldrh	r3, [r7, #6]
 8003142:	2b00      	cmp	r3, #0
 8003144:	d101      	bne.n	800314a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003146:	2301      	movs	r3, #1
 8003148:	e075      	b.n	8003236 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003150:	2b01      	cmp	r3, #1
 8003152:	d101      	bne.n	8003158 <HAL_UART_Transmit+0x3e>
 8003154:	2302      	movs	r3, #2
 8003156:	e06e      	b.n	8003236 <HAL_UART_Transmit+0x11c>
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	2201      	movs	r2, #1
 800315c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	2200      	movs	r2, #0
 8003164:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	2221      	movs	r2, #33	; 0x21
 800316a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800316e:	f7fd ff1d 	bl	8000fac <HAL_GetTick>
 8003172:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	88fa      	ldrh	r2, [r7, #6]
 8003178:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	88fa      	ldrh	r2, [r7, #6]
 800317e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	689b      	ldr	r3, [r3, #8]
 8003184:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003188:	d108      	bne.n	800319c <HAL_UART_Transmit+0x82>
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	691b      	ldr	r3, [r3, #16]
 800318e:	2b00      	cmp	r3, #0
 8003190:	d104      	bne.n	800319c <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8003192:	2300      	movs	r3, #0
 8003194:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003196:	68bb      	ldr	r3, [r7, #8]
 8003198:	61bb      	str	r3, [r7, #24]
 800319a:	e003      	b.n	80031a4 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800319c:	68bb      	ldr	r3, [r7, #8]
 800319e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80031a0:	2300      	movs	r3, #0
 80031a2:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	2200      	movs	r2, #0
 80031a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80031ac:	e02a      	b.n	8003204 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80031ae:	683b      	ldr	r3, [r7, #0]
 80031b0:	9300      	str	r3, [sp, #0]
 80031b2:	697b      	ldr	r3, [r7, #20]
 80031b4:	2200      	movs	r2, #0
 80031b6:	2180      	movs	r1, #128	; 0x80
 80031b8:	68f8      	ldr	r0, [r7, #12]
 80031ba:	f000 f840 	bl	800323e <UART_WaitOnFlagUntilTimeout>
 80031be:	4603      	mov	r3, r0
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d001      	beq.n	80031c8 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80031c4:	2303      	movs	r3, #3
 80031c6:	e036      	b.n	8003236 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80031c8:	69fb      	ldr	r3, [r7, #28]
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d10b      	bne.n	80031e6 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80031ce:	69bb      	ldr	r3, [r7, #24]
 80031d0:	881b      	ldrh	r3, [r3, #0]
 80031d2:	461a      	mov	r2, r3
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80031dc:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80031de:	69bb      	ldr	r3, [r7, #24]
 80031e0:	3302      	adds	r3, #2
 80031e2:	61bb      	str	r3, [r7, #24]
 80031e4:	e007      	b.n	80031f6 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80031e6:	69fb      	ldr	r3, [r7, #28]
 80031e8:	781a      	ldrb	r2, [r3, #0]
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80031f0:	69fb      	ldr	r3, [r7, #28]
 80031f2:	3301      	adds	r3, #1
 80031f4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80031fa:	b29b      	uxth	r3, r3
 80031fc:	3b01      	subs	r3, #1
 80031fe:	b29a      	uxth	r2, r3
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003208:	b29b      	uxth	r3, r3
 800320a:	2b00      	cmp	r3, #0
 800320c:	d1cf      	bne.n	80031ae <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800320e:	683b      	ldr	r3, [r7, #0]
 8003210:	9300      	str	r3, [sp, #0]
 8003212:	697b      	ldr	r3, [r7, #20]
 8003214:	2200      	movs	r2, #0
 8003216:	2140      	movs	r1, #64	; 0x40
 8003218:	68f8      	ldr	r0, [r7, #12]
 800321a:	f000 f810 	bl	800323e <UART_WaitOnFlagUntilTimeout>
 800321e:	4603      	mov	r3, r0
 8003220:	2b00      	cmp	r3, #0
 8003222:	d001      	beq.n	8003228 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8003224:	2303      	movs	r3, #3
 8003226:	e006      	b.n	8003236 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	2220      	movs	r2, #32
 800322c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003230:	2300      	movs	r3, #0
 8003232:	e000      	b.n	8003236 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8003234:	2302      	movs	r3, #2
  }
}
 8003236:	4618      	mov	r0, r3
 8003238:	3720      	adds	r7, #32
 800323a:	46bd      	mov	sp, r7
 800323c:	bd80      	pop	{r7, pc}

0800323e <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800323e:	b580      	push	{r7, lr}
 8003240:	b090      	sub	sp, #64	; 0x40
 8003242:	af00      	add	r7, sp, #0
 8003244:	60f8      	str	r0, [r7, #12]
 8003246:	60b9      	str	r1, [r7, #8]
 8003248:	603b      	str	r3, [r7, #0]
 800324a:	4613      	mov	r3, r2
 800324c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800324e:	e050      	b.n	80032f2 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003250:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003252:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003256:	d04c      	beq.n	80032f2 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003258:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800325a:	2b00      	cmp	r3, #0
 800325c:	d007      	beq.n	800326e <UART_WaitOnFlagUntilTimeout+0x30>
 800325e:	f7fd fea5 	bl	8000fac <HAL_GetTick>
 8003262:	4602      	mov	r2, r0
 8003264:	683b      	ldr	r3, [r7, #0]
 8003266:	1ad3      	subs	r3, r2, r3
 8003268:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800326a:	429a      	cmp	r2, r3
 800326c:	d241      	bcs.n	80032f2 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	330c      	adds	r3, #12
 8003274:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003276:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003278:	e853 3f00 	ldrex	r3, [r3]
 800327c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800327e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003280:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003284:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	330c      	adds	r3, #12
 800328c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800328e:	637a      	str	r2, [r7, #52]	; 0x34
 8003290:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003292:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003294:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003296:	e841 2300 	strex	r3, r2, [r1]
 800329a:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800329c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d1e5      	bne.n	800326e <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	3314      	adds	r3, #20
 80032a8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80032aa:	697b      	ldr	r3, [r7, #20]
 80032ac:	e853 3f00 	ldrex	r3, [r3]
 80032b0:	613b      	str	r3, [r7, #16]
   return(result);
 80032b2:	693b      	ldr	r3, [r7, #16]
 80032b4:	f023 0301 	bic.w	r3, r3, #1
 80032b8:	63bb      	str	r3, [r7, #56]	; 0x38
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	3314      	adds	r3, #20
 80032c0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80032c2:	623a      	str	r2, [r7, #32]
 80032c4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80032c6:	69f9      	ldr	r1, [r7, #28]
 80032c8:	6a3a      	ldr	r2, [r7, #32]
 80032ca:	e841 2300 	strex	r3, r2, [r1]
 80032ce:	61bb      	str	r3, [r7, #24]
   return(result);
 80032d0:	69bb      	ldr	r3, [r7, #24]
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d1e5      	bne.n	80032a2 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	2220      	movs	r2, #32
 80032da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	2220      	movs	r2, #32
 80032e2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	2200      	movs	r2, #0
 80032ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80032ee:	2303      	movs	r3, #3
 80032f0:	e00f      	b.n	8003312 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	681a      	ldr	r2, [r3, #0]
 80032f8:	68bb      	ldr	r3, [r7, #8]
 80032fa:	4013      	ands	r3, r2
 80032fc:	68ba      	ldr	r2, [r7, #8]
 80032fe:	429a      	cmp	r2, r3
 8003300:	bf0c      	ite	eq
 8003302:	2301      	moveq	r3, #1
 8003304:	2300      	movne	r3, #0
 8003306:	b2db      	uxtb	r3, r3
 8003308:	461a      	mov	r2, r3
 800330a:	79fb      	ldrb	r3, [r7, #7]
 800330c:	429a      	cmp	r2, r3
 800330e:	d09f      	beq.n	8003250 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003310:	2300      	movs	r3, #0
}
 8003312:	4618      	mov	r0, r3
 8003314:	3740      	adds	r7, #64	; 0x40
 8003316:	46bd      	mov	sp, r7
 8003318:	bd80      	pop	{r7, pc}
	...

0800331c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800331c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003320:	b0c0      	sub	sp, #256	; 0x100
 8003322:	af00      	add	r7, sp, #0
 8003324:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003328:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	691b      	ldr	r3, [r3, #16]
 8003330:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003334:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003338:	68d9      	ldr	r1, [r3, #12]
 800333a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800333e:	681a      	ldr	r2, [r3, #0]
 8003340:	ea40 0301 	orr.w	r3, r0, r1
 8003344:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003346:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800334a:	689a      	ldr	r2, [r3, #8]
 800334c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003350:	691b      	ldr	r3, [r3, #16]
 8003352:	431a      	orrs	r2, r3
 8003354:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003358:	695b      	ldr	r3, [r3, #20]
 800335a:	431a      	orrs	r2, r3
 800335c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003360:	69db      	ldr	r3, [r3, #28]
 8003362:	4313      	orrs	r3, r2
 8003364:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003368:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	68db      	ldr	r3, [r3, #12]
 8003370:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003374:	f021 010c 	bic.w	r1, r1, #12
 8003378:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800337c:	681a      	ldr	r2, [r3, #0]
 800337e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8003382:	430b      	orrs	r3, r1
 8003384:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003386:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	695b      	ldr	r3, [r3, #20]
 800338e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8003392:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003396:	6999      	ldr	r1, [r3, #24]
 8003398:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800339c:	681a      	ldr	r2, [r3, #0]
 800339e:	ea40 0301 	orr.w	r3, r0, r1
 80033a2:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80033a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80033a8:	681a      	ldr	r2, [r3, #0]
 80033aa:	4b8f      	ldr	r3, [pc, #572]	; (80035e8 <UART_SetConfig+0x2cc>)
 80033ac:	429a      	cmp	r2, r3
 80033ae:	d005      	beq.n	80033bc <UART_SetConfig+0xa0>
 80033b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80033b4:	681a      	ldr	r2, [r3, #0]
 80033b6:	4b8d      	ldr	r3, [pc, #564]	; (80035ec <UART_SetConfig+0x2d0>)
 80033b8:	429a      	cmp	r2, r3
 80033ba:	d104      	bne.n	80033c6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80033bc:	f7ff fe4c 	bl	8003058 <HAL_RCC_GetPCLK2Freq>
 80033c0:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80033c4:	e003      	b.n	80033ce <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80033c6:	f7ff fe33 	bl	8003030 <HAL_RCC_GetPCLK1Freq>
 80033ca:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80033ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80033d2:	69db      	ldr	r3, [r3, #28]
 80033d4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80033d8:	f040 810c 	bne.w	80035f4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80033dc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80033e0:	2200      	movs	r2, #0
 80033e2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80033e6:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80033ea:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80033ee:	4622      	mov	r2, r4
 80033f0:	462b      	mov	r3, r5
 80033f2:	1891      	adds	r1, r2, r2
 80033f4:	65b9      	str	r1, [r7, #88]	; 0x58
 80033f6:	415b      	adcs	r3, r3
 80033f8:	65fb      	str	r3, [r7, #92]	; 0x5c
 80033fa:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80033fe:	4621      	mov	r1, r4
 8003400:	eb12 0801 	adds.w	r8, r2, r1
 8003404:	4629      	mov	r1, r5
 8003406:	eb43 0901 	adc.w	r9, r3, r1
 800340a:	f04f 0200 	mov.w	r2, #0
 800340e:	f04f 0300 	mov.w	r3, #0
 8003412:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003416:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800341a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800341e:	4690      	mov	r8, r2
 8003420:	4699      	mov	r9, r3
 8003422:	4623      	mov	r3, r4
 8003424:	eb18 0303 	adds.w	r3, r8, r3
 8003428:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800342c:	462b      	mov	r3, r5
 800342e:	eb49 0303 	adc.w	r3, r9, r3
 8003432:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8003436:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800343a:	685b      	ldr	r3, [r3, #4]
 800343c:	2200      	movs	r2, #0
 800343e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8003442:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8003446:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800344a:	460b      	mov	r3, r1
 800344c:	18db      	adds	r3, r3, r3
 800344e:	653b      	str	r3, [r7, #80]	; 0x50
 8003450:	4613      	mov	r3, r2
 8003452:	eb42 0303 	adc.w	r3, r2, r3
 8003456:	657b      	str	r3, [r7, #84]	; 0x54
 8003458:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800345c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8003460:	f7fc ff16 	bl	8000290 <__aeabi_uldivmod>
 8003464:	4602      	mov	r2, r0
 8003466:	460b      	mov	r3, r1
 8003468:	4b61      	ldr	r3, [pc, #388]	; (80035f0 <UART_SetConfig+0x2d4>)
 800346a:	fba3 2302 	umull	r2, r3, r3, r2
 800346e:	095b      	lsrs	r3, r3, #5
 8003470:	011c      	lsls	r4, r3, #4
 8003472:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003476:	2200      	movs	r2, #0
 8003478:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800347c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8003480:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8003484:	4642      	mov	r2, r8
 8003486:	464b      	mov	r3, r9
 8003488:	1891      	adds	r1, r2, r2
 800348a:	64b9      	str	r1, [r7, #72]	; 0x48
 800348c:	415b      	adcs	r3, r3
 800348e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003490:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8003494:	4641      	mov	r1, r8
 8003496:	eb12 0a01 	adds.w	sl, r2, r1
 800349a:	4649      	mov	r1, r9
 800349c:	eb43 0b01 	adc.w	fp, r3, r1
 80034a0:	f04f 0200 	mov.w	r2, #0
 80034a4:	f04f 0300 	mov.w	r3, #0
 80034a8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80034ac:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80034b0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80034b4:	4692      	mov	sl, r2
 80034b6:	469b      	mov	fp, r3
 80034b8:	4643      	mov	r3, r8
 80034ba:	eb1a 0303 	adds.w	r3, sl, r3
 80034be:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80034c2:	464b      	mov	r3, r9
 80034c4:	eb4b 0303 	adc.w	r3, fp, r3
 80034c8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80034cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80034d0:	685b      	ldr	r3, [r3, #4]
 80034d2:	2200      	movs	r2, #0
 80034d4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80034d8:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80034dc:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80034e0:	460b      	mov	r3, r1
 80034e2:	18db      	adds	r3, r3, r3
 80034e4:	643b      	str	r3, [r7, #64]	; 0x40
 80034e6:	4613      	mov	r3, r2
 80034e8:	eb42 0303 	adc.w	r3, r2, r3
 80034ec:	647b      	str	r3, [r7, #68]	; 0x44
 80034ee:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80034f2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80034f6:	f7fc fecb 	bl	8000290 <__aeabi_uldivmod>
 80034fa:	4602      	mov	r2, r0
 80034fc:	460b      	mov	r3, r1
 80034fe:	4611      	mov	r1, r2
 8003500:	4b3b      	ldr	r3, [pc, #236]	; (80035f0 <UART_SetConfig+0x2d4>)
 8003502:	fba3 2301 	umull	r2, r3, r3, r1
 8003506:	095b      	lsrs	r3, r3, #5
 8003508:	2264      	movs	r2, #100	; 0x64
 800350a:	fb02 f303 	mul.w	r3, r2, r3
 800350e:	1acb      	subs	r3, r1, r3
 8003510:	00db      	lsls	r3, r3, #3
 8003512:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8003516:	4b36      	ldr	r3, [pc, #216]	; (80035f0 <UART_SetConfig+0x2d4>)
 8003518:	fba3 2302 	umull	r2, r3, r3, r2
 800351c:	095b      	lsrs	r3, r3, #5
 800351e:	005b      	lsls	r3, r3, #1
 8003520:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003524:	441c      	add	r4, r3
 8003526:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800352a:	2200      	movs	r2, #0
 800352c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003530:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8003534:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8003538:	4642      	mov	r2, r8
 800353a:	464b      	mov	r3, r9
 800353c:	1891      	adds	r1, r2, r2
 800353e:	63b9      	str	r1, [r7, #56]	; 0x38
 8003540:	415b      	adcs	r3, r3
 8003542:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003544:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003548:	4641      	mov	r1, r8
 800354a:	1851      	adds	r1, r2, r1
 800354c:	6339      	str	r1, [r7, #48]	; 0x30
 800354e:	4649      	mov	r1, r9
 8003550:	414b      	adcs	r3, r1
 8003552:	637b      	str	r3, [r7, #52]	; 0x34
 8003554:	f04f 0200 	mov.w	r2, #0
 8003558:	f04f 0300 	mov.w	r3, #0
 800355c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8003560:	4659      	mov	r1, fp
 8003562:	00cb      	lsls	r3, r1, #3
 8003564:	4651      	mov	r1, sl
 8003566:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800356a:	4651      	mov	r1, sl
 800356c:	00ca      	lsls	r2, r1, #3
 800356e:	4610      	mov	r0, r2
 8003570:	4619      	mov	r1, r3
 8003572:	4603      	mov	r3, r0
 8003574:	4642      	mov	r2, r8
 8003576:	189b      	adds	r3, r3, r2
 8003578:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800357c:	464b      	mov	r3, r9
 800357e:	460a      	mov	r2, r1
 8003580:	eb42 0303 	adc.w	r3, r2, r3
 8003584:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003588:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800358c:	685b      	ldr	r3, [r3, #4]
 800358e:	2200      	movs	r2, #0
 8003590:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8003594:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8003598:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800359c:	460b      	mov	r3, r1
 800359e:	18db      	adds	r3, r3, r3
 80035a0:	62bb      	str	r3, [r7, #40]	; 0x28
 80035a2:	4613      	mov	r3, r2
 80035a4:	eb42 0303 	adc.w	r3, r2, r3
 80035a8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80035aa:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80035ae:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80035b2:	f7fc fe6d 	bl	8000290 <__aeabi_uldivmod>
 80035b6:	4602      	mov	r2, r0
 80035b8:	460b      	mov	r3, r1
 80035ba:	4b0d      	ldr	r3, [pc, #52]	; (80035f0 <UART_SetConfig+0x2d4>)
 80035bc:	fba3 1302 	umull	r1, r3, r3, r2
 80035c0:	095b      	lsrs	r3, r3, #5
 80035c2:	2164      	movs	r1, #100	; 0x64
 80035c4:	fb01 f303 	mul.w	r3, r1, r3
 80035c8:	1ad3      	subs	r3, r2, r3
 80035ca:	00db      	lsls	r3, r3, #3
 80035cc:	3332      	adds	r3, #50	; 0x32
 80035ce:	4a08      	ldr	r2, [pc, #32]	; (80035f0 <UART_SetConfig+0x2d4>)
 80035d0:	fba2 2303 	umull	r2, r3, r2, r3
 80035d4:	095b      	lsrs	r3, r3, #5
 80035d6:	f003 0207 	and.w	r2, r3, #7
 80035da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	4422      	add	r2, r4
 80035e2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80035e4:	e106      	b.n	80037f4 <UART_SetConfig+0x4d8>
 80035e6:	bf00      	nop
 80035e8:	40011000 	.word	0x40011000
 80035ec:	40011400 	.word	0x40011400
 80035f0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80035f4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80035f8:	2200      	movs	r2, #0
 80035fa:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80035fe:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8003602:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8003606:	4642      	mov	r2, r8
 8003608:	464b      	mov	r3, r9
 800360a:	1891      	adds	r1, r2, r2
 800360c:	6239      	str	r1, [r7, #32]
 800360e:	415b      	adcs	r3, r3
 8003610:	627b      	str	r3, [r7, #36]	; 0x24
 8003612:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003616:	4641      	mov	r1, r8
 8003618:	1854      	adds	r4, r2, r1
 800361a:	4649      	mov	r1, r9
 800361c:	eb43 0501 	adc.w	r5, r3, r1
 8003620:	f04f 0200 	mov.w	r2, #0
 8003624:	f04f 0300 	mov.w	r3, #0
 8003628:	00eb      	lsls	r3, r5, #3
 800362a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800362e:	00e2      	lsls	r2, r4, #3
 8003630:	4614      	mov	r4, r2
 8003632:	461d      	mov	r5, r3
 8003634:	4643      	mov	r3, r8
 8003636:	18e3      	adds	r3, r4, r3
 8003638:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800363c:	464b      	mov	r3, r9
 800363e:	eb45 0303 	adc.w	r3, r5, r3
 8003642:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8003646:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800364a:	685b      	ldr	r3, [r3, #4]
 800364c:	2200      	movs	r2, #0
 800364e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003652:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003656:	f04f 0200 	mov.w	r2, #0
 800365a:	f04f 0300 	mov.w	r3, #0
 800365e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8003662:	4629      	mov	r1, r5
 8003664:	008b      	lsls	r3, r1, #2
 8003666:	4621      	mov	r1, r4
 8003668:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800366c:	4621      	mov	r1, r4
 800366e:	008a      	lsls	r2, r1, #2
 8003670:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8003674:	f7fc fe0c 	bl	8000290 <__aeabi_uldivmod>
 8003678:	4602      	mov	r2, r0
 800367a:	460b      	mov	r3, r1
 800367c:	4b60      	ldr	r3, [pc, #384]	; (8003800 <UART_SetConfig+0x4e4>)
 800367e:	fba3 2302 	umull	r2, r3, r3, r2
 8003682:	095b      	lsrs	r3, r3, #5
 8003684:	011c      	lsls	r4, r3, #4
 8003686:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800368a:	2200      	movs	r2, #0
 800368c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003690:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8003694:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8003698:	4642      	mov	r2, r8
 800369a:	464b      	mov	r3, r9
 800369c:	1891      	adds	r1, r2, r2
 800369e:	61b9      	str	r1, [r7, #24]
 80036a0:	415b      	adcs	r3, r3
 80036a2:	61fb      	str	r3, [r7, #28]
 80036a4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80036a8:	4641      	mov	r1, r8
 80036aa:	1851      	adds	r1, r2, r1
 80036ac:	6139      	str	r1, [r7, #16]
 80036ae:	4649      	mov	r1, r9
 80036b0:	414b      	adcs	r3, r1
 80036b2:	617b      	str	r3, [r7, #20]
 80036b4:	f04f 0200 	mov.w	r2, #0
 80036b8:	f04f 0300 	mov.w	r3, #0
 80036bc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80036c0:	4659      	mov	r1, fp
 80036c2:	00cb      	lsls	r3, r1, #3
 80036c4:	4651      	mov	r1, sl
 80036c6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80036ca:	4651      	mov	r1, sl
 80036cc:	00ca      	lsls	r2, r1, #3
 80036ce:	4610      	mov	r0, r2
 80036d0:	4619      	mov	r1, r3
 80036d2:	4603      	mov	r3, r0
 80036d4:	4642      	mov	r2, r8
 80036d6:	189b      	adds	r3, r3, r2
 80036d8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80036dc:	464b      	mov	r3, r9
 80036de:	460a      	mov	r2, r1
 80036e0:	eb42 0303 	adc.w	r3, r2, r3
 80036e4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80036e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80036ec:	685b      	ldr	r3, [r3, #4]
 80036ee:	2200      	movs	r2, #0
 80036f0:	67bb      	str	r3, [r7, #120]	; 0x78
 80036f2:	67fa      	str	r2, [r7, #124]	; 0x7c
 80036f4:	f04f 0200 	mov.w	r2, #0
 80036f8:	f04f 0300 	mov.w	r3, #0
 80036fc:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8003700:	4649      	mov	r1, r9
 8003702:	008b      	lsls	r3, r1, #2
 8003704:	4641      	mov	r1, r8
 8003706:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800370a:	4641      	mov	r1, r8
 800370c:	008a      	lsls	r2, r1, #2
 800370e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8003712:	f7fc fdbd 	bl	8000290 <__aeabi_uldivmod>
 8003716:	4602      	mov	r2, r0
 8003718:	460b      	mov	r3, r1
 800371a:	4611      	mov	r1, r2
 800371c:	4b38      	ldr	r3, [pc, #224]	; (8003800 <UART_SetConfig+0x4e4>)
 800371e:	fba3 2301 	umull	r2, r3, r3, r1
 8003722:	095b      	lsrs	r3, r3, #5
 8003724:	2264      	movs	r2, #100	; 0x64
 8003726:	fb02 f303 	mul.w	r3, r2, r3
 800372a:	1acb      	subs	r3, r1, r3
 800372c:	011b      	lsls	r3, r3, #4
 800372e:	3332      	adds	r3, #50	; 0x32
 8003730:	4a33      	ldr	r2, [pc, #204]	; (8003800 <UART_SetConfig+0x4e4>)
 8003732:	fba2 2303 	umull	r2, r3, r2, r3
 8003736:	095b      	lsrs	r3, r3, #5
 8003738:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800373c:	441c      	add	r4, r3
 800373e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003742:	2200      	movs	r2, #0
 8003744:	673b      	str	r3, [r7, #112]	; 0x70
 8003746:	677a      	str	r2, [r7, #116]	; 0x74
 8003748:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800374c:	4642      	mov	r2, r8
 800374e:	464b      	mov	r3, r9
 8003750:	1891      	adds	r1, r2, r2
 8003752:	60b9      	str	r1, [r7, #8]
 8003754:	415b      	adcs	r3, r3
 8003756:	60fb      	str	r3, [r7, #12]
 8003758:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800375c:	4641      	mov	r1, r8
 800375e:	1851      	adds	r1, r2, r1
 8003760:	6039      	str	r1, [r7, #0]
 8003762:	4649      	mov	r1, r9
 8003764:	414b      	adcs	r3, r1
 8003766:	607b      	str	r3, [r7, #4]
 8003768:	f04f 0200 	mov.w	r2, #0
 800376c:	f04f 0300 	mov.w	r3, #0
 8003770:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003774:	4659      	mov	r1, fp
 8003776:	00cb      	lsls	r3, r1, #3
 8003778:	4651      	mov	r1, sl
 800377a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800377e:	4651      	mov	r1, sl
 8003780:	00ca      	lsls	r2, r1, #3
 8003782:	4610      	mov	r0, r2
 8003784:	4619      	mov	r1, r3
 8003786:	4603      	mov	r3, r0
 8003788:	4642      	mov	r2, r8
 800378a:	189b      	adds	r3, r3, r2
 800378c:	66bb      	str	r3, [r7, #104]	; 0x68
 800378e:	464b      	mov	r3, r9
 8003790:	460a      	mov	r2, r1
 8003792:	eb42 0303 	adc.w	r3, r2, r3
 8003796:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003798:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800379c:	685b      	ldr	r3, [r3, #4]
 800379e:	2200      	movs	r2, #0
 80037a0:	663b      	str	r3, [r7, #96]	; 0x60
 80037a2:	667a      	str	r2, [r7, #100]	; 0x64
 80037a4:	f04f 0200 	mov.w	r2, #0
 80037a8:	f04f 0300 	mov.w	r3, #0
 80037ac:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80037b0:	4649      	mov	r1, r9
 80037b2:	008b      	lsls	r3, r1, #2
 80037b4:	4641      	mov	r1, r8
 80037b6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80037ba:	4641      	mov	r1, r8
 80037bc:	008a      	lsls	r2, r1, #2
 80037be:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80037c2:	f7fc fd65 	bl	8000290 <__aeabi_uldivmod>
 80037c6:	4602      	mov	r2, r0
 80037c8:	460b      	mov	r3, r1
 80037ca:	4b0d      	ldr	r3, [pc, #52]	; (8003800 <UART_SetConfig+0x4e4>)
 80037cc:	fba3 1302 	umull	r1, r3, r3, r2
 80037d0:	095b      	lsrs	r3, r3, #5
 80037d2:	2164      	movs	r1, #100	; 0x64
 80037d4:	fb01 f303 	mul.w	r3, r1, r3
 80037d8:	1ad3      	subs	r3, r2, r3
 80037da:	011b      	lsls	r3, r3, #4
 80037dc:	3332      	adds	r3, #50	; 0x32
 80037de:	4a08      	ldr	r2, [pc, #32]	; (8003800 <UART_SetConfig+0x4e4>)
 80037e0:	fba2 2303 	umull	r2, r3, r2, r3
 80037e4:	095b      	lsrs	r3, r3, #5
 80037e6:	f003 020f 	and.w	r2, r3, #15
 80037ea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	4422      	add	r2, r4
 80037f2:	609a      	str	r2, [r3, #8]
}
 80037f4:	bf00      	nop
 80037f6:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80037fa:	46bd      	mov	sp, r7
 80037fc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003800:	51eb851f 	.word	0x51eb851f

08003804 <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 8003804:	b580      	push	{r7, lr}
 8003806:	b084      	sub	sp, #16
 8003808:	af04      	add	r7, sp, #16
  /* IP addresses initialization */
  IP_ADDRESS[0] = 169;
 800380a:	4b8d      	ldr	r3, [pc, #564]	; (8003a40 <MX_LWIP_Init+0x23c>)
 800380c:	22a9      	movs	r2, #169	; 0xa9
 800380e:	701a      	strb	r2, [r3, #0]
  IP_ADDRESS[1] = 254;
 8003810:	4b8b      	ldr	r3, [pc, #556]	; (8003a40 <MX_LWIP_Init+0x23c>)
 8003812:	22fe      	movs	r2, #254	; 0xfe
 8003814:	705a      	strb	r2, [r3, #1]
  IP_ADDRESS[2] = 162;
 8003816:	4b8a      	ldr	r3, [pc, #552]	; (8003a40 <MX_LWIP_Init+0x23c>)
 8003818:	22a2      	movs	r2, #162	; 0xa2
 800381a:	709a      	strb	r2, [r3, #2]
  IP_ADDRESS[3] = 151;
 800381c:	4b88      	ldr	r3, [pc, #544]	; (8003a40 <MX_LWIP_Init+0x23c>)
 800381e:	2297      	movs	r2, #151	; 0x97
 8003820:	70da      	strb	r2, [r3, #3]
  NETMASK_ADDRESS[0] = 255;
 8003822:	4b88      	ldr	r3, [pc, #544]	; (8003a44 <MX_LWIP_Init+0x240>)
 8003824:	22ff      	movs	r2, #255	; 0xff
 8003826:	701a      	strb	r2, [r3, #0]
  NETMASK_ADDRESS[1] = 255;
 8003828:	4b86      	ldr	r3, [pc, #536]	; (8003a44 <MX_LWIP_Init+0x240>)
 800382a:	22ff      	movs	r2, #255	; 0xff
 800382c:	705a      	strb	r2, [r3, #1]
  NETMASK_ADDRESS[2] = 255;
 800382e:	4b85      	ldr	r3, [pc, #532]	; (8003a44 <MX_LWIP_Init+0x240>)
 8003830:	22ff      	movs	r2, #255	; 0xff
 8003832:	709a      	strb	r2, [r3, #2]
  NETMASK_ADDRESS[3] = 0;
 8003834:	4b83      	ldr	r3, [pc, #524]	; (8003a44 <MX_LWIP_Init+0x240>)
 8003836:	2200      	movs	r2, #0
 8003838:	70da      	strb	r2, [r3, #3]
  GATEWAY_ADDRESS[0] = 192;
 800383a:	4b83      	ldr	r3, [pc, #524]	; (8003a48 <MX_LWIP_Init+0x244>)
 800383c:	22c0      	movs	r2, #192	; 0xc0
 800383e:	701a      	strb	r2, [r3, #0]
  GATEWAY_ADDRESS[1] = 168;
 8003840:	4b81      	ldr	r3, [pc, #516]	; (8003a48 <MX_LWIP_Init+0x244>)
 8003842:	22a8      	movs	r2, #168	; 0xa8
 8003844:	705a      	strb	r2, [r3, #1]
  GATEWAY_ADDRESS[2] = 0;
 8003846:	4b80      	ldr	r3, [pc, #512]	; (8003a48 <MX_LWIP_Init+0x244>)
 8003848:	2200      	movs	r2, #0
 800384a:	709a      	strb	r2, [r3, #2]
  GATEWAY_ADDRESS[3] = 1;
 800384c:	4b7e      	ldr	r3, [pc, #504]	; (8003a48 <MX_LWIP_Init+0x244>)
 800384e:	2201      	movs	r2, #1
 8003850:	70da      	strb	r2, [r3, #3]

/* USER CODE BEGIN IP_ADDRESSES */
/* USER CODE END IP_ADDRESSES */

  /* Initilialize the LwIP stack without RTOS */
  lwip_init();
 8003852:	f000 fcf5 	bl	8004240 <lwip_init>

  /* IP addresses initialization without DHCP (IPv4) */
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 8003856:	4b7a      	ldr	r3, [pc, #488]	; (8003a40 <MX_LWIP_Init+0x23c>)
 8003858:	781b      	ldrb	r3, [r3, #0]
 800385a:	061a      	lsls	r2, r3, #24
 800385c:	4b78      	ldr	r3, [pc, #480]	; (8003a40 <MX_LWIP_Init+0x23c>)
 800385e:	785b      	ldrb	r3, [r3, #1]
 8003860:	041b      	lsls	r3, r3, #16
 8003862:	431a      	orrs	r2, r3
 8003864:	4b76      	ldr	r3, [pc, #472]	; (8003a40 <MX_LWIP_Init+0x23c>)
 8003866:	789b      	ldrb	r3, [r3, #2]
 8003868:	021b      	lsls	r3, r3, #8
 800386a:	4313      	orrs	r3, r2
 800386c:	4a74      	ldr	r2, [pc, #464]	; (8003a40 <MX_LWIP_Init+0x23c>)
 800386e:	78d2      	ldrb	r2, [r2, #3]
 8003870:	4313      	orrs	r3, r2
 8003872:	061a      	lsls	r2, r3, #24
 8003874:	4b72      	ldr	r3, [pc, #456]	; (8003a40 <MX_LWIP_Init+0x23c>)
 8003876:	781b      	ldrb	r3, [r3, #0]
 8003878:	0619      	lsls	r1, r3, #24
 800387a:	4b71      	ldr	r3, [pc, #452]	; (8003a40 <MX_LWIP_Init+0x23c>)
 800387c:	785b      	ldrb	r3, [r3, #1]
 800387e:	041b      	lsls	r3, r3, #16
 8003880:	4319      	orrs	r1, r3
 8003882:	4b6f      	ldr	r3, [pc, #444]	; (8003a40 <MX_LWIP_Init+0x23c>)
 8003884:	789b      	ldrb	r3, [r3, #2]
 8003886:	021b      	lsls	r3, r3, #8
 8003888:	430b      	orrs	r3, r1
 800388a:	496d      	ldr	r1, [pc, #436]	; (8003a40 <MX_LWIP_Init+0x23c>)
 800388c:	78c9      	ldrb	r1, [r1, #3]
 800388e:	430b      	orrs	r3, r1
 8003890:	021b      	lsls	r3, r3, #8
 8003892:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8003896:	431a      	orrs	r2, r3
 8003898:	4b69      	ldr	r3, [pc, #420]	; (8003a40 <MX_LWIP_Init+0x23c>)
 800389a:	781b      	ldrb	r3, [r3, #0]
 800389c:	0619      	lsls	r1, r3, #24
 800389e:	4b68      	ldr	r3, [pc, #416]	; (8003a40 <MX_LWIP_Init+0x23c>)
 80038a0:	785b      	ldrb	r3, [r3, #1]
 80038a2:	041b      	lsls	r3, r3, #16
 80038a4:	4319      	orrs	r1, r3
 80038a6:	4b66      	ldr	r3, [pc, #408]	; (8003a40 <MX_LWIP_Init+0x23c>)
 80038a8:	789b      	ldrb	r3, [r3, #2]
 80038aa:	021b      	lsls	r3, r3, #8
 80038ac:	430b      	orrs	r3, r1
 80038ae:	4964      	ldr	r1, [pc, #400]	; (8003a40 <MX_LWIP_Init+0x23c>)
 80038b0:	78c9      	ldrb	r1, [r1, #3]
 80038b2:	430b      	orrs	r3, r1
 80038b4:	0a1b      	lsrs	r3, r3, #8
 80038b6:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80038ba:	431a      	orrs	r2, r3
 80038bc:	4b60      	ldr	r3, [pc, #384]	; (8003a40 <MX_LWIP_Init+0x23c>)
 80038be:	781b      	ldrb	r3, [r3, #0]
 80038c0:	0619      	lsls	r1, r3, #24
 80038c2:	4b5f      	ldr	r3, [pc, #380]	; (8003a40 <MX_LWIP_Init+0x23c>)
 80038c4:	785b      	ldrb	r3, [r3, #1]
 80038c6:	041b      	lsls	r3, r3, #16
 80038c8:	4319      	orrs	r1, r3
 80038ca:	4b5d      	ldr	r3, [pc, #372]	; (8003a40 <MX_LWIP_Init+0x23c>)
 80038cc:	789b      	ldrb	r3, [r3, #2]
 80038ce:	021b      	lsls	r3, r3, #8
 80038d0:	430b      	orrs	r3, r1
 80038d2:	495b      	ldr	r1, [pc, #364]	; (8003a40 <MX_LWIP_Init+0x23c>)
 80038d4:	78c9      	ldrb	r1, [r1, #3]
 80038d6:	430b      	orrs	r3, r1
 80038d8:	0e1b      	lsrs	r3, r3, #24
 80038da:	4313      	orrs	r3, r2
 80038dc:	4a5b      	ldr	r2, [pc, #364]	; (8003a4c <MX_LWIP_Init+0x248>)
 80038de:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 80038e0:	4b58      	ldr	r3, [pc, #352]	; (8003a44 <MX_LWIP_Init+0x240>)
 80038e2:	781b      	ldrb	r3, [r3, #0]
 80038e4:	061a      	lsls	r2, r3, #24
 80038e6:	4b57      	ldr	r3, [pc, #348]	; (8003a44 <MX_LWIP_Init+0x240>)
 80038e8:	785b      	ldrb	r3, [r3, #1]
 80038ea:	041b      	lsls	r3, r3, #16
 80038ec:	431a      	orrs	r2, r3
 80038ee:	4b55      	ldr	r3, [pc, #340]	; (8003a44 <MX_LWIP_Init+0x240>)
 80038f0:	789b      	ldrb	r3, [r3, #2]
 80038f2:	021b      	lsls	r3, r3, #8
 80038f4:	4313      	orrs	r3, r2
 80038f6:	4a53      	ldr	r2, [pc, #332]	; (8003a44 <MX_LWIP_Init+0x240>)
 80038f8:	78d2      	ldrb	r2, [r2, #3]
 80038fa:	4313      	orrs	r3, r2
 80038fc:	061a      	lsls	r2, r3, #24
 80038fe:	4b51      	ldr	r3, [pc, #324]	; (8003a44 <MX_LWIP_Init+0x240>)
 8003900:	781b      	ldrb	r3, [r3, #0]
 8003902:	0619      	lsls	r1, r3, #24
 8003904:	4b4f      	ldr	r3, [pc, #316]	; (8003a44 <MX_LWIP_Init+0x240>)
 8003906:	785b      	ldrb	r3, [r3, #1]
 8003908:	041b      	lsls	r3, r3, #16
 800390a:	4319      	orrs	r1, r3
 800390c:	4b4d      	ldr	r3, [pc, #308]	; (8003a44 <MX_LWIP_Init+0x240>)
 800390e:	789b      	ldrb	r3, [r3, #2]
 8003910:	021b      	lsls	r3, r3, #8
 8003912:	430b      	orrs	r3, r1
 8003914:	494b      	ldr	r1, [pc, #300]	; (8003a44 <MX_LWIP_Init+0x240>)
 8003916:	78c9      	ldrb	r1, [r1, #3]
 8003918:	430b      	orrs	r3, r1
 800391a:	021b      	lsls	r3, r3, #8
 800391c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8003920:	431a      	orrs	r2, r3
 8003922:	4b48      	ldr	r3, [pc, #288]	; (8003a44 <MX_LWIP_Init+0x240>)
 8003924:	781b      	ldrb	r3, [r3, #0]
 8003926:	0619      	lsls	r1, r3, #24
 8003928:	4b46      	ldr	r3, [pc, #280]	; (8003a44 <MX_LWIP_Init+0x240>)
 800392a:	785b      	ldrb	r3, [r3, #1]
 800392c:	041b      	lsls	r3, r3, #16
 800392e:	4319      	orrs	r1, r3
 8003930:	4b44      	ldr	r3, [pc, #272]	; (8003a44 <MX_LWIP_Init+0x240>)
 8003932:	789b      	ldrb	r3, [r3, #2]
 8003934:	021b      	lsls	r3, r3, #8
 8003936:	430b      	orrs	r3, r1
 8003938:	4942      	ldr	r1, [pc, #264]	; (8003a44 <MX_LWIP_Init+0x240>)
 800393a:	78c9      	ldrb	r1, [r1, #3]
 800393c:	430b      	orrs	r3, r1
 800393e:	0a1b      	lsrs	r3, r3, #8
 8003940:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8003944:	431a      	orrs	r2, r3
 8003946:	4b3f      	ldr	r3, [pc, #252]	; (8003a44 <MX_LWIP_Init+0x240>)
 8003948:	781b      	ldrb	r3, [r3, #0]
 800394a:	0619      	lsls	r1, r3, #24
 800394c:	4b3d      	ldr	r3, [pc, #244]	; (8003a44 <MX_LWIP_Init+0x240>)
 800394e:	785b      	ldrb	r3, [r3, #1]
 8003950:	041b      	lsls	r3, r3, #16
 8003952:	4319      	orrs	r1, r3
 8003954:	4b3b      	ldr	r3, [pc, #236]	; (8003a44 <MX_LWIP_Init+0x240>)
 8003956:	789b      	ldrb	r3, [r3, #2]
 8003958:	021b      	lsls	r3, r3, #8
 800395a:	430b      	orrs	r3, r1
 800395c:	4939      	ldr	r1, [pc, #228]	; (8003a44 <MX_LWIP_Init+0x240>)
 800395e:	78c9      	ldrb	r1, [r1, #3]
 8003960:	430b      	orrs	r3, r1
 8003962:	0e1b      	lsrs	r3, r3, #24
 8003964:	4313      	orrs	r3, r2
 8003966:	4a3a      	ldr	r2, [pc, #232]	; (8003a50 <MX_LWIP_Init+0x24c>)
 8003968:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 800396a:	4b37      	ldr	r3, [pc, #220]	; (8003a48 <MX_LWIP_Init+0x244>)
 800396c:	781b      	ldrb	r3, [r3, #0]
 800396e:	061a      	lsls	r2, r3, #24
 8003970:	4b35      	ldr	r3, [pc, #212]	; (8003a48 <MX_LWIP_Init+0x244>)
 8003972:	785b      	ldrb	r3, [r3, #1]
 8003974:	041b      	lsls	r3, r3, #16
 8003976:	431a      	orrs	r2, r3
 8003978:	4b33      	ldr	r3, [pc, #204]	; (8003a48 <MX_LWIP_Init+0x244>)
 800397a:	789b      	ldrb	r3, [r3, #2]
 800397c:	021b      	lsls	r3, r3, #8
 800397e:	4313      	orrs	r3, r2
 8003980:	4a31      	ldr	r2, [pc, #196]	; (8003a48 <MX_LWIP_Init+0x244>)
 8003982:	78d2      	ldrb	r2, [r2, #3]
 8003984:	4313      	orrs	r3, r2
 8003986:	061a      	lsls	r2, r3, #24
 8003988:	4b2f      	ldr	r3, [pc, #188]	; (8003a48 <MX_LWIP_Init+0x244>)
 800398a:	781b      	ldrb	r3, [r3, #0]
 800398c:	0619      	lsls	r1, r3, #24
 800398e:	4b2e      	ldr	r3, [pc, #184]	; (8003a48 <MX_LWIP_Init+0x244>)
 8003990:	785b      	ldrb	r3, [r3, #1]
 8003992:	041b      	lsls	r3, r3, #16
 8003994:	4319      	orrs	r1, r3
 8003996:	4b2c      	ldr	r3, [pc, #176]	; (8003a48 <MX_LWIP_Init+0x244>)
 8003998:	789b      	ldrb	r3, [r3, #2]
 800399a:	021b      	lsls	r3, r3, #8
 800399c:	430b      	orrs	r3, r1
 800399e:	492a      	ldr	r1, [pc, #168]	; (8003a48 <MX_LWIP_Init+0x244>)
 80039a0:	78c9      	ldrb	r1, [r1, #3]
 80039a2:	430b      	orrs	r3, r1
 80039a4:	021b      	lsls	r3, r3, #8
 80039a6:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80039aa:	431a      	orrs	r2, r3
 80039ac:	4b26      	ldr	r3, [pc, #152]	; (8003a48 <MX_LWIP_Init+0x244>)
 80039ae:	781b      	ldrb	r3, [r3, #0]
 80039b0:	0619      	lsls	r1, r3, #24
 80039b2:	4b25      	ldr	r3, [pc, #148]	; (8003a48 <MX_LWIP_Init+0x244>)
 80039b4:	785b      	ldrb	r3, [r3, #1]
 80039b6:	041b      	lsls	r3, r3, #16
 80039b8:	4319      	orrs	r1, r3
 80039ba:	4b23      	ldr	r3, [pc, #140]	; (8003a48 <MX_LWIP_Init+0x244>)
 80039bc:	789b      	ldrb	r3, [r3, #2]
 80039be:	021b      	lsls	r3, r3, #8
 80039c0:	430b      	orrs	r3, r1
 80039c2:	4921      	ldr	r1, [pc, #132]	; (8003a48 <MX_LWIP_Init+0x244>)
 80039c4:	78c9      	ldrb	r1, [r1, #3]
 80039c6:	430b      	orrs	r3, r1
 80039c8:	0a1b      	lsrs	r3, r3, #8
 80039ca:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80039ce:	431a      	orrs	r2, r3
 80039d0:	4b1d      	ldr	r3, [pc, #116]	; (8003a48 <MX_LWIP_Init+0x244>)
 80039d2:	781b      	ldrb	r3, [r3, #0]
 80039d4:	0619      	lsls	r1, r3, #24
 80039d6:	4b1c      	ldr	r3, [pc, #112]	; (8003a48 <MX_LWIP_Init+0x244>)
 80039d8:	785b      	ldrb	r3, [r3, #1]
 80039da:	041b      	lsls	r3, r3, #16
 80039dc:	4319      	orrs	r1, r3
 80039de:	4b1a      	ldr	r3, [pc, #104]	; (8003a48 <MX_LWIP_Init+0x244>)
 80039e0:	789b      	ldrb	r3, [r3, #2]
 80039e2:	021b      	lsls	r3, r3, #8
 80039e4:	430b      	orrs	r3, r1
 80039e6:	4918      	ldr	r1, [pc, #96]	; (8003a48 <MX_LWIP_Init+0x244>)
 80039e8:	78c9      	ldrb	r1, [r1, #3]
 80039ea:	430b      	orrs	r3, r1
 80039ec:	0e1b      	lsrs	r3, r3, #24
 80039ee:	4313      	orrs	r3, r2
 80039f0:	4a18      	ldr	r2, [pc, #96]	; (8003a54 <MX_LWIP_Init+0x250>)
 80039f2:	6013      	str	r3, [r2, #0]

  /* add the network interface (IPv4/IPv6) without RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &ethernet_input);
 80039f4:	4b18      	ldr	r3, [pc, #96]	; (8003a58 <MX_LWIP_Init+0x254>)
 80039f6:	9302      	str	r3, [sp, #8]
 80039f8:	4b18      	ldr	r3, [pc, #96]	; (8003a5c <MX_LWIP_Init+0x258>)
 80039fa:	9301      	str	r3, [sp, #4]
 80039fc:	2300      	movs	r3, #0
 80039fe:	9300      	str	r3, [sp, #0]
 8003a00:	4b14      	ldr	r3, [pc, #80]	; (8003a54 <MX_LWIP_Init+0x250>)
 8003a02:	4a13      	ldr	r2, [pc, #76]	; (8003a50 <MX_LWIP_Init+0x24c>)
 8003a04:	4911      	ldr	r1, [pc, #68]	; (8003a4c <MX_LWIP_Init+0x248>)
 8003a06:	4816      	ldr	r0, [pc, #88]	; (8003a60 <MX_LWIP_Init+0x25c>)
 8003a08:	f001 f906 	bl	8004c18 <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 8003a0c:	4814      	ldr	r0, [pc, #80]	; (8003a60 <MX_LWIP_Init+0x25c>)
 8003a0e:	f001 fab5 	bl	8004f7c <netif_set_default>

  if (netif_is_link_up(&gnetif))
 8003a12:	4b13      	ldr	r3, [pc, #76]	; (8003a60 <MX_LWIP_Init+0x25c>)
 8003a14:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8003a18:	089b      	lsrs	r3, r3, #2
 8003a1a:	f003 0301 	and.w	r3, r3, #1
 8003a1e:	b2db      	uxtb	r3, r3
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d003      	beq.n	8003a2c <MX_LWIP_Init+0x228>
  {
    /* When the netif is fully configured this function must be called */
    netif_set_up(&gnetif);
 8003a24:	480e      	ldr	r0, [pc, #56]	; (8003a60 <MX_LWIP_Init+0x25c>)
 8003a26:	f001 fab9 	bl	8004f9c <netif_set_up>
 8003a2a:	e002      	b.n	8003a32 <MX_LWIP_Init+0x22e>
  }
  else
  {
    /* When the netif link is down this function must be called */
    netif_set_down(&gnetif);
 8003a2c:	480c      	ldr	r0, [pc, #48]	; (8003a60 <MX_LWIP_Init+0x25c>)
 8003a2e:	f001 fb21 	bl	8005074 <netif_set_down>
  }

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernet_link_status_updated);
 8003a32:	490c      	ldr	r1, [pc, #48]	; (8003a64 <MX_LWIP_Init+0x260>)
 8003a34:	480a      	ldr	r0, [pc, #40]	; (8003a60 <MX_LWIP_Init+0x25c>)
 8003a36:	f001 fbb3 	bl	80051a0 <netif_set_link_callback>
  /* Create the Ethernet link handler thread */

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 8003a3a:	bf00      	nop
 8003a3c:	46bd      	mov	sp, r7
 8003a3e:	bd80      	pop	{r7, pc}
 8003a40:	20000130 	.word	0x20000130
 8003a44:	20000134 	.word	0x20000134
 8003a48:	20000138 	.word	0x20000138
 8003a4c:	20000124 	.word	0x20000124
 8003a50:	20000128 	.word	0x20000128
 8003a54:	2000012c 	.word	0x2000012c
 8003a58:	0800e16d 	.word	0x0800e16d
 8003a5c:	08003d25 	.word	0x08003d25
 8003a60:	200000f0 	.word	0x200000f0
 8003a64:	08003a69 	.word	0x08003a69

08003a68 <ethernet_link_status_updated>:
  * @brief  Notify the User about the network interface config status
  * @param  netif: the network interface
  * @retval None
  */
static void ethernet_link_status_updated(struct netif *netif)
{
 8003a68:	b480      	push	{r7}
 8003a6a:	b083      	sub	sp, #12
 8003a6c:	af00      	add	r7, sp, #0
 8003a6e:	6078      	str	r0, [r7, #4]
  else /* netif is down */
  {
/* USER CODE BEGIN 6 */
/* USER CODE END 6 */
  }
}
 8003a70:	bf00      	nop
 8003a72:	370c      	adds	r7, #12
 8003a74:	46bd      	mov	sp, r7
 8003a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a7a:	4770      	bx	lr

08003a7c <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 8003a7c:	b580      	push	{r7, lr}
 8003a7e:	b084      	sub	sp, #16
 8003a80:	af00      	add	r7, sp, #0
 8003a82:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_eth_init_status = HAL_OK;
 8003a84:	2300      	movs	r3, #0
 8003a86:	73fb      	strb	r3, [r7, #15]
  /* Start ETH HAL Init */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 8003a88:	4b40      	ldr	r3, [pc, #256]	; (8003b8c <low_level_init+0x110>)
 8003a8a:	4a41      	ldr	r2, [pc, #260]	; (8003b90 <low_level_init+0x114>)
 8003a8c:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8003a8e:	2300      	movs	r3, #0
 8003a90:	723b      	strb	r3, [r7, #8]
  MACAddr[1] = 0x80;
 8003a92:	2380      	movs	r3, #128	; 0x80
 8003a94:	727b      	strb	r3, [r7, #9]
  MACAddr[2] = 0xE1;
 8003a96:	23e1      	movs	r3, #225	; 0xe1
 8003a98:	72bb      	strb	r3, [r7, #10]
  MACAddr[3] = 0x00;
 8003a9a:	2300      	movs	r3, #0
 8003a9c:	72fb      	strb	r3, [r7, #11]
  MACAddr[4] = 0x00;
 8003a9e:	2300      	movs	r3, #0
 8003aa0:	733b      	strb	r3, [r7, #12]
  MACAddr[5] = 0x00;
 8003aa2:	2300      	movs	r3, #0
 8003aa4:	737b      	strb	r3, [r7, #13]
  heth.Init.MACAddr = &MACAddr[0];
 8003aa6:	4a39      	ldr	r2, [pc, #228]	; (8003b8c <low_level_init+0x110>)
 8003aa8:	f107 0308 	add.w	r3, r7, #8
 8003aac:	6053      	str	r3, [r2, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8003aae:	4b37      	ldr	r3, [pc, #220]	; (8003b8c <low_level_init+0x110>)
 8003ab0:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8003ab4:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8003ab6:	4b35      	ldr	r3, [pc, #212]	; (8003b8c <low_level_init+0x110>)
 8003ab8:	4a36      	ldr	r2, [pc, #216]	; (8003b94 <low_level_init+0x118>)
 8003aba:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8003abc:	4b33      	ldr	r3, [pc, #204]	; (8003b8c <low_level_init+0x110>)
 8003abe:	4a36      	ldr	r2, [pc, #216]	; (8003b98 <low_level_init+0x11c>)
 8003ac0:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1536;
 8003ac2:	4b32      	ldr	r3, [pc, #200]	; (8003b8c <low_level_init+0x110>)
 8003ac4:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 8003ac8:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 8003aca:	4830      	ldr	r0, [pc, #192]	; (8003b8c <low_level_init+0x110>)
 8003acc:	f7fd fb84 	bl	80011d8 <HAL_ETH_Init>
 8003ad0:	4603      	mov	r3, r0
 8003ad2:	73fb      	strb	r3, [r7, #15]

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8003ad4:	2238      	movs	r2, #56	; 0x38
 8003ad6:	2100      	movs	r1, #0
 8003ad8:	4830      	ldr	r0, [pc, #192]	; (8003b9c <low_level_init+0x120>)
 8003ada:	f00a fe61 	bl	800e7a0 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8003ade:	4b2f      	ldr	r3, [pc, #188]	; (8003b9c <low_level_init+0x120>)
 8003ae0:	2221      	movs	r2, #33	; 0x21
 8003ae2:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8003ae4:	4b2d      	ldr	r3, [pc, #180]	; (8003b9c <low_level_init+0x120>)
 8003ae6:	f44f 0240 	mov.w	r2, #12582912	; 0xc00000
 8003aea:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8003aec:	4b2b      	ldr	r3, [pc, #172]	; (8003b9c <low_level_init+0x120>)
 8003aee:	2200      	movs	r2, #0
 8003af0:	611a      	str	r2, [r3, #16]

  /* End ETH HAL Init */

  /* Initialize the RX POOL */
  LWIP_MEMPOOL_INIT(RX_POOL);
 8003af2:	482b      	ldr	r0, [pc, #172]	; (8003ba0 <low_level_init+0x124>)
 8003af4:	f000 ff58 	bl	80049a8 <memp_init_pool>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	2206      	movs	r2, #6
 8003afc:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 8003b00:	4b22      	ldr	r3, [pc, #136]	; (8003b8c <low_level_init+0x110>)
 8003b02:	685b      	ldr	r3, [r3, #4]
 8003b04:	781a      	ldrb	r2, [r3, #0]
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 8003b0c:	4b1f      	ldr	r3, [pc, #124]	; (8003b8c <low_level_init+0x110>)
 8003b0e:	685b      	ldr	r3, [r3, #4]
 8003b10:	785a      	ldrb	r2, [r3, #1]
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 8003b18:	4b1c      	ldr	r3, [pc, #112]	; (8003b8c <low_level_init+0x110>)
 8003b1a:	685b      	ldr	r3, [r3, #4]
 8003b1c:	789a      	ldrb	r2, [r3, #2]
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 8003b24:	4b19      	ldr	r3, [pc, #100]	; (8003b8c <low_level_init+0x110>)
 8003b26:	685b      	ldr	r3, [r3, #4]
 8003b28:	78da      	ldrb	r2, [r3, #3]
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 8003b30:	4b16      	ldr	r3, [pc, #88]	; (8003b8c <low_level_init+0x110>)
 8003b32:	685b      	ldr	r3, [r3, #4]
 8003b34:	791a      	ldrb	r2, [r3, #4]
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 8003b3c:	4b13      	ldr	r3, [pc, #76]	; (8003b8c <low_level_init+0x110>)
 8003b3e:	685b      	ldr	r3, [r3, #4]
 8003b40:	795a      	ldrb	r2, [r3, #5]
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b

  /* maximum transfer unit */
  netif->mtu = ETH_MAX_PAYLOAD;
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8003b4e:	849a      	strh	r2, [r3, #36]	; 0x24

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8003b56:	f043 030a 	orr.w	r3, r3, #10
 8003b5a:	b2da      	uxtb	r2, r3
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

/* USER CODE BEGIN PHY_PRE_CONFIG */

/* USER CODE END PHY_PRE_CONFIG */
  /* Set PHY IO functions */
  LAN8742_RegisterBusIO(&LAN8742, &LAN8742_IOCtx);
 8003b62:	4910      	ldr	r1, [pc, #64]	; (8003ba4 <low_level_init+0x128>)
 8003b64:	4810      	ldr	r0, [pc, #64]	; (8003ba8 <low_level_init+0x12c>)
 8003b66:	f7fd f85a 	bl	8000c1e <LAN8742_RegisterBusIO>

  /* Initialize the LAN8742 ETH PHY */
  LAN8742_Init(&LAN8742);
 8003b6a:	480f      	ldr	r0, [pc, #60]	; (8003ba8 <low_level_init+0x12c>)
 8003b6c:	f7fd f889 	bl	8000c82 <LAN8742_Init>

  if (hal_eth_init_status == HAL_OK)
 8003b70:	7bfb      	ldrb	r3, [r7, #15]
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d103      	bne.n	8003b7e <low_level_init+0x102>
  {
  /* Get link state */
  ethernet_link_check_state(netif);
 8003b76:	6878      	ldr	r0, [r7, #4]
 8003b78:	f000 fa38 	bl	8003fec <ethernet_link_check_state>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */
}
 8003b7c:	e001      	b.n	8003b82 <low_level_init+0x106>
    Error_Handler();
 8003b7e:	f7fc fe7f 	bl	8000880 <Error_Handler>
}
 8003b82:	bf00      	nop
 8003b84:	3710      	adds	r7, #16
 8003b86:	46bd      	mov	sp, r7
 8003b88:	bd80      	pop	{r7, pc}
 8003b8a:	bf00      	nop
 8003b8c:	20004c08 	.word	0x20004c08
 8003b90:	40028000 	.word	0x40028000
 8003b94:	20004b68 	.word	0x20004b68
 8003b98:	20004ac8 	.word	0x20004ac8
 8003b9c:	20004cb8 	.word	0x20004cb8
 8003ba0:	08011de0 	.word	0x08011de0
 8003ba4:	2000000c 	.word	0x2000000c
 8003ba8:	20004cf0 	.word	0x20004cf0

08003bac <low_level_output>:
 *       to become available since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 8003bac:	b580      	push	{r7, lr}
 8003bae:	b092      	sub	sp, #72	; 0x48
 8003bb0:	af00      	add	r7, sp, #0
 8003bb2:	6078      	str	r0, [r7, #4]
 8003bb4:	6039      	str	r1, [r7, #0]
  uint32_t i = 0U;
 8003bb6:	2300      	movs	r3, #0
 8003bb8:	647b      	str	r3, [r7, #68]	; 0x44
  struct pbuf *q = NULL;
 8003bba:	2300      	movs	r3, #0
 8003bbc:	643b      	str	r3, [r7, #64]	; 0x40
  err_t errval = ERR_OK;
 8003bbe:	2300      	movs	r3, #0
 8003bc0:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  ETH_BufferTypeDef Txbuffer[ETH_TX_DESC_CNT] = {0};
 8003bc4:	f107 030c 	add.w	r3, r7, #12
 8003bc8:	2230      	movs	r2, #48	; 0x30
 8003bca:	2100      	movs	r1, #0
 8003bcc:	4618      	mov	r0, r3
 8003bce:	f00a fde7 	bl	800e7a0 <memset>

  memset(Txbuffer, 0 , ETH_TX_DESC_CNT*sizeof(ETH_BufferTypeDef));
 8003bd2:	f107 030c 	add.w	r3, r7, #12
 8003bd6:	2230      	movs	r2, #48	; 0x30
 8003bd8:	2100      	movs	r1, #0
 8003bda:	4618      	mov	r0, r3
 8003bdc:	f00a fde0 	bl	800e7a0 <memset>

  for(q = p; q != NULL; q = q->next)
 8003be0:	683b      	ldr	r3, [r7, #0]
 8003be2:	643b      	str	r3, [r7, #64]	; 0x40
 8003be4:	e045      	b.n	8003c72 <low_level_output+0xc6>
  {
    if(i >= ETH_TX_DESC_CNT)
 8003be6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003be8:	2b03      	cmp	r3, #3
 8003bea:	d902      	bls.n	8003bf2 <low_level_output+0x46>
      return ERR_IF;
 8003bec:	f06f 030b 	mvn.w	r3, #11
 8003bf0:	e055      	b.n	8003c9e <low_level_output+0xf2>

    Txbuffer[i].buffer = q->payload;
 8003bf2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003bf4:	6859      	ldr	r1, [r3, #4]
 8003bf6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003bf8:	4613      	mov	r3, r2
 8003bfa:	005b      	lsls	r3, r3, #1
 8003bfc:	4413      	add	r3, r2
 8003bfe:	009b      	lsls	r3, r3, #2
 8003c00:	3348      	adds	r3, #72	; 0x48
 8003c02:	443b      	add	r3, r7
 8003c04:	3b3c      	subs	r3, #60	; 0x3c
 8003c06:	6019      	str	r1, [r3, #0]
    Txbuffer[i].len = q->len;
 8003c08:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003c0a:	895b      	ldrh	r3, [r3, #10]
 8003c0c:	4619      	mov	r1, r3
 8003c0e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003c10:	4613      	mov	r3, r2
 8003c12:	005b      	lsls	r3, r3, #1
 8003c14:	4413      	add	r3, r2
 8003c16:	009b      	lsls	r3, r3, #2
 8003c18:	3348      	adds	r3, #72	; 0x48
 8003c1a:	443b      	add	r3, r7
 8003c1c:	3b38      	subs	r3, #56	; 0x38
 8003c1e:	6019      	str	r1, [r3, #0]

    if(i>0)
 8003c20:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d011      	beq.n	8003c4a <low_level_output+0x9e>
    {
      Txbuffer[i-1].next = &Txbuffer[i];
 8003c26:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003c28:	1e5a      	subs	r2, r3, #1
 8003c2a:	f107 000c 	add.w	r0, r7, #12
 8003c2e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8003c30:	460b      	mov	r3, r1
 8003c32:	005b      	lsls	r3, r3, #1
 8003c34:	440b      	add	r3, r1
 8003c36:	009b      	lsls	r3, r3, #2
 8003c38:	18c1      	adds	r1, r0, r3
 8003c3a:	4613      	mov	r3, r2
 8003c3c:	005b      	lsls	r3, r3, #1
 8003c3e:	4413      	add	r3, r2
 8003c40:	009b      	lsls	r3, r3, #2
 8003c42:	3348      	adds	r3, #72	; 0x48
 8003c44:	443b      	add	r3, r7
 8003c46:	3b34      	subs	r3, #52	; 0x34
 8003c48:	6019      	str	r1, [r3, #0]
    }

    if(q->next == NULL)
 8003c4a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d109      	bne.n	8003c66 <low_level_output+0xba>
    {
      Txbuffer[i].next = NULL;
 8003c52:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003c54:	4613      	mov	r3, r2
 8003c56:	005b      	lsls	r3, r3, #1
 8003c58:	4413      	add	r3, r2
 8003c5a:	009b      	lsls	r3, r3, #2
 8003c5c:	3348      	adds	r3, #72	; 0x48
 8003c5e:	443b      	add	r3, r7
 8003c60:	3b34      	subs	r3, #52	; 0x34
 8003c62:	2200      	movs	r2, #0
 8003c64:	601a      	str	r2, [r3, #0]
    }

    i++;
 8003c66:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003c68:	3301      	adds	r3, #1
 8003c6a:	647b      	str	r3, [r7, #68]	; 0x44
  for(q = p; q != NULL; q = q->next)
 8003c6c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	643b      	str	r3, [r7, #64]	; 0x40
 8003c72:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	d1b6      	bne.n	8003be6 <low_level_output+0x3a>
  }

  TxConfig.Length = p->tot_len;
 8003c78:	683b      	ldr	r3, [r7, #0]
 8003c7a:	891b      	ldrh	r3, [r3, #8]
 8003c7c:	461a      	mov	r2, r3
 8003c7e:	4b0a      	ldr	r3, [pc, #40]	; (8003ca8 <low_level_output+0xfc>)
 8003c80:	605a      	str	r2, [r3, #4]
  TxConfig.TxBuffer = Txbuffer;
 8003c82:	4a09      	ldr	r2, [pc, #36]	; (8003ca8 <low_level_output+0xfc>)
 8003c84:	f107 030c 	add.w	r3, r7, #12
 8003c88:	6093      	str	r3, [r2, #8]
  TxConfig.pData = p;
 8003c8a:	4a07      	ldr	r2, [pc, #28]	; (8003ca8 <low_level_output+0xfc>)
 8003c8c:	683b      	ldr	r3, [r7, #0]
 8003c8e:	6353      	str	r3, [r2, #52]	; 0x34

  HAL_ETH_Transmit(&heth, &TxConfig, ETH_DMA_TRANSMIT_TIMEOUT);
 8003c90:	2214      	movs	r2, #20
 8003c92:	4905      	ldr	r1, [pc, #20]	; (8003ca8 <low_level_output+0xfc>)
 8003c94:	4805      	ldr	r0, [pc, #20]	; (8003cac <low_level_output+0x100>)
 8003c96:	f7fd fbd5 	bl	8001444 <HAL_ETH_Transmit>

  return errval;
 8003c9a:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 8003c9e:	4618      	mov	r0, r3
 8003ca0:	3748      	adds	r7, #72	; 0x48
 8003ca2:	46bd      	mov	sp, r7
 8003ca4:	bd80      	pop	{r7, pc}
 8003ca6:	bf00      	nop
 8003ca8:	20004cb8 	.word	0x20004cb8
 8003cac:	20004c08 	.word	0x20004c08

08003cb0 <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 8003cb0:	b580      	push	{r7, lr}
 8003cb2:	b084      	sub	sp, #16
 8003cb4:	af00      	add	r7, sp, #0
 8003cb6:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 8003cb8:	2300      	movs	r3, #0
 8003cba:	60fb      	str	r3, [r7, #12]

  if(RxAllocStatus == RX_ALLOC_OK)
 8003cbc:	4b07      	ldr	r3, [pc, #28]	; (8003cdc <low_level_input+0x2c>)
 8003cbe:	781b      	ldrb	r3, [r3, #0]
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d105      	bne.n	8003cd0 <low_level_input+0x20>
  {
    HAL_ETH_ReadData(&heth, (void **)&p);
 8003cc4:	f107 030c 	add.w	r3, r7, #12
 8003cc8:	4619      	mov	r1, r3
 8003cca:	4805      	ldr	r0, [pc, #20]	; (8003ce0 <low_level_input+0x30>)
 8003ccc:	f7fd fc4e 	bl	800156c <HAL_ETH_ReadData>
  }

  return p;
 8003cd0:	68fb      	ldr	r3, [r7, #12]
}
 8003cd2:	4618      	mov	r0, r3
 8003cd4:	3710      	adds	r7, #16
 8003cd6:	46bd      	mov	sp, r7
 8003cd8:	bd80      	pop	{r7, pc}
 8003cda:	bf00      	nop
 8003cdc:	20004ac4 	.word	0x20004ac4
 8003ce0:	20004c08 	.word	0x20004c08

08003ce4 <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input(struct netif *netif)
{
 8003ce4:	b580      	push	{r7, lr}
 8003ce6:	b084      	sub	sp, #16
 8003ce8:	af00      	add	r7, sp, #0
 8003cea:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 8003cec:	2300      	movs	r3, #0
 8003cee:	60fb      	str	r3, [r7, #12]

  do
  {
    p = low_level_input( netif );
 8003cf0:	6878      	ldr	r0, [r7, #4]
 8003cf2:	f7ff ffdd 	bl	8003cb0 <low_level_input>
 8003cf6:	60f8      	str	r0, [r7, #12]
    if (p != NULL)
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d00a      	beq.n	8003d14 <ethernetif_input+0x30>
    {
      if (netif->input( p, netif) != ERR_OK )
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	691b      	ldr	r3, [r3, #16]
 8003d02:	6879      	ldr	r1, [r7, #4]
 8003d04:	68f8      	ldr	r0, [r7, #12]
 8003d06:	4798      	blx	r3
 8003d08:	4603      	mov	r3, r0
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d002      	beq.n	8003d14 <ethernetif_input+0x30>
      {
        pbuf_free(p);
 8003d0e:	68f8      	ldr	r0, [r7, #12]
 8003d10:	f001 fdc6 	bl	80058a0 <pbuf_free>
      }
    }
  } while(p!=NULL);
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d1ea      	bne.n	8003cf0 <ethernetif_input+0xc>
}
 8003d1a:	bf00      	nop
 8003d1c:	bf00      	nop
 8003d1e:	3710      	adds	r7, #16
 8003d20:	46bd      	mov	sp, r7
 8003d22:	bd80      	pop	{r7, pc}

08003d24 <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 8003d24:	b580      	push	{r7, lr}
 8003d26:	b082      	sub	sp, #8
 8003d28:	af00      	add	r7, sp, #0
 8003d2a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d106      	bne.n	8003d40 <ethernetif_init+0x1c>
 8003d32:	4b0e      	ldr	r3, [pc, #56]	; (8003d6c <ethernetif_init+0x48>)
 8003d34:	f44f 72b5 	mov.w	r2, #362	; 0x16a
 8003d38:	490d      	ldr	r1, [pc, #52]	; (8003d70 <ethernetif_init+0x4c>)
 8003d3a:	480e      	ldr	r0, [pc, #56]	; (8003d74 <ethernetif_init+0x50>)
 8003d3c:	f00a fbda 	bl	800e4f4 <iprintf>
   * The last argument should be replaced with your link speed, in units
   * of bits per second.
   */
  // MIB2_INIT_NETIF(netif, snmp_ifType_ethernet_csmacd, LINK_SPEED_OF_YOUR_NETIF_IN_BPS);

  netif->name[0] = IFNAME0;
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	2273      	movs	r2, #115	; 0x73
 8003d44:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
  netif->name[1] = IFNAME1;
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	2274      	movs	r2, #116	; 0x74
 8003d4c:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	4a09      	ldr	r2, [pc, #36]	; (8003d78 <ethernetif_init+0x54>)
 8003d54:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	4a08      	ldr	r2, [pc, #32]	; (8003d7c <ethernetif_init+0x58>)
 8003d5a:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 8003d5c:	6878      	ldr	r0, [r7, #4]
 8003d5e:	f7ff fe8d 	bl	8003a7c <low_level_init>

  return ERR_OK;
 8003d62:	2300      	movs	r3, #0
}
 8003d64:	4618      	mov	r0, r3
 8003d66:	3708      	adds	r7, #8
 8003d68:	46bd      	mov	sp, r7
 8003d6a:	bd80      	pop	{r7, pc}
 8003d6c:	0800f3e8 	.word	0x0800f3e8
 8003d70:	0800f404 	.word	0x0800f404
 8003d74:	0800f414 	.word	0x0800f414
 8003d78:	0800c625 	.word	0x0800c625
 8003d7c:	08003bad 	.word	0x08003bad

08003d80 <pbuf_free_custom>:
  * @brief  Custom Rx pbuf free callback
  * @param  pbuf: pbuf to be freed
  * @retval None
  */
void pbuf_free_custom(struct pbuf *p)
{
 8003d80:	b580      	push	{r7, lr}
 8003d82:	b084      	sub	sp, #16
 8003d84:	af00      	add	r7, sp, #0
 8003d86:	6078      	str	r0, [r7, #4]
  struct pbuf_custom* custom_pbuf = (struct pbuf_custom*)p;
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	60fb      	str	r3, [r7, #12]
  LWIP_MEMPOOL_FREE(RX_POOL, custom_pbuf);
 8003d8c:	68f9      	ldr	r1, [r7, #12]
 8003d8e:	4807      	ldr	r0, [pc, #28]	; (8003dac <pbuf_free_custom+0x2c>)
 8003d90:	f000 feec 	bl	8004b6c <memp_free_pool>

  /* If the Rx Buffer Pool was exhausted, signal the ethernetif_input task to
   * call HAL_ETH_GetRxDataBuffer to rebuild the Rx descriptors. */

  if (RxAllocStatus == RX_ALLOC_ERROR)
 8003d94:	4b06      	ldr	r3, [pc, #24]	; (8003db0 <pbuf_free_custom+0x30>)
 8003d96:	781b      	ldrb	r3, [r3, #0]
 8003d98:	2b01      	cmp	r3, #1
 8003d9a:	d102      	bne.n	8003da2 <pbuf_free_custom+0x22>
  {
    RxAllocStatus = RX_ALLOC_OK;
 8003d9c:	4b04      	ldr	r3, [pc, #16]	; (8003db0 <pbuf_free_custom+0x30>)
 8003d9e:	2200      	movs	r2, #0
 8003da0:	701a      	strb	r2, [r3, #0]
  }
}
 8003da2:	bf00      	nop
 8003da4:	3710      	adds	r7, #16
 8003da6:	46bd      	mov	sp, r7
 8003da8:	bd80      	pop	{r7, pc}
 8003daa:	bf00      	nop
 8003dac:	08011de0 	.word	0x08011de0
 8003db0:	20004ac4 	.word	0x20004ac4

08003db4 <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Current Time value
*/
u32_t sys_now(void)
{
 8003db4:	b580      	push	{r7, lr}
 8003db6:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8003db8:	f7fd f8f8 	bl	8000fac <HAL_GetTick>
 8003dbc:	4603      	mov	r3, r0
}
 8003dbe:	4618      	mov	r0, r3
 8003dc0:	bd80      	pop	{r7, pc}
	...

08003dc4 <HAL_ETH_MspInit>:
  * @param  ethHandle: ETH handle
  * @retval None
  */

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 8003dc4:	b580      	push	{r7, lr}
 8003dc6:	b08e      	sub	sp, #56	; 0x38
 8003dc8:	af00      	add	r7, sp, #0
 8003dca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003dcc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003dd0:	2200      	movs	r2, #0
 8003dd2:	601a      	str	r2, [r3, #0]
 8003dd4:	605a      	str	r2, [r3, #4]
 8003dd6:	609a      	str	r2, [r3, #8]
 8003dd8:	60da      	str	r2, [r3, #12]
 8003dda:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	4a55      	ldr	r2, [pc, #340]	; (8003f38 <HAL_ETH_MspInit+0x174>)
 8003de2:	4293      	cmp	r3, r2
 8003de4:	f040 80a4 	bne.w	8003f30 <HAL_ETH_MspInit+0x16c>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH_CLK_ENABLE();
 8003de8:	2300      	movs	r3, #0
 8003dea:	623b      	str	r3, [r7, #32]
 8003dec:	4b53      	ldr	r3, [pc, #332]	; (8003f3c <HAL_ETH_MspInit+0x178>)
 8003dee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003df0:	4a52      	ldr	r2, [pc, #328]	; (8003f3c <HAL_ETH_MspInit+0x178>)
 8003df2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003df6:	6313      	str	r3, [r2, #48]	; 0x30
 8003df8:	4b50      	ldr	r3, [pc, #320]	; (8003f3c <HAL_ETH_MspInit+0x178>)
 8003dfa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003dfc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e00:	623b      	str	r3, [r7, #32]
 8003e02:	6a3b      	ldr	r3, [r7, #32]
 8003e04:	2300      	movs	r3, #0
 8003e06:	61fb      	str	r3, [r7, #28]
 8003e08:	4b4c      	ldr	r3, [pc, #304]	; (8003f3c <HAL_ETH_MspInit+0x178>)
 8003e0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e0c:	4a4b      	ldr	r2, [pc, #300]	; (8003f3c <HAL_ETH_MspInit+0x178>)
 8003e0e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003e12:	6313      	str	r3, [r2, #48]	; 0x30
 8003e14:	4b49      	ldr	r3, [pc, #292]	; (8003f3c <HAL_ETH_MspInit+0x178>)
 8003e16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e18:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003e1c:	61fb      	str	r3, [r7, #28]
 8003e1e:	69fb      	ldr	r3, [r7, #28]
 8003e20:	2300      	movs	r3, #0
 8003e22:	61bb      	str	r3, [r7, #24]
 8003e24:	4b45      	ldr	r3, [pc, #276]	; (8003f3c <HAL_ETH_MspInit+0x178>)
 8003e26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e28:	4a44      	ldr	r2, [pc, #272]	; (8003f3c <HAL_ETH_MspInit+0x178>)
 8003e2a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003e2e:	6313      	str	r3, [r2, #48]	; 0x30
 8003e30:	4b42      	ldr	r3, [pc, #264]	; (8003f3c <HAL_ETH_MspInit+0x178>)
 8003e32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e34:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003e38:	61bb      	str	r3, [r7, #24]
 8003e3a:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003e3c:	2300      	movs	r3, #0
 8003e3e:	617b      	str	r3, [r7, #20]
 8003e40:	4b3e      	ldr	r3, [pc, #248]	; (8003f3c <HAL_ETH_MspInit+0x178>)
 8003e42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e44:	4a3d      	ldr	r2, [pc, #244]	; (8003f3c <HAL_ETH_MspInit+0x178>)
 8003e46:	f043 0304 	orr.w	r3, r3, #4
 8003e4a:	6313      	str	r3, [r2, #48]	; 0x30
 8003e4c:	4b3b      	ldr	r3, [pc, #236]	; (8003f3c <HAL_ETH_MspInit+0x178>)
 8003e4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e50:	f003 0304 	and.w	r3, r3, #4
 8003e54:	617b      	str	r3, [r7, #20]
 8003e56:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003e58:	2300      	movs	r3, #0
 8003e5a:	613b      	str	r3, [r7, #16]
 8003e5c:	4b37      	ldr	r3, [pc, #220]	; (8003f3c <HAL_ETH_MspInit+0x178>)
 8003e5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e60:	4a36      	ldr	r2, [pc, #216]	; (8003f3c <HAL_ETH_MspInit+0x178>)
 8003e62:	f043 0301 	orr.w	r3, r3, #1
 8003e66:	6313      	str	r3, [r2, #48]	; 0x30
 8003e68:	4b34      	ldr	r3, [pc, #208]	; (8003f3c <HAL_ETH_MspInit+0x178>)
 8003e6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e6c:	f003 0301 	and.w	r3, r3, #1
 8003e70:	613b      	str	r3, [r7, #16]
 8003e72:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003e74:	2300      	movs	r3, #0
 8003e76:	60fb      	str	r3, [r7, #12]
 8003e78:	4b30      	ldr	r3, [pc, #192]	; (8003f3c <HAL_ETH_MspInit+0x178>)
 8003e7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e7c:	4a2f      	ldr	r2, [pc, #188]	; (8003f3c <HAL_ETH_MspInit+0x178>)
 8003e7e:	f043 0302 	orr.w	r3, r3, #2
 8003e82:	6313      	str	r3, [r2, #48]	; 0x30
 8003e84:	4b2d      	ldr	r3, [pc, #180]	; (8003f3c <HAL_ETH_MspInit+0x178>)
 8003e86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e88:	f003 0302 	and.w	r3, r3, #2
 8003e8c:	60fb      	str	r3, [r7, #12]
 8003e8e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8003e90:	2300      	movs	r3, #0
 8003e92:	60bb      	str	r3, [r7, #8]
 8003e94:	4b29      	ldr	r3, [pc, #164]	; (8003f3c <HAL_ETH_MspInit+0x178>)
 8003e96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e98:	4a28      	ldr	r2, [pc, #160]	; (8003f3c <HAL_ETH_MspInit+0x178>)
 8003e9a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003e9e:	6313      	str	r3, [r2, #48]	; 0x30
 8003ea0:	4b26      	ldr	r3, [pc, #152]	; (8003f3c <HAL_ETH_MspInit+0x178>)
 8003ea2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ea4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ea8:	60bb      	str	r3, [r7, #8]
 8003eaa:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8003eac:	2332      	movs	r3, #50	; 0x32
 8003eae:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003eb0:	2302      	movs	r3, #2
 8003eb2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003eb4:	2300      	movs	r3, #0
 8003eb6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003eb8:	2303      	movs	r3, #3
 8003eba:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8003ebc:	230b      	movs	r3, #11
 8003ebe:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003ec0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003ec4:	4619      	mov	r1, r3
 8003ec6:	481e      	ldr	r0, [pc, #120]	; (8003f40 <HAL_ETH_MspInit+0x17c>)
 8003ec8:	f7fe fa7c 	bl	80023c4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8003ecc:	2386      	movs	r3, #134	; 0x86
 8003ece:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003ed0:	2302      	movs	r3, #2
 8003ed2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ed4:	2300      	movs	r3, #0
 8003ed6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003ed8:	2303      	movs	r3, #3
 8003eda:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8003edc:	230b      	movs	r3, #11
 8003ede:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003ee0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003ee4:	4619      	mov	r1, r3
 8003ee6:	4817      	ldr	r0, [pc, #92]	; (8003f44 <HAL_ETH_MspInit+0x180>)
 8003ee8:	f7fe fa6c 	bl	80023c4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8003eec:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003ef0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003ef2:	2302      	movs	r3, #2
 8003ef4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ef6:	2300      	movs	r3, #0
 8003ef8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003efa:	2303      	movs	r3, #3
 8003efc:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8003efe:	230b      	movs	r3, #11
 8003f00:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8003f02:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003f06:	4619      	mov	r1, r3
 8003f08:	480f      	ldr	r0, [pc, #60]	; (8003f48 <HAL_ETH_MspInit+0x184>)
 8003f0a:	f7fe fa5b 	bl	80023c4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8003f0e:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8003f12:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003f14:	2302      	movs	r3, #2
 8003f16:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f18:	2300      	movs	r3, #0
 8003f1a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003f1c:	2303      	movs	r3, #3
 8003f1e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8003f20:	230b      	movs	r3, #11
 8003f22:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8003f24:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003f28:	4619      	mov	r1, r3
 8003f2a:	4808      	ldr	r0, [pc, #32]	; (8003f4c <HAL_ETH_MspInit+0x188>)
 8003f2c:	f7fe fa4a 	bl	80023c4 <HAL_GPIO_Init>

  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 8003f30:	bf00      	nop
 8003f32:	3738      	adds	r7, #56	; 0x38
 8003f34:	46bd      	mov	sp, r7
 8003f36:	bd80      	pop	{r7, pc}
 8003f38:	40028000 	.word	0x40028000
 8003f3c:	40023800 	.word	0x40023800
 8003f40:	40020800 	.word	0x40020800
 8003f44:	40020000 	.word	0x40020000
 8003f48:	40020400 	.word	0x40020400
 8003f4c:	40021800 	.word	0x40021800

08003f50 <ETH_PHY_IO_Init>:
  * @brief  Initializes the MDIO interface GPIO and clocks.
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_Init(void)
{
 8003f50:	b580      	push	{r7, lr}
 8003f52:	af00      	add	r7, sp, #0
  /* We assume that MDIO GPIO configuration is already done
     in the ETH_MspInit() else it should be done here
  */

  /* Configure the MDIO Clock */
  HAL_ETH_SetMDIOClockRange(&heth);
 8003f54:	4802      	ldr	r0, [pc, #8]	; (8003f60 <ETH_PHY_IO_Init+0x10>)
 8003f56:	f7fd fdd9 	bl	8001b0c <HAL_ETH_SetMDIOClockRange>

  return 0;
 8003f5a:	2300      	movs	r3, #0
}
 8003f5c:	4618      	mov	r0, r3
 8003f5e:	bd80      	pop	{r7, pc}
 8003f60:	20004c08 	.word	0x20004c08

08003f64 <ETH_PHY_IO_DeInit>:
  * @brief  De-Initializes the MDIO interface .
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_DeInit (void)
{
 8003f64:	b480      	push	{r7}
 8003f66:	af00      	add	r7, sp, #0
  return 0;
 8003f68:	2300      	movs	r3, #0
}
 8003f6a:	4618      	mov	r0, r3
 8003f6c:	46bd      	mov	sp, r7
 8003f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f72:	4770      	bx	lr

08003f74 <ETH_PHY_IO_ReadReg>:
  * @param  RegAddr: PHY register address
  * @param  pRegVal: pointer to hold the register value
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_ReadReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t *pRegVal)
{
 8003f74:	b580      	push	{r7, lr}
 8003f76:	b084      	sub	sp, #16
 8003f78:	af00      	add	r7, sp, #0
 8003f7a:	60f8      	str	r0, [r7, #12]
 8003f7c:	60b9      	str	r1, [r7, #8]
 8003f7e:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_ReadPHYRegister(&heth, DevAddr, RegAddr, pRegVal) != HAL_OK)
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	68ba      	ldr	r2, [r7, #8]
 8003f84:	68f9      	ldr	r1, [r7, #12]
 8003f86:	4807      	ldr	r0, [pc, #28]	; (8003fa4 <ETH_PHY_IO_ReadReg+0x30>)
 8003f88:	f7fd fc28 	bl	80017dc <HAL_ETH_ReadPHYRegister>
 8003f8c:	4603      	mov	r3, r0
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d002      	beq.n	8003f98 <ETH_PHY_IO_ReadReg+0x24>
  {
    return -1;
 8003f92:	f04f 33ff 	mov.w	r3, #4294967295
 8003f96:	e000      	b.n	8003f9a <ETH_PHY_IO_ReadReg+0x26>
  }

  return 0;
 8003f98:	2300      	movs	r3, #0
}
 8003f9a:	4618      	mov	r0, r3
 8003f9c:	3710      	adds	r7, #16
 8003f9e:	46bd      	mov	sp, r7
 8003fa0:	bd80      	pop	{r7, pc}
 8003fa2:	bf00      	nop
 8003fa4:	20004c08 	.word	0x20004c08

08003fa8 <ETH_PHY_IO_WriteReg>:
  * @param  RegAddr: PHY register address
  * @param  RegVal: Value to be written
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_WriteReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t RegVal)
{
 8003fa8:	b580      	push	{r7, lr}
 8003faa:	b084      	sub	sp, #16
 8003fac:	af00      	add	r7, sp, #0
 8003fae:	60f8      	str	r0, [r7, #12]
 8003fb0:	60b9      	str	r1, [r7, #8]
 8003fb2:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_WritePHYRegister(&heth, DevAddr, RegAddr, RegVal) != HAL_OK)
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	68ba      	ldr	r2, [r7, #8]
 8003fb8:	68f9      	ldr	r1, [r7, #12]
 8003fba:	4807      	ldr	r0, [pc, #28]	; (8003fd8 <ETH_PHY_IO_WriteReg+0x30>)
 8003fbc:	f7fd fc59 	bl	8001872 <HAL_ETH_WritePHYRegister>
 8003fc0:	4603      	mov	r3, r0
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d002      	beq.n	8003fcc <ETH_PHY_IO_WriteReg+0x24>
  {
    return -1;
 8003fc6:	f04f 33ff 	mov.w	r3, #4294967295
 8003fca:	e000      	b.n	8003fce <ETH_PHY_IO_WriteReg+0x26>
  }

  return 0;
 8003fcc:	2300      	movs	r3, #0
}
 8003fce:	4618      	mov	r0, r3
 8003fd0:	3710      	adds	r7, #16
 8003fd2:	46bd      	mov	sp, r7
 8003fd4:	bd80      	pop	{r7, pc}
 8003fd6:	bf00      	nop
 8003fd8:	20004c08 	.word	0x20004c08

08003fdc <ETH_PHY_IO_GetTick>:
/**
  * @brief  Get the time in millisecons used for internal PHY driver process.
  * @retval Time value
  */
int32_t ETH_PHY_IO_GetTick(void)
{
 8003fdc:	b580      	push	{r7, lr}
 8003fde:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8003fe0:	f7fc ffe4 	bl	8000fac <HAL_GetTick>
 8003fe4:	4603      	mov	r3, r0
}
 8003fe6:	4618      	mov	r0, r3
 8003fe8:	bd80      	pop	{r7, pc}
	...

08003fec <ethernet_link_check_state>:
/**
  * @brief  Check the ETH link state then update ETH driver and netif link accordingly.
  * @retval None
  */
void ethernet_link_check_state(struct netif *netif)
{
 8003fec:	b580      	push	{r7, lr}
 8003fee:	b0a0      	sub	sp, #128	; 0x80
 8003ff0:	af00      	add	r7, sp, #0
 8003ff2:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef MACConf = {0};
 8003ff4:	f107 030c 	add.w	r3, r7, #12
 8003ff8:	2264      	movs	r2, #100	; 0x64
 8003ffa:	2100      	movs	r1, #0
 8003ffc:	4618      	mov	r0, r3
 8003ffe:	f00a fbcf 	bl	800e7a0 <memset>
  int32_t PHYLinkState = 0;
 8004002:	2300      	movs	r3, #0
 8004004:	673b      	str	r3, [r7, #112]	; 0x70
  uint32_t linkchanged = 0U, speed = 0U, duplex = 0U;
 8004006:	2300      	movs	r3, #0
 8004008:	67fb      	str	r3, [r7, #124]	; 0x7c
 800400a:	2300      	movs	r3, #0
 800400c:	67bb      	str	r3, [r7, #120]	; 0x78
 800400e:	2300      	movs	r3, #0
 8004010:	677b      	str	r3, [r7, #116]	; 0x74

  PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 8004012:	483a      	ldr	r0, [pc, #232]	; (80040fc <ethernet_link_check_state+0x110>)
 8004014:	f7fc fedd 	bl	8000dd2 <LAN8742_GetLinkState>
 8004018:	6738      	str	r0, [r7, #112]	; 0x70

  if(netif_is_link_up(netif) && (PHYLinkState <= LAN8742_STATUS_LINK_DOWN))
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8004020:	089b      	lsrs	r3, r3, #2
 8004022:	f003 0301 	and.w	r3, r3, #1
 8004026:	b2db      	uxtb	r3, r3
 8004028:	2b00      	cmp	r3, #0
 800402a:	d00c      	beq.n	8004046 <ethernet_link_check_state+0x5a>
 800402c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800402e:	2b01      	cmp	r3, #1
 8004030:	dc09      	bgt.n	8004046 <ethernet_link_check_state+0x5a>
  {
    HAL_ETH_Stop(&heth);
 8004032:	4833      	ldr	r0, [pc, #204]	; (8004100 <ethernet_link_check_state+0x114>)
 8004034:	f7fd f9ad 	bl	8001392 <HAL_ETH_Stop>
    netif_set_down(netif);
 8004038:	6878      	ldr	r0, [r7, #4]
 800403a:	f001 f81b 	bl	8005074 <netif_set_down>
    netif_set_link_down(netif);
 800403e:	6878      	ldr	r0, [r7, #4]
 8004040:	f001 f87e 	bl	8005140 <netif_set_link_down>
      netif_set_up(netif);
      netif_set_link_up(netif);
    }
  }

}
 8004044:	e055      	b.n	80040f2 <ethernet_link_check_state+0x106>
  else if(!netif_is_link_up(netif) && (PHYLinkState > LAN8742_STATUS_LINK_DOWN))
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800404c:	f003 0304 	and.w	r3, r3, #4
 8004050:	2b00      	cmp	r3, #0
 8004052:	d14e      	bne.n	80040f2 <ethernet_link_check_state+0x106>
 8004054:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004056:	2b01      	cmp	r3, #1
 8004058:	dd4b      	ble.n	80040f2 <ethernet_link_check_state+0x106>
    switch (PHYLinkState)
 800405a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800405c:	3b02      	subs	r3, #2
 800405e:	2b03      	cmp	r3, #3
 8004060:	d82a      	bhi.n	80040b8 <ethernet_link_check_state+0xcc>
 8004062:	a201      	add	r2, pc, #4	; (adr r2, 8004068 <ethernet_link_check_state+0x7c>)
 8004064:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004068:	08004079 	.word	0x08004079
 800406c:	0800408b 	.word	0x0800408b
 8004070:	0800409b 	.word	0x0800409b
 8004074:	080040ab 	.word	0x080040ab
      duplex = ETH_FULLDUPLEX_MODE;
 8004078:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800407c:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_100M;
 800407e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8004082:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 8004084:	2301      	movs	r3, #1
 8004086:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 8004088:	e017      	b.n	80040ba <ethernet_link_check_state+0xce>
      duplex = ETH_HALFDUPLEX_MODE;
 800408a:	2300      	movs	r3, #0
 800408c:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_100M;
 800408e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8004092:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 8004094:	2301      	movs	r3, #1
 8004096:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 8004098:	e00f      	b.n	80040ba <ethernet_link_check_state+0xce>
      duplex = ETH_FULLDUPLEX_MODE;
 800409a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800409e:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_10M;
 80040a0:	2300      	movs	r3, #0
 80040a2:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 80040a4:	2301      	movs	r3, #1
 80040a6:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 80040a8:	e007      	b.n	80040ba <ethernet_link_check_state+0xce>
      duplex = ETH_HALFDUPLEX_MODE;
 80040aa:	2300      	movs	r3, #0
 80040ac:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_10M;
 80040ae:	2300      	movs	r3, #0
 80040b0:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 80040b2:	2301      	movs	r3, #1
 80040b4:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 80040b6:	e000      	b.n	80040ba <ethernet_link_check_state+0xce>
      break;
 80040b8:	bf00      	nop
    if(linkchanged)
 80040ba:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d018      	beq.n	80040f2 <ethernet_link_check_state+0x106>
      HAL_ETH_GetMACConfig(&heth, &MACConf);
 80040c0:	f107 030c 	add.w	r3, r7, #12
 80040c4:	4619      	mov	r1, r3
 80040c6:	480e      	ldr	r0, [pc, #56]	; (8004100 <ethernet_link_check_state+0x114>)
 80040c8:	f7fd fc1c 	bl	8001904 <HAL_ETH_GetMACConfig>
      MACConf.DuplexMode = duplex;
 80040cc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80040ce:	627b      	str	r3, [r7, #36]	; 0x24
      MACConf.Speed = speed;
 80040d0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80040d2:	623b      	str	r3, [r7, #32]
      HAL_ETH_SetMACConfig(&heth, &MACConf);
 80040d4:	f107 030c 	add.w	r3, r7, #12
 80040d8:	4619      	mov	r1, r3
 80040da:	4809      	ldr	r0, [pc, #36]	; (8004100 <ethernet_link_check_state+0x114>)
 80040dc:	f7fd fcfc 	bl	8001ad8 <HAL_ETH_SetMACConfig>
      HAL_ETH_Start(&heth);
 80040e0:	4807      	ldr	r0, [pc, #28]	; (8004100 <ethernet_link_check_state+0x114>)
 80040e2:	f7fd f8f7 	bl	80012d4 <HAL_ETH_Start>
      netif_set_up(netif);
 80040e6:	6878      	ldr	r0, [r7, #4]
 80040e8:	f000 ff58 	bl	8004f9c <netif_set_up>
      netif_set_link_up(netif);
 80040ec:	6878      	ldr	r0, [r7, #4]
 80040ee:	f000 fff3 	bl	80050d8 <netif_set_link_up>
}
 80040f2:	bf00      	nop
 80040f4:	3780      	adds	r7, #128	; 0x80
 80040f6:	46bd      	mov	sp, r7
 80040f8:	bd80      	pop	{r7, pc}
 80040fa:	bf00      	nop
 80040fc:	20004cf0 	.word	0x20004cf0
 8004100:	20004c08 	.word	0x20004c08

08004104 <HAL_ETH_RxAllocateCallback>:

void HAL_ETH_RxAllocateCallback(uint8_t **buff)
{
 8004104:	b580      	push	{r7, lr}
 8004106:	b086      	sub	sp, #24
 8004108:	af02      	add	r7, sp, #8
 800410a:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN HAL ETH RxAllocateCallback */
  struct pbuf_custom *p = LWIP_MEMPOOL_ALLOC(RX_POOL);
 800410c:	4812      	ldr	r0, [pc, #72]	; (8004158 <HAL_ETH_RxAllocateCallback+0x54>)
 800410e:	f000 fcbf 	bl	8004a90 <memp_malloc_pool>
 8004112:	60f8      	str	r0, [r7, #12]
  if (p)
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	2b00      	cmp	r3, #0
 8004118:	d014      	beq.n	8004144 <HAL_ETH_RxAllocateCallback+0x40>
  {
    /* Get the buff from the struct pbuf address. */
    *buff = (uint8_t *)p + offsetof(RxBuff_t, buff);
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	f103 0220 	add.w	r2, r3, #32
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	601a      	str	r2, [r3, #0]
    p->custom_free_function = pbuf_free_custom;
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	4a0d      	ldr	r2, [pc, #52]	; (800415c <HAL_ETH_RxAllocateCallback+0x58>)
 8004128:	611a      	str	r2, [r3, #16]
    /* Initialize the struct pbuf.
    * This must be performed whenever a buffer's allocated because it may be
    * changed by lwIP or the app, e.g., pbuf_free decrements ref. */
    pbuf_alloced_custom(PBUF_RAW, 0, PBUF_REF, p, *buff, ETH_RX_BUF_SIZE);
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 8004132:	9201      	str	r2, [sp, #4]
 8004134:	9300      	str	r3, [sp, #0]
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	2241      	movs	r2, #65	; 0x41
 800413a:	2100      	movs	r1, #0
 800413c:	2000      	movs	r0, #0
 800413e:	f001 f9f5 	bl	800552c <pbuf_alloced_custom>
  {
    RxAllocStatus = RX_ALLOC_ERROR;
    *buff = NULL;
  }
/* USER CODE END HAL ETH RxAllocateCallback */
}
 8004142:	e005      	b.n	8004150 <HAL_ETH_RxAllocateCallback+0x4c>
    RxAllocStatus = RX_ALLOC_ERROR;
 8004144:	4b06      	ldr	r3, [pc, #24]	; (8004160 <HAL_ETH_RxAllocateCallback+0x5c>)
 8004146:	2201      	movs	r2, #1
 8004148:	701a      	strb	r2, [r3, #0]
    *buff = NULL;
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	2200      	movs	r2, #0
 800414e:	601a      	str	r2, [r3, #0]
}
 8004150:	bf00      	nop
 8004152:	3710      	adds	r7, #16
 8004154:	46bd      	mov	sp, r7
 8004156:	bd80      	pop	{r7, pc}
 8004158:	08011de0 	.word	0x08011de0
 800415c:	08003d81 	.word	0x08003d81
 8004160:	20004ac4 	.word	0x20004ac4

08004164 <HAL_ETH_RxLinkCallback>:

void HAL_ETH_RxLinkCallback(void **pStart, void **pEnd, uint8_t *buff, uint16_t Length)
{
 8004164:	b480      	push	{r7}
 8004166:	b089      	sub	sp, #36	; 0x24
 8004168:	af00      	add	r7, sp, #0
 800416a:	60f8      	str	r0, [r7, #12]
 800416c:	60b9      	str	r1, [r7, #8]
 800416e:	607a      	str	r2, [r7, #4]
 8004170:	807b      	strh	r3, [r7, #2]
/* USER CODE BEGIN HAL ETH RxLinkCallback */

  struct pbuf **ppStart = (struct pbuf **)pStart;
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	61bb      	str	r3, [r7, #24]
  struct pbuf **ppEnd = (struct pbuf **)pEnd;
 8004176:	68bb      	ldr	r3, [r7, #8]
 8004178:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 800417a:	2300      	movs	r3, #0
 800417c:	61fb      	str	r3, [r7, #28]

  /* Get the struct pbuf from the buff address. */
  p = (struct pbuf *)(buff - offsetof(RxBuff_t, buff));
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	3b20      	subs	r3, #32
 8004182:	61fb      	str	r3, [r7, #28]
  p->next = NULL;
 8004184:	69fb      	ldr	r3, [r7, #28]
 8004186:	2200      	movs	r2, #0
 8004188:	601a      	str	r2, [r3, #0]
  p->tot_len = 0;
 800418a:	69fb      	ldr	r3, [r7, #28]
 800418c:	2200      	movs	r2, #0
 800418e:	811a      	strh	r2, [r3, #8]
  p->len = Length;
 8004190:	69fb      	ldr	r3, [r7, #28]
 8004192:	887a      	ldrh	r2, [r7, #2]
 8004194:	815a      	strh	r2, [r3, #10]

  /* Chain the buffer. */
  if (!*ppStart)
 8004196:	69bb      	ldr	r3, [r7, #24]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	2b00      	cmp	r3, #0
 800419c:	d103      	bne.n	80041a6 <HAL_ETH_RxLinkCallback+0x42>
  {
    /* The first buffer of the packet. */
    *ppStart = p;
 800419e:	69bb      	ldr	r3, [r7, #24]
 80041a0:	69fa      	ldr	r2, [r7, #28]
 80041a2:	601a      	str	r2, [r3, #0]
 80041a4:	e003      	b.n	80041ae <HAL_ETH_RxLinkCallback+0x4a>
  }
  else
  {
    /* Chain the buffer to the end of the packet. */
    (*ppEnd)->next = p;
 80041a6:	697b      	ldr	r3, [r7, #20]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	69fa      	ldr	r2, [r7, #28]
 80041ac:	601a      	str	r2, [r3, #0]
  }
  *ppEnd  = p;
 80041ae:	697b      	ldr	r3, [r7, #20]
 80041b0:	69fa      	ldr	r2, [r7, #28]
 80041b2:	601a      	str	r2, [r3, #0]

  /* Update the total length of all the buffers of the chain. Each pbuf in the chain should have its tot_len
   * set to its own length, plus the length of all the following pbufs in the chain. */
  for (p = *ppStart; p != NULL; p = p->next)
 80041b4:	69bb      	ldr	r3, [r7, #24]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	61fb      	str	r3, [r7, #28]
 80041ba:	e009      	b.n	80041d0 <HAL_ETH_RxLinkCallback+0x6c>
  {
    p->tot_len += Length;
 80041bc:	69fb      	ldr	r3, [r7, #28]
 80041be:	891a      	ldrh	r2, [r3, #8]
 80041c0:	887b      	ldrh	r3, [r7, #2]
 80041c2:	4413      	add	r3, r2
 80041c4:	b29a      	uxth	r2, r3
 80041c6:	69fb      	ldr	r3, [r7, #28]
 80041c8:	811a      	strh	r2, [r3, #8]
  for (p = *ppStart; p != NULL; p = p->next)
 80041ca:	69fb      	ldr	r3, [r7, #28]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	61fb      	str	r3, [r7, #28]
 80041d0:	69fb      	ldr	r3, [r7, #28]
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d1f2      	bne.n	80041bc <HAL_ETH_RxLinkCallback+0x58>
  }

/* USER CODE END HAL ETH RxLinkCallback */
}
 80041d6:	bf00      	nop
 80041d8:	bf00      	nop
 80041da:	3724      	adds	r7, #36	; 0x24
 80041dc:	46bd      	mov	sp, r7
 80041de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041e2:	4770      	bx	lr

080041e4 <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 80041e4:	b480      	push	{r7}
 80041e6:	b083      	sub	sp, #12
 80041e8:	af00      	add	r7, sp, #0
 80041ea:	4603      	mov	r3, r0
 80041ec:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 80041ee:	88fb      	ldrh	r3, [r7, #6]
 80041f0:	021b      	lsls	r3, r3, #8
 80041f2:	b21a      	sxth	r2, r3
 80041f4:	88fb      	ldrh	r3, [r7, #6]
 80041f6:	0a1b      	lsrs	r3, r3, #8
 80041f8:	b29b      	uxth	r3, r3
 80041fa:	b21b      	sxth	r3, r3
 80041fc:	4313      	orrs	r3, r2
 80041fe:	b21b      	sxth	r3, r3
 8004200:	b29b      	uxth	r3, r3
}
 8004202:	4618      	mov	r0, r3
 8004204:	370c      	adds	r7, #12
 8004206:	46bd      	mov	sp, r7
 8004208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800420c:	4770      	bx	lr

0800420e <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 800420e:	b480      	push	{r7}
 8004210:	b083      	sub	sp, #12
 8004212:	af00      	add	r7, sp, #0
 8004214:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	061a      	lsls	r2, r3, #24
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	021b      	lsls	r3, r3, #8
 800421e:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8004222:	431a      	orrs	r2, r3
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	0a1b      	lsrs	r3, r3, #8
 8004228:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800422c:	431a      	orrs	r2, r3
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	0e1b      	lsrs	r3, r3, #24
 8004232:	4313      	orrs	r3, r2
}
 8004234:	4618      	mov	r0, r3
 8004236:	370c      	adds	r7, #12
 8004238:	46bd      	mov	sp, r7
 800423a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800423e:	4770      	bx	lr

08004240 <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 8004240:	b580      	push	{r7, lr}
 8004242:	b082      	sub	sp, #8
 8004244:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 8004246:	2300      	movs	r3, #0
 8004248:	607b      	str	r3, [r7, #4]
  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
#endif /* !NO_SYS */
  mem_init();
 800424a:	f000 f8d5 	bl	80043f8 <mem_init>
  memp_init();
 800424e:	f000 fbdb 	bl	8004a08 <memp_init>
  pbuf_init();
  netif_init();
 8004252:	f000 fcd9 	bl	8004c08 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 8004256:	f007 f867 	bl	800b328 <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 800425a:	f001 fdbf 	bl	8005ddc <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 800425e:	f006 ffd9 	bl	800b214 <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 8004262:	bf00      	nop
 8004264:	3708      	adds	r7, #8
 8004266:	46bd      	mov	sp, r7
 8004268:	bd80      	pop	{r7, pc}
	...

0800426c <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 800426c:	b480      	push	{r7}
 800426e:	b083      	sub	sp, #12
 8004270:	af00      	add	r7, sp, #0
 8004272:	4603      	mov	r3, r0
 8004274:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 8004276:	4b05      	ldr	r3, [pc, #20]	; (800428c <ptr_to_mem+0x20>)
 8004278:	681a      	ldr	r2, [r3, #0]
 800427a:	88fb      	ldrh	r3, [r7, #6]
 800427c:	4413      	add	r3, r2
}
 800427e:	4618      	mov	r0, r3
 8004280:	370c      	adds	r7, #12
 8004282:	46bd      	mov	sp, r7
 8004284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004288:	4770      	bx	lr
 800428a:	bf00      	nop
 800428c:	2000537c 	.word	0x2000537c

08004290 <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 8004290:	b480      	push	{r7}
 8004292:	b083      	sub	sp, #12
 8004294:	af00      	add	r7, sp, #0
 8004296:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 8004298:	4b05      	ldr	r3, [pc, #20]	; (80042b0 <mem_to_ptr+0x20>)
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	687a      	ldr	r2, [r7, #4]
 800429e:	1ad3      	subs	r3, r2, r3
 80042a0:	b29b      	uxth	r3, r3
}
 80042a2:	4618      	mov	r0, r3
 80042a4:	370c      	adds	r7, #12
 80042a6:	46bd      	mov	sp, r7
 80042a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ac:	4770      	bx	lr
 80042ae:	bf00      	nop
 80042b0:	2000537c 	.word	0x2000537c

080042b4 <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 80042b4:	b590      	push	{r4, r7, lr}
 80042b6:	b085      	sub	sp, #20
 80042b8:	af00      	add	r7, sp, #0
 80042ba:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 80042bc:	4b45      	ldr	r3, [pc, #276]	; (80043d4 <plug_holes+0x120>)
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	687a      	ldr	r2, [r7, #4]
 80042c2:	429a      	cmp	r2, r3
 80042c4:	d206      	bcs.n	80042d4 <plug_holes+0x20>
 80042c6:	4b44      	ldr	r3, [pc, #272]	; (80043d8 <plug_holes+0x124>)
 80042c8:	f240 12df 	movw	r2, #479	; 0x1df
 80042cc:	4943      	ldr	r1, [pc, #268]	; (80043dc <plug_holes+0x128>)
 80042ce:	4844      	ldr	r0, [pc, #272]	; (80043e0 <plug_holes+0x12c>)
 80042d0:	f00a f910 	bl	800e4f4 <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 80042d4:	4b43      	ldr	r3, [pc, #268]	; (80043e4 <plug_holes+0x130>)
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	687a      	ldr	r2, [r7, #4]
 80042da:	429a      	cmp	r2, r3
 80042dc:	d306      	bcc.n	80042ec <plug_holes+0x38>
 80042de:	4b3e      	ldr	r3, [pc, #248]	; (80043d8 <plug_holes+0x124>)
 80042e0:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 80042e4:	4940      	ldr	r1, [pc, #256]	; (80043e8 <plug_holes+0x134>)
 80042e6:	483e      	ldr	r0, [pc, #248]	; (80043e0 <plug_holes+0x12c>)
 80042e8:	f00a f904 	bl	800e4f4 <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	791b      	ldrb	r3, [r3, #4]
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	d006      	beq.n	8004302 <plug_holes+0x4e>
 80042f4:	4b38      	ldr	r3, [pc, #224]	; (80043d8 <plug_holes+0x124>)
 80042f6:	f240 12e1 	movw	r2, #481	; 0x1e1
 80042fa:	493c      	ldr	r1, [pc, #240]	; (80043ec <plug_holes+0x138>)
 80042fc:	4838      	ldr	r0, [pc, #224]	; (80043e0 <plug_holes+0x12c>)
 80042fe:	f00a f8f9 	bl	800e4f4 <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	881b      	ldrh	r3, [r3, #0]
 8004306:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800430a:	d906      	bls.n	800431a <plug_holes+0x66>
 800430c:	4b32      	ldr	r3, [pc, #200]	; (80043d8 <plug_holes+0x124>)
 800430e:	f44f 72f2 	mov.w	r2, #484	; 0x1e4
 8004312:	4937      	ldr	r1, [pc, #220]	; (80043f0 <plug_holes+0x13c>)
 8004314:	4832      	ldr	r0, [pc, #200]	; (80043e0 <plug_holes+0x12c>)
 8004316:	f00a f8ed 	bl	800e4f4 <iprintf>

  nmem = ptr_to_mem(mem->next);
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	881b      	ldrh	r3, [r3, #0]
 800431e:	4618      	mov	r0, r3
 8004320:	f7ff ffa4 	bl	800426c <ptr_to_mem>
 8004324:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 8004326:	687a      	ldr	r2, [r7, #4]
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	429a      	cmp	r2, r3
 800432c:	d024      	beq.n	8004378 <plug_holes+0xc4>
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	791b      	ldrb	r3, [r3, #4]
 8004332:	2b00      	cmp	r3, #0
 8004334:	d120      	bne.n	8004378 <plug_holes+0xc4>
 8004336:	4b2b      	ldr	r3, [pc, #172]	; (80043e4 <plug_holes+0x130>)
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	68fa      	ldr	r2, [r7, #12]
 800433c:	429a      	cmp	r2, r3
 800433e:	d01b      	beq.n	8004378 <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 8004340:	4b2c      	ldr	r3, [pc, #176]	; (80043f4 <plug_holes+0x140>)
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	68fa      	ldr	r2, [r7, #12]
 8004346:	429a      	cmp	r2, r3
 8004348:	d102      	bne.n	8004350 <plug_holes+0x9c>
      lfree = mem;
 800434a:	4a2a      	ldr	r2, [pc, #168]	; (80043f4 <plug_holes+0x140>)
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	881a      	ldrh	r2, [r3, #0]
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	881b      	ldrh	r3, [r3, #0]
 800435c:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8004360:	d00a      	beq.n	8004378 <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	881b      	ldrh	r3, [r3, #0]
 8004366:	4618      	mov	r0, r3
 8004368:	f7ff ff80 	bl	800426c <ptr_to_mem>
 800436c:	4604      	mov	r4, r0
 800436e:	6878      	ldr	r0, [r7, #4]
 8004370:	f7ff ff8e 	bl	8004290 <mem_to_ptr>
 8004374:	4603      	mov	r3, r0
 8004376:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	885b      	ldrh	r3, [r3, #2]
 800437c:	4618      	mov	r0, r3
 800437e:	f7ff ff75 	bl	800426c <ptr_to_mem>
 8004382:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 8004384:	68ba      	ldr	r2, [r7, #8]
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	429a      	cmp	r2, r3
 800438a:	d01f      	beq.n	80043cc <plug_holes+0x118>
 800438c:	68bb      	ldr	r3, [r7, #8]
 800438e:	791b      	ldrb	r3, [r3, #4]
 8004390:	2b00      	cmp	r3, #0
 8004392:	d11b      	bne.n	80043cc <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 8004394:	4b17      	ldr	r3, [pc, #92]	; (80043f4 <plug_holes+0x140>)
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	687a      	ldr	r2, [r7, #4]
 800439a:	429a      	cmp	r2, r3
 800439c:	d102      	bne.n	80043a4 <plug_holes+0xf0>
      lfree = pmem;
 800439e:	4a15      	ldr	r2, [pc, #84]	; (80043f4 <plug_holes+0x140>)
 80043a0:	68bb      	ldr	r3, [r7, #8]
 80043a2:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	881a      	ldrh	r2, [r3, #0]
 80043a8:	68bb      	ldr	r3, [r7, #8]
 80043aa:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	881b      	ldrh	r3, [r3, #0]
 80043b0:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 80043b4:	d00a      	beq.n	80043cc <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	881b      	ldrh	r3, [r3, #0]
 80043ba:	4618      	mov	r0, r3
 80043bc:	f7ff ff56 	bl	800426c <ptr_to_mem>
 80043c0:	4604      	mov	r4, r0
 80043c2:	68b8      	ldr	r0, [r7, #8]
 80043c4:	f7ff ff64 	bl	8004290 <mem_to_ptr>
 80043c8:	4603      	mov	r3, r0
 80043ca:	8063      	strh	r3, [r4, #2]
    }
  }
}
 80043cc:	bf00      	nop
 80043ce:	3714      	adds	r7, #20
 80043d0:	46bd      	mov	sp, r7
 80043d2:	bd90      	pop	{r4, r7, pc}
 80043d4:	2000537c 	.word	0x2000537c
 80043d8:	0800f43c 	.word	0x0800f43c
 80043dc:	0800f46c 	.word	0x0800f46c
 80043e0:	0800f484 	.word	0x0800f484
 80043e4:	20005380 	.word	0x20005380
 80043e8:	0800f4ac 	.word	0x0800f4ac
 80043ec:	0800f4c8 	.word	0x0800f4c8
 80043f0:	0800f4e4 	.word	0x0800f4e4
 80043f4:	20005384 	.word	0x20005384

080043f8 <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 80043f8:	b580      	push	{r7, lr}
 80043fa:	b082      	sub	sp, #8
 80043fc:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 80043fe:	4b18      	ldr	r3, [pc, #96]	; (8004460 <mem_init+0x68>)
 8004400:	3303      	adds	r3, #3
 8004402:	f023 0303 	bic.w	r3, r3, #3
 8004406:	461a      	mov	r2, r3
 8004408:	4b16      	ldr	r3, [pc, #88]	; (8004464 <mem_init+0x6c>)
 800440a:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 800440c:	4b15      	ldr	r3, [pc, #84]	; (8004464 <mem_init+0x6c>)
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 8004418:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	2200      	movs	r2, #0
 800441e:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	2200      	movs	r2, #0
 8004424:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 8004426:	f44f 60c8 	mov.w	r0, #1600	; 0x640
 800442a:	f7ff ff1f 	bl	800426c <ptr_to_mem>
 800442e:	4603      	mov	r3, r0
 8004430:	4a0d      	ldr	r2, [pc, #52]	; (8004468 <mem_init+0x70>)
 8004432:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 8004434:	4b0c      	ldr	r3, [pc, #48]	; (8004468 <mem_init+0x70>)
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	2201      	movs	r2, #1
 800443a:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 800443c:	4b0a      	ldr	r3, [pc, #40]	; (8004468 <mem_init+0x70>)
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 8004444:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 8004446:	4b08      	ldr	r3, [pc, #32]	; (8004468 <mem_init+0x70>)
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800444e:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 8004450:	4b04      	ldr	r3, [pc, #16]	; (8004464 <mem_init+0x6c>)
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	4a05      	ldr	r2, [pc, #20]	; (800446c <mem_init+0x74>)
 8004456:	6013      	str	r3, [r2, #0]
  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
    LWIP_ASSERT("failed to create mem_mutex", 0);
  }
}
 8004458:	bf00      	nop
 800445a:	3708      	adds	r7, #8
 800445c:	46bd      	mov	sp, r7
 800445e:	bd80      	pop	{r7, pc}
 8004460:	20004d28 	.word	0x20004d28
 8004464:	2000537c 	.word	0x2000537c
 8004468:	20005380 	.word	0x20005380
 800446c:	20005384 	.word	0x20005384

08004470 <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 8004470:	b580      	push	{r7, lr}
 8004472:	b086      	sub	sp, #24
 8004474:	af00      	add	r7, sp, #0
 8004476:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 8004478:	6878      	ldr	r0, [r7, #4]
 800447a:	f7ff ff09 	bl	8004290 <mem_to_ptr>
 800447e:	4603      	mov	r3, r0
 8004480:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	881b      	ldrh	r3, [r3, #0]
 8004486:	4618      	mov	r0, r3
 8004488:	f7ff fef0 	bl	800426c <ptr_to_mem>
 800448c:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	885b      	ldrh	r3, [r3, #2]
 8004492:	4618      	mov	r0, r3
 8004494:	f7ff feea 	bl	800426c <ptr_to_mem>
 8004498:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	881b      	ldrh	r3, [r3, #0]
 800449e:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 80044a2:	d818      	bhi.n	80044d6 <mem_link_valid+0x66>
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	885b      	ldrh	r3, [r3, #2]
 80044a8:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 80044ac:	d813      	bhi.n	80044d6 <mem_link_valid+0x66>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 80044b2:	8afa      	ldrh	r2, [r7, #22]
 80044b4:	429a      	cmp	r2, r3
 80044b6:	d004      	beq.n	80044c2 <mem_link_valid+0x52>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	881b      	ldrh	r3, [r3, #0]
 80044bc:	8afa      	ldrh	r2, [r7, #22]
 80044be:	429a      	cmp	r2, r3
 80044c0:	d109      	bne.n	80044d6 <mem_link_valid+0x66>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 80044c2:	4b08      	ldr	r3, [pc, #32]	; (80044e4 <mem_link_valid+0x74>)
 80044c4:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 80044c6:	693a      	ldr	r2, [r7, #16]
 80044c8:	429a      	cmp	r2, r3
 80044ca:	d006      	beq.n	80044da <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 80044cc:	693b      	ldr	r3, [r7, #16]
 80044ce:	885b      	ldrh	r3, [r3, #2]
 80044d0:	8afa      	ldrh	r2, [r7, #22]
 80044d2:	429a      	cmp	r2, r3
 80044d4:	d001      	beq.n	80044da <mem_link_valid+0x6a>
    return 0;
 80044d6:	2300      	movs	r3, #0
 80044d8:	e000      	b.n	80044dc <mem_link_valid+0x6c>
  }
  return 1;
 80044da:	2301      	movs	r3, #1
}
 80044dc:	4618      	mov	r0, r3
 80044de:	3718      	adds	r7, #24
 80044e0:	46bd      	mov	sp, r7
 80044e2:	bd80      	pop	{r7, pc}
 80044e4:	20005380 	.word	0x20005380

080044e8 <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 80044e8:	b580      	push	{r7, lr}
 80044ea:	b084      	sub	sp, #16
 80044ec:	af00      	add	r7, sp, #0
 80044ee:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d04c      	beq.n	8004590 <mem_free+0xa8>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	f003 0303 	and.w	r3, r3, #3
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	d007      	beq.n	8004510 <mem_free+0x28>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 8004500:	4b25      	ldr	r3, [pc, #148]	; (8004598 <mem_free+0xb0>)
 8004502:	f240 2273 	movw	r2, #627	; 0x273
 8004506:	4925      	ldr	r1, [pc, #148]	; (800459c <mem_free+0xb4>)
 8004508:	4825      	ldr	r0, [pc, #148]	; (80045a0 <mem_free+0xb8>)
 800450a:	f009 fff3 	bl	800e4f4 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 800450e:	e040      	b.n	8004592 <mem_free+0xaa>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	3b08      	subs	r3, #8
 8004514:	60fb      	str	r3, [r7, #12]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 8004516:	4b23      	ldr	r3, [pc, #140]	; (80045a4 <mem_free+0xbc>)
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	68fa      	ldr	r2, [r7, #12]
 800451c:	429a      	cmp	r2, r3
 800451e:	d306      	bcc.n	800452e <mem_free+0x46>
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	f103 020c 	add.w	r2, r3, #12
 8004526:	4b20      	ldr	r3, [pc, #128]	; (80045a8 <mem_free+0xc0>)
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	429a      	cmp	r2, r3
 800452c:	d907      	bls.n	800453e <mem_free+0x56>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 800452e:	4b1a      	ldr	r3, [pc, #104]	; (8004598 <mem_free+0xb0>)
 8004530:	f240 227f 	movw	r2, #639	; 0x27f
 8004534:	491d      	ldr	r1, [pc, #116]	; (80045ac <mem_free+0xc4>)
 8004536:	481a      	ldr	r0, [pc, #104]	; (80045a0 <mem_free+0xb8>)
 8004538:	f009 ffdc 	bl	800e4f4 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 800453c:	e029      	b.n	8004592 <mem_free+0xaa>
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
  /* mem has to be in a used state */
  if (!mem->used) {
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	791b      	ldrb	r3, [r3, #4]
 8004542:	2b00      	cmp	r3, #0
 8004544:	d107      	bne.n	8004556 <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 8004546:	4b14      	ldr	r3, [pc, #80]	; (8004598 <mem_free+0xb0>)
 8004548:	f44f 7223 	mov.w	r2, #652	; 0x28c
 800454c:	4918      	ldr	r1, [pc, #96]	; (80045b0 <mem_free+0xc8>)
 800454e:	4814      	ldr	r0, [pc, #80]	; (80045a0 <mem_free+0xb8>)
 8004550:	f009 ffd0 	bl	800e4f4 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 8004554:	e01d      	b.n	8004592 <mem_free+0xaa>
  }

  if (!mem_link_valid(mem)) {
 8004556:	68f8      	ldr	r0, [r7, #12]
 8004558:	f7ff ff8a 	bl	8004470 <mem_link_valid>
 800455c:	4603      	mov	r3, r0
 800455e:	2b00      	cmp	r3, #0
 8004560:	d107      	bne.n	8004572 <mem_free+0x8a>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 8004562:	4b0d      	ldr	r3, [pc, #52]	; (8004598 <mem_free+0xb0>)
 8004564:	f240 2295 	movw	r2, #661	; 0x295
 8004568:	4912      	ldr	r1, [pc, #72]	; (80045b4 <mem_free+0xcc>)
 800456a:	480d      	ldr	r0, [pc, #52]	; (80045a0 <mem_free+0xb8>)
 800456c:	f009 ffc2 	bl	800e4f4 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 8004570:	e00f      	b.n	8004592 <mem_free+0xaa>
  }

  /* mem is now unused. */
  mem->used = 0;
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	2200      	movs	r2, #0
 8004576:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 8004578:	4b0f      	ldr	r3, [pc, #60]	; (80045b8 <mem_free+0xd0>)
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	68fa      	ldr	r2, [r7, #12]
 800457e:	429a      	cmp	r2, r3
 8004580:	d202      	bcs.n	8004588 <mem_free+0xa0>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 8004582:	4a0d      	ldr	r2, [pc, #52]	; (80045b8 <mem_free+0xd0>)
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 8004588:	68f8      	ldr	r0, [r7, #12]
 800458a:	f7ff fe93 	bl	80042b4 <plug_holes>
 800458e:	e000      	b.n	8004592 <mem_free+0xaa>
    return;
 8004590:	bf00      	nop
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
}
 8004592:	3710      	adds	r7, #16
 8004594:	46bd      	mov	sp, r7
 8004596:	bd80      	pop	{r7, pc}
 8004598:	0800f43c 	.word	0x0800f43c
 800459c:	0800f510 	.word	0x0800f510
 80045a0:	0800f484 	.word	0x0800f484
 80045a4:	2000537c 	.word	0x2000537c
 80045a8:	20005380 	.word	0x20005380
 80045ac:	0800f534 	.word	0x0800f534
 80045b0:	0800f550 	.word	0x0800f550
 80045b4:	0800f578 	.word	0x0800f578
 80045b8:	20005384 	.word	0x20005384

080045bc <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 80045bc:	b580      	push	{r7, lr}
 80045be:	b088      	sub	sp, #32
 80045c0:	af00      	add	r7, sp, #0
 80045c2:	6078      	str	r0, [r7, #4]
 80045c4:	460b      	mov	r3, r1
 80045c6:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 80045c8:	887b      	ldrh	r3, [r7, #2]
 80045ca:	3303      	adds	r3, #3
 80045cc:	b29b      	uxth	r3, r3
 80045ce:	f023 0303 	bic.w	r3, r3, #3
 80045d2:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 80045d4:	8bfb      	ldrh	r3, [r7, #30]
 80045d6:	2b0b      	cmp	r3, #11
 80045d8:	d801      	bhi.n	80045de <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 80045da:	230c      	movs	r3, #12
 80045dc:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 80045de:	8bfb      	ldrh	r3, [r7, #30]
 80045e0:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 80045e4:	d803      	bhi.n	80045ee <mem_trim+0x32>
 80045e6:	8bfa      	ldrh	r2, [r7, #30]
 80045e8:	887b      	ldrh	r3, [r7, #2]
 80045ea:	429a      	cmp	r2, r3
 80045ec:	d201      	bcs.n	80045f2 <mem_trim+0x36>
    return NULL;
 80045ee:	2300      	movs	r3, #0
 80045f0:	e0cc      	b.n	800478c <mem_trim+0x1d0>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 80045f2:	4b68      	ldr	r3, [pc, #416]	; (8004794 <mem_trim+0x1d8>)
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	687a      	ldr	r2, [r7, #4]
 80045f8:	429a      	cmp	r2, r3
 80045fa:	d304      	bcc.n	8004606 <mem_trim+0x4a>
 80045fc:	4b66      	ldr	r3, [pc, #408]	; (8004798 <mem_trim+0x1dc>)
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	687a      	ldr	r2, [r7, #4]
 8004602:	429a      	cmp	r2, r3
 8004604:	d306      	bcc.n	8004614 <mem_trim+0x58>
 8004606:	4b65      	ldr	r3, [pc, #404]	; (800479c <mem_trim+0x1e0>)
 8004608:	f240 22d1 	movw	r2, #721	; 0x2d1
 800460c:	4964      	ldr	r1, [pc, #400]	; (80047a0 <mem_trim+0x1e4>)
 800460e:	4865      	ldr	r0, [pc, #404]	; (80047a4 <mem_trim+0x1e8>)
 8004610:	f009 ff70 	bl	800e4f4 <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 8004614:	4b5f      	ldr	r3, [pc, #380]	; (8004794 <mem_trim+0x1d8>)
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	687a      	ldr	r2, [r7, #4]
 800461a:	429a      	cmp	r2, r3
 800461c:	d304      	bcc.n	8004628 <mem_trim+0x6c>
 800461e:	4b5e      	ldr	r3, [pc, #376]	; (8004798 <mem_trim+0x1dc>)
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	687a      	ldr	r2, [r7, #4]
 8004624:	429a      	cmp	r2, r3
 8004626:	d301      	bcc.n	800462c <mem_trim+0x70>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return rmem;
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	e0af      	b.n	800478c <mem_trim+0x1d0>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	3b08      	subs	r3, #8
 8004630:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 8004632:	69b8      	ldr	r0, [r7, #24]
 8004634:	f7ff fe2c 	bl	8004290 <mem_to_ptr>
 8004638:	4603      	mov	r3, r0
 800463a:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 800463c:	69bb      	ldr	r3, [r7, #24]
 800463e:	881a      	ldrh	r2, [r3, #0]
 8004640:	8afb      	ldrh	r3, [r7, #22]
 8004642:	1ad3      	subs	r3, r2, r3
 8004644:	b29b      	uxth	r3, r3
 8004646:	3b08      	subs	r3, #8
 8004648:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 800464a:	8bfa      	ldrh	r2, [r7, #30]
 800464c:	8abb      	ldrh	r3, [r7, #20]
 800464e:	429a      	cmp	r2, r3
 8004650:	d906      	bls.n	8004660 <mem_trim+0xa4>
 8004652:	4b52      	ldr	r3, [pc, #328]	; (800479c <mem_trim+0x1e0>)
 8004654:	f44f 7239 	mov.w	r2, #740	; 0x2e4
 8004658:	4953      	ldr	r1, [pc, #332]	; (80047a8 <mem_trim+0x1ec>)
 800465a:	4852      	ldr	r0, [pc, #328]	; (80047a4 <mem_trim+0x1e8>)
 800465c:	f009 ff4a 	bl	800e4f4 <iprintf>
  if (newsize > size) {
 8004660:	8bfa      	ldrh	r2, [r7, #30]
 8004662:	8abb      	ldrh	r3, [r7, #20]
 8004664:	429a      	cmp	r2, r3
 8004666:	d901      	bls.n	800466c <mem_trim+0xb0>
    /* not supported */
    return NULL;
 8004668:	2300      	movs	r3, #0
 800466a:	e08f      	b.n	800478c <mem_trim+0x1d0>
  }
  if (newsize == size) {
 800466c:	8bfa      	ldrh	r2, [r7, #30]
 800466e:	8abb      	ldrh	r3, [r7, #20]
 8004670:	429a      	cmp	r2, r3
 8004672:	d101      	bne.n	8004678 <mem_trim+0xbc>
    /* No change in size, simply return */
    return rmem;
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	e089      	b.n	800478c <mem_trim+0x1d0>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();

  mem2 = ptr_to_mem(mem->next);
 8004678:	69bb      	ldr	r3, [r7, #24]
 800467a:	881b      	ldrh	r3, [r3, #0]
 800467c:	4618      	mov	r0, r3
 800467e:	f7ff fdf5 	bl	800426c <ptr_to_mem>
 8004682:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 8004684:	693b      	ldr	r3, [r7, #16]
 8004686:	791b      	ldrb	r3, [r3, #4]
 8004688:	2b00      	cmp	r3, #0
 800468a:	d13f      	bne.n	800470c <mem_trim+0x150>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800468c:	69bb      	ldr	r3, [r7, #24]
 800468e:	881b      	ldrh	r3, [r3, #0]
 8004690:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8004694:	d106      	bne.n	80046a4 <mem_trim+0xe8>
 8004696:	4b41      	ldr	r3, [pc, #260]	; (800479c <mem_trim+0x1e0>)
 8004698:	f240 22f5 	movw	r2, #757	; 0x2f5
 800469c:	4943      	ldr	r1, [pc, #268]	; (80047ac <mem_trim+0x1f0>)
 800469e:	4841      	ldr	r0, [pc, #260]	; (80047a4 <mem_trim+0x1e8>)
 80046a0:	f009 ff28 	bl	800e4f4 <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 80046a4:	693b      	ldr	r3, [r7, #16]
 80046a6:	881b      	ldrh	r3, [r3, #0]
 80046a8:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 80046aa:	8afa      	ldrh	r2, [r7, #22]
 80046ac:	8bfb      	ldrh	r3, [r7, #30]
 80046ae:	4413      	add	r3, r2
 80046b0:	b29b      	uxth	r3, r3
 80046b2:	3308      	adds	r3, #8
 80046b4:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 80046b6:	4b3e      	ldr	r3, [pc, #248]	; (80047b0 <mem_trim+0x1f4>)
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	693a      	ldr	r2, [r7, #16]
 80046bc:	429a      	cmp	r2, r3
 80046be:	d106      	bne.n	80046ce <mem_trim+0x112>
      lfree = ptr_to_mem(ptr2);
 80046c0:	89fb      	ldrh	r3, [r7, #14]
 80046c2:	4618      	mov	r0, r3
 80046c4:	f7ff fdd2 	bl	800426c <ptr_to_mem>
 80046c8:	4603      	mov	r3, r0
 80046ca:	4a39      	ldr	r2, [pc, #228]	; (80047b0 <mem_trim+0x1f4>)
 80046cc:	6013      	str	r3, [r2, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 80046ce:	89fb      	ldrh	r3, [r7, #14]
 80046d0:	4618      	mov	r0, r3
 80046d2:	f7ff fdcb 	bl	800426c <ptr_to_mem>
 80046d6:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 80046d8:	693b      	ldr	r3, [r7, #16]
 80046da:	2200      	movs	r2, #0
 80046dc:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 80046de:	693b      	ldr	r3, [r7, #16]
 80046e0:	89ba      	ldrh	r2, [r7, #12]
 80046e2:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 80046e4:	693b      	ldr	r3, [r7, #16]
 80046e6:	8afa      	ldrh	r2, [r7, #22]
 80046e8:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 80046ea:	69bb      	ldr	r3, [r7, #24]
 80046ec:	89fa      	ldrh	r2, [r7, #14]
 80046ee:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 80046f0:	693b      	ldr	r3, [r7, #16]
 80046f2:	881b      	ldrh	r3, [r3, #0]
 80046f4:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 80046f8:	d047      	beq.n	800478a <mem_trim+0x1ce>
      ptr_to_mem(mem2->next)->prev = ptr2;
 80046fa:	693b      	ldr	r3, [r7, #16]
 80046fc:	881b      	ldrh	r3, [r3, #0]
 80046fe:	4618      	mov	r0, r3
 8004700:	f7ff fdb4 	bl	800426c <ptr_to_mem>
 8004704:	4602      	mov	r2, r0
 8004706:	89fb      	ldrh	r3, [r7, #14]
 8004708:	8053      	strh	r3, [r2, #2]
 800470a:	e03e      	b.n	800478a <mem_trim+0x1ce>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 800470c:	8bfb      	ldrh	r3, [r7, #30]
 800470e:	f103 0214 	add.w	r2, r3, #20
 8004712:	8abb      	ldrh	r3, [r7, #20]
 8004714:	429a      	cmp	r2, r3
 8004716:	d838      	bhi.n	800478a <mem_trim+0x1ce>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 8004718:	8afa      	ldrh	r2, [r7, #22]
 800471a:	8bfb      	ldrh	r3, [r7, #30]
 800471c:	4413      	add	r3, r2
 800471e:	b29b      	uxth	r3, r3
 8004720:	3308      	adds	r3, #8
 8004722:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 8004724:	69bb      	ldr	r3, [r7, #24]
 8004726:	881b      	ldrh	r3, [r3, #0]
 8004728:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800472c:	d106      	bne.n	800473c <mem_trim+0x180>
 800472e:	4b1b      	ldr	r3, [pc, #108]	; (800479c <mem_trim+0x1e0>)
 8004730:	f240 3216 	movw	r2, #790	; 0x316
 8004734:	491d      	ldr	r1, [pc, #116]	; (80047ac <mem_trim+0x1f0>)
 8004736:	481b      	ldr	r0, [pc, #108]	; (80047a4 <mem_trim+0x1e8>)
 8004738:	f009 fedc 	bl	800e4f4 <iprintf>
    mem2 = ptr_to_mem(ptr2);
 800473c:	89fb      	ldrh	r3, [r7, #14]
 800473e:	4618      	mov	r0, r3
 8004740:	f7ff fd94 	bl	800426c <ptr_to_mem>
 8004744:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 8004746:	4b1a      	ldr	r3, [pc, #104]	; (80047b0 <mem_trim+0x1f4>)
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	693a      	ldr	r2, [r7, #16]
 800474c:	429a      	cmp	r2, r3
 800474e:	d202      	bcs.n	8004756 <mem_trim+0x19a>
      lfree = mem2;
 8004750:	4a17      	ldr	r2, [pc, #92]	; (80047b0 <mem_trim+0x1f4>)
 8004752:	693b      	ldr	r3, [r7, #16]
 8004754:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 8004756:	693b      	ldr	r3, [r7, #16]
 8004758:	2200      	movs	r2, #0
 800475a:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 800475c:	69bb      	ldr	r3, [r7, #24]
 800475e:	881a      	ldrh	r2, [r3, #0]
 8004760:	693b      	ldr	r3, [r7, #16]
 8004762:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 8004764:	693b      	ldr	r3, [r7, #16]
 8004766:	8afa      	ldrh	r2, [r7, #22]
 8004768:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 800476a:	69bb      	ldr	r3, [r7, #24]
 800476c:	89fa      	ldrh	r2, [r7, #14]
 800476e:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8004770:	693b      	ldr	r3, [r7, #16]
 8004772:	881b      	ldrh	r3, [r3, #0]
 8004774:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8004778:	d007      	beq.n	800478a <mem_trim+0x1ce>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800477a:	693b      	ldr	r3, [r7, #16]
 800477c:	881b      	ldrh	r3, [r3, #0]
 800477e:	4618      	mov	r0, r3
 8004780:	f7ff fd74 	bl	800426c <ptr_to_mem>
 8004784:	4602      	mov	r2, r0
 8004786:	89fb      	ldrh	r3, [r7, #14]
 8004788:	8053      	strh	r3, [r2, #2]
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
  return rmem;
 800478a:	687b      	ldr	r3, [r7, #4]
}
 800478c:	4618      	mov	r0, r3
 800478e:	3720      	adds	r7, #32
 8004790:	46bd      	mov	sp, r7
 8004792:	bd80      	pop	{r7, pc}
 8004794:	2000537c 	.word	0x2000537c
 8004798:	20005380 	.word	0x20005380
 800479c:	0800f43c 	.word	0x0800f43c
 80047a0:	0800f5ac 	.word	0x0800f5ac
 80047a4:	0800f484 	.word	0x0800f484
 80047a8:	0800f5c4 	.word	0x0800f5c4
 80047ac:	0800f5e4 	.word	0x0800f5e4
 80047b0:	20005384 	.word	0x20005384

080047b4 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 80047b4:	b580      	push	{r7, lr}
 80047b6:	b088      	sub	sp, #32
 80047b8:	af00      	add	r7, sp, #0
 80047ba:	4603      	mov	r3, r0
 80047bc:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 80047be:	88fb      	ldrh	r3, [r7, #6]
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	d101      	bne.n	80047c8 <mem_malloc+0x14>
    return NULL;
 80047c4:	2300      	movs	r3, #0
 80047c6:	e0d9      	b.n	800497c <mem_malloc+0x1c8>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 80047c8:	88fb      	ldrh	r3, [r7, #6]
 80047ca:	3303      	adds	r3, #3
 80047cc:	b29b      	uxth	r3, r3
 80047ce:	f023 0303 	bic.w	r3, r3, #3
 80047d2:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 80047d4:	8bbb      	ldrh	r3, [r7, #28]
 80047d6:	2b0b      	cmp	r3, #11
 80047d8:	d801      	bhi.n	80047de <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 80047da:	230c      	movs	r3, #12
 80047dc:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 80047de:	8bbb      	ldrh	r3, [r7, #28]
 80047e0:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 80047e4:	d803      	bhi.n	80047ee <mem_malloc+0x3a>
 80047e6:	8bba      	ldrh	r2, [r7, #28]
 80047e8:	88fb      	ldrh	r3, [r7, #6]
 80047ea:	429a      	cmp	r2, r3
 80047ec:	d201      	bcs.n	80047f2 <mem_malloc+0x3e>
    return NULL;
 80047ee:	2300      	movs	r3, #0
 80047f0:	e0c4      	b.n	800497c <mem_malloc+0x1c8>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 80047f2:	4b64      	ldr	r3, [pc, #400]	; (8004984 <mem_malloc+0x1d0>)
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	4618      	mov	r0, r3
 80047f8:	f7ff fd4a 	bl	8004290 <mem_to_ptr>
 80047fc:	4603      	mov	r3, r0
 80047fe:	83fb      	strh	r3, [r7, #30]
 8004800:	e0b4      	b.n	800496c <mem_malloc+0x1b8>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 8004802:	8bfb      	ldrh	r3, [r7, #30]
 8004804:	4618      	mov	r0, r3
 8004806:	f7ff fd31 	bl	800426c <ptr_to_mem>
 800480a:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 800480c:	697b      	ldr	r3, [r7, #20]
 800480e:	791b      	ldrb	r3, [r3, #4]
 8004810:	2b00      	cmp	r3, #0
 8004812:	f040 80a4 	bne.w	800495e <mem_malloc+0x1aa>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 8004816:	697b      	ldr	r3, [r7, #20]
 8004818:	881b      	ldrh	r3, [r3, #0]
 800481a:	461a      	mov	r2, r3
 800481c:	8bfb      	ldrh	r3, [r7, #30]
 800481e:	1ad3      	subs	r3, r2, r3
 8004820:	f1a3 0208 	sub.w	r2, r3, #8
 8004824:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 8004826:	429a      	cmp	r2, r3
 8004828:	f0c0 8099 	bcc.w	800495e <mem_malloc+0x1aa>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 800482c:	697b      	ldr	r3, [r7, #20]
 800482e:	881b      	ldrh	r3, [r3, #0]
 8004830:	461a      	mov	r2, r3
 8004832:	8bfb      	ldrh	r3, [r7, #30]
 8004834:	1ad3      	subs	r3, r2, r3
 8004836:	f1a3 0208 	sub.w	r2, r3, #8
 800483a:	8bbb      	ldrh	r3, [r7, #28]
 800483c:	3314      	adds	r3, #20
 800483e:	429a      	cmp	r2, r3
 8004840:	d333      	bcc.n	80048aa <mem_malloc+0xf6>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 8004842:	8bfa      	ldrh	r2, [r7, #30]
 8004844:	8bbb      	ldrh	r3, [r7, #28]
 8004846:	4413      	add	r3, r2
 8004848:	b29b      	uxth	r3, r3
 800484a:	3308      	adds	r3, #8
 800484c:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 800484e:	8a7b      	ldrh	r3, [r7, #18]
 8004850:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8004854:	d106      	bne.n	8004864 <mem_malloc+0xb0>
 8004856:	4b4c      	ldr	r3, [pc, #304]	; (8004988 <mem_malloc+0x1d4>)
 8004858:	f240 3287 	movw	r2, #903	; 0x387
 800485c:	494b      	ldr	r1, [pc, #300]	; (800498c <mem_malloc+0x1d8>)
 800485e:	484c      	ldr	r0, [pc, #304]	; (8004990 <mem_malloc+0x1dc>)
 8004860:	f009 fe48 	bl	800e4f4 <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 8004864:	8a7b      	ldrh	r3, [r7, #18]
 8004866:	4618      	mov	r0, r3
 8004868:	f7ff fd00 	bl	800426c <ptr_to_mem>
 800486c:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	2200      	movs	r2, #0
 8004872:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 8004874:	697b      	ldr	r3, [r7, #20]
 8004876:	881a      	ldrh	r2, [r3, #0]
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	8bfa      	ldrh	r2, [r7, #30]
 8004880:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 8004882:	697b      	ldr	r3, [r7, #20]
 8004884:	8a7a      	ldrh	r2, [r7, #18]
 8004886:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 8004888:	697b      	ldr	r3, [r7, #20]
 800488a:	2201      	movs	r2, #1
 800488c:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	881b      	ldrh	r3, [r3, #0]
 8004892:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8004896:	d00b      	beq.n	80048b0 <mem_malloc+0xfc>
            ptr_to_mem(mem2->next)->prev = ptr2;
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	881b      	ldrh	r3, [r3, #0]
 800489c:	4618      	mov	r0, r3
 800489e:	f7ff fce5 	bl	800426c <ptr_to_mem>
 80048a2:	4602      	mov	r2, r0
 80048a4:	8a7b      	ldrh	r3, [r7, #18]
 80048a6:	8053      	strh	r3, [r2, #2]
 80048a8:	e002      	b.n	80048b0 <mem_malloc+0xfc>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 80048aa:	697b      	ldr	r3, [r7, #20]
 80048ac:	2201      	movs	r2, #1
 80048ae:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 80048b0:	4b34      	ldr	r3, [pc, #208]	; (8004984 <mem_malloc+0x1d0>)
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	697a      	ldr	r2, [r7, #20]
 80048b6:	429a      	cmp	r2, r3
 80048b8:	d127      	bne.n	800490a <mem_malloc+0x156>
          struct mem *cur = lfree;
 80048ba:	4b32      	ldr	r3, [pc, #200]	; (8004984 <mem_malloc+0x1d0>)
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 80048c0:	e005      	b.n	80048ce <mem_malloc+0x11a>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 80048c2:	69bb      	ldr	r3, [r7, #24]
 80048c4:	881b      	ldrh	r3, [r3, #0]
 80048c6:	4618      	mov	r0, r3
 80048c8:	f7ff fcd0 	bl	800426c <ptr_to_mem>
 80048cc:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 80048ce:	69bb      	ldr	r3, [r7, #24]
 80048d0:	791b      	ldrb	r3, [r3, #4]
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d004      	beq.n	80048e0 <mem_malloc+0x12c>
 80048d6:	4b2f      	ldr	r3, [pc, #188]	; (8004994 <mem_malloc+0x1e0>)
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	69ba      	ldr	r2, [r7, #24]
 80048dc:	429a      	cmp	r2, r3
 80048de:	d1f0      	bne.n	80048c2 <mem_malloc+0x10e>
          }
          lfree = cur;
 80048e0:	4a28      	ldr	r2, [pc, #160]	; (8004984 <mem_malloc+0x1d0>)
 80048e2:	69bb      	ldr	r3, [r7, #24]
 80048e4:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 80048e6:	4b27      	ldr	r3, [pc, #156]	; (8004984 <mem_malloc+0x1d0>)
 80048e8:	681a      	ldr	r2, [r3, #0]
 80048ea:	4b2a      	ldr	r3, [pc, #168]	; (8004994 <mem_malloc+0x1e0>)
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	429a      	cmp	r2, r3
 80048f0:	d00b      	beq.n	800490a <mem_malloc+0x156>
 80048f2:	4b24      	ldr	r3, [pc, #144]	; (8004984 <mem_malloc+0x1d0>)
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	791b      	ldrb	r3, [r3, #4]
 80048f8:	2b00      	cmp	r3, #0
 80048fa:	d006      	beq.n	800490a <mem_malloc+0x156>
 80048fc:	4b22      	ldr	r3, [pc, #136]	; (8004988 <mem_malloc+0x1d4>)
 80048fe:	f240 32b5 	movw	r2, #949	; 0x3b5
 8004902:	4925      	ldr	r1, [pc, #148]	; (8004998 <mem_malloc+0x1e4>)
 8004904:	4822      	ldr	r0, [pc, #136]	; (8004990 <mem_malloc+0x1dc>)
 8004906:	f009 fdf5 	bl	800e4f4 <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 800490a:	8bba      	ldrh	r2, [r7, #28]
 800490c:	697b      	ldr	r3, [r7, #20]
 800490e:	4413      	add	r3, r2
 8004910:	3308      	adds	r3, #8
 8004912:	4a20      	ldr	r2, [pc, #128]	; (8004994 <mem_malloc+0x1e0>)
 8004914:	6812      	ldr	r2, [r2, #0]
 8004916:	4293      	cmp	r3, r2
 8004918:	d906      	bls.n	8004928 <mem_malloc+0x174>
 800491a:	4b1b      	ldr	r3, [pc, #108]	; (8004988 <mem_malloc+0x1d4>)
 800491c:	f240 32b9 	movw	r2, #953	; 0x3b9
 8004920:	491e      	ldr	r1, [pc, #120]	; (800499c <mem_malloc+0x1e8>)
 8004922:	481b      	ldr	r0, [pc, #108]	; (8004990 <mem_malloc+0x1dc>)
 8004924:	f009 fde6 	bl	800e4f4 <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 8004928:	697b      	ldr	r3, [r7, #20]
 800492a:	f003 0303 	and.w	r3, r3, #3
 800492e:	2b00      	cmp	r3, #0
 8004930:	d006      	beq.n	8004940 <mem_malloc+0x18c>
 8004932:	4b15      	ldr	r3, [pc, #84]	; (8004988 <mem_malloc+0x1d4>)
 8004934:	f240 32bb 	movw	r2, #955	; 0x3bb
 8004938:	4919      	ldr	r1, [pc, #100]	; (80049a0 <mem_malloc+0x1ec>)
 800493a:	4815      	ldr	r0, [pc, #84]	; (8004990 <mem_malloc+0x1dc>)
 800493c:	f009 fdda 	bl	800e4f4 <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 8004940:	697b      	ldr	r3, [r7, #20]
 8004942:	f003 0303 	and.w	r3, r3, #3
 8004946:	2b00      	cmp	r3, #0
 8004948:	d006      	beq.n	8004958 <mem_malloc+0x1a4>
 800494a:	4b0f      	ldr	r3, [pc, #60]	; (8004988 <mem_malloc+0x1d4>)
 800494c:	f240 32bd 	movw	r2, #957	; 0x3bd
 8004950:	4914      	ldr	r1, [pc, #80]	; (80049a4 <mem_malloc+0x1f0>)
 8004952:	480f      	ldr	r0, [pc, #60]	; (8004990 <mem_malloc+0x1dc>)
 8004954:	f009 fdce 	bl	800e4f4 <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 8004958:	697b      	ldr	r3, [r7, #20]
 800495a:	3308      	adds	r3, #8
 800495c:	e00e      	b.n	800497c <mem_malloc+0x1c8>
         ptr = ptr_to_mem(ptr)->next) {
 800495e:	8bfb      	ldrh	r3, [r7, #30]
 8004960:	4618      	mov	r0, r3
 8004962:	f7ff fc83 	bl	800426c <ptr_to_mem>
 8004966:	4603      	mov	r3, r0
 8004968:	881b      	ldrh	r3, [r3, #0]
 800496a:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800496c:	8bfa      	ldrh	r2, [r7, #30]
 800496e:	8bbb      	ldrh	r3, [r7, #28]
 8004970:	f5c3 63c8 	rsb	r3, r3, #1600	; 0x640
 8004974:	429a      	cmp	r2, r3
 8004976:	f4ff af44 	bcc.w	8004802 <mem_malloc+0x4e>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 800497a:	2300      	movs	r3, #0
}
 800497c:	4618      	mov	r0, r3
 800497e:	3720      	adds	r7, #32
 8004980:	46bd      	mov	sp, r7
 8004982:	bd80      	pop	{r7, pc}
 8004984:	20005384 	.word	0x20005384
 8004988:	0800f43c 	.word	0x0800f43c
 800498c:	0800f5e4 	.word	0x0800f5e4
 8004990:	0800f484 	.word	0x0800f484
 8004994:	20005380 	.word	0x20005380
 8004998:	0800f5f8 	.word	0x0800f5f8
 800499c:	0800f614 	.word	0x0800f614
 80049a0:	0800f644 	.word	0x0800f644
 80049a4:	0800f674 	.word	0x0800f674

080049a8 <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 80049a8:	b480      	push	{r7}
 80049aa:	b085      	sub	sp, #20
 80049ac:	af00      	add	r7, sp, #0
 80049ae:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	689b      	ldr	r3, [r3, #8]
 80049b4:	2200      	movs	r2, #0
 80049b6:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	685b      	ldr	r3, [r3, #4]
 80049bc:	3303      	adds	r3, #3
 80049be:	f023 0303 	bic.w	r3, r3, #3
 80049c2:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 80049c4:	2300      	movs	r3, #0
 80049c6:	60fb      	str	r3, [r7, #12]
 80049c8:	e011      	b.n	80049ee <memp_init_pool+0x46>
    memp->next = *desc->tab;
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	689b      	ldr	r3, [r3, #8]
 80049ce:	681a      	ldr	r2, [r3, #0]
 80049d0:	68bb      	ldr	r3, [r7, #8]
 80049d2:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	689b      	ldr	r3, [r3, #8]
 80049d8:	68ba      	ldr	r2, [r7, #8]
 80049da:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	881b      	ldrh	r3, [r3, #0]
 80049e0:	461a      	mov	r2, r3
 80049e2:	68bb      	ldr	r3, [r7, #8]
 80049e4:	4413      	add	r3, r2
 80049e6:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	3301      	adds	r3, #1
 80049ec:	60fb      	str	r3, [r7, #12]
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	885b      	ldrh	r3, [r3, #2]
 80049f2:	461a      	mov	r2, r3
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	4293      	cmp	r3, r2
 80049f8:	dbe7      	blt.n	80049ca <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 80049fa:	bf00      	nop
 80049fc:	bf00      	nop
 80049fe:	3714      	adds	r7, #20
 8004a00:	46bd      	mov	sp, r7
 8004a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a06:	4770      	bx	lr

08004a08 <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 8004a08:	b580      	push	{r7, lr}
 8004a0a:	b082      	sub	sp, #8
 8004a0c:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 8004a0e:	2300      	movs	r3, #0
 8004a10:	80fb      	strh	r3, [r7, #6]
 8004a12:	e009      	b.n	8004a28 <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 8004a14:	88fb      	ldrh	r3, [r7, #6]
 8004a16:	4a08      	ldr	r2, [pc, #32]	; (8004a38 <memp_init+0x30>)
 8004a18:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004a1c:	4618      	mov	r0, r3
 8004a1e:	f7ff ffc3 	bl	80049a8 <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 8004a22:	88fb      	ldrh	r3, [r7, #6]
 8004a24:	3301      	adds	r3, #1
 8004a26:	80fb      	strh	r3, [r7, #6]
 8004a28:	88fb      	ldrh	r3, [r7, #6]
 8004a2a:	2b08      	cmp	r3, #8
 8004a2c:	d9f2      	bls.n	8004a14 <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 8004a2e:	bf00      	nop
 8004a30:	bf00      	nop
 8004a32:	3708      	adds	r7, #8
 8004a34:	46bd      	mov	sp, r7
 8004a36:	bd80      	pop	{r7, pc}
 8004a38:	08011e58 	.word	0x08011e58

08004a3c <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 8004a3c:	b580      	push	{r7, lr}
 8004a3e:	b084      	sub	sp, #16
 8004a40:	af00      	add	r7, sp, #0
 8004a42:	6078      	str	r0, [r7, #4]
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);

  memp = *desc->tab;
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	689b      	ldr	r3, [r3, #8]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	60fb      	str	r3, [r7, #12]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	d012      	beq.n	8004a78 <do_memp_malloc_pool+0x3c>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	689b      	ldr	r3, [r3, #8]
 8004a56:	68fa      	ldr	r2, [r7, #12]
 8004a58:	6812      	ldr	r2, [r2, #0]
 8004a5a:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	f003 0303 	and.w	r3, r3, #3
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d006      	beq.n	8004a74 <do_memp_malloc_pool+0x38>
 8004a66:	4b07      	ldr	r3, [pc, #28]	; (8004a84 <do_memp_malloc_pool+0x48>)
 8004a68:	f44f 728c 	mov.w	r2, #280	; 0x118
 8004a6c:	4906      	ldr	r1, [pc, #24]	; (8004a88 <do_memp_malloc_pool+0x4c>)
 8004a6e:	4807      	ldr	r0, [pc, #28]	; (8004a8c <do_memp_malloc_pool+0x50>)
 8004a70:	f009 fd40 	bl	800e4f4 <iprintf>
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	e000      	b.n	8004a7a <do_memp_malloc_pool+0x3e>
#endif
    SYS_ARCH_UNPROTECT(old_level);
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 8004a78:	2300      	movs	r3, #0
}
 8004a7a:	4618      	mov	r0, r3
 8004a7c:	3710      	adds	r7, #16
 8004a7e:	46bd      	mov	sp, r7
 8004a80:	bd80      	pop	{r7, pc}
 8004a82:	bf00      	nop
 8004a84:	0800f698 	.word	0x0800f698
 8004a88:	0800f6c8 	.word	0x0800f6c8
 8004a8c:	0800f6ec 	.word	0x0800f6ec

08004a90 <memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc_pool(const struct memp_desc *desc)
#else
memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 8004a90:	b580      	push	{r7, lr}
 8004a92:	b082      	sub	sp, #8
 8004a94:	af00      	add	r7, sp, #0
 8004a96:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d106      	bne.n	8004aac <memp_malloc_pool+0x1c>
 8004a9e:	4b0a      	ldr	r3, [pc, #40]	; (8004ac8 <memp_malloc_pool+0x38>)
 8004aa0:	f44f 729e 	mov.w	r2, #316	; 0x13c
 8004aa4:	4909      	ldr	r1, [pc, #36]	; (8004acc <memp_malloc_pool+0x3c>)
 8004aa6:	480a      	ldr	r0, [pc, #40]	; (8004ad0 <memp_malloc_pool+0x40>)
 8004aa8:	f009 fd24 	bl	800e4f4 <iprintf>
  if (desc == NULL) {
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d101      	bne.n	8004ab6 <memp_malloc_pool+0x26>
    return NULL;
 8004ab2:	2300      	movs	r3, #0
 8004ab4:	e003      	b.n	8004abe <memp_malloc_pool+0x2e>
  }

#if !MEMP_OVERFLOW_CHECK
  return do_memp_malloc_pool(desc);
 8004ab6:	6878      	ldr	r0, [r7, #4]
 8004ab8:	f7ff ffc0 	bl	8004a3c <do_memp_malloc_pool>
 8004abc:	4603      	mov	r3, r0
#else
  return do_memp_malloc_pool_fn(desc, file, line);
#endif
}
 8004abe:	4618      	mov	r0, r3
 8004ac0:	3708      	adds	r7, #8
 8004ac2:	46bd      	mov	sp, r7
 8004ac4:	bd80      	pop	{r7, pc}
 8004ac6:	bf00      	nop
 8004ac8:	0800f698 	.word	0x0800f698
 8004acc:	0800f714 	.word	0x0800f714
 8004ad0:	0800f6ec 	.word	0x0800f6ec

08004ad4 <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 8004ad4:	b580      	push	{r7, lr}
 8004ad6:	b084      	sub	sp, #16
 8004ad8:	af00      	add	r7, sp, #0
 8004ada:	4603      	mov	r3, r0
 8004adc:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 8004ade:	79fb      	ldrb	r3, [r7, #7]
 8004ae0:	2b08      	cmp	r3, #8
 8004ae2:	d908      	bls.n	8004af6 <memp_malloc+0x22>
 8004ae4:	4b0a      	ldr	r3, [pc, #40]	; (8004b10 <memp_malloc+0x3c>)
 8004ae6:	f240 1257 	movw	r2, #343	; 0x157
 8004aea:	490a      	ldr	r1, [pc, #40]	; (8004b14 <memp_malloc+0x40>)
 8004aec:	480a      	ldr	r0, [pc, #40]	; (8004b18 <memp_malloc+0x44>)
 8004aee:	f009 fd01 	bl	800e4f4 <iprintf>
 8004af2:	2300      	movs	r3, #0
 8004af4:	e008      	b.n	8004b08 <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 8004af6:	79fb      	ldrb	r3, [r7, #7]
 8004af8:	4a08      	ldr	r2, [pc, #32]	; (8004b1c <memp_malloc+0x48>)
 8004afa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004afe:	4618      	mov	r0, r3
 8004b00:	f7ff ff9c 	bl	8004a3c <do_memp_malloc_pool>
 8004b04:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 8004b06:	68fb      	ldr	r3, [r7, #12]
}
 8004b08:	4618      	mov	r0, r3
 8004b0a:	3710      	adds	r7, #16
 8004b0c:	46bd      	mov	sp, r7
 8004b0e:	bd80      	pop	{r7, pc}
 8004b10:	0800f698 	.word	0x0800f698
 8004b14:	0800f728 	.word	0x0800f728
 8004b18:	0800f6ec 	.word	0x0800f6ec
 8004b1c:	08011e58 	.word	0x08011e58

08004b20 <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 8004b20:	b580      	push	{r7, lr}
 8004b22:	b084      	sub	sp, #16
 8004b24:	af00      	add	r7, sp, #0
 8004b26:	6078      	str	r0, [r7, #4]
 8004b28:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 8004b2a:	683b      	ldr	r3, [r7, #0]
 8004b2c:	f003 0303 	and.w	r3, r3, #3
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	d006      	beq.n	8004b42 <do_memp_free_pool+0x22>
 8004b34:	4b0a      	ldr	r3, [pc, #40]	; (8004b60 <do_memp_free_pool+0x40>)
 8004b36:	f44f 72b6 	mov.w	r2, #364	; 0x16c
 8004b3a:	490a      	ldr	r1, [pc, #40]	; (8004b64 <do_memp_free_pool+0x44>)
 8004b3c:	480a      	ldr	r0, [pc, #40]	; (8004b68 <do_memp_free_pool+0x48>)
 8004b3e:	f009 fcd9 	bl	800e4f4 <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 8004b42:	683b      	ldr	r3, [r7, #0]
 8004b44:	60fb      	str	r3, [r7, #12]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	689b      	ldr	r3, [r3, #8]
 8004b4a:	681a      	ldr	r2, [r3, #0]
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	689b      	ldr	r3, [r3, #8]
 8004b54:	68fa      	ldr	r2, [r7, #12]
 8004b56:	601a      	str	r2, [r3, #0]
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
#endif /* !MEMP_MEM_MALLOC */
}
 8004b58:	bf00      	nop
 8004b5a:	3710      	adds	r7, #16
 8004b5c:	46bd      	mov	sp, r7
 8004b5e:	bd80      	pop	{r7, pc}
 8004b60:	0800f698 	.word	0x0800f698
 8004b64:	0800f748 	.word	0x0800f748
 8004b68:	0800f6ec 	.word	0x0800f6ec

08004b6c <memp_free_pool>:
 * @param desc the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free_pool(const struct memp_desc *desc, void *mem)
{
 8004b6c:	b580      	push	{r7, lr}
 8004b6e:	b082      	sub	sp, #8
 8004b70:	af00      	add	r7, sp, #0
 8004b72:	6078      	str	r0, [r7, #4]
 8004b74:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	2b00      	cmp	r3, #0
 8004b7a:	d106      	bne.n	8004b8a <memp_free_pool+0x1e>
 8004b7c:	4b0a      	ldr	r3, [pc, #40]	; (8004ba8 <memp_free_pool+0x3c>)
 8004b7e:	f240 1295 	movw	r2, #405	; 0x195
 8004b82:	490a      	ldr	r1, [pc, #40]	; (8004bac <memp_free_pool+0x40>)
 8004b84:	480a      	ldr	r0, [pc, #40]	; (8004bb0 <memp_free_pool+0x44>)
 8004b86:	f009 fcb5 	bl	800e4f4 <iprintf>
  if ((desc == NULL) || (mem == NULL)) {
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	d007      	beq.n	8004ba0 <memp_free_pool+0x34>
 8004b90:	683b      	ldr	r3, [r7, #0]
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	d004      	beq.n	8004ba0 <memp_free_pool+0x34>
    return;
  }

  do_memp_free_pool(desc, mem);
 8004b96:	6839      	ldr	r1, [r7, #0]
 8004b98:	6878      	ldr	r0, [r7, #4]
 8004b9a:	f7ff ffc1 	bl	8004b20 <do_memp_free_pool>
 8004b9e:	e000      	b.n	8004ba2 <memp_free_pool+0x36>
    return;
 8004ba0:	bf00      	nop
}
 8004ba2:	3708      	adds	r7, #8
 8004ba4:	46bd      	mov	sp, r7
 8004ba6:	bd80      	pop	{r7, pc}
 8004ba8:	0800f698 	.word	0x0800f698
 8004bac:	0800f714 	.word	0x0800f714
 8004bb0:	0800f6ec 	.word	0x0800f6ec

08004bb4 <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 8004bb4:	b580      	push	{r7, lr}
 8004bb6:	b082      	sub	sp, #8
 8004bb8:	af00      	add	r7, sp, #0
 8004bba:	4603      	mov	r3, r0
 8004bbc:	6039      	str	r1, [r7, #0]
 8004bbe:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 8004bc0:	79fb      	ldrb	r3, [r7, #7]
 8004bc2:	2b08      	cmp	r3, #8
 8004bc4:	d907      	bls.n	8004bd6 <memp_free+0x22>
 8004bc6:	4b0c      	ldr	r3, [pc, #48]	; (8004bf8 <memp_free+0x44>)
 8004bc8:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 8004bcc:	490b      	ldr	r1, [pc, #44]	; (8004bfc <memp_free+0x48>)
 8004bce:	480c      	ldr	r0, [pc, #48]	; (8004c00 <memp_free+0x4c>)
 8004bd0:	f009 fc90 	bl	800e4f4 <iprintf>
 8004bd4:	e00c      	b.n	8004bf0 <memp_free+0x3c>

  if (mem == NULL) {
 8004bd6:	683b      	ldr	r3, [r7, #0]
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	d008      	beq.n	8004bee <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 8004bdc:	79fb      	ldrb	r3, [r7, #7]
 8004bde:	4a09      	ldr	r2, [pc, #36]	; (8004c04 <memp_free+0x50>)
 8004be0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004be4:	6839      	ldr	r1, [r7, #0]
 8004be6:	4618      	mov	r0, r3
 8004be8:	f7ff ff9a 	bl	8004b20 <do_memp_free_pool>
 8004bec:	e000      	b.n	8004bf0 <memp_free+0x3c>
    return;
 8004bee:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 8004bf0:	3708      	adds	r7, #8
 8004bf2:	46bd      	mov	sp, r7
 8004bf4:	bd80      	pop	{r7, pc}
 8004bf6:	bf00      	nop
 8004bf8:	0800f698 	.word	0x0800f698
 8004bfc:	0800f768 	.word	0x0800f768
 8004c00:	0800f6ec 	.word	0x0800f6ec
 8004c04:	08011e58 	.word	0x08011e58

08004c08 <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 8004c08:	b480      	push	{r7}
 8004c0a:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 8004c0c:	bf00      	nop
 8004c0e:	46bd      	mov	sp, r7
 8004c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c14:	4770      	bx	lr
	...

08004c18 <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 8004c18:	b580      	push	{r7, lr}
 8004c1a:	b086      	sub	sp, #24
 8004c1c:	af00      	add	r7, sp, #0
 8004c1e:	60f8      	str	r0, [r7, #12]
 8004c20:	60b9      	str	r1, [r7, #8]
 8004c22:	607a      	str	r2, [r7, #4]
 8004c24:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	d108      	bne.n	8004c3e <netif_add+0x26>
 8004c2c:	4b57      	ldr	r3, [pc, #348]	; (8004d8c <netif_add+0x174>)
 8004c2e:	f240 1227 	movw	r2, #295	; 0x127
 8004c32:	4957      	ldr	r1, [pc, #348]	; (8004d90 <netif_add+0x178>)
 8004c34:	4857      	ldr	r0, [pc, #348]	; (8004d94 <netif_add+0x17c>)
 8004c36:	f009 fc5d 	bl	800e4f4 <iprintf>
 8004c3a:	2300      	movs	r3, #0
 8004c3c:	e0a2      	b.n	8004d84 <netif_add+0x16c>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 8004c3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c40:	2b00      	cmp	r3, #0
 8004c42:	d108      	bne.n	8004c56 <netif_add+0x3e>
 8004c44:	4b51      	ldr	r3, [pc, #324]	; (8004d8c <netif_add+0x174>)
 8004c46:	f44f 7294 	mov.w	r2, #296	; 0x128
 8004c4a:	4953      	ldr	r1, [pc, #332]	; (8004d98 <netif_add+0x180>)
 8004c4c:	4851      	ldr	r0, [pc, #324]	; (8004d94 <netif_add+0x17c>)
 8004c4e:	f009 fc51 	bl	800e4f4 <iprintf>
 8004c52:	2300      	movs	r3, #0
 8004c54:	e096      	b.n	8004d84 <netif_add+0x16c>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 8004c56:	68bb      	ldr	r3, [r7, #8]
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	d101      	bne.n	8004c60 <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 8004c5c:	4b4f      	ldr	r3, [pc, #316]	; (8004d9c <netif_add+0x184>)
 8004c5e:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	d101      	bne.n	8004c6a <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 8004c66:	4b4d      	ldr	r3, [pc, #308]	; (8004d9c <netif_add+0x184>)
 8004c68:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 8004c6a:	683b      	ldr	r3, [r7, #0]
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	d101      	bne.n	8004c74 <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 8004c70:	4b4a      	ldr	r3, [pc, #296]	; (8004d9c <netif_add+0x184>)
 8004c72:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	2200      	movs	r2, #0
 8004c78:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	2200      	movs	r2, #0
 8004c7e:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	2200      	movs	r2, #0
 8004c84:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	4a45      	ldr	r2, [pc, #276]	; (8004da0 <netif_add+0x188>)
 8004c8a:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	2200      	movs	r2, #0
 8004c90:	849a      	strh	r2, [r3, #36]	; 0x24
  netif->flags = 0;
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	2200      	movs	r2, #0
 8004c96:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	2200      	movs	r2, #0
 8004c9e:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	6a3a      	ldr	r2, [r7, #32]
 8004ca4:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
 8004ca6:	4b3f      	ldr	r3, [pc, #252]	; (8004da4 <netif_add+0x18c>)
 8004ca8:	781a      	ldrb	r2, [r3, #0]
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  netif->input = input;
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004cb4:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 8004cb6:	683b      	ldr	r3, [r7, #0]
 8004cb8:	687a      	ldr	r2, [r7, #4]
 8004cba:	68b9      	ldr	r1, [r7, #8]
 8004cbc:	68f8      	ldr	r0, [r7, #12]
 8004cbe:	f000 f913 	bl	8004ee8 <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 8004cc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cc4:	68f8      	ldr	r0, [r7, #12]
 8004cc6:	4798      	blx	r3
 8004cc8:	4603      	mov	r3, r0
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	d001      	beq.n	8004cd2 <netif_add+0xba>
    return NULL;
 8004cce:	2300      	movs	r3, #0
 8004cd0:	e058      	b.n	8004d84 <netif_add+0x16c>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8004cd8:	2bff      	cmp	r3, #255	; 0xff
 8004cda:	d103      	bne.n	8004ce4 <netif_add+0xcc>
        netif->num = 0;
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	2200      	movs	r2, #0
 8004ce0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      }
      num_netifs = 0;
 8004ce4:	2300      	movs	r3, #0
 8004ce6:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 8004ce8:	4b2f      	ldr	r3, [pc, #188]	; (8004da8 <netif_add+0x190>)
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	617b      	str	r3, [r7, #20]
 8004cee:	e02b      	b.n	8004d48 <netif_add+0x130>
        LWIP_ASSERT("netif already added", netif2 != netif);
 8004cf0:	697a      	ldr	r2, [r7, #20]
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	429a      	cmp	r2, r3
 8004cf6:	d106      	bne.n	8004d06 <netif_add+0xee>
 8004cf8:	4b24      	ldr	r3, [pc, #144]	; (8004d8c <netif_add+0x174>)
 8004cfa:	f240 128b 	movw	r2, #395	; 0x18b
 8004cfe:	492b      	ldr	r1, [pc, #172]	; (8004dac <netif_add+0x194>)
 8004d00:	4824      	ldr	r0, [pc, #144]	; (8004d94 <netif_add+0x17c>)
 8004d02:	f009 fbf7 	bl	800e4f4 <iprintf>
        num_netifs++;
 8004d06:	693b      	ldr	r3, [r7, #16]
 8004d08:	3301      	adds	r3, #1
 8004d0a:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 8004d0c:	693b      	ldr	r3, [r7, #16]
 8004d0e:	2bff      	cmp	r3, #255	; 0xff
 8004d10:	dd06      	ble.n	8004d20 <netif_add+0x108>
 8004d12:	4b1e      	ldr	r3, [pc, #120]	; (8004d8c <netif_add+0x174>)
 8004d14:	f240 128d 	movw	r2, #397	; 0x18d
 8004d18:	4925      	ldr	r1, [pc, #148]	; (8004db0 <netif_add+0x198>)
 8004d1a:	481e      	ldr	r0, [pc, #120]	; (8004d94 <netif_add+0x17c>)
 8004d1c:	f009 fbea 	bl	800e4f4 <iprintf>
        if (netif2->num == netif->num) {
 8004d20:	697b      	ldr	r3, [r7, #20]
 8004d22:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8004d2c:	429a      	cmp	r2, r3
 8004d2e:	d108      	bne.n	8004d42 <netif_add+0x12a>
          netif->num++;
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8004d36:	3301      	adds	r3, #1
 8004d38:	b2da      	uxtb	r2, r3
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
          break;
 8004d40:	e005      	b.n	8004d4e <netif_add+0x136>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 8004d42:	697b      	ldr	r3, [r7, #20]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	617b      	str	r3, [r7, #20]
 8004d48:	697b      	ldr	r3, [r7, #20]
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	d1d0      	bne.n	8004cf0 <netif_add+0xd8>
        }
      }
    } while (netif2 != NULL);
 8004d4e:	697b      	ldr	r3, [r7, #20]
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	d1be      	bne.n	8004cd2 <netif_add+0xba>
  }
  if (netif->num == 254) {
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8004d5a:	2bfe      	cmp	r3, #254	; 0xfe
 8004d5c:	d103      	bne.n	8004d66 <netif_add+0x14e>
    netif_num = 0;
 8004d5e:	4b11      	ldr	r3, [pc, #68]	; (8004da4 <netif_add+0x18c>)
 8004d60:	2200      	movs	r2, #0
 8004d62:	701a      	strb	r2, [r3, #0]
 8004d64:	e006      	b.n	8004d74 <netif_add+0x15c>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8004d6c:	3301      	adds	r3, #1
 8004d6e:	b2da      	uxtb	r2, r3
 8004d70:	4b0c      	ldr	r3, [pc, #48]	; (8004da4 <netif_add+0x18c>)
 8004d72:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 8004d74:	4b0c      	ldr	r3, [pc, #48]	; (8004da8 <netif_add+0x190>)
 8004d76:	681a      	ldr	r2, [r3, #0]
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 8004d7c:	4a0a      	ldr	r2, [pc, #40]	; (8004da8 <netif_add+0x190>)
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 8004d82:	68fb      	ldr	r3, [r7, #12]
}
 8004d84:	4618      	mov	r0, r3
 8004d86:	3718      	adds	r7, #24
 8004d88:	46bd      	mov	sp, r7
 8004d8a:	bd80      	pop	{r7, pc}
 8004d8c:	0800f784 	.word	0x0800f784
 8004d90:	0800f818 	.word	0x0800f818
 8004d94:	0800f7d4 	.word	0x0800f7d4
 8004d98:	0800f834 	.word	0x0800f834
 8004d9c:	08011ebc 	.word	0x08011ebc
 8004da0:	080051c3 	.word	0x080051c3
 8004da4:	2000827c 	.word	0x2000827c
 8004da8:	20008274 	.word	0x20008274
 8004dac:	0800f858 	.word	0x0800f858
 8004db0:	0800f86c 	.word	0x0800f86c

08004db4 <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8004db4:	b580      	push	{r7, lr}
 8004db6:	b082      	sub	sp, #8
 8004db8:	af00      	add	r7, sp, #0
 8004dba:	6078      	str	r0, [r7, #4]
 8004dbc:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 8004dbe:	6839      	ldr	r1, [r7, #0]
 8004dc0:	6878      	ldr	r0, [r7, #4]
 8004dc2:	f002 fb53 	bl	800746c <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 8004dc6:	6839      	ldr	r1, [r7, #0]
 8004dc8:	6878      	ldr	r0, [r7, #4]
 8004dca:	f006 ffaf 	bl	800bd2c <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 8004dce:	bf00      	nop
 8004dd0:	3708      	adds	r7, #8
 8004dd2:	46bd      	mov	sp, r7
 8004dd4:	bd80      	pop	{r7, pc}
	...

08004dd8 <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 8004dd8:	b580      	push	{r7, lr}
 8004dda:	b086      	sub	sp, #24
 8004ddc:	af00      	add	r7, sp, #0
 8004dde:	60f8      	str	r0, [r7, #12]
 8004de0:	60b9      	str	r1, [r7, #8]
 8004de2:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 8004de4:	68bb      	ldr	r3, [r7, #8]
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	d106      	bne.n	8004df8 <netif_do_set_ipaddr+0x20>
 8004dea:	4b1d      	ldr	r3, [pc, #116]	; (8004e60 <netif_do_set_ipaddr+0x88>)
 8004dec:	f240 12cb 	movw	r2, #459	; 0x1cb
 8004df0:	491c      	ldr	r1, [pc, #112]	; (8004e64 <netif_do_set_ipaddr+0x8c>)
 8004df2:	481d      	ldr	r0, [pc, #116]	; (8004e68 <netif_do_set_ipaddr+0x90>)
 8004df4:	f009 fb7e 	bl	800e4f4 <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	d106      	bne.n	8004e0c <netif_do_set_ipaddr+0x34>
 8004dfe:	4b18      	ldr	r3, [pc, #96]	; (8004e60 <netif_do_set_ipaddr+0x88>)
 8004e00:	f44f 72e6 	mov.w	r2, #460	; 0x1cc
 8004e04:	4917      	ldr	r1, [pc, #92]	; (8004e64 <netif_do_set_ipaddr+0x8c>)
 8004e06:	4818      	ldr	r0, [pc, #96]	; (8004e68 <netif_do_set_ipaddr+0x90>)
 8004e08:	f009 fb74 	bl	800e4f4 <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 8004e0c:	68bb      	ldr	r3, [r7, #8]
 8004e0e:	681a      	ldr	r2, [r3, #0]
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	3304      	adds	r3, #4
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	429a      	cmp	r2, r3
 8004e18:	d01c      	beq.n	8004e54 <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 8004e1a:	68bb      	ldr	r3, [r7, #8]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	3304      	adds	r3, #4
 8004e24:	681a      	ldr	r2, [r3, #0]
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 8004e2a:	f107 0314 	add.w	r3, r7, #20
 8004e2e:	4619      	mov	r1, r3
 8004e30:	6878      	ldr	r0, [r7, #4]
 8004e32:	f7ff ffbf 	bl	8004db4 <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 8004e36:	68bb      	ldr	r3, [r7, #8]
 8004e38:	2b00      	cmp	r3, #0
 8004e3a:	d002      	beq.n	8004e42 <netif_do_set_ipaddr+0x6a>
 8004e3c:	68bb      	ldr	r3, [r7, #8]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	e000      	b.n	8004e44 <netif_do_set_ipaddr+0x6c>
 8004e42:	2300      	movs	r3, #0
 8004e44:	68fa      	ldr	r2, [r7, #12]
 8004e46:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 8004e48:	2101      	movs	r1, #1
 8004e4a:	68f8      	ldr	r0, [r7, #12]
 8004e4c:	f000 f8d2 	bl	8004ff4 <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 8004e50:	2301      	movs	r3, #1
 8004e52:	e000      	b.n	8004e56 <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 8004e54:	2300      	movs	r3, #0
}
 8004e56:	4618      	mov	r0, r3
 8004e58:	3718      	adds	r7, #24
 8004e5a:	46bd      	mov	sp, r7
 8004e5c:	bd80      	pop	{r7, pc}
 8004e5e:	bf00      	nop
 8004e60:	0800f784 	.word	0x0800f784
 8004e64:	0800f89c 	.word	0x0800f89c
 8004e68:	0800f7d4 	.word	0x0800f7d4

08004e6c <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 8004e6c:	b480      	push	{r7}
 8004e6e:	b085      	sub	sp, #20
 8004e70:	af00      	add	r7, sp, #0
 8004e72:	60f8      	str	r0, [r7, #12]
 8004e74:	60b9      	str	r1, [r7, #8]
 8004e76:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 8004e78:	68bb      	ldr	r3, [r7, #8]
 8004e7a:	681a      	ldr	r2, [r3, #0]
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	3308      	adds	r3, #8
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	429a      	cmp	r2, r3
 8004e84:	d00a      	beq.n	8004e9c <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 8004e86:	68bb      	ldr	r3, [r7, #8]
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	d002      	beq.n	8004e92 <netif_do_set_netmask+0x26>
 8004e8c:	68bb      	ldr	r3, [r7, #8]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	e000      	b.n	8004e94 <netif_do_set_netmask+0x28>
 8004e92:	2300      	movs	r3, #0
 8004e94:	68fa      	ldr	r2, [r7, #12]
 8004e96:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 8004e98:	2301      	movs	r3, #1
 8004e9a:	e000      	b.n	8004e9e <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 8004e9c:	2300      	movs	r3, #0
}
 8004e9e:	4618      	mov	r0, r3
 8004ea0:	3714      	adds	r7, #20
 8004ea2:	46bd      	mov	sp, r7
 8004ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ea8:	4770      	bx	lr

08004eaa <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 8004eaa:	b480      	push	{r7}
 8004eac:	b085      	sub	sp, #20
 8004eae:	af00      	add	r7, sp, #0
 8004eb0:	60f8      	str	r0, [r7, #12]
 8004eb2:	60b9      	str	r1, [r7, #8]
 8004eb4:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 8004eb6:	68bb      	ldr	r3, [r7, #8]
 8004eb8:	681a      	ldr	r2, [r3, #0]
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	330c      	adds	r3, #12
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	429a      	cmp	r2, r3
 8004ec2:	d00a      	beq.n	8004eda <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 8004ec4:	68bb      	ldr	r3, [r7, #8]
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	d002      	beq.n	8004ed0 <netif_do_set_gw+0x26>
 8004eca:	68bb      	ldr	r3, [r7, #8]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	e000      	b.n	8004ed2 <netif_do_set_gw+0x28>
 8004ed0:	2300      	movs	r3, #0
 8004ed2:	68fa      	ldr	r2, [r7, #12]
 8004ed4:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 8004ed6:	2301      	movs	r3, #1
 8004ed8:	e000      	b.n	8004edc <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 8004eda:	2300      	movs	r3, #0
}
 8004edc:	4618      	mov	r0, r3
 8004ede:	3714      	adds	r7, #20
 8004ee0:	46bd      	mov	sp, r7
 8004ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ee6:	4770      	bx	lr

08004ee8 <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 8004ee8:	b580      	push	{r7, lr}
 8004eea:	b088      	sub	sp, #32
 8004eec:	af00      	add	r7, sp, #0
 8004eee:	60f8      	str	r0, [r7, #12]
 8004ef0:	60b9      	str	r1, [r7, #8]
 8004ef2:	607a      	str	r2, [r7, #4]
 8004ef4:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 8004ef6:	2300      	movs	r3, #0
 8004ef8:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 8004efa:	2300      	movs	r3, #0
 8004efc:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 8004efe:	68bb      	ldr	r3, [r7, #8]
 8004f00:	2b00      	cmp	r3, #0
 8004f02:	d101      	bne.n	8004f08 <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 8004f04:	4b1c      	ldr	r3, [pc, #112]	; (8004f78 <netif_set_addr+0x90>)
 8004f06:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	d101      	bne.n	8004f12 <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 8004f0e:	4b1a      	ldr	r3, [pc, #104]	; (8004f78 <netif_set_addr+0x90>)
 8004f10:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 8004f12:	683b      	ldr	r3, [r7, #0]
 8004f14:	2b00      	cmp	r3, #0
 8004f16:	d101      	bne.n	8004f1c <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 8004f18:	4b17      	ldr	r3, [pc, #92]	; (8004f78 <netif_set_addr+0x90>)
 8004f1a:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 8004f1c:	68bb      	ldr	r3, [r7, #8]
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	d003      	beq.n	8004f2a <netif_set_addr+0x42>
 8004f22:	68bb      	ldr	r3, [r7, #8]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	d101      	bne.n	8004f2e <netif_set_addr+0x46>
 8004f2a:	2301      	movs	r3, #1
 8004f2c:	e000      	b.n	8004f30 <netif_set_addr+0x48>
 8004f2e:	2300      	movs	r3, #0
 8004f30:	617b      	str	r3, [r7, #20]
  if (remove) {
 8004f32:	697b      	ldr	r3, [r7, #20]
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	d006      	beq.n	8004f46 <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 8004f38:	f107 0310 	add.w	r3, r7, #16
 8004f3c:	461a      	mov	r2, r3
 8004f3e:	68b9      	ldr	r1, [r7, #8]
 8004f40:	68f8      	ldr	r0, [r7, #12]
 8004f42:	f7ff ff49 	bl	8004dd8 <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 8004f46:	69fa      	ldr	r2, [r7, #28]
 8004f48:	6879      	ldr	r1, [r7, #4]
 8004f4a:	68f8      	ldr	r0, [r7, #12]
 8004f4c:	f7ff ff8e 	bl	8004e6c <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 8004f50:	69ba      	ldr	r2, [r7, #24]
 8004f52:	6839      	ldr	r1, [r7, #0]
 8004f54:	68f8      	ldr	r0, [r7, #12]
 8004f56:	f7ff ffa8 	bl	8004eaa <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 8004f5a:	697b      	ldr	r3, [r7, #20]
 8004f5c:	2b00      	cmp	r3, #0
 8004f5e:	d106      	bne.n	8004f6e <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 8004f60:	f107 0310 	add.w	r3, r7, #16
 8004f64:	461a      	mov	r2, r3
 8004f66:	68b9      	ldr	r1, [r7, #8]
 8004f68:	68f8      	ldr	r0, [r7, #12]
 8004f6a:	f7ff ff35 	bl	8004dd8 <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 8004f6e:	bf00      	nop
 8004f70:	3720      	adds	r7, #32
 8004f72:	46bd      	mov	sp, r7
 8004f74:	bd80      	pop	{r7, pc}
 8004f76:	bf00      	nop
 8004f78:	08011ebc 	.word	0x08011ebc

08004f7c <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 8004f7c:	b480      	push	{r7}
 8004f7e:	b083      	sub	sp, #12
 8004f80:	af00      	add	r7, sp, #0
 8004f82:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 8004f84:	4a04      	ldr	r2, [pc, #16]	; (8004f98 <netif_set_default+0x1c>)
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 8004f8a:	bf00      	nop
 8004f8c:	370c      	adds	r7, #12
 8004f8e:	46bd      	mov	sp, r7
 8004f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f94:	4770      	bx	lr
 8004f96:	bf00      	nop
 8004f98:	20008278 	.word	0x20008278

08004f9c <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 8004f9c:	b580      	push	{r7, lr}
 8004f9e:	b082      	sub	sp, #8
 8004fa0:	af00      	add	r7, sp, #0
 8004fa2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	d107      	bne.n	8004fba <netif_set_up+0x1e>
 8004faa:	4b0f      	ldr	r3, [pc, #60]	; (8004fe8 <netif_set_up+0x4c>)
 8004fac:	f44f 7254 	mov.w	r2, #848	; 0x350
 8004fb0:	490e      	ldr	r1, [pc, #56]	; (8004fec <netif_set_up+0x50>)
 8004fb2:	480f      	ldr	r0, [pc, #60]	; (8004ff0 <netif_set_up+0x54>)
 8004fb4:	f009 fa9e 	bl	800e4f4 <iprintf>
 8004fb8:	e013      	b.n	8004fe2 <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8004fc0:	f003 0301 	and.w	r3, r3, #1
 8004fc4:	2b00      	cmp	r3, #0
 8004fc6:	d10c      	bne.n	8004fe2 <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8004fce:	f043 0301 	orr.w	r3, r3, #1
 8004fd2:	b2da      	uxtb	r2, r3
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 8004fda:	2103      	movs	r1, #3
 8004fdc:	6878      	ldr	r0, [r7, #4]
 8004fde:	f000 f809 	bl	8004ff4 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 8004fe2:	3708      	adds	r7, #8
 8004fe4:	46bd      	mov	sp, r7
 8004fe6:	bd80      	pop	{r7, pc}
 8004fe8:	0800f784 	.word	0x0800f784
 8004fec:	0800f90c 	.word	0x0800f90c
 8004ff0:	0800f7d4 	.word	0x0800f7d4

08004ff4 <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 8004ff4:	b580      	push	{r7, lr}
 8004ff6:	b082      	sub	sp, #8
 8004ff8:	af00      	add	r7, sp, #0
 8004ffa:	6078      	str	r0, [r7, #4]
 8004ffc:	460b      	mov	r3, r1
 8004ffe:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	2b00      	cmp	r3, #0
 8005004:	d106      	bne.n	8005014 <netif_issue_reports+0x20>
 8005006:	4b18      	ldr	r3, [pc, #96]	; (8005068 <netif_issue_reports+0x74>)
 8005008:	f240 326d 	movw	r2, #877	; 0x36d
 800500c:	4917      	ldr	r1, [pc, #92]	; (800506c <netif_issue_reports+0x78>)
 800500e:	4818      	ldr	r0, [pc, #96]	; (8005070 <netif_issue_reports+0x7c>)
 8005010:	f009 fa70 	bl	800e4f4 <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800501a:	f003 0304 	and.w	r3, r3, #4
 800501e:	2b00      	cmp	r3, #0
 8005020:	d01e      	beq.n	8005060 <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8005028:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800502c:	2b00      	cmp	r3, #0
 800502e:	d017      	beq.n	8005060 <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 8005030:	78fb      	ldrb	r3, [r7, #3]
 8005032:	f003 0301 	and.w	r3, r3, #1
 8005036:	2b00      	cmp	r3, #0
 8005038:	d013      	beq.n	8005062 <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	3304      	adds	r3, #4
 800503e:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 8005040:	2b00      	cmp	r3, #0
 8005042:	d00e      	beq.n	8005062 <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800504a:	f003 0308 	and.w	r3, r3, #8
 800504e:	2b00      	cmp	r3, #0
 8005050:	d007      	beq.n	8005062 <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	3304      	adds	r3, #4
 8005056:	4619      	mov	r1, r3
 8005058:	6878      	ldr	r0, [r7, #4]
 800505a:	f007 fdd1 	bl	800cc00 <etharp_request>
 800505e:	e000      	b.n	8005062 <netif_issue_reports+0x6e>
    return;
 8005060:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 8005062:	3708      	adds	r7, #8
 8005064:	46bd      	mov	sp, r7
 8005066:	bd80      	pop	{r7, pc}
 8005068:	0800f784 	.word	0x0800f784
 800506c:	0800f928 	.word	0x0800f928
 8005070:	0800f7d4 	.word	0x0800f7d4

08005074 <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 8005074:	b580      	push	{r7, lr}
 8005076:	b082      	sub	sp, #8
 8005078:	af00      	add	r7, sp, #0
 800507a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	2b00      	cmp	r3, #0
 8005080:	d107      	bne.n	8005092 <netif_set_down+0x1e>
 8005082:	4b12      	ldr	r3, [pc, #72]	; (80050cc <netif_set_down+0x58>)
 8005084:	f240 329b 	movw	r2, #923	; 0x39b
 8005088:	4911      	ldr	r1, [pc, #68]	; (80050d0 <netif_set_down+0x5c>)
 800508a:	4812      	ldr	r0, [pc, #72]	; (80050d4 <netif_set_down+0x60>)
 800508c:	f009 fa32 	bl	800e4f4 <iprintf>
 8005090:	e019      	b.n	80050c6 <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8005098:	f003 0301 	and.w	r3, r3, #1
 800509c:	2b00      	cmp	r3, #0
 800509e:	d012      	beq.n	80050c6 <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80050a6:	f023 0301 	bic.w	r3, r3, #1
 80050aa:	b2da      	uxtb	r2, r3
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80050b8:	f003 0308 	and.w	r3, r3, #8
 80050bc:	2b00      	cmp	r3, #0
 80050be:	d002      	beq.n	80050c6 <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 80050c0:	6878      	ldr	r0, [r7, #4]
 80050c2:	f007 f95b 	bl	800c37c <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 80050c6:	3708      	adds	r7, #8
 80050c8:	46bd      	mov	sp, r7
 80050ca:	bd80      	pop	{r7, pc}
 80050cc:	0800f784 	.word	0x0800f784
 80050d0:	0800f94c 	.word	0x0800f94c
 80050d4:	0800f7d4 	.word	0x0800f7d4

080050d8 <netif_set_link_up>:
 * @ingroup netif
 * Called by a driver when its link goes up
 */
void
netif_set_link_up(struct netif *netif)
{
 80050d8:	b580      	push	{r7, lr}
 80050da:	b082      	sub	sp, #8
 80050dc:	af00      	add	r7, sp, #0
 80050de:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	d107      	bne.n	80050f6 <netif_set_link_up+0x1e>
 80050e6:	4b13      	ldr	r3, [pc, #76]	; (8005134 <netif_set_link_up+0x5c>)
 80050e8:	f44f 7278 	mov.w	r2, #992	; 0x3e0
 80050ec:	4912      	ldr	r1, [pc, #72]	; (8005138 <netif_set_link_up+0x60>)
 80050ee:	4813      	ldr	r0, [pc, #76]	; (800513c <netif_set_link_up+0x64>)
 80050f0:	f009 fa00 	bl	800e4f4 <iprintf>
 80050f4:	e01b      	b.n	800512e <netif_set_link_up+0x56>

  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80050fc:	f003 0304 	and.w	r3, r3, #4
 8005100:	2b00      	cmp	r3, #0
 8005102:	d114      	bne.n	800512e <netif_set_link_up+0x56>
    netif_set_flags(netif, NETIF_FLAG_LINK_UP);
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800510a:	f043 0304 	orr.w	r3, r3, #4
 800510e:	b2da      	uxtb	r2, r3
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

#if LWIP_AUTOIP
    autoip_network_changed(netif);
#endif /* LWIP_AUTOIP */

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 8005116:	2103      	movs	r1, #3
 8005118:	6878      	ldr	r0, [r7, #4]
 800511a:	f7ff ff6b 	bl	8004ff4 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_LINK_CALLBACK(netif);
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	69db      	ldr	r3, [r3, #28]
 8005122:	2b00      	cmp	r3, #0
 8005124:	d003      	beq.n	800512e <netif_set_link_up+0x56>
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	69db      	ldr	r3, [r3, #28]
 800512a:	6878      	ldr	r0, [r7, #4]
 800512c:	4798      	blx	r3
      args.link_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 800512e:	3708      	adds	r7, #8
 8005130:	46bd      	mov	sp, r7
 8005132:	bd80      	pop	{r7, pc}
 8005134:	0800f784 	.word	0x0800f784
 8005138:	0800f96c 	.word	0x0800f96c
 800513c:	0800f7d4 	.word	0x0800f7d4

08005140 <netif_set_link_down>:
 * @ingroup netif
 * Called by a driver when its link goes down
 */
void
netif_set_link_down(struct netif *netif)
{
 8005140:	b580      	push	{r7, lr}
 8005142:	b082      	sub	sp, #8
 8005144:	af00      	add	r7, sp, #0
 8005146:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	2b00      	cmp	r3, #0
 800514c:	d107      	bne.n	800515e <netif_set_link_down+0x1e>
 800514e:	4b11      	ldr	r3, [pc, #68]	; (8005194 <netif_set_link_down+0x54>)
 8005150:	f240 4206 	movw	r2, #1030	; 0x406
 8005154:	4910      	ldr	r1, [pc, #64]	; (8005198 <netif_set_link_down+0x58>)
 8005156:	4811      	ldr	r0, [pc, #68]	; (800519c <netif_set_link_down+0x5c>)
 8005158:	f009 f9cc 	bl	800e4f4 <iprintf>
 800515c:	e017      	b.n	800518e <netif_set_link_down+0x4e>

  if (netif->flags & NETIF_FLAG_LINK_UP) {
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8005164:	f003 0304 	and.w	r3, r3, #4
 8005168:	2b00      	cmp	r3, #0
 800516a:	d010      	beq.n	800518e <netif_set_link_down+0x4e>
    netif_clear_flags(netif, NETIF_FLAG_LINK_UP);
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8005172:	f023 0304 	bic.w	r3, r3, #4
 8005176:	b2da      	uxtb	r2, r3
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    NETIF_LINK_CALLBACK(netif);
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	69db      	ldr	r3, [r3, #28]
 8005182:	2b00      	cmp	r3, #0
 8005184:	d003      	beq.n	800518e <netif_set_link_down+0x4e>
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	69db      	ldr	r3, [r3, #28]
 800518a:	6878      	ldr	r0, [r7, #4]
 800518c:	4798      	blx	r3
      args.link_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 800518e:	3708      	adds	r7, #8
 8005190:	46bd      	mov	sp, r7
 8005192:	bd80      	pop	{r7, pc}
 8005194:	0800f784 	.word	0x0800f784
 8005198:	0800f990 	.word	0x0800f990
 800519c:	0800f7d4 	.word	0x0800f7d4

080051a0 <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 80051a0:	b480      	push	{r7}
 80051a2:	b083      	sub	sp, #12
 80051a4:	af00      	add	r7, sp, #0
 80051a6:	6078      	str	r0, [r7, #4]
 80051a8:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	2b00      	cmp	r3, #0
 80051ae:	d002      	beq.n	80051b6 <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	683a      	ldr	r2, [r7, #0]
 80051b4:	61da      	str	r2, [r3, #28]
  }
}
 80051b6:	bf00      	nop
 80051b8:	370c      	adds	r7, #12
 80051ba:	46bd      	mov	sp, r7
 80051bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051c0:	4770      	bx	lr

080051c2 <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 80051c2:	b480      	push	{r7}
 80051c4:	b085      	sub	sp, #20
 80051c6:	af00      	add	r7, sp, #0
 80051c8:	60f8      	str	r0, [r7, #12]
 80051ca:	60b9      	str	r1, [r7, #8]
 80051cc:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 80051ce:	f06f 030b 	mvn.w	r3, #11
}
 80051d2:	4618      	mov	r0, r3
 80051d4:	3714      	adds	r7, #20
 80051d6:	46bd      	mov	sp, r7
 80051d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051dc:	4770      	bx	lr
	...

080051e0 <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 80051e0:	b480      	push	{r7}
 80051e2:	b085      	sub	sp, #20
 80051e4:	af00      	add	r7, sp, #0
 80051e6:	4603      	mov	r3, r0
 80051e8:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 80051ea:	79fb      	ldrb	r3, [r7, #7]
 80051ec:	2b00      	cmp	r3, #0
 80051ee:	d013      	beq.n	8005218 <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 80051f0:	4b0d      	ldr	r3, [pc, #52]	; (8005228 <netif_get_by_index+0x48>)
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	60fb      	str	r3, [r7, #12]
 80051f6:	e00c      	b.n	8005212 <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80051fe:	3301      	adds	r3, #1
 8005200:	b2db      	uxtb	r3, r3
 8005202:	79fa      	ldrb	r2, [r7, #7]
 8005204:	429a      	cmp	r2, r3
 8005206:	d101      	bne.n	800520c <netif_get_by_index+0x2c>
        return netif; /* found! */
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	e006      	b.n	800521a <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	60fb      	str	r3, [r7, #12]
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	2b00      	cmp	r3, #0
 8005216:	d1ef      	bne.n	80051f8 <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 8005218:	2300      	movs	r3, #0
}
 800521a:	4618      	mov	r0, r3
 800521c:	3714      	adds	r7, #20
 800521e:	46bd      	mov	sp, r7
 8005220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005224:	4770      	bx	lr
 8005226:	bf00      	nop
 8005228:	20008274 	.word	0x20008274

0800522c <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 800522c:	b580      	push	{r7, lr}
 800522e:	b082      	sub	sp, #8
 8005230:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 8005232:	4b0c      	ldr	r3, [pc, #48]	; (8005264 <pbuf_free_ooseq+0x38>)
 8005234:	2200      	movs	r2, #0
 8005236:	701a      	strb	r2, [r3, #0]

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 8005238:	4b0b      	ldr	r3, [pc, #44]	; (8005268 <pbuf_free_ooseq+0x3c>)
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	607b      	str	r3, [r7, #4]
 800523e:	e00a      	b.n	8005256 <pbuf_free_ooseq+0x2a>
    if (pcb->ooseq != NULL) {
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005244:	2b00      	cmp	r3, #0
 8005246:	d003      	beq.n	8005250 <pbuf_free_ooseq+0x24>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_free_ooseq(pcb);
 8005248:	6878      	ldr	r0, [r7, #4]
 800524a:	f002 f94d 	bl	80074e8 <tcp_free_ooseq>
      return;
 800524e:	e005      	b.n	800525c <pbuf_free_ooseq+0x30>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	68db      	ldr	r3, [r3, #12]
 8005254:	607b      	str	r3, [r7, #4]
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	2b00      	cmp	r3, #0
 800525a:	d1f1      	bne.n	8005240 <pbuf_free_ooseq+0x14>
    }
  }
}
 800525c:	3708      	adds	r7, #8
 800525e:	46bd      	mov	sp, r7
 8005260:	bd80      	pop	{r7, pc}
 8005262:	bf00      	nop
 8005264:	2000827d 	.word	0x2000827d
 8005268:	2000828c 	.word	0x2000828c

0800526c <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 800526c:	b480      	push	{r7}
 800526e:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
 8005270:	4b03      	ldr	r3, [pc, #12]	; (8005280 <pbuf_pool_is_empty+0x14>)
 8005272:	2201      	movs	r2, #1
 8005274:	701a      	strb	r2, [r3, #0]
  if (!queued) {
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 8005276:	bf00      	nop
 8005278:	46bd      	mov	sp, r7
 800527a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800527e:	4770      	bx	lr
 8005280:	2000827d 	.word	0x2000827d

08005284 <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 8005284:	b480      	push	{r7}
 8005286:	b085      	sub	sp, #20
 8005288:	af00      	add	r7, sp, #0
 800528a:	60f8      	str	r0, [r7, #12]
 800528c:	60b9      	str	r1, [r7, #8]
 800528e:	4611      	mov	r1, r2
 8005290:	461a      	mov	r2, r3
 8005292:	460b      	mov	r3, r1
 8005294:	80fb      	strh	r3, [r7, #6]
 8005296:	4613      	mov	r3, r2
 8005298:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	2200      	movs	r2, #0
 800529e:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	68ba      	ldr	r2, [r7, #8]
 80052a4:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	88fa      	ldrh	r2, [r7, #6]
 80052aa:	811a      	strh	r2, [r3, #8]
  p->len = len;
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	88ba      	ldrh	r2, [r7, #4]
 80052b0:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 80052b2:	8b3b      	ldrh	r3, [r7, #24]
 80052b4:	b2da      	uxtb	r2, r3
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	7f3a      	ldrb	r2, [r7, #28]
 80052be:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	2201      	movs	r2, #1
 80052c4:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	2200      	movs	r2, #0
 80052ca:	73da      	strb	r2, [r3, #15]
}
 80052cc:	bf00      	nop
 80052ce:	3714      	adds	r7, #20
 80052d0:	46bd      	mov	sp, r7
 80052d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052d6:	4770      	bx	lr

080052d8 <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 80052d8:	b580      	push	{r7, lr}
 80052da:	b08c      	sub	sp, #48	; 0x30
 80052dc:	af02      	add	r7, sp, #8
 80052de:	4603      	mov	r3, r0
 80052e0:	71fb      	strb	r3, [r7, #7]
 80052e2:	460b      	mov	r3, r1
 80052e4:	80bb      	strh	r3, [r7, #4]
 80052e6:	4613      	mov	r3, r2
 80052e8:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 80052ea:	79fb      	ldrb	r3, [r7, #7]
 80052ec:	847b      	strh	r3, [r7, #34]	; 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 80052ee:	887b      	ldrh	r3, [r7, #2]
 80052f0:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 80052f4:	d07f      	beq.n	80053f6 <pbuf_alloc+0x11e>
 80052f6:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 80052fa:	f300 80c8 	bgt.w	800548e <pbuf_alloc+0x1b6>
 80052fe:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 8005302:	d010      	beq.n	8005326 <pbuf_alloc+0x4e>
 8005304:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 8005308:	f300 80c1 	bgt.w	800548e <pbuf_alloc+0x1b6>
 800530c:	2b01      	cmp	r3, #1
 800530e:	d002      	beq.n	8005316 <pbuf_alloc+0x3e>
 8005310:	2b41      	cmp	r3, #65	; 0x41
 8005312:	f040 80bc 	bne.w	800548e <pbuf_alloc+0x1b6>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 8005316:	887a      	ldrh	r2, [r7, #2]
 8005318:	88bb      	ldrh	r3, [r7, #4]
 800531a:	4619      	mov	r1, r3
 800531c:	2000      	movs	r0, #0
 800531e:	f000 f8d1 	bl	80054c4 <pbuf_alloc_reference>
 8005322:	6278      	str	r0, [r7, #36]	; 0x24
      break;
 8005324:	e0bd      	b.n	80054a2 <pbuf_alloc+0x1ca>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 8005326:	2300      	movs	r3, #0
 8005328:	627b      	str	r3, [r7, #36]	; 0x24
      last = NULL;
 800532a:	2300      	movs	r3, #0
 800532c:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 800532e:	88bb      	ldrh	r3, [r7, #4]
 8005330:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 8005332:	2008      	movs	r0, #8
 8005334:	f7ff fbce 	bl	8004ad4 <memp_malloc>
 8005338:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 800533a:	693b      	ldr	r3, [r7, #16]
 800533c:	2b00      	cmp	r3, #0
 800533e:	d109      	bne.n	8005354 <pbuf_alloc+0x7c>
          PBUF_POOL_IS_EMPTY();
 8005340:	f7ff ff94 	bl	800526c <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 8005344:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005346:	2b00      	cmp	r3, #0
 8005348:	d002      	beq.n	8005350 <pbuf_alloc+0x78>
            pbuf_free(p);
 800534a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800534c:	f000 faa8 	bl	80058a0 <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 8005350:	2300      	movs	r3, #0
 8005352:	e0a7      	b.n	80054a4 <pbuf_alloc+0x1cc>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 8005354:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8005356:	3303      	adds	r3, #3
 8005358:	b29b      	uxth	r3, r3
 800535a:	f023 0303 	bic.w	r3, r3, #3
 800535e:	b29b      	uxth	r3, r3
 8005360:	f5c3 7314 	rsb	r3, r3, #592	; 0x250
 8005364:	b29b      	uxth	r3, r3
 8005366:	8b7a      	ldrh	r2, [r7, #26]
 8005368:	4293      	cmp	r3, r2
 800536a:	bf28      	it	cs
 800536c:	4613      	movcs	r3, r2
 800536e:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 8005370:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8005372:	3310      	adds	r3, #16
 8005374:	693a      	ldr	r2, [r7, #16]
 8005376:	4413      	add	r3, r2
 8005378:	3303      	adds	r3, #3
 800537a:	f023 0303 	bic.w	r3, r3, #3
 800537e:	4618      	mov	r0, r3
 8005380:	89f9      	ldrh	r1, [r7, #14]
 8005382:	8b7a      	ldrh	r2, [r7, #26]
 8005384:	2300      	movs	r3, #0
 8005386:	9301      	str	r3, [sp, #4]
 8005388:	887b      	ldrh	r3, [r7, #2]
 800538a:	9300      	str	r3, [sp, #0]
 800538c:	460b      	mov	r3, r1
 800538e:	4601      	mov	r1, r0
 8005390:	6938      	ldr	r0, [r7, #16]
 8005392:	f7ff ff77 	bl	8005284 <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 8005396:	693b      	ldr	r3, [r7, #16]
 8005398:	685b      	ldr	r3, [r3, #4]
 800539a:	f003 0303 	and.w	r3, r3, #3
 800539e:	2b00      	cmp	r3, #0
 80053a0:	d006      	beq.n	80053b0 <pbuf_alloc+0xd8>
 80053a2:	4b42      	ldr	r3, [pc, #264]	; (80054ac <pbuf_alloc+0x1d4>)
 80053a4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80053a8:	4941      	ldr	r1, [pc, #260]	; (80054b0 <pbuf_alloc+0x1d8>)
 80053aa:	4842      	ldr	r0, [pc, #264]	; (80054b4 <pbuf_alloc+0x1dc>)
 80053ac:	f009 f8a2 	bl	800e4f4 <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 80053b0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80053b2:	3303      	adds	r3, #3
 80053b4:	f023 0303 	bic.w	r3, r3, #3
 80053b8:	f5b3 7f14 	cmp.w	r3, #592	; 0x250
 80053bc:	d106      	bne.n	80053cc <pbuf_alloc+0xf4>
 80053be:	4b3b      	ldr	r3, [pc, #236]	; (80054ac <pbuf_alloc+0x1d4>)
 80053c0:	f44f 7281 	mov.w	r2, #258	; 0x102
 80053c4:	493c      	ldr	r1, [pc, #240]	; (80054b8 <pbuf_alloc+0x1e0>)
 80053c6:	483b      	ldr	r0, [pc, #236]	; (80054b4 <pbuf_alloc+0x1dc>)
 80053c8:	f009 f894 	bl	800e4f4 <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 80053cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	d102      	bne.n	80053d8 <pbuf_alloc+0x100>
          /* allocated head of pbuf chain (into p) */
          p = q;
 80053d2:	693b      	ldr	r3, [r7, #16]
 80053d4:	627b      	str	r3, [r7, #36]	; 0x24
 80053d6:	e002      	b.n	80053de <pbuf_alloc+0x106>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 80053d8:	69fb      	ldr	r3, [r7, #28]
 80053da:	693a      	ldr	r2, [r7, #16]
 80053dc:	601a      	str	r2, [r3, #0]
        }
        last = q;
 80053de:	693b      	ldr	r3, [r7, #16]
 80053e0:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 80053e2:	8b7a      	ldrh	r2, [r7, #26]
 80053e4:	89fb      	ldrh	r3, [r7, #14]
 80053e6:	1ad3      	subs	r3, r2, r3
 80053e8:	837b      	strh	r3, [r7, #26]
        offset = 0;
 80053ea:	2300      	movs	r3, #0
 80053ec:	847b      	strh	r3, [r7, #34]	; 0x22
      } while (rem_len > 0);
 80053ee:	8b7b      	ldrh	r3, [r7, #26]
 80053f0:	2b00      	cmp	r3, #0
 80053f2:	d19e      	bne.n	8005332 <pbuf_alloc+0x5a>
      break;
 80053f4:	e055      	b.n	80054a2 <pbuf_alloc+0x1ca>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 80053f6:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80053f8:	3303      	adds	r3, #3
 80053fa:	b29b      	uxth	r3, r3
 80053fc:	f023 0303 	bic.w	r3, r3, #3
 8005400:	b29a      	uxth	r2, r3
 8005402:	88bb      	ldrh	r3, [r7, #4]
 8005404:	3303      	adds	r3, #3
 8005406:	b29b      	uxth	r3, r3
 8005408:	f023 0303 	bic.w	r3, r3, #3
 800540c:	b29b      	uxth	r3, r3
 800540e:	4413      	add	r3, r2
 8005410:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 8005412:	8b3b      	ldrh	r3, [r7, #24]
 8005414:	3310      	adds	r3, #16
 8005416:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 8005418:	8b3a      	ldrh	r2, [r7, #24]
 800541a:	88bb      	ldrh	r3, [r7, #4]
 800541c:	3303      	adds	r3, #3
 800541e:	f023 0303 	bic.w	r3, r3, #3
 8005422:	429a      	cmp	r2, r3
 8005424:	d306      	bcc.n	8005434 <pbuf_alloc+0x15c>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 8005426:	8afa      	ldrh	r2, [r7, #22]
 8005428:	88bb      	ldrh	r3, [r7, #4]
 800542a:	3303      	adds	r3, #3
 800542c:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 8005430:	429a      	cmp	r2, r3
 8005432:	d201      	bcs.n	8005438 <pbuf_alloc+0x160>
        return NULL;
 8005434:	2300      	movs	r3, #0
 8005436:	e035      	b.n	80054a4 <pbuf_alloc+0x1cc>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 8005438:	8afb      	ldrh	r3, [r7, #22]
 800543a:	4618      	mov	r0, r3
 800543c:	f7ff f9ba 	bl	80047b4 <mem_malloc>
 8005440:	6278      	str	r0, [r7, #36]	; 0x24
      if (p == NULL) {
 8005442:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005444:	2b00      	cmp	r3, #0
 8005446:	d101      	bne.n	800544c <pbuf_alloc+0x174>
        return NULL;
 8005448:	2300      	movs	r3, #0
 800544a:	e02b      	b.n	80054a4 <pbuf_alloc+0x1cc>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 800544c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800544e:	3310      	adds	r3, #16
 8005450:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005452:	4413      	add	r3, r2
 8005454:	3303      	adds	r3, #3
 8005456:	f023 0303 	bic.w	r3, r3, #3
 800545a:	4618      	mov	r0, r3
 800545c:	88b9      	ldrh	r1, [r7, #4]
 800545e:	88ba      	ldrh	r2, [r7, #4]
 8005460:	2300      	movs	r3, #0
 8005462:	9301      	str	r3, [sp, #4]
 8005464:	887b      	ldrh	r3, [r7, #2]
 8005466:	9300      	str	r3, [sp, #0]
 8005468:	460b      	mov	r3, r1
 800546a:	4601      	mov	r1, r0
 800546c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800546e:	f7ff ff09 	bl	8005284 <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 8005472:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005474:	685b      	ldr	r3, [r3, #4]
 8005476:	f003 0303 	and.w	r3, r3, #3
 800547a:	2b00      	cmp	r3, #0
 800547c:	d010      	beq.n	80054a0 <pbuf_alloc+0x1c8>
 800547e:	4b0b      	ldr	r3, [pc, #44]	; (80054ac <pbuf_alloc+0x1d4>)
 8005480:	f44f 7291 	mov.w	r2, #290	; 0x122
 8005484:	490d      	ldr	r1, [pc, #52]	; (80054bc <pbuf_alloc+0x1e4>)
 8005486:	480b      	ldr	r0, [pc, #44]	; (80054b4 <pbuf_alloc+0x1dc>)
 8005488:	f009 f834 	bl	800e4f4 <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 800548c:	e008      	b.n	80054a0 <pbuf_alloc+0x1c8>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 800548e:	4b07      	ldr	r3, [pc, #28]	; (80054ac <pbuf_alloc+0x1d4>)
 8005490:	f240 1227 	movw	r2, #295	; 0x127
 8005494:	490a      	ldr	r1, [pc, #40]	; (80054c0 <pbuf_alloc+0x1e8>)
 8005496:	4807      	ldr	r0, [pc, #28]	; (80054b4 <pbuf_alloc+0x1dc>)
 8005498:	f009 f82c 	bl	800e4f4 <iprintf>
      return NULL;
 800549c:	2300      	movs	r3, #0
 800549e:	e001      	b.n	80054a4 <pbuf_alloc+0x1cc>
      break;
 80054a0:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 80054a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80054a4:	4618      	mov	r0, r3
 80054a6:	3728      	adds	r7, #40	; 0x28
 80054a8:	46bd      	mov	sp, r7
 80054aa:	bd80      	pop	{r7, pc}
 80054ac:	0800f9b4 	.word	0x0800f9b4
 80054b0:	0800f9e4 	.word	0x0800f9e4
 80054b4:	0800fa14 	.word	0x0800fa14
 80054b8:	0800fa3c 	.word	0x0800fa3c
 80054bc:	0800fa70 	.word	0x0800fa70
 80054c0:	0800fa9c 	.word	0x0800fa9c

080054c4 <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 80054c4:	b580      	push	{r7, lr}
 80054c6:	b086      	sub	sp, #24
 80054c8:	af02      	add	r7, sp, #8
 80054ca:	6078      	str	r0, [r7, #4]
 80054cc:	460b      	mov	r3, r1
 80054ce:	807b      	strh	r3, [r7, #2]
 80054d0:	4613      	mov	r3, r2
 80054d2:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 80054d4:	883b      	ldrh	r3, [r7, #0]
 80054d6:	2b41      	cmp	r3, #65	; 0x41
 80054d8:	d009      	beq.n	80054ee <pbuf_alloc_reference+0x2a>
 80054da:	883b      	ldrh	r3, [r7, #0]
 80054dc:	2b01      	cmp	r3, #1
 80054de:	d006      	beq.n	80054ee <pbuf_alloc_reference+0x2a>
 80054e0:	4b0f      	ldr	r3, [pc, #60]	; (8005520 <pbuf_alloc_reference+0x5c>)
 80054e2:	f44f 72a5 	mov.w	r2, #330	; 0x14a
 80054e6:	490f      	ldr	r1, [pc, #60]	; (8005524 <pbuf_alloc_reference+0x60>)
 80054e8:	480f      	ldr	r0, [pc, #60]	; (8005528 <pbuf_alloc_reference+0x64>)
 80054ea:	f009 f803 	bl	800e4f4 <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 80054ee:	2007      	movs	r0, #7
 80054f0:	f7ff faf0 	bl	8004ad4 <memp_malloc>
 80054f4:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	2b00      	cmp	r3, #0
 80054fa:	d101      	bne.n	8005500 <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 80054fc:	2300      	movs	r3, #0
 80054fe:	e00b      	b.n	8005518 <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 8005500:	8879      	ldrh	r1, [r7, #2]
 8005502:	887a      	ldrh	r2, [r7, #2]
 8005504:	2300      	movs	r3, #0
 8005506:	9301      	str	r3, [sp, #4]
 8005508:	883b      	ldrh	r3, [r7, #0]
 800550a:	9300      	str	r3, [sp, #0]
 800550c:	460b      	mov	r3, r1
 800550e:	6879      	ldr	r1, [r7, #4]
 8005510:	68f8      	ldr	r0, [r7, #12]
 8005512:	f7ff feb7 	bl	8005284 <pbuf_init_alloced_pbuf>
  return p;
 8005516:	68fb      	ldr	r3, [r7, #12]
}
 8005518:	4618      	mov	r0, r3
 800551a:	3710      	adds	r7, #16
 800551c:	46bd      	mov	sp, r7
 800551e:	bd80      	pop	{r7, pc}
 8005520:	0800f9b4 	.word	0x0800f9b4
 8005524:	0800fab8 	.word	0x0800fab8
 8005528:	0800fa14 	.word	0x0800fa14

0800552c <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 800552c:	b580      	push	{r7, lr}
 800552e:	b088      	sub	sp, #32
 8005530:	af02      	add	r7, sp, #8
 8005532:	607b      	str	r3, [r7, #4]
 8005534:	4603      	mov	r3, r0
 8005536:	73fb      	strb	r3, [r7, #15]
 8005538:	460b      	mov	r3, r1
 800553a:	81bb      	strh	r3, [r7, #12]
 800553c:	4613      	mov	r3, r2
 800553e:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 8005540:	7bfb      	ldrb	r3, [r7, #15]
 8005542:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 8005544:	8a7b      	ldrh	r3, [r7, #18]
 8005546:	3303      	adds	r3, #3
 8005548:	f023 0203 	bic.w	r2, r3, #3
 800554c:	89bb      	ldrh	r3, [r7, #12]
 800554e:	441a      	add	r2, r3
 8005550:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005552:	429a      	cmp	r2, r3
 8005554:	d901      	bls.n	800555a <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 8005556:	2300      	movs	r3, #0
 8005558:	e018      	b.n	800558c <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 800555a:	6a3b      	ldr	r3, [r7, #32]
 800555c:	2b00      	cmp	r3, #0
 800555e:	d007      	beq.n	8005570 <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 8005560:	8a7b      	ldrh	r3, [r7, #18]
 8005562:	3303      	adds	r3, #3
 8005564:	f023 0303 	bic.w	r3, r3, #3
 8005568:	6a3a      	ldr	r2, [r7, #32]
 800556a:	4413      	add	r3, r2
 800556c:	617b      	str	r3, [r7, #20]
 800556e:	e001      	b.n	8005574 <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 8005570:	2300      	movs	r3, #0
 8005572:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 8005574:	6878      	ldr	r0, [r7, #4]
 8005576:	89b9      	ldrh	r1, [r7, #12]
 8005578:	89ba      	ldrh	r2, [r7, #12]
 800557a:	2302      	movs	r3, #2
 800557c:	9301      	str	r3, [sp, #4]
 800557e:	897b      	ldrh	r3, [r7, #10]
 8005580:	9300      	str	r3, [sp, #0]
 8005582:	460b      	mov	r3, r1
 8005584:	6979      	ldr	r1, [r7, #20]
 8005586:	f7ff fe7d 	bl	8005284 <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 800558a:	687b      	ldr	r3, [r7, #4]
}
 800558c:	4618      	mov	r0, r3
 800558e:	3718      	adds	r7, #24
 8005590:	46bd      	mov	sp, r7
 8005592:	bd80      	pop	{r7, pc}

08005594 <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 8005594:	b580      	push	{r7, lr}
 8005596:	b084      	sub	sp, #16
 8005598:	af00      	add	r7, sp, #0
 800559a:	6078      	str	r0, [r7, #4]
 800559c:	460b      	mov	r3, r1
 800559e:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	2b00      	cmp	r3, #0
 80055a4:	d106      	bne.n	80055b4 <pbuf_realloc+0x20>
 80055a6:	4b3a      	ldr	r3, [pc, #232]	; (8005690 <pbuf_realloc+0xfc>)
 80055a8:	f44f 72cc 	mov.w	r2, #408	; 0x198
 80055ac:	4939      	ldr	r1, [pc, #228]	; (8005694 <pbuf_realloc+0x100>)
 80055ae:	483a      	ldr	r0, [pc, #232]	; (8005698 <pbuf_realloc+0x104>)
 80055b0:	f008 ffa0 	bl	800e4f4 <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	891b      	ldrh	r3, [r3, #8]
 80055b8:	887a      	ldrh	r2, [r7, #2]
 80055ba:	429a      	cmp	r2, r3
 80055bc:	d263      	bcs.n	8005686 <pbuf_realloc+0xf2>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	891a      	ldrh	r2, [r3, #8]
 80055c2:	887b      	ldrh	r3, [r7, #2]
 80055c4:	1ad3      	subs	r3, r2, r3
 80055c6:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 80055c8:	887b      	ldrh	r3, [r7, #2]
 80055ca:	817b      	strh	r3, [r7, #10]
  q = p;
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 80055d0:	e018      	b.n	8005604 <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	895b      	ldrh	r3, [r3, #10]
 80055d6:	897a      	ldrh	r2, [r7, #10]
 80055d8:	1ad3      	subs	r3, r2, r3
 80055da:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	891a      	ldrh	r2, [r3, #8]
 80055e0:	893b      	ldrh	r3, [r7, #8]
 80055e2:	1ad3      	subs	r3, r2, r3
 80055e4:	b29a      	uxth	r2, r3
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 80055ea:	68fb      	ldr	r3, [r7, #12]
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	d106      	bne.n	8005604 <pbuf_realloc+0x70>
 80055f6:	4b26      	ldr	r3, [pc, #152]	; (8005690 <pbuf_realloc+0xfc>)
 80055f8:	f240 12af 	movw	r2, #431	; 0x1af
 80055fc:	4927      	ldr	r1, [pc, #156]	; (800569c <pbuf_realloc+0x108>)
 80055fe:	4826      	ldr	r0, [pc, #152]	; (8005698 <pbuf_realloc+0x104>)
 8005600:	f008 ff78 	bl	800e4f4 <iprintf>
  while (rem_len > q->len) {
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	895b      	ldrh	r3, [r3, #10]
 8005608:	897a      	ldrh	r2, [r7, #10]
 800560a:	429a      	cmp	r2, r3
 800560c:	d8e1      	bhi.n	80055d2 <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 800560e:	68fb      	ldr	r3, [r7, #12]
 8005610:	7b1b      	ldrb	r3, [r3, #12]
 8005612:	f003 030f 	and.w	r3, r3, #15
 8005616:	2b00      	cmp	r3, #0
 8005618:	d121      	bne.n	800565e <pbuf_realloc+0xca>
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	895b      	ldrh	r3, [r3, #10]
 800561e:	897a      	ldrh	r2, [r7, #10]
 8005620:	429a      	cmp	r2, r3
 8005622:	d01c      	beq.n	800565e <pbuf_realloc+0xca>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	7b5b      	ldrb	r3, [r3, #13]
 8005628:	f003 0302 	and.w	r3, r3, #2
 800562c:	2b00      	cmp	r3, #0
 800562e:	d116      	bne.n	800565e <pbuf_realloc+0xca>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	685a      	ldr	r2, [r3, #4]
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	1ad3      	subs	r3, r2, r3
 8005638:	b29a      	uxth	r2, r3
 800563a:	897b      	ldrh	r3, [r7, #10]
 800563c:	4413      	add	r3, r2
 800563e:	b29b      	uxth	r3, r3
 8005640:	4619      	mov	r1, r3
 8005642:	68f8      	ldr	r0, [r7, #12]
 8005644:	f7fe ffba 	bl	80045bc <mem_trim>
 8005648:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	2b00      	cmp	r3, #0
 800564e:	d106      	bne.n	800565e <pbuf_realloc+0xca>
 8005650:	4b0f      	ldr	r3, [pc, #60]	; (8005690 <pbuf_realloc+0xfc>)
 8005652:	f240 12bd 	movw	r2, #445	; 0x1bd
 8005656:	4912      	ldr	r1, [pc, #72]	; (80056a0 <pbuf_realloc+0x10c>)
 8005658:	480f      	ldr	r0, [pc, #60]	; (8005698 <pbuf_realloc+0x104>)
 800565a:	f008 ff4b 	bl	800e4f4 <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	897a      	ldrh	r2, [r7, #10]
 8005662:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	895a      	ldrh	r2, [r3, #10]
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	2b00      	cmp	r3, #0
 8005672:	d004      	beq.n	800567e <pbuf_realloc+0xea>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	4618      	mov	r0, r3
 800567a:	f000 f911 	bl	80058a0 <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 800567e:	68fb      	ldr	r3, [r7, #12]
 8005680:	2200      	movs	r2, #0
 8005682:	601a      	str	r2, [r3, #0]
 8005684:	e000      	b.n	8005688 <pbuf_realloc+0xf4>
    return;
 8005686:	bf00      	nop

}
 8005688:	3710      	adds	r7, #16
 800568a:	46bd      	mov	sp, r7
 800568c:	bd80      	pop	{r7, pc}
 800568e:	bf00      	nop
 8005690:	0800f9b4 	.word	0x0800f9b4
 8005694:	0800facc 	.word	0x0800facc
 8005698:	0800fa14 	.word	0x0800fa14
 800569c:	0800fae4 	.word	0x0800fae4
 80056a0:	0800fafc 	.word	0x0800fafc

080056a4 <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 80056a4:	b580      	push	{r7, lr}
 80056a6:	b086      	sub	sp, #24
 80056a8:	af00      	add	r7, sp, #0
 80056aa:	60f8      	str	r0, [r7, #12]
 80056ac:	60b9      	str	r1, [r7, #8]
 80056ae:	4613      	mov	r3, r2
 80056b0:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	2b00      	cmp	r3, #0
 80056b6:	d106      	bne.n	80056c6 <pbuf_add_header_impl+0x22>
 80056b8:	4b2b      	ldr	r3, [pc, #172]	; (8005768 <pbuf_add_header_impl+0xc4>)
 80056ba:	f240 12df 	movw	r2, #479	; 0x1df
 80056be:	492b      	ldr	r1, [pc, #172]	; (800576c <pbuf_add_header_impl+0xc8>)
 80056c0:	482b      	ldr	r0, [pc, #172]	; (8005770 <pbuf_add_header_impl+0xcc>)
 80056c2:	f008 ff17 	bl	800e4f4 <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	2b00      	cmp	r3, #0
 80056ca:	d003      	beq.n	80056d4 <pbuf_add_header_impl+0x30>
 80056cc:	68bb      	ldr	r3, [r7, #8]
 80056ce:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80056d2:	d301      	bcc.n	80056d8 <pbuf_add_header_impl+0x34>
    return 1;
 80056d4:	2301      	movs	r3, #1
 80056d6:	e043      	b.n	8005760 <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 80056d8:	68bb      	ldr	r3, [r7, #8]
 80056da:	2b00      	cmp	r3, #0
 80056dc:	d101      	bne.n	80056e2 <pbuf_add_header_impl+0x3e>
    return 0;
 80056de:	2300      	movs	r3, #0
 80056e0:	e03e      	b.n	8005760 <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 80056e2:	68bb      	ldr	r3, [r7, #8]
 80056e4:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	891a      	ldrh	r2, [r3, #8]
 80056ea:	8a7b      	ldrh	r3, [r7, #18]
 80056ec:	4413      	add	r3, r2
 80056ee:	b29b      	uxth	r3, r3
 80056f0:	8a7a      	ldrh	r2, [r7, #18]
 80056f2:	429a      	cmp	r2, r3
 80056f4:	d901      	bls.n	80056fa <pbuf_add_header_impl+0x56>
    return 1;
 80056f6:	2301      	movs	r3, #1
 80056f8:	e032      	b.n	8005760 <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 80056fa:	68fb      	ldr	r3, [r7, #12]
 80056fc:	7b1b      	ldrb	r3, [r3, #12]
 80056fe:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 8005700:	8a3b      	ldrh	r3, [r7, #16]
 8005702:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005706:	2b00      	cmp	r3, #0
 8005708:	d00c      	beq.n	8005724 <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	685a      	ldr	r2, [r3, #4]
 800570e:	68bb      	ldr	r3, [r7, #8]
 8005710:	425b      	negs	r3, r3
 8005712:	4413      	add	r3, r2
 8005714:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	3310      	adds	r3, #16
 800571a:	697a      	ldr	r2, [r7, #20]
 800571c:	429a      	cmp	r2, r3
 800571e:	d20d      	bcs.n	800573c <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 8005720:	2301      	movs	r3, #1
 8005722:	e01d      	b.n	8005760 <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 8005724:	79fb      	ldrb	r3, [r7, #7]
 8005726:	2b00      	cmp	r3, #0
 8005728:	d006      	beq.n	8005738 <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	685a      	ldr	r2, [r3, #4]
 800572e:	68bb      	ldr	r3, [r7, #8]
 8005730:	425b      	negs	r3, r3
 8005732:	4413      	add	r3, r2
 8005734:	617b      	str	r3, [r7, #20]
 8005736:	e001      	b.n	800573c <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 8005738:	2301      	movs	r3, #1
 800573a:	e011      	b.n	8005760 <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	697a      	ldr	r2, [r7, #20]
 8005740:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	895a      	ldrh	r2, [r3, #10]
 8005746:	8a7b      	ldrh	r3, [r7, #18]
 8005748:	4413      	add	r3, r2
 800574a:	b29a      	uxth	r2, r3
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	891a      	ldrh	r2, [r3, #8]
 8005754:	8a7b      	ldrh	r3, [r7, #18]
 8005756:	4413      	add	r3, r2
 8005758:	b29a      	uxth	r2, r3
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	811a      	strh	r2, [r3, #8]


  return 0;
 800575e:	2300      	movs	r3, #0
}
 8005760:	4618      	mov	r0, r3
 8005762:	3718      	adds	r7, #24
 8005764:	46bd      	mov	sp, r7
 8005766:	bd80      	pop	{r7, pc}
 8005768:	0800f9b4 	.word	0x0800f9b4
 800576c:	0800fb18 	.word	0x0800fb18
 8005770:	0800fa14 	.word	0x0800fa14

08005774 <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 8005774:	b580      	push	{r7, lr}
 8005776:	b082      	sub	sp, #8
 8005778:	af00      	add	r7, sp, #0
 800577a:	6078      	str	r0, [r7, #4]
 800577c:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 800577e:	2200      	movs	r2, #0
 8005780:	6839      	ldr	r1, [r7, #0]
 8005782:	6878      	ldr	r0, [r7, #4]
 8005784:	f7ff ff8e 	bl	80056a4 <pbuf_add_header_impl>
 8005788:	4603      	mov	r3, r0
}
 800578a:	4618      	mov	r0, r3
 800578c:	3708      	adds	r7, #8
 800578e:	46bd      	mov	sp, r7
 8005790:	bd80      	pop	{r7, pc}
	...

08005794 <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 8005794:	b580      	push	{r7, lr}
 8005796:	b084      	sub	sp, #16
 8005798:	af00      	add	r7, sp, #0
 800579a:	6078      	str	r0, [r7, #4]
 800579c:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	2b00      	cmp	r3, #0
 80057a2:	d106      	bne.n	80057b2 <pbuf_remove_header+0x1e>
 80057a4:	4b20      	ldr	r3, [pc, #128]	; (8005828 <pbuf_remove_header+0x94>)
 80057a6:	f240 224b 	movw	r2, #587	; 0x24b
 80057aa:	4920      	ldr	r1, [pc, #128]	; (800582c <pbuf_remove_header+0x98>)
 80057ac:	4820      	ldr	r0, [pc, #128]	; (8005830 <pbuf_remove_header+0x9c>)
 80057ae:	f008 fea1 	bl	800e4f4 <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	2b00      	cmp	r3, #0
 80057b6:	d003      	beq.n	80057c0 <pbuf_remove_header+0x2c>
 80057b8:	683b      	ldr	r3, [r7, #0]
 80057ba:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80057be:	d301      	bcc.n	80057c4 <pbuf_remove_header+0x30>
    return 1;
 80057c0:	2301      	movs	r3, #1
 80057c2:	e02c      	b.n	800581e <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 80057c4:	683b      	ldr	r3, [r7, #0]
 80057c6:	2b00      	cmp	r3, #0
 80057c8:	d101      	bne.n	80057ce <pbuf_remove_header+0x3a>
    return 0;
 80057ca:	2300      	movs	r3, #0
 80057cc:	e027      	b.n	800581e <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 80057ce:	683b      	ldr	r3, [r7, #0]
 80057d0:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	895b      	ldrh	r3, [r3, #10]
 80057d6:	89fa      	ldrh	r2, [r7, #14]
 80057d8:	429a      	cmp	r2, r3
 80057da:	d908      	bls.n	80057ee <pbuf_remove_header+0x5a>
 80057dc:	4b12      	ldr	r3, [pc, #72]	; (8005828 <pbuf_remove_header+0x94>)
 80057de:	f240 2255 	movw	r2, #597	; 0x255
 80057e2:	4914      	ldr	r1, [pc, #80]	; (8005834 <pbuf_remove_header+0xa0>)
 80057e4:	4812      	ldr	r0, [pc, #72]	; (8005830 <pbuf_remove_header+0x9c>)
 80057e6:	f008 fe85 	bl	800e4f4 <iprintf>
 80057ea:	2301      	movs	r3, #1
 80057ec:	e017      	b.n	800581e <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	685b      	ldr	r3, [r3, #4]
 80057f2:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	685a      	ldr	r2, [r3, #4]
 80057f8:	683b      	ldr	r3, [r7, #0]
 80057fa:	441a      	add	r2, r3
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	895a      	ldrh	r2, [r3, #10]
 8005804:	89fb      	ldrh	r3, [r7, #14]
 8005806:	1ad3      	subs	r3, r2, r3
 8005808:	b29a      	uxth	r2, r3
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	891a      	ldrh	r2, [r3, #8]
 8005812:	89fb      	ldrh	r3, [r7, #14]
 8005814:	1ad3      	subs	r3, r2, r3
 8005816:	b29a      	uxth	r2, r3
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 800581c:	2300      	movs	r3, #0
}
 800581e:	4618      	mov	r0, r3
 8005820:	3710      	adds	r7, #16
 8005822:	46bd      	mov	sp, r7
 8005824:	bd80      	pop	{r7, pc}
 8005826:	bf00      	nop
 8005828:	0800f9b4 	.word	0x0800f9b4
 800582c:	0800fb18 	.word	0x0800fb18
 8005830:	0800fa14 	.word	0x0800fa14
 8005834:	0800fb24 	.word	0x0800fb24

08005838 <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 8005838:	b580      	push	{r7, lr}
 800583a:	b082      	sub	sp, #8
 800583c:	af00      	add	r7, sp, #0
 800583e:	6078      	str	r0, [r7, #4]
 8005840:	460b      	mov	r3, r1
 8005842:	807b      	strh	r3, [r7, #2]
 8005844:	4613      	mov	r3, r2
 8005846:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 8005848:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800584c:	2b00      	cmp	r3, #0
 800584e:	da08      	bge.n	8005862 <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 8005850:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8005854:	425b      	negs	r3, r3
 8005856:	4619      	mov	r1, r3
 8005858:	6878      	ldr	r0, [r7, #4]
 800585a:	f7ff ff9b 	bl	8005794 <pbuf_remove_header>
 800585e:	4603      	mov	r3, r0
 8005860:	e007      	b.n	8005872 <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 8005862:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8005866:	787a      	ldrb	r2, [r7, #1]
 8005868:	4619      	mov	r1, r3
 800586a:	6878      	ldr	r0, [r7, #4]
 800586c:	f7ff ff1a 	bl	80056a4 <pbuf_add_header_impl>
 8005870:	4603      	mov	r3, r0
  }
}
 8005872:	4618      	mov	r0, r3
 8005874:	3708      	adds	r7, #8
 8005876:	46bd      	mov	sp, r7
 8005878:	bd80      	pop	{r7, pc}

0800587a <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 800587a:	b580      	push	{r7, lr}
 800587c:	b082      	sub	sp, #8
 800587e:	af00      	add	r7, sp, #0
 8005880:	6078      	str	r0, [r7, #4]
 8005882:	460b      	mov	r3, r1
 8005884:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 8005886:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800588a:	2201      	movs	r2, #1
 800588c:	4619      	mov	r1, r3
 800588e:	6878      	ldr	r0, [r7, #4]
 8005890:	f7ff ffd2 	bl	8005838 <pbuf_header_impl>
 8005894:	4603      	mov	r3, r0
}
 8005896:	4618      	mov	r0, r3
 8005898:	3708      	adds	r7, #8
 800589a:	46bd      	mov	sp, r7
 800589c:	bd80      	pop	{r7, pc}
	...

080058a0 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 80058a0:	b580      	push	{r7, lr}
 80058a2:	b086      	sub	sp, #24
 80058a4:	af00      	add	r7, sp, #0
 80058a6:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	2b00      	cmp	r3, #0
 80058ac:	d10b      	bne.n	80058c6 <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	2b00      	cmp	r3, #0
 80058b2:	d106      	bne.n	80058c2 <pbuf_free+0x22>
 80058b4:	4b38      	ldr	r3, [pc, #224]	; (8005998 <pbuf_free+0xf8>)
 80058b6:	f44f 7237 	mov.w	r2, #732	; 0x2dc
 80058ba:	4938      	ldr	r1, [pc, #224]	; (800599c <pbuf_free+0xfc>)
 80058bc:	4838      	ldr	r0, [pc, #224]	; (80059a0 <pbuf_free+0x100>)
 80058be:	f008 fe19 	bl	800e4f4 <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 80058c2:	2300      	movs	r3, #0
 80058c4:	e063      	b.n	800598e <pbuf_free+0xee>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 80058c6:	2300      	movs	r3, #0
 80058c8:	75fb      	strb	r3, [r7, #23]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 80058ca:	e05c      	b.n	8005986 <pbuf_free+0xe6>
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	7b9b      	ldrb	r3, [r3, #14]
 80058d0:	2b00      	cmp	r3, #0
 80058d2:	d106      	bne.n	80058e2 <pbuf_free+0x42>
 80058d4:	4b30      	ldr	r3, [pc, #192]	; (8005998 <pbuf_free+0xf8>)
 80058d6:	f240 22f1 	movw	r2, #753	; 0x2f1
 80058da:	4932      	ldr	r1, [pc, #200]	; (80059a4 <pbuf_free+0x104>)
 80058dc:	4830      	ldr	r0, [pc, #192]	; (80059a0 <pbuf_free+0x100>)
 80058de:	f008 fe09 	bl	800e4f4 <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	7b9b      	ldrb	r3, [r3, #14]
 80058e6:	3b01      	subs	r3, #1
 80058e8:	b2da      	uxtb	r2, r3
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	739a      	strb	r2, [r3, #14]
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	7b9b      	ldrb	r3, [r3, #14]
 80058f2:	75bb      	strb	r3, [r7, #22]
    SYS_ARCH_UNPROTECT(old_level);
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 80058f4:	7dbb      	ldrb	r3, [r7, #22]
 80058f6:	2b00      	cmp	r3, #0
 80058f8:	d143      	bne.n	8005982 <pbuf_free+0xe2>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	7b1b      	ldrb	r3, [r3, #12]
 8005904:	f003 030f 	and.w	r3, r3, #15
 8005908:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	7b5b      	ldrb	r3, [r3, #13]
 800590e:	f003 0302 	and.w	r3, r3, #2
 8005912:	2b00      	cmp	r3, #0
 8005914:	d011      	beq.n	800593a <pbuf_free+0x9a>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 800591a:	68bb      	ldr	r3, [r7, #8]
 800591c:	691b      	ldr	r3, [r3, #16]
 800591e:	2b00      	cmp	r3, #0
 8005920:	d106      	bne.n	8005930 <pbuf_free+0x90>
 8005922:	4b1d      	ldr	r3, [pc, #116]	; (8005998 <pbuf_free+0xf8>)
 8005924:	f240 22ff 	movw	r2, #767	; 0x2ff
 8005928:	491f      	ldr	r1, [pc, #124]	; (80059a8 <pbuf_free+0x108>)
 800592a:	481d      	ldr	r0, [pc, #116]	; (80059a0 <pbuf_free+0x100>)
 800592c:	f008 fde2 	bl	800e4f4 <iprintf>
        pc->custom_free_function(p);
 8005930:	68bb      	ldr	r3, [r7, #8]
 8005932:	691b      	ldr	r3, [r3, #16]
 8005934:	6878      	ldr	r0, [r7, #4]
 8005936:	4798      	blx	r3
 8005938:	e01d      	b.n	8005976 <pbuf_free+0xd6>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 800593a:	7bfb      	ldrb	r3, [r7, #15]
 800593c:	2b02      	cmp	r3, #2
 800593e:	d104      	bne.n	800594a <pbuf_free+0xaa>
          memp_free(MEMP_PBUF_POOL, p);
 8005940:	6879      	ldr	r1, [r7, #4]
 8005942:	2008      	movs	r0, #8
 8005944:	f7ff f936 	bl	8004bb4 <memp_free>
 8005948:	e015      	b.n	8005976 <pbuf_free+0xd6>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 800594a:	7bfb      	ldrb	r3, [r7, #15]
 800594c:	2b01      	cmp	r3, #1
 800594e:	d104      	bne.n	800595a <pbuf_free+0xba>
          memp_free(MEMP_PBUF, p);
 8005950:	6879      	ldr	r1, [r7, #4]
 8005952:	2007      	movs	r0, #7
 8005954:	f7ff f92e 	bl	8004bb4 <memp_free>
 8005958:	e00d      	b.n	8005976 <pbuf_free+0xd6>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 800595a:	7bfb      	ldrb	r3, [r7, #15]
 800595c:	2b00      	cmp	r3, #0
 800595e:	d103      	bne.n	8005968 <pbuf_free+0xc8>
          mem_free(p);
 8005960:	6878      	ldr	r0, [r7, #4]
 8005962:	f7fe fdc1 	bl	80044e8 <mem_free>
 8005966:	e006      	b.n	8005976 <pbuf_free+0xd6>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 8005968:	4b0b      	ldr	r3, [pc, #44]	; (8005998 <pbuf_free+0xf8>)
 800596a:	f240 320f 	movw	r2, #783	; 0x30f
 800596e:	490f      	ldr	r1, [pc, #60]	; (80059ac <pbuf_free+0x10c>)
 8005970:	480b      	ldr	r0, [pc, #44]	; (80059a0 <pbuf_free+0x100>)
 8005972:	f008 fdbf 	bl	800e4f4 <iprintf>
        }
      }
      count++;
 8005976:	7dfb      	ldrb	r3, [r7, #23]
 8005978:	3301      	adds	r3, #1
 800597a:	75fb      	strb	r3, [r7, #23]
      /* proceed to next pbuf */
      p = q;
 800597c:	693b      	ldr	r3, [r7, #16]
 800597e:	607b      	str	r3, [r7, #4]
 8005980:	e001      	b.n	8005986 <pbuf_free+0xe6>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 8005982:	2300      	movs	r3, #0
 8005984:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	2b00      	cmp	r3, #0
 800598a:	d19f      	bne.n	80058cc <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 800598c:	7dfb      	ldrb	r3, [r7, #23]
}
 800598e:	4618      	mov	r0, r3
 8005990:	3718      	adds	r7, #24
 8005992:	46bd      	mov	sp, r7
 8005994:	bd80      	pop	{r7, pc}
 8005996:	bf00      	nop
 8005998:	0800f9b4 	.word	0x0800f9b4
 800599c:	0800fb18 	.word	0x0800fb18
 80059a0:	0800fa14 	.word	0x0800fa14
 80059a4:	0800fb44 	.word	0x0800fb44
 80059a8:	0800fb5c 	.word	0x0800fb5c
 80059ac:	0800fb80 	.word	0x0800fb80

080059b0 <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 80059b0:	b480      	push	{r7}
 80059b2:	b085      	sub	sp, #20
 80059b4:	af00      	add	r7, sp, #0
 80059b6:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 80059b8:	2300      	movs	r3, #0
 80059ba:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 80059bc:	e005      	b.n	80059ca <pbuf_clen+0x1a>
    ++len;
 80059be:	89fb      	ldrh	r3, [r7, #14]
 80059c0:	3301      	adds	r3, #1
 80059c2:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	2b00      	cmp	r3, #0
 80059ce:	d1f6      	bne.n	80059be <pbuf_clen+0xe>
  }
  return len;
 80059d0:	89fb      	ldrh	r3, [r7, #14]
}
 80059d2:	4618      	mov	r0, r3
 80059d4:	3714      	adds	r7, #20
 80059d6:	46bd      	mov	sp, r7
 80059d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059dc:	4770      	bx	lr
	...

080059e0 <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 80059e0:	b580      	push	{r7, lr}
 80059e2:	b082      	sub	sp, #8
 80059e4:	af00      	add	r7, sp, #0
 80059e6:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	2b00      	cmp	r3, #0
 80059ec:	d010      	beq.n	8005a10 <pbuf_ref+0x30>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	7b9b      	ldrb	r3, [r3, #14]
 80059f2:	3301      	adds	r3, #1
 80059f4:	b2da      	uxtb	r2, r3
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	739a      	strb	r2, [r3, #14]
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	7b9b      	ldrb	r3, [r3, #14]
 80059fe:	2b00      	cmp	r3, #0
 8005a00:	d106      	bne.n	8005a10 <pbuf_ref+0x30>
 8005a02:	4b05      	ldr	r3, [pc, #20]	; (8005a18 <pbuf_ref+0x38>)
 8005a04:	f240 3242 	movw	r2, #834	; 0x342
 8005a08:	4904      	ldr	r1, [pc, #16]	; (8005a1c <pbuf_ref+0x3c>)
 8005a0a:	4805      	ldr	r0, [pc, #20]	; (8005a20 <pbuf_ref+0x40>)
 8005a0c:	f008 fd72 	bl	800e4f4 <iprintf>
  }
}
 8005a10:	bf00      	nop
 8005a12:	3708      	adds	r7, #8
 8005a14:	46bd      	mov	sp, r7
 8005a16:	bd80      	pop	{r7, pc}
 8005a18:	0800f9b4 	.word	0x0800f9b4
 8005a1c:	0800fb94 	.word	0x0800fb94
 8005a20:	0800fa14 	.word	0x0800fa14

08005a24 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 8005a24:	b580      	push	{r7, lr}
 8005a26:	b084      	sub	sp, #16
 8005a28:	af00      	add	r7, sp, #0
 8005a2a:	6078      	str	r0, [r7, #4]
 8005a2c:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	2b00      	cmp	r3, #0
 8005a32:	d002      	beq.n	8005a3a <pbuf_cat+0x16>
 8005a34:	683b      	ldr	r3, [r7, #0]
 8005a36:	2b00      	cmp	r3, #0
 8005a38:	d107      	bne.n	8005a4a <pbuf_cat+0x26>
 8005a3a:	4b20      	ldr	r3, [pc, #128]	; (8005abc <pbuf_cat+0x98>)
 8005a3c:	f240 3259 	movw	r2, #857	; 0x359
 8005a40:	491f      	ldr	r1, [pc, #124]	; (8005ac0 <pbuf_cat+0x9c>)
 8005a42:	4820      	ldr	r0, [pc, #128]	; (8005ac4 <pbuf_cat+0xa0>)
 8005a44:	f008 fd56 	bl	800e4f4 <iprintf>
 8005a48:	e034      	b.n	8005ab4 <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	60fb      	str	r3, [r7, #12]
 8005a4e:	e00a      	b.n	8005a66 <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	891a      	ldrh	r2, [r3, #8]
 8005a54:	683b      	ldr	r3, [r7, #0]
 8005a56:	891b      	ldrh	r3, [r3, #8]
 8005a58:	4413      	add	r3, r2
 8005a5a:	b29a      	uxth	r2, r3
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	60fb      	str	r3, [r7, #12]
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	2b00      	cmp	r3, #0
 8005a6c:	d1f0      	bne.n	8005a50 <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 8005a6e:	68fb      	ldr	r3, [r7, #12]
 8005a70:	891a      	ldrh	r2, [r3, #8]
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	895b      	ldrh	r3, [r3, #10]
 8005a76:	429a      	cmp	r2, r3
 8005a78:	d006      	beq.n	8005a88 <pbuf_cat+0x64>
 8005a7a:	4b10      	ldr	r3, [pc, #64]	; (8005abc <pbuf_cat+0x98>)
 8005a7c:	f240 3262 	movw	r2, #866	; 0x362
 8005a80:	4911      	ldr	r1, [pc, #68]	; (8005ac8 <pbuf_cat+0xa4>)
 8005a82:	4810      	ldr	r0, [pc, #64]	; (8005ac4 <pbuf_cat+0xa0>)
 8005a84:	f008 fd36 	bl	800e4f4 <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	2b00      	cmp	r3, #0
 8005a8e:	d006      	beq.n	8005a9e <pbuf_cat+0x7a>
 8005a90:	4b0a      	ldr	r3, [pc, #40]	; (8005abc <pbuf_cat+0x98>)
 8005a92:	f240 3263 	movw	r2, #867	; 0x363
 8005a96:	490d      	ldr	r1, [pc, #52]	; (8005acc <pbuf_cat+0xa8>)
 8005a98:	480a      	ldr	r0, [pc, #40]	; (8005ac4 <pbuf_cat+0xa0>)
 8005a9a:	f008 fd2b 	bl	800e4f4 <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	891a      	ldrh	r2, [r3, #8]
 8005aa2:	683b      	ldr	r3, [r7, #0]
 8005aa4:	891b      	ldrh	r3, [r3, #8]
 8005aa6:	4413      	add	r3, r2
 8005aa8:	b29a      	uxth	r2, r3
 8005aaa:	68fb      	ldr	r3, [r7, #12]
 8005aac:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 8005aae:	68fb      	ldr	r3, [r7, #12]
 8005ab0:	683a      	ldr	r2, [r7, #0]
 8005ab2:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 8005ab4:	3710      	adds	r7, #16
 8005ab6:	46bd      	mov	sp, r7
 8005ab8:	bd80      	pop	{r7, pc}
 8005aba:	bf00      	nop
 8005abc:	0800f9b4 	.word	0x0800f9b4
 8005ac0:	0800fba8 	.word	0x0800fba8
 8005ac4:	0800fa14 	.word	0x0800fa14
 8005ac8:	0800fbe0 	.word	0x0800fbe0
 8005acc:	0800fc10 	.word	0x0800fc10

08005ad0 <pbuf_chain>:
 * The ->ref field of the first pbuf of the tail chain is adjusted.
 *
 */
void
pbuf_chain(struct pbuf *h, struct pbuf *t)
{
 8005ad0:	b580      	push	{r7, lr}
 8005ad2:	b082      	sub	sp, #8
 8005ad4:	af00      	add	r7, sp, #0
 8005ad6:	6078      	str	r0, [r7, #4]
 8005ad8:	6039      	str	r1, [r7, #0]
  pbuf_cat(h, t);
 8005ada:	6839      	ldr	r1, [r7, #0]
 8005adc:	6878      	ldr	r0, [r7, #4]
 8005ade:	f7ff ffa1 	bl	8005a24 <pbuf_cat>
  /* t is now referenced by h */
  pbuf_ref(t);
 8005ae2:	6838      	ldr	r0, [r7, #0]
 8005ae4:	f7ff ff7c 	bl	80059e0 <pbuf_ref>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_chain: %p references %p\n", (void *)h, (void *)t));
}
 8005ae8:	bf00      	nop
 8005aea:	3708      	adds	r7, #8
 8005aec:	46bd      	mov	sp, r7
 8005aee:	bd80      	pop	{r7, pc}

08005af0 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 8005af0:	b580      	push	{r7, lr}
 8005af2:	b086      	sub	sp, #24
 8005af4:	af00      	add	r7, sp, #0
 8005af6:	6078      	str	r0, [r7, #4]
 8005af8:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 8005afa:	2300      	movs	r3, #0
 8005afc:	617b      	str	r3, [r7, #20]
 8005afe:	2300      	movs	r3, #0
 8005b00:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	2b00      	cmp	r3, #0
 8005b06:	d008      	beq.n	8005b1a <pbuf_copy+0x2a>
 8005b08:	683b      	ldr	r3, [r7, #0]
 8005b0a:	2b00      	cmp	r3, #0
 8005b0c:	d005      	beq.n	8005b1a <pbuf_copy+0x2a>
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	891a      	ldrh	r2, [r3, #8]
 8005b12:	683b      	ldr	r3, [r7, #0]
 8005b14:	891b      	ldrh	r3, [r3, #8]
 8005b16:	429a      	cmp	r2, r3
 8005b18:	d209      	bcs.n	8005b2e <pbuf_copy+0x3e>
 8005b1a:	4b57      	ldr	r3, [pc, #348]	; (8005c78 <pbuf_copy+0x188>)
 8005b1c:	f240 32c9 	movw	r2, #969	; 0x3c9
 8005b20:	4956      	ldr	r1, [pc, #344]	; (8005c7c <pbuf_copy+0x18c>)
 8005b22:	4857      	ldr	r0, [pc, #348]	; (8005c80 <pbuf_copy+0x190>)
 8005b24:	f008 fce6 	bl	800e4f4 <iprintf>
 8005b28:	f06f 030f 	mvn.w	r3, #15
 8005b2c:	e09f      	b.n	8005c6e <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	895b      	ldrh	r3, [r3, #10]
 8005b32:	461a      	mov	r2, r3
 8005b34:	697b      	ldr	r3, [r7, #20]
 8005b36:	1ad2      	subs	r2, r2, r3
 8005b38:	683b      	ldr	r3, [r7, #0]
 8005b3a:	895b      	ldrh	r3, [r3, #10]
 8005b3c:	4619      	mov	r1, r3
 8005b3e:	693b      	ldr	r3, [r7, #16]
 8005b40:	1acb      	subs	r3, r1, r3
 8005b42:	429a      	cmp	r2, r3
 8005b44:	d306      	bcc.n	8005b54 <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 8005b46:	683b      	ldr	r3, [r7, #0]
 8005b48:	895b      	ldrh	r3, [r3, #10]
 8005b4a:	461a      	mov	r2, r3
 8005b4c:	693b      	ldr	r3, [r7, #16]
 8005b4e:	1ad3      	subs	r3, r2, r3
 8005b50:	60fb      	str	r3, [r7, #12]
 8005b52:	e005      	b.n	8005b60 <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	895b      	ldrh	r3, [r3, #10]
 8005b58:	461a      	mov	r2, r3
 8005b5a:	697b      	ldr	r3, [r7, #20]
 8005b5c:	1ad3      	subs	r3, r2, r3
 8005b5e:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	685a      	ldr	r2, [r3, #4]
 8005b64:	697b      	ldr	r3, [r7, #20]
 8005b66:	18d0      	adds	r0, r2, r3
 8005b68:	683b      	ldr	r3, [r7, #0]
 8005b6a:	685a      	ldr	r2, [r3, #4]
 8005b6c:	693b      	ldr	r3, [r7, #16]
 8005b6e:	4413      	add	r3, r2
 8005b70:	68fa      	ldr	r2, [r7, #12]
 8005b72:	4619      	mov	r1, r3
 8005b74:	f008 fe88 	bl	800e888 <memcpy>
    offset_to += len;
 8005b78:	697a      	ldr	r2, [r7, #20]
 8005b7a:	68fb      	ldr	r3, [r7, #12]
 8005b7c:	4413      	add	r3, r2
 8005b7e:	617b      	str	r3, [r7, #20]
    offset_from += len;
 8005b80:	693a      	ldr	r2, [r7, #16]
 8005b82:	68fb      	ldr	r3, [r7, #12]
 8005b84:	4413      	add	r3, r2
 8005b86:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	895b      	ldrh	r3, [r3, #10]
 8005b8c:	461a      	mov	r2, r3
 8005b8e:	697b      	ldr	r3, [r7, #20]
 8005b90:	4293      	cmp	r3, r2
 8005b92:	d906      	bls.n	8005ba2 <pbuf_copy+0xb2>
 8005b94:	4b38      	ldr	r3, [pc, #224]	; (8005c78 <pbuf_copy+0x188>)
 8005b96:	f240 32d9 	movw	r2, #985	; 0x3d9
 8005b9a:	493a      	ldr	r1, [pc, #232]	; (8005c84 <pbuf_copy+0x194>)
 8005b9c:	4838      	ldr	r0, [pc, #224]	; (8005c80 <pbuf_copy+0x190>)
 8005b9e:	f008 fca9 	bl	800e4f4 <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 8005ba2:	683b      	ldr	r3, [r7, #0]
 8005ba4:	895b      	ldrh	r3, [r3, #10]
 8005ba6:	461a      	mov	r2, r3
 8005ba8:	693b      	ldr	r3, [r7, #16]
 8005baa:	4293      	cmp	r3, r2
 8005bac:	d906      	bls.n	8005bbc <pbuf_copy+0xcc>
 8005bae:	4b32      	ldr	r3, [pc, #200]	; (8005c78 <pbuf_copy+0x188>)
 8005bb0:	f240 32da 	movw	r2, #986	; 0x3da
 8005bb4:	4934      	ldr	r1, [pc, #208]	; (8005c88 <pbuf_copy+0x198>)
 8005bb6:	4832      	ldr	r0, [pc, #200]	; (8005c80 <pbuf_copy+0x190>)
 8005bb8:	f008 fc9c 	bl	800e4f4 <iprintf>
    if (offset_from >= p_from->len) {
 8005bbc:	683b      	ldr	r3, [r7, #0]
 8005bbe:	895b      	ldrh	r3, [r3, #10]
 8005bc0:	461a      	mov	r2, r3
 8005bc2:	693b      	ldr	r3, [r7, #16]
 8005bc4:	4293      	cmp	r3, r2
 8005bc6:	d304      	bcc.n	8005bd2 <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 8005bc8:	2300      	movs	r3, #0
 8005bca:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 8005bcc:	683b      	ldr	r3, [r7, #0]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	895b      	ldrh	r3, [r3, #10]
 8005bd6:	461a      	mov	r2, r3
 8005bd8:	697b      	ldr	r3, [r7, #20]
 8005bda:	4293      	cmp	r3, r2
 8005bdc:	d114      	bne.n	8005c08 <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 8005bde:	2300      	movs	r3, #0
 8005be0:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	2b00      	cmp	r3, #0
 8005bec:	d10c      	bne.n	8005c08 <pbuf_copy+0x118>
 8005bee:	683b      	ldr	r3, [r7, #0]
 8005bf0:	2b00      	cmp	r3, #0
 8005bf2:	d009      	beq.n	8005c08 <pbuf_copy+0x118>
 8005bf4:	4b20      	ldr	r3, [pc, #128]	; (8005c78 <pbuf_copy+0x188>)
 8005bf6:	f44f 7279 	mov.w	r2, #996	; 0x3e4
 8005bfa:	4924      	ldr	r1, [pc, #144]	; (8005c8c <pbuf_copy+0x19c>)
 8005bfc:	4820      	ldr	r0, [pc, #128]	; (8005c80 <pbuf_copy+0x190>)
 8005bfe:	f008 fc79 	bl	800e4f4 <iprintf>
 8005c02:	f06f 030f 	mvn.w	r3, #15
 8005c06:	e032      	b.n	8005c6e <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 8005c08:	683b      	ldr	r3, [r7, #0]
 8005c0a:	2b00      	cmp	r3, #0
 8005c0c:	d013      	beq.n	8005c36 <pbuf_copy+0x146>
 8005c0e:	683b      	ldr	r3, [r7, #0]
 8005c10:	895a      	ldrh	r2, [r3, #10]
 8005c12:	683b      	ldr	r3, [r7, #0]
 8005c14:	891b      	ldrh	r3, [r3, #8]
 8005c16:	429a      	cmp	r2, r3
 8005c18:	d10d      	bne.n	8005c36 <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 8005c1a:	683b      	ldr	r3, [r7, #0]
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	2b00      	cmp	r3, #0
 8005c20:	d009      	beq.n	8005c36 <pbuf_copy+0x146>
 8005c22:	4b15      	ldr	r3, [pc, #84]	; (8005c78 <pbuf_copy+0x188>)
 8005c24:	f240 32e9 	movw	r2, #1001	; 0x3e9
 8005c28:	4919      	ldr	r1, [pc, #100]	; (8005c90 <pbuf_copy+0x1a0>)
 8005c2a:	4815      	ldr	r0, [pc, #84]	; (8005c80 <pbuf_copy+0x190>)
 8005c2c:	f008 fc62 	bl	800e4f4 <iprintf>
 8005c30:	f06f 0305 	mvn.w	r3, #5
 8005c34:	e01b      	b.n	8005c6e <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	2b00      	cmp	r3, #0
 8005c3a:	d013      	beq.n	8005c64 <pbuf_copy+0x174>
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	895a      	ldrh	r2, [r3, #10]
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	891b      	ldrh	r3, [r3, #8]
 8005c44:	429a      	cmp	r2, r3
 8005c46:	d10d      	bne.n	8005c64 <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	2b00      	cmp	r3, #0
 8005c4e:	d009      	beq.n	8005c64 <pbuf_copy+0x174>
 8005c50:	4b09      	ldr	r3, [pc, #36]	; (8005c78 <pbuf_copy+0x188>)
 8005c52:	f240 32ee 	movw	r2, #1006	; 0x3ee
 8005c56:	490e      	ldr	r1, [pc, #56]	; (8005c90 <pbuf_copy+0x1a0>)
 8005c58:	4809      	ldr	r0, [pc, #36]	; (8005c80 <pbuf_copy+0x190>)
 8005c5a:	f008 fc4b 	bl	800e4f4 <iprintf>
 8005c5e:	f06f 0305 	mvn.w	r3, #5
 8005c62:	e004      	b.n	8005c6e <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 8005c64:	683b      	ldr	r3, [r7, #0]
 8005c66:	2b00      	cmp	r3, #0
 8005c68:	f47f af61 	bne.w	8005b2e <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 8005c6c:	2300      	movs	r3, #0
}
 8005c6e:	4618      	mov	r0, r3
 8005c70:	3718      	adds	r7, #24
 8005c72:	46bd      	mov	sp, r7
 8005c74:	bd80      	pop	{r7, pc}
 8005c76:	bf00      	nop
 8005c78:	0800f9b4 	.word	0x0800f9b4
 8005c7c:	0800fc5c 	.word	0x0800fc5c
 8005c80:	0800fa14 	.word	0x0800fa14
 8005c84:	0800fc8c 	.word	0x0800fc8c
 8005c88:	0800fca4 	.word	0x0800fca4
 8005c8c:	0800fcc0 	.word	0x0800fcc0
 8005c90:	0800fcd0 	.word	0x0800fcd0

08005c94 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 8005c94:	b580      	push	{r7, lr}
 8005c96:	b088      	sub	sp, #32
 8005c98:	af00      	add	r7, sp, #0
 8005c9a:	60f8      	str	r0, [r7, #12]
 8005c9c:	60b9      	str	r1, [r7, #8]
 8005c9e:	4611      	mov	r1, r2
 8005ca0:	461a      	mov	r2, r3
 8005ca2:	460b      	mov	r3, r1
 8005ca4:	80fb      	strh	r3, [r7, #6]
 8005ca6:	4613      	mov	r3, r2
 8005ca8:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 8005caa:	2300      	movs	r3, #0
 8005cac:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 8005cae:	2300      	movs	r3, #0
 8005cb0:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 8005cb2:	68fb      	ldr	r3, [r7, #12]
 8005cb4:	2b00      	cmp	r3, #0
 8005cb6:	d108      	bne.n	8005cca <pbuf_copy_partial+0x36>
 8005cb8:	4b2b      	ldr	r3, [pc, #172]	; (8005d68 <pbuf_copy_partial+0xd4>)
 8005cba:	f240 420a 	movw	r2, #1034	; 0x40a
 8005cbe:	492b      	ldr	r1, [pc, #172]	; (8005d6c <pbuf_copy_partial+0xd8>)
 8005cc0:	482b      	ldr	r0, [pc, #172]	; (8005d70 <pbuf_copy_partial+0xdc>)
 8005cc2:	f008 fc17 	bl	800e4f4 <iprintf>
 8005cc6:	2300      	movs	r3, #0
 8005cc8:	e04a      	b.n	8005d60 <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 8005cca:	68bb      	ldr	r3, [r7, #8]
 8005ccc:	2b00      	cmp	r3, #0
 8005cce:	d108      	bne.n	8005ce2 <pbuf_copy_partial+0x4e>
 8005cd0:	4b25      	ldr	r3, [pc, #148]	; (8005d68 <pbuf_copy_partial+0xd4>)
 8005cd2:	f240 420b 	movw	r2, #1035	; 0x40b
 8005cd6:	4927      	ldr	r1, [pc, #156]	; (8005d74 <pbuf_copy_partial+0xe0>)
 8005cd8:	4825      	ldr	r0, [pc, #148]	; (8005d70 <pbuf_copy_partial+0xdc>)
 8005cda:	f008 fc0b 	bl	800e4f4 <iprintf>
 8005cde:	2300      	movs	r3, #0
 8005ce0:	e03e      	b.n	8005d60 <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 8005ce2:	68fb      	ldr	r3, [r7, #12]
 8005ce4:	61fb      	str	r3, [r7, #28]
 8005ce6:	e034      	b.n	8005d52 <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 8005ce8:	88bb      	ldrh	r3, [r7, #4]
 8005cea:	2b00      	cmp	r3, #0
 8005cec:	d00a      	beq.n	8005d04 <pbuf_copy_partial+0x70>
 8005cee:	69fb      	ldr	r3, [r7, #28]
 8005cf0:	895b      	ldrh	r3, [r3, #10]
 8005cf2:	88ba      	ldrh	r2, [r7, #4]
 8005cf4:	429a      	cmp	r2, r3
 8005cf6:	d305      	bcc.n	8005d04 <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 8005cf8:	69fb      	ldr	r3, [r7, #28]
 8005cfa:	895b      	ldrh	r3, [r3, #10]
 8005cfc:	88ba      	ldrh	r2, [r7, #4]
 8005cfe:	1ad3      	subs	r3, r2, r3
 8005d00:	80bb      	strh	r3, [r7, #4]
 8005d02:	e023      	b.n	8005d4c <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 8005d04:	69fb      	ldr	r3, [r7, #28]
 8005d06:	895a      	ldrh	r2, [r3, #10]
 8005d08:	88bb      	ldrh	r3, [r7, #4]
 8005d0a:	1ad3      	subs	r3, r2, r3
 8005d0c:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 8005d0e:	8b3a      	ldrh	r2, [r7, #24]
 8005d10:	88fb      	ldrh	r3, [r7, #6]
 8005d12:	429a      	cmp	r2, r3
 8005d14:	d901      	bls.n	8005d1a <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 8005d16:	88fb      	ldrh	r3, [r7, #6]
 8005d18:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 8005d1a:	8b7b      	ldrh	r3, [r7, #26]
 8005d1c:	68ba      	ldr	r2, [r7, #8]
 8005d1e:	18d0      	adds	r0, r2, r3
 8005d20:	69fb      	ldr	r3, [r7, #28]
 8005d22:	685a      	ldr	r2, [r3, #4]
 8005d24:	88bb      	ldrh	r3, [r7, #4]
 8005d26:	4413      	add	r3, r2
 8005d28:	8b3a      	ldrh	r2, [r7, #24]
 8005d2a:	4619      	mov	r1, r3
 8005d2c:	f008 fdac 	bl	800e888 <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 8005d30:	8afa      	ldrh	r2, [r7, #22]
 8005d32:	8b3b      	ldrh	r3, [r7, #24]
 8005d34:	4413      	add	r3, r2
 8005d36:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 8005d38:	8b7a      	ldrh	r2, [r7, #26]
 8005d3a:	8b3b      	ldrh	r3, [r7, #24]
 8005d3c:	4413      	add	r3, r2
 8005d3e:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 8005d40:	88fa      	ldrh	r2, [r7, #6]
 8005d42:	8b3b      	ldrh	r3, [r7, #24]
 8005d44:	1ad3      	subs	r3, r2, r3
 8005d46:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 8005d48:	2300      	movs	r3, #0
 8005d4a:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 8005d4c:	69fb      	ldr	r3, [r7, #28]
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	61fb      	str	r3, [r7, #28]
 8005d52:	88fb      	ldrh	r3, [r7, #6]
 8005d54:	2b00      	cmp	r3, #0
 8005d56:	d002      	beq.n	8005d5e <pbuf_copy_partial+0xca>
 8005d58:	69fb      	ldr	r3, [r7, #28]
 8005d5a:	2b00      	cmp	r3, #0
 8005d5c:	d1c4      	bne.n	8005ce8 <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 8005d5e:	8afb      	ldrh	r3, [r7, #22]
}
 8005d60:	4618      	mov	r0, r3
 8005d62:	3720      	adds	r7, #32
 8005d64:	46bd      	mov	sp, r7
 8005d66:	bd80      	pop	{r7, pc}
 8005d68:	0800f9b4 	.word	0x0800f9b4
 8005d6c:	0800fcfc 	.word	0x0800fcfc
 8005d70:	0800fa14 	.word	0x0800fa14
 8005d74:	0800fd1c 	.word	0x0800fd1c

08005d78 <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 8005d78:	b580      	push	{r7, lr}
 8005d7a:	b084      	sub	sp, #16
 8005d7c:	af00      	add	r7, sp, #0
 8005d7e:	4603      	mov	r3, r0
 8005d80:	603a      	str	r2, [r7, #0]
 8005d82:	71fb      	strb	r3, [r7, #7]
 8005d84:	460b      	mov	r3, r1
 8005d86:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 8005d88:	683b      	ldr	r3, [r7, #0]
 8005d8a:	8919      	ldrh	r1, [r3, #8]
 8005d8c:	88ba      	ldrh	r2, [r7, #4]
 8005d8e:	79fb      	ldrb	r3, [r7, #7]
 8005d90:	4618      	mov	r0, r3
 8005d92:	f7ff faa1 	bl	80052d8 <pbuf_alloc>
 8005d96:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	2b00      	cmp	r3, #0
 8005d9c:	d101      	bne.n	8005da2 <pbuf_clone+0x2a>
    return NULL;
 8005d9e:	2300      	movs	r3, #0
 8005da0:	e011      	b.n	8005dc6 <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 8005da2:	6839      	ldr	r1, [r7, #0]
 8005da4:	68f8      	ldr	r0, [r7, #12]
 8005da6:	f7ff fea3 	bl	8005af0 <pbuf_copy>
 8005daa:	4603      	mov	r3, r0
 8005dac:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 8005dae:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8005db2:	2b00      	cmp	r3, #0
 8005db4:	d006      	beq.n	8005dc4 <pbuf_clone+0x4c>
 8005db6:	4b06      	ldr	r3, [pc, #24]	; (8005dd0 <pbuf_clone+0x58>)
 8005db8:	f240 5224 	movw	r2, #1316	; 0x524
 8005dbc:	4905      	ldr	r1, [pc, #20]	; (8005dd4 <pbuf_clone+0x5c>)
 8005dbe:	4806      	ldr	r0, [pc, #24]	; (8005dd8 <pbuf_clone+0x60>)
 8005dc0:	f008 fb98 	bl	800e4f4 <iprintf>
  return q;
 8005dc4:	68fb      	ldr	r3, [r7, #12]
}
 8005dc6:	4618      	mov	r0, r3
 8005dc8:	3710      	adds	r7, #16
 8005dca:	46bd      	mov	sp, r7
 8005dcc:	bd80      	pop	{r7, pc}
 8005dce:	bf00      	nop
 8005dd0:	0800f9b4 	.word	0x0800f9b4
 8005dd4:	0800fe28 	.word	0x0800fe28
 8005dd8:	0800fa14 	.word	0x0800fa14

08005ddc <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 8005ddc:	b580      	push	{r7, lr}
 8005dde:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 8005de0:	f008 fa9a 	bl	800e318 <rand>
 8005de4:	4603      	mov	r3, r0
 8005de6:	b29b      	uxth	r3, r3
 8005de8:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8005dec:	b29b      	uxth	r3, r3
 8005dee:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 8005df2:	b29a      	uxth	r2, r3
 8005df4:	4b01      	ldr	r3, [pc, #4]	; (8005dfc <tcp_init+0x20>)
 8005df6:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 8005df8:	bf00      	nop
 8005dfa:	bd80      	pop	{r7, pc}
 8005dfc:	20000020 	.word	0x20000020

08005e00 <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 8005e00:	b580      	push	{r7, lr}
 8005e02:	b082      	sub	sp, #8
 8005e04:	af00      	add	r7, sp, #0
 8005e06:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	7d1b      	ldrb	r3, [r3, #20]
 8005e0c:	2b01      	cmp	r3, #1
 8005e0e:	d105      	bne.n	8005e1c <tcp_free+0x1c>
 8005e10:	4b06      	ldr	r3, [pc, #24]	; (8005e2c <tcp_free+0x2c>)
 8005e12:	22d4      	movs	r2, #212	; 0xd4
 8005e14:	4906      	ldr	r1, [pc, #24]	; (8005e30 <tcp_free+0x30>)
 8005e16:	4807      	ldr	r0, [pc, #28]	; (8005e34 <tcp_free+0x34>)
 8005e18:	f008 fb6c 	bl	800e4f4 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 8005e1c:	6879      	ldr	r1, [r7, #4]
 8005e1e:	2001      	movs	r0, #1
 8005e20:	f7fe fec8 	bl	8004bb4 <memp_free>
}
 8005e24:	bf00      	nop
 8005e26:	3708      	adds	r7, #8
 8005e28:	46bd      	mov	sp, r7
 8005e2a:	bd80      	pop	{r7, pc}
 8005e2c:	0800feb4 	.word	0x0800feb4
 8005e30:	0800fee4 	.word	0x0800fee4
 8005e34:	0800fef8 	.word	0x0800fef8

08005e38 <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 8005e38:	b580      	push	{r7, lr}
 8005e3a:	b082      	sub	sp, #8
 8005e3c:	af00      	add	r7, sp, #0
 8005e3e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	7d1b      	ldrb	r3, [r3, #20]
 8005e44:	2b01      	cmp	r3, #1
 8005e46:	d105      	bne.n	8005e54 <tcp_free_listen+0x1c>
 8005e48:	4b06      	ldr	r3, [pc, #24]	; (8005e64 <tcp_free_listen+0x2c>)
 8005e4a:	22df      	movs	r2, #223	; 0xdf
 8005e4c:	4906      	ldr	r1, [pc, #24]	; (8005e68 <tcp_free_listen+0x30>)
 8005e4e:	4807      	ldr	r0, [pc, #28]	; (8005e6c <tcp_free_listen+0x34>)
 8005e50:	f008 fb50 	bl	800e4f4 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 8005e54:	6879      	ldr	r1, [r7, #4]
 8005e56:	2002      	movs	r0, #2
 8005e58:	f7fe feac 	bl	8004bb4 <memp_free>
}
 8005e5c:	bf00      	nop
 8005e5e:	3708      	adds	r7, #8
 8005e60:	46bd      	mov	sp, r7
 8005e62:	bd80      	pop	{r7, pc}
 8005e64:	0800feb4 	.word	0x0800feb4
 8005e68:	0800ff20 	.word	0x0800ff20
 8005e6c:	0800fef8 	.word	0x0800fef8

08005e70 <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 8005e70:	b580      	push	{r7, lr}
 8005e72:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 8005e74:	f000 fea2 	bl	8006bbc <tcp_fasttmr>

  if (++tcp_timer & 1) {
 8005e78:	4b07      	ldr	r3, [pc, #28]	; (8005e98 <tcp_tmr+0x28>)
 8005e7a:	781b      	ldrb	r3, [r3, #0]
 8005e7c:	3301      	adds	r3, #1
 8005e7e:	b2da      	uxtb	r2, r3
 8005e80:	4b05      	ldr	r3, [pc, #20]	; (8005e98 <tcp_tmr+0x28>)
 8005e82:	701a      	strb	r2, [r3, #0]
 8005e84:	4b04      	ldr	r3, [pc, #16]	; (8005e98 <tcp_tmr+0x28>)
 8005e86:	781b      	ldrb	r3, [r3, #0]
 8005e88:	f003 0301 	and.w	r3, r3, #1
 8005e8c:	2b00      	cmp	r3, #0
 8005e8e:	d001      	beq.n	8005e94 <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 8005e90:	f000 fb54 	bl	800653c <tcp_slowtmr>
  }
}
 8005e94:	bf00      	nop
 8005e96:	bd80      	pop	{r7, pc}
 8005e98:	20008295 	.word	0x20008295

08005e9c <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 8005e9c:	b580      	push	{r7, lr}
 8005e9e:	b084      	sub	sp, #16
 8005ea0:	af00      	add	r7, sp, #0
 8005ea2:	6078      	str	r0, [r7, #4]
 8005ea4:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 8005ea6:	683b      	ldr	r3, [r7, #0]
 8005ea8:	2b00      	cmp	r3, #0
 8005eaa:	d105      	bne.n	8005eb8 <tcp_remove_listener+0x1c>
 8005eac:	4b0d      	ldr	r3, [pc, #52]	; (8005ee4 <tcp_remove_listener+0x48>)
 8005eae:	22ff      	movs	r2, #255	; 0xff
 8005eb0:	490d      	ldr	r1, [pc, #52]	; (8005ee8 <tcp_remove_listener+0x4c>)
 8005eb2:	480e      	ldr	r0, [pc, #56]	; (8005eec <tcp_remove_listener+0x50>)
 8005eb4:	f008 fb1e 	bl	800e4f4 <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	60fb      	str	r3, [r7, #12]
 8005ebc:	e00a      	b.n	8005ed4 <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 8005ebe:	68fb      	ldr	r3, [r7, #12]
 8005ec0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005ec2:	683a      	ldr	r2, [r7, #0]
 8005ec4:	429a      	cmp	r2, r3
 8005ec6:	d102      	bne.n	8005ece <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 8005ec8:	68fb      	ldr	r3, [r7, #12]
 8005eca:	2200      	movs	r2, #0
 8005ecc:	67da      	str	r2, [r3, #124]	; 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 8005ece:	68fb      	ldr	r3, [r7, #12]
 8005ed0:	68db      	ldr	r3, [r3, #12]
 8005ed2:	60fb      	str	r3, [r7, #12]
 8005ed4:	68fb      	ldr	r3, [r7, #12]
 8005ed6:	2b00      	cmp	r3, #0
 8005ed8:	d1f1      	bne.n	8005ebe <tcp_remove_listener+0x22>
    }
  }
}
 8005eda:	bf00      	nop
 8005edc:	bf00      	nop
 8005ede:	3710      	adds	r7, #16
 8005ee0:	46bd      	mov	sp, r7
 8005ee2:	bd80      	pop	{r7, pc}
 8005ee4:	0800feb4 	.word	0x0800feb4
 8005ee8:	0800ff3c 	.word	0x0800ff3c
 8005eec:	0800fef8 	.word	0x0800fef8

08005ef0 <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 8005ef0:	b580      	push	{r7, lr}
 8005ef2:	b084      	sub	sp, #16
 8005ef4:	af00      	add	r7, sp, #0
 8005ef6:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	2b00      	cmp	r3, #0
 8005efc:	d106      	bne.n	8005f0c <tcp_listen_closed+0x1c>
 8005efe:	4b14      	ldr	r3, [pc, #80]	; (8005f50 <tcp_listen_closed+0x60>)
 8005f00:	f240 1211 	movw	r2, #273	; 0x111
 8005f04:	4913      	ldr	r1, [pc, #76]	; (8005f54 <tcp_listen_closed+0x64>)
 8005f06:	4814      	ldr	r0, [pc, #80]	; (8005f58 <tcp_listen_closed+0x68>)
 8005f08:	f008 faf4 	bl	800e4f4 <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	7d1b      	ldrb	r3, [r3, #20]
 8005f10:	2b01      	cmp	r3, #1
 8005f12:	d006      	beq.n	8005f22 <tcp_listen_closed+0x32>
 8005f14:	4b0e      	ldr	r3, [pc, #56]	; (8005f50 <tcp_listen_closed+0x60>)
 8005f16:	f44f 7289 	mov.w	r2, #274	; 0x112
 8005f1a:	4910      	ldr	r1, [pc, #64]	; (8005f5c <tcp_listen_closed+0x6c>)
 8005f1c:	480e      	ldr	r0, [pc, #56]	; (8005f58 <tcp_listen_closed+0x68>)
 8005f1e:	f008 fae9 	bl	800e4f4 <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 8005f22:	2301      	movs	r3, #1
 8005f24:	60fb      	str	r3, [r7, #12]
 8005f26:	e00b      	b.n	8005f40 <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 8005f28:	4a0d      	ldr	r2, [pc, #52]	; (8005f60 <tcp_listen_closed+0x70>)
 8005f2a:	68fb      	ldr	r3, [r7, #12]
 8005f2c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	6879      	ldr	r1, [r7, #4]
 8005f34:	4618      	mov	r0, r3
 8005f36:	f7ff ffb1 	bl	8005e9c <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 8005f3a:	68fb      	ldr	r3, [r7, #12]
 8005f3c:	3301      	adds	r3, #1
 8005f3e:	60fb      	str	r3, [r7, #12]
 8005f40:	68fb      	ldr	r3, [r7, #12]
 8005f42:	2b03      	cmp	r3, #3
 8005f44:	d9f0      	bls.n	8005f28 <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 8005f46:	bf00      	nop
 8005f48:	bf00      	nop
 8005f4a:	3710      	adds	r7, #16
 8005f4c:	46bd      	mov	sp, r7
 8005f4e:	bd80      	pop	{r7, pc}
 8005f50:	0800feb4 	.word	0x0800feb4
 8005f54:	0800ff64 	.word	0x0800ff64
 8005f58:	0800fef8 	.word	0x0800fef8
 8005f5c:	0800ff70 	.word	0x0800ff70
 8005f60:	08011e94 	.word	0x08011e94

08005f64 <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 8005f64:	b5b0      	push	{r4, r5, r7, lr}
 8005f66:	b088      	sub	sp, #32
 8005f68:	af04      	add	r7, sp, #16
 8005f6a:	6078      	str	r0, [r7, #4]
 8005f6c:	460b      	mov	r3, r1
 8005f6e:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	2b00      	cmp	r3, #0
 8005f74:	d106      	bne.n	8005f84 <tcp_close_shutdown+0x20>
 8005f76:	4b63      	ldr	r3, [pc, #396]	; (8006104 <tcp_close_shutdown+0x1a0>)
 8005f78:	f44f 72af 	mov.w	r2, #350	; 0x15e
 8005f7c:	4962      	ldr	r1, [pc, #392]	; (8006108 <tcp_close_shutdown+0x1a4>)
 8005f7e:	4863      	ldr	r0, [pc, #396]	; (800610c <tcp_close_shutdown+0x1a8>)
 8005f80:	f008 fab8 	bl	800e4f4 <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 8005f84:	78fb      	ldrb	r3, [r7, #3]
 8005f86:	2b00      	cmp	r3, #0
 8005f88:	d066      	beq.n	8006058 <tcp_close_shutdown+0xf4>
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	7d1b      	ldrb	r3, [r3, #20]
 8005f8e:	2b04      	cmp	r3, #4
 8005f90:	d003      	beq.n	8005f9a <tcp_close_shutdown+0x36>
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	7d1b      	ldrb	r3, [r3, #20]
 8005f96:	2b07      	cmp	r3, #7
 8005f98:	d15e      	bne.n	8006058 <tcp_close_shutdown+0xf4>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005f9e:	2b00      	cmp	r3, #0
 8005fa0:	d104      	bne.n	8005fac <tcp_close_shutdown+0x48>
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005fa6:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8005faa:	d055      	beq.n	8006058 <tcp_close_shutdown+0xf4>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	8b5b      	ldrh	r3, [r3, #26]
 8005fb0:	f003 0310 	and.w	r3, r3, #16
 8005fb4:	2b00      	cmp	r3, #0
 8005fb6:	d106      	bne.n	8005fc6 <tcp_close_shutdown+0x62>
 8005fb8:	4b52      	ldr	r3, [pc, #328]	; (8006104 <tcp_close_shutdown+0x1a0>)
 8005fba:	f44f 72b2 	mov.w	r2, #356	; 0x164
 8005fbe:	4954      	ldr	r1, [pc, #336]	; (8006110 <tcp_close_shutdown+0x1ac>)
 8005fc0:	4852      	ldr	r0, [pc, #328]	; (800610c <tcp_close_shutdown+0x1a8>)
 8005fc2:	f008 fa97 	bl	800e4f4 <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	6d18      	ldr	r0, [r3, #80]	; 0x50
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8005fce:	687d      	ldr	r5, [r7, #4]
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	3304      	adds	r3, #4
 8005fd4:	687a      	ldr	r2, [r7, #4]
 8005fd6:	8ad2      	ldrh	r2, [r2, #22]
 8005fd8:	6879      	ldr	r1, [r7, #4]
 8005fda:	8b09      	ldrh	r1, [r1, #24]
 8005fdc:	9102      	str	r1, [sp, #8]
 8005fde:	9201      	str	r2, [sp, #4]
 8005fe0:	9300      	str	r3, [sp, #0]
 8005fe2:	462b      	mov	r3, r5
 8005fe4:	4622      	mov	r2, r4
 8005fe6:	4601      	mov	r1, r0
 8005fe8:	6878      	ldr	r0, [r7, #4]
 8005fea:	f004 fe91 	bl	800ad10 <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 8005fee:	6878      	ldr	r0, [r7, #4]
 8005ff0:	f001 f8c6 	bl	8007180 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 8005ff4:	4b47      	ldr	r3, [pc, #284]	; (8006114 <tcp_close_shutdown+0x1b0>)
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	687a      	ldr	r2, [r7, #4]
 8005ffa:	429a      	cmp	r2, r3
 8005ffc:	d105      	bne.n	800600a <tcp_close_shutdown+0xa6>
 8005ffe:	4b45      	ldr	r3, [pc, #276]	; (8006114 <tcp_close_shutdown+0x1b0>)
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	68db      	ldr	r3, [r3, #12]
 8006004:	4a43      	ldr	r2, [pc, #268]	; (8006114 <tcp_close_shutdown+0x1b0>)
 8006006:	6013      	str	r3, [r2, #0]
 8006008:	e013      	b.n	8006032 <tcp_close_shutdown+0xce>
 800600a:	4b42      	ldr	r3, [pc, #264]	; (8006114 <tcp_close_shutdown+0x1b0>)
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	60fb      	str	r3, [r7, #12]
 8006010:	e00c      	b.n	800602c <tcp_close_shutdown+0xc8>
 8006012:	68fb      	ldr	r3, [r7, #12]
 8006014:	68db      	ldr	r3, [r3, #12]
 8006016:	687a      	ldr	r2, [r7, #4]
 8006018:	429a      	cmp	r2, r3
 800601a:	d104      	bne.n	8006026 <tcp_close_shutdown+0xc2>
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	68da      	ldr	r2, [r3, #12]
 8006020:	68fb      	ldr	r3, [r7, #12]
 8006022:	60da      	str	r2, [r3, #12]
 8006024:	e005      	b.n	8006032 <tcp_close_shutdown+0xce>
 8006026:	68fb      	ldr	r3, [r7, #12]
 8006028:	68db      	ldr	r3, [r3, #12]
 800602a:	60fb      	str	r3, [r7, #12]
 800602c:	68fb      	ldr	r3, [r7, #12]
 800602e:	2b00      	cmp	r3, #0
 8006030:	d1ef      	bne.n	8006012 <tcp_close_shutdown+0xae>
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	2200      	movs	r2, #0
 8006036:	60da      	str	r2, [r3, #12]
 8006038:	4b37      	ldr	r3, [pc, #220]	; (8006118 <tcp_close_shutdown+0x1b4>)
 800603a:	2201      	movs	r2, #1
 800603c:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 800603e:	4b37      	ldr	r3, [pc, #220]	; (800611c <tcp_close_shutdown+0x1b8>)
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	687a      	ldr	r2, [r7, #4]
 8006044:	429a      	cmp	r2, r3
 8006046:	d102      	bne.n	800604e <tcp_close_shutdown+0xea>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 8006048:	f003 fd5e 	bl	8009b08 <tcp_trigger_input_pcb_close>
 800604c:	e002      	b.n	8006054 <tcp_close_shutdown+0xf0>
      } else {
        tcp_free(pcb);
 800604e:	6878      	ldr	r0, [r7, #4]
 8006050:	f7ff fed6 	bl	8005e00 <tcp_free>
      }
      return ERR_OK;
 8006054:	2300      	movs	r3, #0
 8006056:	e050      	b.n	80060fa <tcp_close_shutdown+0x196>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	7d1b      	ldrb	r3, [r3, #20]
 800605c:	2b02      	cmp	r3, #2
 800605e:	d03b      	beq.n	80060d8 <tcp_close_shutdown+0x174>
 8006060:	2b02      	cmp	r3, #2
 8006062:	dc44      	bgt.n	80060ee <tcp_close_shutdown+0x18a>
 8006064:	2b00      	cmp	r3, #0
 8006066:	d002      	beq.n	800606e <tcp_close_shutdown+0x10a>
 8006068:	2b01      	cmp	r3, #1
 800606a:	d02a      	beq.n	80060c2 <tcp_close_shutdown+0x15e>
 800606c:	e03f      	b.n	80060ee <tcp_close_shutdown+0x18a>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	8adb      	ldrh	r3, [r3, #22]
 8006072:	2b00      	cmp	r3, #0
 8006074:	d021      	beq.n	80060ba <tcp_close_shutdown+0x156>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 8006076:	4b2a      	ldr	r3, [pc, #168]	; (8006120 <tcp_close_shutdown+0x1bc>)
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	687a      	ldr	r2, [r7, #4]
 800607c:	429a      	cmp	r2, r3
 800607e:	d105      	bne.n	800608c <tcp_close_shutdown+0x128>
 8006080:	4b27      	ldr	r3, [pc, #156]	; (8006120 <tcp_close_shutdown+0x1bc>)
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	68db      	ldr	r3, [r3, #12]
 8006086:	4a26      	ldr	r2, [pc, #152]	; (8006120 <tcp_close_shutdown+0x1bc>)
 8006088:	6013      	str	r3, [r2, #0]
 800608a:	e013      	b.n	80060b4 <tcp_close_shutdown+0x150>
 800608c:	4b24      	ldr	r3, [pc, #144]	; (8006120 <tcp_close_shutdown+0x1bc>)
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	60bb      	str	r3, [r7, #8]
 8006092:	e00c      	b.n	80060ae <tcp_close_shutdown+0x14a>
 8006094:	68bb      	ldr	r3, [r7, #8]
 8006096:	68db      	ldr	r3, [r3, #12]
 8006098:	687a      	ldr	r2, [r7, #4]
 800609a:	429a      	cmp	r2, r3
 800609c:	d104      	bne.n	80060a8 <tcp_close_shutdown+0x144>
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	68da      	ldr	r2, [r3, #12]
 80060a2:	68bb      	ldr	r3, [r7, #8]
 80060a4:	60da      	str	r2, [r3, #12]
 80060a6:	e005      	b.n	80060b4 <tcp_close_shutdown+0x150>
 80060a8:	68bb      	ldr	r3, [r7, #8]
 80060aa:	68db      	ldr	r3, [r3, #12]
 80060ac:	60bb      	str	r3, [r7, #8]
 80060ae:	68bb      	ldr	r3, [r7, #8]
 80060b0:	2b00      	cmp	r3, #0
 80060b2:	d1ef      	bne.n	8006094 <tcp_close_shutdown+0x130>
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	2200      	movs	r2, #0
 80060b8:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 80060ba:	6878      	ldr	r0, [r7, #4]
 80060bc:	f7ff fea0 	bl	8005e00 <tcp_free>
      break;
 80060c0:	e01a      	b.n	80060f8 <tcp_close_shutdown+0x194>
    case LISTEN:
      tcp_listen_closed(pcb);
 80060c2:	6878      	ldr	r0, [r7, #4]
 80060c4:	f7ff ff14 	bl	8005ef0 <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 80060c8:	6879      	ldr	r1, [r7, #4]
 80060ca:	4816      	ldr	r0, [pc, #88]	; (8006124 <tcp_close_shutdown+0x1c0>)
 80060cc:	f001 f8a8 	bl	8007220 <tcp_pcb_remove>
      tcp_free_listen(pcb);
 80060d0:	6878      	ldr	r0, [r7, #4]
 80060d2:	f7ff feb1 	bl	8005e38 <tcp_free_listen>
      break;
 80060d6:	e00f      	b.n	80060f8 <tcp_close_shutdown+0x194>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 80060d8:	6879      	ldr	r1, [r7, #4]
 80060da:	480e      	ldr	r0, [pc, #56]	; (8006114 <tcp_close_shutdown+0x1b0>)
 80060dc:	f001 f8a0 	bl	8007220 <tcp_pcb_remove>
 80060e0:	4b0d      	ldr	r3, [pc, #52]	; (8006118 <tcp_close_shutdown+0x1b4>)
 80060e2:	2201      	movs	r2, #1
 80060e4:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 80060e6:	6878      	ldr	r0, [r7, #4]
 80060e8:	f7ff fe8a 	bl	8005e00 <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 80060ec:	e004      	b.n	80060f8 <tcp_close_shutdown+0x194>
    default:
      return tcp_close_shutdown_fin(pcb);
 80060ee:	6878      	ldr	r0, [r7, #4]
 80060f0:	f000 f81a 	bl	8006128 <tcp_close_shutdown_fin>
 80060f4:	4603      	mov	r3, r0
 80060f6:	e000      	b.n	80060fa <tcp_close_shutdown+0x196>
  }
  return ERR_OK;
 80060f8:	2300      	movs	r3, #0
}
 80060fa:	4618      	mov	r0, r3
 80060fc:	3710      	adds	r7, #16
 80060fe:	46bd      	mov	sp, r7
 8006100:	bdb0      	pop	{r4, r5, r7, pc}
 8006102:	bf00      	nop
 8006104:	0800feb4 	.word	0x0800feb4
 8006108:	0800ff88 	.word	0x0800ff88
 800610c:	0800fef8 	.word	0x0800fef8
 8006110:	0800ffa8 	.word	0x0800ffa8
 8006114:	2000828c 	.word	0x2000828c
 8006118:	20008294 	.word	0x20008294
 800611c:	200082cc 	.word	0x200082cc
 8006120:	20008284 	.word	0x20008284
 8006124:	20008288 	.word	0x20008288

08006128 <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 8006128:	b580      	push	{r7, lr}
 800612a:	b084      	sub	sp, #16
 800612c:	af00      	add	r7, sp, #0
 800612e:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	2b00      	cmp	r3, #0
 8006134:	d106      	bne.n	8006144 <tcp_close_shutdown_fin+0x1c>
 8006136:	4b2e      	ldr	r3, [pc, #184]	; (80061f0 <tcp_close_shutdown_fin+0xc8>)
 8006138:	f44f 72ce 	mov.w	r2, #412	; 0x19c
 800613c:	492d      	ldr	r1, [pc, #180]	; (80061f4 <tcp_close_shutdown_fin+0xcc>)
 800613e:	482e      	ldr	r0, [pc, #184]	; (80061f8 <tcp_close_shutdown_fin+0xd0>)
 8006140:	f008 f9d8 	bl	800e4f4 <iprintf>

  switch (pcb->state) {
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	7d1b      	ldrb	r3, [r3, #20]
 8006148:	2b07      	cmp	r3, #7
 800614a:	d020      	beq.n	800618e <tcp_close_shutdown_fin+0x66>
 800614c:	2b07      	cmp	r3, #7
 800614e:	dc2b      	bgt.n	80061a8 <tcp_close_shutdown_fin+0x80>
 8006150:	2b03      	cmp	r3, #3
 8006152:	d002      	beq.n	800615a <tcp_close_shutdown_fin+0x32>
 8006154:	2b04      	cmp	r3, #4
 8006156:	d00d      	beq.n	8006174 <tcp_close_shutdown_fin+0x4c>
 8006158:	e026      	b.n	80061a8 <tcp_close_shutdown_fin+0x80>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 800615a:	6878      	ldr	r0, [r7, #4]
 800615c:	f003 fee6 	bl	8009f2c <tcp_send_fin>
 8006160:	4603      	mov	r3, r0
 8006162:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8006164:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006168:	2b00      	cmp	r3, #0
 800616a:	d11f      	bne.n	80061ac <tcp_close_shutdown_fin+0x84>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	2205      	movs	r2, #5
 8006170:	751a      	strb	r2, [r3, #20]
      }
      break;
 8006172:	e01b      	b.n	80061ac <tcp_close_shutdown_fin+0x84>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 8006174:	6878      	ldr	r0, [r7, #4]
 8006176:	f003 fed9 	bl	8009f2c <tcp_send_fin>
 800617a:	4603      	mov	r3, r0
 800617c:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800617e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006182:	2b00      	cmp	r3, #0
 8006184:	d114      	bne.n	80061b0 <tcp_close_shutdown_fin+0x88>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	2205      	movs	r2, #5
 800618a:	751a      	strb	r2, [r3, #20]
      }
      break;
 800618c:	e010      	b.n	80061b0 <tcp_close_shutdown_fin+0x88>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 800618e:	6878      	ldr	r0, [r7, #4]
 8006190:	f003 fecc 	bl	8009f2c <tcp_send_fin>
 8006194:	4603      	mov	r3, r0
 8006196:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8006198:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800619c:	2b00      	cmp	r3, #0
 800619e:	d109      	bne.n	80061b4 <tcp_close_shutdown_fin+0x8c>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	2209      	movs	r2, #9
 80061a4:	751a      	strb	r2, [r3, #20]
      }
      break;
 80061a6:	e005      	b.n	80061b4 <tcp_close_shutdown_fin+0x8c>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 80061a8:	2300      	movs	r3, #0
 80061aa:	e01c      	b.n	80061e6 <tcp_close_shutdown_fin+0xbe>
      break;
 80061ac:	bf00      	nop
 80061ae:	e002      	b.n	80061b6 <tcp_close_shutdown_fin+0x8e>
      break;
 80061b0:	bf00      	nop
 80061b2:	e000      	b.n	80061b6 <tcp_close_shutdown_fin+0x8e>
      break;
 80061b4:	bf00      	nop
  }

  if (err == ERR_OK) {
 80061b6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80061ba:	2b00      	cmp	r3, #0
 80061bc:	d103      	bne.n	80061c6 <tcp_close_shutdown_fin+0x9e>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 80061be:	6878      	ldr	r0, [r7, #4]
 80061c0:	f003 fff2 	bl	800a1a8 <tcp_output>
 80061c4:	e00d      	b.n	80061e2 <tcp_close_shutdown_fin+0xba>
  } else if (err == ERR_MEM) {
 80061c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80061ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80061ce:	d108      	bne.n	80061e2 <tcp_close_shutdown_fin+0xba>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	8b5b      	ldrh	r3, [r3, #26]
 80061d4:	f043 0308 	orr.w	r3, r3, #8
 80061d8:	b29a      	uxth	r2, r3
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 80061de:	2300      	movs	r3, #0
 80061e0:	e001      	b.n	80061e6 <tcp_close_shutdown_fin+0xbe>
  }
  return err;
 80061e2:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80061e6:	4618      	mov	r0, r3
 80061e8:	3710      	adds	r7, #16
 80061ea:	46bd      	mov	sp, r7
 80061ec:	bd80      	pop	{r7, pc}
 80061ee:	bf00      	nop
 80061f0:	0800feb4 	.word	0x0800feb4
 80061f4:	0800ff64 	.word	0x0800ff64
 80061f8:	0800fef8 	.word	0x0800fef8

080061fc <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 80061fc:	b580      	push	{r7, lr}
 80061fe:	b082      	sub	sp, #8
 8006200:	af00      	add	r7, sp, #0
 8006202:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	2b00      	cmp	r3, #0
 8006208:	d109      	bne.n	800621e <tcp_close+0x22>
 800620a:	4b0f      	ldr	r3, [pc, #60]	; (8006248 <tcp_close+0x4c>)
 800620c:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 8006210:	490e      	ldr	r1, [pc, #56]	; (800624c <tcp_close+0x50>)
 8006212:	480f      	ldr	r0, [pc, #60]	; (8006250 <tcp_close+0x54>)
 8006214:	f008 f96e 	bl	800e4f4 <iprintf>
 8006218:	f06f 030f 	mvn.w	r3, #15
 800621c:	e00f      	b.n	800623e <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	7d1b      	ldrb	r3, [r3, #20]
 8006222:	2b01      	cmp	r3, #1
 8006224:	d006      	beq.n	8006234 <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	8b5b      	ldrh	r3, [r3, #26]
 800622a:	f043 0310 	orr.w	r3, r3, #16
 800622e:	b29a      	uxth	r2, r3
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 8006234:	2101      	movs	r1, #1
 8006236:	6878      	ldr	r0, [r7, #4]
 8006238:	f7ff fe94 	bl	8005f64 <tcp_close_shutdown>
 800623c:	4603      	mov	r3, r0
}
 800623e:	4618      	mov	r0, r3
 8006240:	3708      	adds	r7, #8
 8006242:	46bd      	mov	sp, r7
 8006244:	bd80      	pop	{r7, pc}
 8006246:	bf00      	nop
 8006248:	0800feb4 	.word	0x0800feb4
 800624c:	0800ffc4 	.word	0x0800ffc4
 8006250:	0800fef8 	.word	0x0800fef8

08006254 <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 8006254:	b580      	push	{r7, lr}
 8006256:	b08e      	sub	sp, #56	; 0x38
 8006258:	af04      	add	r7, sp, #16
 800625a:	6078      	str	r0, [r7, #4]
 800625c:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	2b00      	cmp	r3, #0
 8006262:	d107      	bne.n	8006274 <tcp_abandon+0x20>
 8006264:	4b52      	ldr	r3, [pc, #328]	; (80063b0 <tcp_abandon+0x15c>)
 8006266:	f240 223d 	movw	r2, #573	; 0x23d
 800626a:	4952      	ldr	r1, [pc, #328]	; (80063b4 <tcp_abandon+0x160>)
 800626c:	4852      	ldr	r0, [pc, #328]	; (80063b8 <tcp_abandon+0x164>)
 800626e:	f008 f941 	bl	800e4f4 <iprintf>
 8006272:	e099      	b.n	80063a8 <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	7d1b      	ldrb	r3, [r3, #20]
 8006278:	2b01      	cmp	r3, #1
 800627a:	d106      	bne.n	800628a <tcp_abandon+0x36>
 800627c:	4b4c      	ldr	r3, [pc, #304]	; (80063b0 <tcp_abandon+0x15c>)
 800627e:	f44f 7210 	mov.w	r2, #576	; 0x240
 8006282:	494e      	ldr	r1, [pc, #312]	; (80063bc <tcp_abandon+0x168>)
 8006284:	484c      	ldr	r0, [pc, #304]	; (80063b8 <tcp_abandon+0x164>)
 8006286:	f008 f935 	bl	800e4f4 <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	7d1b      	ldrb	r3, [r3, #20]
 800628e:	2b0a      	cmp	r3, #10
 8006290:	d107      	bne.n	80062a2 <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 8006292:	6879      	ldr	r1, [r7, #4]
 8006294:	484a      	ldr	r0, [pc, #296]	; (80063c0 <tcp_abandon+0x16c>)
 8006296:	f000 ffc3 	bl	8007220 <tcp_pcb_remove>
    tcp_free(pcb);
 800629a:	6878      	ldr	r0, [r7, #4]
 800629c:	f7ff fdb0 	bl	8005e00 <tcp_free>
 80062a0:	e082      	b.n	80063a8 <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 80062a2:	2300      	movs	r3, #0
 80062a4:	627b      	str	r3, [r7, #36]	; 0x24
    u16_t local_port = 0;
 80062a6:	2300      	movs	r3, #0
 80062a8:	847b      	strh	r3, [r7, #34]	; 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80062ae:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062b4:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80062bc:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	691b      	ldr	r3, [r3, #16]
 80062c2:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	7d1b      	ldrb	r3, [r3, #20]
 80062c8:	2b00      	cmp	r3, #0
 80062ca:	d126      	bne.n	800631a <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	8adb      	ldrh	r3, [r3, #22]
 80062d0:	2b00      	cmp	r3, #0
 80062d2:	d02e      	beq.n	8006332 <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 80062d4:	4b3b      	ldr	r3, [pc, #236]	; (80063c4 <tcp_abandon+0x170>)
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	687a      	ldr	r2, [r7, #4]
 80062da:	429a      	cmp	r2, r3
 80062dc:	d105      	bne.n	80062ea <tcp_abandon+0x96>
 80062de:	4b39      	ldr	r3, [pc, #228]	; (80063c4 <tcp_abandon+0x170>)
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	68db      	ldr	r3, [r3, #12]
 80062e4:	4a37      	ldr	r2, [pc, #220]	; (80063c4 <tcp_abandon+0x170>)
 80062e6:	6013      	str	r3, [r2, #0]
 80062e8:	e013      	b.n	8006312 <tcp_abandon+0xbe>
 80062ea:	4b36      	ldr	r3, [pc, #216]	; (80063c4 <tcp_abandon+0x170>)
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	61fb      	str	r3, [r7, #28]
 80062f0:	e00c      	b.n	800630c <tcp_abandon+0xb8>
 80062f2:	69fb      	ldr	r3, [r7, #28]
 80062f4:	68db      	ldr	r3, [r3, #12]
 80062f6:	687a      	ldr	r2, [r7, #4]
 80062f8:	429a      	cmp	r2, r3
 80062fa:	d104      	bne.n	8006306 <tcp_abandon+0xb2>
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	68da      	ldr	r2, [r3, #12]
 8006300:	69fb      	ldr	r3, [r7, #28]
 8006302:	60da      	str	r2, [r3, #12]
 8006304:	e005      	b.n	8006312 <tcp_abandon+0xbe>
 8006306:	69fb      	ldr	r3, [r7, #28]
 8006308:	68db      	ldr	r3, [r3, #12]
 800630a:	61fb      	str	r3, [r7, #28]
 800630c:	69fb      	ldr	r3, [r7, #28]
 800630e:	2b00      	cmp	r3, #0
 8006310:	d1ef      	bne.n	80062f2 <tcp_abandon+0x9e>
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	2200      	movs	r2, #0
 8006316:	60da      	str	r2, [r3, #12]
 8006318:	e00b      	b.n	8006332 <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 800631a:	683b      	ldr	r3, [r7, #0]
 800631c:	627b      	str	r3, [r7, #36]	; 0x24
      local_port = pcb->local_port;
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	8adb      	ldrh	r3, [r3, #22]
 8006322:	847b      	strh	r3, [r7, #34]	; 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 8006324:	6879      	ldr	r1, [r7, #4]
 8006326:	4828      	ldr	r0, [pc, #160]	; (80063c8 <tcp_abandon+0x174>)
 8006328:	f000 ff7a 	bl	8007220 <tcp_pcb_remove>
 800632c:	4b27      	ldr	r3, [pc, #156]	; (80063cc <tcp_abandon+0x178>)
 800632e:	2201      	movs	r2, #1
 8006330:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006336:	2b00      	cmp	r3, #0
 8006338:	d004      	beq.n	8006344 <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800633e:	4618      	mov	r0, r3
 8006340:	f000 fd1c 	bl	8006d7c <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006348:	2b00      	cmp	r3, #0
 800634a:	d004      	beq.n	8006356 <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006350:	4618      	mov	r0, r3
 8006352:	f000 fd13 	bl	8006d7c <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800635a:	2b00      	cmp	r3, #0
 800635c:	d004      	beq.n	8006368 <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006362:	4618      	mov	r0, r3
 8006364:	f000 fd0a 	bl	8006d7c <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 8006368:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800636a:	2b00      	cmp	r3, #0
 800636c:	d00e      	beq.n	800638c <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 800636e:	6879      	ldr	r1, [r7, #4]
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	3304      	adds	r3, #4
 8006374:	687a      	ldr	r2, [r7, #4]
 8006376:	8b12      	ldrh	r2, [r2, #24]
 8006378:	9202      	str	r2, [sp, #8]
 800637a:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800637c:	9201      	str	r2, [sp, #4]
 800637e:	9300      	str	r3, [sp, #0]
 8006380:	460b      	mov	r3, r1
 8006382:	697a      	ldr	r2, [r7, #20]
 8006384:	69b9      	ldr	r1, [r7, #24]
 8006386:	6878      	ldr	r0, [r7, #4]
 8006388:	f004 fcc2 	bl	800ad10 <tcp_rst>
    }
    last_state = pcb->state;
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	7d1b      	ldrb	r3, [r3, #20]
 8006390:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 8006392:	6878      	ldr	r0, [r7, #4]
 8006394:	f7ff fd34 	bl	8005e00 <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 8006398:	693b      	ldr	r3, [r7, #16]
 800639a:	2b00      	cmp	r3, #0
 800639c:	d004      	beq.n	80063a8 <tcp_abandon+0x154>
 800639e:	693b      	ldr	r3, [r7, #16]
 80063a0:	f06f 010c 	mvn.w	r1, #12
 80063a4:	68f8      	ldr	r0, [r7, #12]
 80063a6:	4798      	blx	r3
  }
}
 80063a8:	3728      	adds	r7, #40	; 0x28
 80063aa:	46bd      	mov	sp, r7
 80063ac:	bd80      	pop	{r7, pc}
 80063ae:	bf00      	nop
 80063b0:	0800feb4 	.word	0x0800feb4
 80063b4:	0800fff8 	.word	0x0800fff8
 80063b8:	0800fef8 	.word	0x0800fef8
 80063bc:	08010014 	.word	0x08010014
 80063c0:	20008290 	.word	0x20008290
 80063c4:	20008284 	.word	0x20008284
 80063c8:	2000828c 	.word	0x2000828c
 80063cc:	20008294 	.word	0x20008294

080063d0 <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 80063d0:	b580      	push	{r7, lr}
 80063d2:	b082      	sub	sp, #8
 80063d4:	af00      	add	r7, sp, #0
 80063d6:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 80063d8:	2101      	movs	r1, #1
 80063da:	6878      	ldr	r0, [r7, #4]
 80063dc:	f7ff ff3a 	bl	8006254 <tcp_abandon>
}
 80063e0:	bf00      	nop
 80063e2:	3708      	adds	r7, #8
 80063e4:	46bd      	mov	sp, r7
 80063e6:	bd80      	pop	{r7, pc}

080063e8 <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 80063e8:	b580      	push	{r7, lr}
 80063ea:	b084      	sub	sp, #16
 80063ec:	af00      	add	r7, sp, #0
 80063ee:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	2b00      	cmp	r3, #0
 80063f4:	d106      	bne.n	8006404 <tcp_update_rcv_ann_wnd+0x1c>
 80063f6:	4b25      	ldr	r3, [pc, #148]	; (800648c <tcp_update_rcv_ann_wnd+0xa4>)
 80063f8:	f240 32a6 	movw	r2, #934	; 0x3a6
 80063fc:	4924      	ldr	r1, [pc, #144]	; (8006490 <tcp_update_rcv_ann_wnd+0xa8>)
 80063fe:	4825      	ldr	r0, [pc, #148]	; (8006494 <tcp_update_rcv_ann_wnd+0xac>)
 8006400:	f008 f878 	bl	800e4f4 <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006408:	687a      	ldr	r2, [r7, #4]
 800640a:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 800640c:	4413      	add	r3, r2
 800640e:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006414:	687a      	ldr	r2, [r7, #4]
 8006416:	8e52      	ldrh	r2, [r2, #50]	; 0x32
 8006418:	f5b2 6f86 	cmp.w	r2, #1072	; 0x430
 800641c:	bf28      	it	cs
 800641e:	f44f 6286 	movcs.w	r2, #1072	; 0x430
 8006422:	b292      	uxth	r2, r2
 8006424:	4413      	add	r3, r2
 8006426:	68fa      	ldr	r2, [r7, #12]
 8006428:	1ad3      	subs	r3, r2, r3
 800642a:	2b00      	cmp	r3, #0
 800642c:	db08      	blt.n	8006440 <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	855a      	strh	r2, [r3, #42]	; 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800643a:	68fa      	ldr	r2, [r7, #12]
 800643c:	1ad3      	subs	r3, r2, r3
 800643e:	e020      	b.n	8006482 <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006448:	1ad3      	subs	r3, r2, r3
 800644a:	2b00      	cmp	r3, #0
 800644c:	dd03      	ble.n	8006456 <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	2200      	movs	r2, #0
 8006452:	855a      	strh	r2, [r3, #42]	; 0x2a
 8006454:	e014      	b.n	8006480 <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800645e:	1ad3      	subs	r3, r2, r3
 8006460:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 8006462:	68bb      	ldr	r3, [r7, #8]
 8006464:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006468:	d306      	bcc.n	8006478 <tcp_update_rcv_ann_wnd+0x90>
 800646a:	4b08      	ldr	r3, [pc, #32]	; (800648c <tcp_update_rcv_ann_wnd+0xa4>)
 800646c:	f240 32b6 	movw	r2, #950	; 0x3b6
 8006470:	4909      	ldr	r1, [pc, #36]	; (8006498 <tcp_update_rcv_ann_wnd+0xb0>)
 8006472:	4808      	ldr	r0, [pc, #32]	; (8006494 <tcp_update_rcv_ann_wnd+0xac>)
 8006474:	f008 f83e 	bl	800e4f4 <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 8006478:	68bb      	ldr	r3, [r7, #8]
 800647a:	b29a      	uxth	r2, r3
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
    return 0;
 8006480:	2300      	movs	r3, #0
  }
}
 8006482:	4618      	mov	r0, r3
 8006484:	3710      	adds	r7, #16
 8006486:	46bd      	mov	sp, r7
 8006488:	bd80      	pop	{r7, pc}
 800648a:	bf00      	nop
 800648c:	0800feb4 	.word	0x0800feb4
 8006490:	08010110 	.word	0x08010110
 8006494:	0800fef8 	.word	0x0800fef8
 8006498:	08010134 	.word	0x08010134

0800649c <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 800649c:	b580      	push	{r7, lr}
 800649e:	b084      	sub	sp, #16
 80064a0:	af00      	add	r7, sp, #0
 80064a2:	6078      	str	r0, [r7, #4]
 80064a4:	460b      	mov	r3, r1
 80064a6:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	2b00      	cmp	r3, #0
 80064ac:	d107      	bne.n	80064be <tcp_recved+0x22>
 80064ae:	4b1f      	ldr	r3, [pc, #124]	; (800652c <tcp_recved+0x90>)
 80064b0:	f240 32cf 	movw	r2, #975	; 0x3cf
 80064b4:	491e      	ldr	r1, [pc, #120]	; (8006530 <tcp_recved+0x94>)
 80064b6:	481f      	ldr	r0, [pc, #124]	; (8006534 <tcp_recved+0x98>)
 80064b8:	f008 f81c 	bl	800e4f4 <iprintf>
 80064bc:	e032      	b.n	8006524 <tcp_recved+0x88>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	7d1b      	ldrb	r3, [r3, #20]
 80064c2:	2b01      	cmp	r3, #1
 80064c4:	d106      	bne.n	80064d4 <tcp_recved+0x38>
 80064c6:	4b19      	ldr	r3, [pc, #100]	; (800652c <tcp_recved+0x90>)
 80064c8:	f240 32d2 	movw	r2, #978	; 0x3d2
 80064cc:	491a      	ldr	r1, [pc, #104]	; (8006538 <tcp_recved+0x9c>)
 80064ce:	4819      	ldr	r0, [pc, #100]	; (8006534 <tcp_recved+0x98>)
 80064d0:	f008 f810 	bl	800e4f4 <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 80064d8:	887b      	ldrh	r3, [r7, #2]
 80064da:	4413      	add	r3, r2
 80064dc:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 80064de:	89fb      	ldrh	r3, [r7, #14]
 80064e0:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 80064e4:	d804      	bhi.n	80064f0 <tcp_recved+0x54>
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80064ea:	89fa      	ldrh	r2, [r7, #14]
 80064ec:	429a      	cmp	r2, r3
 80064ee:	d204      	bcs.n	80064fa <tcp_recved+0x5e>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	f44f 6206 	mov.w	r2, #2144	; 0x860
 80064f6:	851a      	strh	r2, [r3, #40]	; 0x28
 80064f8:	e002      	b.n	8006500 <tcp_recved+0x64>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	89fa      	ldrh	r2, [r7, #14]
 80064fe:	851a      	strh	r2, [r3, #40]	; 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 8006500:	6878      	ldr	r0, [r7, #4]
 8006502:	f7ff ff71 	bl	80063e8 <tcp_update_rcv_ann_wnd>
 8006506:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 8006508:	68bb      	ldr	r3, [r7, #8]
 800650a:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 800650e:	d309      	bcc.n	8006524 <tcp_recved+0x88>
    tcp_ack_now(pcb);
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	8b5b      	ldrh	r3, [r3, #26]
 8006514:	f043 0302 	orr.w	r3, r3, #2
 8006518:	b29a      	uxth	r2, r3
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800651e:	6878      	ldr	r0, [r7, #4]
 8006520:	f003 fe42 	bl	800a1a8 <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 8006524:	3710      	adds	r7, #16
 8006526:	46bd      	mov	sp, r7
 8006528:	bd80      	pop	{r7, pc}
 800652a:	bf00      	nop
 800652c:	0800feb4 	.word	0x0800feb4
 8006530:	08010150 	.word	0x08010150
 8006534:	0800fef8 	.word	0x0800fef8
 8006538:	08010168 	.word	0x08010168

0800653c <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 800653c:	b5b0      	push	{r4, r5, r7, lr}
 800653e:	b090      	sub	sp, #64	; 0x40
 8006540:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 8006542:	2300      	movs	r3, #0
 8006544:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

  ++tcp_ticks;
 8006548:	4b94      	ldr	r3, [pc, #592]	; (800679c <tcp_slowtmr+0x260>)
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	3301      	adds	r3, #1
 800654e:	4a93      	ldr	r2, [pc, #588]	; (800679c <tcp_slowtmr+0x260>)
 8006550:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 8006552:	4b93      	ldr	r3, [pc, #588]	; (80067a0 <tcp_slowtmr+0x264>)
 8006554:	781b      	ldrb	r3, [r3, #0]
 8006556:	3301      	adds	r3, #1
 8006558:	b2da      	uxtb	r2, r3
 800655a:	4b91      	ldr	r3, [pc, #580]	; (80067a0 <tcp_slowtmr+0x264>)
 800655c:	701a      	strb	r2, [r3, #0]

tcp_slowtmr_start:
  /* Steps through all of the active PCBs. */
  prev = NULL;
 800655e:	2300      	movs	r3, #0
 8006560:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_active_pcbs;
 8006562:	4b90      	ldr	r3, [pc, #576]	; (80067a4 <tcp_slowtmr+0x268>)
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (pcb == NULL) {
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: no active pcbs\n"));
  }
  while (pcb != NULL) {
 8006568:	e29f      	b.n	8006aaa <tcp_slowtmr+0x56e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: processing active pcb\n"));
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 800656a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800656c:	7d1b      	ldrb	r3, [r3, #20]
 800656e:	2b00      	cmp	r3, #0
 8006570:	d106      	bne.n	8006580 <tcp_slowtmr+0x44>
 8006572:	4b8d      	ldr	r3, [pc, #564]	; (80067a8 <tcp_slowtmr+0x26c>)
 8006574:	f240 42be 	movw	r2, #1214	; 0x4be
 8006578:	498c      	ldr	r1, [pc, #560]	; (80067ac <tcp_slowtmr+0x270>)
 800657a:	488d      	ldr	r0, [pc, #564]	; (80067b0 <tcp_slowtmr+0x274>)
 800657c:	f007 ffba 	bl	800e4f4 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 8006580:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006582:	7d1b      	ldrb	r3, [r3, #20]
 8006584:	2b01      	cmp	r3, #1
 8006586:	d106      	bne.n	8006596 <tcp_slowtmr+0x5a>
 8006588:	4b87      	ldr	r3, [pc, #540]	; (80067a8 <tcp_slowtmr+0x26c>)
 800658a:	f240 42bf 	movw	r2, #1215	; 0x4bf
 800658e:	4989      	ldr	r1, [pc, #548]	; (80067b4 <tcp_slowtmr+0x278>)
 8006590:	4887      	ldr	r0, [pc, #540]	; (80067b0 <tcp_slowtmr+0x274>)
 8006592:	f007 ffaf 	bl	800e4f4 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 8006596:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006598:	7d1b      	ldrb	r3, [r3, #20]
 800659a:	2b0a      	cmp	r3, #10
 800659c:	d106      	bne.n	80065ac <tcp_slowtmr+0x70>
 800659e:	4b82      	ldr	r3, [pc, #520]	; (80067a8 <tcp_slowtmr+0x26c>)
 80065a0:	f44f 6298 	mov.w	r2, #1216	; 0x4c0
 80065a4:	4984      	ldr	r1, [pc, #528]	; (80067b8 <tcp_slowtmr+0x27c>)
 80065a6:	4882      	ldr	r0, [pc, #520]	; (80067b0 <tcp_slowtmr+0x274>)
 80065a8:	f007 ffa4 	bl	800e4f4 <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 80065ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80065ae:	7f9a      	ldrb	r2, [r3, #30]
 80065b0:	4b7b      	ldr	r3, [pc, #492]	; (80067a0 <tcp_slowtmr+0x264>)
 80065b2:	781b      	ldrb	r3, [r3, #0]
 80065b4:	429a      	cmp	r2, r3
 80065b6:	d105      	bne.n	80065c4 <tcp_slowtmr+0x88>
      /* skip this pcb, we have already processed it */
      prev = pcb;
 80065b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80065ba:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 80065bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80065be:	68db      	ldr	r3, [r3, #12]
 80065c0:	62fb      	str	r3, [r7, #44]	; 0x2c
      continue;
 80065c2:	e272      	b.n	8006aaa <tcp_slowtmr+0x56e>
    }
    pcb->last_timer = tcp_timer_ctr;
 80065c4:	4b76      	ldr	r3, [pc, #472]	; (80067a0 <tcp_slowtmr+0x264>)
 80065c6:	781a      	ldrb	r2, [r3, #0]
 80065c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80065ca:	779a      	strb	r2, [r3, #30]

    pcb_remove = 0;
 80065cc:	2300      	movs	r3, #0
 80065ce:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    pcb_reset = 0;
 80065d2:	2300      	movs	r3, #0
 80065d4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 80065d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80065da:	7d1b      	ldrb	r3, [r3, #20]
 80065dc:	2b02      	cmp	r3, #2
 80065de:	d10a      	bne.n	80065f6 <tcp_slowtmr+0xba>
 80065e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80065e2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80065e6:	2b05      	cmp	r3, #5
 80065e8:	d905      	bls.n	80065f6 <tcp_slowtmr+0xba>
      ++pcb_remove;
 80065ea:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80065ee:	3301      	adds	r3, #1
 80065f0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80065f4:	e11e      	b.n	8006834 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max SYN retries reached\n"));
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 80065f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80065f8:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80065fc:	2b0b      	cmp	r3, #11
 80065fe:	d905      	bls.n	800660c <tcp_slowtmr+0xd0>
      ++pcb_remove;
 8006600:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006604:	3301      	adds	r3, #1
 8006606:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800660a:	e113      	b.n	8006834 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max DATA retries reached\n"));
    } else {
      if (pcb->persist_backoff > 0) {
 800660c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800660e:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8006612:	2b00      	cmp	r3, #0
 8006614:	d075      	beq.n	8006702 <tcp_slowtmr+0x1c6>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 8006616:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006618:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800661a:	2b00      	cmp	r3, #0
 800661c:	d006      	beq.n	800662c <tcp_slowtmr+0xf0>
 800661e:	4b62      	ldr	r3, [pc, #392]	; (80067a8 <tcp_slowtmr+0x26c>)
 8006620:	f240 42d4 	movw	r2, #1236	; 0x4d4
 8006624:	4965      	ldr	r1, [pc, #404]	; (80067bc <tcp_slowtmr+0x280>)
 8006626:	4862      	ldr	r0, [pc, #392]	; (80067b0 <tcp_slowtmr+0x274>)
 8006628:	f007 ff64 	bl	800e4f4 <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 800662c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800662e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006630:	2b00      	cmp	r3, #0
 8006632:	d106      	bne.n	8006642 <tcp_slowtmr+0x106>
 8006634:	4b5c      	ldr	r3, [pc, #368]	; (80067a8 <tcp_slowtmr+0x26c>)
 8006636:	f240 42d5 	movw	r2, #1237	; 0x4d5
 800663a:	4961      	ldr	r1, [pc, #388]	; (80067c0 <tcp_slowtmr+0x284>)
 800663c:	485c      	ldr	r0, [pc, #368]	; (80067b0 <tcp_slowtmr+0x274>)
 800663e:	f007 ff59 	bl	800e4f4 <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 8006642:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006644:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 8006648:	2b0b      	cmp	r3, #11
 800664a:	d905      	bls.n	8006658 <tcp_slowtmr+0x11c>
          ++pcb_remove; /* max probes reached */
 800664c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006650:	3301      	adds	r3, #1
 8006652:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8006656:	e0ed      	b.n	8006834 <tcp_slowtmr+0x2f8>
        } else {
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 8006658:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800665a:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800665e:	3b01      	subs	r3, #1
 8006660:	4a58      	ldr	r2, [pc, #352]	; (80067c4 <tcp_slowtmr+0x288>)
 8006662:	5cd3      	ldrb	r3, [r2, r3]
 8006664:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 8006666:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006668:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800666c:	7c7a      	ldrb	r2, [r7, #17]
 800666e:	429a      	cmp	r2, r3
 8006670:	d907      	bls.n	8006682 <tcp_slowtmr+0x146>
            pcb->persist_cnt++;
 8006672:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006674:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8006678:	3301      	adds	r3, #1
 800667a:	b2da      	uxtb	r2, r3
 800667c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800667e:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
          }
          if (pcb->persist_cnt >= backoff_cnt) {
 8006682:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006684:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8006688:	7c7a      	ldrb	r2, [r7, #17]
 800668a:	429a      	cmp	r2, r3
 800668c:	f200 80d2 	bhi.w	8006834 <tcp_slowtmr+0x2f8>
            int next_slot = 1; /* increment timer to next slot */
 8006690:	2301      	movs	r3, #1
 8006692:	623b      	str	r3, [r7, #32]
            /* If snd_wnd is zero, send 1 byte probes */
            if (pcb->snd_wnd == 0) {
 8006694:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006696:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800669a:	2b00      	cmp	r3, #0
 800669c:	d108      	bne.n	80066b0 <tcp_slowtmr+0x174>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 800669e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80066a0:	f004 fc2a 	bl	800aef8 <tcp_zero_window_probe>
 80066a4:	4603      	mov	r3, r0
 80066a6:	2b00      	cmp	r3, #0
 80066a8:	d014      	beq.n	80066d4 <tcp_slowtmr+0x198>
                next_slot = 0; /* try probe again with current slot */
 80066aa:	2300      	movs	r3, #0
 80066ac:	623b      	str	r3, [r7, #32]
 80066ae:	e011      	b.n	80066d4 <tcp_slowtmr+0x198>
              }
              /* snd_wnd not fully closed, split unsent head and fill window */
            } else {
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 80066b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80066b2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80066b6:	4619      	mov	r1, r3
 80066b8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80066ba:	f003 faef 	bl	8009c9c <tcp_split_unsent_seg>
 80066be:	4603      	mov	r3, r0
 80066c0:	2b00      	cmp	r3, #0
 80066c2:	d107      	bne.n	80066d4 <tcp_slowtmr+0x198>
                if (tcp_output(pcb) == ERR_OK) {
 80066c4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80066c6:	f003 fd6f 	bl	800a1a8 <tcp_output>
 80066ca:	4603      	mov	r3, r0
 80066cc:	2b00      	cmp	r3, #0
 80066ce:	d101      	bne.n	80066d4 <tcp_slowtmr+0x198>
                  /* sending will cancel persist timer, else retry with current slot */
                  next_slot = 0;
 80066d0:	2300      	movs	r3, #0
 80066d2:	623b      	str	r3, [r7, #32]
                }
              }
            }
            if (next_slot) {
 80066d4:	6a3b      	ldr	r3, [r7, #32]
 80066d6:	2b00      	cmp	r3, #0
 80066d8:	f000 80ac 	beq.w	8006834 <tcp_slowtmr+0x2f8>
              pcb->persist_cnt = 0;
 80066dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80066de:	2200      	movs	r2, #0
 80066e0:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 80066e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80066e6:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 80066ea:	2b06      	cmp	r3, #6
 80066ec:	f200 80a2 	bhi.w	8006834 <tcp_slowtmr+0x2f8>
                pcb->persist_backoff++;
 80066f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80066f2:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 80066f6:	3301      	adds	r3, #1
 80066f8:	b2da      	uxtb	r2, r3
 80066fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80066fc:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
 8006700:	e098      	b.n	8006834 <tcp_slowtmr+0x2f8>
            }
          }
        }
      } else {
        /* Increase the retransmission timer if it is running */
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 8006702:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006704:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8006708:	2b00      	cmp	r3, #0
 800670a:	db0f      	blt.n	800672c <tcp_slowtmr+0x1f0>
 800670c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800670e:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8006712:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8006716:	4293      	cmp	r3, r2
 8006718:	d008      	beq.n	800672c <tcp_slowtmr+0x1f0>
          ++pcb->rtime;
 800671a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800671c:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8006720:	b29b      	uxth	r3, r3
 8006722:	3301      	adds	r3, #1
 8006724:	b29b      	uxth	r3, r3
 8006726:	b21a      	sxth	r2, r3
 8006728:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800672a:	861a      	strh	r2, [r3, #48]	; 0x30
        }

        if (pcb->rtime >= pcb->rto) {
 800672c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800672e:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	; 0x30
 8006732:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006734:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 8006738:	429a      	cmp	r2, r3
 800673a:	db7b      	blt.n	8006834 <tcp_slowtmr+0x2f8>
                                      " pcb->rto %"S16_F"\n",
                                      pcb->rtime, pcb->rto));
          /* If prepare phase fails but we have unsent data but no unacked data,
             still execute the backoff calculations below, as this means we somehow
             failed to send segment. */
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 800673c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800673e:	f004 f827 	bl	800a790 <tcp_rexmit_rto_prepare>
 8006742:	4603      	mov	r3, r0
 8006744:	2b00      	cmp	r3, #0
 8006746:	d007      	beq.n	8006758 <tcp_slowtmr+0x21c>
 8006748:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800674a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800674c:	2b00      	cmp	r3, #0
 800674e:	d171      	bne.n	8006834 <tcp_slowtmr+0x2f8>
 8006750:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006752:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006754:	2b00      	cmp	r3, #0
 8006756:	d06d      	beq.n	8006834 <tcp_slowtmr+0x2f8>
            /* Double retransmission time-out unless we are trying to
             * connect to somebody (i.e., we are in SYN_SENT). */
            if (pcb->state != SYN_SENT) {
 8006758:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800675a:	7d1b      	ldrb	r3, [r3, #20]
 800675c:	2b02      	cmp	r3, #2
 800675e:	d03a      	beq.n	80067d6 <tcp_slowtmr+0x29a>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 8006760:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006762:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8006766:	2b0c      	cmp	r3, #12
 8006768:	bf28      	it	cs
 800676a:	230c      	movcs	r3, #12
 800676c:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 800676e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006770:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8006774:	10db      	asrs	r3, r3, #3
 8006776:	b21b      	sxth	r3, r3
 8006778:	461a      	mov	r2, r3
 800677a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800677c:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8006780:	4413      	add	r3, r2
 8006782:	7efa      	ldrb	r2, [r7, #27]
 8006784:	4910      	ldr	r1, [pc, #64]	; (80067c8 <tcp_slowtmr+0x28c>)
 8006786:	5c8a      	ldrb	r2, [r1, r2]
 8006788:	4093      	lsls	r3, r2
 800678a:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 800678c:	697b      	ldr	r3, [r7, #20]
 800678e:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 8006792:	4293      	cmp	r3, r2
 8006794:	dc1a      	bgt.n	80067cc <tcp_slowtmr+0x290>
 8006796:	697b      	ldr	r3, [r7, #20]
 8006798:	b21a      	sxth	r2, r3
 800679a:	e019      	b.n	80067d0 <tcp_slowtmr+0x294>
 800679c:	20008280 	.word	0x20008280
 80067a0:	20008296 	.word	0x20008296
 80067a4:	2000828c 	.word	0x2000828c
 80067a8:	0800feb4 	.word	0x0800feb4
 80067ac:	080101f8 	.word	0x080101f8
 80067b0:	0800fef8 	.word	0x0800fef8
 80067b4:	08010224 	.word	0x08010224
 80067b8:	08010250 	.word	0x08010250
 80067bc:	08010280 	.word	0x08010280
 80067c0:	080102b4 	.word	0x080102b4
 80067c4:	08011e8c 	.word	0x08011e8c
 80067c8:	08011e7c 	.word	0x08011e7c
 80067cc:	f647 72ff 	movw	r2, #32767	; 0x7fff
 80067d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80067d2:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
            }

            /* Reset the retransmission timer. */
            pcb->rtime = 0;
 80067d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80067d8:	2200      	movs	r2, #0
 80067da:	861a      	strh	r2, [r3, #48]	; 0x30

            /* Reduce congestion window and ssthresh. */
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 80067dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80067de:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 80067e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80067e4:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 80067e8:	4293      	cmp	r3, r2
 80067ea:	bf28      	it	cs
 80067ec:	4613      	movcs	r3, r2
 80067ee:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 80067f0:	8a7b      	ldrh	r3, [r7, #18]
 80067f2:	085b      	lsrs	r3, r3, #1
 80067f4:	b29a      	uxth	r2, r3
 80067f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80067f8:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 80067fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80067fe:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8006802:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006804:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8006806:	005b      	lsls	r3, r3, #1
 8006808:	b29b      	uxth	r3, r3
 800680a:	429a      	cmp	r2, r3
 800680c:	d206      	bcs.n	800681c <tcp_slowtmr+0x2e0>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 800680e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006810:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8006812:	005b      	lsls	r3, r3, #1
 8006814:	b29a      	uxth	r2, r3
 8006816:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006818:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            }
            pcb->cwnd = pcb->mss;
 800681c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800681e:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 8006820:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006822:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
            LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: cwnd %"TCPWNDSIZE_F
                                         " ssthresh %"TCPWNDSIZE_F"\n",
                                         pcb->cwnd, pcb->ssthresh));
            pcb->bytes_acked = 0;
 8006826:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006828:	2200      	movs	r2, #0
 800682a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

            /* The following needs to be called AFTER cwnd is set to one
               mss - STJ */
            tcp_rexmit_rto_commit(pcb);
 800682e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006830:	f004 f81e 	bl	800a870 <tcp_rexmit_rto_commit>
          }
        }
      }
    }
    /* Check if this PCB has stayed too long in FIN-WAIT-2 */
    if (pcb->state == FIN_WAIT_2) {
 8006834:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006836:	7d1b      	ldrb	r3, [r3, #20]
 8006838:	2b06      	cmp	r3, #6
 800683a:	d111      	bne.n	8006860 <tcp_slowtmr+0x324>
      /* If this PCB is in FIN_WAIT_2 because of SHUT_WR don't let it time out. */
      if (pcb->flags & TF_RXCLOSED) {
 800683c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800683e:	8b5b      	ldrh	r3, [r3, #26]
 8006840:	f003 0310 	and.w	r3, r3, #16
 8006844:	2b00      	cmp	r3, #0
 8006846:	d00b      	beq.n	8006860 <tcp_slowtmr+0x324>
        /* PCB was fully closed (either through close() or SHUT_RDWR):
           normal FIN-WAIT timeout handling. */
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 8006848:	4b9d      	ldr	r3, [pc, #628]	; (8006ac0 <tcp_slowtmr+0x584>)
 800684a:	681a      	ldr	r2, [r3, #0]
 800684c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800684e:	6a1b      	ldr	r3, [r3, #32]
 8006850:	1ad3      	subs	r3, r2, r3
 8006852:	2b28      	cmp	r3, #40	; 0x28
 8006854:	d904      	bls.n	8006860 <tcp_slowtmr+0x324>
            TCP_FIN_WAIT_TIMEOUT / TCP_SLOW_INTERVAL) {
          ++pcb_remove;
 8006856:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800685a:	3301      	adds	r3, #1
 800685c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        }
      }
    }

    /* Check if KEEPALIVE should be sent */
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 8006860:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006862:	7a5b      	ldrb	r3, [r3, #9]
 8006864:	f003 0308 	and.w	r3, r3, #8
 8006868:	2b00      	cmp	r3, #0
 800686a:	d04c      	beq.n	8006906 <tcp_slowtmr+0x3ca>
        ((pcb->state == ESTABLISHED) ||
 800686c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800686e:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 8006870:	2b04      	cmp	r3, #4
 8006872:	d003      	beq.n	800687c <tcp_slowtmr+0x340>
         (pcb->state == CLOSE_WAIT))) {
 8006874:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006876:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 8006878:	2b07      	cmp	r3, #7
 800687a:	d144      	bne.n	8006906 <tcp_slowtmr+0x3ca>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800687c:	4b90      	ldr	r3, [pc, #576]	; (8006ac0 <tcp_slowtmr+0x584>)
 800687e:	681a      	ldr	r2, [r3, #0]
 8006880:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006882:	6a1b      	ldr	r3, [r3, #32]
 8006884:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 8006886:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006888:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800688c:	f503 2324 	add.w	r3, r3, #671744	; 0xa4000
 8006890:	f603 43b8 	addw	r3, r3, #3256	; 0xcb8
 8006894:	498b      	ldr	r1, [pc, #556]	; (8006ac4 <tcp_slowtmr+0x588>)
 8006896:	fba1 1303 	umull	r1, r3, r1, r3
 800689a:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800689c:	429a      	cmp	r2, r3
 800689e:	d90a      	bls.n	80068b6 <tcp_slowtmr+0x37a>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: KEEPALIVE timeout. Aborting connection to "));
        ip_addr_debug_print_val(TCP_DEBUG, pcb->remote_ip);
        LWIP_DEBUGF(TCP_DEBUG, ("\n"));

        ++pcb_remove;
 80068a0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80068a4:	3301      	adds	r3, #1
 80068a6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        ++pcb_reset;
 80068aa:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80068ae:	3301      	adds	r3, #1
 80068b0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80068b4:	e027      	b.n	8006906 <tcp_slowtmr+0x3ca>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 80068b6:	4b82      	ldr	r3, [pc, #520]	; (8006ac0 <tcp_slowtmr+0x584>)
 80068b8:	681a      	ldr	r2, [r3, #0]
 80068ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80068bc:	6a1b      	ldr	r3, [r3, #32]
 80068be:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 80068c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80068c2:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 80068c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80068c8:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 80068cc:	4618      	mov	r0, r3
 80068ce:	4b7e      	ldr	r3, [pc, #504]	; (8006ac8 <tcp_slowtmr+0x58c>)
 80068d0:	fb00 f303 	mul.w	r3, r0, r3
 80068d4:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 80068d6:	497b      	ldr	r1, [pc, #492]	; (8006ac4 <tcp_slowtmr+0x588>)
 80068d8:	fba1 1303 	umull	r1, r3, r1, r3
 80068dc:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 80068de:	429a      	cmp	r2, r3
 80068e0:	d911      	bls.n	8006906 <tcp_slowtmr+0x3ca>
        err = tcp_keepalive(pcb);
 80068e2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80068e4:	f004 fac8 	bl	800ae78 <tcp_keepalive>
 80068e8:	4603      	mov	r3, r0
 80068ea:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (err == ERR_OK) {
 80068ee:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 80068f2:	2b00      	cmp	r3, #0
 80068f4:	d107      	bne.n	8006906 <tcp_slowtmr+0x3ca>
          pcb->keep_cnt_sent++;
 80068f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80068f8:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 80068fc:	3301      	adds	r3, #1
 80068fe:	b2da      	uxtb	r2, r3
 8006900:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006902:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b

    /* If this PCB has queued out of sequence data, but has been
       inactive for too long, will drop the data (it will eventually
       be retransmitted). */
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL &&
 8006906:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006908:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800690a:	2b00      	cmp	r3, #0
 800690c:	d011      	beq.n	8006932 <tcp_slowtmr+0x3f6>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 800690e:	4b6c      	ldr	r3, [pc, #432]	; (8006ac0 <tcp_slowtmr+0x584>)
 8006910:	681a      	ldr	r2, [r3, #0]
 8006912:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006914:	6a1b      	ldr	r3, [r3, #32]
 8006916:	1ad2      	subs	r2, r2, r3
 8006918:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800691a:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 800691e:	4619      	mov	r1, r3
 8006920:	460b      	mov	r3, r1
 8006922:	005b      	lsls	r3, r3, #1
 8006924:	440b      	add	r3, r1
 8006926:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 8006928:	429a      	cmp	r2, r3
 800692a:	d302      	bcc.n	8006932 <tcp_slowtmr+0x3f6>
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: dropping OOSEQ queued data\n"));
      tcp_free_ooseq(pcb);
 800692c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800692e:	f000 fddb 	bl	80074e8 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Check if this PCB has stayed too long in SYN-RCVD */
    if (pcb->state == SYN_RCVD) {
 8006932:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006934:	7d1b      	ldrb	r3, [r3, #20]
 8006936:	2b03      	cmp	r3, #3
 8006938:	d10b      	bne.n	8006952 <tcp_slowtmr+0x416>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800693a:	4b61      	ldr	r3, [pc, #388]	; (8006ac0 <tcp_slowtmr+0x584>)
 800693c:	681a      	ldr	r2, [r3, #0]
 800693e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006940:	6a1b      	ldr	r3, [r3, #32]
 8006942:	1ad3      	subs	r3, r2, r3
 8006944:	2b28      	cmp	r3, #40	; 0x28
 8006946:	d904      	bls.n	8006952 <tcp_slowtmr+0x416>
          TCP_SYN_RCVD_TIMEOUT / TCP_SLOW_INTERVAL) {
        ++pcb_remove;
 8006948:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800694c:	3301      	adds	r3, #1
 800694e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in SYN-RCVD\n"));
      }
    }

    /* Check if this PCB has stayed too long in LAST-ACK */
    if (pcb->state == LAST_ACK) {
 8006952:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006954:	7d1b      	ldrb	r3, [r3, #20]
 8006956:	2b09      	cmp	r3, #9
 8006958:	d10b      	bne.n	8006972 <tcp_slowtmr+0x436>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800695a:	4b59      	ldr	r3, [pc, #356]	; (8006ac0 <tcp_slowtmr+0x584>)
 800695c:	681a      	ldr	r2, [r3, #0]
 800695e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006960:	6a1b      	ldr	r3, [r3, #32]
 8006962:	1ad3      	subs	r3, r2, r3
 8006964:	2bf0      	cmp	r3, #240	; 0xf0
 8006966:	d904      	bls.n	8006972 <tcp_slowtmr+0x436>
        ++pcb_remove;
 8006968:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800696c:	3301      	adds	r3, #1
 800696e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in LAST-ACK\n"));
      }
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 8006972:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006976:	2b00      	cmp	r3, #0
 8006978:	d060      	beq.n	8006a3c <tcp_slowtmr+0x500>
      struct tcp_pcb *pcb2;
#if LWIP_CALLBACK_API
      tcp_err_fn err_fn = pcb->errf;
 800697a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800697c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006980:	60fb      	str	r3, [r7, #12]
#endif /* LWIP_CALLBACK_API */
      void *err_arg;
      enum tcp_state last_state;
      tcp_pcb_purge(pcb);
 8006982:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006984:	f000 fbfc 	bl	8007180 <tcp_pcb_purge>
      /* Remove PCB from tcp_active_pcbs list. */
      if (prev != NULL) {
 8006988:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800698a:	2b00      	cmp	r3, #0
 800698c:	d010      	beq.n	80069b0 <tcp_slowtmr+0x474>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 800698e:	4b4f      	ldr	r3, [pc, #316]	; (8006acc <tcp_slowtmr+0x590>)
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006994:	429a      	cmp	r2, r3
 8006996:	d106      	bne.n	80069a6 <tcp_slowtmr+0x46a>
 8006998:	4b4d      	ldr	r3, [pc, #308]	; (8006ad0 <tcp_slowtmr+0x594>)
 800699a:	f240 526d 	movw	r2, #1389	; 0x56d
 800699e:	494d      	ldr	r1, [pc, #308]	; (8006ad4 <tcp_slowtmr+0x598>)
 80069a0:	484d      	ldr	r0, [pc, #308]	; (8006ad8 <tcp_slowtmr+0x59c>)
 80069a2:	f007 fda7 	bl	800e4f4 <iprintf>
        prev->next = pcb->next;
 80069a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80069a8:	68da      	ldr	r2, [r3, #12]
 80069aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069ac:	60da      	str	r2, [r3, #12]
 80069ae:	e00f      	b.n	80069d0 <tcp_slowtmr+0x494>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 80069b0:	4b46      	ldr	r3, [pc, #280]	; (8006acc <tcp_slowtmr+0x590>)
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80069b6:	429a      	cmp	r2, r3
 80069b8:	d006      	beq.n	80069c8 <tcp_slowtmr+0x48c>
 80069ba:	4b45      	ldr	r3, [pc, #276]	; (8006ad0 <tcp_slowtmr+0x594>)
 80069bc:	f240 5271 	movw	r2, #1393	; 0x571
 80069c0:	4946      	ldr	r1, [pc, #280]	; (8006adc <tcp_slowtmr+0x5a0>)
 80069c2:	4845      	ldr	r0, [pc, #276]	; (8006ad8 <tcp_slowtmr+0x59c>)
 80069c4:	f007 fd96 	bl	800e4f4 <iprintf>
        tcp_active_pcbs = pcb->next;
 80069c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80069ca:	68db      	ldr	r3, [r3, #12]
 80069cc:	4a3f      	ldr	r2, [pc, #252]	; (8006acc <tcp_slowtmr+0x590>)
 80069ce:	6013      	str	r3, [r2, #0]
      }

      if (pcb_reset) {
 80069d0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80069d4:	2b00      	cmp	r3, #0
 80069d6:	d013      	beq.n	8006a00 <tcp_slowtmr+0x4c4>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 80069d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80069da:	6d18      	ldr	r0, [r3, #80]	; 0x50
 80069dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80069de:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 80069e0:	6afd      	ldr	r5, [r7, #44]	; 0x2c
 80069e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80069e4:	3304      	adds	r3, #4
 80069e6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80069e8:	8ad2      	ldrh	r2, [r2, #22]
 80069ea:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80069ec:	8b09      	ldrh	r1, [r1, #24]
 80069ee:	9102      	str	r1, [sp, #8]
 80069f0:	9201      	str	r2, [sp, #4]
 80069f2:	9300      	str	r3, [sp, #0]
 80069f4:	462b      	mov	r3, r5
 80069f6:	4622      	mov	r2, r4
 80069f8:	4601      	mov	r1, r0
 80069fa:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80069fc:	f004 f988 	bl	800ad10 <tcp_rst>
                pcb->local_port, pcb->remote_port);
      }

      err_arg = pcb->callback_arg;
 8006a00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a02:	691b      	ldr	r3, [r3, #16]
 8006a04:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 8006a06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a08:	7d1b      	ldrb	r3, [r3, #20]
 8006a0a:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 8006a0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a0e:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 8006a10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a12:	68db      	ldr	r3, [r3, #12]
 8006a14:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 8006a16:	6838      	ldr	r0, [r7, #0]
 8006a18:	f7ff f9f2 	bl	8005e00 <tcp_free>

      tcp_active_pcbs_changed = 0;
 8006a1c:	4b30      	ldr	r3, [pc, #192]	; (8006ae0 <tcp_slowtmr+0x5a4>)
 8006a1e:	2200      	movs	r2, #0
 8006a20:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 8006a22:	68fb      	ldr	r3, [r7, #12]
 8006a24:	2b00      	cmp	r3, #0
 8006a26:	d004      	beq.n	8006a32 <tcp_slowtmr+0x4f6>
 8006a28:	68fb      	ldr	r3, [r7, #12]
 8006a2a:	f06f 010c 	mvn.w	r1, #12
 8006a2e:	68b8      	ldr	r0, [r7, #8]
 8006a30:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 8006a32:	4b2b      	ldr	r3, [pc, #172]	; (8006ae0 <tcp_slowtmr+0x5a4>)
 8006a34:	781b      	ldrb	r3, [r3, #0]
 8006a36:	2b00      	cmp	r3, #0
 8006a38:	d037      	beq.n	8006aaa <tcp_slowtmr+0x56e>
        goto tcp_slowtmr_start;
 8006a3a:	e590      	b.n	800655e <tcp_slowtmr+0x22>
      }
    } else {
      /* get the 'next' element now and work with 'prev' below (in case of abort) */
      prev = pcb;
 8006a3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a3e:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 8006a40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a42:	68db      	ldr	r3, [r3, #12]
 8006a44:	62fb      	str	r3, [r7, #44]	; 0x2c

      /* We check if we should poll the connection. */
      ++prev->polltmr;
 8006a46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a48:	7f1b      	ldrb	r3, [r3, #28]
 8006a4a:	3301      	adds	r3, #1
 8006a4c:	b2da      	uxtb	r2, r3
 8006a4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a50:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 8006a52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a54:	7f1a      	ldrb	r2, [r3, #28]
 8006a56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a58:	7f5b      	ldrb	r3, [r3, #29]
 8006a5a:	429a      	cmp	r2, r3
 8006a5c:	d325      	bcc.n	8006aaa <tcp_slowtmr+0x56e>
        prev->polltmr = 0;
 8006a5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a60:	2200      	movs	r2, #0
 8006a62:	771a      	strb	r2, [r3, #28]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
 8006a64:	4b1e      	ldr	r3, [pc, #120]	; (8006ae0 <tcp_slowtmr+0x5a4>)
 8006a66:	2200      	movs	r2, #0
 8006a68:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 8006a6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a6c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006a70:	2b00      	cmp	r3, #0
 8006a72:	d00b      	beq.n	8006a8c <tcp_slowtmr+0x550>
 8006a74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a76:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006a7a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006a7c:	6912      	ldr	r2, [r2, #16]
 8006a7e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006a80:	4610      	mov	r0, r2
 8006a82:	4798      	blx	r3
 8006a84:	4603      	mov	r3, r0
 8006a86:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 8006a8a:	e002      	b.n	8006a92 <tcp_slowtmr+0x556>
 8006a8c:	2300      	movs	r3, #0
 8006a8e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (tcp_active_pcbs_changed) {
 8006a92:	4b13      	ldr	r3, [pc, #76]	; (8006ae0 <tcp_slowtmr+0x5a4>)
 8006a94:	781b      	ldrb	r3, [r3, #0]
 8006a96:	2b00      	cmp	r3, #0
 8006a98:	d000      	beq.n	8006a9c <tcp_slowtmr+0x560>
          goto tcp_slowtmr_start;
 8006a9a:	e560      	b.n	800655e <tcp_slowtmr+0x22>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 8006a9c:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 8006aa0:	2b00      	cmp	r3, #0
 8006aa2:	d102      	bne.n	8006aaa <tcp_slowtmr+0x56e>
          tcp_output(prev);
 8006aa4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006aa6:	f003 fb7f 	bl	800a1a8 <tcp_output>
  while (pcb != NULL) {
 8006aaa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006aac:	2b00      	cmp	r3, #0
 8006aae:	f47f ad5c 	bne.w	800656a <tcp_slowtmr+0x2e>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 8006ab2:	2300      	movs	r3, #0
 8006ab4:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_tw_pcbs;
 8006ab6:	4b0b      	ldr	r3, [pc, #44]	; (8006ae4 <tcp_slowtmr+0x5a8>)
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 8006abc:	e067      	b.n	8006b8e <tcp_slowtmr+0x652>
 8006abe:	bf00      	nop
 8006ac0:	20008280 	.word	0x20008280
 8006ac4:	10624dd3 	.word	0x10624dd3
 8006ac8:	000124f8 	.word	0x000124f8
 8006acc:	2000828c 	.word	0x2000828c
 8006ad0:	0800feb4 	.word	0x0800feb4
 8006ad4:	080102ec 	.word	0x080102ec
 8006ad8:	0800fef8 	.word	0x0800fef8
 8006adc:	08010318 	.word	0x08010318
 8006ae0:	20008294 	.word	0x20008294
 8006ae4:	20008290 	.word	0x20008290
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8006ae8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006aea:	7d1b      	ldrb	r3, [r3, #20]
 8006aec:	2b0a      	cmp	r3, #10
 8006aee:	d006      	beq.n	8006afe <tcp_slowtmr+0x5c2>
 8006af0:	4b2b      	ldr	r3, [pc, #172]	; (8006ba0 <tcp_slowtmr+0x664>)
 8006af2:	f240 52a1 	movw	r2, #1441	; 0x5a1
 8006af6:	492b      	ldr	r1, [pc, #172]	; (8006ba4 <tcp_slowtmr+0x668>)
 8006af8:	482b      	ldr	r0, [pc, #172]	; (8006ba8 <tcp_slowtmr+0x66c>)
 8006afa:	f007 fcfb 	bl	800e4f4 <iprintf>
    pcb_remove = 0;
 8006afe:	2300      	movs	r3, #0
 8006b00:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 8006b04:	4b29      	ldr	r3, [pc, #164]	; (8006bac <tcp_slowtmr+0x670>)
 8006b06:	681a      	ldr	r2, [r3, #0]
 8006b08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b0a:	6a1b      	ldr	r3, [r3, #32]
 8006b0c:	1ad3      	subs	r3, r2, r3
 8006b0e:	2bf0      	cmp	r3, #240	; 0xf0
 8006b10:	d904      	bls.n	8006b1c <tcp_slowtmr+0x5e0>
      ++pcb_remove;
 8006b12:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006b16:	3301      	adds	r3, #1
 8006b18:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 8006b1c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006b20:	2b00      	cmp	r3, #0
 8006b22:	d02f      	beq.n	8006b84 <tcp_slowtmr+0x648>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 8006b24:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006b26:	f000 fb2b 	bl	8007180 <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 8006b2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b2c:	2b00      	cmp	r3, #0
 8006b2e:	d010      	beq.n	8006b52 <tcp_slowtmr+0x616>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 8006b30:	4b1f      	ldr	r3, [pc, #124]	; (8006bb0 <tcp_slowtmr+0x674>)
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006b36:	429a      	cmp	r2, r3
 8006b38:	d106      	bne.n	8006b48 <tcp_slowtmr+0x60c>
 8006b3a:	4b19      	ldr	r3, [pc, #100]	; (8006ba0 <tcp_slowtmr+0x664>)
 8006b3c:	f240 52af 	movw	r2, #1455	; 0x5af
 8006b40:	491c      	ldr	r1, [pc, #112]	; (8006bb4 <tcp_slowtmr+0x678>)
 8006b42:	4819      	ldr	r0, [pc, #100]	; (8006ba8 <tcp_slowtmr+0x66c>)
 8006b44:	f007 fcd6 	bl	800e4f4 <iprintf>
        prev->next = pcb->next;
 8006b48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b4a:	68da      	ldr	r2, [r3, #12]
 8006b4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b4e:	60da      	str	r2, [r3, #12]
 8006b50:	e00f      	b.n	8006b72 <tcp_slowtmr+0x636>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 8006b52:	4b17      	ldr	r3, [pc, #92]	; (8006bb0 <tcp_slowtmr+0x674>)
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006b58:	429a      	cmp	r2, r3
 8006b5a:	d006      	beq.n	8006b6a <tcp_slowtmr+0x62e>
 8006b5c:	4b10      	ldr	r3, [pc, #64]	; (8006ba0 <tcp_slowtmr+0x664>)
 8006b5e:	f240 52b3 	movw	r2, #1459	; 0x5b3
 8006b62:	4915      	ldr	r1, [pc, #84]	; (8006bb8 <tcp_slowtmr+0x67c>)
 8006b64:	4810      	ldr	r0, [pc, #64]	; (8006ba8 <tcp_slowtmr+0x66c>)
 8006b66:	f007 fcc5 	bl	800e4f4 <iprintf>
        tcp_tw_pcbs = pcb->next;
 8006b6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b6c:	68db      	ldr	r3, [r3, #12]
 8006b6e:	4a10      	ldr	r2, [pc, #64]	; (8006bb0 <tcp_slowtmr+0x674>)
 8006b70:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 8006b72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b74:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 8006b76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b78:	68db      	ldr	r3, [r3, #12]
 8006b7a:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 8006b7c:	69f8      	ldr	r0, [r7, #28]
 8006b7e:	f7ff f93f 	bl	8005e00 <tcp_free>
 8006b82:	e004      	b.n	8006b8e <tcp_slowtmr+0x652>
    } else {
      prev = pcb;
 8006b84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b86:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 8006b88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b8a:	68db      	ldr	r3, [r3, #12]
 8006b8c:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 8006b8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b90:	2b00      	cmp	r3, #0
 8006b92:	d1a9      	bne.n	8006ae8 <tcp_slowtmr+0x5ac>
    }
  }
}
 8006b94:	bf00      	nop
 8006b96:	bf00      	nop
 8006b98:	3730      	adds	r7, #48	; 0x30
 8006b9a:	46bd      	mov	sp, r7
 8006b9c:	bdb0      	pop	{r4, r5, r7, pc}
 8006b9e:	bf00      	nop
 8006ba0:	0800feb4 	.word	0x0800feb4
 8006ba4:	08010344 	.word	0x08010344
 8006ba8:	0800fef8 	.word	0x0800fef8
 8006bac:	20008280 	.word	0x20008280
 8006bb0:	20008290 	.word	0x20008290
 8006bb4:	08010374 	.word	0x08010374
 8006bb8:	0801039c 	.word	0x0801039c

08006bbc <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 8006bbc:	b580      	push	{r7, lr}
 8006bbe:	b082      	sub	sp, #8
 8006bc0:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 8006bc2:	4b2d      	ldr	r3, [pc, #180]	; (8006c78 <tcp_fasttmr+0xbc>)
 8006bc4:	781b      	ldrb	r3, [r3, #0]
 8006bc6:	3301      	adds	r3, #1
 8006bc8:	b2da      	uxtb	r2, r3
 8006bca:	4b2b      	ldr	r3, [pc, #172]	; (8006c78 <tcp_fasttmr+0xbc>)
 8006bcc:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 8006bce:	4b2b      	ldr	r3, [pc, #172]	; (8006c7c <tcp_fasttmr+0xc0>)
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 8006bd4:	e048      	b.n	8006c68 <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	7f9a      	ldrb	r2, [r3, #30]
 8006bda:	4b27      	ldr	r3, [pc, #156]	; (8006c78 <tcp_fasttmr+0xbc>)
 8006bdc:	781b      	ldrb	r3, [r3, #0]
 8006bde:	429a      	cmp	r2, r3
 8006be0:	d03f      	beq.n	8006c62 <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 8006be2:	4b25      	ldr	r3, [pc, #148]	; (8006c78 <tcp_fasttmr+0xbc>)
 8006be4:	781a      	ldrb	r2, [r3, #0]
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	8b5b      	ldrh	r3, [r3, #26]
 8006bee:	f003 0301 	and.w	r3, r3, #1
 8006bf2:	2b00      	cmp	r3, #0
 8006bf4:	d010      	beq.n	8006c18 <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	8b5b      	ldrh	r3, [r3, #26]
 8006bfa:	f043 0302 	orr.w	r3, r3, #2
 8006bfe:	b29a      	uxth	r2, r3
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 8006c04:	6878      	ldr	r0, [r7, #4]
 8006c06:	f003 facf 	bl	800a1a8 <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	8b5b      	ldrh	r3, [r3, #26]
 8006c0e:	f023 0303 	bic.w	r3, r3, #3
 8006c12:	b29a      	uxth	r2, r3
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	8b5b      	ldrh	r3, [r3, #26]
 8006c1c:	f003 0308 	and.w	r3, r3, #8
 8006c20:	2b00      	cmp	r3, #0
 8006c22:	d009      	beq.n	8006c38 <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	8b5b      	ldrh	r3, [r3, #26]
 8006c28:	f023 0308 	bic.w	r3, r3, #8
 8006c2c:	b29a      	uxth	r2, r3
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 8006c32:	6878      	ldr	r0, [r7, #4]
 8006c34:	f7ff fa78 	bl	8006128 <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	68db      	ldr	r3, [r3, #12]
 8006c3c:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006c42:	2b00      	cmp	r3, #0
 8006c44:	d00a      	beq.n	8006c5c <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 8006c46:	4b0e      	ldr	r3, [pc, #56]	; (8006c80 <tcp_fasttmr+0xc4>)
 8006c48:	2200      	movs	r2, #0
 8006c4a:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 8006c4c:	6878      	ldr	r0, [r7, #4]
 8006c4e:	f000 f819 	bl	8006c84 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 8006c52:	4b0b      	ldr	r3, [pc, #44]	; (8006c80 <tcp_fasttmr+0xc4>)
 8006c54:	781b      	ldrb	r3, [r3, #0]
 8006c56:	2b00      	cmp	r3, #0
 8006c58:	d000      	beq.n	8006c5c <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 8006c5a:	e7b8      	b.n	8006bce <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 8006c5c:	683b      	ldr	r3, [r7, #0]
 8006c5e:	607b      	str	r3, [r7, #4]
 8006c60:	e002      	b.n	8006c68 <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	68db      	ldr	r3, [r3, #12]
 8006c66:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	2b00      	cmp	r3, #0
 8006c6c:	d1b3      	bne.n	8006bd6 <tcp_fasttmr+0x1a>
    }
  }
}
 8006c6e:	bf00      	nop
 8006c70:	bf00      	nop
 8006c72:	3708      	adds	r7, #8
 8006c74:	46bd      	mov	sp, r7
 8006c76:	bd80      	pop	{r7, pc}
 8006c78:	20008296 	.word	0x20008296
 8006c7c:	2000828c 	.word	0x2000828c
 8006c80:	20008294 	.word	0x20008294

08006c84 <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 8006c84:	b590      	push	{r4, r7, lr}
 8006c86:	b085      	sub	sp, #20
 8006c88:	af00      	add	r7, sp, #0
 8006c8a:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	2b00      	cmp	r3, #0
 8006c90:	d109      	bne.n	8006ca6 <tcp_process_refused_data+0x22>
 8006c92:	4b37      	ldr	r3, [pc, #220]	; (8006d70 <tcp_process_refused_data+0xec>)
 8006c94:	f240 6209 	movw	r2, #1545	; 0x609
 8006c98:	4936      	ldr	r1, [pc, #216]	; (8006d74 <tcp_process_refused_data+0xf0>)
 8006c9a:	4837      	ldr	r0, [pc, #220]	; (8006d78 <tcp_process_refused_data+0xf4>)
 8006c9c:	f007 fc2a 	bl	800e4f4 <iprintf>
 8006ca0:	f06f 030f 	mvn.w	r3, #15
 8006ca4:	e060      	b.n	8006d68 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006caa:	7b5b      	ldrb	r3, [r3, #13]
 8006cac:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006cb2:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	2200      	movs	r2, #0
 8006cb8:	679a      	str	r2, [r3, #120]	; 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006cc0:	2b00      	cmp	r3, #0
 8006cc2:	d00b      	beq.n	8006cdc <tcp_process_refused_data+0x58>
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	6918      	ldr	r0, [r3, #16]
 8006cce:	2300      	movs	r3, #0
 8006cd0:	68ba      	ldr	r2, [r7, #8]
 8006cd2:	6879      	ldr	r1, [r7, #4]
 8006cd4:	47a0      	blx	r4
 8006cd6:	4603      	mov	r3, r0
 8006cd8:	73fb      	strb	r3, [r7, #15]
 8006cda:	e007      	b.n	8006cec <tcp_process_refused_data+0x68>
 8006cdc:	2300      	movs	r3, #0
 8006cde:	68ba      	ldr	r2, [r7, #8]
 8006ce0:	6879      	ldr	r1, [r7, #4]
 8006ce2:	2000      	movs	r0, #0
 8006ce4:	f000 f8a4 	bl	8006e30 <tcp_recv_null>
 8006ce8:	4603      	mov	r3, r0
 8006cea:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 8006cec:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006cf0:	2b00      	cmp	r3, #0
 8006cf2:	d12a      	bne.n	8006d4a <tcp_process_refused_data+0xc6>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 8006cf4:	7bbb      	ldrb	r3, [r7, #14]
 8006cf6:	f003 0320 	and.w	r3, r3, #32
 8006cfa:	2b00      	cmp	r3, #0
 8006cfc:	d033      	beq.n	8006d66 <tcp_process_refused_data+0xe2>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006d02:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8006d06:	d005      	beq.n	8006d14 <tcp_process_refused_data+0x90>
          pcb->rcv_wnd++;
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006d0c:	3301      	adds	r3, #1
 8006d0e:	b29a      	uxth	r2, r3
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	851a      	strh	r2, [r3, #40]	; 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006d1a:	2b00      	cmp	r3, #0
 8006d1c:	d00b      	beq.n	8006d36 <tcp_process_refused_data+0xb2>
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	6918      	ldr	r0, [r3, #16]
 8006d28:	2300      	movs	r3, #0
 8006d2a:	2200      	movs	r2, #0
 8006d2c:	6879      	ldr	r1, [r7, #4]
 8006d2e:	47a0      	blx	r4
 8006d30:	4603      	mov	r3, r0
 8006d32:	73fb      	strb	r3, [r7, #15]
 8006d34:	e001      	b.n	8006d3a <tcp_process_refused_data+0xb6>
 8006d36:	2300      	movs	r3, #0
 8006d38:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 8006d3a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006d3e:	f113 0f0d 	cmn.w	r3, #13
 8006d42:	d110      	bne.n	8006d66 <tcp_process_refused_data+0xe2>
          return ERR_ABRT;
 8006d44:	f06f 030c 	mvn.w	r3, #12
 8006d48:	e00e      	b.n	8006d68 <tcp_process_refused_data+0xe4>
        }
      }
    } else if (err == ERR_ABRT) {
 8006d4a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006d4e:	f113 0f0d 	cmn.w	r3, #13
 8006d52:	d102      	bne.n	8006d5a <tcp_process_refused_data+0xd6>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 8006d54:	f06f 030c 	mvn.w	r3, #12
 8006d58:	e006      	b.n	8006d68 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	68ba      	ldr	r2, [r7, #8]
 8006d5e:	679a      	str	r2, [r3, #120]	; 0x78
      return ERR_INPROGRESS;
 8006d60:	f06f 0304 	mvn.w	r3, #4
 8006d64:	e000      	b.n	8006d68 <tcp_process_refused_data+0xe4>
    }
  }
  return ERR_OK;
 8006d66:	2300      	movs	r3, #0
}
 8006d68:	4618      	mov	r0, r3
 8006d6a:	3714      	adds	r7, #20
 8006d6c:	46bd      	mov	sp, r7
 8006d6e:	bd90      	pop	{r4, r7, pc}
 8006d70:	0800feb4 	.word	0x0800feb4
 8006d74:	080103c4 	.word	0x080103c4
 8006d78:	0800fef8 	.word	0x0800fef8

08006d7c <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 8006d7c:	b580      	push	{r7, lr}
 8006d7e:	b084      	sub	sp, #16
 8006d80:	af00      	add	r7, sp, #0
 8006d82:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 8006d84:	e007      	b.n	8006d96 <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 8006d8c:	6878      	ldr	r0, [r7, #4]
 8006d8e:	f000 f80a 	bl	8006da6 <tcp_seg_free>
    seg = next;
 8006d92:	68fb      	ldr	r3, [r7, #12]
 8006d94:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	2b00      	cmp	r3, #0
 8006d9a:	d1f4      	bne.n	8006d86 <tcp_segs_free+0xa>
  }
}
 8006d9c:	bf00      	nop
 8006d9e:	bf00      	nop
 8006da0:	3710      	adds	r7, #16
 8006da2:	46bd      	mov	sp, r7
 8006da4:	bd80      	pop	{r7, pc}

08006da6 <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 8006da6:	b580      	push	{r7, lr}
 8006da8:	b082      	sub	sp, #8
 8006daa:	af00      	add	r7, sp, #0
 8006dac:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	2b00      	cmp	r3, #0
 8006db2:	d00c      	beq.n	8006dce <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	685b      	ldr	r3, [r3, #4]
 8006db8:	2b00      	cmp	r3, #0
 8006dba:	d004      	beq.n	8006dc6 <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	685b      	ldr	r3, [r3, #4]
 8006dc0:	4618      	mov	r0, r3
 8006dc2:	f7fe fd6d 	bl	80058a0 <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 8006dc6:	6879      	ldr	r1, [r7, #4]
 8006dc8:	2003      	movs	r0, #3
 8006dca:	f7fd fef3 	bl	8004bb4 <memp_free>
  }
}
 8006dce:	bf00      	nop
 8006dd0:	3708      	adds	r7, #8
 8006dd2:	46bd      	mov	sp, r7
 8006dd4:	bd80      	pop	{r7, pc}
	...

08006dd8 <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 8006dd8:	b580      	push	{r7, lr}
 8006dda:	b084      	sub	sp, #16
 8006ddc:	af00      	add	r7, sp, #0
 8006dde:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	2b00      	cmp	r3, #0
 8006de4:	d106      	bne.n	8006df4 <tcp_seg_copy+0x1c>
 8006de6:	4b0f      	ldr	r3, [pc, #60]	; (8006e24 <tcp_seg_copy+0x4c>)
 8006de8:	f240 6282 	movw	r2, #1666	; 0x682
 8006dec:	490e      	ldr	r1, [pc, #56]	; (8006e28 <tcp_seg_copy+0x50>)
 8006dee:	480f      	ldr	r0, [pc, #60]	; (8006e2c <tcp_seg_copy+0x54>)
 8006df0:	f007 fb80 	bl	800e4f4 <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 8006df4:	2003      	movs	r0, #3
 8006df6:	f7fd fe6d 	bl	8004ad4 <memp_malloc>
 8006dfa:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 8006dfc:	68fb      	ldr	r3, [r7, #12]
 8006dfe:	2b00      	cmp	r3, #0
 8006e00:	d101      	bne.n	8006e06 <tcp_seg_copy+0x2e>
    return NULL;
 8006e02:	2300      	movs	r3, #0
 8006e04:	e00a      	b.n	8006e1c <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 8006e06:	2210      	movs	r2, #16
 8006e08:	6879      	ldr	r1, [r7, #4]
 8006e0a:	68f8      	ldr	r0, [r7, #12]
 8006e0c:	f007 fd3c 	bl	800e888 <memcpy>
  pbuf_ref(cseg->p);
 8006e10:	68fb      	ldr	r3, [r7, #12]
 8006e12:	685b      	ldr	r3, [r3, #4]
 8006e14:	4618      	mov	r0, r3
 8006e16:	f7fe fde3 	bl	80059e0 <pbuf_ref>
  return cseg;
 8006e1a:	68fb      	ldr	r3, [r7, #12]
}
 8006e1c:	4618      	mov	r0, r3
 8006e1e:	3710      	adds	r7, #16
 8006e20:	46bd      	mov	sp, r7
 8006e22:	bd80      	pop	{r7, pc}
 8006e24:	0800feb4 	.word	0x0800feb4
 8006e28:	08010408 	.word	0x08010408
 8006e2c:	0800fef8 	.word	0x0800fef8

08006e30 <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 8006e30:	b580      	push	{r7, lr}
 8006e32:	b084      	sub	sp, #16
 8006e34:	af00      	add	r7, sp, #0
 8006e36:	60f8      	str	r0, [r7, #12]
 8006e38:	60b9      	str	r1, [r7, #8]
 8006e3a:	607a      	str	r2, [r7, #4]
 8006e3c:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 8006e3e:	68bb      	ldr	r3, [r7, #8]
 8006e40:	2b00      	cmp	r3, #0
 8006e42:	d109      	bne.n	8006e58 <tcp_recv_null+0x28>
 8006e44:	4b12      	ldr	r3, [pc, #72]	; (8006e90 <tcp_recv_null+0x60>)
 8006e46:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 8006e4a:	4912      	ldr	r1, [pc, #72]	; (8006e94 <tcp_recv_null+0x64>)
 8006e4c:	4812      	ldr	r0, [pc, #72]	; (8006e98 <tcp_recv_null+0x68>)
 8006e4e:	f007 fb51 	bl	800e4f4 <iprintf>
 8006e52:	f06f 030f 	mvn.w	r3, #15
 8006e56:	e016      	b.n	8006e86 <tcp_recv_null+0x56>

  if (p != NULL) {
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	2b00      	cmp	r3, #0
 8006e5c:	d009      	beq.n	8006e72 <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	891b      	ldrh	r3, [r3, #8]
 8006e62:	4619      	mov	r1, r3
 8006e64:	68b8      	ldr	r0, [r7, #8]
 8006e66:	f7ff fb19 	bl	800649c <tcp_recved>
    pbuf_free(p);
 8006e6a:	6878      	ldr	r0, [r7, #4]
 8006e6c:	f7fe fd18 	bl	80058a0 <pbuf_free>
 8006e70:	e008      	b.n	8006e84 <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 8006e72:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006e76:	2b00      	cmp	r3, #0
 8006e78:	d104      	bne.n	8006e84 <tcp_recv_null+0x54>
    return tcp_close(pcb);
 8006e7a:	68b8      	ldr	r0, [r7, #8]
 8006e7c:	f7ff f9be 	bl	80061fc <tcp_close>
 8006e80:	4603      	mov	r3, r0
 8006e82:	e000      	b.n	8006e86 <tcp_recv_null+0x56>
  }
  return ERR_OK;
 8006e84:	2300      	movs	r3, #0
}
 8006e86:	4618      	mov	r0, r3
 8006e88:	3710      	adds	r7, #16
 8006e8a:	46bd      	mov	sp, r7
 8006e8c:	bd80      	pop	{r7, pc}
 8006e8e:	bf00      	nop
 8006e90:	0800feb4 	.word	0x0800feb4
 8006e94:	08010424 	.word	0x08010424
 8006e98:	0800fef8 	.word	0x0800fef8

08006e9c <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 8006e9c:	b580      	push	{r7, lr}
 8006e9e:	b086      	sub	sp, #24
 8006ea0:	af00      	add	r7, sp, #0
 8006ea2:	4603      	mov	r3, r0
 8006ea4:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 8006ea6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006eaa:	2b00      	cmp	r3, #0
 8006eac:	db01      	blt.n	8006eb2 <tcp_kill_prio+0x16>
 8006eae:	79fb      	ldrb	r3, [r7, #7]
 8006eb0:	e000      	b.n	8006eb4 <tcp_kill_prio+0x18>
 8006eb2:	237f      	movs	r3, #127	; 0x7f
 8006eb4:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 8006eb6:	7afb      	ldrb	r3, [r7, #11]
 8006eb8:	2b00      	cmp	r3, #0
 8006eba:	d034      	beq.n	8006f26 <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 8006ebc:	7afb      	ldrb	r3, [r7, #11]
 8006ebe:	3b01      	subs	r3, #1
 8006ec0:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 8006ec2:	2300      	movs	r3, #0
 8006ec4:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 8006ec6:	2300      	movs	r3, #0
 8006ec8:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8006eca:	4b19      	ldr	r3, [pc, #100]	; (8006f30 <tcp_kill_prio+0x94>)
 8006ecc:	681b      	ldr	r3, [r3, #0]
 8006ece:	617b      	str	r3, [r7, #20]
 8006ed0:	e01f      	b.n	8006f12 <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 8006ed2:	697b      	ldr	r3, [r7, #20]
 8006ed4:	7d5b      	ldrb	r3, [r3, #21]
 8006ed6:	7afa      	ldrb	r2, [r7, #11]
 8006ed8:	429a      	cmp	r2, r3
 8006eda:	d80c      	bhi.n	8006ef6 <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 8006edc:	697b      	ldr	r3, [r7, #20]
 8006ede:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 8006ee0:	7afa      	ldrb	r2, [r7, #11]
 8006ee2:	429a      	cmp	r2, r3
 8006ee4:	d112      	bne.n	8006f0c <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 8006ee6:	4b13      	ldr	r3, [pc, #76]	; (8006f34 <tcp_kill_prio+0x98>)
 8006ee8:	681a      	ldr	r2, [r3, #0]
 8006eea:	697b      	ldr	r3, [r7, #20]
 8006eec:	6a1b      	ldr	r3, [r3, #32]
 8006eee:	1ad3      	subs	r3, r2, r3
 8006ef0:	68fa      	ldr	r2, [r7, #12]
 8006ef2:	429a      	cmp	r2, r3
 8006ef4:	d80a      	bhi.n	8006f0c <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 8006ef6:	4b0f      	ldr	r3, [pc, #60]	; (8006f34 <tcp_kill_prio+0x98>)
 8006ef8:	681a      	ldr	r2, [r3, #0]
 8006efa:	697b      	ldr	r3, [r7, #20]
 8006efc:	6a1b      	ldr	r3, [r3, #32]
 8006efe:	1ad3      	subs	r3, r2, r3
 8006f00:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 8006f02:	697b      	ldr	r3, [r7, #20]
 8006f04:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 8006f06:	697b      	ldr	r3, [r7, #20]
 8006f08:	7d5b      	ldrb	r3, [r3, #21]
 8006f0a:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8006f0c:	697b      	ldr	r3, [r7, #20]
 8006f0e:	68db      	ldr	r3, [r3, #12]
 8006f10:	617b      	str	r3, [r7, #20]
 8006f12:	697b      	ldr	r3, [r7, #20]
 8006f14:	2b00      	cmp	r3, #0
 8006f16:	d1dc      	bne.n	8006ed2 <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 8006f18:	693b      	ldr	r3, [r7, #16]
 8006f1a:	2b00      	cmp	r3, #0
 8006f1c:	d004      	beq.n	8006f28 <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 8006f1e:	6938      	ldr	r0, [r7, #16]
 8006f20:	f7ff fa56 	bl	80063d0 <tcp_abort>
 8006f24:	e000      	b.n	8006f28 <tcp_kill_prio+0x8c>
    return;
 8006f26:	bf00      	nop
  }
}
 8006f28:	3718      	adds	r7, #24
 8006f2a:	46bd      	mov	sp, r7
 8006f2c:	bd80      	pop	{r7, pc}
 8006f2e:	bf00      	nop
 8006f30:	2000828c 	.word	0x2000828c
 8006f34:	20008280 	.word	0x20008280

08006f38 <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 8006f38:	b580      	push	{r7, lr}
 8006f3a:	b086      	sub	sp, #24
 8006f3c:	af00      	add	r7, sp, #0
 8006f3e:	4603      	mov	r3, r0
 8006f40:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 8006f42:	79fb      	ldrb	r3, [r7, #7]
 8006f44:	2b08      	cmp	r3, #8
 8006f46:	d009      	beq.n	8006f5c <tcp_kill_state+0x24>
 8006f48:	79fb      	ldrb	r3, [r7, #7]
 8006f4a:	2b09      	cmp	r3, #9
 8006f4c:	d006      	beq.n	8006f5c <tcp_kill_state+0x24>
 8006f4e:	4b1a      	ldr	r3, [pc, #104]	; (8006fb8 <tcp_kill_state+0x80>)
 8006f50:	f240 62dd 	movw	r2, #1757	; 0x6dd
 8006f54:	4919      	ldr	r1, [pc, #100]	; (8006fbc <tcp_kill_state+0x84>)
 8006f56:	481a      	ldr	r0, [pc, #104]	; (8006fc0 <tcp_kill_state+0x88>)
 8006f58:	f007 facc 	bl	800e4f4 <iprintf>

  inactivity = 0;
 8006f5c:	2300      	movs	r3, #0
 8006f5e:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 8006f60:	2300      	movs	r3, #0
 8006f62:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8006f64:	4b17      	ldr	r3, [pc, #92]	; (8006fc4 <tcp_kill_state+0x8c>)
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	617b      	str	r3, [r7, #20]
 8006f6a:	e017      	b.n	8006f9c <tcp_kill_state+0x64>
    if (pcb->state == state) {
 8006f6c:	697b      	ldr	r3, [r7, #20]
 8006f6e:	7d1b      	ldrb	r3, [r3, #20]
 8006f70:	79fa      	ldrb	r2, [r7, #7]
 8006f72:	429a      	cmp	r2, r3
 8006f74:	d10f      	bne.n	8006f96 <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8006f76:	4b14      	ldr	r3, [pc, #80]	; (8006fc8 <tcp_kill_state+0x90>)
 8006f78:	681a      	ldr	r2, [r3, #0]
 8006f7a:	697b      	ldr	r3, [r7, #20]
 8006f7c:	6a1b      	ldr	r3, [r3, #32]
 8006f7e:	1ad3      	subs	r3, r2, r3
 8006f80:	68fa      	ldr	r2, [r7, #12]
 8006f82:	429a      	cmp	r2, r3
 8006f84:	d807      	bhi.n	8006f96 <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 8006f86:	4b10      	ldr	r3, [pc, #64]	; (8006fc8 <tcp_kill_state+0x90>)
 8006f88:	681a      	ldr	r2, [r3, #0]
 8006f8a:	697b      	ldr	r3, [r7, #20]
 8006f8c:	6a1b      	ldr	r3, [r3, #32]
 8006f8e:	1ad3      	subs	r3, r2, r3
 8006f90:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 8006f92:	697b      	ldr	r3, [r7, #20]
 8006f94:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8006f96:	697b      	ldr	r3, [r7, #20]
 8006f98:	68db      	ldr	r3, [r3, #12]
 8006f9a:	617b      	str	r3, [r7, #20]
 8006f9c:	697b      	ldr	r3, [r7, #20]
 8006f9e:	2b00      	cmp	r3, #0
 8006fa0:	d1e4      	bne.n	8006f6c <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 8006fa2:	693b      	ldr	r3, [r7, #16]
 8006fa4:	2b00      	cmp	r3, #0
 8006fa6:	d003      	beq.n	8006fb0 <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 8006fa8:	2100      	movs	r1, #0
 8006faa:	6938      	ldr	r0, [r7, #16]
 8006fac:	f7ff f952 	bl	8006254 <tcp_abandon>
  }
}
 8006fb0:	bf00      	nop
 8006fb2:	3718      	adds	r7, #24
 8006fb4:	46bd      	mov	sp, r7
 8006fb6:	bd80      	pop	{r7, pc}
 8006fb8:	0800feb4 	.word	0x0800feb4
 8006fbc:	08010440 	.word	0x08010440
 8006fc0:	0800fef8 	.word	0x0800fef8
 8006fc4:	2000828c 	.word	0x2000828c
 8006fc8:	20008280 	.word	0x20008280

08006fcc <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 8006fcc:	b580      	push	{r7, lr}
 8006fce:	b084      	sub	sp, #16
 8006fd0:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 8006fd2:	2300      	movs	r3, #0
 8006fd4:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 8006fd6:	2300      	movs	r3, #0
 8006fd8:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8006fda:	4b12      	ldr	r3, [pc, #72]	; (8007024 <tcp_kill_timewait+0x58>)
 8006fdc:	681b      	ldr	r3, [r3, #0]
 8006fde:	60fb      	str	r3, [r7, #12]
 8006fe0:	e012      	b.n	8007008 <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8006fe2:	4b11      	ldr	r3, [pc, #68]	; (8007028 <tcp_kill_timewait+0x5c>)
 8006fe4:	681a      	ldr	r2, [r3, #0]
 8006fe6:	68fb      	ldr	r3, [r7, #12]
 8006fe8:	6a1b      	ldr	r3, [r3, #32]
 8006fea:	1ad3      	subs	r3, r2, r3
 8006fec:	687a      	ldr	r2, [r7, #4]
 8006fee:	429a      	cmp	r2, r3
 8006ff0:	d807      	bhi.n	8007002 <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 8006ff2:	4b0d      	ldr	r3, [pc, #52]	; (8007028 <tcp_kill_timewait+0x5c>)
 8006ff4:	681a      	ldr	r2, [r3, #0]
 8006ff6:	68fb      	ldr	r3, [r7, #12]
 8006ff8:	6a1b      	ldr	r3, [r3, #32]
 8006ffa:	1ad3      	subs	r3, r2, r3
 8006ffc:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 8006ffe:	68fb      	ldr	r3, [r7, #12]
 8007000:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8007002:	68fb      	ldr	r3, [r7, #12]
 8007004:	68db      	ldr	r3, [r3, #12]
 8007006:	60fb      	str	r3, [r7, #12]
 8007008:	68fb      	ldr	r3, [r7, #12]
 800700a:	2b00      	cmp	r3, #0
 800700c:	d1e9      	bne.n	8006fe2 <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 800700e:	68bb      	ldr	r3, [r7, #8]
 8007010:	2b00      	cmp	r3, #0
 8007012:	d002      	beq.n	800701a <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 8007014:	68b8      	ldr	r0, [r7, #8]
 8007016:	f7ff f9db 	bl	80063d0 <tcp_abort>
  }
}
 800701a:	bf00      	nop
 800701c:	3710      	adds	r7, #16
 800701e:	46bd      	mov	sp, r7
 8007020:	bd80      	pop	{r7, pc}
 8007022:	bf00      	nop
 8007024:	20008290 	.word	0x20008290
 8007028:	20008280 	.word	0x20008280

0800702c <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 800702c:	b580      	push	{r7, lr}
 800702e:	b082      	sub	sp, #8
 8007030:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 8007032:	4b10      	ldr	r3, [pc, #64]	; (8007074 <tcp_handle_closepend+0x48>)
 8007034:	681b      	ldr	r3, [r3, #0]
 8007036:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 8007038:	e014      	b.n	8007064 <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	68db      	ldr	r3, [r3, #12]
 800703e:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	8b5b      	ldrh	r3, [r3, #26]
 8007044:	f003 0308 	and.w	r3, r3, #8
 8007048:	2b00      	cmp	r3, #0
 800704a:	d009      	beq.n	8007060 <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	8b5b      	ldrh	r3, [r3, #26]
 8007050:	f023 0308 	bic.w	r3, r3, #8
 8007054:	b29a      	uxth	r2, r3
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 800705a:	6878      	ldr	r0, [r7, #4]
 800705c:	f7ff f864 	bl	8006128 <tcp_close_shutdown_fin>
    }
    pcb = next;
 8007060:	683b      	ldr	r3, [r7, #0]
 8007062:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	2b00      	cmp	r3, #0
 8007068:	d1e7      	bne.n	800703a <tcp_handle_closepend+0xe>
  }
}
 800706a:	bf00      	nop
 800706c:	bf00      	nop
 800706e:	3708      	adds	r7, #8
 8007070:	46bd      	mov	sp, r7
 8007072:	bd80      	pop	{r7, pc}
 8007074:	2000828c 	.word	0x2000828c

08007078 <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 8007078:	b580      	push	{r7, lr}
 800707a:	b084      	sub	sp, #16
 800707c:	af00      	add	r7, sp, #0
 800707e:	4603      	mov	r3, r0
 8007080:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8007082:	2001      	movs	r0, #1
 8007084:	f7fd fd26 	bl	8004ad4 <memp_malloc>
 8007088:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 800708a:	68fb      	ldr	r3, [r7, #12]
 800708c:	2b00      	cmp	r3, #0
 800708e:	d126      	bne.n	80070de <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 8007090:	f7ff ffcc 	bl	800702c <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 8007094:	f7ff ff9a 	bl	8006fcc <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8007098:	2001      	movs	r0, #1
 800709a:	f7fd fd1b 	bl	8004ad4 <memp_malloc>
 800709e:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 80070a0:	68fb      	ldr	r3, [r7, #12]
 80070a2:	2b00      	cmp	r3, #0
 80070a4:	d11b      	bne.n	80070de <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 80070a6:	2009      	movs	r0, #9
 80070a8:	f7ff ff46 	bl	8006f38 <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 80070ac:	2001      	movs	r0, #1
 80070ae:	f7fd fd11 	bl	8004ad4 <memp_malloc>
 80070b2:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 80070b4:	68fb      	ldr	r3, [r7, #12]
 80070b6:	2b00      	cmp	r3, #0
 80070b8:	d111      	bne.n	80070de <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 80070ba:	2008      	movs	r0, #8
 80070bc:	f7ff ff3c 	bl	8006f38 <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 80070c0:	2001      	movs	r0, #1
 80070c2:	f7fd fd07 	bl	8004ad4 <memp_malloc>
 80070c6:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 80070c8:	68fb      	ldr	r3, [r7, #12]
 80070ca:	2b00      	cmp	r3, #0
 80070cc:	d107      	bne.n	80070de <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 80070ce:	79fb      	ldrb	r3, [r7, #7]
 80070d0:	4618      	mov	r0, r3
 80070d2:	f7ff fee3 	bl	8006e9c <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 80070d6:	2001      	movs	r0, #1
 80070d8:	f7fd fcfc 	bl	8004ad4 <memp_malloc>
 80070dc:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 80070de:	68fb      	ldr	r3, [r7, #12]
 80070e0:	2b00      	cmp	r3, #0
 80070e2:	d03f      	beq.n	8007164 <tcp_alloc+0xec>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 80070e4:	229c      	movs	r2, #156	; 0x9c
 80070e6:	2100      	movs	r1, #0
 80070e8:	68f8      	ldr	r0, [r7, #12]
 80070ea:	f007 fb59 	bl	800e7a0 <memset>
    pcb->prio = prio;
 80070ee:	68fb      	ldr	r3, [r7, #12]
 80070f0:	79fa      	ldrb	r2, [r7, #7]
 80070f2:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 80070f4:	68fb      	ldr	r3, [r7, #12]
 80070f6:	f44f 6286 	mov.w	r2, #1072	; 0x430
 80070fa:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 80070fe:	68fb      	ldr	r3, [r7, #12]
 8007100:	f44f 6206 	mov.w	r2, #2144	; 0x860
 8007104:	855a      	strh	r2, [r3, #42]	; 0x2a
 8007106:	68fb      	ldr	r3, [r7, #12]
 8007108:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 800710a:	68fb      	ldr	r3, [r7, #12]
 800710c:	851a      	strh	r2, [r3, #40]	; 0x28
    pcb->ttl = TCP_TTL;
 800710e:	68fb      	ldr	r3, [r7, #12]
 8007110:	22ff      	movs	r2, #255	; 0xff
 8007112:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 8007114:	68fb      	ldr	r3, [r7, #12]
 8007116:	f44f 7206 	mov.w	r2, #536	; 0x218
 800711a:	865a      	strh	r2, [r3, #50]	; 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 800711c:	68fb      	ldr	r3, [r7, #12]
 800711e:	2206      	movs	r2, #6
 8007120:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 8007124:	68fb      	ldr	r3, [r7, #12]
 8007126:	2206      	movs	r2, #6
 8007128:	87da      	strh	r2, [r3, #62]	; 0x3e
    pcb->rtime = -1;
 800712a:	68fb      	ldr	r3, [r7, #12]
 800712c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007130:	861a      	strh	r2, [r3, #48]	; 0x30
    pcb->cwnd = 1;
 8007132:	68fb      	ldr	r3, [r7, #12]
 8007134:	2201      	movs	r2, #1
 8007136:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    pcb->tmr = tcp_ticks;
 800713a:	4b0d      	ldr	r3, [pc, #52]	; (8007170 <tcp_alloc+0xf8>)
 800713c:	681a      	ldr	r2, [r3, #0]
 800713e:	68fb      	ldr	r3, [r7, #12]
 8007140:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 8007142:	4b0c      	ldr	r3, [pc, #48]	; (8007174 <tcp_alloc+0xfc>)
 8007144:	781a      	ldrb	r2, [r3, #0]
 8007146:	68fb      	ldr	r3, [r7, #12]
 8007148:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 800714a:	68fb      	ldr	r3, [r7, #12]
 800714c:	f44f 6286 	mov.w	r2, #1072	; 0x430
 8007150:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 8007154:	68fb      	ldr	r3, [r7, #12]
 8007156:	4a08      	ldr	r2, [pc, #32]	; (8007178 <tcp_alloc+0x100>)
 8007158:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 800715c:	68fb      	ldr	r3, [r7, #12]
 800715e:	4a07      	ldr	r2, [pc, #28]	; (800717c <tcp_alloc+0x104>)
 8007160:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 8007164:	68fb      	ldr	r3, [r7, #12]
}
 8007166:	4618      	mov	r0, r3
 8007168:	3710      	adds	r7, #16
 800716a:	46bd      	mov	sp, r7
 800716c:	bd80      	pop	{r7, pc}
 800716e:	bf00      	nop
 8007170:	20008280 	.word	0x20008280
 8007174:	20008296 	.word	0x20008296
 8007178:	08006e31 	.word	0x08006e31
 800717c:	006ddd00 	.word	0x006ddd00

08007180 <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 8007180:	b580      	push	{r7, lr}
 8007182:	b082      	sub	sp, #8
 8007184:	af00      	add	r7, sp, #0
 8007186:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	2b00      	cmp	r3, #0
 800718c:	d107      	bne.n	800719e <tcp_pcb_purge+0x1e>
 800718e:	4b21      	ldr	r3, [pc, #132]	; (8007214 <tcp_pcb_purge+0x94>)
 8007190:	f640 0251 	movw	r2, #2129	; 0x851
 8007194:	4920      	ldr	r1, [pc, #128]	; (8007218 <tcp_pcb_purge+0x98>)
 8007196:	4821      	ldr	r0, [pc, #132]	; (800721c <tcp_pcb_purge+0x9c>)
 8007198:	f007 f9ac 	bl	800e4f4 <iprintf>
 800719c:	e037      	b.n	800720e <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	7d1b      	ldrb	r3, [r3, #20]
 80071a2:	2b00      	cmp	r3, #0
 80071a4:	d033      	beq.n	800720e <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 80071aa:	2b0a      	cmp	r3, #10
 80071ac:	d02f      	beq.n	800720e <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 80071b2:	2b01      	cmp	r3, #1
 80071b4:	d02b      	beq.n	800720e <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80071ba:	2b00      	cmp	r3, #0
 80071bc:	d007      	beq.n	80071ce <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80071c2:	4618      	mov	r0, r3
 80071c4:	f7fe fb6c 	bl	80058a0 <pbuf_free>
      pcb->refused_data = NULL;
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	2200      	movs	r2, #0
 80071cc:	679a      	str	r2, [r3, #120]	; 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80071d2:	2b00      	cmp	r3, #0
 80071d4:	d002      	beq.n	80071dc <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 80071d6:	6878      	ldr	r0, [r7, #4]
 80071d8:	f000 f986 	bl	80074e8 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80071e2:	861a      	strh	r2, [r3, #48]	; 0x30

    tcp_segs_free(pcb->unsent);
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80071e8:	4618      	mov	r0, r3
 80071ea:	f7ff fdc7 	bl	8006d7c <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80071f2:	4618      	mov	r0, r3
 80071f4:	f7ff fdc2 	bl	8006d7c <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	2200      	movs	r2, #0
 80071fc:	66da      	str	r2, [r3, #108]	; 0x6c
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	671a      	str	r2, [r3, #112]	; 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	2200      	movs	r2, #0
 800720a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */
  }
}
 800720e:	3708      	adds	r7, #8
 8007210:	46bd      	mov	sp, r7
 8007212:	bd80      	pop	{r7, pc}
 8007214:	0800feb4 	.word	0x0800feb4
 8007218:	08010500 	.word	0x08010500
 800721c:	0800fef8 	.word	0x0800fef8

08007220 <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 8007220:	b580      	push	{r7, lr}
 8007222:	b084      	sub	sp, #16
 8007224:	af00      	add	r7, sp, #0
 8007226:	6078      	str	r0, [r7, #4]
 8007228:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 800722a:	683b      	ldr	r3, [r7, #0]
 800722c:	2b00      	cmp	r3, #0
 800722e:	d106      	bne.n	800723e <tcp_pcb_remove+0x1e>
 8007230:	4b3e      	ldr	r3, [pc, #248]	; (800732c <tcp_pcb_remove+0x10c>)
 8007232:	f640 0283 	movw	r2, #2179	; 0x883
 8007236:	493e      	ldr	r1, [pc, #248]	; (8007330 <tcp_pcb_remove+0x110>)
 8007238:	483e      	ldr	r0, [pc, #248]	; (8007334 <tcp_pcb_remove+0x114>)
 800723a:	f007 f95b 	bl	800e4f4 <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	2b00      	cmp	r3, #0
 8007242:	d106      	bne.n	8007252 <tcp_pcb_remove+0x32>
 8007244:	4b39      	ldr	r3, [pc, #228]	; (800732c <tcp_pcb_remove+0x10c>)
 8007246:	f640 0284 	movw	r2, #2180	; 0x884
 800724a:	493b      	ldr	r1, [pc, #236]	; (8007338 <tcp_pcb_remove+0x118>)
 800724c:	4839      	ldr	r0, [pc, #228]	; (8007334 <tcp_pcb_remove+0x114>)
 800724e:	f007 f951 	bl	800e4f4 <iprintf>

  TCP_RMV(pcblist, pcb);
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	681b      	ldr	r3, [r3, #0]
 8007256:	683a      	ldr	r2, [r7, #0]
 8007258:	429a      	cmp	r2, r3
 800725a:	d105      	bne.n	8007268 <tcp_pcb_remove+0x48>
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	681b      	ldr	r3, [r3, #0]
 8007260:	68da      	ldr	r2, [r3, #12]
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	601a      	str	r2, [r3, #0]
 8007266:	e013      	b.n	8007290 <tcp_pcb_remove+0x70>
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	681b      	ldr	r3, [r3, #0]
 800726c:	60fb      	str	r3, [r7, #12]
 800726e:	e00c      	b.n	800728a <tcp_pcb_remove+0x6a>
 8007270:	68fb      	ldr	r3, [r7, #12]
 8007272:	68db      	ldr	r3, [r3, #12]
 8007274:	683a      	ldr	r2, [r7, #0]
 8007276:	429a      	cmp	r2, r3
 8007278:	d104      	bne.n	8007284 <tcp_pcb_remove+0x64>
 800727a:	683b      	ldr	r3, [r7, #0]
 800727c:	68da      	ldr	r2, [r3, #12]
 800727e:	68fb      	ldr	r3, [r7, #12]
 8007280:	60da      	str	r2, [r3, #12]
 8007282:	e005      	b.n	8007290 <tcp_pcb_remove+0x70>
 8007284:	68fb      	ldr	r3, [r7, #12]
 8007286:	68db      	ldr	r3, [r3, #12]
 8007288:	60fb      	str	r3, [r7, #12]
 800728a:	68fb      	ldr	r3, [r7, #12]
 800728c:	2b00      	cmp	r3, #0
 800728e:	d1ef      	bne.n	8007270 <tcp_pcb_remove+0x50>
 8007290:	683b      	ldr	r3, [r7, #0]
 8007292:	2200      	movs	r2, #0
 8007294:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 8007296:	6838      	ldr	r0, [r7, #0]
 8007298:	f7ff ff72 	bl	8007180 <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 800729c:	683b      	ldr	r3, [r7, #0]
 800729e:	7d1b      	ldrb	r3, [r3, #20]
 80072a0:	2b0a      	cmp	r3, #10
 80072a2:	d013      	beq.n	80072cc <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 80072a4:	683b      	ldr	r3, [r7, #0]
 80072a6:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 80072a8:	2b01      	cmp	r3, #1
 80072aa:	d00f      	beq.n	80072cc <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 80072ac:	683b      	ldr	r3, [r7, #0]
 80072ae:	8b5b      	ldrh	r3, [r3, #26]
 80072b0:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 80072b4:	2b00      	cmp	r3, #0
 80072b6:	d009      	beq.n	80072cc <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 80072b8:	683b      	ldr	r3, [r7, #0]
 80072ba:	8b5b      	ldrh	r3, [r3, #26]
 80072bc:	f043 0302 	orr.w	r3, r3, #2
 80072c0:	b29a      	uxth	r2, r3
 80072c2:	683b      	ldr	r3, [r7, #0]
 80072c4:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 80072c6:	6838      	ldr	r0, [r7, #0]
 80072c8:	f002 ff6e 	bl	800a1a8 <tcp_output>
  }

  if (pcb->state != LISTEN) {
 80072cc:	683b      	ldr	r3, [r7, #0]
 80072ce:	7d1b      	ldrb	r3, [r3, #20]
 80072d0:	2b01      	cmp	r3, #1
 80072d2:	d020      	beq.n	8007316 <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 80072d4:	683b      	ldr	r3, [r7, #0]
 80072d6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80072d8:	2b00      	cmp	r3, #0
 80072da:	d006      	beq.n	80072ea <tcp_pcb_remove+0xca>
 80072dc:	4b13      	ldr	r3, [pc, #76]	; (800732c <tcp_pcb_remove+0x10c>)
 80072de:	f640 0293 	movw	r2, #2195	; 0x893
 80072e2:	4916      	ldr	r1, [pc, #88]	; (800733c <tcp_pcb_remove+0x11c>)
 80072e4:	4813      	ldr	r0, [pc, #76]	; (8007334 <tcp_pcb_remove+0x114>)
 80072e6:	f007 f905 	bl	800e4f4 <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 80072ea:	683b      	ldr	r3, [r7, #0]
 80072ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80072ee:	2b00      	cmp	r3, #0
 80072f0:	d006      	beq.n	8007300 <tcp_pcb_remove+0xe0>
 80072f2:	4b0e      	ldr	r3, [pc, #56]	; (800732c <tcp_pcb_remove+0x10c>)
 80072f4:	f640 0294 	movw	r2, #2196	; 0x894
 80072f8:	4911      	ldr	r1, [pc, #68]	; (8007340 <tcp_pcb_remove+0x120>)
 80072fa:	480e      	ldr	r0, [pc, #56]	; (8007334 <tcp_pcb_remove+0x114>)
 80072fc:	f007 f8fa 	bl	800e4f4 <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 8007300:	683b      	ldr	r3, [r7, #0]
 8007302:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007304:	2b00      	cmp	r3, #0
 8007306:	d006      	beq.n	8007316 <tcp_pcb_remove+0xf6>
 8007308:	4b08      	ldr	r3, [pc, #32]	; (800732c <tcp_pcb_remove+0x10c>)
 800730a:	f640 0296 	movw	r2, #2198	; 0x896
 800730e:	490d      	ldr	r1, [pc, #52]	; (8007344 <tcp_pcb_remove+0x124>)
 8007310:	4808      	ldr	r0, [pc, #32]	; (8007334 <tcp_pcb_remove+0x114>)
 8007312:	f007 f8ef 	bl	800e4f4 <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 8007316:	683b      	ldr	r3, [r7, #0]
 8007318:	2200      	movs	r2, #0
 800731a:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 800731c:	683b      	ldr	r3, [r7, #0]
 800731e:	2200      	movs	r2, #0
 8007320:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 8007322:	bf00      	nop
 8007324:	3710      	adds	r7, #16
 8007326:	46bd      	mov	sp, r7
 8007328:	bd80      	pop	{r7, pc}
 800732a:	bf00      	nop
 800732c:	0800feb4 	.word	0x0800feb4
 8007330:	0801051c 	.word	0x0801051c
 8007334:	0800fef8 	.word	0x0800fef8
 8007338:	08010538 	.word	0x08010538
 800733c:	08010558 	.word	0x08010558
 8007340:	08010570 	.word	0x08010570
 8007344:	0801058c 	.word	0x0801058c

08007348 <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 8007348:	b580      	push	{r7, lr}
 800734a:	b082      	sub	sp, #8
 800734c:	af00      	add	r7, sp, #0
 800734e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	2b00      	cmp	r3, #0
 8007354:	d106      	bne.n	8007364 <tcp_next_iss+0x1c>
 8007356:	4b0a      	ldr	r3, [pc, #40]	; (8007380 <tcp_next_iss+0x38>)
 8007358:	f640 02af 	movw	r2, #2223	; 0x8af
 800735c:	4909      	ldr	r1, [pc, #36]	; (8007384 <tcp_next_iss+0x3c>)
 800735e:	480a      	ldr	r0, [pc, #40]	; (8007388 <tcp_next_iss+0x40>)
 8007360:	f007 f8c8 	bl	800e4f4 <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 8007364:	4b09      	ldr	r3, [pc, #36]	; (800738c <tcp_next_iss+0x44>)
 8007366:	681a      	ldr	r2, [r3, #0]
 8007368:	4b09      	ldr	r3, [pc, #36]	; (8007390 <tcp_next_iss+0x48>)
 800736a:	681b      	ldr	r3, [r3, #0]
 800736c:	4413      	add	r3, r2
 800736e:	4a07      	ldr	r2, [pc, #28]	; (800738c <tcp_next_iss+0x44>)
 8007370:	6013      	str	r3, [r2, #0]
  return iss;
 8007372:	4b06      	ldr	r3, [pc, #24]	; (800738c <tcp_next_iss+0x44>)
 8007374:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 8007376:	4618      	mov	r0, r3
 8007378:	3708      	adds	r7, #8
 800737a:	46bd      	mov	sp, r7
 800737c:	bd80      	pop	{r7, pc}
 800737e:	bf00      	nop
 8007380:	0800feb4 	.word	0x0800feb4
 8007384:	080105a4 	.word	0x080105a4
 8007388:	0800fef8 	.word	0x0800fef8
 800738c:	20000024 	.word	0x20000024
 8007390:	20008280 	.word	0x20008280

08007394 <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 8007394:	b580      	push	{r7, lr}
 8007396:	b086      	sub	sp, #24
 8007398:	af00      	add	r7, sp, #0
 800739a:	4603      	mov	r3, r0
 800739c:	60b9      	str	r1, [r7, #8]
 800739e:	607a      	str	r2, [r7, #4]
 80073a0:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	2b00      	cmp	r3, #0
 80073a6:	d106      	bne.n	80073b6 <tcp_eff_send_mss_netif+0x22>
 80073a8:	4b14      	ldr	r3, [pc, #80]	; (80073fc <tcp_eff_send_mss_netif+0x68>)
 80073aa:	f640 02c5 	movw	r2, #2245	; 0x8c5
 80073ae:	4914      	ldr	r1, [pc, #80]	; (8007400 <tcp_eff_send_mss_netif+0x6c>)
 80073b0:	4814      	ldr	r0, [pc, #80]	; (8007404 <tcp_eff_send_mss_netif+0x70>)
 80073b2:	f007 f89f 	bl	800e4f4 <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 80073b6:	68bb      	ldr	r3, [r7, #8]
 80073b8:	2b00      	cmp	r3, #0
 80073ba:	d101      	bne.n	80073c0 <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 80073bc:	89fb      	ldrh	r3, [r7, #14]
 80073be:	e019      	b.n	80073f4 <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 80073c0:	68bb      	ldr	r3, [r7, #8]
 80073c2:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80073c4:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 80073c6:	8afb      	ldrh	r3, [r7, #22]
 80073c8:	2b00      	cmp	r3, #0
 80073ca:	d012      	beq.n	80073f2 <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 80073cc:	2328      	movs	r3, #40	; 0x28
 80073ce:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 80073d0:	8afa      	ldrh	r2, [r7, #22]
 80073d2:	8abb      	ldrh	r3, [r7, #20]
 80073d4:	429a      	cmp	r2, r3
 80073d6:	d904      	bls.n	80073e2 <tcp_eff_send_mss_netif+0x4e>
 80073d8:	8afa      	ldrh	r2, [r7, #22]
 80073da:	8abb      	ldrh	r3, [r7, #20]
 80073dc:	1ad3      	subs	r3, r2, r3
 80073de:	b29b      	uxth	r3, r3
 80073e0:	e000      	b.n	80073e4 <tcp_eff_send_mss_netif+0x50>
 80073e2:	2300      	movs	r3, #0
 80073e4:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 80073e6:	8a7a      	ldrh	r2, [r7, #18]
 80073e8:	89fb      	ldrh	r3, [r7, #14]
 80073ea:	4293      	cmp	r3, r2
 80073ec:	bf28      	it	cs
 80073ee:	4613      	movcs	r3, r2
 80073f0:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 80073f2:	89fb      	ldrh	r3, [r7, #14]
}
 80073f4:	4618      	mov	r0, r3
 80073f6:	3718      	adds	r7, #24
 80073f8:	46bd      	mov	sp, r7
 80073fa:	bd80      	pop	{r7, pc}
 80073fc:	0800feb4 	.word	0x0800feb4
 8007400:	080105c0 	.word	0x080105c0
 8007404:	0800fef8 	.word	0x0800fef8

08007408 <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 8007408:	b580      	push	{r7, lr}
 800740a:	b084      	sub	sp, #16
 800740c:	af00      	add	r7, sp, #0
 800740e:	6078      	str	r0, [r7, #4]
 8007410:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 8007412:	683b      	ldr	r3, [r7, #0]
 8007414:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	2b00      	cmp	r3, #0
 800741a:	d119      	bne.n	8007450 <tcp_netif_ip_addr_changed_pcblist+0x48>
 800741c:	4b10      	ldr	r3, [pc, #64]	; (8007460 <tcp_netif_ip_addr_changed_pcblist+0x58>)
 800741e:	f44f 6210 	mov.w	r2, #2304	; 0x900
 8007422:	4910      	ldr	r1, [pc, #64]	; (8007464 <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 8007424:	4810      	ldr	r0, [pc, #64]	; (8007468 <tcp_netif_ip_addr_changed_pcblist+0x60>)
 8007426:	f007 f865 	bl	800e4f4 <iprintf>

  while (pcb != NULL) {
 800742a:	e011      	b.n	8007450 <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 800742c:	68fb      	ldr	r3, [r7, #12]
 800742e:	681a      	ldr	r2, [r3, #0]
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	681b      	ldr	r3, [r3, #0]
 8007434:	429a      	cmp	r2, r3
 8007436:	d108      	bne.n	800744a <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 8007438:	68fb      	ldr	r3, [r7, #12]
 800743a:	68db      	ldr	r3, [r3, #12]
 800743c:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 800743e:	68f8      	ldr	r0, [r7, #12]
 8007440:	f7fe ffc6 	bl	80063d0 <tcp_abort>
      pcb = next;
 8007444:	68bb      	ldr	r3, [r7, #8]
 8007446:	60fb      	str	r3, [r7, #12]
 8007448:	e002      	b.n	8007450 <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 800744a:	68fb      	ldr	r3, [r7, #12]
 800744c:	68db      	ldr	r3, [r3, #12]
 800744e:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 8007450:	68fb      	ldr	r3, [r7, #12]
 8007452:	2b00      	cmp	r3, #0
 8007454:	d1ea      	bne.n	800742c <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 8007456:	bf00      	nop
 8007458:	bf00      	nop
 800745a:	3710      	adds	r7, #16
 800745c:	46bd      	mov	sp, r7
 800745e:	bd80      	pop	{r7, pc}
 8007460:	0800feb4 	.word	0x0800feb4
 8007464:	080105e8 	.word	0x080105e8
 8007468:	0800fef8 	.word	0x0800fef8

0800746c <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800746c:	b580      	push	{r7, lr}
 800746e:	b084      	sub	sp, #16
 8007470:	af00      	add	r7, sp, #0
 8007472:	6078      	str	r0, [r7, #4]
 8007474:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	2b00      	cmp	r3, #0
 800747a:	d02a      	beq.n	80074d2 <tcp_netif_ip_addr_changed+0x66>
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	681b      	ldr	r3, [r3, #0]
 8007480:	2b00      	cmp	r3, #0
 8007482:	d026      	beq.n	80074d2 <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 8007484:	4b15      	ldr	r3, [pc, #84]	; (80074dc <tcp_netif_ip_addr_changed+0x70>)
 8007486:	681b      	ldr	r3, [r3, #0]
 8007488:	4619      	mov	r1, r3
 800748a:	6878      	ldr	r0, [r7, #4]
 800748c:	f7ff ffbc 	bl	8007408 <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 8007490:	4b13      	ldr	r3, [pc, #76]	; (80074e0 <tcp_netif_ip_addr_changed+0x74>)
 8007492:	681b      	ldr	r3, [r3, #0]
 8007494:	4619      	mov	r1, r3
 8007496:	6878      	ldr	r0, [r7, #4]
 8007498:	f7ff ffb6 	bl	8007408 <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 800749c:	683b      	ldr	r3, [r7, #0]
 800749e:	2b00      	cmp	r3, #0
 80074a0:	d017      	beq.n	80074d2 <tcp_netif_ip_addr_changed+0x66>
 80074a2:	683b      	ldr	r3, [r7, #0]
 80074a4:	681b      	ldr	r3, [r3, #0]
 80074a6:	2b00      	cmp	r3, #0
 80074a8:	d013      	beq.n	80074d2 <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 80074aa:	4b0e      	ldr	r3, [pc, #56]	; (80074e4 <tcp_netif_ip_addr_changed+0x78>)
 80074ac:	681b      	ldr	r3, [r3, #0]
 80074ae:	60fb      	str	r3, [r7, #12]
 80074b0:	e00c      	b.n	80074cc <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 80074b2:	68fb      	ldr	r3, [r7, #12]
 80074b4:	681a      	ldr	r2, [r3, #0]
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	681b      	ldr	r3, [r3, #0]
 80074ba:	429a      	cmp	r2, r3
 80074bc:	d103      	bne.n	80074c6 <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 80074be:	683b      	ldr	r3, [r7, #0]
 80074c0:	681a      	ldr	r2, [r3, #0]
 80074c2:	68fb      	ldr	r3, [r7, #12]
 80074c4:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 80074c6:	68fb      	ldr	r3, [r7, #12]
 80074c8:	68db      	ldr	r3, [r3, #12]
 80074ca:	60fb      	str	r3, [r7, #12]
 80074cc:	68fb      	ldr	r3, [r7, #12]
 80074ce:	2b00      	cmp	r3, #0
 80074d0:	d1ef      	bne.n	80074b2 <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 80074d2:	bf00      	nop
 80074d4:	3710      	adds	r7, #16
 80074d6:	46bd      	mov	sp, r7
 80074d8:	bd80      	pop	{r7, pc}
 80074da:	bf00      	nop
 80074dc:	2000828c 	.word	0x2000828c
 80074e0:	20008284 	.word	0x20008284
 80074e4:	20008288 	.word	0x20008288

080074e8 <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 80074e8:	b580      	push	{r7, lr}
 80074ea:	b082      	sub	sp, #8
 80074ec:	af00      	add	r7, sp, #0
 80074ee:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80074f4:	2b00      	cmp	r3, #0
 80074f6:	d007      	beq.n	8007508 <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80074fc:	4618      	mov	r0, r3
 80074fe:	f7ff fc3d 	bl	8006d7c <tcp_segs_free>
    pcb->ooseq = NULL;
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	2200      	movs	r2, #0
 8007506:	675a      	str	r2, [r3, #116]	; 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 8007508:	bf00      	nop
 800750a:	3708      	adds	r7, #8
 800750c:	46bd      	mov	sp, r7
 800750e:	bd80      	pop	{r7, pc}

08007510 <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 8007510:	b590      	push	{r4, r7, lr}
 8007512:	b08d      	sub	sp, #52	; 0x34
 8007514:	af04      	add	r7, sp, #16
 8007516:	6078      	str	r0, [r7, #4]
 8007518:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	2b00      	cmp	r3, #0
 800751e:	d105      	bne.n	800752c <tcp_input+0x1c>
 8007520:	4b9b      	ldr	r3, [pc, #620]	; (8007790 <tcp_input+0x280>)
 8007522:	2283      	movs	r2, #131	; 0x83
 8007524:	499b      	ldr	r1, [pc, #620]	; (8007794 <tcp_input+0x284>)
 8007526:	489c      	ldr	r0, [pc, #624]	; (8007798 <tcp_input+0x288>)
 8007528:	f006 ffe4 	bl	800e4f4 <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	685b      	ldr	r3, [r3, #4]
 8007530:	4a9a      	ldr	r2, [pc, #616]	; (800779c <tcp_input+0x28c>)
 8007532:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	895b      	ldrh	r3, [r3, #10]
 8007538:	2b13      	cmp	r3, #19
 800753a:	f240 83d1 	bls.w	8007ce0 <tcp_input+0x7d0>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800753e:	4b98      	ldr	r3, [pc, #608]	; (80077a0 <tcp_input+0x290>)
 8007540:	695b      	ldr	r3, [r3, #20]
 8007542:	4a97      	ldr	r2, [pc, #604]	; (80077a0 <tcp_input+0x290>)
 8007544:	6812      	ldr	r2, [r2, #0]
 8007546:	4611      	mov	r1, r2
 8007548:	4618      	mov	r0, r3
 800754a:	f005 ff8f 	bl	800d46c <ip4_addr_isbroadcast_u32>
 800754e:	4603      	mov	r3, r0
 8007550:	2b00      	cmp	r3, #0
 8007552:	f040 83c7 	bne.w	8007ce4 <tcp_input+0x7d4>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 8007556:	4b92      	ldr	r3, [pc, #584]	; (80077a0 <tcp_input+0x290>)
 8007558:	695b      	ldr	r3, [r3, #20]
 800755a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800755e:	2be0      	cmp	r3, #224	; 0xe0
 8007560:	f000 83c0 	beq.w	8007ce4 <tcp_input+0x7d4>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 8007564:	4b8d      	ldr	r3, [pc, #564]	; (800779c <tcp_input+0x28c>)
 8007566:	681b      	ldr	r3, [r3, #0]
 8007568:	899b      	ldrh	r3, [r3, #12]
 800756a:	b29b      	uxth	r3, r3
 800756c:	4618      	mov	r0, r3
 800756e:	f7fc fe39 	bl	80041e4 <lwip_htons>
 8007572:	4603      	mov	r3, r0
 8007574:	0b1b      	lsrs	r3, r3, #12
 8007576:	b29b      	uxth	r3, r3
 8007578:	b2db      	uxtb	r3, r3
 800757a:	009b      	lsls	r3, r3, #2
 800757c:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 800757e:	7cbb      	ldrb	r3, [r7, #18]
 8007580:	2b13      	cmp	r3, #19
 8007582:	f240 83b1 	bls.w	8007ce8 <tcp_input+0x7d8>
 8007586:	7cbb      	ldrb	r3, [r7, #18]
 8007588:	b29a      	uxth	r2, r3
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	891b      	ldrh	r3, [r3, #8]
 800758e:	429a      	cmp	r2, r3
 8007590:	f200 83aa 	bhi.w	8007ce8 <tcp_input+0x7d8>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 8007594:	7cbb      	ldrb	r3, [r7, #18]
 8007596:	b29b      	uxth	r3, r3
 8007598:	3b14      	subs	r3, #20
 800759a:	b29a      	uxth	r2, r3
 800759c:	4b81      	ldr	r3, [pc, #516]	; (80077a4 <tcp_input+0x294>)
 800759e:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 80075a0:	4b81      	ldr	r3, [pc, #516]	; (80077a8 <tcp_input+0x298>)
 80075a2:	2200      	movs	r2, #0
 80075a4:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	895a      	ldrh	r2, [r3, #10]
 80075aa:	7cbb      	ldrb	r3, [r7, #18]
 80075ac:	b29b      	uxth	r3, r3
 80075ae:	429a      	cmp	r2, r3
 80075b0:	d309      	bcc.n	80075c6 <tcp_input+0xb6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 80075b2:	4b7c      	ldr	r3, [pc, #496]	; (80077a4 <tcp_input+0x294>)
 80075b4:	881a      	ldrh	r2, [r3, #0]
 80075b6:	4b7d      	ldr	r3, [pc, #500]	; (80077ac <tcp_input+0x29c>)
 80075b8:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 80075ba:	7cbb      	ldrb	r3, [r7, #18]
 80075bc:	4619      	mov	r1, r3
 80075be:	6878      	ldr	r0, [r7, #4]
 80075c0:	f7fe f8e8 	bl	8005794 <pbuf_remove_header>
 80075c4:	e04e      	b.n	8007664 <tcp_input+0x154>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	681b      	ldr	r3, [r3, #0]
 80075ca:	2b00      	cmp	r3, #0
 80075cc:	d105      	bne.n	80075da <tcp_input+0xca>
 80075ce:	4b70      	ldr	r3, [pc, #448]	; (8007790 <tcp_input+0x280>)
 80075d0:	22c2      	movs	r2, #194	; 0xc2
 80075d2:	4977      	ldr	r1, [pc, #476]	; (80077b0 <tcp_input+0x2a0>)
 80075d4:	4870      	ldr	r0, [pc, #448]	; (8007798 <tcp_input+0x288>)
 80075d6:	f006 ff8d 	bl	800e4f4 <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 80075da:	2114      	movs	r1, #20
 80075dc:	6878      	ldr	r0, [r7, #4]
 80075de:	f7fe f8d9 	bl	8005794 <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	895a      	ldrh	r2, [r3, #10]
 80075e6:	4b71      	ldr	r3, [pc, #452]	; (80077ac <tcp_input+0x29c>)
 80075e8:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 80075ea:	4b6e      	ldr	r3, [pc, #440]	; (80077a4 <tcp_input+0x294>)
 80075ec:	881a      	ldrh	r2, [r3, #0]
 80075ee:	4b6f      	ldr	r3, [pc, #444]	; (80077ac <tcp_input+0x29c>)
 80075f0:	881b      	ldrh	r3, [r3, #0]
 80075f2:	1ad3      	subs	r3, r2, r3
 80075f4:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 80075f6:	4b6d      	ldr	r3, [pc, #436]	; (80077ac <tcp_input+0x29c>)
 80075f8:	881b      	ldrh	r3, [r3, #0]
 80075fa:	4619      	mov	r1, r3
 80075fc:	6878      	ldr	r0, [r7, #4]
 80075fe:	f7fe f8c9 	bl	8005794 <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	681b      	ldr	r3, [r3, #0]
 8007606:	895b      	ldrh	r3, [r3, #10]
 8007608:	8a3a      	ldrh	r2, [r7, #16]
 800760a:	429a      	cmp	r2, r3
 800760c:	f200 836e 	bhi.w	8007cec <tcp_input+0x7dc>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	681b      	ldr	r3, [r3, #0]
 8007614:	685b      	ldr	r3, [r3, #4]
 8007616:	4a64      	ldr	r2, [pc, #400]	; (80077a8 <tcp_input+0x298>)
 8007618:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	681b      	ldr	r3, [r3, #0]
 800761e:	8a3a      	ldrh	r2, [r7, #16]
 8007620:	4611      	mov	r1, r2
 8007622:	4618      	mov	r0, r3
 8007624:	f7fe f8b6 	bl	8005794 <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	891a      	ldrh	r2, [r3, #8]
 800762c:	8a3b      	ldrh	r3, [r7, #16]
 800762e:	1ad3      	subs	r3, r2, r3
 8007630:	b29a      	uxth	r2, r3
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	895b      	ldrh	r3, [r3, #10]
 800763a:	2b00      	cmp	r3, #0
 800763c:	d005      	beq.n	800764a <tcp_input+0x13a>
 800763e:	4b54      	ldr	r3, [pc, #336]	; (8007790 <tcp_input+0x280>)
 8007640:	22df      	movs	r2, #223	; 0xdf
 8007642:	495c      	ldr	r1, [pc, #368]	; (80077b4 <tcp_input+0x2a4>)
 8007644:	4854      	ldr	r0, [pc, #336]	; (8007798 <tcp_input+0x288>)
 8007646:	f006 ff55 	bl	800e4f4 <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	891a      	ldrh	r2, [r3, #8]
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	681b      	ldr	r3, [r3, #0]
 8007652:	891b      	ldrh	r3, [r3, #8]
 8007654:	429a      	cmp	r2, r3
 8007656:	d005      	beq.n	8007664 <tcp_input+0x154>
 8007658:	4b4d      	ldr	r3, [pc, #308]	; (8007790 <tcp_input+0x280>)
 800765a:	22e0      	movs	r2, #224	; 0xe0
 800765c:	4956      	ldr	r1, [pc, #344]	; (80077b8 <tcp_input+0x2a8>)
 800765e:	484e      	ldr	r0, [pc, #312]	; (8007798 <tcp_input+0x288>)
 8007660:	f006 ff48 	bl	800e4f4 <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 8007664:	4b4d      	ldr	r3, [pc, #308]	; (800779c <tcp_input+0x28c>)
 8007666:	681b      	ldr	r3, [r3, #0]
 8007668:	881b      	ldrh	r3, [r3, #0]
 800766a:	b29b      	uxth	r3, r3
 800766c:	4a4b      	ldr	r2, [pc, #300]	; (800779c <tcp_input+0x28c>)
 800766e:	6814      	ldr	r4, [r2, #0]
 8007670:	4618      	mov	r0, r3
 8007672:	f7fc fdb7 	bl	80041e4 <lwip_htons>
 8007676:	4603      	mov	r3, r0
 8007678:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 800767a:	4b48      	ldr	r3, [pc, #288]	; (800779c <tcp_input+0x28c>)
 800767c:	681b      	ldr	r3, [r3, #0]
 800767e:	885b      	ldrh	r3, [r3, #2]
 8007680:	b29b      	uxth	r3, r3
 8007682:	4a46      	ldr	r2, [pc, #280]	; (800779c <tcp_input+0x28c>)
 8007684:	6814      	ldr	r4, [r2, #0]
 8007686:	4618      	mov	r0, r3
 8007688:	f7fc fdac 	bl	80041e4 <lwip_htons>
 800768c:	4603      	mov	r3, r0
 800768e:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 8007690:	4b42      	ldr	r3, [pc, #264]	; (800779c <tcp_input+0x28c>)
 8007692:	681b      	ldr	r3, [r3, #0]
 8007694:	685b      	ldr	r3, [r3, #4]
 8007696:	4a41      	ldr	r2, [pc, #260]	; (800779c <tcp_input+0x28c>)
 8007698:	6814      	ldr	r4, [r2, #0]
 800769a:	4618      	mov	r0, r3
 800769c:	f7fc fdb7 	bl	800420e <lwip_htonl>
 80076a0:	4603      	mov	r3, r0
 80076a2:	6063      	str	r3, [r4, #4]
 80076a4:	6863      	ldr	r3, [r4, #4]
 80076a6:	4a45      	ldr	r2, [pc, #276]	; (80077bc <tcp_input+0x2ac>)
 80076a8:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 80076aa:	4b3c      	ldr	r3, [pc, #240]	; (800779c <tcp_input+0x28c>)
 80076ac:	681b      	ldr	r3, [r3, #0]
 80076ae:	689b      	ldr	r3, [r3, #8]
 80076b0:	4a3a      	ldr	r2, [pc, #232]	; (800779c <tcp_input+0x28c>)
 80076b2:	6814      	ldr	r4, [r2, #0]
 80076b4:	4618      	mov	r0, r3
 80076b6:	f7fc fdaa 	bl	800420e <lwip_htonl>
 80076ba:	4603      	mov	r3, r0
 80076bc:	60a3      	str	r3, [r4, #8]
 80076be:	68a3      	ldr	r3, [r4, #8]
 80076c0:	4a3f      	ldr	r2, [pc, #252]	; (80077c0 <tcp_input+0x2b0>)
 80076c2:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 80076c4:	4b35      	ldr	r3, [pc, #212]	; (800779c <tcp_input+0x28c>)
 80076c6:	681b      	ldr	r3, [r3, #0]
 80076c8:	89db      	ldrh	r3, [r3, #14]
 80076ca:	b29b      	uxth	r3, r3
 80076cc:	4a33      	ldr	r2, [pc, #204]	; (800779c <tcp_input+0x28c>)
 80076ce:	6814      	ldr	r4, [r2, #0]
 80076d0:	4618      	mov	r0, r3
 80076d2:	f7fc fd87 	bl	80041e4 <lwip_htons>
 80076d6:	4603      	mov	r3, r0
 80076d8:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 80076da:	4b30      	ldr	r3, [pc, #192]	; (800779c <tcp_input+0x28c>)
 80076dc:	681b      	ldr	r3, [r3, #0]
 80076de:	899b      	ldrh	r3, [r3, #12]
 80076e0:	b29b      	uxth	r3, r3
 80076e2:	4618      	mov	r0, r3
 80076e4:	f7fc fd7e 	bl	80041e4 <lwip_htons>
 80076e8:	4603      	mov	r3, r0
 80076ea:	b2db      	uxtb	r3, r3
 80076ec:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80076f0:	b2da      	uxtb	r2, r3
 80076f2:	4b34      	ldr	r3, [pc, #208]	; (80077c4 <tcp_input+0x2b4>)
 80076f4:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	891a      	ldrh	r2, [r3, #8]
 80076fa:	4b33      	ldr	r3, [pc, #204]	; (80077c8 <tcp_input+0x2b8>)
 80076fc:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 80076fe:	4b31      	ldr	r3, [pc, #196]	; (80077c4 <tcp_input+0x2b4>)
 8007700:	781b      	ldrb	r3, [r3, #0]
 8007702:	f003 0303 	and.w	r3, r3, #3
 8007706:	2b00      	cmp	r3, #0
 8007708:	d00c      	beq.n	8007724 <tcp_input+0x214>
    tcplen++;
 800770a:	4b2f      	ldr	r3, [pc, #188]	; (80077c8 <tcp_input+0x2b8>)
 800770c:	881b      	ldrh	r3, [r3, #0]
 800770e:	3301      	adds	r3, #1
 8007710:	b29a      	uxth	r2, r3
 8007712:	4b2d      	ldr	r3, [pc, #180]	; (80077c8 <tcp_input+0x2b8>)
 8007714:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	891a      	ldrh	r2, [r3, #8]
 800771a:	4b2b      	ldr	r3, [pc, #172]	; (80077c8 <tcp_input+0x2b8>)
 800771c:	881b      	ldrh	r3, [r3, #0]
 800771e:	429a      	cmp	r2, r3
 8007720:	f200 82e6 	bhi.w	8007cf0 <tcp_input+0x7e0>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 8007724:	2300      	movs	r3, #0
 8007726:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8007728:	4b28      	ldr	r3, [pc, #160]	; (80077cc <tcp_input+0x2bc>)
 800772a:	681b      	ldr	r3, [r3, #0]
 800772c:	61fb      	str	r3, [r7, #28]
 800772e:	e09d      	b.n	800786c <tcp_input+0x35c>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 8007730:	69fb      	ldr	r3, [r7, #28]
 8007732:	7d1b      	ldrb	r3, [r3, #20]
 8007734:	2b00      	cmp	r3, #0
 8007736:	d105      	bne.n	8007744 <tcp_input+0x234>
 8007738:	4b15      	ldr	r3, [pc, #84]	; (8007790 <tcp_input+0x280>)
 800773a:	22fb      	movs	r2, #251	; 0xfb
 800773c:	4924      	ldr	r1, [pc, #144]	; (80077d0 <tcp_input+0x2c0>)
 800773e:	4816      	ldr	r0, [pc, #88]	; (8007798 <tcp_input+0x288>)
 8007740:	f006 fed8 	bl	800e4f4 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 8007744:	69fb      	ldr	r3, [r7, #28]
 8007746:	7d1b      	ldrb	r3, [r3, #20]
 8007748:	2b0a      	cmp	r3, #10
 800774a:	d105      	bne.n	8007758 <tcp_input+0x248>
 800774c:	4b10      	ldr	r3, [pc, #64]	; (8007790 <tcp_input+0x280>)
 800774e:	22fc      	movs	r2, #252	; 0xfc
 8007750:	4920      	ldr	r1, [pc, #128]	; (80077d4 <tcp_input+0x2c4>)
 8007752:	4811      	ldr	r0, [pc, #68]	; (8007798 <tcp_input+0x288>)
 8007754:	f006 fece 	bl	800e4f4 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 8007758:	69fb      	ldr	r3, [r7, #28]
 800775a:	7d1b      	ldrb	r3, [r3, #20]
 800775c:	2b01      	cmp	r3, #1
 800775e:	d105      	bne.n	800776c <tcp_input+0x25c>
 8007760:	4b0b      	ldr	r3, [pc, #44]	; (8007790 <tcp_input+0x280>)
 8007762:	22fd      	movs	r2, #253	; 0xfd
 8007764:	491c      	ldr	r1, [pc, #112]	; (80077d8 <tcp_input+0x2c8>)
 8007766:	480c      	ldr	r0, [pc, #48]	; (8007798 <tcp_input+0x288>)
 8007768:	f006 fec4 	bl	800e4f4 <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800776c:	69fb      	ldr	r3, [r7, #28]
 800776e:	7a1b      	ldrb	r3, [r3, #8]
 8007770:	2b00      	cmp	r3, #0
 8007772:	d033      	beq.n	80077dc <tcp_input+0x2cc>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8007774:	69fb      	ldr	r3, [r7, #28]
 8007776:	7a1a      	ldrb	r2, [r3, #8]
 8007778:	4b09      	ldr	r3, [pc, #36]	; (80077a0 <tcp_input+0x290>)
 800777a:	685b      	ldr	r3, [r3, #4]
 800777c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8007780:	3301      	adds	r3, #1
 8007782:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8007784:	429a      	cmp	r2, r3
 8007786:	d029      	beq.n	80077dc <tcp_input+0x2cc>
      prev = pcb;
 8007788:	69fb      	ldr	r3, [r7, #28]
 800778a:	61bb      	str	r3, [r7, #24]
      continue;
 800778c:	e06b      	b.n	8007866 <tcp_input+0x356>
 800778e:	bf00      	nop
 8007790:	0801061c 	.word	0x0801061c
 8007794:	08010650 	.word	0x08010650
 8007798:	08010668 	.word	0x08010668
 800779c:	200082a8 	.word	0x200082a8
 80077a0:	20004d10 	.word	0x20004d10
 80077a4:	200082ac 	.word	0x200082ac
 80077a8:	200082b0 	.word	0x200082b0
 80077ac:	200082ae 	.word	0x200082ae
 80077b0:	08010690 	.word	0x08010690
 80077b4:	080106a0 	.word	0x080106a0
 80077b8:	080106ac 	.word	0x080106ac
 80077bc:	200082b8 	.word	0x200082b8
 80077c0:	200082bc 	.word	0x200082bc
 80077c4:	200082c4 	.word	0x200082c4
 80077c8:	200082c2 	.word	0x200082c2
 80077cc:	2000828c 	.word	0x2000828c
 80077d0:	080106cc 	.word	0x080106cc
 80077d4:	080106f4 	.word	0x080106f4
 80077d8:	08010720 	.word	0x08010720
    }

    if (pcb->remote_port == tcphdr->src &&
 80077dc:	69fb      	ldr	r3, [r7, #28]
 80077de:	8b1a      	ldrh	r2, [r3, #24]
 80077e0:	4b72      	ldr	r3, [pc, #456]	; (80079ac <tcp_input+0x49c>)
 80077e2:	681b      	ldr	r3, [r3, #0]
 80077e4:	881b      	ldrh	r3, [r3, #0]
 80077e6:	b29b      	uxth	r3, r3
 80077e8:	429a      	cmp	r2, r3
 80077ea:	d13a      	bne.n	8007862 <tcp_input+0x352>
        pcb->local_port == tcphdr->dest &&
 80077ec:	69fb      	ldr	r3, [r7, #28]
 80077ee:	8ada      	ldrh	r2, [r3, #22]
 80077f0:	4b6e      	ldr	r3, [pc, #440]	; (80079ac <tcp_input+0x49c>)
 80077f2:	681b      	ldr	r3, [r3, #0]
 80077f4:	885b      	ldrh	r3, [r3, #2]
 80077f6:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 80077f8:	429a      	cmp	r2, r3
 80077fa:	d132      	bne.n	8007862 <tcp_input+0x352>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 80077fc:	69fb      	ldr	r3, [r7, #28]
 80077fe:	685a      	ldr	r2, [r3, #4]
 8007800:	4b6b      	ldr	r3, [pc, #428]	; (80079b0 <tcp_input+0x4a0>)
 8007802:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 8007804:	429a      	cmp	r2, r3
 8007806:	d12c      	bne.n	8007862 <tcp_input+0x352>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8007808:	69fb      	ldr	r3, [r7, #28]
 800780a:	681a      	ldr	r2, [r3, #0]
 800780c:	4b68      	ldr	r3, [pc, #416]	; (80079b0 <tcp_input+0x4a0>)
 800780e:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8007810:	429a      	cmp	r2, r3
 8007812:	d126      	bne.n	8007862 <tcp_input+0x352>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 8007814:	69fb      	ldr	r3, [r7, #28]
 8007816:	68db      	ldr	r3, [r3, #12]
 8007818:	69fa      	ldr	r2, [r7, #28]
 800781a:	429a      	cmp	r2, r3
 800781c:	d106      	bne.n	800782c <tcp_input+0x31c>
 800781e:	4b65      	ldr	r3, [pc, #404]	; (80079b4 <tcp_input+0x4a4>)
 8007820:	f240 120d 	movw	r2, #269	; 0x10d
 8007824:	4964      	ldr	r1, [pc, #400]	; (80079b8 <tcp_input+0x4a8>)
 8007826:	4865      	ldr	r0, [pc, #404]	; (80079bc <tcp_input+0x4ac>)
 8007828:	f006 fe64 	bl	800e4f4 <iprintf>
      if (prev != NULL) {
 800782c:	69bb      	ldr	r3, [r7, #24]
 800782e:	2b00      	cmp	r3, #0
 8007830:	d00a      	beq.n	8007848 <tcp_input+0x338>
        prev->next = pcb->next;
 8007832:	69fb      	ldr	r3, [r7, #28]
 8007834:	68da      	ldr	r2, [r3, #12]
 8007836:	69bb      	ldr	r3, [r7, #24]
 8007838:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 800783a:	4b61      	ldr	r3, [pc, #388]	; (80079c0 <tcp_input+0x4b0>)
 800783c:	681a      	ldr	r2, [r3, #0]
 800783e:	69fb      	ldr	r3, [r7, #28]
 8007840:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 8007842:	4a5f      	ldr	r2, [pc, #380]	; (80079c0 <tcp_input+0x4b0>)
 8007844:	69fb      	ldr	r3, [r7, #28]
 8007846:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 8007848:	69fb      	ldr	r3, [r7, #28]
 800784a:	68db      	ldr	r3, [r3, #12]
 800784c:	69fa      	ldr	r2, [r7, #28]
 800784e:	429a      	cmp	r2, r3
 8007850:	d111      	bne.n	8007876 <tcp_input+0x366>
 8007852:	4b58      	ldr	r3, [pc, #352]	; (80079b4 <tcp_input+0x4a4>)
 8007854:	f240 1215 	movw	r2, #277	; 0x115
 8007858:	495a      	ldr	r1, [pc, #360]	; (80079c4 <tcp_input+0x4b4>)
 800785a:	4858      	ldr	r0, [pc, #352]	; (80079bc <tcp_input+0x4ac>)
 800785c:	f006 fe4a 	bl	800e4f4 <iprintf>
      break;
 8007860:	e009      	b.n	8007876 <tcp_input+0x366>
    }
    prev = pcb;
 8007862:	69fb      	ldr	r3, [r7, #28]
 8007864:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8007866:	69fb      	ldr	r3, [r7, #28]
 8007868:	68db      	ldr	r3, [r3, #12]
 800786a:	61fb      	str	r3, [r7, #28]
 800786c:	69fb      	ldr	r3, [r7, #28]
 800786e:	2b00      	cmp	r3, #0
 8007870:	f47f af5e 	bne.w	8007730 <tcp_input+0x220>
 8007874:	e000      	b.n	8007878 <tcp_input+0x368>
      break;
 8007876:	bf00      	nop
  }

  if (pcb == NULL) {
 8007878:	69fb      	ldr	r3, [r7, #28]
 800787a:	2b00      	cmp	r3, #0
 800787c:	f040 80aa 	bne.w	80079d4 <tcp_input+0x4c4>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8007880:	4b51      	ldr	r3, [pc, #324]	; (80079c8 <tcp_input+0x4b8>)
 8007882:	681b      	ldr	r3, [r3, #0]
 8007884:	61fb      	str	r3, [r7, #28]
 8007886:	e03f      	b.n	8007908 <tcp_input+0x3f8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8007888:	69fb      	ldr	r3, [r7, #28]
 800788a:	7d1b      	ldrb	r3, [r3, #20]
 800788c:	2b0a      	cmp	r3, #10
 800788e:	d006      	beq.n	800789e <tcp_input+0x38e>
 8007890:	4b48      	ldr	r3, [pc, #288]	; (80079b4 <tcp_input+0x4a4>)
 8007892:	f240 121f 	movw	r2, #287	; 0x11f
 8007896:	494d      	ldr	r1, [pc, #308]	; (80079cc <tcp_input+0x4bc>)
 8007898:	4848      	ldr	r0, [pc, #288]	; (80079bc <tcp_input+0x4ac>)
 800789a:	f006 fe2b 	bl	800e4f4 <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800789e:	69fb      	ldr	r3, [r7, #28]
 80078a0:	7a1b      	ldrb	r3, [r3, #8]
 80078a2:	2b00      	cmp	r3, #0
 80078a4:	d009      	beq.n	80078ba <tcp_input+0x3aa>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 80078a6:	69fb      	ldr	r3, [r7, #28]
 80078a8:	7a1a      	ldrb	r2, [r3, #8]
 80078aa:	4b41      	ldr	r3, [pc, #260]	; (80079b0 <tcp_input+0x4a0>)
 80078ac:	685b      	ldr	r3, [r3, #4]
 80078ae:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80078b2:	3301      	adds	r3, #1
 80078b4:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 80078b6:	429a      	cmp	r2, r3
 80078b8:	d122      	bne.n	8007900 <tcp_input+0x3f0>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 80078ba:	69fb      	ldr	r3, [r7, #28]
 80078bc:	8b1a      	ldrh	r2, [r3, #24]
 80078be:	4b3b      	ldr	r3, [pc, #236]	; (80079ac <tcp_input+0x49c>)
 80078c0:	681b      	ldr	r3, [r3, #0]
 80078c2:	881b      	ldrh	r3, [r3, #0]
 80078c4:	b29b      	uxth	r3, r3
 80078c6:	429a      	cmp	r2, r3
 80078c8:	d11b      	bne.n	8007902 <tcp_input+0x3f2>
          pcb->local_port == tcphdr->dest &&
 80078ca:	69fb      	ldr	r3, [r7, #28]
 80078cc:	8ada      	ldrh	r2, [r3, #22]
 80078ce:	4b37      	ldr	r3, [pc, #220]	; (80079ac <tcp_input+0x49c>)
 80078d0:	681b      	ldr	r3, [r3, #0]
 80078d2:	885b      	ldrh	r3, [r3, #2]
 80078d4:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 80078d6:	429a      	cmp	r2, r3
 80078d8:	d113      	bne.n	8007902 <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 80078da:	69fb      	ldr	r3, [r7, #28]
 80078dc:	685a      	ldr	r2, [r3, #4]
 80078de:	4b34      	ldr	r3, [pc, #208]	; (80079b0 <tcp_input+0x4a0>)
 80078e0:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 80078e2:	429a      	cmp	r2, r3
 80078e4:	d10d      	bne.n	8007902 <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 80078e6:	69fb      	ldr	r3, [r7, #28]
 80078e8:	681a      	ldr	r2, [r3, #0]
 80078ea:	4b31      	ldr	r3, [pc, #196]	; (80079b0 <tcp_input+0x4a0>)
 80078ec:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 80078ee:	429a      	cmp	r2, r3
 80078f0:	d107      	bne.n	8007902 <tcp_input+0x3f2>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 80078f2:	69f8      	ldr	r0, [r7, #28]
 80078f4:	f000 fb56 	bl	8007fa4 <tcp_timewait_input>
        }
        pbuf_free(p);
 80078f8:	6878      	ldr	r0, [r7, #4]
 80078fa:	f7fd ffd1 	bl	80058a0 <pbuf_free>
        return;
 80078fe:	e1fd      	b.n	8007cfc <tcp_input+0x7ec>
        continue;
 8007900:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8007902:	69fb      	ldr	r3, [r7, #28]
 8007904:	68db      	ldr	r3, [r3, #12]
 8007906:	61fb      	str	r3, [r7, #28]
 8007908:	69fb      	ldr	r3, [r7, #28]
 800790a:	2b00      	cmp	r3, #0
 800790c:	d1bc      	bne.n	8007888 <tcp_input+0x378>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 800790e:	2300      	movs	r3, #0
 8007910:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8007912:	4b2f      	ldr	r3, [pc, #188]	; (80079d0 <tcp_input+0x4c0>)
 8007914:	681b      	ldr	r3, [r3, #0]
 8007916:	617b      	str	r3, [r7, #20]
 8007918:	e02a      	b.n	8007970 <tcp_input+0x460>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800791a:	697b      	ldr	r3, [r7, #20]
 800791c:	7a1b      	ldrb	r3, [r3, #8]
 800791e:	2b00      	cmp	r3, #0
 8007920:	d00c      	beq.n	800793c <tcp_input+0x42c>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8007922:	697b      	ldr	r3, [r7, #20]
 8007924:	7a1a      	ldrb	r2, [r3, #8]
 8007926:	4b22      	ldr	r3, [pc, #136]	; (80079b0 <tcp_input+0x4a0>)
 8007928:	685b      	ldr	r3, [r3, #4]
 800792a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800792e:	3301      	adds	r3, #1
 8007930:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 8007932:	429a      	cmp	r2, r3
 8007934:	d002      	beq.n	800793c <tcp_input+0x42c>
        prev = (struct tcp_pcb *)lpcb;
 8007936:	697b      	ldr	r3, [r7, #20]
 8007938:	61bb      	str	r3, [r7, #24]
        continue;
 800793a:	e016      	b.n	800796a <tcp_input+0x45a>
      }

      if (lpcb->local_port == tcphdr->dest) {
 800793c:	697b      	ldr	r3, [r7, #20]
 800793e:	8ada      	ldrh	r2, [r3, #22]
 8007940:	4b1a      	ldr	r3, [pc, #104]	; (80079ac <tcp_input+0x49c>)
 8007942:	681b      	ldr	r3, [r3, #0]
 8007944:	885b      	ldrh	r3, [r3, #2]
 8007946:	b29b      	uxth	r3, r3
 8007948:	429a      	cmp	r2, r3
 800794a:	d10c      	bne.n	8007966 <tcp_input+0x456>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 800794c:	697b      	ldr	r3, [r7, #20]
 800794e:	681a      	ldr	r2, [r3, #0]
 8007950:	4b17      	ldr	r3, [pc, #92]	; (80079b0 <tcp_input+0x4a0>)
 8007952:	695b      	ldr	r3, [r3, #20]
 8007954:	429a      	cmp	r2, r3
 8007956:	d00f      	beq.n	8007978 <tcp_input+0x468>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 8007958:	697b      	ldr	r3, [r7, #20]
 800795a:	2b00      	cmp	r3, #0
 800795c:	d00d      	beq.n	800797a <tcp_input+0x46a>
 800795e:	697b      	ldr	r3, [r7, #20]
 8007960:	681b      	ldr	r3, [r3, #0]
 8007962:	2b00      	cmp	r3, #0
 8007964:	d009      	beq.n	800797a <tcp_input+0x46a>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 8007966:	697b      	ldr	r3, [r7, #20]
 8007968:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800796a:	697b      	ldr	r3, [r7, #20]
 800796c:	68db      	ldr	r3, [r3, #12]
 800796e:	617b      	str	r3, [r7, #20]
 8007970:	697b      	ldr	r3, [r7, #20]
 8007972:	2b00      	cmp	r3, #0
 8007974:	d1d1      	bne.n	800791a <tcp_input+0x40a>
 8007976:	e000      	b.n	800797a <tcp_input+0x46a>
            break;
 8007978:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 800797a:	697b      	ldr	r3, [r7, #20]
 800797c:	2b00      	cmp	r3, #0
 800797e:	d029      	beq.n	80079d4 <tcp_input+0x4c4>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 8007980:	69bb      	ldr	r3, [r7, #24]
 8007982:	2b00      	cmp	r3, #0
 8007984:	d00a      	beq.n	800799c <tcp_input+0x48c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 8007986:	697b      	ldr	r3, [r7, #20]
 8007988:	68da      	ldr	r2, [r3, #12]
 800798a:	69bb      	ldr	r3, [r7, #24]
 800798c:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 800798e:	4b10      	ldr	r3, [pc, #64]	; (80079d0 <tcp_input+0x4c0>)
 8007990:	681a      	ldr	r2, [r3, #0]
 8007992:	697b      	ldr	r3, [r7, #20]
 8007994:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 8007996:	4a0e      	ldr	r2, [pc, #56]	; (80079d0 <tcp_input+0x4c0>)
 8007998:	697b      	ldr	r3, [r7, #20]
 800799a:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 800799c:	6978      	ldr	r0, [r7, #20]
 800799e:	f000 fa03 	bl	8007da8 <tcp_listen_input>
      }
      pbuf_free(p);
 80079a2:	6878      	ldr	r0, [r7, #4]
 80079a4:	f7fd ff7c 	bl	80058a0 <pbuf_free>
      return;
 80079a8:	e1a8      	b.n	8007cfc <tcp_input+0x7ec>
 80079aa:	bf00      	nop
 80079ac:	200082a8 	.word	0x200082a8
 80079b0:	20004d10 	.word	0x20004d10
 80079b4:	0801061c 	.word	0x0801061c
 80079b8:	08010748 	.word	0x08010748
 80079bc:	08010668 	.word	0x08010668
 80079c0:	2000828c 	.word	0x2000828c
 80079c4:	08010774 	.word	0x08010774
 80079c8:	20008290 	.word	0x20008290
 80079cc:	080107a0 	.word	0x080107a0
 80079d0:	20008288 	.word	0x20008288
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 80079d4:	69fb      	ldr	r3, [r7, #28]
 80079d6:	2b00      	cmp	r3, #0
 80079d8:	f000 8158 	beq.w	8007c8c <tcp_input+0x77c>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 80079dc:	4b95      	ldr	r3, [pc, #596]	; (8007c34 <tcp_input+0x724>)
 80079de:	2200      	movs	r2, #0
 80079e0:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	891a      	ldrh	r2, [r3, #8]
 80079e6:	4b93      	ldr	r3, [pc, #588]	; (8007c34 <tcp_input+0x724>)
 80079e8:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 80079ea:	4a92      	ldr	r2, [pc, #584]	; (8007c34 <tcp_input+0x724>)
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 80079f0:	4b91      	ldr	r3, [pc, #580]	; (8007c38 <tcp_input+0x728>)
 80079f2:	681b      	ldr	r3, [r3, #0]
 80079f4:	4a8f      	ldr	r2, [pc, #572]	; (8007c34 <tcp_input+0x724>)
 80079f6:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 80079f8:	4b90      	ldr	r3, [pc, #576]	; (8007c3c <tcp_input+0x72c>)
 80079fa:	2200      	movs	r2, #0
 80079fc:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 80079fe:	4b90      	ldr	r3, [pc, #576]	; (8007c40 <tcp_input+0x730>)
 8007a00:	2200      	movs	r2, #0
 8007a02:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 8007a04:	4b8f      	ldr	r3, [pc, #572]	; (8007c44 <tcp_input+0x734>)
 8007a06:	2200      	movs	r2, #0
 8007a08:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 8007a0a:	4b8f      	ldr	r3, [pc, #572]	; (8007c48 <tcp_input+0x738>)
 8007a0c:	781b      	ldrb	r3, [r3, #0]
 8007a0e:	f003 0308 	and.w	r3, r3, #8
 8007a12:	2b00      	cmp	r3, #0
 8007a14:	d006      	beq.n	8007a24 <tcp_input+0x514>
      p->flags |= PBUF_FLAG_PUSH;
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	7b5b      	ldrb	r3, [r3, #13]
 8007a1a:	f043 0301 	orr.w	r3, r3, #1
 8007a1e:	b2da      	uxtb	r2, r3
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 8007a24:	69fb      	ldr	r3, [r7, #28]
 8007a26:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007a28:	2b00      	cmp	r3, #0
 8007a2a:	d017      	beq.n	8007a5c <tcp_input+0x54c>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 8007a2c:	69f8      	ldr	r0, [r7, #28]
 8007a2e:	f7ff f929 	bl	8006c84 <tcp_process_refused_data>
 8007a32:	4603      	mov	r3, r0
 8007a34:	f113 0f0d 	cmn.w	r3, #13
 8007a38:	d007      	beq.n	8007a4a <tcp_input+0x53a>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 8007a3a:	69fb      	ldr	r3, [r7, #28]
 8007a3c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 8007a3e:	2b00      	cmp	r3, #0
 8007a40:	d00c      	beq.n	8007a5c <tcp_input+0x54c>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 8007a42:	4b82      	ldr	r3, [pc, #520]	; (8007c4c <tcp_input+0x73c>)
 8007a44:	881b      	ldrh	r3, [r3, #0]
 8007a46:	2b00      	cmp	r3, #0
 8007a48:	d008      	beq.n	8007a5c <tcp_input+0x54c>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 8007a4a:	69fb      	ldr	r3, [r7, #28]
 8007a4c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007a4e:	2b00      	cmp	r3, #0
 8007a50:	f040 80e3 	bne.w	8007c1a <tcp_input+0x70a>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 8007a54:	69f8      	ldr	r0, [r7, #28]
 8007a56:	f003 f9ad 	bl	800adb4 <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 8007a5a:	e0de      	b.n	8007c1a <tcp_input+0x70a>
      }
    }
    tcp_input_pcb = pcb;
 8007a5c:	4a7c      	ldr	r2, [pc, #496]	; (8007c50 <tcp_input+0x740>)
 8007a5e:	69fb      	ldr	r3, [r7, #28]
 8007a60:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 8007a62:	69f8      	ldr	r0, [r7, #28]
 8007a64:	f000 fb18 	bl	8008098 <tcp_process>
 8007a68:	4603      	mov	r3, r0
 8007a6a:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 8007a6c:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8007a70:	f113 0f0d 	cmn.w	r3, #13
 8007a74:	f000 80d3 	beq.w	8007c1e <tcp_input+0x70e>
      if (recv_flags & TF_RESET) {
 8007a78:	4b71      	ldr	r3, [pc, #452]	; (8007c40 <tcp_input+0x730>)
 8007a7a:	781b      	ldrb	r3, [r3, #0]
 8007a7c:	f003 0308 	and.w	r3, r3, #8
 8007a80:	2b00      	cmp	r3, #0
 8007a82:	d015      	beq.n	8007ab0 <tcp_input+0x5a0>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 8007a84:	69fb      	ldr	r3, [r7, #28]
 8007a86:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007a8a:	2b00      	cmp	r3, #0
 8007a8c:	d008      	beq.n	8007aa0 <tcp_input+0x590>
 8007a8e:	69fb      	ldr	r3, [r7, #28]
 8007a90:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007a94:	69fa      	ldr	r2, [r7, #28]
 8007a96:	6912      	ldr	r2, [r2, #16]
 8007a98:	f06f 010d 	mvn.w	r1, #13
 8007a9c:	4610      	mov	r0, r2
 8007a9e:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 8007aa0:	69f9      	ldr	r1, [r7, #28]
 8007aa2:	486c      	ldr	r0, [pc, #432]	; (8007c54 <tcp_input+0x744>)
 8007aa4:	f7ff fbbc 	bl	8007220 <tcp_pcb_remove>
        tcp_free(pcb);
 8007aa8:	69f8      	ldr	r0, [r7, #28]
 8007aaa:	f7fe f9a9 	bl	8005e00 <tcp_free>
 8007aae:	e0da      	b.n	8007c66 <tcp_input+0x756>
      } else {
        err = ERR_OK;
 8007ab0:	2300      	movs	r3, #0
 8007ab2:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 8007ab4:	4b63      	ldr	r3, [pc, #396]	; (8007c44 <tcp_input+0x734>)
 8007ab6:	881b      	ldrh	r3, [r3, #0]
 8007ab8:	2b00      	cmp	r3, #0
 8007aba:	d01d      	beq.n	8007af8 <tcp_input+0x5e8>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 8007abc:	4b61      	ldr	r3, [pc, #388]	; (8007c44 <tcp_input+0x734>)
 8007abe:	881b      	ldrh	r3, [r3, #0]
 8007ac0:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 8007ac2:	69fb      	ldr	r3, [r7, #28]
 8007ac4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007ac8:	2b00      	cmp	r3, #0
 8007aca:	d00a      	beq.n	8007ae2 <tcp_input+0x5d2>
 8007acc:	69fb      	ldr	r3, [r7, #28]
 8007ace:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007ad2:	69fa      	ldr	r2, [r7, #28]
 8007ad4:	6910      	ldr	r0, [r2, #16]
 8007ad6:	89fa      	ldrh	r2, [r7, #14]
 8007ad8:	69f9      	ldr	r1, [r7, #28]
 8007ada:	4798      	blx	r3
 8007adc:	4603      	mov	r3, r0
 8007ade:	74fb      	strb	r3, [r7, #19]
 8007ae0:	e001      	b.n	8007ae6 <tcp_input+0x5d6>
 8007ae2:	2300      	movs	r3, #0
 8007ae4:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 8007ae6:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8007aea:	f113 0f0d 	cmn.w	r3, #13
 8007aee:	f000 8098 	beq.w	8007c22 <tcp_input+0x712>
              goto aborted;
            }
          }
          recv_acked = 0;
 8007af2:	4b54      	ldr	r3, [pc, #336]	; (8007c44 <tcp_input+0x734>)
 8007af4:	2200      	movs	r2, #0
 8007af6:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 8007af8:	69f8      	ldr	r0, [r7, #28]
 8007afa:	f000 f915 	bl	8007d28 <tcp_input_delayed_close>
 8007afe:	4603      	mov	r3, r0
 8007b00:	2b00      	cmp	r3, #0
 8007b02:	f040 8090 	bne.w	8007c26 <tcp_input+0x716>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 8007b06:	4b4d      	ldr	r3, [pc, #308]	; (8007c3c <tcp_input+0x72c>)
 8007b08:	681b      	ldr	r3, [r3, #0]
 8007b0a:	2b00      	cmp	r3, #0
 8007b0c:	d041      	beq.n	8007b92 <tcp_input+0x682>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 8007b0e:	69fb      	ldr	r3, [r7, #28]
 8007b10:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007b12:	2b00      	cmp	r3, #0
 8007b14:	d006      	beq.n	8007b24 <tcp_input+0x614>
 8007b16:	4b50      	ldr	r3, [pc, #320]	; (8007c58 <tcp_input+0x748>)
 8007b18:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 8007b1c:	494f      	ldr	r1, [pc, #316]	; (8007c5c <tcp_input+0x74c>)
 8007b1e:	4850      	ldr	r0, [pc, #320]	; (8007c60 <tcp_input+0x750>)
 8007b20:	f006 fce8 	bl	800e4f4 <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 8007b24:	69fb      	ldr	r3, [r7, #28]
 8007b26:	8b5b      	ldrh	r3, [r3, #26]
 8007b28:	f003 0310 	and.w	r3, r3, #16
 8007b2c:	2b00      	cmp	r3, #0
 8007b2e:	d008      	beq.n	8007b42 <tcp_input+0x632>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 8007b30:	4b42      	ldr	r3, [pc, #264]	; (8007c3c <tcp_input+0x72c>)
 8007b32:	681b      	ldr	r3, [r3, #0]
 8007b34:	4618      	mov	r0, r3
 8007b36:	f7fd feb3 	bl	80058a0 <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 8007b3a:	69f8      	ldr	r0, [r7, #28]
 8007b3c:	f7fe fc48 	bl	80063d0 <tcp_abort>
            goto aborted;
 8007b40:	e091      	b.n	8007c66 <tcp_input+0x756>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 8007b42:	69fb      	ldr	r3, [r7, #28]
 8007b44:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007b48:	2b00      	cmp	r3, #0
 8007b4a:	d00c      	beq.n	8007b66 <tcp_input+0x656>
 8007b4c:	69fb      	ldr	r3, [r7, #28]
 8007b4e:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8007b52:	69fb      	ldr	r3, [r7, #28]
 8007b54:	6918      	ldr	r0, [r3, #16]
 8007b56:	4b39      	ldr	r3, [pc, #228]	; (8007c3c <tcp_input+0x72c>)
 8007b58:	681a      	ldr	r2, [r3, #0]
 8007b5a:	2300      	movs	r3, #0
 8007b5c:	69f9      	ldr	r1, [r7, #28]
 8007b5e:	47a0      	blx	r4
 8007b60:	4603      	mov	r3, r0
 8007b62:	74fb      	strb	r3, [r7, #19]
 8007b64:	e008      	b.n	8007b78 <tcp_input+0x668>
 8007b66:	4b35      	ldr	r3, [pc, #212]	; (8007c3c <tcp_input+0x72c>)
 8007b68:	681a      	ldr	r2, [r3, #0]
 8007b6a:	2300      	movs	r3, #0
 8007b6c:	69f9      	ldr	r1, [r7, #28]
 8007b6e:	2000      	movs	r0, #0
 8007b70:	f7ff f95e 	bl	8006e30 <tcp_recv_null>
 8007b74:	4603      	mov	r3, r0
 8007b76:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 8007b78:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8007b7c:	f113 0f0d 	cmn.w	r3, #13
 8007b80:	d053      	beq.n	8007c2a <tcp_input+0x71a>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 8007b82:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8007b86:	2b00      	cmp	r3, #0
 8007b88:	d003      	beq.n	8007b92 <tcp_input+0x682>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 8007b8a:	4b2c      	ldr	r3, [pc, #176]	; (8007c3c <tcp_input+0x72c>)
 8007b8c:	681a      	ldr	r2, [r3, #0]
 8007b8e:	69fb      	ldr	r3, [r7, #28]
 8007b90:	679a      	str	r2, [r3, #120]	; 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 8007b92:	4b2b      	ldr	r3, [pc, #172]	; (8007c40 <tcp_input+0x730>)
 8007b94:	781b      	ldrb	r3, [r3, #0]
 8007b96:	f003 0320 	and.w	r3, r3, #32
 8007b9a:	2b00      	cmp	r3, #0
 8007b9c:	d030      	beq.n	8007c00 <tcp_input+0x6f0>
          if (pcb->refused_data != NULL) {
 8007b9e:	69fb      	ldr	r3, [r7, #28]
 8007ba0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007ba2:	2b00      	cmp	r3, #0
 8007ba4:	d009      	beq.n	8007bba <tcp_input+0x6aa>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 8007ba6:	69fb      	ldr	r3, [r7, #28]
 8007ba8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007baa:	7b5a      	ldrb	r2, [r3, #13]
 8007bac:	69fb      	ldr	r3, [r7, #28]
 8007bae:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007bb0:	f042 0220 	orr.w	r2, r2, #32
 8007bb4:	b2d2      	uxtb	r2, r2
 8007bb6:	735a      	strb	r2, [r3, #13]
 8007bb8:	e022      	b.n	8007c00 <tcp_input+0x6f0>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 8007bba:	69fb      	ldr	r3, [r7, #28]
 8007bbc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007bbe:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8007bc2:	d005      	beq.n	8007bd0 <tcp_input+0x6c0>
              pcb->rcv_wnd++;
 8007bc4:	69fb      	ldr	r3, [r7, #28]
 8007bc6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007bc8:	3301      	adds	r3, #1
 8007bca:	b29a      	uxth	r2, r3
 8007bcc:	69fb      	ldr	r3, [r7, #28]
 8007bce:	851a      	strh	r2, [r3, #40]	; 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 8007bd0:	69fb      	ldr	r3, [r7, #28]
 8007bd2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007bd6:	2b00      	cmp	r3, #0
 8007bd8:	d00b      	beq.n	8007bf2 <tcp_input+0x6e2>
 8007bda:	69fb      	ldr	r3, [r7, #28]
 8007bdc:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8007be0:	69fb      	ldr	r3, [r7, #28]
 8007be2:	6918      	ldr	r0, [r3, #16]
 8007be4:	2300      	movs	r3, #0
 8007be6:	2200      	movs	r2, #0
 8007be8:	69f9      	ldr	r1, [r7, #28]
 8007bea:	47a0      	blx	r4
 8007bec:	4603      	mov	r3, r0
 8007bee:	74fb      	strb	r3, [r7, #19]
 8007bf0:	e001      	b.n	8007bf6 <tcp_input+0x6e6>
 8007bf2:	2300      	movs	r3, #0
 8007bf4:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 8007bf6:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8007bfa:	f113 0f0d 	cmn.w	r3, #13
 8007bfe:	d016      	beq.n	8007c2e <tcp_input+0x71e>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 8007c00:	4b13      	ldr	r3, [pc, #76]	; (8007c50 <tcp_input+0x740>)
 8007c02:	2200      	movs	r2, #0
 8007c04:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 8007c06:	69f8      	ldr	r0, [r7, #28]
 8007c08:	f000 f88e 	bl	8007d28 <tcp_input_delayed_close>
 8007c0c:	4603      	mov	r3, r0
 8007c0e:	2b00      	cmp	r3, #0
 8007c10:	d128      	bne.n	8007c64 <tcp_input+0x754>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 8007c12:	69f8      	ldr	r0, [r7, #28]
 8007c14:	f002 fac8 	bl	800a1a8 <tcp_output>
 8007c18:	e025      	b.n	8007c66 <tcp_input+0x756>
        goto aborted;
 8007c1a:	bf00      	nop
 8007c1c:	e023      	b.n	8007c66 <tcp_input+0x756>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 8007c1e:	bf00      	nop
 8007c20:	e021      	b.n	8007c66 <tcp_input+0x756>
              goto aborted;
 8007c22:	bf00      	nop
 8007c24:	e01f      	b.n	8007c66 <tcp_input+0x756>
          goto aborted;
 8007c26:	bf00      	nop
 8007c28:	e01d      	b.n	8007c66 <tcp_input+0x756>
            goto aborted;
 8007c2a:	bf00      	nop
 8007c2c:	e01b      	b.n	8007c66 <tcp_input+0x756>
              goto aborted;
 8007c2e:	bf00      	nop
 8007c30:	e019      	b.n	8007c66 <tcp_input+0x756>
 8007c32:	bf00      	nop
 8007c34:	20008298 	.word	0x20008298
 8007c38:	200082a8 	.word	0x200082a8
 8007c3c:	200082c8 	.word	0x200082c8
 8007c40:	200082c5 	.word	0x200082c5
 8007c44:	200082c0 	.word	0x200082c0
 8007c48:	200082c4 	.word	0x200082c4
 8007c4c:	200082c2 	.word	0x200082c2
 8007c50:	200082cc 	.word	0x200082cc
 8007c54:	2000828c 	.word	0x2000828c
 8007c58:	0801061c 	.word	0x0801061c
 8007c5c:	080107d0 	.word	0x080107d0
 8007c60:	08010668 	.word	0x08010668
          goto aborted;
 8007c64:	bf00      	nop
    tcp_input_pcb = NULL;
 8007c66:	4b27      	ldr	r3, [pc, #156]	; (8007d04 <tcp_input+0x7f4>)
 8007c68:	2200      	movs	r2, #0
 8007c6a:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 8007c6c:	4b26      	ldr	r3, [pc, #152]	; (8007d08 <tcp_input+0x7f8>)
 8007c6e:	2200      	movs	r2, #0
 8007c70:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 8007c72:	4b26      	ldr	r3, [pc, #152]	; (8007d0c <tcp_input+0x7fc>)
 8007c74:	685b      	ldr	r3, [r3, #4]
 8007c76:	2b00      	cmp	r3, #0
 8007c78:	d03f      	beq.n	8007cfa <tcp_input+0x7ea>
      pbuf_free(inseg.p);
 8007c7a:	4b24      	ldr	r3, [pc, #144]	; (8007d0c <tcp_input+0x7fc>)
 8007c7c:	685b      	ldr	r3, [r3, #4]
 8007c7e:	4618      	mov	r0, r3
 8007c80:	f7fd fe0e 	bl	80058a0 <pbuf_free>
      inseg.p = NULL;
 8007c84:	4b21      	ldr	r3, [pc, #132]	; (8007d0c <tcp_input+0x7fc>)
 8007c86:	2200      	movs	r2, #0
 8007c88:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 8007c8a:	e036      	b.n	8007cfa <tcp_input+0x7ea>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 8007c8c:	4b20      	ldr	r3, [pc, #128]	; (8007d10 <tcp_input+0x800>)
 8007c8e:	681b      	ldr	r3, [r3, #0]
 8007c90:	899b      	ldrh	r3, [r3, #12]
 8007c92:	b29b      	uxth	r3, r3
 8007c94:	4618      	mov	r0, r3
 8007c96:	f7fc faa5 	bl	80041e4 <lwip_htons>
 8007c9a:	4603      	mov	r3, r0
 8007c9c:	b2db      	uxtb	r3, r3
 8007c9e:	f003 0304 	and.w	r3, r3, #4
 8007ca2:	2b00      	cmp	r3, #0
 8007ca4:	d118      	bne.n	8007cd8 <tcp_input+0x7c8>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8007ca6:	4b1b      	ldr	r3, [pc, #108]	; (8007d14 <tcp_input+0x804>)
 8007ca8:	6819      	ldr	r1, [r3, #0]
 8007caa:	4b1b      	ldr	r3, [pc, #108]	; (8007d18 <tcp_input+0x808>)
 8007cac:	881b      	ldrh	r3, [r3, #0]
 8007cae:	461a      	mov	r2, r3
 8007cb0:	4b1a      	ldr	r3, [pc, #104]	; (8007d1c <tcp_input+0x80c>)
 8007cb2:	681b      	ldr	r3, [r3, #0]
 8007cb4:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8007cb6:	4b16      	ldr	r3, [pc, #88]	; (8007d10 <tcp_input+0x800>)
 8007cb8:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8007cba:	885b      	ldrh	r3, [r3, #2]
 8007cbc:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8007cbe:	4a14      	ldr	r2, [pc, #80]	; (8007d10 <tcp_input+0x800>)
 8007cc0:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8007cc2:	8812      	ldrh	r2, [r2, #0]
 8007cc4:	b292      	uxth	r2, r2
 8007cc6:	9202      	str	r2, [sp, #8]
 8007cc8:	9301      	str	r3, [sp, #4]
 8007cca:	4b15      	ldr	r3, [pc, #84]	; (8007d20 <tcp_input+0x810>)
 8007ccc:	9300      	str	r3, [sp, #0]
 8007cce:	4b15      	ldr	r3, [pc, #84]	; (8007d24 <tcp_input+0x814>)
 8007cd0:	4602      	mov	r2, r0
 8007cd2:	2000      	movs	r0, #0
 8007cd4:	f003 f81c 	bl	800ad10 <tcp_rst>
    pbuf_free(p);
 8007cd8:	6878      	ldr	r0, [r7, #4]
 8007cda:	f7fd fde1 	bl	80058a0 <pbuf_free>
  return;
 8007cde:	e00c      	b.n	8007cfa <tcp_input+0x7ea>
    goto dropped;
 8007ce0:	bf00      	nop
 8007ce2:	e006      	b.n	8007cf2 <tcp_input+0x7e2>
    goto dropped;
 8007ce4:	bf00      	nop
 8007ce6:	e004      	b.n	8007cf2 <tcp_input+0x7e2>
    goto dropped;
 8007ce8:	bf00      	nop
 8007cea:	e002      	b.n	8007cf2 <tcp_input+0x7e2>
      goto dropped;
 8007cec:	bf00      	nop
 8007cee:	e000      	b.n	8007cf2 <tcp_input+0x7e2>
      goto dropped;
 8007cf0:	bf00      	nop
dropped:
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 8007cf2:	6878      	ldr	r0, [r7, #4]
 8007cf4:	f7fd fdd4 	bl	80058a0 <pbuf_free>
 8007cf8:	e000      	b.n	8007cfc <tcp_input+0x7ec>
  return;
 8007cfa:	bf00      	nop
}
 8007cfc:	3724      	adds	r7, #36	; 0x24
 8007cfe:	46bd      	mov	sp, r7
 8007d00:	bd90      	pop	{r4, r7, pc}
 8007d02:	bf00      	nop
 8007d04:	200082cc 	.word	0x200082cc
 8007d08:	200082c8 	.word	0x200082c8
 8007d0c:	20008298 	.word	0x20008298
 8007d10:	200082a8 	.word	0x200082a8
 8007d14:	200082bc 	.word	0x200082bc
 8007d18:	200082c2 	.word	0x200082c2
 8007d1c:	200082b8 	.word	0x200082b8
 8007d20:	20004d20 	.word	0x20004d20
 8007d24:	20004d24 	.word	0x20004d24

08007d28 <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 8007d28:	b580      	push	{r7, lr}
 8007d2a:	b082      	sub	sp, #8
 8007d2c:	af00      	add	r7, sp, #0
 8007d2e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	2b00      	cmp	r3, #0
 8007d34:	d106      	bne.n	8007d44 <tcp_input_delayed_close+0x1c>
 8007d36:	4b17      	ldr	r3, [pc, #92]	; (8007d94 <tcp_input_delayed_close+0x6c>)
 8007d38:	f240 225a 	movw	r2, #602	; 0x25a
 8007d3c:	4916      	ldr	r1, [pc, #88]	; (8007d98 <tcp_input_delayed_close+0x70>)
 8007d3e:	4817      	ldr	r0, [pc, #92]	; (8007d9c <tcp_input_delayed_close+0x74>)
 8007d40:	f006 fbd8 	bl	800e4f4 <iprintf>

  if (recv_flags & TF_CLOSED) {
 8007d44:	4b16      	ldr	r3, [pc, #88]	; (8007da0 <tcp_input_delayed_close+0x78>)
 8007d46:	781b      	ldrb	r3, [r3, #0]
 8007d48:	f003 0310 	and.w	r3, r3, #16
 8007d4c:	2b00      	cmp	r3, #0
 8007d4e:	d01c      	beq.n	8007d8a <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	8b5b      	ldrh	r3, [r3, #26]
 8007d54:	f003 0310 	and.w	r3, r3, #16
 8007d58:	2b00      	cmp	r3, #0
 8007d5a:	d10d      	bne.n	8007d78 <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007d62:	2b00      	cmp	r3, #0
 8007d64:	d008      	beq.n	8007d78 <tcp_input_delayed_close+0x50>
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007d6c:	687a      	ldr	r2, [r7, #4]
 8007d6e:	6912      	ldr	r2, [r2, #16]
 8007d70:	f06f 010e 	mvn.w	r1, #14
 8007d74:	4610      	mov	r0, r2
 8007d76:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 8007d78:	6879      	ldr	r1, [r7, #4]
 8007d7a:	480a      	ldr	r0, [pc, #40]	; (8007da4 <tcp_input_delayed_close+0x7c>)
 8007d7c:	f7ff fa50 	bl	8007220 <tcp_pcb_remove>
    tcp_free(pcb);
 8007d80:	6878      	ldr	r0, [r7, #4]
 8007d82:	f7fe f83d 	bl	8005e00 <tcp_free>
    return 1;
 8007d86:	2301      	movs	r3, #1
 8007d88:	e000      	b.n	8007d8c <tcp_input_delayed_close+0x64>
  }
  return 0;
 8007d8a:	2300      	movs	r3, #0
}
 8007d8c:	4618      	mov	r0, r3
 8007d8e:	3708      	adds	r7, #8
 8007d90:	46bd      	mov	sp, r7
 8007d92:	bd80      	pop	{r7, pc}
 8007d94:	0801061c 	.word	0x0801061c
 8007d98:	080107ec 	.word	0x080107ec
 8007d9c:	08010668 	.word	0x08010668
 8007da0:	200082c5 	.word	0x200082c5
 8007da4:	2000828c 	.word	0x2000828c

08007da8 <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 8007da8:	b590      	push	{r4, r7, lr}
 8007daa:	b08b      	sub	sp, #44	; 0x2c
 8007dac:	af04      	add	r7, sp, #16
 8007dae:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 8007db0:	4b6f      	ldr	r3, [pc, #444]	; (8007f70 <tcp_listen_input+0x1c8>)
 8007db2:	781b      	ldrb	r3, [r3, #0]
 8007db4:	f003 0304 	and.w	r3, r3, #4
 8007db8:	2b00      	cmp	r3, #0
 8007dba:	f040 80d2 	bne.w	8007f62 <tcp_listen_input+0x1ba>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	2b00      	cmp	r3, #0
 8007dc2:	d106      	bne.n	8007dd2 <tcp_listen_input+0x2a>
 8007dc4:	4b6b      	ldr	r3, [pc, #428]	; (8007f74 <tcp_listen_input+0x1cc>)
 8007dc6:	f240 2281 	movw	r2, #641	; 0x281
 8007dca:	496b      	ldr	r1, [pc, #428]	; (8007f78 <tcp_listen_input+0x1d0>)
 8007dcc:	486b      	ldr	r0, [pc, #428]	; (8007f7c <tcp_listen_input+0x1d4>)
 8007dce:	f006 fb91 	bl	800e4f4 <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 8007dd2:	4b67      	ldr	r3, [pc, #412]	; (8007f70 <tcp_listen_input+0x1c8>)
 8007dd4:	781b      	ldrb	r3, [r3, #0]
 8007dd6:	f003 0310 	and.w	r3, r3, #16
 8007dda:	2b00      	cmp	r3, #0
 8007ddc:	d019      	beq.n	8007e12 <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8007dde:	4b68      	ldr	r3, [pc, #416]	; (8007f80 <tcp_listen_input+0x1d8>)
 8007de0:	6819      	ldr	r1, [r3, #0]
 8007de2:	4b68      	ldr	r3, [pc, #416]	; (8007f84 <tcp_listen_input+0x1dc>)
 8007de4:	881b      	ldrh	r3, [r3, #0]
 8007de6:	461a      	mov	r2, r3
 8007de8:	4b67      	ldr	r3, [pc, #412]	; (8007f88 <tcp_listen_input+0x1e0>)
 8007dea:	681b      	ldr	r3, [r3, #0]
 8007dec:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8007dee:	4b67      	ldr	r3, [pc, #412]	; (8007f8c <tcp_listen_input+0x1e4>)
 8007df0:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8007df2:	885b      	ldrh	r3, [r3, #2]
 8007df4:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8007df6:	4a65      	ldr	r2, [pc, #404]	; (8007f8c <tcp_listen_input+0x1e4>)
 8007df8:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8007dfa:	8812      	ldrh	r2, [r2, #0]
 8007dfc:	b292      	uxth	r2, r2
 8007dfe:	9202      	str	r2, [sp, #8]
 8007e00:	9301      	str	r3, [sp, #4]
 8007e02:	4b63      	ldr	r3, [pc, #396]	; (8007f90 <tcp_listen_input+0x1e8>)
 8007e04:	9300      	str	r3, [sp, #0]
 8007e06:	4b63      	ldr	r3, [pc, #396]	; (8007f94 <tcp_listen_input+0x1ec>)
 8007e08:	4602      	mov	r2, r0
 8007e0a:	6878      	ldr	r0, [r7, #4]
 8007e0c:	f002 ff80 	bl	800ad10 <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 8007e10:	e0a9      	b.n	8007f66 <tcp_listen_input+0x1be>
  } else if (flags & TCP_SYN) {
 8007e12:	4b57      	ldr	r3, [pc, #348]	; (8007f70 <tcp_listen_input+0x1c8>)
 8007e14:	781b      	ldrb	r3, [r3, #0]
 8007e16:	f003 0302 	and.w	r3, r3, #2
 8007e1a:	2b00      	cmp	r3, #0
 8007e1c:	f000 80a3 	beq.w	8007f66 <tcp_listen_input+0x1be>
    npcb = tcp_alloc(pcb->prio);
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	7d5b      	ldrb	r3, [r3, #21]
 8007e24:	4618      	mov	r0, r3
 8007e26:	f7ff f927 	bl	8007078 <tcp_alloc>
 8007e2a:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 8007e2c:	697b      	ldr	r3, [r7, #20]
 8007e2e:	2b00      	cmp	r3, #0
 8007e30:	d111      	bne.n	8007e56 <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	699b      	ldr	r3, [r3, #24]
 8007e36:	2b00      	cmp	r3, #0
 8007e38:	d00a      	beq.n	8007e50 <tcp_listen_input+0xa8>
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	699b      	ldr	r3, [r3, #24]
 8007e3e:	687a      	ldr	r2, [r7, #4]
 8007e40:	6910      	ldr	r0, [r2, #16]
 8007e42:	f04f 32ff 	mov.w	r2, #4294967295
 8007e46:	2100      	movs	r1, #0
 8007e48:	4798      	blx	r3
 8007e4a:	4603      	mov	r3, r0
 8007e4c:	73bb      	strb	r3, [r7, #14]
      return;
 8007e4e:	e08b      	b.n	8007f68 <tcp_listen_input+0x1c0>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 8007e50:	23f0      	movs	r3, #240	; 0xf0
 8007e52:	73bb      	strb	r3, [r7, #14]
      return;
 8007e54:	e088      	b.n	8007f68 <tcp_listen_input+0x1c0>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 8007e56:	4b50      	ldr	r3, [pc, #320]	; (8007f98 <tcp_listen_input+0x1f0>)
 8007e58:	695a      	ldr	r2, [r3, #20]
 8007e5a:	697b      	ldr	r3, [r7, #20]
 8007e5c:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 8007e5e:	4b4e      	ldr	r3, [pc, #312]	; (8007f98 <tcp_listen_input+0x1f0>)
 8007e60:	691a      	ldr	r2, [r3, #16]
 8007e62:	697b      	ldr	r3, [r7, #20]
 8007e64:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	8ada      	ldrh	r2, [r3, #22]
 8007e6a:	697b      	ldr	r3, [r7, #20]
 8007e6c:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 8007e6e:	4b47      	ldr	r3, [pc, #284]	; (8007f8c <tcp_listen_input+0x1e4>)
 8007e70:	681b      	ldr	r3, [r3, #0]
 8007e72:	881b      	ldrh	r3, [r3, #0]
 8007e74:	b29a      	uxth	r2, r3
 8007e76:	697b      	ldr	r3, [r7, #20]
 8007e78:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 8007e7a:	697b      	ldr	r3, [r7, #20]
 8007e7c:	2203      	movs	r2, #3
 8007e7e:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 8007e80:	4b41      	ldr	r3, [pc, #260]	; (8007f88 <tcp_listen_input+0x1e0>)
 8007e82:	681b      	ldr	r3, [r3, #0]
 8007e84:	1c5a      	adds	r2, r3, #1
 8007e86:	697b      	ldr	r3, [r7, #20]
 8007e88:	625a      	str	r2, [r3, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 8007e8a:	697b      	ldr	r3, [r7, #20]
 8007e8c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007e8e:	697b      	ldr	r3, [r7, #20]
 8007e90:	62da      	str	r2, [r3, #44]	; 0x2c
    iss = tcp_next_iss(npcb);
 8007e92:	6978      	ldr	r0, [r7, #20]
 8007e94:	f7ff fa58 	bl	8007348 <tcp_next_iss>
 8007e98:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 8007e9a:	697b      	ldr	r3, [r7, #20]
 8007e9c:	693a      	ldr	r2, [r7, #16]
 8007e9e:	659a      	str	r2, [r3, #88]	; 0x58
    npcb->snd_nxt = iss;
 8007ea0:	697b      	ldr	r3, [r7, #20]
 8007ea2:	693a      	ldr	r2, [r7, #16]
 8007ea4:	651a      	str	r2, [r3, #80]	; 0x50
    npcb->lastack = iss;
 8007ea6:	697b      	ldr	r3, [r7, #20]
 8007ea8:	693a      	ldr	r2, [r7, #16]
 8007eaa:	645a      	str	r2, [r3, #68]	; 0x44
    npcb->snd_lbb = iss;
 8007eac:	697b      	ldr	r3, [r7, #20]
 8007eae:	693a      	ldr	r2, [r7, #16]
 8007eb0:	65da      	str	r2, [r3, #92]	; 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 8007eb2:	4b35      	ldr	r3, [pc, #212]	; (8007f88 <tcp_listen_input+0x1e0>)
 8007eb4:	681b      	ldr	r3, [r3, #0]
 8007eb6:	1e5a      	subs	r2, r3, #1
 8007eb8:	697b      	ldr	r3, [r7, #20]
 8007eba:	655a      	str	r2, [r3, #84]	; 0x54
    npcb->callback_arg = pcb->callback_arg;
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	691a      	ldr	r2, [r3, #16]
 8007ec0:	697b      	ldr	r3, [r7, #20]
 8007ec2:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 8007ec4:	697b      	ldr	r3, [r7, #20]
 8007ec6:	687a      	ldr	r2, [r7, #4]
 8007ec8:	67da      	str	r2, [r3, #124]	; 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	7a5b      	ldrb	r3, [r3, #9]
 8007ece:	f003 030c 	and.w	r3, r3, #12
 8007ed2:	b2da      	uxtb	r2, r3
 8007ed4:	697b      	ldr	r3, [r7, #20]
 8007ed6:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	7a1a      	ldrb	r2, [r3, #8]
 8007edc:	697b      	ldr	r3, [r7, #20]
 8007ede:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 8007ee0:	4b2e      	ldr	r3, [pc, #184]	; (8007f9c <tcp_listen_input+0x1f4>)
 8007ee2:	681a      	ldr	r2, [r3, #0]
 8007ee4:	697b      	ldr	r3, [r7, #20]
 8007ee6:	60da      	str	r2, [r3, #12]
 8007ee8:	4a2c      	ldr	r2, [pc, #176]	; (8007f9c <tcp_listen_input+0x1f4>)
 8007eea:	697b      	ldr	r3, [r7, #20]
 8007eec:	6013      	str	r3, [r2, #0]
 8007eee:	f003 f8d1 	bl	800b094 <tcp_timer_needed>
 8007ef2:	4b2b      	ldr	r3, [pc, #172]	; (8007fa0 <tcp_listen_input+0x1f8>)
 8007ef4:	2201      	movs	r2, #1
 8007ef6:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 8007ef8:	6978      	ldr	r0, [r7, #20]
 8007efa:	f001 fd8f 	bl	8009a1c <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 8007efe:	4b23      	ldr	r3, [pc, #140]	; (8007f8c <tcp_listen_input+0x1e4>)
 8007f00:	681b      	ldr	r3, [r3, #0]
 8007f02:	89db      	ldrh	r3, [r3, #14]
 8007f04:	b29a      	uxth	r2, r3
 8007f06:	697b      	ldr	r3, [r7, #20]
 8007f08:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 8007f0c:	697b      	ldr	r3, [r7, #20]
 8007f0e:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8007f12:	697b      	ldr	r3, [r7, #20]
 8007f14:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 8007f18:	697b      	ldr	r3, [r7, #20]
 8007f1a:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 8007f1c:	697b      	ldr	r3, [r7, #20]
 8007f1e:	3304      	adds	r3, #4
 8007f20:	4618      	mov	r0, r3
 8007f22:	f005 f80d 	bl	800cf40 <ip4_route>
 8007f26:	4601      	mov	r1, r0
 8007f28:	697b      	ldr	r3, [r7, #20]
 8007f2a:	3304      	adds	r3, #4
 8007f2c:	461a      	mov	r2, r3
 8007f2e:	4620      	mov	r0, r4
 8007f30:	f7ff fa30 	bl	8007394 <tcp_eff_send_mss_netif>
 8007f34:	4603      	mov	r3, r0
 8007f36:	461a      	mov	r2, r3
 8007f38:	697b      	ldr	r3, [r7, #20]
 8007f3a:	865a      	strh	r2, [r3, #50]	; 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 8007f3c:	2112      	movs	r1, #18
 8007f3e:	6978      	ldr	r0, [r7, #20]
 8007f40:	f002 f844 	bl	8009fcc <tcp_enqueue_flags>
 8007f44:	4603      	mov	r3, r0
 8007f46:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 8007f48:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007f4c:	2b00      	cmp	r3, #0
 8007f4e:	d004      	beq.n	8007f5a <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 8007f50:	2100      	movs	r1, #0
 8007f52:	6978      	ldr	r0, [r7, #20]
 8007f54:	f7fe f97e 	bl	8006254 <tcp_abandon>
      return;
 8007f58:	e006      	b.n	8007f68 <tcp_listen_input+0x1c0>
    tcp_output(npcb);
 8007f5a:	6978      	ldr	r0, [r7, #20]
 8007f5c:	f002 f924 	bl	800a1a8 <tcp_output>
  return;
 8007f60:	e001      	b.n	8007f66 <tcp_listen_input+0x1be>
    return;
 8007f62:	bf00      	nop
 8007f64:	e000      	b.n	8007f68 <tcp_listen_input+0x1c0>
  return;
 8007f66:	bf00      	nop
}
 8007f68:	371c      	adds	r7, #28
 8007f6a:	46bd      	mov	sp, r7
 8007f6c:	bd90      	pop	{r4, r7, pc}
 8007f6e:	bf00      	nop
 8007f70:	200082c4 	.word	0x200082c4
 8007f74:	0801061c 	.word	0x0801061c
 8007f78:	08010814 	.word	0x08010814
 8007f7c:	08010668 	.word	0x08010668
 8007f80:	200082bc 	.word	0x200082bc
 8007f84:	200082c2 	.word	0x200082c2
 8007f88:	200082b8 	.word	0x200082b8
 8007f8c:	200082a8 	.word	0x200082a8
 8007f90:	20004d20 	.word	0x20004d20
 8007f94:	20004d24 	.word	0x20004d24
 8007f98:	20004d10 	.word	0x20004d10
 8007f9c:	2000828c 	.word	0x2000828c
 8007fa0:	20008294 	.word	0x20008294

08007fa4 <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 8007fa4:	b580      	push	{r7, lr}
 8007fa6:	b086      	sub	sp, #24
 8007fa8:	af04      	add	r7, sp, #16
 8007faa:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 8007fac:	4b2f      	ldr	r3, [pc, #188]	; (800806c <tcp_timewait_input+0xc8>)
 8007fae:	781b      	ldrb	r3, [r3, #0]
 8007fb0:	f003 0304 	and.w	r3, r3, #4
 8007fb4:	2b00      	cmp	r3, #0
 8007fb6:	d153      	bne.n	8008060 <tcp_timewait_input+0xbc>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	2b00      	cmp	r3, #0
 8007fbc:	d106      	bne.n	8007fcc <tcp_timewait_input+0x28>
 8007fbe:	4b2c      	ldr	r3, [pc, #176]	; (8008070 <tcp_timewait_input+0xcc>)
 8007fc0:	f240 22ee 	movw	r2, #750	; 0x2ee
 8007fc4:	492b      	ldr	r1, [pc, #172]	; (8008074 <tcp_timewait_input+0xd0>)
 8007fc6:	482c      	ldr	r0, [pc, #176]	; (8008078 <tcp_timewait_input+0xd4>)
 8007fc8:	f006 fa94 	bl	800e4f4 <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 8007fcc:	4b27      	ldr	r3, [pc, #156]	; (800806c <tcp_timewait_input+0xc8>)
 8007fce:	781b      	ldrb	r3, [r3, #0]
 8007fd0:	f003 0302 	and.w	r3, r3, #2
 8007fd4:	2b00      	cmp	r3, #0
 8007fd6:	d02a      	beq.n	800802e <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 8007fd8:	4b28      	ldr	r3, [pc, #160]	; (800807c <tcp_timewait_input+0xd8>)
 8007fda:	681a      	ldr	r2, [r3, #0]
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007fe0:	1ad3      	subs	r3, r2, r3
 8007fe2:	2b00      	cmp	r3, #0
 8007fe4:	db2d      	blt.n	8008042 <tcp_timewait_input+0x9e>
 8007fe6:	4b25      	ldr	r3, [pc, #148]	; (800807c <tcp_timewait_input+0xd8>)
 8007fe8:	681a      	ldr	r2, [r3, #0]
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007fee:	6879      	ldr	r1, [r7, #4]
 8007ff0:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8007ff2:	440b      	add	r3, r1
 8007ff4:	1ad3      	subs	r3, r2, r3
 8007ff6:	2b00      	cmp	r3, #0
 8007ff8:	dc23      	bgt.n	8008042 <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8007ffa:	4b21      	ldr	r3, [pc, #132]	; (8008080 <tcp_timewait_input+0xdc>)
 8007ffc:	6819      	ldr	r1, [r3, #0]
 8007ffe:	4b21      	ldr	r3, [pc, #132]	; (8008084 <tcp_timewait_input+0xe0>)
 8008000:	881b      	ldrh	r3, [r3, #0]
 8008002:	461a      	mov	r2, r3
 8008004:	4b1d      	ldr	r3, [pc, #116]	; (800807c <tcp_timewait_input+0xd8>)
 8008006:	681b      	ldr	r3, [r3, #0]
 8008008:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800800a:	4b1f      	ldr	r3, [pc, #124]	; (8008088 <tcp_timewait_input+0xe4>)
 800800c:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800800e:	885b      	ldrh	r3, [r3, #2]
 8008010:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8008012:	4a1d      	ldr	r2, [pc, #116]	; (8008088 <tcp_timewait_input+0xe4>)
 8008014:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8008016:	8812      	ldrh	r2, [r2, #0]
 8008018:	b292      	uxth	r2, r2
 800801a:	9202      	str	r2, [sp, #8]
 800801c:	9301      	str	r3, [sp, #4]
 800801e:	4b1b      	ldr	r3, [pc, #108]	; (800808c <tcp_timewait_input+0xe8>)
 8008020:	9300      	str	r3, [sp, #0]
 8008022:	4b1b      	ldr	r3, [pc, #108]	; (8008090 <tcp_timewait_input+0xec>)
 8008024:	4602      	mov	r2, r0
 8008026:	6878      	ldr	r0, [r7, #4]
 8008028:	f002 fe72 	bl	800ad10 <tcp_rst>
      return;
 800802c:	e01b      	b.n	8008066 <tcp_timewait_input+0xc2>
    }
  } else if (flags & TCP_FIN) {
 800802e:	4b0f      	ldr	r3, [pc, #60]	; (800806c <tcp_timewait_input+0xc8>)
 8008030:	781b      	ldrb	r3, [r3, #0]
 8008032:	f003 0301 	and.w	r3, r3, #1
 8008036:	2b00      	cmp	r3, #0
 8008038:	d003      	beq.n	8008042 <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 800803a:	4b16      	ldr	r3, [pc, #88]	; (8008094 <tcp_timewait_input+0xf0>)
 800803c:	681a      	ldr	r2, [r3, #0]
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 8008042:	4b10      	ldr	r3, [pc, #64]	; (8008084 <tcp_timewait_input+0xe0>)
 8008044:	881b      	ldrh	r3, [r3, #0]
 8008046:	2b00      	cmp	r3, #0
 8008048:	d00c      	beq.n	8008064 <tcp_timewait_input+0xc0>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	8b5b      	ldrh	r3, [r3, #26]
 800804e:	f043 0302 	orr.w	r3, r3, #2
 8008052:	b29a      	uxth	r2, r3
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8008058:	6878      	ldr	r0, [r7, #4]
 800805a:	f002 f8a5 	bl	800a1a8 <tcp_output>
  }
  return;
 800805e:	e001      	b.n	8008064 <tcp_timewait_input+0xc0>
    return;
 8008060:	bf00      	nop
 8008062:	e000      	b.n	8008066 <tcp_timewait_input+0xc2>
  return;
 8008064:	bf00      	nop
}
 8008066:	3708      	adds	r7, #8
 8008068:	46bd      	mov	sp, r7
 800806a:	bd80      	pop	{r7, pc}
 800806c:	200082c4 	.word	0x200082c4
 8008070:	0801061c 	.word	0x0801061c
 8008074:	08010834 	.word	0x08010834
 8008078:	08010668 	.word	0x08010668
 800807c:	200082b8 	.word	0x200082b8
 8008080:	200082bc 	.word	0x200082bc
 8008084:	200082c2 	.word	0x200082c2
 8008088:	200082a8 	.word	0x200082a8
 800808c:	20004d20 	.word	0x20004d20
 8008090:	20004d24 	.word	0x20004d24
 8008094:	20008280 	.word	0x20008280

08008098 <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 8008098:	b590      	push	{r4, r7, lr}
 800809a:	b08d      	sub	sp, #52	; 0x34
 800809c:	af04      	add	r7, sp, #16
 800809e:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 80080a0:	2300      	movs	r3, #0
 80080a2:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 80080a4:	2300      	movs	r3, #0
 80080a6:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	2b00      	cmp	r3, #0
 80080ac:	d106      	bne.n	80080bc <tcp_process+0x24>
 80080ae:	4b9d      	ldr	r3, [pc, #628]	; (8008324 <tcp_process+0x28c>)
 80080b0:	f44f 7247 	mov.w	r2, #796	; 0x31c
 80080b4:	499c      	ldr	r1, [pc, #624]	; (8008328 <tcp_process+0x290>)
 80080b6:	489d      	ldr	r0, [pc, #628]	; (800832c <tcp_process+0x294>)
 80080b8:	f006 fa1c 	bl	800e4f4 <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 80080bc:	4b9c      	ldr	r3, [pc, #624]	; (8008330 <tcp_process+0x298>)
 80080be:	781b      	ldrb	r3, [r3, #0]
 80080c0:	f003 0304 	and.w	r3, r3, #4
 80080c4:	2b00      	cmp	r3, #0
 80080c6:	d04e      	beq.n	8008166 <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	7d1b      	ldrb	r3, [r3, #20]
 80080cc:	2b02      	cmp	r3, #2
 80080ce:	d108      	bne.n	80080e2 <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80080d4:	4b97      	ldr	r3, [pc, #604]	; (8008334 <tcp_process+0x29c>)
 80080d6:	681b      	ldr	r3, [r3, #0]
 80080d8:	429a      	cmp	r2, r3
 80080da:	d123      	bne.n	8008124 <tcp_process+0x8c>
        acceptable = 1;
 80080dc:	2301      	movs	r3, #1
 80080de:	76fb      	strb	r3, [r7, #27]
 80080e0:	e020      	b.n	8008124 <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80080e6:	4b94      	ldr	r3, [pc, #592]	; (8008338 <tcp_process+0x2a0>)
 80080e8:	681b      	ldr	r3, [r3, #0]
 80080ea:	429a      	cmp	r2, r3
 80080ec:	d102      	bne.n	80080f4 <tcp_process+0x5c>
        acceptable = 1;
 80080ee:	2301      	movs	r3, #1
 80080f0:	76fb      	strb	r3, [r7, #27]
 80080f2:	e017      	b.n	8008124 <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 80080f4:	4b90      	ldr	r3, [pc, #576]	; (8008338 <tcp_process+0x2a0>)
 80080f6:	681a      	ldr	r2, [r3, #0]
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080fc:	1ad3      	subs	r3, r2, r3
 80080fe:	2b00      	cmp	r3, #0
 8008100:	db10      	blt.n	8008124 <tcp_process+0x8c>
 8008102:	4b8d      	ldr	r3, [pc, #564]	; (8008338 <tcp_process+0x2a0>)
 8008104:	681a      	ldr	r2, [r3, #0]
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800810a:	6879      	ldr	r1, [r7, #4]
 800810c:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800810e:	440b      	add	r3, r1
 8008110:	1ad3      	subs	r3, r2, r3
 8008112:	2b00      	cmp	r3, #0
 8008114:	dc06      	bgt.n	8008124 <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	8b5b      	ldrh	r3, [r3, #26]
 800811a:	f043 0302 	orr.w	r3, r3, #2
 800811e:	b29a      	uxth	r2, r3
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 8008124:	7efb      	ldrb	r3, [r7, #27]
 8008126:	2b00      	cmp	r3, #0
 8008128:	d01b      	beq.n	8008162 <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	7d1b      	ldrb	r3, [r3, #20]
 800812e:	2b00      	cmp	r3, #0
 8008130:	d106      	bne.n	8008140 <tcp_process+0xa8>
 8008132:	4b7c      	ldr	r3, [pc, #496]	; (8008324 <tcp_process+0x28c>)
 8008134:	f44f 724e 	mov.w	r2, #824	; 0x338
 8008138:	4980      	ldr	r1, [pc, #512]	; (800833c <tcp_process+0x2a4>)
 800813a:	487c      	ldr	r0, [pc, #496]	; (800832c <tcp_process+0x294>)
 800813c:	f006 f9da 	bl	800e4f4 <iprintf>
      recv_flags |= TF_RESET;
 8008140:	4b7f      	ldr	r3, [pc, #508]	; (8008340 <tcp_process+0x2a8>)
 8008142:	781b      	ldrb	r3, [r3, #0]
 8008144:	f043 0308 	orr.w	r3, r3, #8
 8008148:	b2da      	uxtb	r2, r3
 800814a:	4b7d      	ldr	r3, [pc, #500]	; (8008340 <tcp_process+0x2a8>)
 800814c:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	8b5b      	ldrh	r3, [r3, #26]
 8008152:	f023 0301 	bic.w	r3, r3, #1
 8008156:	b29a      	uxth	r2, r3
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 800815c:	f06f 030d 	mvn.w	r3, #13
 8008160:	e37a      	b.n	8008858 <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 8008162:	2300      	movs	r3, #0
 8008164:	e378      	b.n	8008858 <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 8008166:	4b72      	ldr	r3, [pc, #456]	; (8008330 <tcp_process+0x298>)
 8008168:	781b      	ldrb	r3, [r3, #0]
 800816a:	f003 0302 	and.w	r3, r3, #2
 800816e:	2b00      	cmp	r3, #0
 8008170:	d010      	beq.n	8008194 <tcp_process+0xfc>
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	7d1b      	ldrb	r3, [r3, #20]
 8008176:	2b02      	cmp	r3, #2
 8008178:	d00c      	beq.n	8008194 <tcp_process+0xfc>
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	7d1b      	ldrb	r3, [r3, #20]
 800817e:	2b03      	cmp	r3, #3
 8008180:	d008      	beq.n	8008194 <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	8b5b      	ldrh	r3, [r3, #26]
 8008186:	f043 0302 	orr.w	r3, r3, #2
 800818a:	b29a      	uxth	r2, r3
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 8008190:	2300      	movs	r3, #0
 8008192:	e361      	b.n	8008858 <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	8b5b      	ldrh	r3, [r3, #26]
 8008198:	f003 0310 	and.w	r3, r3, #16
 800819c:	2b00      	cmp	r3, #0
 800819e:	d103      	bne.n	80081a8 <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 80081a0:	4b68      	ldr	r3, [pc, #416]	; (8008344 <tcp_process+0x2ac>)
 80081a2:	681a      	ldr	r2, [r3, #0]
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	2200      	movs	r2, #0
 80081ac:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b
  pcb->persist_probe = 0;
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	2200      	movs	r2, #0
 80081b4:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a

  tcp_parseopt(pcb);
 80081b8:	6878      	ldr	r0, [r7, #4]
 80081ba:	f001 fc2f 	bl	8009a1c <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	7d1b      	ldrb	r3, [r3, #20]
 80081c2:	3b02      	subs	r3, #2
 80081c4:	2b07      	cmp	r3, #7
 80081c6:	f200 8337 	bhi.w	8008838 <tcp_process+0x7a0>
 80081ca:	a201      	add	r2, pc, #4	; (adr r2, 80081d0 <tcp_process+0x138>)
 80081cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80081d0:	080081f1 	.word	0x080081f1
 80081d4:	08008421 	.word	0x08008421
 80081d8:	08008599 	.word	0x08008599
 80081dc:	080085c3 	.word	0x080085c3
 80081e0:	080086e7 	.word	0x080086e7
 80081e4:	08008599 	.word	0x08008599
 80081e8:	08008773 	.word	0x08008773
 80081ec:	08008803 	.word	0x08008803
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 80081f0:	4b4f      	ldr	r3, [pc, #316]	; (8008330 <tcp_process+0x298>)
 80081f2:	781b      	ldrb	r3, [r3, #0]
 80081f4:	f003 0310 	and.w	r3, r3, #16
 80081f8:	2b00      	cmp	r3, #0
 80081fa:	f000 80e4 	beq.w	80083c6 <tcp_process+0x32e>
 80081fe:	4b4c      	ldr	r3, [pc, #304]	; (8008330 <tcp_process+0x298>)
 8008200:	781b      	ldrb	r3, [r3, #0]
 8008202:	f003 0302 	and.w	r3, r3, #2
 8008206:	2b00      	cmp	r3, #0
 8008208:	f000 80dd 	beq.w	80083c6 <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008210:	1c5a      	adds	r2, r3, #1
 8008212:	4b48      	ldr	r3, [pc, #288]	; (8008334 <tcp_process+0x29c>)
 8008214:	681b      	ldr	r3, [r3, #0]
 8008216:	429a      	cmp	r2, r3
 8008218:	f040 80d5 	bne.w	80083c6 <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 800821c:	4b46      	ldr	r3, [pc, #280]	; (8008338 <tcp_process+0x2a0>)
 800821e:	681b      	ldr	r3, [r3, #0]
 8008220:	1c5a      	adds	r2, r3, #1
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	625a      	str	r2, [r3, #36]	; 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	62da      	str	r2, [r3, #44]	; 0x2c
        pcb->lastack = ackno;
 800822e:	4b41      	ldr	r3, [pc, #260]	; (8008334 <tcp_process+0x29c>)
 8008230:	681a      	ldr	r2, [r3, #0]
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	645a      	str	r2, [r3, #68]	; 0x44
        pcb->snd_wnd = tcphdr->wnd;
 8008236:	4b44      	ldr	r3, [pc, #272]	; (8008348 <tcp_process+0x2b0>)
 8008238:	681b      	ldr	r3, [r3, #0]
 800823a:	89db      	ldrh	r3, [r3, #14]
 800823c:	b29a      	uxth	r2, r3
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 8008250:	4b39      	ldr	r3, [pc, #228]	; (8008338 <tcp_process+0x2a0>)
 8008252:	681b      	ldr	r3, [r3, #0]
 8008254:	1e5a      	subs	r2, r3, #1
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	655a      	str	r2, [r3, #84]	; 0x54
        pcb->state = ESTABLISHED;
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	2204      	movs	r2, #4
 800825e:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	3304      	adds	r3, #4
 8008268:	4618      	mov	r0, r3
 800826a:	f004 fe69 	bl	800cf40 <ip4_route>
 800826e:	4601      	mov	r1, r0
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	3304      	adds	r3, #4
 8008274:	461a      	mov	r2, r3
 8008276:	4620      	mov	r0, r4
 8008278:	f7ff f88c 	bl	8007394 <tcp_eff_send_mss_netif>
 800827c:	4603      	mov	r3, r0
 800827e:	461a      	mov	r2, r3
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8008288:	009a      	lsls	r2, r3, #2
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800828e:	005b      	lsls	r3, r3, #1
 8008290:	f241 111c 	movw	r1, #4380	; 0x111c
 8008294:	428b      	cmp	r3, r1
 8008296:	bf38      	it	cc
 8008298:	460b      	movcc	r3, r1
 800829a:	429a      	cmp	r2, r3
 800829c:	d204      	bcs.n	80082a8 <tcp_process+0x210>
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80082a2:	009b      	lsls	r3, r3, #2
 80082a4:	b29b      	uxth	r3, r3
 80082a6:	e00d      	b.n	80082c4 <tcp_process+0x22c>
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80082ac:	005b      	lsls	r3, r3, #1
 80082ae:	f241 121c 	movw	r2, #4380	; 0x111c
 80082b2:	4293      	cmp	r3, r2
 80082b4:	d904      	bls.n	80082c0 <tcp_process+0x228>
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80082ba:	005b      	lsls	r3, r3, #1
 80082bc:	b29b      	uxth	r3, r3
 80082be:	e001      	b.n	80082c4 <tcp_process+0x22c>
 80082c0:	f241 131c 	movw	r3, #4380	; 0x111c
 80082c4:	687a      	ldr	r2, [r7, #4]
 80082c6:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80082d0:	2b00      	cmp	r3, #0
 80082d2:	d106      	bne.n	80082e2 <tcp_process+0x24a>
 80082d4:	4b13      	ldr	r3, [pc, #76]	; (8008324 <tcp_process+0x28c>)
 80082d6:	f44f 725b 	mov.w	r2, #876	; 0x36c
 80082da:	491c      	ldr	r1, [pc, #112]	; (800834c <tcp_process+0x2b4>)
 80082dc:	4813      	ldr	r0, [pc, #76]	; (800832c <tcp_process+0x294>)
 80082de:	f006 f909 	bl	800e4f4 <iprintf>
        --pcb->snd_queuelen;
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80082e8:	3b01      	subs	r3, #1
 80082ea:	b29a      	uxth	r2, r3
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80082f6:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 80082f8:	69fb      	ldr	r3, [r7, #28]
 80082fa:	2b00      	cmp	r3, #0
 80082fc:	d12a      	bne.n	8008354 <tcp_process+0x2bc>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008302:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 8008304:	69fb      	ldr	r3, [r7, #28]
 8008306:	2b00      	cmp	r3, #0
 8008308:	d106      	bne.n	8008318 <tcp_process+0x280>
 800830a:	4b06      	ldr	r3, [pc, #24]	; (8008324 <tcp_process+0x28c>)
 800830c:	f44f 725d 	mov.w	r2, #884	; 0x374
 8008310:	490f      	ldr	r1, [pc, #60]	; (8008350 <tcp_process+0x2b8>)
 8008312:	4806      	ldr	r0, [pc, #24]	; (800832c <tcp_process+0x294>)
 8008314:	f006 f8ee 	bl	800e4f4 <iprintf>
          pcb->unsent = rseg->next;
 8008318:	69fb      	ldr	r3, [r7, #28]
 800831a:	681a      	ldr	r2, [r3, #0]
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	66da      	str	r2, [r3, #108]	; 0x6c
 8008320:	e01c      	b.n	800835c <tcp_process+0x2c4>
 8008322:	bf00      	nop
 8008324:	0801061c 	.word	0x0801061c
 8008328:	08010854 	.word	0x08010854
 800832c:	08010668 	.word	0x08010668
 8008330:	200082c4 	.word	0x200082c4
 8008334:	200082bc 	.word	0x200082bc
 8008338:	200082b8 	.word	0x200082b8
 800833c:	08010870 	.word	0x08010870
 8008340:	200082c5 	.word	0x200082c5
 8008344:	20008280 	.word	0x20008280
 8008348:	200082a8 	.word	0x200082a8
 800834c:	08010890 	.word	0x08010890
 8008350:	080108a8 	.word	0x080108a8
        } else {
          pcb->unacked = rseg->next;
 8008354:	69fb      	ldr	r3, [r7, #28]
 8008356:	681a      	ldr	r2, [r3, #0]
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	671a      	str	r2, [r3, #112]	; 0x70
        }
        tcp_seg_free(rseg);
 800835c:	69f8      	ldr	r0, [r7, #28]
 800835e:	f7fe fd22 	bl	8006da6 <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008366:	2b00      	cmp	r3, #0
 8008368:	d104      	bne.n	8008374 <tcp_process+0x2dc>
          pcb->rtime = -1;
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008370:	861a      	strh	r2, [r3, #48]	; 0x30
 8008372:	e006      	b.n	8008382 <tcp_process+0x2ea>
        } else {
          pcb->rtime = 0;
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	2200      	movs	r2, #0
 8008378:	861a      	strh	r2, [r3, #48]	; 0x30
          pcb->nrtx = 0;
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	2200      	movs	r2, #0
 800837e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008388:	2b00      	cmp	r3, #0
 800838a:	d00a      	beq.n	80083a2 <tcp_process+0x30a>
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008392:	687a      	ldr	r2, [r7, #4]
 8008394:	6910      	ldr	r0, [r2, #16]
 8008396:	2200      	movs	r2, #0
 8008398:	6879      	ldr	r1, [r7, #4]
 800839a:	4798      	blx	r3
 800839c:	4603      	mov	r3, r0
 800839e:	76bb      	strb	r3, [r7, #26]
 80083a0:	e001      	b.n	80083a6 <tcp_process+0x30e>
 80083a2:	2300      	movs	r3, #0
 80083a4:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 80083a6:	f997 301a 	ldrsb.w	r3, [r7, #26]
 80083aa:	f113 0f0d 	cmn.w	r3, #13
 80083ae:	d102      	bne.n	80083b6 <tcp_process+0x31e>
          return ERR_ABRT;
 80083b0:	f06f 030c 	mvn.w	r3, #12
 80083b4:	e250      	b.n	8008858 <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	8b5b      	ldrh	r3, [r3, #26]
 80083ba:	f043 0302 	orr.w	r3, r3, #2
 80083be:	b29a      	uxth	r2, r3
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 80083c4:	e23a      	b.n	800883c <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 80083c6:	4b98      	ldr	r3, [pc, #608]	; (8008628 <tcp_process+0x590>)
 80083c8:	781b      	ldrb	r3, [r3, #0]
 80083ca:	f003 0310 	and.w	r3, r3, #16
 80083ce:	2b00      	cmp	r3, #0
 80083d0:	f000 8234 	beq.w	800883c <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80083d4:	4b95      	ldr	r3, [pc, #596]	; (800862c <tcp_process+0x594>)
 80083d6:	6819      	ldr	r1, [r3, #0]
 80083d8:	4b95      	ldr	r3, [pc, #596]	; (8008630 <tcp_process+0x598>)
 80083da:	881b      	ldrh	r3, [r3, #0]
 80083dc:	461a      	mov	r2, r3
 80083de:	4b95      	ldr	r3, [pc, #596]	; (8008634 <tcp_process+0x59c>)
 80083e0:	681b      	ldr	r3, [r3, #0]
 80083e2:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80083e4:	4b94      	ldr	r3, [pc, #592]	; (8008638 <tcp_process+0x5a0>)
 80083e6:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80083e8:	885b      	ldrh	r3, [r3, #2]
 80083ea:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80083ec:	4a92      	ldr	r2, [pc, #584]	; (8008638 <tcp_process+0x5a0>)
 80083ee:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80083f0:	8812      	ldrh	r2, [r2, #0]
 80083f2:	b292      	uxth	r2, r2
 80083f4:	9202      	str	r2, [sp, #8]
 80083f6:	9301      	str	r3, [sp, #4]
 80083f8:	4b90      	ldr	r3, [pc, #576]	; (800863c <tcp_process+0x5a4>)
 80083fa:	9300      	str	r3, [sp, #0]
 80083fc:	4b90      	ldr	r3, [pc, #576]	; (8008640 <tcp_process+0x5a8>)
 80083fe:	4602      	mov	r2, r0
 8008400:	6878      	ldr	r0, [r7, #4]
 8008402:	f002 fc85 	bl	800ad10 <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800840c:	2b05      	cmp	r3, #5
 800840e:	f200 8215 	bhi.w	800883c <tcp_process+0x7a4>
          pcb->rtime = 0;
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	2200      	movs	r2, #0
 8008416:	861a      	strh	r2, [r3, #48]	; 0x30
          tcp_rexmit_rto(pcb);
 8008418:	6878      	ldr	r0, [r7, #4]
 800841a:	f002 fa51 	bl	800a8c0 <tcp_rexmit_rto>
      break;
 800841e:	e20d      	b.n	800883c <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 8008420:	4b81      	ldr	r3, [pc, #516]	; (8008628 <tcp_process+0x590>)
 8008422:	781b      	ldrb	r3, [r3, #0]
 8008424:	f003 0310 	and.w	r3, r3, #16
 8008428:	2b00      	cmp	r3, #0
 800842a:	f000 80a1 	beq.w	8008570 <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800842e:	4b7f      	ldr	r3, [pc, #508]	; (800862c <tcp_process+0x594>)
 8008430:	681a      	ldr	r2, [r3, #0]
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008436:	1ad3      	subs	r3, r2, r3
 8008438:	3b01      	subs	r3, #1
 800843a:	2b00      	cmp	r3, #0
 800843c:	db7e      	blt.n	800853c <tcp_process+0x4a4>
 800843e:	4b7b      	ldr	r3, [pc, #492]	; (800862c <tcp_process+0x594>)
 8008440:	681a      	ldr	r2, [r3, #0]
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008446:	1ad3      	subs	r3, r2, r3
 8008448:	2b00      	cmp	r3, #0
 800844a:	dc77      	bgt.n	800853c <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	2204      	movs	r2, #4
 8008450:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008456:	2b00      	cmp	r3, #0
 8008458:	d102      	bne.n	8008460 <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 800845a:	23fa      	movs	r3, #250	; 0xfa
 800845c:	76bb      	strb	r3, [r7, #26]
 800845e:	e01d      	b.n	800849c <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008464:	699b      	ldr	r3, [r3, #24]
 8008466:	2b00      	cmp	r3, #0
 8008468:	d106      	bne.n	8008478 <tcp_process+0x3e0>
 800846a:	4b76      	ldr	r3, [pc, #472]	; (8008644 <tcp_process+0x5ac>)
 800846c:	f44f 726a 	mov.w	r2, #936	; 0x3a8
 8008470:	4975      	ldr	r1, [pc, #468]	; (8008648 <tcp_process+0x5b0>)
 8008472:	4876      	ldr	r0, [pc, #472]	; (800864c <tcp_process+0x5b4>)
 8008474:	f006 f83e 	bl	800e4f4 <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800847c:	699b      	ldr	r3, [r3, #24]
 800847e:	2b00      	cmp	r3, #0
 8008480:	d00a      	beq.n	8008498 <tcp_process+0x400>
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008486:	699b      	ldr	r3, [r3, #24]
 8008488:	687a      	ldr	r2, [r7, #4]
 800848a:	6910      	ldr	r0, [r2, #16]
 800848c:	2200      	movs	r2, #0
 800848e:	6879      	ldr	r1, [r7, #4]
 8008490:	4798      	blx	r3
 8008492:	4603      	mov	r3, r0
 8008494:	76bb      	strb	r3, [r7, #26]
 8008496:	e001      	b.n	800849c <tcp_process+0x404>
 8008498:	23f0      	movs	r3, #240	; 0xf0
 800849a:	76bb      	strb	r3, [r7, #26]
          }
          if (err != ERR_OK) {
 800849c:	f997 301a 	ldrsb.w	r3, [r7, #26]
 80084a0:	2b00      	cmp	r3, #0
 80084a2:	d00a      	beq.n	80084ba <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 80084a4:	f997 301a 	ldrsb.w	r3, [r7, #26]
 80084a8:	f113 0f0d 	cmn.w	r3, #13
 80084ac:	d002      	beq.n	80084b4 <tcp_process+0x41c>
              tcp_abort(pcb);
 80084ae:	6878      	ldr	r0, [r7, #4]
 80084b0:	f7fd ff8e 	bl	80063d0 <tcp_abort>
            }
            return ERR_ABRT;
 80084b4:	f06f 030c 	mvn.w	r3, #12
 80084b8:	e1ce      	b.n	8008858 <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 80084ba:	6878      	ldr	r0, [r7, #4]
 80084bc:	f000 fae0 	bl	8008a80 <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 80084c0:	4b63      	ldr	r3, [pc, #396]	; (8008650 <tcp_process+0x5b8>)
 80084c2:	881b      	ldrh	r3, [r3, #0]
 80084c4:	2b00      	cmp	r3, #0
 80084c6:	d005      	beq.n	80084d4 <tcp_process+0x43c>
            recv_acked--;
 80084c8:	4b61      	ldr	r3, [pc, #388]	; (8008650 <tcp_process+0x5b8>)
 80084ca:	881b      	ldrh	r3, [r3, #0]
 80084cc:	3b01      	subs	r3, #1
 80084ce:	b29a      	uxth	r2, r3
 80084d0:	4b5f      	ldr	r3, [pc, #380]	; (8008650 <tcp_process+0x5b8>)
 80084d2:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80084d8:	009a      	lsls	r2, r3, #2
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80084de:	005b      	lsls	r3, r3, #1
 80084e0:	f241 111c 	movw	r1, #4380	; 0x111c
 80084e4:	428b      	cmp	r3, r1
 80084e6:	bf38      	it	cc
 80084e8:	460b      	movcc	r3, r1
 80084ea:	429a      	cmp	r2, r3
 80084ec:	d204      	bcs.n	80084f8 <tcp_process+0x460>
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80084f2:	009b      	lsls	r3, r3, #2
 80084f4:	b29b      	uxth	r3, r3
 80084f6:	e00d      	b.n	8008514 <tcp_process+0x47c>
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80084fc:	005b      	lsls	r3, r3, #1
 80084fe:	f241 121c 	movw	r2, #4380	; 0x111c
 8008502:	4293      	cmp	r3, r2
 8008504:	d904      	bls.n	8008510 <tcp_process+0x478>
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800850a:	005b      	lsls	r3, r3, #1
 800850c:	b29b      	uxth	r3, r3
 800850e:	e001      	b.n	8008514 <tcp_process+0x47c>
 8008510:	f241 131c 	movw	r3, #4380	; 0x111c
 8008514:	687a      	ldr	r2, [r7, #4]
 8008516:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 800851a:	4b4e      	ldr	r3, [pc, #312]	; (8008654 <tcp_process+0x5bc>)
 800851c:	781b      	ldrb	r3, [r3, #0]
 800851e:	f003 0320 	and.w	r3, r3, #32
 8008522:	2b00      	cmp	r3, #0
 8008524:	d037      	beq.n	8008596 <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	8b5b      	ldrh	r3, [r3, #26]
 800852a:	f043 0302 	orr.w	r3, r3, #2
 800852e:	b29a      	uxth	r2, r3
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	2207      	movs	r2, #7
 8008538:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 800853a:	e02c      	b.n	8008596 <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800853c:	4b3b      	ldr	r3, [pc, #236]	; (800862c <tcp_process+0x594>)
 800853e:	6819      	ldr	r1, [r3, #0]
 8008540:	4b3b      	ldr	r3, [pc, #236]	; (8008630 <tcp_process+0x598>)
 8008542:	881b      	ldrh	r3, [r3, #0]
 8008544:	461a      	mov	r2, r3
 8008546:	4b3b      	ldr	r3, [pc, #236]	; (8008634 <tcp_process+0x59c>)
 8008548:	681b      	ldr	r3, [r3, #0]
 800854a:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800854c:	4b3a      	ldr	r3, [pc, #232]	; (8008638 <tcp_process+0x5a0>)
 800854e:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8008550:	885b      	ldrh	r3, [r3, #2]
 8008552:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8008554:	4a38      	ldr	r2, [pc, #224]	; (8008638 <tcp_process+0x5a0>)
 8008556:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8008558:	8812      	ldrh	r2, [r2, #0]
 800855a:	b292      	uxth	r2, r2
 800855c:	9202      	str	r2, [sp, #8]
 800855e:	9301      	str	r3, [sp, #4]
 8008560:	4b36      	ldr	r3, [pc, #216]	; (800863c <tcp_process+0x5a4>)
 8008562:	9300      	str	r3, [sp, #0]
 8008564:	4b36      	ldr	r3, [pc, #216]	; (8008640 <tcp_process+0x5a8>)
 8008566:	4602      	mov	r2, r0
 8008568:	6878      	ldr	r0, [r7, #4]
 800856a:	f002 fbd1 	bl	800ad10 <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 800856e:	e167      	b.n	8008840 <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 8008570:	4b2d      	ldr	r3, [pc, #180]	; (8008628 <tcp_process+0x590>)
 8008572:	781b      	ldrb	r3, [r3, #0]
 8008574:	f003 0302 	and.w	r3, r3, #2
 8008578:	2b00      	cmp	r3, #0
 800857a:	f000 8161 	beq.w	8008840 <tcp_process+0x7a8>
 800857e:	687b      	ldr	r3, [r7, #4]
 8008580:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008582:	1e5a      	subs	r2, r3, #1
 8008584:	4b2b      	ldr	r3, [pc, #172]	; (8008634 <tcp_process+0x59c>)
 8008586:	681b      	ldr	r3, [r3, #0]
 8008588:	429a      	cmp	r2, r3
 800858a:	f040 8159 	bne.w	8008840 <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 800858e:	6878      	ldr	r0, [r7, #4]
 8008590:	f002 f9b8 	bl	800a904 <tcp_rexmit>
      break;
 8008594:	e154      	b.n	8008840 <tcp_process+0x7a8>
 8008596:	e153      	b.n	8008840 <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 8008598:	6878      	ldr	r0, [r7, #4]
 800859a:	f000 fa71 	bl	8008a80 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 800859e:	4b2d      	ldr	r3, [pc, #180]	; (8008654 <tcp_process+0x5bc>)
 80085a0:	781b      	ldrb	r3, [r3, #0]
 80085a2:	f003 0320 	and.w	r3, r3, #32
 80085a6:	2b00      	cmp	r3, #0
 80085a8:	f000 814c 	beq.w	8008844 <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	8b5b      	ldrh	r3, [r3, #26]
 80085b0:	f043 0302 	orr.w	r3, r3, #2
 80085b4:	b29a      	uxth	r2, r3
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	2207      	movs	r2, #7
 80085be:	751a      	strb	r2, [r3, #20]
      }
      break;
 80085c0:	e140      	b.n	8008844 <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 80085c2:	6878      	ldr	r0, [r7, #4]
 80085c4:	f000 fa5c 	bl	8008a80 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 80085c8:	4b22      	ldr	r3, [pc, #136]	; (8008654 <tcp_process+0x5bc>)
 80085ca:	781b      	ldrb	r3, [r3, #0]
 80085cc:	f003 0320 	and.w	r3, r3, #32
 80085d0:	2b00      	cmp	r3, #0
 80085d2:	d071      	beq.n	80086b8 <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 80085d4:	4b14      	ldr	r3, [pc, #80]	; (8008628 <tcp_process+0x590>)
 80085d6:	781b      	ldrb	r3, [r3, #0]
 80085d8:	f003 0310 	and.w	r3, r3, #16
 80085dc:	2b00      	cmp	r3, #0
 80085de:	d060      	beq.n	80086a2 <tcp_process+0x60a>
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80085e4:	4b11      	ldr	r3, [pc, #68]	; (800862c <tcp_process+0x594>)
 80085e6:	681b      	ldr	r3, [r3, #0]
 80085e8:	429a      	cmp	r2, r3
 80085ea:	d15a      	bne.n	80086a2 <tcp_process+0x60a>
            pcb->unsent == NULL) {
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	6edb      	ldr	r3, [r3, #108]	; 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 80085f0:	2b00      	cmp	r3, #0
 80085f2:	d156      	bne.n	80086a2 <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	8b5b      	ldrh	r3, [r3, #26]
 80085f8:	f043 0302 	orr.w	r3, r3, #2
 80085fc:	b29a      	uxth	r2, r3
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 8008602:	6878      	ldr	r0, [r7, #4]
 8008604:	f7fe fdbc 	bl	8007180 <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 8008608:	4b13      	ldr	r3, [pc, #76]	; (8008658 <tcp_process+0x5c0>)
 800860a:	681b      	ldr	r3, [r3, #0]
 800860c:	687a      	ldr	r2, [r7, #4]
 800860e:	429a      	cmp	r2, r3
 8008610:	d105      	bne.n	800861e <tcp_process+0x586>
 8008612:	4b11      	ldr	r3, [pc, #68]	; (8008658 <tcp_process+0x5c0>)
 8008614:	681b      	ldr	r3, [r3, #0]
 8008616:	68db      	ldr	r3, [r3, #12]
 8008618:	4a0f      	ldr	r2, [pc, #60]	; (8008658 <tcp_process+0x5c0>)
 800861a:	6013      	str	r3, [r2, #0]
 800861c:	e02e      	b.n	800867c <tcp_process+0x5e4>
 800861e:	4b0e      	ldr	r3, [pc, #56]	; (8008658 <tcp_process+0x5c0>)
 8008620:	681b      	ldr	r3, [r3, #0]
 8008622:	617b      	str	r3, [r7, #20]
 8008624:	e027      	b.n	8008676 <tcp_process+0x5de>
 8008626:	bf00      	nop
 8008628:	200082c4 	.word	0x200082c4
 800862c:	200082bc 	.word	0x200082bc
 8008630:	200082c2 	.word	0x200082c2
 8008634:	200082b8 	.word	0x200082b8
 8008638:	200082a8 	.word	0x200082a8
 800863c:	20004d20 	.word	0x20004d20
 8008640:	20004d24 	.word	0x20004d24
 8008644:	0801061c 	.word	0x0801061c
 8008648:	080108bc 	.word	0x080108bc
 800864c:	08010668 	.word	0x08010668
 8008650:	200082c0 	.word	0x200082c0
 8008654:	200082c5 	.word	0x200082c5
 8008658:	2000828c 	.word	0x2000828c
 800865c:	697b      	ldr	r3, [r7, #20]
 800865e:	68db      	ldr	r3, [r3, #12]
 8008660:	687a      	ldr	r2, [r7, #4]
 8008662:	429a      	cmp	r2, r3
 8008664:	d104      	bne.n	8008670 <tcp_process+0x5d8>
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	68da      	ldr	r2, [r3, #12]
 800866a:	697b      	ldr	r3, [r7, #20]
 800866c:	60da      	str	r2, [r3, #12]
 800866e:	e005      	b.n	800867c <tcp_process+0x5e4>
 8008670:	697b      	ldr	r3, [r7, #20]
 8008672:	68db      	ldr	r3, [r3, #12]
 8008674:	617b      	str	r3, [r7, #20]
 8008676:	697b      	ldr	r3, [r7, #20]
 8008678:	2b00      	cmp	r3, #0
 800867a:	d1ef      	bne.n	800865c <tcp_process+0x5c4>
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	2200      	movs	r2, #0
 8008680:	60da      	str	r2, [r3, #12]
 8008682:	4b77      	ldr	r3, [pc, #476]	; (8008860 <tcp_process+0x7c8>)
 8008684:	2201      	movs	r2, #1
 8008686:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	220a      	movs	r2, #10
 800868c:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 800868e:	4b75      	ldr	r3, [pc, #468]	; (8008864 <tcp_process+0x7cc>)
 8008690:	681a      	ldr	r2, [r3, #0]
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	60da      	str	r2, [r3, #12]
 8008696:	4a73      	ldr	r2, [pc, #460]	; (8008864 <tcp_process+0x7cc>)
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	6013      	str	r3, [r2, #0]
 800869c:	f002 fcfa 	bl	800b094 <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 80086a0:	e0d2      	b.n	8008848 <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	8b5b      	ldrh	r3, [r3, #26]
 80086a6:	f043 0302 	orr.w	r3, r3, #2
 80086aa:	b29a      	uxth	r2, r3
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	2208      	movs	r2, #8
 80086b4:	751a      	strb	r2, [r3, #20]
      break;
 80086b6:	e0c7      	b.n	8008848 <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 80086b8:	4b6b      	ldr	r3, [pc, #428]	; (8008868 <tcp_process+0x7d0>)
 80086ba:	781b      	ldrb	r3, [r3, #0]
 80086bc:	f003 0310 	and.w	r3, r3, #16
 80086c0:	2b00      	cmp	r3, #0
 80086c2:	f000 80c1 	beq.w	8008848 <tcp_process+0x7b0>
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80086ca:	4b68      	ldr	r3, [pc, #416]	; (800886c <tcp_process+0x7d4>)
 80086cc:	681b      	ldr	r3, [r3, #0]
 80086ce:	429a      	cmp	r2, r3
 80086d0:	f040 80ba 	bne.w	8008848 <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 80086d8:	2b00      	cmp	r3, #0
 80086da:	f040 80b5 	bne.w	8008848 <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	2206      	movs	r2, #6
 80086e2:	751a      	strb	r2, [r3, #20]
      break;
 80086e4:	e0b0      	b.n	8008848 <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 80086e6:	6878      	ldr	r0, [r7, #4]
 80086e8:	f000 f9ca 	bl	8008a80 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 80086ec:	4b60      	ldr	r3, [pc, #384]	; (8008870 <tcp_process+0x7d8>)
 80086ee:	781b      	ldrb	r3, [r3, #0]
 80086f0:	f003 0320 	and.w	r3, r3, #32
 80086f4:	2b00      	cmp	r3, #0
 80086f6:	f000 80a9 	beq.w	800884c <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	8b5b      	ldrh	r3, [r3, #26]
 80086fe:	f043 0302 	orr.w	r3, r3, #2
 8008702:	b29a      	uxth	r2, r3
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 8008708:	6878      	ldr	r0, [r7, #4]
 800870a:	f7fe fd39 	bl	8007180 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 800870e:	4b59      	ldr	r3, [pc, #356]	; (8008874 <tcp_process+0x7dc>)
 8008710:	681b      	ldr	r3, [r3, #0]
 8008712:	687a      	ldr	r2, [r7, #4]
 8008714:	429a      	cmp	r2, r3
 8008716:	d105      	bne.n	8008724 <tcp_process+0x68c>
 8008718:	4b56      	ldr	r3, [pc, #344]	; (8008874 <tcp_process+0x7dc>)
 800871a:	681b      	ldr	r3, [r3, #0]
 800871c:	68db      	ldr	r3, [r3, #12]
 800871e:	4a55      	ldr	r2, [pc, #340]	; (8008874 <tcp_process+0x7dc>)
 8008720:	6013      	str	r3, [r2, #0]
 8008722:	e013      	b.n	800874c <tcp_process+0x6b4>
 8008724:	4b53      	ldr	r3, [pc, #332]	; (8008874 <tcp_process+0x7dc>)
 8008726:	681b      	ldr	r3, [r3, #0]
 8008728:	613b      	str	r3, [r7, #16]
 800872a:	e00c      	b.n	8008746 <tcp_process+0x6ae>
 800872c:	693b      	ldr	r3, [r7, #16]
 800872e:	68db      	ldr	r3, [r3, #12]
 8008730:	687a      	ldr	r2, [r7, #4]
 8008732:	429a      	cmp	r2, r3
 8008734:	d104      	bne.n	8008740 <tcp_process+0x6a8>
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	68da      	ldr	r2, [r3, #12]
 800873a:	693b      	ldr	r3, [r7, #16]
 800873c:	60da      	str	r2, [r3, #12]
 800873e:	e005      	b.n	800874c <tcp_process+0x6b4>
 8008740:	693b      	ldr	r3, [r7, #16]
 8008742:	68db      	ldr	r3, [r3, #12]
 8008744:	613b      	str	r3, [r7, #16]
 8008746:	693b      	ldr	r3, [r7, #16]
 8008748:	2b00      	cmp	r3, #0
 800874a:	d1ef      	bne.n	800872c <tcp_process+0x694>
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	2200      	movs	r2, #0
 8008750:	60da      	str	r2, [r3, #12]
 8008752:	4b43      	ldr	r3, [pc, #268]	; (8008860 <tcp_process+0x7c8>)
 8008754:	2201      	movs	r2, #1
 8008756:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	220a      	movs	r2, #10
 800875c:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 800875e:	4b41      	ldr	r3, [pc, #260]	; (8008864 <tcp_process+0x7cc>)
 8008760:	681a      	ldr	r2, [r3, #0]
 8008762:	687b      	ldr	r3, [r7, #4]
 8008764:	60da      	str	r2, [r3, #12]
 8008766:	4a3f      	ldr	r2, [pc, #252]	; (8008864 <tcp_process+0x7cc>)
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	6013      	str	r3, [r2, #0]
 800876c:	f002 fc92 	bl	800b094 <tcp_timer_needed>
      }
      break;
 8008770:	e06c      	b.n	800884c <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 8008772:	6878      	ldr	r0, [r7, #4]
 8008774:	f000 f984 	bl	8008a80 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8008778:	4b3b      	ldr	r3, [pc, #236]	; (8008868 <tcp_process+0x7d0>)
 800877a:	781b      	ldrb	r3, [r3, #0]
 800877c:	f003 0310 	and.w	r3, r3, #16
 8008780:	2b00      	cmp	r3, #0
 8008782:	d065      	beq.n	8008850 <tcp_process+0x7b8>
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8008788:	4b38      	ldr	r3, [pc, #224]	; (800886c <tcp_process+0x7d4>)
 800878a:	681b      	ldr	r3, [r3, #0]
 800878c:	429a      	cmp	r2, r3
 800878e:	d15f      	bne.n	8008850 <tcp_process+0x7b8>
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008794:	2b00      	cmp	r3, #0
 8008796:	d15b      	bne.n	8008850 <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 8008798:	6878      	ldr	r0, [r7, #4]
 800879a:	f7fe fcf1 	bl	8007180 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 800879e:	4b35      	ldr	r3, [pc, #212]	; (8008874 <tcp_process+0x7dc>)
 80087a0:	681b      	ldr	r3, [r3, #0]
 80087a2:	687a      	ldr	r2, [r7, #4]
 80087a4:	429a      	cmp	r2, r3
 80087a6:	d105      	bne.n	80087b4 <tcp_process+0x71c>
 80087a8:	4b32      	ldr	r3, [pc, #200]	; (8008874 <tcp_process+0x7dc>)
 80087aa:	681b      	ldr	r3, [r3, #0]
 80087ac:	68db      	ldr	r3, [r3, #12]
 80087ae:	4a31      	ldr	r2, [pc, #196]	; (8008874 <tcp_process+0x7dc>)
 80087b0:	6013      	str	r3, [r2, #0]
 80087b2:	e013      	b.n	80087dc <tcp_process+0x744>
 80087b4:	4b2f      	ldr	r3, [pc, #188]	; (8008874 <tcp_process+0x7dc>)
 80087b6:	681b      	ldr	r3, [r3, #0]
 80087b8:	60fb      	str	r3, [r7, #12]
 80087ba:	e00c      	b.n	80087d6 <tcp_process+0x73e>
 80087bc:	68fb      	ldr	r3, [r7, #12]
 80087be:	68db      	ldr	r3, [r3, #12]
 80087c0:	687a      	ldr	r2, [r7, #4]
 80087c2:	429a      	cmp	r2, r3
 80087c4:	d104      	bne.n	80087d0 <tcp_process+0x738>
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	68da      	ldr	r2, [r3, #12]
 80087ca:	68fb      	ldr	r3, [r7, #12]
 80087cc:	60da      	str	r2, [r3, #12]
 80087ce:	e005      	b.n	80087dc <tcp_process+0x744>
 80087d0:	68fb      	ldr	r3, [r7, #12]
 80087d2:	68db      	ldr	r3, [r3, #12]
 80087d4:	60fb      	str	r3, [r7, #12]
 80087d6:	68fb      	ldr	r3, [r7, #12]
 80087d8:	2b00      	cmp	r3, #0
 80087da:	d1ef      	bne.n	80087bc <tcp_process+0x724>
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	2200      	movs	r2, #0
 80087e0:	60da      	str	r2, [r3, #12]
 80087e2:	4b1f      	ldr	r3, [pc, #124]	; (8008860 <tcp_process+0x7c8>)
 80087e4:	2201      	movs	r2, #1
 80087e6:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	220a      	movs	r2, #10
 80087ec:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 80087ee:	4b1d      	ldr	r3, [pc, #116]	; (8008864 <tcp_process+0x7cc>)
 80087f0:	681a      	ldr	r2, [r3, #0]
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	60da      	str	r2, [r3, #12]
 80087f6:	4a1b      	ldr	r2, [pc, #108]	; (8008864 <tcp_process+0x7cc>)
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	6013      	str	r3, [r2, #0]
 80087fc:	f002 fc4a 	bl	800b094 <tcp_timer_needed>
      }
      break;
 8008800:	e026      	b.n	8008850 <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 8008802:	6878      	ldr	r0, [r7, #4]
 8008804:	f000 f93c 	bl	8008a80 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8008808:	4b17      	ldr	r3, [pc, #92]	; (8008868 <tcp_process+0x7d0>)
 800880a:	781b      	ldrb	r3, [r3, #0]
 800880c:	f003 0310 	and.w	r3, r3, #16
 8008810:	2b00      	cmp	r3, #0
 8008812:	d01f      	beq.n	8008854 <tcp_process+0x7bc>
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8008818:	4b14      	ldr	r3, [pc, #80]	; (800886c <tcp_process+0x7d4>)
 800881a:	681b      	ldr	r3, [r3, #0]
 800881c:	429a      	cmp	r2, r3
 800881e:	d119      	bne.n	8008854 <tcp_process+0x7bc>
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008824:	2b00      	cmp	r3, #0
 8008826:	d115      	bne.n	8008854 <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 8008828:	4b11      	ldr	r3, [pc, #68]	; (8008870 <tcp_process+0x7d8>)
 800882a:	781b      	ldrb	r3, [r3, #0]
 800882c:	f043 0310 	orr.w	r3, r3, #16
 8008830:	b2da      	uxtb	r2, r3
 8008832:	4b0f      	ldr	r3, [pc, #60]	; (8008870 <tcp_process+0x7d8>)
 8008834:	701a      	strb	r2, [r3, #0]
      }
      break;
 8008836:	e00d      	b.n	8008854 <tcp_process+0x7bc>
    default:
      break;
 8008838:	bf00      	nop
 800883a:	e00c      	b.n	8008856 <tcp_process+0x7be>
      break;
 800883c:	bf00      	nop
 800883e:	e00a      	b.n	8008856 <tcp_process+0x7be>
      break;
 8008840:	bf00      	nop
 8008842:	e008      	b.n	8008856 <tcp_process+0x7be>
      break;
 8008844:	bf00      	nop
 8008846:	e006      	b.n	8008856 <tcp_process+0x7be>
      break;
 8008848:	bf00      	nop
 800884a:	e004      	b.n	8008856 <tcp_process+0x7be>
      break;
 800884c:	bf00      	nop
 800884e:	e002      	b.n	8008856 <tcp_process+0x7be>
      break;
 8008850:	bf00      	nop
 8008852:	e000      	b.n	8008856 <tcp_process+0x7be>
      break;
 8008854:	bf00      	nop
  }
  return ERR_OK;
 8008856:	2300      	movs	r3, #0
}
 8008858:	4618      	mov	r0, r3
 800885a:	3724      	adds	r7, #36	; 0x24
 800885c:	46bd      	mov	sp, r7
 800885e:	bd90      	pop	{r4, r7, pc}
 8008860:	20008294 	.word	0x20008294
 8008864:	20008290 	.word	0x20008290
 8008868:	200082c4 	.word	0x200082c4
 800886c:	200082bc 	.word	0x200082bc
 8008870:	200082c5 	.word	0x200082c5
 8008874:	2000828c 	.word	0x2000828c

08008878 <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 8008878:	b590      	push	{r4, r7, lr}
 800887a:	b085      	sub	sp, #20
 800887c:	af00      	add	r7, sp, #0
 800887e:	6078      	str	r0, [r7, #4]
 8008880:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	2b00      	cmp	r3, #0
 8008886:	d106      	bne.n	8008896 <tcp_oos_insert_segment+0x1e>
 8008888:	4b3b      	ldr	r3, [pc, #236]	; (8008978 <tcp_oos_insert_segment+0x100>)
 800888a:	f240 421f 	movw	r2, #1055	; 0x41f
 800888e:	493b      	ldr	r1, [pc, #236]	; (800897c <tcp_oos_insert_segment+0x104>)
 8008890:	483b      	ldr	r0, [pc, #236]	; (8008980 <tcp_oos_insert_segment+0x108>)
 8008892:	f005 fe2f 	bl	800e4f4 <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	68db      	ldr	r3, [r3, #12]
 800889a:	899b      	ldrh	r3, [r3, #12]
 800889c:	b29b      	uxth	r3, r3
 800889e:	4618      	mov	r0, r3
 80088a0:	f7fb fca0 	bl	80041e4 <lwip_htons>
 80088a4:	4603      	mov	r3, r0
 80088a6:	b2db      	uxtb	r3, r3
 80088a8:	f003 0301 	and.w	r3, r3, #1
 80088ac:	2b00      	cmp	r3, #0
 80088ae:	d028      	beq.n	8008902 <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 80088b0:	6838      	ldr	r0, [r7, #0]
 80088b2:	f7fe fa63 	bl	8006d7c <tcp_segs_free>
    next = NULL;
 80088b6:	2300      	movs	r3, #0
 80088b8:	603b      	str	r3, [r7, #0]
 80088ba:	e056      	b.n	800896a <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 80088bc:	683b      	ldr	r3, [r7, #0]
 80088be:	68db      	ldr	r3, [r3, #12]
 80088c0:	899b      	ldrh	r3, [r3, #12]
 80088c2:	b29b      	uxth	r3, r3
 80088c4:	4618      	mov	r0, r3
 80088c6:	f7fb fc8d 	bl	80041e4 <lwip_htons>
 80088ca:	4603      	mov	r3, r0
 80088cc:	b2db      	uxtb	r3, r3
 80088ce:	f003 0301 	and.w	r3, r3, #1
 80088d2:	2b00      	cmp	r3, #0
 80088d4:	d00d      	beq.n	80088f2 <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	68db      	ldr	r3, [r3, #12]
 80088da:	899b      	ldrh	r3, [r3, #12]
 80088dc:	b29c      	uxth	r4, r3
 80088de:	2001      	movs	r0, #1
 80088e0:	f7fb fc80 	bl	80041e4 <lwip_htons>
 80088e4:	4603      	mov	r3, r0
 80088e6:	461a      	mov	r2, r3
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	68db      	ldr	r3, [r3, #12]
 80088ec:	4322      	orrs	r2, r4
 80088ee:	b292      	uxth	r2, r2
 80088f0:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 80088f2:	683b      	ldr	r3, [r7, #0]
 80088f4:	60fb      	str	r3, [r7, #12]
      next = next->next;
 80088f6:	683b      	ldr	r3, [r7, #0]
 80088f8:	681b      	ldr	r3, [r3, #0]
 80088fa:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 80088fc:	68f8      	ldr	r0, [r7, #12]
 80088fe:	f7fe fa52 	bl	8006da6 <tcp_seg_free>
    while (next &&
 8008902:	683b      	ldr	r3, [r7, #0]
 8008904:	2b00      	cmp	r3, #0
 8008906:	d00e      	beq.n	8008926 <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	891b      	ldrh	r3, [r3, #8]
 800890c:	461a      	mov	r2, r3
 800890e:	4b1d      	ldr	r3, [pc, #116]	; (8008984 <tcp_oos_insert_segment+0x10c>)
 8008910:	681b      	ldr	r3, [r3, #0]
 8008912:	441a      	add	r2, r3
 8008914:	683b      	ldr	r3, [r7, #0]
 8008916:	68db      	ldr	r3, [r3, #12]
 8008918:	685b      	ldr	r3, [r3, #4]
 800891a:	6839      	ldr	r1, [r7, #0]
 800891c:	8909      	ldrh	r1, [r1, #8]
 800891e:	440b      	add	r3, r1
 8008920:	1ad3      	subs	r3, r2, r3
    while (next &&
 8008922:	2b00      	cmp	r3, #0
 8008924:	daca      	bge.n	80088bc <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 8008926:	683b      	ldr	r3, [r7, #0]
 8008928:	2b00      	cmp	r3, #0
 800892a:	d01e      	beq.n	800896a <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	891b      	ldrh	r3, [r3, #8]
 8008930:	461a      	mov	r2, r3
 8008932:	4b14      	ldr	r3, [pc, #80]	; (8008984 <tcp_oos_insert_segment+0x10c>)
 8008934:	681b      	ldr	r3, [r3, #0]
 8008936:	441a      	add	r2, r3
 8008938:	683b      	ldr	r3, [r7, #0]
 800893a:	68db      	ldr	r3, [r3, #12]
 800893c:	685b      	ldr	r3, [r3, #4]
 800893e:	1ad3      	subs	r3, r2, r3
    if (next &&
 8008940:	2b00      	cmp	r3, #0
 8008942:	dd12      	ble.n	800896a <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 8008944:	683b      	ldr	r3, [r7, #0]
 8008946:	68db      	ldr	r3, [r3, #12]
 8008948:	685b      	ldr	r3, [r3, #4]
 800894a:	b29a      	uxth	r2, r3
 800894c:	4b0d      	ldr	r3, [pc, #52]	; (8008984 <tcp_oos_insert_segment+0x10c>)
 800894e:	681b      	ldr	r3, [r3, #0]
 8008950:	b29b      	uxth	r3, r3
 8008952:	1ad3      	subs	r3, r2, r3
 8008954:	b29a      	uxth	r2, r3
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	685a      	ldr	r2, [r3, #4]
 800895e:	687b      	ldr	r3, [r7, #4]
 8008960:	891b      	ldrh	r3, [r3, #8]
 8008962:	4619      	mov	r1, r3
 8008964:	4610      	mov	r0, r2
 8008966:	f7fc fe15 	bl	8005594 <pbuf_realloc>
    }
  }
  cseg->next = next;
 800896a:	687b      	ldr	r3, [r7, #4]
 800896c:	683a      	ldr	r2, [r7, #0]
 800896e:	601a      	str	r2, [r3, #0]
}
 8008970:	bf00      	nop
 8008972:	3714      	adds	r7, #20
 8008974:	46bd      	mov	sp, r7
 8008976:	bd90      	pop	{r4, r7, pc}
 8008978:	0801061c 	.word	0x0801061c
 800897c:	080108dc 	.word	0x080108dc
 8008980:	08010668 	.word	0x08010668
 8008984:	200082b8 	.word	0x200082b8

08008988 <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 8008988:	b5b0      	push	{r4, r5, r7, lr}
 800898a:	b086      	sub	sp, #24
 800898c:	af00      	add	r7, sp, #0
 800898e:	60f8      	str	r0, [r7, #12]
 8008990:	60b9      	str	r1, [r7, #8]
 8008992:	607a      	str	r2, [r7, #4]
 8008994:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 8008996:	e03e      	b.n	8008a16 <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 8008998:	68bb      	ldr	r3, [r7, #8]
 800899a:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 800899c:	68bb      	ldr	r3, [r7, #8]
 800899e:	681b      	ldr	r3, [r3, #0]
 80089a0:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 80089a2:	697b      	ldr	r3, [r7, #20]
 80089a4:	685b      	ldr	r3, [r3, #4]
 80089a6:	4618      	mov	r0, r3
 80089a8:	f7fd f802 	bl	80059b0 <pbuf_clen>
 80089ac:	4603      	mov	r3, r0
 80089ae:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 80089b0:	68fb      	ldr	r3, [r7, #12]
 80089b2:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80089b6:	8a7a      	ldrh	r2, [r7, #18]
 80089b8:	429a      	cmp	r2, r3
 80089ba:	d906      	bls.n	80089ca <tcp_free_acked_segments+0x42>
 80089bc:	4b2a      	ldr	r3, [pc, #168]	; (8008a68 <tcp_free_acked_segments+0xe0>)
 80089be:	f240 4257 	movw	r2, #1111	; 0x457
 80089c2:	492a      	ldr	r1, [pc, #168]	; (8008a6c <tcp_free_acked_segments+0xe4>)
 80089c4:	482a      	ldr	r0, [pc, #168]	; (8008a70 <tcp_free_acked_segments+0xe8>)
 80089c6:	f005 fd95 	bl	800e4f4 <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 80089ca:	68fb      	ldr	r3, [r7, #12]
 80089cc:	f8b3 2066 	ldrh.w	r2, [r3, #102]	; 0x66
 80089d0:	8a7b      	ldrh	r3, [r7, #18]
 80089d2:	1ad3      	subs	r3, r2, r3
 80089d4:	b29a      	uxth	r2, r3
 80089d6:	68fb      	ldr	r3, [r7, #12]
 80089d8:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 80089dc:	697b      	ldr	r3, [r7, #20]
 80089de:	891a      	ldrh	r2, [r3, #8]
 80089e0:	4b24      	ldr	r3, [pc, #144]	; (8008a74 <tcp_free_acked_segments+0xec>)
 80089e2:	881b      	ldrh	r3, [r3, #0]
 80089e4:	4413      	add	r3, r2
 80089e6:	b29a      	uxth	r2, r3
 80089e8:	4b22      	ldr	r3, [pc, #136]	; (8008a74 <tcp_free_acked_segments+0xec>)
 80089ea:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 80089ec:	6978      	ldr	r0, [r7, #20]
 80089ee:	f7fe f9da 	bl	8006da6 <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 80089f2:	68fb      	ldr	r3, [r7, #12]
 80089f4:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80089f8:	2b00      	cmp	r3, #0
 80089fa:	d00c      	beq.n	8008a16 <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 80089fc:	68bb      	ldr	r3, [r7, #8]
 80089fe:	2b00      	cmp	r3, #0
 8008a00:	d109      	bne.n	8008a16 <tcp_free_acked_segments+0x8e>
 8008a02:	683b      	ldr	r3, [r7, #0]
 8008a04:	2b00      	cmp	r3, #0
 8008a06:	d106      	bne.n	8008a16 <tcp_free_acked_segments+0x8e>
 8008a08:	4b17      	ldr	r3, [pc, #92]	; (8008a68 <tcp_free_acked_segments+0xe0>)
 8008a0a:	f240 4261 	movw	r2, #1121	; 0x461
 8008a0e:	491a      	ldr	r1, [pc, #104]	; (8008a78 <tcp_free_acked_segments+0xf0>)
 8008a10:	4817      	ldr	r0, [pc, #92]	; (8008a70 <tcp_free_acked_segments+0xe8>)
 8008a12:	f005 fd6f 	bl	800e4f4 <iprintf>
  while (seg_list != NULL &&
 8008a16:	68bb      	ldr	r3, [r7, #8]
 8008a18:	2b00      	cmp	r3, #0
 8008a1a:	d020      	beq.n	8008a5e <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 8008a1c:	68bb      	ldr	r3, [r7, #8]
 8008a1e:	68db      	ldr	r3, [r3, #12]
 8008a20:	685b      	ldr	r3, [r3, #4]
 8008a22:	4618      	mov	r0, r3
 8008a24:	f7fb fbf3 	bl	800420e <lwip_htonl>
 8008a28:	4604      	mov	r4, r0
 8008a2a:	68bb      	ldr	r3, [r7, #8]
 8008a2c:	891b      	ldrh	r3, [r3, #8]
 8008a2e:	461d      	mov	r5, r3
 8008a30:	68bb      	ldr	r3, [r7, #8]
 8008a32:	68db      	ldr	r3, [r3, #12]
 8008a34:	899b      	ldrh	r3, [r3, #12]
 8008a36:	b29b      	uxth	r3, r3
 8008a38:	4618      	mov	r0, r3
 8008a3a:	f7fb fbd3 	bl	80041e4 <lwip_htons>
 8008a3e:	4603      	mov	r3, r0
 8008a40:	b2db      	uxtb	r3, r3
 8008a42:	f003 0303 	and.w	r3, r3, #3
 8008a46:	2b00      	cmp	r3, #0
 8008a48:	d001      	beq.n	8008a4e <tcp_free_acked_segments+0xc6>
 8008a4a:	2301      	movs	r3, #1
 8008a4c:	e000      	b.n	8008a50 <tcp_free_acked_segments+0xc8>
 8008a4e:	2300      	movs	r3, #0
 8008a50:	442b      	add	r3, r5
 8008a52:	18e2      	adds	r2, r4, r3
 8008a54:	4b09      	ldr	r3, [pc, #36]	; (8008a7c <tcp_free_acked_segments+0xf4>)
 8008a56:	681b      	ldr	r3, [r3, #0]
 8008a58:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 8008a5a:	2b00      	cmp	r3, #0
 8008a5c:	dd9c      	ble.n	8008998 <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 8008a5e:	68bb      	ldr	r3, [r7, #8]
}
 8008a60:	4618      	mov	r0, r3
 8008a62:	3718      	adds	r7, #24
 8008a64:	46bd      	mov	sp, r7
 8008a66:	bdb0      	pop	{r4, r5, r7, pc}
 8008a68:	0801061c 	.word	0x0801061c
 8008a6c:	08010904 	.word	0x08010904
 8008a70:	08010668 	.word	0x08010668
 8008a74:	200082c0 	.word	0x200082c0
 8008a78:	0801092c 	.word	0x0801092c
 8008a7c:	200082bc 	.word	0x200082bc

08008a80 <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 8008a80:	b5b0      	push	{r4, r5, r7, lr}
 8008a82:	b094      	sub	sp, #80	; 0x50
 8008a84:	af00      	add	r7, sp, #0
 8008a86:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 8008a88:	2300      	movs	r3, #0
 8008a8a:	64bb      	str	r3, [r7, #72]	; 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 8008a8c:	687b      	ldr	r3, [r7, #4]
 8008a8e:	2b00      	cmp	r3, #0
 8008a90:	d106      	bne.n	8008aa0 <tcp_receive+0x20>
 8008a92:	4b91      	ldr	r3, [pc, #580]	; (8008cd8 <tcp_receive+0x258>)
 8008a94:	f240 427b 	movw	r2, #1147	; 0x47b
 8008a98:	4990      	ldr	r1, [pc, #576]	; (8008cdc <tcp_receive+0x25c>)
 8008a9a:	4891      	ldr	r0, [pc, #580]	; (8008ce0 <tcp_receive+0x260>)
 8008a9c:	f005 fd2a 	bl	800e4f4 <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	7d1b      	ldrb	r3, [r3, #20]
 8008aa4:	2b03      	cmp	r3, #3
 8008aa6:	d806      	bhi.n	8008ab6 <tcp_receive+0x36>
 8008aa8:	4b8b      	ldr	r3, [pc, #556]	; (8008cd8 <tcp_receive+0x258>)
 8008aaa:	f240 427c 	movw	r2, #1148	; 0x47c
 8008aae:	498d      	ldr	r1, [pc, #564]	; (8008ce4 <tcp_receive+0x264>)
 8008ab0:	488b      	ldr	r0, [pc, #556]	; (8008ce0 <tcp_receive+0x260>)
 8008ab2:	f005 fd1f 	bl	800e4f4 <iprintf>

  if (flags & TCP_ACK) {
 8008ab6:	4b8c      	ldr	r3, [pc, #560]	; (8008ce8 <tcp_receive+0x268>)
 8008ab8:	781b      	ldrb	r3, [r3, #0]
 8008aba:	f003 0310 	and.w	r3, r3, #16
 8008abe:	2b00      	cmp	r3, #0
 8008ac0:	f000 8264 	beq.w	8008f8c <tcp_receive+0x50c>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8008aca:	461a      	mov	r2, r3
 8008acc:	687b      	ldr	r3, [r7, #4]
 8008ace:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008ad0:	4413      	add	r3, r2
 8008ad2:	633b      	str	r3, [r7, #48]	; 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008ad8:	4b84      	ldr	r3, [pc, #528]	; (8008cec <tcp_receive+0x26c>)
 8008ada:	681b      	ldr	r3, [r3, #0]
 8008adc:	1ad3      	subs	r3, r2, r3
 8008ade:	2b00      	cmp	r3, #0
 8008ae0:	db1b      	blt.n	8008b1a <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8008ae2:	687b      	ldr	r3, [r7, #4]
 8008ae4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008ae6:	4b81      	ldr	r3, [pc, #516]	; (8008cec <tcp_receive+0x26c>)
 8008ae8:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 8008aea:	429a      	cmp	r2, r3
 8008aec:	d106      	bne.n	8008afc <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8008aee:	687b      	ldr	r3, [r7, #4]
 8008af0:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8008af2:	4b7f      	ldr	r3, [pc, #508]	; (8008cf0 <tcp_receive+0x270>)
 8008af4:	681b      	ldr	r3, [r3, #0]
 8008af6:	1ad3      	subs	r3, r2, r3
 8008af8:	2b00      	cmp	r3, #0
 8008afa:	db0e      	blt.n	8008b1a <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8008b00:	4b7b      	ldr	r3, [pc, #492]	; (8008cf0 <tcp_receive+0x270>)
 8008b02:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8008b04:	429a      	cmp	r2, r3
 8008b06:	d125      	bne.n	8008b54 <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8008b08:	4b7a      	ldr	r3, [pc, #488]	; (8008cf4 <tcp_receive+0x274>)
 8008b0a:	681b      	ldr	r3, [r3, #0]
 8008b0c:	89db      	ldrh	r3, [r3, #14]
 8008b0e:	b29a      	uxth	r2, r3
 8008b10:	687b      	ldr	r3, [r7, #4]
 8008b12:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8008b16:	429a      	cmp	r2, r3
 8008b18:	d91c      	bls.n	8008b54 <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 8008b1a:	4b76      	ldr	r3, [pc, #472]	; (8008cf4 <tcp_receive+0x274>)
 8008b1c:	681b      	ldr	r3, [r3, #0]
 8008b1e:	89db      	ldrh	r3, [r3, #14]
 8008b20:	b29a      	uxth	r2, r3
 8008b22:	687b      	ldr	r3, [r7, #4]
 8008b24:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	f8b3 2062 	ldrh.w	r2, [r3, #98]	; 0x62
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8008b34:	429a      	cmp	r2, r3
 8008b36:	d205      	bcs.n	8008b44 <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 8008b38:	687b      	ldr	r3, [r7, #4]
 8008b3a:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8008b3e:	687b      	ldr	r3, [r7, #4]
 8008b40:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      }
      pcb->snd_wl1 = seqno;
 8008b44:	4b69      	ldr	r3, [pc, #420]	; (8008cec <tcp_receive+0x26c>)
 8008b46:	681a      	ldr	r2, [r3, #0]
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	655a      	str	r2, [r3, #84]	; 0x54
      pcb->snd_wl2 = ackno;
 8008b4c:	4b68      	ldr	r3, [pc, #416]	; (8008cf0 <tcp_receive+0x270>)
 8008b4e:	681a      	ldr	r2, [r3, #0]
 8008b50:	687b      	ldr	r3, [r7, #4]
 8008b52:	659a      	str	r2, [r3, #88]	; 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 8008b54:	4b66      	ldr	r3, [pc, #408]	; (8008cf0 <tcp_receive+0x270>)
 8008b56:	681a      	ldr	r2, [r3, #0]
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008b5c:	1ad3      	subs	r3, r2, r3
 8008b5e:	2b00      	cmp	r3, #0
 8008b60:	dc58      	bgt.n	8008c14 <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 8008b62:	4b65      	ldr	r3, [pc, #404]	; (8008cf8 <tcp_receive+0x278>)
 8008b64:	881b      	ldrh	r3, [r3, #0]
 8008b66:	2b00      	cmp	r3, #0
 8008b68:	d14b      	bne.n	8008c02 <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 8008b6a:	687b      	ldr	r3, [r7, #4]
 8008b6c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008b6e:	687a      	ldr	r2, [r7, #4]
 8008b70:	f8b2 2060 	ldrh.w	r2, [r2, #96]	; 0x60
 8008b74:	4413      	add	r3, r2
 8008b76:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008b78:	429a      	cmp	r2, r3
 8008b7a:	d142      	bne.n	8008c02 <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8008b82:	2b00      	cmp	r3, #0
 8008b84:	db3d      	blt.n	8008c02 <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 8008b86:	687b      	ldr	r3, [r7, #4]
 8008b88:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008b8a:	4b59      	ldr	r3, [pc, #356]	; (8008cf0 <tcp_receive+0x270>)
 8008b8c:	681b      	ldr	r3, [r3, #0]
 8008b8e:	429a      	cmp	r2, r3
 8008b90:	d137      	bne.n	8008c02 <tcp_receive+0x182>
              found_dupack = 1;
 8008b92:	2301      	movs	r3, #1
 8008b94:	64bb      	str	r3, [r7, #72]	; 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 8008b96:	687b      	ldr	r3, [r7, #4]
 8008b98:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8008b9c:	2bff      	cmp	r3, #255	; 0xff
 8008b9e:	d007      	beq.n	8008bb0 <tcp_receive+0x130>
                ++pcb->dupacks;
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8008ba6:	3301      	adds	r3, #1
 8008ba8:	b2da      	uxtb	r2, r3
 8008baa:	687b      	ldr	r3, [r7, #4]
 8008bac:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
              }
              if (pcb->dupacks > 3) {
 8008bb0:	687b      	ldr	r3, [r7, #4]
 8008bb2:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8008bb6:	2b03      	cmp	r3, #3
 8008bb8:	d91b      	bls.n	8008bf2 <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 8008bba:	687b      	ldr	r3, [r7, #4]
 8008bbc:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8008bc4:	4413      	add	r3, r2
 8008bc6:	b29a      	uxth	r2, r3
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8008bce:	429a      	cmp	r2, r3
 8008bd0:	d30a      	bcc.n	8008be8 <tcp_receive+0x168>
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8008bdc:	4413      	add	r3, r2
 8008bde:	b29a      	uxth	r2, r3
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8008be6:	e004      	b.n	8008bf2 <tcp_receive+0x172>
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008bee:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
              }
              if (pcb->dupacks >= 3) {
 8008bf2:	687b      	ldr	r3, [r7, #4]
 8008bf4:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8008bf8:	2b02      	cmp	r3, #2
 8008bfa:	d902      	bls.n	8008c02 <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 8008bfc:	6878      	ldr	r0, [r7, #4]
 8008bfe:	f001 feed 	bl	800a9dc <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 8008c02:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008c04:	2b00      	cmp	r3, #0
 8008c06:	f040 8161 	bne.w	8008ecc <tcp_receive+0x44c>
        pcb->dupacks = 0;
 8008c0a:	687b      	ldr	r3, [r7, #4]
 8008c0c:	2200      	movs	r2, #0
 8008c0e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8008c12:	e15b      	b.n	8008ecc <tcp_receive+0x44c>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8008c14:	4b36      	ldr	r3, [pc, #216]	; (8008cf0 <tcp_receive+0x270>)
 8008c16:	681a      	ldr	r2, [r3, #0]
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008c1c:	1ad3      	subs	r3, r2, r3
 8008c1e:	3b01      	subs	r3, #1
 8008c20:	2b00      	cmp	r3, #0
 8008c22:	f2c0 814e 	blt.w	8008ec2 <tcp_receive+0x442>
 8008c26:	4b32      	ldr	r3, [pc, #200]	; (8008cf0 <tcp_receive+0x270>)
 8008c28:	681a      	ldr	r2, [r3, #0]
 8008c2a:	687b      	ldr	r3, [r7, #4]
 8008c2c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008c2e:	1ad3      	subs	r3, r2, r3
 8008c30:	2b00      	cmp	r3, #0
 8008c32:	f300 8146 	bgt.w	8008ec2 <tcp_receive+0x442>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 8008c36:	687b      	ldr	r3, [r7, #4]
 8008c38:	8b5b      	ldrh	r3, [r3, #26]
 8008c3a:	f003 0304 	and.w	r3, r3, #4
 8008c3e:	2b00      	cmp	r3, #0
 8008c40:	d010      	beq.n	8008c64 <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 8008c42:	687b      	ldr	r3, [r7, #4]
 8008c44:	8b5b      	ldrh	r3, [r3, #26]
 8008c46:	f023 0304 	bic.w	r3, r3, #4
 8008c4a:	b29a      	uxth	r2, r3
 8008c4c:	687b      	ldr	r3, [r7, #4]
 8008c4e:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8008c56:	687b      	ldr	r3, [r7, #4]
 8008c58:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
        pcb->bytes_acked = 0;
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	2200      	movs	r2, #0
 8008c60:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 8008c64:	687b      	ldr	r3, [r7, #4]
 8008c66:	2200      	movs	r2, #0
 8008c68:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 8008c6c:	687b      	ldr	r3, [r7, #4]
 8008c6e:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8008c72:	10db      	asrs	r3, r3, #3
 8008c74:	b21b      	sxth	r3, r3
 8008c76:	b29a      	uxth	r2, r3
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8008c7e:	b29b      	uxth	r3, r3
 8008c80:	4413      	add	r3, r2
 8008c82:	b29b      	uxth	r3, r3
 8008c84:	b21a      	sxth	r2, r3
 8008c86:	687b      	ldr	r3, [r7, #4]
 8008c88:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 8008c8c:	4b18      	ldr	r3, [pc, #96]	; (8008cf0 <tcp_receive+0x270>)
 8008c8e:	681b      	ldr	r3, [r3, #0]
 8008c90:	b29a      	uxth	r2, r3
 8008c92:	687b      	ldr	r3, [r7, #4]
 8008c94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008c96:	b29b      	uxth	r3, r3
 8008c98:	1ad3      	subs	r3, r2, r3
 8008c9a:	85fb      	strh	r3, [r7, #46]	; 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	2200      	movs	r2, #0
 8008ca0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
      pcb->lastack = ackno;
 8008ca4:	4b12      	ldr	r3, [pc, #72]	; (8008cf0 <tcp_receive+0x270>)
 8008ca6:	681a      	ldr	r2, [r3, #0]
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	645a      	str	r2, [r3, #68]	; 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	7d1b      	ldrb	r3, [r3, #20]
 8008cb0:	2b03      	cmp	r3, #3
 8008cb2:	f240 8097 	bls.w	8008de4 <tcp_receive+0x364>
        if (pcb->cwnd < pcb->ssthresh) {
 8008cb6:	687b      	ldr	r3, [r7, #4]
 8008cb8:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8008cbc:	687b      	ldr	r3, [r7, #4]
 8008cbe:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 8008cc2:	429a      	cmp	r2, r3
 8008cc4:	d245      	bcs.n	8008d52 <tcp_receive+0x2d2>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 8008cc6:	687b      	ldr	r3, [r7, #4]
 8008cc8:	8b5b      	ldrh	r3, [r3, #26]
 8008cca:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008cce:	2b00      	cmp	r3, #0
 8008cd0:	d014      	beq.n	8008cfc <tcp_receive+0x27c>
 8008cd2:	2301      	movs	r3, #1
 8008cd4:	e013      	b.n	8008cfe <tcp_receive+0x27e>
 8008cd6:	bf00      	nop
 8008cd8:	0801061c 	.word	0x0801061c
 8008cdc:	0801094c 	.word	0x0801094c
 8008ce0:	08010668 	.word	0x08010668
 8008ce4:	08010968 	.word	0x08010968
 8008ce8:	200082c4 	.word	0x200082c4
 8008cec:	200082b8 	.word	0x200082b8
 8008cf0:	200082bc 	.word	0x200082bc
 8008cf4:	200082a8 	.word	0x200082a8
 8008cf8:	200082c2 	.word	0x200082c2
 8008cfc:	2302      	movs	r3, #2
 8008cfe:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 8008d02:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8008d06:	b29a      	uxth	r2, r3
 8008d08:	687b      	ldr	r3, [r7, #4]
 8008d0a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8008d0c:	fb12 f303 	smulbb	r3, r2, r3
 8008d10:	b29b      	uxth	r3, r3
 8008d12:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8008d14:	4293      	cmp	r3, r2
 8008d16:	bf28      	it	cs
 8008d18:	4613      	movcs	r3, r2
 8008d1a:	857b      	strh	r3, [r7, #42]	; 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 8008d1c:	687b      	ldr	r3, [r7, #4]
 8008d1e:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8008d22:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8008d24:	4413      	add	r3, r2
 8008d26:	b29a      	uxth	r2, r3
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8008d2e:	429a      	cmp	r2, r3
 8008d30:	d309      	bcc.n	8008d46 <tcp_receive+0x2c6>
 8008d32:	687b      	ldr	r3, [r7, #4]
 8008d34:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8008d38:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8008d3a:	4413      	add	r3, r2
 8008d3c:	b29a      	uxth	r2, r3
 8008d3e:	687b      	ldr	r3, [r7, #4]
 8008d40:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8008d44:	e04e      	b.n	8008de4 <tcp_receive+0x364>
 8008d46:	687b      	ldr	r3, [r7, #4]
 8008d48:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008d4c:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8008d50:	e048      	b.n	8008de4 <tcp_receive+0x364>
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 8008d52:	687b      	ldr	r3, [r7, #4]
 8008d54:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8008d58:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8008d5a:	4413      	add	r3, r2
 8008d5c:	b29a      	uxth	r2, r3
 8008d5e:	687b      	ldr	r3, [r7, #4]
 8008d60:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8008d64:	429a      	cmp	r2, r3
 8008d66:	d309      	bcc.n	8008d7c <tcp_receive+0x2fc>
 8008d68:	687b      	ldr	r3, [r7, #4]
 8008d6a:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8008d6e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8008d70:	4413      	add	r3, r2
 8008d72:	b29a      	uxth	r2, r3
 8008d74:	687b      	ldr	r3, [r7, #4]
 8008d76:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 8008d7a:	e004      	b.n	8008d86 <tcp_receive+0x306>
 8008d7c:	687b      	ldr	r3, [r7, #4]
 8008d7e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008d82:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 8008d86:	687b      	ldr	r3, [r7, #4]
 8008d88:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8008d92:	429a      	cmp	r2, r3
 8008d94:	d326      	bcc.n	8008de4 <tcp_receive+0x364>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 8008d96:	687b      	ldr	r3, [r7, #4]
 8008d98:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8008d9c:	687b      	ldr	r3, [r7, #4]
 8008d9e:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8008da2:	1ad3      	subs	r3, r2, r3
 8008da4:	b29a      	uxth	r2, r3
 8008da6:	687b      	ldr	r3, [r7, #4]
 8008da8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 8008dac:	687b      	ldr	r3, [r7, #4]
 8008dae:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8008db2:	687b      	ldr	r3, [r7, #4]
 8008db4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8008db6:	4413      	add	r3, r2
 8008db8:	b29a      	uxth	r2, r3
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8008dc0:	429a      	cmp	r2, r3
 8008dc2:	d30a      	bcc.n	8008dda <tcp_receive+0x35a>
 8008dc4:	687b      	ldr	r3, [r7, #4]
 8008dc6:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8008dca:	687b      	ldr	r3, [r7, #4]
 8008dcc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8008dce:	4413      	add	r3, r2
 8008dd0:	b29a      	uxth	r2, r3
 8008dd2:	687b      	ldr	r3, [r7, #4]
 8008dd4:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8008dd8:	e004      	b.n	8008de4 <tcp_receive+0x364>
 8008dda:	687b      	ldr	r3, [r7, #4]
 8008ddc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008de0:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 8008de4:	687b      	ldr	r3, [r7, #4]
 8008de6:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008dec:	4a98      	ldr	r2, [pc, #608]	; (8009050 <tcp_receive+0x5d0>)
 8008dee:	6878      	ldr	r0, [r7, #4]
 8008df0:	f7ff fdca 	bl	8008988 <tcp_free_acked_segments>
 8008df4:	4602      	mov	r2, r0
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	671a      	str	r2, [r3, #112]	; 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 8008dfa:	687b      	ldr	r3, [r7, #4]
 8008dfc:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
 8008dfe:	687b      	ldr	r3, [r7, #4]
 8008e00:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008e02:	4a94      	ldr	r2, [pc, #592]	; (8009054 <tcp_receive+0x5d4>)
 8008e04:	6878      	ldr	r0, [r7, #4]
 8008e06:	f7ff fdbf 	bl	8008988 <tcp_free_acked_segments>
 8008e0a:	4602      	mov	r2, r0
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	66da      	str	r2, [r3, #108]	; 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 8008e10:	687b      	ldr	r3, [r7, #4]
 8008e12:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008e14:	2b00      	cmp	r3, #0
 8008e16:	d104      	bne.n	8008e22 <tcp_receive+0x3a2>
        pcb->rtime = -1;
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008e1e:	861a      	strh	r2, [r3, #48]	; 0x30
 8008e20:	e002      	b.n	8008e28 <tcp_receive+0x3a8>
      } else {
        pcb->rtime = 0;
 8008e22:	687b      	ldr	r3, [r7, #4]
 8008e24:	2200      	movs	r2, #0
 8008e26:	861a      	strh	r2, [r3, #48]	; 0x30
      }

      pcb->polltmr = 0;
 8008e28:	687b      	ldr	r3, [r7, #4]
 8008e2a:	2200      	movs	r2, #0
 8008e2c:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 8008e2e:	687b      	ldr	r3, [r7, #4]
 8008e30:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008e32:	2b00      	cmp	r3, #0
 8008e34:	d103      	bne.n	8008e3e <tcp_receive+0x3be>
        pcb->unsent_oversize = 0;
 8008e36:	687b      	ldr	r3, [r7, #4]
 8008e38:	2200      	movs	r2, #0
 8008e3a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 8008e3e:	687b      	ldr	r3, [r7, #4]
 8008e40:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 8008e44:	4b84      	ldr	r3, [pc, #528]	; (8009058 <tcp_receive+0x5d8>)
 8008e46:	881b      	ldrh	r3, [r3, #0]
 8008e48:	4413      	add	r3, r2
 8008e4a:	b29a      	uxth	r2, r3
 8008e4c:	687b      	ldr	r3, [r7, #4]
 8008e4e:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 8008e52:	687b      	ldr	r3, [r7, #4]
 8008e54:	8b5b      	ldrh	r3, [r3, #26]
 8008e56:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008e5a:	2b00      	cmp	r3, #0
 8008e5c:	d035      	beq.n	8008eca <tcp_receive+0x44a>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 8008e5e:	687b      	ldr	r3, [r7, #4]
 8008e60:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008e62:	2b00      	cmp	r3, #0
 8008e64:	d118      	bne.n	8008e98 <tcp_receive+0x418>
          if ((pcb->unsent == NULL) ||
 8008e66:	687b      	ldr	r3, [r7, #4]
 8008e68:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008e6a:	2b00      	cmp	r3, #0
 8008e6c:	d00c      	beq.n	8008e88 <tcp_receive+0x408>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 8008e6e:	687b      	ldr	r3, [r7, #4]
 8008e70:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 8008e72:	687b      	ldr	r3, [r7, #4]
 8008e74:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008e76:	68db      	ldr	r3, [r3, #12]
 8008e78:	685b      	ldr	r3, [r3, #4]
 8008e7a:	4618      	mov	r0, r3
 8008e7c:	f7fb f9c7 	bl	800420e <lwip_htonl>
 8008e80:	4603      	mov	r3, r0
 8008e82:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 8008e84:	2b00      	cmp	r3, #0
 8008e86:	dc20      	bgt.n	8008eca <tcp_receive+0x44a>
            tcp_clear_flags(pcb, TF_RTO);
 8008e88:	687b      	ldr	r3, [r7, #4]
 8008e8a:	8b5b      	ldrh	r3, [r3, #26]
 8008e8c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008e90:	b29a      	uxth	r2, r3
 8008e92:	687b      	ldr	r3, [r7, #4]
 8008e94:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8008e96:	e018      	b.n	8008eca <tcp_receive+0x44a>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 8008e9c:	687b      	ldr	r3, [r7, #4]
 8008e9e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008ea0:	68db      	ldr	r3, [r3, #12]
 8008ea2:	685b      	ldr	r3, [r3, #4]
 8008ea4:	4618      	mov	r0, r3
 8008ea6:	f7fb f9b2 	bl	800420e <lwip_htonl>
 8008eaa:	4603      	mov	r3, r0
 8008eac:	1ae3      	subs	r3, r4, r3
 8008eae:	2b00      	cmp	r3, #0
 8008eb0:	dc0b      	bgt.n	8008eca <tcp_receive+0x44a>
          tcp_clear_flags(pcb, TF_RTO);
 8008eb2:	687b      	ldr	r3, [r7, #4]
 8008eb4:	8b5b      	ldrh	r3, [r3, #26]
 8008eb6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008eba:	b29a      	uxth	r2, r3
 8008ebc:	687b      	ldr	r3, [r7, #4]
 8008ebe:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8008ec0:	e003      	b.n	8008eca <tcp_receive+0x44a>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 8008ec2:	6878      	ldr	r0, [r7, #4]
 8008ec4:	f001 ff76 	bl	800adb4 <tcp_send_empty_ack>
 8008ec8:	e000      	b.n	8008ecc <tcp_receive+0x44c>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8008eca:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008ed0:	2b00      	cmp	r3, #0
 8008ed2:	d05b      	beq.n	8008f8c <tcp_receive+0x50c>
 8008ed4:	687b      	ldr	r3, [r7, #4]
 8008ed6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008ed8:	4b60      	ldr	r3, [pc, #384]	; (800905c <tcp_receive+0x5dc>)
 8008eda:	681b      	ldr	r3, [r3, #0]
 8008edc:	1ad3      	subs	r3, r2, r3
 8008ede:	2b00      	cmp	r3, #0
 8008ee0:	da54      	bge.n	8008f8c <tcp_receive+0x50c>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 8008ee2:	4b5f      	ldr	r3, [pc, #380]	; (8009060 <tcp_receive+0x5e0>)
 8008ee4:	681b      	ldr	r3, [r3, #0]
 8008ee6:	b29a      	uxth	r2, r3
 8008ee8:	687b      	ldr	r3, [r7, #4]
 8008eea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008eec:	b29b      	uxth	r3, r3
 8008eee:	1ad3      	subs	r3, r2, r3
 8008ef0:	b29b      	uxth	r3, r3
 8008ef2:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 8008ef6:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 8008efa:	687b      	ldr	r3, [r7, #4]
 8008efc:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8008f00:	10db      	asrs	r3, r3, #3
 8008f02:	b21b      	sxth	r3, r3
 8008f04:	b29b      	uxth	r3, r3
 8008f06:	1ad3      	subs	r3, r2, r3
 8008f08:	b29b      	uxth	r3, r3
 8008f0a:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 8008f0e:	687b      	ldr	r3, [r7, #4]
 8008f10:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8008f14:	b29a      	uxth	r2, r3
 8008f16:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8008f1a:	4413      	add	r3, r2
 8008f1c:	b29b      	uxth	r3, r3
 8008f1e:	b21a      	sxth	r2, r3
 8008f20:	687b      	ldr	r3, [r7, #4]
 8008f22:	879a      	strh	r2, [r3, #60]	; 0x3c
      if (m < 0) {
 8008f24:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 8008f28:	2b00      	cmp	r3, #0
 8008f2a:	da05      	bge.n	8008f38 <tcp_receive+0x4b8>
        m = (s16_t) - m;
 8008f2c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8008f30:	425b      	negs	r3, r3
 8008f32:	b29b      	uxth	r3, r3
 8008f34:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 8008f38:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 8008f3c:	687b      	ldr	r3, [r7, #4]
 8008f3e:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8008f42:	109b      	asrs	r3, r3, #2
 8008f44:	b21b      	sxth	r3, r3
 8008f46:	b29b      	uxth	r3, r3
 8008f48:	1ad3      	subs	r3, r2, r3
 8008f4a:	b29b      	uxth	r3, r3
 8008f4c:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8008f56:	b29a      	uxth	r2, r3
 8008f58:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8008f5c:	4413      	add	r3, r2
 8008f5e:	b29b      	uxth	r3, r3
 8008f60:	b21a      	sxth	r2, r3
 8008f62:	687b      	ldr	r3, [r7, #4]
 8008f64:	87da      	strh	r2, [r3, #62]	; 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 8008f66:	687b      	ldr	r3, [r7, #4]
 8008f68:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8008f6c:	10db      	asrs	r3, r3, #3
 8008f6e:	b21b      	sxth	r3, r3
 8008f70:	b29a      	uxth	r2, r3
 8008f72:	687b      	ldr	r3, [r7, #4]
 8008f74:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8008f78:	b29b      	uxth	r3, r3
 8008f7a:	4413      	add	r3, r2
 8008f7c:	b29b      	uxth	r3, r3
 8008f7e:	b21a      	sxth	r2, r3
 8008f80:	687b      	ldr	r3, [r7, #4]
 8008f82:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 8008f86:	687b      	ldr	r3, [r7, #4]
 8008f88:	2200      	movs	r2, #0
 8008f8a:	635a      	str	r2, [r3, #52]	; 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 8008f8c:	4b35      	ldr	r3, [pc, #212]	; (8009064 <tcp_receive+0x5e4>)
 8008f8e:	881b      	ldrh	r3, [r3, #0]
 8008f90:	2b00      	cmp	r3, #0
 8008f92:	f000 84e2 	beq.w	800995a <tcp_receive+0xeda>
 8008f96:	687b      	ldr	r3, [r7, #4]
 8008f98:	7d1b      	ldrb	r3, [r3, #20]
 8008f9a:	2b06      	cmp	r3, #6
 8008f9c:	f200 84dd 	bhi.w	800995a <tcp_receive+0xeda>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 8008fa0:	687b      	ldr	r3, [r7, #4]
 8008fa2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008fa4:	4b30      	ldr	r3, [pc, #192]	; (8009068 <tcp_receive+0x5e8>)
 8008fa6:	681b      	ldr	r3, [r3, #0]
 8008fa8:	1ad3      	subs	r3, r2, r3
 8008faa:	3b01      	subs	r3, #1
 8008fac:	2b00      	cmp	r3, #0
 8008fae:	f2c0 808f 	blt.w	80090d0 <tcp_receive+0x650>
 8008fb2:	687b      	ldr	r3, [r7, #4]
 8008fb4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008fb6:	4b2b      	ldr	r3, [pc, #172]	; (8009064 <tcp_receive+0x5e4>)
 8008fb8:	881b      	ldrh	r3, [r3, #0]
 8008fba:	4619      	mov	r1, r3
 8008fbc:	4b2a      	ldr	r3, [pc, #168]	; (8009068 <tcp_receive+0x5e8>)
 8008fbe:	681b      	ldr	r3, [r3, #0]
 8008fc0:	440b      	add	r3, r1
 8008fc2:	1ad3      	subs	r3, r2, r3
 8008fc4:	3301      	adds	r3, #1
 8008fc6:	2b00      	cmp	r3, #0
 8008fc8:	f300 8082 	bgt.w	80090d0 <tcp_receive+0x650>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 8008fcc:	4b27      	ldr	r3, [pc, #156]	; (800906c <tcp_receive+0x5ec>)
 8008fce:	685b      	ldr	r3, [r3, #4]
 8008fd0:	647b      	str	r3, [r7, #68]	; 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 8008fd2:	687b      	ldr	r3, [r7, #4]
 8008fd4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008fd6:	4b24      	ldr	r3, [pc, #144]	; (8009068 <tcp_receive+0x5e8>)
 8008fd8:	681b      	ldr	r3, [r3, #0]
 8008fda:	1ad3      	subs	r3, r2, r3
 8008fdc:	627b      	str	r3, [r7, #36]	; 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 8008fde:	4b23      	ldr	r3, [pc, #140]	; (800906c <tcp_receive+0x5ec>)
 8008fe0:	685b      	ldr	r3, [r3, #4]
 8008fe2:	2b00      	cmp	r3, #0
 8008fe4:	d106      	bne.n	8008ff4 <tcp_receive+0x574>
 8008fe6:	4b22      	ldr	r3, [pc, #136]	; (8009070 <tcp_receive+0x5f0>)
 8008fe8:	f240 5294 	movw	r2, #1428	; 0x594
 8008fec:	4921      	ldr	r1, [pc, #132]	; (8009074 <tcp_receive+0x5f4>)
 8008fee:	4822      	ldr	r0, [pc, #136]	; (8009078 <tcp_receive+0x5f8>)
 8008ff0:	f005 fa80 	bl	800e4f4 <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 8008ff4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ff6:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8008ffa:	4293      	cmp	r3, r2
 8008ffc:	d906      	bls.n	800900c <tcp_receive+0x58c>
 8008ffe:	4b1c      	ldr	r3, [pc, #112]	; (8009070 <tcp_receive+0x5f0>)
 8009000:	f240 5295 	movw	r2, #1429	; 0x595
 8009004:	491d      	ldr	r1, [pc, #116]	; (800907c <tcp_receive+0x5fc>)
 8009006:	481c      	ldr	r0, [pc, #112]	; (8009078 <tcp_receive+0x5f8>)
 8009008:	f005 fa74 	bl	800e4f4 <iprintf>
      off = (u16_t)off32;
 800900c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800900e:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 8009012:	4b16      	ldr	r3, [pc, #88]	; (800906c <tcp_receive+0x5ec>)
 8009014:	685b      	ldr	r3, [r3, #4]
 8009016:	891b      	ldrh	r3, [r3, #8]
 8009018:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800901c:	429a      	cmp	r2, r3
 800901e:	d906      	bls.n	800902e <tcp_receive+0x5ae>
 8009020:	4b13      	ldr	r3, [pc, #76]	; (8009070 <tcp_receive+0x5f0>)
 8009022:	f240 5297 	movw	r2, #1431	; 0x597
 8009026:	4916      	ldr	r1, [pc, #88]	; (8009080 <tcp_receive+0x600>)
 8009028:	4813      	ldr	r0, [pc, #76]	; (8009078 <tcp_receive+0x5f8>)
 800902a:	f005 fa63 	bl	800e4f4 <iprintf>
      inseg.len -= off;
 800902e:	4b0f      	ldr	r3, [pc, #60]	; (800906c <tcp_receive+0x5ec>)
 8009030:	891a      	ldrh	r2, [r3, #8]
 8009032:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8009036:	1ad3      	subs	r3, r2, r3
 8009038:	b29a      	uxth	r2, r3
 800903a:	4b0c      	ldr	r3, [pc, #48]	; (800906c <tcp_receive+0x5ec>)
 800903c:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 800903e:	4b0b      	ldr	r3, [pc, #44]	; (800906c <tcp_receive+0x5ec>)
 8009040:	685b      	ldr	r3, [r3, #4]
 8009042:	891a      	ldrh	r2, [r3, #8]
 8009044:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8009048:	1ad3      	subs	r3, r2, r3
 800904a:	847b      	strh	r3, [r7, #34]	; 0x22
      while (p->len < off) {
 800904c:	e02a      	b.n	80090a4 <tcp_receive+0x624>
 800904e:	bf00      	nop
 8009050:	08010984 	.word	0x08010984
 8009054:	0801098c 	.word	0x0801098c
 8009058:	200082c0 	.word	0x200082c0
 800905c:	200082bc 	.word	0x200082bc
 8009060:	20008280 	.word	0x20008280
 8009064:	200082c2 	.word	0x200082c2
 8009068:	200082b8 	.word	0x200082b8
 800906c:	20008298 	.word	0x20008298
 8009070:	0801061c 	.word	0x0801061c
 8009074:	08010994 	.word	0x08010994
 8009078:	08010668 	.word	0x08010668
 800907c:	080109a4 	.word	0x080109a4
 8009080:	080109b4 	.word	0x080109b4
        off -= p->len;
 8009084:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009086:	895b      	ldrh	r3, [r3, #10]
 8009088:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800908c:	1ad3      	subs	r3, r2, r3
 800908e:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 8009092:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009094:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8009096:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 8009098:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800909a:	2200      	movs	r2, #0
 800909c:	815a      	strh	r2, [r3, #10]
        p = p->next;
 800909e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80090a0:	681b      	ldr	r3, [r3, #0]
 80090a2:	647b      	str	r3, [r7, #68]	; 0x44
      while (p->len < off) {
 80090a4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80090a6:	895b      	ldrh	r3, [r3, #10]
 80090a8:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80090ac:	429a      	cmp	r2, r3
 80090ae:	d8e9      	bhi.n	8009084 <tcp_receive+0x604>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 80090b0:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80090b4:	4619      	mov	r1, r3
 80090b6:	6c78      	ldr	r0, [r7, #68]	; 0x44
 80090b8:	f7fc fb6c 	bl	8005794 <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 80090bc:	687b      	ldr	r3, [r7, #4]
 80090be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80090c0:	4a91      	ldr	r2, [pc, #580]	; (8009308 <tcp_receive+0x888>)
 80090c2:	6013      	str	r3, [r2, #0]
 80090c4:	4b91      	ldr	r3, [pc, #580]	; (800930c <tcp_receive+0x88c>)
 80090c6:	68db      	ldr	r3, [r3, #12]
 80090c8:	4a8f      	ldr	r2, [pc, #572]	; (8009308 <tcp_receive+0x888>)
 80090ca:	6812      	ldr	r2, [r2, #0]
 80090cc:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 80090ce:	e00d      	b.n	80090ec <tcp_receive+0x66c>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 80090d0:	4b8d      	ldr	r3, [pc, #564]	; (8009308 <tcp_receive+0x888>)
 80090d2:	681a      	ldr	r2, [r3, #0]
 80090d4:	687b      	ldr	r3, [r7, #4]
 80090d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80090d8:	1ad3      	subs	r3, r2, r3
 80090da:	2b00      	cmp	r3, #0
 80090dc:	da06      	bge.n	80090ec <tcp_receive+0x66c>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 80090de:	687b      	ldr	r3, [r7, #4]
 80090e0:	8b5b      	ldrh	r3, [r3, #26]
 80090e2:	f043 0302 	orr.w	r3, r3, #2
 80090e6:	b29a      	uxth	r2, r3
 80090e8:	687b      	ldr	r3, [r7, #4]
 80090ea:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 80090ec:	4b86      	ldr	r3, [pc, #536]	; (8009308 <tcp_receive+0x888>)
 80090ee:	681a      	ldr	r2, [r3, #0]
 80090f0:	687b      	ldr	r3, [r7, #4]
 80090f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80090f4:	1ad3      	subs	r3, r2, r3
 80090f6:	2b00      	cmp	r3, #0
 80090f8:	f2c0 842a 	blt.w	8009950 <tcp_receive+0xed0>
 80090fc:	4b82      	ldr	r3, [pc, #520]	; (8009308 <tcp_receive+0x888>)
 80090fe:	681a      	ldr	r2, [r3, #0]
 8009100:	687b      	ldr	r3, [r7, #4]
 8009102:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009104:	6879      	ldr	r1, [r7, #4]
 8009106:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8009108:	440b      	add	r3, r1
 800910a:	1ad3      	subs	r3, r2, r3
 800910c:	3301      	adds	r3, #1
 800910e:	2b00      	cmp	r3, #0
 8009110:	f300 841e 	bgt.w	8009950 <tcp_receive+0xed0>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 8009114:	687b      	ldr	r3, [r7, #4]
 8009116:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009118:	4b7b      	ldr	r3, [pc, #492]	; (8009308 <tcp_receive+0x888>)
 800911a:	681b      	ldr	r3, [r3, #0]
 800911c:	429a      	cmp	r2, r3
 800911e:	f040 829a 	bne.w	8009656 <tcp_receive+0xbd6>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 8009122:	4b7a      	ldr	r3, [pc, #488]	; (800930c <tcp_receive+0x88c>)
 8009124:	891c      	ldrh	r4, [r3, #8]
 8009126:	4b79      	ldr	r3, [pc, #484]	; (800930c <tcp_receive+0x88c>)
 8009128:	68db      	ldr	r3, [r3, #12]
 800912a:	899b      	ldrh	r3, [r3, #12]
 800912c:	b29b      	uxth	r3, r3
 800912e:	4618      	mov	r0, r3
 8009130:	f7fb f858 	bl	80041e4 <lwip_htons>
 8009134:	4603      	mov	r3, r0
 8009136:	b2db      	uxtb	r3, r3
 8009138:	f003 0303 	and.w	r3, r3, #3
 800913c:	2b00      	cmp	r3, #0
 800913e:	d001      	beq.n	8009144 <tcp_receive+0x6c4>
 8009140:	2301      	movs	r3, #1
 8009142:	e000      	b.n	8009146 <tcp_receive+0x6c6>
 8009144:	2300      	movs	r3, #0
 8009146:	4423      	add	r3, r4
 8009148:	b29a      	uxth	r2, r3
 800914a:	4b71      	ldr	r3, [pc, #452]	; (8009310 <tcp_receive+0x890>)
 800914c:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 800914e:	687b      	ldr	r3, [r7, #4]
 8009150:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8009152:	4b6f      	ldr	r3, [pc, #444]	; (8009310 <tcp_receive+0x890>)
 8009154:	881b      	ldrh	r3, [r3, #0]
 8009156:	429a      	cmp	r2, r3
 8009158:	d275      	bcs.n	8009246 <tcp_receive+0x7c6>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800915a:	4b6c      	ldr	r3, [pc, #432]	; (800930c <tcp_receive+0x88c>)
 800915c:	68db      	ldr	r3, [r3, #12]
 800915e:	899b      	ldrh	r3, [r3, #12]
 8009160:	b29b      	uxth	r3, r3
 8009162:	4618      	mov	r0, r3
 8009164:	f7fb f83e 	bl	80041e4 <lwip_htons>
 8009168:	4603      	mov	r3, r0
 800916a:	b2db      	uxtb	r3, r3
 800916c:	f003 0301 	and.w	r3, r3, #1
 8009170:	2b00      	cmp	r3, #0
 8009172:	d01f      	beq.n	80091b4 <tcp_receive+0x734>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 8009174:	4b65      	ldr	r3, [pc, #404]	; (800930c <tcp_receive+0x88c>)
 8009176:	68db      	ldr	r3, [r3, #12]
 8009178:	899b      	ldrh	r3, [r3, #12]
 800917a:	b29b      	uxth	r3, r3
 800917c:	b21b      	sxth	r3, r3
 800917e:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8009182:	b21c      	sxth	r4, r3
 8009184:	4b61      	ldr	r3, [pc, #388]	; (800930c <tcp_receive+0x88c>)
 8009186:	68db      	ldr	r3, [r3, #12]
 8009188:	899b      	ldrh	r3, [r3, #12]
 800918a:	b29b      	uxth	r3, r3
 800918c:	4618      	mov	r0, r3
 800918e:	f7fb f829 	bl	80041e4 <lwip_htons>
 8009192:	4603      	mov	r3, r0
 8009194:	b2db      	uxtb	r3, r3
 8009196:	b29b      	uxth	r3, r3
 8009198:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 800919c:	b29b      	uxth	r3, r3
 800919e:	4618      	mov	r0, r3
 80091a0:	f7fb f820 	bl	80041e4 <lwip_htons>
 80091a4:	4603      	mov	r3, r0
 80091a6:	b21b      	sxth	r3, r3
 80091a8:	4323      	orrs	r3, r4
 80091aa:	b21a      	sxth	r2, r3
 80091ac:	4b57      	ldr	r3, [pc, #348]	; (800930c <tcp_receive+0x88c>)
 80091ae:	68db      	ldr	r3, [r3, #12]
 80091b0:	b292      	uxth	r2, r2
 80091b2:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 80091b4:	687b      	ldr	r3, [r7, #4]
 80091b6:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 80091b8:	4b54      	ldr	r3, [pc, #336]	; (800930c <tcp_receive+0x88c>)
 80091ba:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 80091bc:	4b53      	ldr	r3, [pc, #332]	; (800930c <tcp_receive+0x88c>)
 80091be:	68db      	ldr	r3, [r3, #12]
 80091c0:	899b      	ldrh	r3, [r3, #12]
 80091c2:	b29b      	uxth	r3, r3
 80091c4:	4618      	mov	r0, r3
 80091c6:	f7fb f80d 	bl	80041e4 <lwip_htons>
 80091ca:	4603      	mov	r3, r0
 80091cc:	b2db      	uxtb	r3, r3
 80091ce:	f003 0302 	and.w	r3, r3, #2
 80091d2:	2b00      	cmp	r3, #0
 80091d4:	d005      	beq.n	80091e2 <tcp_receive+0x762>
            inseg.len -= 1;
 80091d6:	4b4d      	ldr	r3, [pc, #308]	; (800930c <tcp_receive+0x88c>)
 80091d8:	891b      	ldrh	r3, [r3, #8]
 80091da:	3b01      	subs	r3, #1
 80091dc:	b29a      	uxth	r2, r3
 80091de:	4b4b      	ldr	r3, [pc, #300]	; (800930c <tcp_receive+0x88c>)
 80091e0:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 80091e2:	4b4a      	ldr	r3, [pc, #296]	; (800930c <tcp_receive+0x88c>)
 80091e4:	685b      	ldr	r3, [r3, #4]
 80091e6:	4a49      	ldr	r2, [pc, #292]	; (800930c <tcp_receive+0x88c>)
 80091e8:	8912      	ldrh	r2, [r2, #8]
 80091ea:	4611      	mov	r1, r2
 80091ec:	4618      	mov	r0, r3
 80091ee:	f7fc f9d1 	bl	8005594 <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 80091f2:	4b46      	ldr	r3, [pc, #280]	; (800930c <tcp_receive+0x88c>)
 80091f4:	891c      	ldrh	r4, [r3, #8]
 80091f6:	4b45      	ldr	r3, [pc, #276]	; (800930c <tcp_receive+0x88c>)
 80091f8:	68db      	ldr	r3, [r3, #12]
 80091fa:	899b      	ldrh	r3, [r3, #12]
 80091fc:	b29b      	uxth	r3, r3
 80091fe:	4618      	mov	r0, r3
 8009200:	f7fa fff0 	bl	80041e4 <lwip_htons>
 8009204:	4603      	mov	r3, r0
 8009206:	b2db      	uxtb	r3, r3
 8009208:	f003 0303 	and.w	r3, r3, #3
 800920c:	2b00      	cmp	r3, #0
 800920e:	d001      	beq.n	8009214 <tcp_receive+0x794>
 8009210:	2301      	movs	r3, #1
 8009212:	e000      	b.n	8009216 <tcp_receive+0x796>
 8009214:	2300      	movs	r3, #0
 8009216:	4423      	add	r3, r4
 8009218:	b29a      	uxth	r2, r3
 800921a:	4b3d      	ldr	r3, [pc, #244]	; (8009310 <tcp_receive+0x890>)
 800921c:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800921e:	4b3c      	ldr	r3, [pc, #240]	; (8009310 <tcp_receive+0x890>)
 8009220:	881b      	ldrh	r3, [r3, #0]
 8009222:	461a      	mov	r2, r3
 8009224:	4b38      	ldr	r3, [pc, #224]	; (8009308 <tcp_receive+0x888>)
 8009226:	681b      	ldr	r3, [r3, #0]
 8009228:	441a      	add	r2, r3
 800922a:	687b      	ldr	r3, [r7, #4]
 800922c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800922e:	6879      	ldr	r1, [r7, #4]
 8009230:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8009232:	440b      	add	r3, r1
 8009234:	429a      	cmp	r2, r3
 8009236:	d006      	beq.n	8009246 <tcp_receive+0x7c6>
 8009238:	4b36      	ldr	r3, [pc, #216]	; (8009314 <tcp_receive+0x894>)
 800923a:	f240 52cb 	movw	r2, #1483	; 0x5cb
 800923e:	4936      	ldr	r1, [pc, #216]	; (8009318 <tcp_receive+0x898>)
 8009240:	4836      	ldr	r0, [pc, #216]	; (800931c <tcp_receive+0x89c>)
 8009242:	f005 f957 	bl	800e4f4 <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 8009246:	687b      	ldr	r3, [r7, #4]
 8009248:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800924a:	2b00      	cmp	r3, #0
 800924c:	f000 80e7 	beq.w	800941e <tcp_receive+0x99e>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8009250:	4b2e      	ldr	r3, [pc, #184]	; (800930c <tcp_receive+0x88c>)
 8009252:	68db      	ldr	r3, [r3, #12]
 8009254:	899b      	ldrh	r3, [r3, #12]
 8009256:	b29b      	uxth	r3, r3
 8009258:	4618      	mov	r0, r3
 800925a:	f7fa ffc3 	bl	80041e4 <lwip_htons>
 800925e:	4603      	mov	r3, r0
 8009260:	b2db      	uxtb	r3, r3
 8009262:	f003 0301 	and.w	r3, r3, #1
 8009266:	2b00      	cmp	r3, #0
 8009268:	d010      	beq.n	800928c <tcp_receive+0x80c>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 800926a:	e00a      	b.n	8009282 <tcp_receive+0x802>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 800926c:	687b      	ldr	r3, [r7, #4]
 800926e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009270:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 8009272:	687b      	ldr	r3, [r7, #4]
 8009274:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009276:	681a      	ldr	r2, [r3, #0]
 8009278:	687b      	ldr	r3, [r7, #4]
 800927a:	675a      	str	r2, [r3, #116]	; 0x74
              tcp_seg_free(old_ooseq);
 800927c:	68f8      	ldr	r0, [r7, #12]
 800927e:	f7fd fd92 	bl	8006da6 <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 8009282:	687b      	ldr	r3, [r7, #4]
 8009284:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009286:	2b00      	cmp	r3, #0
 8009288:	d1f0      	bne.n	800926c <tcp_receive+0x7ec>
 800928a:	e0c8      	b.n	800941e <tcp_receive+0x99e>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 800928c:	687b      	ldr	r3, [r7, #4]
 800928e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009290:	63fb      	str	r3, [r7, #60]	; 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 8009292:	e052      	b.n	800933a <tcp_receive+0x8ba>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 8009294:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009296:	68db      	ldr	r3, [r3, #12]
 8009298:	899b      	ldrh	r3, [r3, #12]
 800929a:	b29b      	uxth	r3, r3
 800929c:	4618      	mov	r0, r3
 800929e:	f7fa ffa1 	bl	80041e4 <lwip_htons>
 80092a2:	4603      	mov	r3, r0
 80092a4:	b2db      	uxtb	r3, r3
 80092a6:	f003 0301 	and.w	r3, r3, #1
 80092aa:	2b00      	cmp	r3, #0
 80092ac:	d03d      	beq.n	800932a <tcp_receive+0x8aa>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 80092ae:	4b17      	ldr	r3, [pc, #92]	; (800930c <tcp_receive+0x88c>)
 80092b0:	68db      	ldr	r3, [r3, #12]
 80092b2:	899b      	ldrh	r3, [r3, #12]
 80092b4:	b29b      	uxth	r3, r3
 80092b6:	4618      	mov	r0, r3
 80092b8:	f7fa ff94 	bl	80041e4 <lwip_htons>
 80092bc:	4603      	mov	r3, r0
 80092be:	b2db      	uxtb	r3, r3
 80092c0:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 80092c4:	2b00      	cmp	r3, #0
 80092c6:	d130      	bne.n	800932a <tcp_receive+0x8aa>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 80092c8:	4b10      	ldr	r3, [pc, #64]	; (800930c <tcp_receive+0x88c>)
 80092ca:	68db      	ldr	r3, [r3, #12]
 80092cc:	899b      	ldrh	r3, [r3, #12]
 80092ce:	b29c      	uxth	r4, r3
 80092d0:	2001      	movs	r0, #1
 80092d2:	f7fa ff87 	bl	80041e4 <lwip_htons>
 80092d6:	4603      	mov	r3, r0
 80092d8:	461a      	mov	r2, r3
 80092da:	4b0c      	ldr	r3, [pc, #48]	; (800930c <tcp_receive+0x88c>)
 80092dc:	68db      	ldr	r3, [r3, #12]
 80092de:	4322      	orrs	r2, r4
 80092e0:	b292      	uxth	r2, r2
 80092e2:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 80092e4:	4b09      	ldr	r3, [pc, #36]	; (800930c <tcp_receive+0x88c>)
 80092e6:	891c      	ldrh	r4, [r3, #8]
 80092e8:	4b08      	ldr	r3, [pc, #32]	; (800930c <tcp_receive+0x88c>)
 80092ea:	68db      	ldr	r3, [r3, #12]
 80092ec:	899b      	ldrh	r3, [r3, #12]
 80092ee:	b29b      	uxth	r3, r3
 80092f0:	4618      	mov	r0, r3
 80092f2:	f7fa ff77 	bl	80041e4 <lwip_htons>
 80092f6:	4603      	mov	r3, r0
 80092f8:	b2db      	uxtb	r3, r3
 80092fa:	f003 0303 	and.w	r3, r3, #3
 80092fe:	2b00      	cmp	r3, #0
 8009300:	d00e      	beq.n	8009320 <tcp_receive+0x8a0>
 8009302:	2301      	movs	r3, #1
 8009304:	e00d      	b.n	8009322 <tcp_receive+0x8a2>
 8009306:	bf00      	nop
 8009308:	200082b8 	.word	0x200082b8
 800930c:	20008298 	.word	0x20008298
 8009310:	200082c2 	.word	0x200082c2
 8009314:	0801061c 	.word	0x0801061c
 8009318:	080109c4 	.word	0x080109c4
 800931c:	08010668 	.word	0x08010668
 8009320:	2300      	movs	r3, #0
 8009322:	4423      	add	r3, r4
 8009324:	b29a      	uxth	r2, r3
 8009326:	4b98      	ldr	r3, [pc, #608]	; (8009588 <tcp_receive+0xb08>)
 8009328:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 800932a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800932c:	613b      	str	r3, [r7, #16]
              next = next->next;
 800932e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009330:	681b      	ldr	r3, [r3, #0]
 8009332:	63fb      	str	r3, [r7, #60]	; 0x3c
              tcp_seg_free(tmp);
 8009334:	6938      	ldr	r0, [r7, #16]
 8009336:	f7fd fd36 	bl	8006da6 <tcp_seg_free>
            while (next &&
 800933a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800933c:	2b00      	cmp	r3, #0
 800933e:	d00e      	beq.n	800935e <tcp_receive+0x8de>
                   TCP_SEQ_GEQ(seqno + tcplen,
 8009340:	4b91      	ldr	r3, [pc, #580]	; (8009588 <tcp_receive+0xb08>)
 8009342:	881b      	ldrh	r3, [r3, #0]
 8009344:	461a      	mov	r2, r3
 8009346:	4b91      	ldr	r3, [pc, #580]	; (800958c <tcp_receive+0xb0c>)
 8009348:	681b      	ldr	r3, [r3, #0]
 800934a:	441a      	add	r2, r3
 800934c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800934e:	68db      	ldr	r3, [r3, #12]
 8009350:	685b      	ldr	r3, [r3, #4]
 8009352:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8009354:	8909      	ldrh	r1, [r1, #8]
 8009356:	440b      	add	r3, r1
 8009358:	1ad3      	subs	r3, r2, r3
            while (next &&
 800935a:	2b00      	cmp	r3, #0
 800935c:	da9a      	bge.n	8009294 <tcp_receive+0x814>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 800935e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009360:	2b00      	cmp	r3, #0
 8009362:	d059      	beq.n	8009418 <tcp_receive+0x998>
                TCP_SEQ_GT(seqno + tcplen,
 8009364:	4b88      	ldr	r3, [pc, #544]	; (8009588 <tcp_receive+0xb08>)
 8009366:	881b      	ldrh	r3, [r3, #0]
 8009368:	461a      	mov	r2, r3
 800936a:	4b88      	ldr	r3, [pc, #544]	; (800958c <tcp_receive+0xb0c>)
 800936c:	681b      	ldr	r3, [r3, #0]
 800936e:	441a      	add	r2, r3
 8009370:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009372:	68db      	ldr	r3, [r3, #12]
 8009374:	685b      	ldr	r3, [r3, #4]
 8009376:	1ad3      	subs	r3, r2, r3
            if (next &&
 8009378:	2b00      	cmp	r3, #0
 800937a:	dd4d      	ble.n	8009418 <tcp_receive+0x998>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 800937c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800937e:	68db      	ldr	r3, [r3, #12]
 8009380:	685b      	ldr	r3, [r3, #4]
 8009382:	b29a      	uxth	r2, r3
 8009384:	4b81      	ldr	r3, [pc, #516]	; (800958c <tcp_receive+0xb0c>)
 8009386:	681b      	ldr	r3, [r3, #0]
 8009388:	b29b      	uxth	r3, r3
 800938a:	1ad3      	subs	r3, r2, r3
 800938c:	b29a      	uxth	r2, r3
 800938e:	4b80      	ldr	r3, [pc, #512]	; (8009590 <tcp_receive+0xb10>)
 8009390:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8009392:	4b7f      	ldr	r3, [pc, #508]	; (8009590 <tcp_receive+0xb10>)
 8009394:	68db      	ldr	r3, [r3, #12]
 8009396:	899b      	ldrh	r3, [r3, #12]
 8009398:	b29b      	uxth	r3, r3
 800939a:	4618      	mov	r0, r3
 800939c:	f7fa ff22 	bl	80041e4 <lwip_htons>
 80093a0:	4603      	mov	r3, r0
 80093a2:	b2db      	uxtb	r3, r3
 80093a4:	f003 0302 	and.w	r3, r3, #2
 80093a8:	2b00      	cmp	r3, #0
 80093aa:	d005      	beq.n	80093b8 <tcp_receive+0x938>
                inseg.len -= 1;
 80093ac:	4b78      	ldr	r3, [pc, #480]	; (8009590 <tcp_receive+0xb10>)
 80093ae:	891b      	ldrh	r3, [r3, #8]
 80093b0:	3b01      	subs	r3, #1
 80093b2:	b29a      	uxth	r2, r3
 80093b4:	4b76      	ldr	r3, [pc, #472]	; (8009590 <tcp_receive+0xb10>)
 80093b6:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 80093b8:	4b75      	ldr	r3, [pc, #468]	; (8009590 <tcp_receive+0xb10>)
 80093ba:	685b      	ldr	r3, [r3, #4]
 80093bc:	4a74      	ldr	r2, [pc, #464]	; (8009590 <tcp_receive+0xb10>)
 80093be:	8912      	ldrh	r2, [r2, #8]
 80093c0:	4611      	mov	r1, r2
 80093c2:	4618      	mov	r0, r3
 80093c4:	f7fc f8e6 	bl	8005594 <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 80093c8:	4b71      	ldr	r3, [pc, #452]	; (8009590 <tcp_receive+0xb10>)
 80093ca:	891c      	ldrh	r4, [r3, #8]
 80093cc:	4b70      	ldr	r3, [pc, #448]	; (8009590 <tcp_receive+0xb10>)
 80093ce:	68db      	ldr	r3, [r3, #12]
 80093d0:	899b      	ldrh	r3, [r3, #12]
 80093d2:	b29b      	uxth	r3, r3
 80093d4:	4618      	mov	r0, r3
 80093d6:	f7fa ff05 	bl	80041e4 <lwip_htons>
 80093da:	4603      	mov	r3, r0
 80093dc:	b2db      	uxtb	r3, r3
 80093de:	f003 0303 	and.w	r3, r3, #3
 80093e2:	2b00      	cmp	r3, #0
 80093e4:	d001      	beq.n	80093ea <tcp_receive+0x96a>
 80093e6:	2301      	movs	r3, #1
 80093e8:	e000      	b.n	80093ec <tcp_receive+0x96c>
 80093ea:	2300      	movs	r3, #0
 80093ec:	4423      	add	r3, r4
 80093ee:	b29a      	uxth	r2, r3
 80093f0:	4b65      	ldr	r3, [pc, #404]	; (8009588 <tcp_receive+0xb08>)
 80093f2:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 80093f4:	4b64      	ldr	r3, [pc, #400]	; (8009588 <tcp_receive+0xb08>)
 80093f6:	881b      	ldrh	r3, [r3, #0]
 80093f8:	461a      	mov	r2, r3
 80093fa:	4b64      	ldr	r3, [pc, #400]	; (800958c <tcp_receive+0xb0c>)
 80093fc:	681b      	ldr	r3, [r3, #0]
 80093fe:	441a      	add	r2, r3
 8009400:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009402:	68db      	ldr	r3, [r3, #12]
 8009404:	685b      	ldr	r3, [r3, #4]
 8009406:	429a      	cmp	r2, r3
 8009408:	d006      	beq.n	8009418 <tcp_receive+0x998>
 800940a:	4b62      	ldr	r3, [pc, #392]	; (8009594 <tcp_receive+0xb14>)
 800940c:	f240 52fc 	movw	r2, #1532	; 0x5fc
 8009410:	4961      	ldr	r1, [pc, #388]	; (8009598 <tcp_receive+0xb18>)
 8009412:	4862      	ldr	r0, [pc, #392]	; (800959c <tcp_receive+0xb1c>)
 8009414:	f005 f86e 	bl	800e4f4 <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 8009418:	687b      	ldr	r3, [r7, #4]
 800941a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800941c:	675a      	str	r2, [r3, #116]	; 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 800941e:	4b5a      	ldr	r3, [pc, #360]	; (8009588 <tcp_receive+0xb08>)
 8009420:	881b      	ldrh	r3, [r3, #0]
 8009422:	461a      	mov	r2, r3
 8009424:	4b59      	ldr	r3, [pc, #356]	; (800958c <tcp_receive+0xb0c>)
 8009426:	681b      	ldr	r3, [r3, #0]
 8009428:	441a      	add	r2, r3
 800942a:	687b      	ldr	r3, [r7, #4]
 800942c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 800942e:	687b      	ldr	r3, [r7, #4]
 8009430:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8009432:	4b55      	ldr	r3, [pc, #340]	; (8009588 <tcp_receive+0xb08>)
 8009434:	881b      	ldrh	r3, [r3, #0]
 8009436:	429a      	cmp	r2, r3
 8009438:	d206      	bcs.n	8009448 <tcp_receive+0x9c8>
 800943a:	4b56      	ldr	r3, [pc, #344]	; (8009594 <tcp_receive+0xb14>)
 800943c:	f240 6207 	movw	r2, #1543	; 0x607
 8009440:	4957      	ldr	r1, [pc, #348]	; (80095a0 <tcp_receive+0xb20>)
 8009442:	4856      	ldr	r0, [pc, #344]	; (800959c <tcp_receive+0xb1c>)
 8009444:	f005 f856 	bl	800e4f4 <iprintf>
        pcb->rcv_wnd -= tcplen;
 8009448:	687b      	ldr	r3, [r7, #4]
 800944a:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800944c:	4b4e      	ldr	r3, [pc, #312]	; (8009588 <tcp_receive+0xb08>)
 800944e:	881b      	ldrh	r3, [r3, #0]
 8009450:	1ad3      	subs	r3, r2, r3
 8009452:	b29a      	uxth	r2, r3
 8009454:	687b      	ldr	r3, [r7, #4]
 8009456:	851a      	strh	r2, [r3, #40]	; 0x28

        tcp_update_rcv_ann_wnd(pcb);
 8009458:	6878      	ldr	r0, [r7, #4]
 800945a:	f7fc ffc5 	bl	80063e8 <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 800945e:	4b4c      	ldr	r3, [pc, #304]	; (8009590 <tcp_receive+0xb10>)
 8009460:	685b      	ldr	r3, [r3, #4]
 8009462:	891b      	ldrh	r3, [r3, #8]
 8009464:	2b00      	cmp	r3, #0
 8009466:	d006      	beq.n	8009476 <tcp_receive+0x9f6>
          recv_data = inseg.p;
 8009468:	4b49      	ldr	r3, [pc, #292]	; (8009590 <tcp_receive+0xb10>)
 800946a:	685b      	ldr	r3, [r3, #4]
 800946c:	4a4d      	ldr	r2, [pc, #308]	; (80095a4 <tcp_receive+0xb24>)
 800946e:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 8009470:	4b47      	ldr	r3, [pc, #284]	; (8009590 <tcp_receive+0xb10>)
 8009472:	2200      	movs	r2, #0
 8009474:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8009476:	4b46      	ldr	r3, [pc, #280]	; (8009590 <tcp_receive+0xb10>)
 8009478:	68db      	ldr	r3, [r3, #12]
 800947a:	899b      	ldrh	r3, [r3, #12]
 800947c:	b29b      	uxth	r3, r3
 800947e:	4618      	mov	r0, r3
 8009480:	f7fa feb0 	bl	80041e4 <lwip_htons>
 8009484:	4603      	mov	r3, r0
 8009486:	b2db      	uxtb	r3, r3
 8009488:	f003 0301 	and.w	r3, r3, #1
 800948c:	2b00      	cmp	r3, #0
 800948e:	f000 80b8 	beq.w	8009602 <tcp_receive+0xb82>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 8009492:	4b45      	ldr	r3, [pc, #276]	; (80095a8 <tcp_receive+0xb28>)
 8009494:	781b      	ldrb	r3, [r3, #0]
 8009496:	f043 0320 	orr.w	r3, r3, #32
 800949a:	b2da      	uxtb	r2, r3
 800949c:	4b42      	ldr	r3, [pc, #264]	; (80095a8 <tcp_receive+0xb28>)
 800949e:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 80094a0:	e0af      	b.n	8009602 <tcp_receive+0xb82>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 80094a2:	687b      	ldr	r3, [r7, #4]
 80094a4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80094a6:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 80094a8:	687b      	ldr	r3, [r7, #4]
 80094aa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80094ac:	68db      	ldr	r3, [r3, #12]
 80094ae:	685b      	ldr	r3, [r3, #4]
 80094b0:	4a36      	ldr	r2, [pc, #216]	; (800958c <tcp_receive+0xb0c>)
 80094b2:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 80094b4:	68bb      	ldr	r3, [r7, #8]
 80094b6:	891b      	ldrh	r3, [r3, #8]
 80094b8:	461c      	mov	r4, r3
 80094ba:	68bb      	ldr	r3, [r7, #8]
 80094bc:	68db      	ldr	r3, [r3, #12]
 80094be:	899b      	ldrh	r3, [r3, #12]
 80094c0:	b29b      	uxth	r3, r3
 80094c2:	4618      	mov	r0, r3
 80094c4:	f7fa fe8e 	bl	80041e4 <lwip_htons>
 80094c8:	4603      	mov	r3, r0
 80094ca:	b2db      	uxtb	r3, r3
 80094cc:	f003 0303 	and.w	r3, r3, #3
 80094d0:	2b00      	cmp	r3, #0
 80094d2:	d001      	beq.n	80094d8 <tcp_receive+0xa58>
 80094d4:	2301      	movs	r3, #1
 80094d6:	e000      	b.n	80094da <tcp_receive+0xa5a>
 80094d8:	2300      	movs	r3, #0
 80094da:	191a      	adds	r2, r3, r4
 80094dc:	687b      	ldr	r3, [r7, #4]
 80094de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80094e0:	441a      	add	r2, r3
 80094e2:	687b      	ldr	r3, [r7, #4]
 80094e4:	625a      	str	r2, [r3, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 80094e6:	687b      	ldr	r3, [r7, #4]
 80094e8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80094ea:	461c      	mov	r4, r3
 80094ec:	68bb      	ldr	r3, [r7, #8]
 80094ee:	891b      	ldrh	r3, [r3, #8]
 80094f0:	461d      	mov	r5, r3
 80094f2:	68bb      	ldr	r3, [r7, #8]
 80094f4:	68db      	ldr	r3, [r3, #12]
 80094f6:	899b      	ldrh	r3, [r3, #12]
 80094f8:	b29b      	uxth	r3, r3
 80094fa:	4618      	mov	r0, r3
 80094fc:	f7fa fe72 	bl	80041e4 <lwip_htons>
 8009500:	4603      	mov	r3, r0
 8009502:	b2db      	uxtb	r3, r3
 8009504:	f003 0303 	and.w	r3, r3, #3
 8009508:	2b00      	cmp	r3, #0
 800950a:	d001      	beq.n	8009510 <tcp_receive+0xa90>
 800950c:	2301      	movs	r3, #1
 800950e:	e000      	b.n	8009512 <tcp_receive+0xa92>
 8009510:	2300      	movs	r3, #0
 8009512:	442b      	add	r3, r5
 8009514:	429c      	cmp	r4, r3
 8009516:	d206      	bcs.n	8009526 <tcp_receive+0xaa6>
 8009518:	4b1e      	ldr	r3, [pc, #120]	; (8009594 <tcp_receive+0xb14>)
 800951a:	f240 622b 	movw	r2, #1579	; 0x62b
 800951e:	4923      	ldr	r1, [pc, #140]	; (80095ac <tcp_receive+0xb2c>)
 8009520:	481e      	ldr	r0, [pc, #120]	; (800959c <tcp_receive+0xb1c>)
 8009522:	f004 ffe7 	bl	800e4f4 <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 8009526:	68bb      	ldr	r3, [r7, #8]
 8009528:	891b      	ldrh	r3, [r3, #8]
 800952a:	461c      	mov	r4, r3
 800952c:	68bb      	ldr	r3, [r7, #8]
 800952e:	68db      	ldr	r3, [r3, #12]
 8009530:	899b      	ldrh	r3, [r3, #12]
 8009532:	b29b      	uxth	r3, r3
 8009534:	4618      	mov	r0, r3
 8009536:	f7fa fe55 	bl	80041e4 <lwip_htons>
 800953a:	4603      	mov	r3, r0
 800953c:	b2db      	uxtb	r3, r3
 800953e:	f003 0303 	and.w	r3, r3, #3
 8009542:	2b00      	cmp	r3, #0
 8009544:	d001      	beq.n	800954a <tcp_receive+0xaca>
 8009546:	2301      	movs	r3, #1
 8009548:	e000      	b.n	800954c <tcp_receive+0xacc>
 800954a:	2300      	movs	r3, #0
 800954c:	1919      	adds	r1, r3, r4
 800954e:	687b      	ldr	r3, [r7, #4]
 8009550:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8009552:	b28b      	uxth	r3, r1
 8009554:	1ad3      	subs	r3, r2, r3
 8009556:	b29a      	uxth	r2, r3
 8009558:	687b      	ldr	r3, [r7, #4]
 800955a:	851a      	strh	r2, [r3, #40]	; 0x28

          tcp_update_rcv_ann_wnd(pcb);
 800955c:	6878      	ldr	r0, [r7, #4]
 800955e:	f7fc ff43 	bl	80063e8 <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 8009562:	68bb      	ldr	r3, [r7, #8]
 8009564:	685b      	ldr	r3, [r3, #4]
 8009566:	891b      	ldrh	r3, [r3, #8]
 8009568:	2b00      	cmp	r3, #0
 800956a:	d028      	beq.n	80095be <tcp_receive+0xb3e>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 800956c:	4b0d      	ldr	r3, [pc, #52]	; (80095a4 <tcp_receive+0xb24>)
 800956e:	681b      	ldr	r3, [r3, #0]
 8009570:	2b00      	cmp	r3, #0
 8009572:	d01d      	beq.n	80095b0 <tcp_receive+0xb30>
              pbuf_cat(recv_data, cseg->p);
 8009574:	4b0b      	ldr	r3, [pc, #44]	; (80095a4 <tcp_receive+0xb24>)
 8009576:	681a      	ldr	r2, [r3, #0]
 8009578:	68bb      	ldr	r3, [r7, #8]
 800957a:	685b      	ldr	r3, [r3, #4]
 800957c:	4619      	mov	r1, r3
 800957e:	4610      	mov	r0, r2
 8009580:	f7fc fa50 	bl	8005a24 <pbuf_cat>
 8009584:	e018      	b.n	80095b8 <tcp_receive+0xb38>
 8009586:	bf00      	nop
 8009588:	200082c2 	.word	0x200082c2
 800958c:	200082b8 	.word	0x200082b8
 8009590:	20008298 	.word	0x20008298
 8009594:	0801061c 	.word	0x0801061c
 8009598:	080109fc 	.word	0x080109fc
 800959c:	08010668 	.word	0x08010668
 80095a0:	08010a38 	.word	0x08010a38
 80095a4:	200082c8 	.word	0x200082c8
 80095a8:	200082c5 	.word	0x200082c5
 80095ac:	08010a58 	.word	0x08010a58
            } else {
              recv_data = cseg->p;
 80095b0:	68bb      	ldr	r3, [r7, #8]
 80095b2:	685b      	ldr	r3, [r3, #4]
 80095b4:	4a70      	ldr	r2, [pc, #448]	; (8009778 <tcp_receive+0xcf8>)
 80095b6:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 80095b8:	68bb      	ldr	r3, [r7, #8]
 80095ba:	2200      	movs	r2, #0
 80095bc:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 80095be:	68bb      	ldr	r3, [r7, #8]
 80095c0:	68db      	ldr	r3, [r3, #12]
 80095c2:	899b      	ldrh	r3, [r3, #12]
 80095c4:	b29b      	uxth	r3, r3
 80095c6:	4618      	mov	r0, r3
 80095c8:	f7fa fe0c 	bl	80041e4 <lwip_htons>
 80095cc:	4603      	mov	r3, r0
 80095ce:	b2db      	uxtb	r3, r3
 80095d0:	f003 0301 	and.w	r3, r3, #1
 80095d4:	2b00      	cmp	r3, #0
 80095d6:	d00d      	beq.n	80095f4 <tcp_receive+0xb74>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 80095d8:	4b68      	ldr	r3, [pc, #416]	; (800977c <tcp_receive+0xcfc>)
 80095da:	781b      	ldrb	r3, [r3, #0]
 80095dc:	f043 0320 	orr.w	r3, r3, #32
 80095e0:	b2da      	uxtb	r2, r3
 80095e2:	4b66      	ldr	r3, [pc, #408]	; (800977c <tcp_receive+0xcfc>)
 80095e4:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 80095e6:	687b      	ldr	r3, [r7, #4]
 80095e8:	7d1b      	ldrb	r3, [r3, #20]
 80095ea:	2b04      	cmp	r3, #4
 80095ec:	d102      	bne.n	80095f4 <tcp_receive+0xb74>
              pcb->state = CLOSE_WAIT;
 80095ee:	687b      	ldr	r3, [r7, #4]
 80095f0:	2207      	movs	r2, #7
 80095f2:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 80095f4:	68bb      	ldr	r3, [r7, #8]
 80095f6:	681a      	ldr	r2, [r3, #0]
 80095f8:	687b      	ldr	r3, [r7, #4]
 80095fa:	675a      	str	r2, [r3, #116]	; 0x74
          tcp_seg_free(cseg);
 80095fc:	68b8      	ldr	r0, [r7, #8]
 80095fe:	f7fd fbd2 	bl	8006da6 <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 8009602:	687b      	ldr	r3, [r7, #4]
 8009604:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009606:	2b00      	cmp	r3, #0
 8009608:	d008      	beq.n	800961c <tcp_receive+0xb9c>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 800960a:	687b      	ldr	r3, [r7, #4]
 800960c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800960e:	68db      	ldr	r3, [r3, #12]
 8009610:	685a      	ldr	r2, [r3, #4]
 8009612:	687b      	ldr	r3, [r7, #4]
 8009614:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        while (pcb->ooseq != NULL &&
 8009616:	429a      	cmp	r2, r3
 8009618:	f43f af43 	beq.w	80094a2 <tcp_receive+0xa22>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 800961c:	687b      	ldr	r3, [r7, #4]
 800961e:	8b5b      	ldrh	r3, [r3, #26]
 8009620:	f003 0301 	and.w	r3, r3, #1
 8009624:	2b00      	cmp	r3, #0
 8009626:	d00e      	beq.n	8009646 <tcp_receive+0xbc6>
 8009628:	687b      	ldr	r3, [r7, #4]
 800962a:	8b5b      	ldrh	r3, [r3, #26]
 800962c:	f023 0301 	bic.w	r3, r3, #1
 8009630:	b29a      	uxth	r2, r3
 8009632:	687b      	ldr	r3, [r7, #4]
 8009634:	835a      	strh	r2, [r3, #26]
 8009636:	687b      	ldr	r3, [r7, #4]
 8009638:	8b5b      	ldrh	r3, [r3, #26]
 800963a:	f043 0302 	orr.w	r3, r3, #2
 800963e:	b29a      	uxth	r2, r3
 8009640:	687b      	ldr	r3, [r7, #4]
 8009642:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 8009644:	e188      	b.n	8009958 <tcp_receive+0xed8>
        tcp_ack(pcb);
 8009646:	687b      	ldr	r3, [r7, #4]
 8009648:	8b5b      	ldrh	r3, [r3, #26]
 800964a:	f043 0301 	orr.w	r3, r3, #1
 800964e:	b29a      	uxth	r2, r3
 8009650:	687b      	ldr	r3, [r7, #4]
 8009652:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 8009654:	e180      	b.n	8009958 <tcp_receive+0xed8>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 8009656:	687b      	ldr	r3, [r7, #4]
 8009658:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800965a:	2b00      	cmp	r3, #0
 800965c:	d106      	bne.n	800966c <tcp_receive+0xbec>
          pcb->ooseq = tcp_seg_copy(&inseg);
 800965e:	4848      	ldr	r0, [pc, #288]	; (8009780 <tcp_receive+0xd00>)
 8009660:	f7fd fbba 	bl	8006dd8 <tcp_seg_copy>
 8009664:	4602      	mov	r2, r0
 8009666:	687b      	ldr	r3, [r7, #4]
 8009668:	675a      	str	r2, [r3, #116]	; 0x74
 800966a:	e16d      	b.n	8009948 <tcp_receive+0xec8>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 800966c:	2300      	movs	r3, #0
 800966e:	637b      	str	r3, [r7, #52]	; 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 8009670:	687b      	ldr	r3, [r7, #4]
 8009672:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009674:	63bb      	str	r3, [r7, #56]	; 0x38
 8009676:	e157      	b.n	8009928 <tcp_receive+0xea8>
            if (seqno == next->tcphdr->seqno) {
 8009678:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800967a:	68db      	ldr	r3, [r3, #12]
 800967c:	685a      	ldr	r2, [r3, #4]
 800967e:	4b41      	ldr	r3, [pc, #260]	; (8009784 <tcp_receive+0xd04>)
 8009680:	681b      	ldr	r3, [r3, #0]
 8009682:	429a      	cmp	r2, r3
 8009684:	d11d      	bne.n	80096c2 <tcp_receive+0xc42>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 8009686:	4b3e      	ldr	r3, [pc, #248]	; (8009780 <tcp_receive+0xd00>)
 8009688:	891a      	ldrh	r2, [r3, #8]
 800968a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800968c:	891b      	ldrh	r3, [r3, #8]
 800968e:	429a      	cmp	r2, r3
 8009690:	f240 814f 	bls.w	8009932 <tcp_receive+0xeb2>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8009694:	483a      	ldr	r0, [pc, #232]	; (8009780 <tcp_receive+0xd00>)
 8009696:	f7fd fb9f 	bl	8006dd8 <tcp_seg_copy>
 800969a:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 800969c:	697b      	ldr	r3, [r7, #20]
 800969e:	2b00      	cmp	r3, #0
 80096a0:	f000 8149 	beq.w	8009936 <tcp_receive+0xeb6>
                  if (prev != NULL) {
 80096a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80096a6:	2b00      	cmp	r3, #0
 80096a8:	d003      	beq.n	80096b2 <tcp_receive+0xc32>
                    prev->next = cseg;
 80096aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80096ac:	697a      	ldr	r2, [r7, #20]
 80096ae:	601a      	str	r2, [r3, #0]
 80096b0:	e002      	b.n	80096b8 <tcp_receive+0xc38>
                  } else {
                    pcb->ooseq = cseg;
 80096b2:	687b      	ldr	r3, [r7, #4]
 80096b4:	697a      	ldr	r2, [r7, #20]
 80096b6:	675a      	str	r2, [r3, #116]	; 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 80096b8:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80096ba:	6978      	ldr	r0, [r7, #20]
 80096bc:	f7ff f8dc 	bl	8008878 <tcp_oos_insert_segment>
                }
                break;
 80096c0:	e139      	b.n	8009936 <tcp_receive+0xeb6>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 80096c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80096c4:	2b00      	cmp	r3, #0
 80096c6:	d117      	bne.n	80096f8 <tcp_receive+0xc78>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 80096c8:	4b2e      	ldr	r3, [pc, #184]	; (8009784 <tcp_receive+0xd04>)
 80096ca:	681a      	ldr	r2, [r3, #0]
 80096cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80096ce:	68db      	ldr	r3, [r3, #12]
 80096d0:	685b      	ldr	r3, [r3, #4]
 80096d2:	1ad3      	subs	r3, r2, r3
 80096d4:	2b00      	cmp	r3, #0
 80096d6:	da57      	bge.n	8009788 <tcp_receive+0xd08>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 80096d8:	4829      	ldr	r0, [pc, #164]	; (8009780 <tcp_receive+0xd00>)
 80096da:	f7fd fb7d 	bl	8006dd8 <tcp_seg_copy>
 80096de:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 80096e0:	69bb      	ldr	r3, [r7, #24]
 80096e2:	2b00      	cmp	r3, #0
 80096e4:	f000 8129 	beq.w	800993a <tcp_receive+0xeba>
                    pcb->ooseq = cseg;
 80096e8:	687b      	ldr	r3, [r7, #4]
 80096ea:	69ba      	ldr	r2, [r7, #24]
 80096ec:	675a      	str	r2, [r3, #116]	; 0x74
                    tcp_oos_insert_segment(cseg, next);
 80096ee:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80096f0:	69b8      	ldr	r0, [r7, #24]
 80096f2:	f7ff f8c1 	bl	8008878 <tcp_oos_insert_segment>
                  }
                  break;
 80096f6:	e120      	b.n	800993a <tcp_receive+0xeba>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 80096f8:	4b22      	ldr	r3, [pc, #136]	; (8009784 <tcp_receive+0xd04>)
 80096fa:	681a      	ldr	r2, [r3, #0]
 80096fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80096fe:	68db      	ldr	r3, [r3, #12]
 8009700:	685b      	ldr	r3, [r3, #4]
 8009702:	1ad3      	subs	r3, r2, r3
 8009704:	3b01      	subs	r3, #1
 8009706:	2b00      	cmp	r3, #0
 8009708:	db3e      	blt.n	8009788 <tcp_receive+0xd08>
 800970a:	4b1e      	ldr	r3, [pc, #120]	; (8009784 <tcp_receive+0xd04>)
 800970c:	681a      	ldr	r2, [r3, #0]
 800970e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009710:	68db      	ldr	r3, [r3, #12]
 8009712:	685b      	ldr	r3, [r3, #4]
 8009714:	1ad3      	subs	r3, r2, r3
 8009716:	3301      	adds	r3, #1
 8009718:	2b00      	cmp	r3, #0
 800971a:	dc35      	bgt.n	8009788 <tcp_receive+0xd08>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800971c:	4818      	ldr	r0, [pc, #96]	; (8009780 <tcp_receive+0xd00>)
 800971e:	f7fd fb5b 	bl	8006dd8 <tcp_seg_copy>
 8009722:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 8009724:	69fb      	ldr	r3, [r7, #28]
 8009726:	2b00      	cmp	r3, #0
 8009728:	f000 8109 	beq.w	800993e <tcp_receive+0xebe>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 800972c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800972e:	68db      	ldr	r3, [r3, #12]
 8009730:	685b      	ldr	r3, [r3, #4]
 8009732:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009734:	8912      	ldrh	r2, [r2, #8]
 8009736:	441a      	add	r2, r3
 8009738:	4b12      	ldr	r3, [pc, #72]	; (8009784 <tcp_receive+0xd04>)
 800973a:	681b      	ldr	r3, [r3, #0]
 800973c:	1ad3      	subs	r3, r2, r3
 800973e:	2b00      	cmp	r3, #0
 8009740:	dd12      	ble.n	8009768 <tcp_receive+0xce8>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 8009742:	4b10      	ldr	r3, [pc, #64]	; (8009784 <tcp_receive+0xd04>)
 8009744:	681b      	ldr	r3, [r3, #0]
 8009746:	b29a      	uxth	r2, r3
 8009748:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800974a:	68db      	ldr	r3, [r3, #12]
 800974c:	685b      	ldr	r3, [r3, #4]
 800974e:	b29b      	uxth	r3, r3
 8009750:	1ad3      	subs	r3, r2, r3
 8009752:	b29a      	uxth	r2, r3
 8009754:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009756:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 8009758:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800975a:	685a      	ldr	r2, [r3, #4]
 800975c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800975e:	891b      	ldrh	r3, [r3, #8]
 8009760:	4619      	mov	r1, r3
 8009762:	4610      	mov	r0, r2
 8009764:	f7fb ff16 	bl	8005594 <pbuf_realloc>
                    }
                    prev->next = cseg;
 8009768:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800976a:	69fa      	ldr	r2, [r7, #28]
 800976c:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 800976e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8009770:	69f8      	ldr	r0, [r7, #28]
 8009772:	f7ff f881 	bl	8008878 <tcp_oos_insert_segment>
                  }
                  break;
 8009776:	e0e2      	b.n	800993e <tcp_receive+0xebe>
 8009778:	200082c8 	.word	0x200082c8
 800977c:	200082c5 	.word	0x200082c5
 8009780:	20008298 	.word	0x20008298
 8009784:	200082b8 	.word	0x200082b8
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 8009788:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800978a:	637b      	str	r3, [r7, #52]	; 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 800978c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800978e:	681b      	ldr	r3, [r3, #0]
 8009790:	2b00      	cmp	r3, #0
 8009792:	f040 80c6 	bne.w	8009922 <tcp_receive+0xea2>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 8009796:	4b80      	ldr	r3, [pc, #512]	; (8009998 <tcp_receive+0xf18>)
 8009798:	681a      	ldr	r2, [r3, #0]
 800979a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800979c:	68db      	ldr	r3, [r3, #12]
 800979e:	685b      	ldr	r3, [r3, #4]
 80097a0:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 80097a2:	2b00      	cmp	r3, #0
 80097a4:	f340 80bd 	ble.w	8009922 <tcp_receive+0xea2>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 80097a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80097aa:	68db      	ldr	r3, [r3, #12]
 80097ac:	899b      	ldrh	r3, [r3, #12]
 80097ae:	b29b      	uxth	r3, r3
 80097b0:	4618      	mov	r0, r3
 80097b2:	f7fa fd17 	bl	80041e4 <lwip_htons>
 80097b6:	4603      	mov	r3, r0
 80097b8:	b2db      	uxtb	r3, r3
 80097ba:	f003 0301 	and.w	r3, r3, #1
 80097be:	2b00      	cmp	r3, #0
 80097c0:	f040 80bf 	bne.w	8009942 <tcp_receive+0xec2>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 80097c4:	4875      	ldr	r0, [pc, #468]	; (800999c <tcp_receive+0xf1c>)
 80097c6:	f7fd fb07 	bl	8006dd8 <tcp_seg_copy>
 80097ca:	4602      	mov	r2, r0
 80097cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80097ce:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 80097d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80097d2:	681b      	ldr	r3, [r3, #0]
 80097d4:	2b00      	cmp	r3, #0
 80097d6:	f000 80b6 	beq.w	8009946 <tcp_receive+0xec6>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 80097da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80097dc:	68db      	ldr	r3, [r3, #12]
 80097de:	685b      	ldr	r3, [r3, #4]
 80097e0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80097e2:	8912      	ldrh	r2, [r2, #8]
 80097e4:	441a      	add	r2, r3
 80097e6:	4b6c      	ldr	r3, [pc, #432]	; (8009998 <tcp_receive+0xf18>)
 80097e8:	681b      	ldr	r3, [r3, #0]
 80097ea:	1ad3      	subs	r3, r2, r3
 80097ec:	2b00      	cmp	r3, #0
 80097ee:	dd12      	ble.n	8009816 <tcp_receive+0xd96>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 80097f0:	4b69      	ldr	r3, [pc, #420]	; (8009998 <tcp_receive+0xf18>)
 80097f2:	681b      	ldr	r3, [r3, #0]
 80097f4:	b29a      	uxth	r2, r3
 80097f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80097f8:	68db      	ldr	r3, [r3, #12]
 80097fa:	685b      	ldr	r3, [r3, #4]
 80097fc:	b29b      	uxth	r3, r3
 80097fe:	1ad3      	subs	r3, r2, r3
 8009800:	b29a      	uxth	r2, r3
 8009802:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009804:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 8009806:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009808:	685a      	ldr	r2, [r3, #4]
 800980a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800980c:	891b      	ldrh	r3, [r3, #8]
 800980e:	4619      	mov	r1, r3
 8009810:	4610      	mov	r0, r2
 8009812:	f7fb febf 	bl	8005594 <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 8009816:	4b62      	ldr	r3, [pc, #392]	; (80099a0 <tcp_receive+0xf20>)
 8009818:	881b      	ldrh	r3, [r3, #0]
 800981a:	461a      	mov	r2, r3
 800981c:	4b5e      	ldr	r3, [pc, #376]	; (8009998 <tcp_receive+0xf18>)
 800981e:	681b      	ldr	r3, [r3, #0]
 8009820:	441a      	add	r2, r3
 8009822:	687b      	ldr	r3, [r7, #4]
 8009824:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009826:	6879      	ldr	r1, [r7, #4]
 8009828:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800982a:	440b      	add	r3, r1
 800982c:	1ad3      	subs	r3, r2, r3
 800982e:	2b00      	cmp	r3, #0
 8009830:	f340 8089 	ble.w	8009946 <tcp_receive+0xec6>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 8009834:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009836:	681b      	ldr	r3, [r3, #0]
 8009838:	68db      	ldr	r3, [r3, #12]
 800983a:	899b      	ldrh	r3, [r3, #12]
 800983c:	b29b      	uxth	r3, r3
 800983e:	4618      	mov	r0, r3
 8009840:	f7fa fcd0 	bl	80041e4 <lwip_htons>
 8009844:	4603      	mov	r3, r0
 8009846:	b2db      	uxtb	r3, r3
 8009848:	f003 0301 	and.w	r3, r3, #1
 800984c:	2b00      	cmp	r3, #0
 800984e:	d022      	beq.n	8009896 <tcp_receive+0xe16>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 8009850:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009852:	681b      	ldr	r3, [r3, #0]
 8009854:	68db      	ldr	r3, [r3, #12]
 8009856:	899b      	ldrh	r3, [r3, #12]
 8009858:	b29b      	uxth	r3, r3
 800985a:	b21b      	sxth	r3, r3
 800985c:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8009860:	b21c      	sxth	r4, r3
 8009862:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009864:	681b      	ldr	r3, [r3, #0]
 8009866:	68db      	ldr	r3, [r3, #12]
 8009868:	899b      	ldrh	r3, [r3, #12]
 800986a:	b29b      	uxth	r3, r3
 800986c:	4618      	mov	r0, r3
 800986e:	f7fa fcb9 	bl	80041e4 <lwip_htons>
 8009872:	4603      	mov	r3, r0
 8009874:	b2db      	uxtb	r3, r3
 8009876:	b29b      	uxth	r3, r3
 8009878:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 800987c:	b29b      	uxth	r3, r3
 800987e:	4618      	mov	r0, r3
 8009880:	f7fa fcb0 	bl	80041e4 <lwip_htons>
 8009884:	4603      	mov	r3, r0
 8009886:	b21b      	sxth	r3, r3
 8009888:	4323      	orrs	r3, r4
 800988a:	b21a      	sxth	r2, r3
 800988c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800988e:	681b      	ldr	r3, [r3, #0]
 8009890:	68db      	ldr	r3, [r3, #12]
 8009892:	b292      	uxth	r2, r2
 8009894:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 8009896:	687b      	ldr	r3, [r7, #4]
 8009898:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800989a:	b29a      	uxth	r2, r3
 800989c:	687b      	ldr	r3, [r7, #4]
 800989e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80098a0:	4413      	add	r3, r2
 80098a2:	b299      	uxth	r1, r3
 80098a4:	4b3c      	ldr	r3, [pc, #240]	; (8009998 <tcp_receive+0xf18>)
 80098a6:	681b      	ldr	r3, [r3, #0]
 80098a8:	b29a      	uxth	r2, r3
 80098aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80098ac:	681b      	ldr	r3, [r3, #0]
 80098ae:	1a8a      	subs	r2, r1, r2
 80098b0:	b292      	uxth	r2, r2
 80098b2:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 80098b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80098b6:	681b      	ldr	r3, [r3, #0]
 80098b8:	685a      	ldr	r2, [r3, #4]
 80098ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80098bc:	681b      	ldr	r3, [r3, #0]
 80098be:	891b      	ldrh	r3, [r3, #8]
 80098c0:	4619      	mov	r1, r3
 80098c2:	4610      	mov	r0, r2
 80098c4:	f7fb fe66 	bl	8005594 <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 80098c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80098ca:	681b      	ldr	r3, [r3, #0]
 80098cc:	891c      	ldrh	r4, [r3, #8]
 80098ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80098d0:	681b      	ldr	r3, [r3, #0]
 80098d2:	68db      	ldr	r3, [r3, #12]
 80098d4:	899b      	ldrh	r3, [r3, #12]
 80098d6:	b29b      	uxth	r3, r3
 80098d8:	4618      	mov	r0, r3
 80098da:	f7fa fc83 	bl	80041e4 <lwip_htons>
 80098de:	4603      	mov	r3, r0
 80098e0:	b2db      	uxtb	r3, r3
 80098e2:	f003 0303 	and.w	r3, r3, #3
 80098e6:	2b00      	cmp	r3, #0
 80098e8:	d001      	beq.n	80098ee <tcp_receive+0xe6e>
 80098ea:	2301      	movs	r3, #1
 80098ec:	e000      	b.n	80098f0 <tcp_receive+0xe70>
 80098ee:	2300      	movs	r3, #0
 80098f0:	4423      	add	r3, r4
 80098f2:	b29a      	uxth	r2, r3
 80098f4:	4b2a      	ldr	r3, [pc, #168]	; (80099a0 <tcp_receive+0xf20>)
 80098f6:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 80098f8:	4b29      	ldr	r3, [pc, #164]	; (80099a0 <tcp_receive+0xf20>)
 80098fa:	881b      	ldrh	r3, [r3, #0]
 80098fc:	461a      	mov	r2, r3
 80098fe:	4b26      	ldr	r3, [pc, #152]	; (8009998 <tcp_receive+0xf18>)
 8009900:	681b      	ldr	r3, [r3, #0]
 8009902:	441a      	add	r2, r3
 8009904:	687b      	ldr	r3, [r7, #4]
 8009906:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009908:	6879      	ldr	r1, [r7, #4]
 800990a:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800990c:	440b      	add	r3, r1
 800990e:	429a      	cmp	r2, r3
 8009910:	d019      	beq.n	8009946 <tcp_receive+0xec6>
 8009912:	4b24      	ldr	r3, [pc, #144]	; (80099a4 <tcp_receive+0xf24>)
 8009914:	f44f 62df 	mov.w	r2, #1784	; 0x6f8
 8009918:	4923      	ldr	r1, [pc, #140]	; (80099a8 <tcp_receive+0xf28>)
 800991a:	4824      	ldr	r0, [pc, #144]	; (80099ac <tcp_receive+0xf2c>)
 800991c:	f004 fdea 	bl	800e4f4 <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 8009920:	e011      	b.n	8009946 <tcp_receive+0xec6>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 8009922:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009924:	681b      	ldr	r3, [r3, #0]
 8009926:	63bb      	str	r3, [r7, #56]	; 0x38
 8009928:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800992a:	2b00      	cmp	r3, #0
 800992c:	f47f aea4 	bne.w	8009678 <tcp_receive+0xbf8>
 8009930:	e00a      	b.n	8009948 <tcp_receive+0xec8>
                break;
 8009932:	bf00      	nop
 8009934:	e008      	b.n	8009948 <tcp_receive+0xec8>
                break;
 8009936:	bf00      	nop
 8009938:	e006      	b.n	8009948 <tcp_receive+0xec8>
                  break;
 800993a:	bf00      	nop
 800993c:	e004      	b.n	8009948 <tcp_receive+0xec8>
                  break;
 800993e:	bf00      	nop
 8009940:	e002      	b.n	8009948 <tcp_receive+0xec8>
                  break;
 8009942:	bf00      	nop
 8009944:	e000      	b.n	8009948 <tcp_receive+0xec8>
                break;
 8009946:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 8009948:	6878      	ldr	r0, [r7, #4]
 800994a:	f001 fa33 	bl	800adb4 <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 800994e:	e003      	b.n	8009958 <tcp_receive+0xed8>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 8009950:	6878      	ldr	r0, [r7, #4]
 8009952:	f001 fa2f 	bl	800adb4 <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8009956:	e01a      	b.n	800998e <tcp_receive+0xf0e>
 8009958:	e019      	b.n	800998e <tcp_receive+0xf0e>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 800995a:	4b0f      	ldr	r3, [pc, #60]	; (8009998 <tcp_receive+0xf18>)
 800995c:	681a      	ldr	r2, [r3, #0]
 800995e:	687b      	ldr	r3, [r7, #4]
 8009960:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009962:	1ad3      	subs	r3, r2, r3
 8009964:	2b00      	cmp	r3, #0
 8009966:	db0a      	blt.n	800997e <tcp_receive+0xefe>
 8009968:	4b0b      	ldr	r3, [pc, #44]	; (8009998 <tcp_receive+0xf18>)
 800996a:	681a      	ldr	r2, [r3, #0]
 800996c:	687b      	ldr	r3, [r7, #4]
 800996e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009970:	6879      	ldr	r1, [r7, #4]
 8009972:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8009974:	440b      	add	r3, r1
 8009976:	1ad3      	subs	r3, r2, r3
 8009978:	3301      	adds	r3, #1
 800997a:	2b00      	cmp	r3, #0
 800997c:	dd07      	ble.n	800998e <tcp_receive+0xf0e>
      tcp_ack_now(pcb);
 800997e:	687b      	ldr	r3, [r7, #4]
 8009980:	8b5b      	ldrh	r3, [r3, #26]
 8009982:	f043 0302 	orr.w	r3, r3, #2
 8009986:	b29a      	uxth	r2, r3
 8009988:	687b      	ldr	r3, [r7, #4]
 800998a:	835a      	strh	r2, [r3, #26]
    }
  }
}
 800998c:	e7ff      	b.n	800998e <tcp_receive+0xf0e>
 800998e:	bf00      	nop
 8009990:	3750      	adds	r7, #80	; 0x50
 8009992:	46bd      	mov	sp, r7
 8009994:	bdb0      	pop	{r4, r5, r7, pc}
 8009996:	bf00      	nop
 8009998:	200082b8 	.word	0x200082b8
 800999c:	20008298 	.word	0x20008298
 80099a0:	200082c2 	.word	0x200082c2
 80099a4:	0801061c 	.word	0x0801061c
 80099a8:	080109c4 	.word	0x080109c4
 80099ac:	08010668 	.word	0x08010668

080099b0 <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 80099b0:	b480      	push	{r7}
 80099b2:	b083      	sub	sp, #12
 80099b4:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 80099b6:	4b15      	ldr	r3, [pc, #84]	; (8009a0c <tcp_get_next_optbyte+0x5c>)
 80099b8:	881b      	ldrh	r3, [r3, #0]
 80099ba:	1c5a      	adds	r2, r3, #1
 80099bc:	b291      	uxth	r1, r2
 80099be:	4a13      	ldr	r2, [pc, #76]	; (8009a0c <tcp_get_next_optbyte+0x5c>)
 80099c0:	8011      	strh	r1, [r2, #0]
 80099c2:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 80099c4:	4b12      	ldr	r3, [pc, #72]	; (8009a10 <tcp_get_next_optbyte+0x60>)
 80099c6:	681b      	ldr	r3, [r3, #0]
 80099c8:	2b00      	cmp	r3, #0
 80099ca:	d004      	beq.n	80099d6 <tcp_get_next_optbyte+0x26>
 80099cc:	4b11      	ldr	r3, [pc, #68]	; (8009a14 <tcp_get_next_optbyte+0x64>)
 80099ce:	881b      	ldrh	r3, [r3, #0]
 80099d0:	88fa      	ldrh	r2, [r7, #6]
 80099d2:	429a      	cmp	r2, r3
 80099d4:	d208      	bcs.n	80099e8 <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 80099d6:	4b10      	ldr	r3, [pc, #64]	; (8009a18 <tcp_get_next_optbyte+0x68>)
 80099d8:	681b      	ldr	r3, [r3, #0]
 80099da:	3314      	adds	r3, #20
 80099dc:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 80099de:	88fb      	ldrh	r3, [r7, #6]
 80099e0:	683a      	ldr	r2, [r7, #0]
 80099e2:	4413      	add	r3, r2
 80099e4:	781b      	ldrb	r3, [r3, #0]
 80099e6:	e00b      	b.n	8009a00 <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 80099e8:	88fb      	ldrh	r3, [r7, #6]
 80099ea:	b2da      	uxtb	r2, r3
 80099ec:	4b09      	ldr	r3, [pc, #36]	; (8009a14 <tcp_get_next_optbyte+0x64>)
 80099ee:	881b      	ldrh	r3, [r3, #0]
 80099f0:	b2db      	uxtb	r3, r3
 80099f2:	1ad3      	subs	r3, r2, r3
 80099f4:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 80099f6:	4b06      	ldr	r3, [pc, #24]	; (8009a10 <tcp_get_next_optbyte+0x60>)
 80099f8:	681a      	ldr	r2, [r3, #0]
 80099fa:	797b      	ldrb	r3, [r7, #5]
 80099fc:	4413      	add	r3, r2
 80099fe:	781b      	ldrb	r3, [r3, #0]
  }
}
 8009a00:	4618      	mov	r0, r3
 8009a02:	370c      	adds	r7, #12
 8009a04:	46bd      	mov	sp, r7
 8009a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a0a:	4770      	bx	lr
 8009a0c:	200082b4 	.word	0x200082b4
 8009a10:	200082b0 	.word	0x200082b0
 8009a14:	200082ae 	.word	0x200082ae
 8009a18:	200082a8 	.word	0x200082a8

08009a1c <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 8009a1c:	b580      	push	{r7, lr}
 8009a1e:	b084      	sub	sp, #16
 8009a20:	af00      	add	r7, sp, #0
 8009a22:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 8009a24:	687b      	ldr	r3, [r7, #4]
 8009a26:	2b00      	cmp	r3, #0
 8009a28:	d106      	bne.n	8009a38 <tcp_parseopt+0x1c>
 8009a2a:	4b32      	ldr	r3, [pc, #200]	; (8009af4 <tcp_parseopt+0xd8>)
 8009a2c:	f240 727d 	movw	r2, #1917	; 0x77d
 8009a30:	4931      	ldr	r1, [pc, #196]	; (8009af8 <tcp_parseopt+0xdc>)
 8009a32:	4832      	ldr	r0, [pc, #200]	; (8009afc <tcp_parseopt+0xe0>)
 8009a34:	f004 fd5e 	bl	800e4f4 <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 8009a38:	4b31      	ldr	r3, [pc, #196]	; (8009b00 <tcp_parseopt+0xe4>)
 8009a3a:	881b      	ldrh	r3, [r3, #0]
 8009a3c:	2b00      	cmp	r3, #0
 8009a3e:	d055      	beq.n	8009aec <tcp_parseopt+0xd0>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8009a40:	4b30      	ldr	r3, [pc, #192]	; (8009b04 <tcp_parseopt+0xe8>)
 8009a42:	2200      	movs	r2, #0
 8009a44:	801a      	strh	r2, [r3, #0]
 8009a46:	e045      	b.n	8009ad4 <tcp_parseopt+0xb8>
      u8_t opt = tcp_get_next_optbyte();
 8009a48:	f7ff ffb2 	bl	80099b0 <tcp_get_next_optbyte>
 8009a4c:	4603      	mov	r3, r0
 8009a4e:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 8009a50:	7bfb      	ldrb	r3, [r7, #15]
 8009a52:	2b02      	cmp	r3, #2
 8009a54:	d006      	beq.n	8009a64 <tcp_parseopt+0x48>
 8009a56:	2b02      	cmp	r3, #2
 8009a58:	dc2b      	bgt.n	8009ab2 <tcp_parseopt+0x96>
 8009a5a:	2b00      	cmp	r3, #0
 8009a5c:	d041      	beq.n	8009ae2 <tcp_parseopt+0xc6>
 8009a5e:	2b01      	cmp	r3, #1
 8009a60:	d127      	bne.n	8009ab2 <tcp_parseopt+0x96>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: EOL\n"));
          return;
        case LWIP_TCP_OPT_NOP:
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
 8009a62:	e037      	b.n	8009ad4 <tcp_parseopt+0xb8>
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 8009a64:	f7ff ffa4 	bl	80099b0 <tcp_get_next_optbyte>
 8009a68:	4603      	mov	r3, r0
 8009a6a:	2b04      	cmp	r3, #4
 8009a6c:	d13b      	bne.n	8009ae6 <tcp_parseopt+0xca>
 8009a6e:	4b25      	ldr	r3, [pc, #148]	; (8009b04 <tcp_parseopt+0xe8>)
 8009a70:	881b      	ldrh	r3, [r3, #0]
 8009a72:	3301      	adds	r3, #1
 8009a74:	4a22      	ldr	r2, [pc, #136]	; (8009b00 <tcp_parseopt+0xe4>)
 8009a76:	8812      	ldrh	r2, [r2, #0]
 8009a78:	4293      	cmp	r3, r2
 8009a7a:	da34      	bge.n	8009ae6 <tcp_parseopt+0xca>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 8009a7c:	f7ff ff98 	bl	80099b0 <tcp_get_next_optbyte>
 8009a80:	4603      	mov	r3, r0
 8009a82:	b29b      	uxth	r3, r3
 8009a84:	021b      	lsls	r3, r3, #8
 8009a86:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 8009a88:	f7ff ff92 	bl	80099b0 <tcp_get_next_optbyte>
 8009a8c:	4603      	mov	r3, r0
 8009a8e:	b29a      	uxth	r2, r3
 8009a90:	89bb      	ldrh	r3, [r7, #12]
 8009a92:	4313      	orrs	r3, r2
 8009a94:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 8009a96:	89bb      	ldrh	r3, [r7, #12]
 8009a98:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 8009a9c:	d804      	bhi.n	8009aa8 <tcp_parseopt+0x8c>
 8009a9e:	89bb      	ldrh	r3, [r7, #12]
 8009aa0:	2b00      	cmp	r3, #0
 8009aa2:	d001      	beq.n	8009aa8 <tcp_parseopt+0x8c>
 8009aa4:	89ba      	ldrh	r2, [r7, #12]
 8009aa6:	e001      	b.n	8009aac <tcp_parseopt+0x90>
 8009aa8:	f44f 7206 	mov.w	r2, #536	; 0x218
 8009aac:	687b      	ldr	r3, [r7, #4]
 8009aae:	865a      	strh	r2, [r3, #50]	; 0x32
          break;
 8009ab0:	e010      	b.n	8009ad4 <tcp_parseopt+0xb8>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 8009ab2:	f7ff ff7d 	bl	80099b0 <tcp_get_next_optbyte>
 8009ab6:	4603      	mov	r3, r0
 8009ab8:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 8009aba:	7afb      	ldrb	r3, [r7, #11]
 8009abc:	2b01      	cmp	r3, #1
 8009abe:	d914      	bls.n	8009aea <tcp_parseopt+0xce>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 8009ac0:	7afb      	ldrb	r3, [r7, #11]
 8009ac2:	b29a      	uxth	r2, r3
 8009ac4:	4b0f      	ldr	r3, [pc, #60]	; (8009b04 <tcp_parseopt+0xe8>)
 8009ac6:	881b      	ldrh	r3, [r3, #0]
 8009ac8:	4413      	add	r3, r2
 8009aca:	b29b      	uxth	r3, r3
 8009acc:	3b02      	subs	r3, #2
 8009ace:	b29a      	uxth	r2, r3
 8009ad0:	4b0c      	ldr	r3, [pc, #48]	; (8009b04 <tcp_parseopt+0xe8>)
 8009ad2:	801a      	strh	r2, [r3, #0]
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8009ad4:	4b0b      	ldr	r3, [pc, #44]	; (8009b04 <tcp_parseopt+0xe8>)
 8009ad6:	881a      	ldrh	r2, [r3, #0]
 8009ad8:	4b09      	ldr	r3, [pc, #36]	; (8009b00 <tcp_parseopt+0xe4>)
 8009ada:	881b      	ldrh	r3, [r3, #0]
 8009adc:	429a      	cmp	r2, r3
 8009ade:	d3b3      	bcc.n	8009a48 <tcp_parseopt+0x2c>
 8009ae0:	e004      	b.n	8009aec <tcp_parseopt+0xd0>
          return;
 8009ae2:	bf00      	nop
 8009ae4:	e002      	b.n	8009aec <tcp_parseopt+0xd0>
            return;
 8009ae6:	bf00      	nop
 8009ae8:	e000      	b.n	8009aec <tcp_parseopt+0xd0>
            return;
 8009aea:	bf00      	nop
      }
    }
  }
}
 8009aec:	3710      	adds	r7, #16
 8009aee:	46bd      	mov	sp, r7
 8009af0:	bd80      	pop	{r7, pc}
 8009af2:	bf00      	nop
 8009af4:	0801061c 	.word	0x0801061c
 8009af8:	08010a80 	.word	0x08010a80
 8009afc:	08010668 	.word	0x08010668
 8009b00:	200082ac 	.word	0x200082ac
 8009b04:	200082b4 	.word	0x200082b4

08009b08 <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 8009b08:	b480      	push	{r7}
 8009b0a:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 8009b0c:	4b05      	ldr	r3, [pc, #20]	; (8009b24 <tcp_trigger_input_pcb_close+0x1c>)
 8009b0e:	781b      	ldrb	r3, [r3, #0]
 8009b10:	f043 0310 	orr.w	r3, r3, #16
 8009b14:	b2da      	uxtb	r2, r3
 8009b16:	4b03      	ldr	r3, [pc, #12]	; (8009b24 <tcp_trigger_input_pcb_close+0x1c>)
 8009b18:	701a      	strb	r2, [r3, #0]
}
 8009b1a:	bf00      	nop
 8009b1c:	46bd      	mov	sp, r7
 8009b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b22:	4770      	bx	lr
 8009b24:	200082c5 	.word	0x200082c5

08009b28 <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 8009b28:	b580      	push	{r7, lr}
 8009b2a:	b084      	sub	sp, #16
 8009b2c:	af00      	add	r7, sp, #0
 8009b2e:	60f8      	str	r0, [r7, #12]
 8009b30:	60b9      	str	r1, [r7, #8]
 8009b32:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 8009b34:	68fb      	ldr	r3, [r7, #12]
 8009b36:	2b00      	cmp	r3, #0
 8009b38:	d00a      	beq.n	8009b50 <tcp_route+0x28>
 8009b3a:	68fb      	ldr	r3, [r7, #12]
 8009b3c:	7a1b      	ldrb	r3, [r3, #8]
 8009b3e:	2b00      	cmp	r3, #0
 8009b40:	d006      	beq.n	8009b50 <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 8009b42:	68fb      	ldr	r3, [r7, #12]
 8009b44:	7a1b      	ldrb	r3, [r3, #8]
 8009b46:	4618      	mov	r0, r3
 8009b48:	f7fb fb4a 	bl	80051e0 <netif_get_by_index>
 8009b4c:	4603      	mov	r3, r0
 8009b4e:	e003      	b.n	8009b58 <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 8009b50:	6878      	ldr	r0, [r7, #4]
 8009b52:	f003 f9f5 	bl	800cf40 <ip4_route>
 8009b56:	4603      	mov	r3, r0
  }
}
 8009b58:	4618      	mov	r0, r3
 8009b5a:	3710      	adds	r7, #16
 8009b5c:	46bd      	mov	sp, r7
 8009b5e:	bd80      	pop	{r7, pc}

08009b60 <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 8009b60:	b590      	push	{r4, r7, lr}
 8009b62:	b087      	sub	sp, #28
 8009b64:	af00      	add	r7, sp, #0
 8009b66:	60f8      	str	r0, [r7, #12]
 8009b68:	60b9      	str	r1, [r7, #8]
 8009b6a:	603b      	str	r3, [r7, #0]
 8009b6c:	4613      	mov	r3, r2
 8009b6e:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 8009b70:	68fb      	ldr	r3, [r7, #12]
 8009b72:	2b00      	cmp	r3, #0
 8009b74:	d105      	bne.n	8009b82 <tcp_create_segment+0x22>
 8009b76:	4b44      	ldr	r3, [pc, #272]	; (8009c88 <tcp_create_segment+0x128>)
 8009b78:	22a3      	movs	r2, #163	; 0xa3
 8009b7a:	4944      	ldr	r1, [pc, #272]	; (8009c8c <tcp_create_segment+0x12c>)
 8009b7c:	4844      	ldr	r0, [pc, #272]	; (8009c90 <tcp_create_segment+0x130>)
 8009b7e:	f004 fcb9 	bl	800e4f4 <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 8009b82:	68bb      	ldr	r3, [r7, #8]
 8009b84:	2b00      	cmp	r3, #0
 8009b86:	d105      	bne.n	8009b94 <tcp_create_segment+0x34>
 8009b88:	4b3f      	ldr	r3, [pc, #252]	; (8009c88 <tcp_create_segment+0x128>)
 8009b8a:	22a4      	movs	r2, #164	; 0xa4
 8009b8c:	4941      	ldr	r1, [pc, #260]	; (8009c94 <tcp_create_segment+0x134>)
 8009b8e:	4840      	ldr	r0, [pc, #256]	; (8009c90 <tcp_create_segment+0x130>)
 8009b90:	f004 fcb0 	bl	800e4f4 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8009b94:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8009b98:	009b      	lsls	r3, r3, #2
 8009b9a:	b2db      	uxtb	r3, r3
 8009b9c:	f003 0304 	and.w	r3, r3, #4
 8009ba0:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 8009ba2:	2003      	movs	r0, #3
 8009ba4:	f7fa ff96 	bl	8004ad4 <memp_malloc>
 8009ba8:	6138      	str	r0, [r7, #16]
 8009baa:	693b      	ldr	r3, [r7, #16]
 8009bac:	2b00      	cmp	r3, #0
 8009bae:	d104      	bne.n	8009bba <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 8009bb0:	68b8      	ldr	r0, [r7, #8]
 8009bb2:	f7fb fe75 	bl	80058a0 <pbuf_free>
    return NULL;
 8009bb6:	2300      	movs	r3, #0
 8009bb8:	e061      	b.n	8009c7e <tcp_create_segment+0x11e>
  }
  seg->flags = optflags;
 8009bba:	693b      	ldr	r3, [r7, #16]
 8009bbc:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8009bc0:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 8009bc2:	693b      	ldr	r3, [r7, #16]
 8009bc4:	2200      	movs	r2, #0
 8009bc6:	601a      	str	r2, [r3, #0]
  seg->p = p;
 8009bc8:	693b      	ldr	r3, [r7, #16]
 8009bca:	68ba      	ldr	r2, [r7, #8]
 8009bcc:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 8009bce:	68bb      	ldr	r3, [r7, #8]
 8009bd0:	891a      	ldrh	r2, [r3, #8]
 8009bd2:	7dfb      	ldrb	r3, [r7, #23]
 8009bd4:	b29b      	uxth	r3, r3
 8009bd6:	429a      	cmp	r2, r3
 8009bd8:	d205      	bcs.n	8009be6 <tcp_create_segment+0x86>
 8009bda:	4b2b      	ldr	r3, [pc, #172]	; (8009c88 <tcp_create_segment+0x128>)
 8009bdc:	22b0      	movs	r2, #176	; 0xb0
 8009bde:	492e      	ldr	r1, [pc, #184]	; (8009c98 <tcp_create_segment+0x138>)
 8009be0:	482b      	ldr	r0, [pc, #172]	; (8009c90 <tcp_create_segment+0x130>)
 8009be2:	f004 fc87 	bl	800e4f4 <iprintf>
  seg->len = p->tot_len - optlen;
 8009be6:	68bb      	ldr	r3, [r7, #8]
 8009be8:	891a      	ldrh	r2, [r3, #8]
 8009bea:	7dfb      	ldrb	r3, [r7, #23]
 8009bec:	b29b      	uxth	r3, r3
 8009bee:	1ad3      	subs	r3, r2, r3
 8009bf0:	b29a      	uxth	r2, r3
 8009bf2:	693b      	ldr	r3, [r7, #16]
 8009bf4:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 8009bf6:	2114      	movs	r1, #20
 8009bf8:	68b8      	ldr	r0, [r7, #8]
 8009bfa:	f7fb fdbb 	bl	8005774 <pbuf_add_header>
 8009bfe:	4603      	mov	r3, r0
 8009c00:	2b00      	cmp	r3, #0
 8009c02:	d004      	beq.n	8009c0e <tcp_create_segment+0xae>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 8009c04:	6938      	ldr	r0, [r7, #16]
 8009c06:	f7fd f8ce 	bl	8006da6 <tcp_seg_free>
    return NULL;
 8009c0a:	2300      	movs	r3, #0
 8009c0c:	e037      	b.n	8009c7e <tcp_create_segment+0x11e>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 8009c0e:	693b      	ldr	r3, [r7, #16]
 8009c10:	685b      	ldr	r3, [r3, #4]
 8009c12:	685a      	ldr	r2, [r3, #4]
 8009c14:	693b      	ldr	r3, [r7, #16]
 8009c16:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 8009c18:	68fb      	ldr	r3, [r7, #12]
 8009c1a:	8ada      	ldrh	r2, [r3, #22]
 8009c1c:	693b      	ldr	r3, [r7, #16]
 8009c1e:	68dc      	ldr	r4, [r3, #12]
 8009c20:	4610      	mov	r0, r2
 8009c22:	f7fa fadf 	bl	80041e4 <lwip_htons>
 8009c26:	4603      	mov	r3, r0
 8009c28:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 8009c2a:	68fb      	ldr	r3, [r7, #12]
 8009c2c:	8b1a      	ldrh	r2, [r3, #24]
 8009c2e:	693b      	ldr	r3, [r7, #16]
 8009c30:	68dc      	ldr	r4, [r3, #12]
 8009c32:	4610      	mov	r0, r2
 8009c34:	f7fa fad6 	bl	80041e4 <lwip_htons>
 8009c38:	4603      	mov	r3, r0
 8009c3a:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 8009c3c:	693b      	ldr	r3, [r7, #16]
 8009c3e:	68dc      	ldr	r4, [r3, #12]
 8009c40:	6838      	ldr	r0, [r7, #0]
 8009c42:	f7fa fae4 	bl	800420e <lwip_htonl>
 8009c46:	4603      	mov	r3, r0
 8009c48:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 8009c4a:	7dfb      	ldrb	r3, [r7, #23]
 8009c4c:	089b      	lsrs	r3, r3, #2
 8009c4e:	b2db      	uxtb	r3, r3
 8009c50:	b29b      	uxth	r3, r3
 8009c52:	3305      	adds	r3, #5
 8009c54:	b29b      	uxth	r3, r3
 8009c56:	031b      	lsls	r3, r3, #12
 8009c58:	b29a      	uxth	r2, r3
 8009c5a:	79fb      	ldrb	r3, [r7, #7]
 8009c5c:	b29b      	uxth	r3, r3
 8009c5e:	4313      	orrs	r3, r2
 8009c60:	b29a      	uxth	r2, r3
 8009c62:	693b      	ldr	r3, [r7, #16]
 8009c64:	68dc      	ldr	r4, [r3, #12]
 8009c66:	4610      	mov	r0, r2
 8009c68:	f7fa fabc 	bl	80041e4 <lwip_htons>
 8009c6c:	4603      	mov	r3, r0
 8009c6e:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 8009c70:	693b      	ldr	r3, [r7, #16]
 8009c72:	68db      	ldr	r3, [r3, #12]
 8009c74:	2200      	movs	r2, #0
 8009c76:	749a      	strb	r2, [r3, #18]
 8009c78:	2200      	movs	r2, #0
 8009c7a:	74da      	strb	r2, [r3, #19]
  return seg;
 8009c7c:	693b      	ldr	r3, [r7, #16]
}
 8009c7e:	4618      	mov	r0, r3
 8009c80:	371c      	adds	r7, #28
 8009c82:	46bd      	mov	sp, r7
 8009c84:	bd90      	pop	{r4, r7, pc}
 8009c86:	bf00      	nop
 8009c88:	08010a9c 	.word	0x08010a9c
 8009c8c:	08010ad0 	.word	0x08010ad0
 8009c90:	08010af0 	.word	0x08010af0
 8009c94:	08010b18 	.word	0x08010b18
 8009c98:	08010b3c 	.word	0x08010b3c

08009c9c <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 8009c9c:	b590      	push	{r4, r7, lr}
 8009c9e:	b08b      	sub	sp, #44	; 0x2c
 8009ca0:	af02      	add	r7, sp, #8
 8009ca2:	6078      	str	r0, [r7, #4]
 8009ca4:	460b      	mov	r3, r1
 8009ca6:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 8009ca8:	2300      	movs	r3, #0
 8009caa:	61fb      	str	r3, [r7, #28]
 8009cac:	2300      	movs	r3, #0
 8009cae:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 8009cb0:	2300      	movs	r3, #0
 8009cb2:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 8009cb4:	687b      	ldr	r3, [r7, #4]
 8009cb6:	2b00      	cmp	r3, #0
 8009cb8:	d106      	bne.n	8009cc8 <tcp_split_unsent_seg+0x2c>
 8009cba:	4b95      	ldr	r3, [pc, #596]	; (8009f10 <tcp_split_unsent_seg+0x274>)
 8009cbc:	f240 324b 	movw	r2, #843	; 0x34b
 8009cc0:	4994      	ldr	r1, [pc, #592]	; (8009f14 <tcp_split_unsent_seg+0x278>)
 8009cc2:	4895      	ldr	r0, [pc, #596]	; (8009f18 <tcp_split_unsent_seg+0x27c>)
 8009cc4:	f004 fc16 	bl	800e4f4 <iprintf>

  useg = pcb->unsent;
 8009cc8:	687b      	ldr	r3, [r7, #4]
 8009cca:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009ccc:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 8009cce:	697b      	ldr	r3, [r7, #20]
 8009cd0:	2b00      	cmp	r3, #0
 8009cd2:	d102      	bne.n	8009cda <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 8009cd4:	f04f 33ff 	mov.w	r3, #4294967295
 8009cd8:	e116      	b.n	8009f08 <tcp_split_unsent_seg+0x26c>
  }

  if (split == 0) {
 8009cda:	887b      	ldrh	r3, [r7, #2]
 8009cdc:	2b00      	cmp	r3, #0
 8009cde:	d109      	bne.n	8009cf4 <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 8009ce0:	4b8b      	ldr	r3, [pc, #556]	; (8009f10 <tcp_split_unsent_seg+0x274>)
 8009ce2:	f240 3253 	movw	r2, #851	; 0x353
 8009ce6:	498d      	ldr	r1, [pc, #564]	; (8009f1c <tcp_split_unsent_seg+0x280>)
 8009ce8:	488b      	ldr	r0, [pc, #556]	; (8009f18 <tcp_split_unsent_seg+0x27c>)
 8009cea:	f004 fc03 	bl	800e4f4 <iprintf>
    return ERR_VAL;
 8009cee:	f06f 0305 	mvn.w	r3, #5
 8009cf2:	e109      	b.n	8009f08 <tcp_split_unsent_seg+0x26c>
  }

  if (useg->len <= split) {
 8009cf4:	697b      	ldr	r3, [r7, #20]
 8009cf6:	891b      	ldrh	r3, [r3, #8]
 8009cf8:	887a      	ldrh	r2, [r7, #2]
 8009cfa:	429a      	cmp	r2, r3
 8009cfc:	d301      	bcc.n	8009d02 <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 8009cfe:	2300      	movs	r3, #0
 8009d00:	e102      	b.n	8009f08 <tcp_split_unsent_seg+0x26c>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 8009d02:	687b      	ldr	r3, [r7, #4]
 8009d04:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8009d06:	887a      	ldrh	r2, [r7, #2]
 8009d08:	429a      	cmp	r2, r3
 8009d0a:	d906      	bls.n	8009d1a <tcp_split_unsent_seg+0x7e>
 8009d0c:	4b80      	ldr	r3, [pc, #512]	; (8009f10 <tcp_split_unsent_seg+0x274>)
 8009d0e:	f240 325b 	movw	r2, #859	; 0x35b
 8009d12:	4983      	ldr	r1, [pc, #524]	; (8009f20 <tcp_split_unsent_seg+0x284>)
 8009d14:	4880      	ldr	r0, [pc, #512]	; (8009f18 <tcp_split_unsent_seg+0x27c>)
 8009d16:	f004 fbed 	bl	800e4f4 <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 8009d1a:	697b      	ldr	r3, [r7, #20]
 8009d1c:	891b      	ldrh	r3, [r3, #8]
 8009d1e:	2b00      	cmp	r3, #0
 8009d20:	d106      	bne.n	8009d30 <tcp_split_unsent_seg+0x94>
 8009d22:	4b7b      	ldr	r3, [pc, #492]	; (8009f10 <tcp_split_unsent_seg+0x274>)
 8009d24:	f44f 7257 	mov.w	r2, #860	; 0x35c
 8009d28:	497e      	ldr	r1, [pc, #504]	; (8009f24 <tcp_split_unsent_seg+0x288>)
 8009d2a:	487b      	ldr	r0, [pc, #492]	; (8009f18 <tcp_split_unsent_seg+0x27c>)
 8009d2c:	f004 fbe2 	bl	800e4f4 <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 8009d30:	697b      	ldr	r3, [r7, #20]
 8009d32:	7a9b      	ldrb	r3, [r3, #10]
 8009d34:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 8009d36:	7bfb      	ldrb	r3, [r7, #15]
 8009d38:	009b      	lsls	r3, r3, #2
 8009d3a:	b2db      	uxtb	r3, r3
 8009d3c:	f003 0304 	and.w	r3, r3, #4
 8009d40:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 8009d42:	697b      	ldr	r3, [r7, #20]
 8009d44:	891a      	ldrh	r2, [r3, #8]
 8009d46:	887b      	ldrh	r3, [r7, #2]
 8009d48:	1ad3      	subs	r3, r2, r3
 8009d4a:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 8009d4c:	7bbb      	ldrb	r3, [r7, #14]
 8009d4e:	b29a      	uxth	r2, r3
 8009d50:	89bb      	ldrh	r3, [r7, #12]
 8009d52:	4413      	add	r3, r2
 8009d54:	b29b      	uxth	r3, r3
 8009d56:	f44f 7220 	mov.w	r2, #640	; 0x280
 8009d5a:	4619      	mov	r1, r3
 8009d5c:	2036      	movs	r0, #54	; 0x36
 8009d5e:	f7fb fabb 	bl	80052d8 <pbuf_alloc>
 8009d62:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8009d64:	693b      	ldr	r3, [r7, #16]
 8009d66:	2b00      	cmp	r3, #0
 8009d68:	f000 80b7 	beq.w	8009eda <tcp_split_unsent_seg+0x23e>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 8009d6c:	697b      	ldr	r3, [r7, #20]
 8009d6e:	685b      	ldr	r3, [r3, #4]
 8009d70:	891a      	ldrh	r2, [r3, #8]
 8009d72:	697b      	ldr	r3, [r7, #20]
 8009d74:	891b      	ldrh	r3, [r3, #8]
 8009d76:	1ad3      	subs	r3, r2, r3
 8009d78:	b29a      	uxth	r2, r3
 8009d7a:	887b      	ldrh	r3, [r7, #2]
 8009d7c:	4413      	add	r3, r2
 8009d7e:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 8009d80:	697b      	ldr	r3, [r7, #20]
 8009d82:	6858      	ldr	r0, [r3, #4]
 8009d84:	693b      	ldr	r3, [r7, #16]
 8009d86:	685a      	ldr	r2, [r3, #4]
 8009d88:	7bbb      	ldrb	r3, [r7, #14]
 8009d8a:	18d1      	adds	r1, r2, r3
 8009d8c:	897b      	ldrh	r3, [r7, #10]
 8009d8e:	89ba      	ldrh	r2, [r7, #12]
 8009d90:	f7fb ff80 	bl	8005c94 <pbuf_copy_partial>
 8009d94:	4603      	mov	r3, r0
 8009d96:	461a      	mov	r2, r3
 8009d98:	89bb      	ldrh	r3, [r7, #12]
 8009d9a:	4293      	cmp	r3, r2
 8009d9c:	f040 809f 	bne.w	8009ede <tcp_split_unsent_seg+0x242>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 8009da0:	697b      	ldr	r3, [r7, #20]
 8009da2:	68db      	ldr	r3, [r3, #12]
 8009da4:	899b      	ldrh	r3, [r3, #12]
 8009da6:	b29b      	uxth	r3, r3
 8009da8:	4618      	mov	r0, r3
 8009daa:	f7fa fa1b 	bl	80041e4 <lwip_htons>
 8009dae:	4603      	mov	r3, r0
 8009db0:	b2db      	uxtb	r3, r3
 8009db2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009db6:	76fb      	strb	r3, [r7, #27]
  remainder_flags = 0; /* ACK added in tcp_output() */
 8009db8:	2300      	movs	r3, #0
 8009dba:	76bb      	strb	r3, [r7, #26]

  if (split_flags & TCP_PSH) {
 8009dbc:	7efb      	ldrb	r3, [r7, #27]
 8009dbe:	f003 0308 	and.w	r3, r3, #8
 8009dc2:	2b00      	cmp	r3, #0
 8009dc4:	d007      	beq.n	8009dd6 <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 8009dc6:	7efb      	ldrb	r3, [r7, #27]
 8009dc8:	f023 0308 	bic.w	r3, r3, #8
 8009dcc:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_PSH;
 8009dce:	7ebb      	ldrb	r3, [r7, #26]
 8009dd0:	f043 0308 	orr.w	r3, r3, #8
 8009dd4:	76bb      	strb	r3, [r7, #26]
  }
  if (split_flags & TCP_FIN) {
 8009dd6:	7efb      	ldrb	r3, [r7, #27]
 8009dd8:	f003 0301 	and.w	r3, r3, #1
 8009ddc:	2b00      	cmp	r3, #0
 8009dde:	d007      	beq.n	8009df0 <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 8009de0:	7efb      	ldrb	r3, [r7, #27]
 8009de2:	f023 0301 	bic.w	r3, r3, #1
 8009de6:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_FIN;
 8009de8:	7ebb      	ldrb	r3, [r7, #26]
 8009dea:	f043 0301 	orr.w	r3, r3, #1
 8009dee:	76bb      	strb	r3, [r7, #26]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 8009df0:	697b      	ldr	r3, [r7, #20]
 8009df2:	68db      	ldr	r3, [r3, #12]
 8009df4:	685b      	ldr	r3, [r3, #4]
 8009df6:	4618      	mov	r0, r3
 8009df8:	f7fa fa09 	bl	800420e <lwip_htonl>
 8009dfc:	4602      	mov	r2, r0
 8009dfe:	887b      	ldrh	r3, [r7, #2]
 8009e00:	18d1      	adds	r1, r2, r3
 8009e02:	7eba      	ldrb	r2, [r7, #26]
 8009e04:	7bfb      	ldrb	r3, [r7, #15]
 8009e06:	9300      	str	r3, [sp, #0]
 8009e08:	460b      	mov	r3, r1
 8009e0a:	6939      	ldr	r1, [r7, #16]
 8009e0c:	6878      	ldr	r0, [r7, #4]
 8009e0e:	f7ff fea7 	bl	8009b60 <tcp_create_segment>
 8009e12:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 8009e14:	69fb      	ldr	r3, [r7, #28]
 8009e16:	2b00      	cmp	r3, #0
 8009e18:	d063      	beq.n	8009ee2 <tcp_split_unsent_seg+0x246>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 8009e1a:	697b      	ldr	r3, [r7, #20]
 8009e1c:	685b      	ldr	r3, [r3, #4]
 8009e1e:	4618      	mov	r0, r3
 8009e20:	f7fb fdc6 	bl	80059b0 <pbuf_clen>
 8009e24:	4603      	mov	r3, r0
 8009e26:	461a      	mov	r2, r3
 8009e28:	687b      	ldr	r3, [r7, #4]
 8009e2a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8009e2e:	1a9b      	subs	r3, r3, r2
 8009e30:	b29a      	uxth	r2, r3
 8009e32:	687b      	ldr	r3, [r7, #4]
 8009e34:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 8009e38:	697b      	ldr	r3, [r7, #20]
 8009e3a:	6858      	ldr	r0, [r3, #4]
 8009e3c:	697b      	ldr	r3, [r7, #20]
 8009e3e:	685b      	ldr	r3, [r3, #4]
 8009e40:	891a      	ldrh	r2, [r3, #8]
 8009e42:	89bb      	ldrh	r3, [r7, #12]
 8009e44:	1ad3      	subs	r3, r2, r3
 8009e46:	b29b      	uxth	r3, r3
 8009e48:	4619      	mov	r1, r3
 8009e4a:	f7fb fba3 	bl	8005594 <pbuf_realloc>
  useg->len -= remainder;
 8009e4e:	697b      	ldr	r3, [r7, #20]
 8009e50:	891a      	ldrh	r2, [r3, #8]
 8009e52:	89bb      	ldrh	r3, [r7, #12]
 8009e54:	1ad3      	subs	r3, r2, r3
 8009e56:	b29a      	uxth	r2, r3
 8009e58:	697b      	ldr	r3, [r7, #20]
 8009e5a:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 8009e5c:	697b      	ldr	r3, [r7, #20]
 8009e5e:	68db      	ldr	r3, [r3, #12]
 8009e60:	899b      	ldrh	r3, [r3, #12]
 8009e62:	b29c      	uxth	r4, r3
 8009e64:	7efb      	ldrb	r3, [r7, #27]
 8009e66:	b29b      	uxth	r3, r3
 8009e68:	4618      	mov	r0, r3
 8009e6a:	f7fa f9bb 	bl	80041e4 <lwip_htons>
 8009e6e:	4603      	mov	r3, r0
 8009e70:	461a      	mov	r2, r3
 8009e72:	697b      	ldr	r3, [r7, #20]
 8009e74:	68db      	ldr	r3, [r3, #12]
 8009e76:	4322      	orrs	r2, r4
 8009e78:	b292      	uxth	r2, r2
 8009e7a:	819a      	strh	r2, [r3, #12]
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 8009e7c:	697b      	ldr	r3, [r7, #20]
 8009e7e:	685b      	ldr	r3, [r3, #4]
 8009e80:	4618      	mov	r0, r3
 8009e82:	f7fb fd95 	bl	80059b0 <pbuf_clen>
 8009e86:	4603      	mov	r3, r0
 8009e88:	461a      	mov	r2, r3
 8009e8a:	687b      	ldr	r3, [r7, #4]
 8009e8c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8009e90:	4413      	add	r3, r2
 8009e92:	b29a      	uxth	r2, r3
 8009e94:	687b      	ldr	r3, [r7, #4]
 8009e96:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 8009e9a:	69fb      	ldr	r3, [r7, #28]
 8009e9c:	685b      	ldr	r3, [r3, #4]
 8009e9e:	4618      	mov	r0, r3
 8009ea0:	f7fb fd86 	bl	80059b0 <pbuf_clen>
 8009ea4:	4603      	mov	r3, r0
 8009ea6:	461a      	mov	r2, r3
 8009ea8:	687b      	ldr	r3, [r7, #4]
 8009eaa:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8009eae:	4413      	add	r3, r2
 8009eb0:	b29a      	uxth	r2, r3
 8009eb2:	687b      	ldr	r3, [r7, #4]
 8009eb4:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 8009eb8:	697b      	ldr	r3, [r7, #20]
 8009eba:	681a      	ldr	r2, [r3, #0]
 8009ebc:	69fb      	ldr	r3, [r7, #28]
 8009ebe:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 8009ec0:	697b      	ldr	r3, [r7, #20]
 8009ec2:	69fa      	ldr	r2, [r7, #28]
 8009ec4:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 8009ec6:	69fb      	ldr	r3, [r7, #28]
 8009ec8:	681b      	ldr	r3, [r3, #0]
 8009eca:	2b00      	cmp	r3, #0
 8009ecc:	d103      	bne.n	8009ed6 <tcp_split_unsent_seg+0x23a>
    pcb->unsent_oversize = 0;
 8009ece:	687b      	ldr	r3, [r7, #4]
 8009ed0:	2200      	movs	r2, #0
 8009ed2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 8009ed6:	2300      	movs	r3, #0
 8009ed8:	e016      	b.n	8009f08 <tcp_split_unsent_seg+0x26c>
    goto memerr;
 8009eda:	bf00      	nop
 8009edc:	e002      	b.n	8009ee4 <tcp_split_unsent_seg+0x248>
    goto memerr;
 8009ede:	bf00      	nop
 8009ee0:	e000      	b.n	8009ee4 <tcp_split_unsent_seg+0x248>
    goto memerr;
 8009ee2:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 8009ee4:	69fb      	ldr	r3, [r7, #28]
 8009ee6:	2b00      	cmp	r3, #0
 8009ee8:	d006      	beq.n	8009ef8 <tcp_split_unsent_seg+0x25c>
 8009eea:	4b09      	ldr	r3, [pc, #36]	; (8009f10 <tcp_split_unsent_seg+0x274>)
 8009eec:	f44f 7276 	mov.w	r2, #984	; 0x3d8
 8009ef0:	490d      	ldr	r1, [pc, #52]	; (8009f28 <tcp_split_unsent_seg+0x28c>)
 8009ef2:	4809      	ldr	r0, [pc, #36]	; (8009f18 <tcp_split_unsent_seg+0x27c>)
 8009ef4:	f004 fafe 	bl	800e4f4 <iprintf>
  if (p != NULL) {
 8009ef8:	693b      	ldr	r3, [r7, #16]
 8009efa:	2b00      	cmp	r3, #0
 8009efc:	d002      	beq.n	8009f04 <tcp_split_unsent_seg+0x268>
    pbuf_free(p);
 8009efe:	6938      	ldr	r0, [r7, #16]
 8009f00:	f7fb fcce 	bl	80058a0 <pbuf_free>
  }

  return ERR_MEM;
 8009f04:	f04f 33ff 	mov.w	r3, #4294967295
}
 8009f08:	4618      	mov	r0, r3
 8009f0a:	3724      	adds	r7, #36	; 0x24
 8009f0c:	46bd      	mov	sp, r7
 8009f0e:	bd90      	pop	{r4, r7, pc}
 8009f10:	08010a9c 	.word	0x08010a9c
 8009f14:	08010e30 	.word	0x08010e30
 8009f18:	08010af0 	.word	0x08010af0
 8009f1c:	08010e54 	.word	0x08010e54
 8009f20:	08010e78 	.word	0x08010e78
 8009f24:	08010e88 	.word	0x08010e88
 8009f28:	08010e98 	.word	0x08010e98

08009f2c <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 8009f2c:	b590      	push	{r4, r7, lr}
 8009f2e:	b085      	sub	sp, #20
 8009f30:	af00      	add	r7, sp, #0
 8009f32:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 8009f34:	687b      	ldr	r3, [r7, #4]
 8009f36:	2b00      	cmp	r3, #0
 8009f38:	d106      	bne.n	8009f48 <tcp_send_fin+0x1c>
 8009f3a:	4b21      	ldr	r3, [pc, #132]	; (8009fc0 <tcp_send_fin+0x94>)
 8009f3c:	f240 32eb 	movw	r2, #1003	; 0x3eb
 8009f40:	4920      	ldr	r1, [pc, #128]	; (8009fc4 <tcp_send_fin+0x98>)
 8009f42:	4821      	ldr	r0, [pc, #132]	; (8009fc8 <tcp_send_fin+0x9c>)
 8009f44:	f004 fad6 	bl	800e4f4 <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 8009f48:	687b      	ldr	r3, [r7, #4]
 8009f4a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009f4c:	2b00      	cmp	r3, #0
 8009f4e:	d02e      	beq.n	8009fae <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8009f50:	687b      	ldr	r3, [r7, #4]
 8009f52:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009f54:	60fb      	str	r3, [r7, #12]
 8009f56:	e002      	b.n	8009f5e <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 8009f58:	68fb      	ldr	r3, [r7, #12]
 8009f5a:	681b      	ldr	r3, [r3, #0]
 8009f5c:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8009f5e:	68fb      	ldr	r3, [r7, #12]
 8009f60:	681b      	ldr	r3, [r3, #0]
 8009f62:	2b00      	cmp	r3, #0
 8009f64:	d1f8      	bne.n	8009f58 <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 8009f66:	68fb      	ldr	r3, [r7, #12]
 8009f68:	68db      	ldr	r3, [r3, #12]
 8009f6a:	899b      	ldrh	r3, [r3, #12]
 8009f6c:	b29b      	uxth	r3, r3
 8009f6e:	4618      	mov	r0, r3
 8009f70:	f7fa f938 	bl	80041e4 <lwip_htons>
 8009f74:	4603      	mov	r3, r0
 8009f76:	b2db      	uxtb	r3, r3
 8009f78:	f003 0307 	and.w	r3, r3, #7
 8009f7c:	2b00      	cmp	r3, #0
 8009f7e:	d116      	bne.n	8009fae <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 8009f80:	68fb      	ldr	r3, [r7, #12]
 8009f82:	68db      	ldr	r3, [r3, #12]
 8009f84:	899b      	ldrh	r3, [r3, #12]
 8009f86:	b29c      	uxth	r4, r3
 8009f88:	2001      	movs	r0, #1
 8009f8a:	f7fa f92b 	bl	80041e4 <lwip_htons>
 8009f8e:	4603      	mov	r3, r0
 8009f90:	461a      	mov	r2, r3
 8009f92:	68fb      	ldr	r3, [r7, #12]
 8009f94:	68db      	ldr	r3, [r3, #12]
 8009f96:	4322      	orrs	r2, r4
 8009f98:	b292      	uxth	r2, r2
 8009f9a:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 8009f9c:	687b      	ldr	r3, [r7, #4]
 8009f9e:	8b5b      	ldrh	r3, [r3, #26]
 8009fa0:	f043 0320 	orr.w	r3, r3, #32
 8009fa4:	b29a      	uxth	r2, r3
 8009fa6:	687b      	ldr	r3, [r7, #4]
 8009fa8:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 8009faa:	2300      	movs	r3, #0
 8009fac:	e004      	b.n	8009fb8 <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 8009fae:	2101      	movs	r1, #1
 8009fb0:	6878      	ldr	r0, [r7, #4]
 8009fb2:	f000 f80b 	bl	8009fcc <tcp_enqueue_flags>
 8009fb6:	4603      	mov	r3, r0
}
 8009fb8:	4618      	mov	r0, r3
 8009fba:	3714      	adds	r7, #20
 8009fbc:	46bd      	mov	sp, r7
 8009fbe:	bd90      	pop	{r4, r7, pc}
 8009fc0:	08010a9c 	.word	0x08010a9c
 8009fc4:	08010ea4 	.word	0x08010ea4
 8009fc8:	08010af0 	.word	0x08010af0

08009fcc <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 8009fcc:	b580      	push	{r7, lr}
 8009fce:	b08a      	sub	sp, #40	; 0x28
 8009fd0:	af02      	add	r7, sp, #8
 8009fd2:	6078      	str	r0, [r7, #4]
 8009fd4:	460b      	mov	r3, r1
 8009fd6:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 8009fd8:	2300      	movs	r3, #0
 8009fda:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 8009fdc:	2300      	movs	r3, #0
 8009fde:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 8009fe0:	78fb      	ldrb	r3, [r7, #3]
 8009fe2:	f003 0303 	and.w	r3, r3, #3
 8009fe6:	2b00      	cmp	r3, #0
 8009fe8:	d106      	bne.n	8009ff8 <tcp_enqueue_flags+0x2c>
 8009fea:	4b67      	ldr	r3, [pc, #412]	; (800a188 <tcp_enqueue_flags+0x1bc>)
 8009fec:	f240 4211 	movw	r2, #1041	; 0x411
 8009ff0:	4966      	ldr	r1, [pc, #408]	; (800a18c <tcp_enqueue_flags+0x1c0>)
 8009ff2:	4867      	ldr	r0, [pc, #412]	; (800a190 <tcp_enqueue_flags+0x1c4>)
 8009ff4:	f004 fa7e 	bl	800e4f4 <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 8009ff8:	687b      	ldr	r3, [r7, #4]
 8009ffa:	2b00      	cmp	r3, #0
 8009ffc:	d106      	bne.n	800a00c <tcp_enqueue_flags+0x40>
 8009ffe:	4b62      	ldr	r3, [pc, #392]	; (800a188 <tcp_enqueue_flags+0x1bc>)
 800a000:	f240 4213 	movw	r2, #1043	; 0x413
 800a004:	4963      	ldr	r1, [pc, #396]	; (800a194 <tcp_enqueue_flags+0x1c8>)
 800a006:	4862      	ldr	r0, [pc, #392]	; (800a190 <tcp_enqueue_flags+0x1c4>)
 800a008:	f004 fa74 	bl	800e4f4 <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 800a00c:	78fb      	ldrb	r3, [r7, #3]
 800a00e:	f003 0302 	and.w	r3, r3, #2
 800a012:	2b00      	cmp	r3, #0
 800a014:	d001      	beq.n	800a01a <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 800a016:	2301      	movs	r3, #1
 800a018:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800a01a:	7ffb      	ldrb	r3, [r7, #31]
 800a01c:	009b      	lsls	r3, r3, #2
 800a01e:	b2db      	uxtb	r3, r3
 800a020:	f003 0304 	and.w	r3, r3, #4
 800a024:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 800a026:	7dfb      	ldrb	r3, [r7, #23]
 800a028:	b29b      	uxth	r3, r3
 800a02a:	f44f 7220 	mov.w	r2, #640	; 0x280
 800a02e:	4619      	mov	r1, r3
 800a030:	2036      	movs	r0, #54	; 0x36
 800a032:	f7fb f951 	bl	80052d8 <pbuf_alloc>
 800a036:	6138      	str	r0, [r7, #16]
 800a038:	693b      	ldr	r3, [r7, #16]
 800a03a:	2b00      	cmp	r3, #0
 800a03c:	d109      	bne.n	800a052 <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800a03e:	687b      	ldr	r3, [r7, #4]
 800a040:	8b5b      	ldrh	r3, [r3, #26]
 800a042:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a046:	b29a      	uxth	r2, r3
 800a048:	687b      	ldr	r3, [r7, #4]
 800a04a:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 800a04c:	f04f 33ff 	mov.w	r3, #4294967295
 800a050:	e095      	b.n	800a17e <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 800a052:	693b      	ldr	r3, [r7, #16]
 800a054:	895a      	ldrh	r2, [r3, #10]
 800a056:	7dfb      	ldrb	r3, [r7, #23]
 800a058:	b29b      	uxth	r3, r3
 800a05a:	429a      	cmp	r2, r3
 800a05c:	d206      	bcs.n	800a06c <tcp_enqueue_flags+0xa0>
 800a05e:	4b4a      	ldr	r3, [pc, #296]	; (800a188 <tcp_enqueue_flags+0x1bc>)
 800a060:	f240 4239 	movw	r2, #1081	; 0x439
 800a064:	494c      	ldr	r1, [pc, #304]	; (800a198 <tcp_enqueue_flags+0x1cc>)
 800a066:	484a      	ldr	r0, [pc, #296]	; (800a190 <tcp_enqueue_flags+0x1c4>)
 800a068:	f004 fa44 	bl	800e4f4 <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 800a06c:	687b      	ldr	r3, [r7, #4]
 800a06e:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 800a070:	78fa      	ldrb	r2, [r7, #3]
 800a072:	7ffb      	ldrb	r3, [r7, #31]
 800a074:	9300      	str	r3, [sp, #0]
 800a076:	460b      	mov	r3, r1
 800a078:	6939      	ldr	r1, [r7, #16]
 800a07a:	6878      	ldr	r0, [r7, #4]
 800a07c:	f7ff fd70 	bl	8009b60 <tcp_create_segment>
 800a080:	60f8      	str	r0, [r7, #12]
 800a082:	68fb      	ldr	r3, [r7, #12]
 800a084:	2b00      	cmp	r3, #0
 800a086:	d109      	bne.n	800a09c <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800a088:	687b      	ldr	r3, [r7, #4]
 800a08a:	8b5b      	ldrh	r3, [r3, #26]
 800a08c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a090:	b29a      	uxth	r2, r3
 800a092:	687b      	ldr	r3, [r7, #4]
 800a094:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 800a096:	f04f 33ff 	mov.w	r3, #4294967295
 800a09a:	e070      	b.n	800a17e <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 800a09c:	68fb      	ldr	r3, [r7, #12]
 800a09e:	68db      	ldr	r3, [r3, #12]
 800a0a0:	f003 0303 	and.w	r3, r3, #3
 800a0a4:	2b00      	cmp	r3, #0
 800a0a6:	d006      	beq.n	800a0b6 <tcp_enqueue_flags+0xea>
 800a0a8:	4b37      	ldr	r3, [pc, #220]	; (800a188 <tcp_enqueue_flags+0x1bc>)
 800a0aa:	f240 4242 	movw	r2, #1090	; 0x442
 800a0ae:	493b      	ldr	r1, [pc, #236]	; (800a19c <tcp_enqueue_flags+0x1d0>)
 800a0b0:	4837      	ldr	r0, [pc, #220]	; (800a190 <tcp_enqueue_flags+0x1c4>)
 800a0b2:	f004 fa1f 	bl	800e4f4 <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 800a0b6:	68fb      	ldr	r3, [r7, #12]
 800a0b8:	891b      	ldrh	r3, [r3, #8]
 800a0ba:	2b00      	cmp	r3, #0
 800a0bc:	d006      	beq.n	800a0cc <tcp_enqueue_flags+0x100>
 800a0be:	4b32      	ldr	r3, [pc, #200]	; (800a188 <tcp_enqueue_flags+0x1bc>)
 800a0c0:	f240 4243 	movw	r2, #1091	; 0x443
 800a0c4:	4936      	ldr	r1, [pc, #216]	; (800a1a0 <tcp_enqueue_flags+0x1d4>)
 800a0c6:	4832      	ldr	r0, [pc, #200]	; (800a190 <tcp_enqueue_flags+0x1c4>)
 800a0c8:	f004 fa14 	bl	800e4f4 <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 800a0cc:	687b      	ldr	r3, [r7, #4]
 800a0ce:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a0d0:	2b00      	cmp	r3, #0
 800a0d2:	d103      	bne.n	800a0dc <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 800a0d4:	687b      	ldr	r3, [r7, #4]
 800a0d6:	68fa      	ldr	r2, [r7, #12]
 800a0d8:	66da      	str	r2, [r3, #108]	; 0x6c
 800a0da:	e00d      	b.n	800a0f8 <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 800a0dc:	687b      	ldr	r3, [r7, #4]
 800a0de:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a0e0:	61bb      	str	r3, [r7, #24]
 800a0e2:	e002      	b.n	800a0ea <tcp_enqueue_flags+0x11e>
 800a0e4:	69bb      	ldr	r3, [r7, #24]
 800a0e6:	681b      	ldr	r3, [r3, #0]
 800a0e8:	61bb      	str	r3, [r7, #24]
 800a0ea:	69bb      	ldr	r3, [r7, #24]
 800a0ec:	681b      	ldr	r3, [r3, #0]
 800a0ee:	2b00      	cmp	r3, #0
 800a0f0:	d1f8      	bne.n	800a0e4 <tcp_enqueue_flags+0x118>
    useg->next = seg;
 800a0f2:	69bb      	ldr	r3, [r7, #24]
 800a0f4:	68fa      	ldr	r2, [r7, #12]
 800a0f6:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 800a0f8:	687b      	ldr	r3, [r7, #4]
 800a0fa:	2200      	movs	r2, #0
 800a0fc:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 800a100:	78fb      	ldrb	r3, [r7, #3]
 800a102:	f003 0302 	and.w	r3, r3, #2
 800a106:	2b00      	cmp	r3, #0
 800a108:	d104      	bne.n	800a114 <tcp_enqueue_flags+0x148>
 800a10a:	78fb      	ldrb	r3, [r7, #3]
 800a10c:	f003 0301 	and.w	r3, r3, #1
 800a110:	2b00      	cmp	r3, #0
 800a112:	d004      	beq.n	800a11e <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 800a114:	687b      	ldr	r3, [r7, #4]
 800a116:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a118:	1c5a      	adds	r2, r3, #1
 800a11a:	687b      	ldr	r3, [r7, #4]
 800a11c:	65da      	str	r2, [r3, #92]	; 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 800a11e:	78fb      	ldrb	r3, [r7, #3]
 800a120:	f003 0301 	and.w	r3, r3, #1
 800a124:	2b00      	cmp	r3, #0
 800a126:	d006      	beq.n	800a136 <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 800a128:	687b      	ldr	r3, [r7, #4]
 800a12a:	8b5b      	ldrh	r3, [r3, #26]
 800a12c:	f043 0320 	orr.w	r3, r3, #32
 800a130:	b29a      	uxth	r2, r3
 800a132:	687b      	ldr	r3, [r7, #4]
 800a134:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 800a136:	68fb      	ldr	r3, [r7, #12]
 800a138:	685b      	ldr	r3, [r3, #4]
 800a13a:	4618      	mov	r0, r3
 800a13c:	f7fb fc38 	bl	80059b0 <pbuf_clen>
 800a140:	4603      	mov	r3, r0
 800a142:	461a      	mov	r2, r3
 800a144:	687b      	ldr	r3, [r7, #4]
 800a146:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800a14a:	4413      	add	r3, r2
 800a14c:	b29a      	uxth	r2, r3
 800a14e:	687b      	ldr	r3, [r7, #4]
 800a150:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 800a154:	687b      	ldr	r3, [r7, #4]
 800a156:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800a15a:	2b00      	cmp	r3, #0
 800a15c:	d00e      	beq.n	800a17c <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 800a15e:	687b      	ldr	r3, [r7, #4]
 800a160:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a162:	2b00      	cmp	r3, #0
 800a164:	d10a      	bne.n	800a17c <tcp_enqueue_flags+0x1b0>
 800a166:	687b      	ldr	r3, [r7, #4]
 800a168:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a16a:	2b00      	cmp	r3, #0
 800a16c:	d106      	bne.n	800a17c <tcp_enqueue_flags+0x1b0>
 800a16e:	4b06      	ldr	r3, [pc, #24]	; (800a188 <tcp_enqueue_flags+0x1bc>)
 800a170:	f240 4265 	movw	r2, #1125	; 0x465
 800a174:	490b      	ldr	r1, [pc, #44]	; (800a1a4 <tcp_enqueue_flags+0x1d8>)
 800a176:	4806      	ldr	r0, [pc, #24]	; (800a190 <tcp_enqueue_flags+0x1c4>)
 800a178:	f004 f9bc 	bl	800e4f4 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 800a17c:	2300      	movs	r3, #0
}
 800a17e:	4618      	mov	r0, r3
 800a180:	3720      	adds	r7, #32
 800a182:	46bd      	mov	sp, r7
 800a184:	bd80      	pop	{r7, pc}
 800a186:	bf00      	nop
 800a188:	08010a9c 	.word	0x08010a9c
 800a18c:	08010ec0 	.word	0x08010ec0
 800a190:	08010af0 	.word	0x08010af0
 800a194:	08010f18 	.word	0x08010f18
 800a198:	08010f38 	.word	0x08010f38
 800a19c:	08010f74 	.word	0x08010f74
 800a1a0:	08010f8c 	.word	0x08010f8c
 800a1a4:	08010fb8 	.word	0x08010fb8

0800a1a8 <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 800a1a8:	b5b0      	push	{r4, r5, r7, lr}
 800a1aa:	b08a      	sub	sp, #40	; 0x28
 800a1ac:	af00      	add	r7, sp, #0
 800a1ae:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 800a1b0:	687b      	ldr	r3, [r7, #4]
 800a1b2:	2b00      	cmp	r3, #0
 800a1b4:	d106      	bne.n	800a1c4 <tcp_output+0x1c>
 800a1b6:	4b8a      	ldr	r3, [pc, #552]	; (800a3e0 <tcp_output+0x238>)
 800a1b8:	f240 42e1 	movw	r2, #1249	; 0x4e1
 800a1bc:	4989      	ldr	r1, [pc, #548]	; (800a3e4 <tcp_output+0x23c>)
 800a1be:	488a      	ldr	r0, [pc, #552]	; (800a3e8 <tcp_output+0x240>)
 800a1c0:	f004 f998 	bl	800e4f4 <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 800a1c4:	687b      	ldr	r3, [r7, #4]
 800a1c6:	7d1b      	ldrb	r3, [r3, #20]
 800a1c8:	2b01      	cmp	r3, #1
 800a1ca:	d106      	bne.n	800a1da <tcp_output+0x32>
 800a1cc:	4b84      	ldr	r3, [pc, #528]	; (800a3e0 <tcp_output+0x238>)
 800a1ce:	f240 42e3 	movw	r2, #1251	; 0x4e3
 800a1d2:	4986      	ldr	r1, [pc, #536]	; (800a3ec <tcp_output+0x244>)
 800a1d4:	4884      	ldr	r0, [pc, #528]	; (800a3e8 <tcp_output+0x240>)
 800a1d6:	f004 f98d 	bl	800e4f4 <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 800a1da:	4b85      	ldr	r3, [pc, #532]	; (800a3f0 <tcp_output+0x248>)
 800a1dc:	681b      	ldr	r3, [r3, #0]
 800a1de:	687a      	ldr	r2, [r7, #4]
 800a1e0:	429a      	cmp	r2, r3
 800a1e2:	d101      	bne.n	800a1e8 <tcp_output+0x40>
    return ERR_OK;
 800a1e4:	2300      	movs	r3, #0
 800a1e6:	e1ce      	b.n	800a586 <tcp_output+0x3de>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 800a1e8:	687b      	ldr	r3, [r7, #4]
 800a1ea:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800a1ee:	687b      	ldr	r3, [r7, #4]
 800a1f0:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800a1f4:	4293      	cmp	r3, r2
 800a1f6:	bf28      	it	cs
 800a1f8:	4613      	movcs	r3, r2
 800a1fa:	b29b      	uxth	r3, r3
 800a1fc:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 800a1fe:	687b      	ldr	r3, [r7, #4]
 800a200:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a202:	627b      	str	r3, [r7, #36]	; 0x24

  if (seg == NULL) {
 800a204:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a206:	2b00      	cmp	r3, #0
 800a208:	d10b      	bne.n	800a222 <tcp_output+0x7a>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 800a20a:	687b      	ldr	r3, [r7, #4]
 800a20c:	8b5b      	ldrh	r3, [r3, #26]
 800a20e:	f003 0302 	and.w	r3, r3, #2
 800a212:	2b00      	cmp	r3, #0
 800a214:	f000 81aa 	beq.w	800a56c <tcp_output+0x3c4>
      return tcp_send_empty_ack(pcb);
 800a218:	6878      	ldr	r0, [r7, #4]
 800a21a:	f000 fdcb 	bl	800adb4 <tcp_send_empty_ack>
 800a21e:	4603      	mov	r3, r0
 800a220:	e1b1      	b.n	800a586 <tcp_output+0x3de>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 800a222:	6879      	ldr	r1, [r7, #4]
 800a224:	687b      	ldr	r3, [r7, #4]
 800a226:	3304      	adds	r3, #4
 800a228:	461a      	mov	r2, r3
 800a22a:	6878      	ldr	r0, [r7, #4]
 800a22c:	f7ff fc7c 	bl	8009b28 <tcp_route>
 800a230:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 800a232:	697b      	ldr	r3, [r7, #20]
 800a234:	2b00      	cmp	r3, #0
 800a236:	d102      	bne.n	800a23e <tcp_output+0x96>
    return ERR_RTE;
 800a238:	f06f 0303 	mvn.w	r3, #3
 800a23c:	e1a3      	b.n	800a586 <tcp_output+0x3de>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 800a23e:	687b      	ldr	r3, [r7, #4]
 800a240:	2b00      	cmp	r3, #0
 800a242:	d003      	beq.n	800a24c <tcp_output+0xa4>
 800a244:	687b      	ldr	r3, [r7, #4]
 800a246:	681b      	ldr	r3, [r3, #0]
 800a248:	2b00      	cmp	r3, #0
 800a24a:	d111      	bne.n	800a270 <tcp_output+0xc8>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 800a24c:	697b      	ldr	r3, [r7, #20]
 800a24e:	2b00      	cmp	r3, #0
 800a250:	d002      	beq.n	800a258 <tcp_output+0xb0>
 800a252:	697b      	ldr	r3, [r7, #20]
 800a254:	3304      	adds	r3, #4
 800a256:	e000      	b.n	800a25a <tcp_output+0xb2>
 800a258:	2300      	movs	r3, #0
 800a25a:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 800a25c:	693b      	ldr	r3, [r7, #16]
 800a25e:	2b00      	cmp	r3, #0
 800a260:	d102      	bne.n	800a268 <tcp_output+0xc0>
      return ERR_RTE;
 800a262:	f06f 0303 	mvn.w	r3, #3
 800a266:	e18e      	b.n	800a586 <tcp_output+0x3de>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 800a268:	693b      	ldr	r3, [r7, #16]
 800a26a:	681a      	ldr	r2, [r3, #0]
 800a26c:	687b      	ldr	r3, [r7, #4]
 800a26e:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 800a270:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a272:	68db      	ldr	r3, [r3, #12]
 800a274:	685b      	ldr	r3, [r3, #4]
 800a276:	4618      	mov	r0, r3
 800a278:	f7f9 ffc9 	bl	800420e <lwip_htonl>
 800a27c:	4602      	mov	r2, r0
 800a27e:	687b      	ldr	r3, [r7, #4]
 800a280:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a282:	1ad3      	subs	r3, r2, r3
 800a284:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a286:	8912      	ldrh	r2, [r2, #8]
 800a288:	4413      	add	r3, r2
 800a28a:	69ba      	ldr	r2, [r7, #24]
 800a28c:	429a      	cmp	r2, r3
 800a28e:	d227      	bcs.n	800a2e0 <tcp_output+0x138>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 800a290:	687b      	ldr	r3, [r7, #4]
 800a292:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800a296:	461a      	mov	r2, r3
 800a298:	69bb      	ldr	r3, [r7, #24]
 800a29a:	4293      	cmp	r3, r2
 800a29c:	d114      	bne.n	800a2c8 <tcp_output+0x120>
 800a29e:	687b      	ldr	r3, [r7, #4]
 800a2a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a2a2:	2b00      	cmp	r3, #0
 800a2a4:	d110      	bne.n	800a2c8 <tcp_output+0x120>
 800a2a6:	687b      	ldr	r3, [r7, #4]
 800a2a8:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800a2ac:	2b00      	cmp	r3, #0
 800a2ae:	d10b      	bne.n	800a2c8 <tcp_output+0x120>
      pcb->persist_cnt = 0;
 800a2b0:	687b      	ldr	r3, [r7, #4]
 800a2b2:	2200      	movs	r2, #0
 800a2b4:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
      pcb->persist_backoff = 1;
 800a2b8:	687b      	ldr	r3, [r7, #4]
 800a2ba:	2201      	movs	r2, #1
 800a2bc:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
      pcb->persist_probe = 0;
 800a2c0:	687b      	ldr	r3, [r7, #4]
 800a2c2:	2200      	movs	r2, #0
 800a2c4:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 800a2c8:	687b      	ldr	r3, [r7, #4]
 800a2ca:	8b5b      	ldrh	r3, [r3, #26]
 800a2cc:	f003 0302 	and.w	r3, r3, #2
 800a2d0:	2b00      	cmp	r3, #0
 800a2d2:	f000 814d 	beq.w	800a570 <tcp_output+0x3c8>
      return tcp_send_empty_ack(pcb);
 800a2d6:	6878      	ldr	r0, [r7, #4]
 800a2d8:	f000 fd6c 	bl	800adb4 <tcp_send_empty_ack>
 800a2dc:	4603      	mov	r3, r0
 800a2de:	e152      	b.n	800a586 <tcp_output+0x3de>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 800a2e0:	687b      	ldr	r3, [r7, #4]
 800a2e2:	2200      	movs	r2, #0
 800a2e4:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 800a2e8:	687b      	ldr	r3, [r7, #4]
 800a2ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a2ec:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 800a2ee:	6a3b      	ldr	r3, [r7, #32]
 800a2f0:	2b00      	cmp	r3, #0
 800a2f2:	f000 811c 	beq.w	800a52e <tcp_output+0x386>
    for (; useg->next != NULL; useg = useg->next);
 800a2f6:	e002      	b.n	800a2fe <tcp_output+0x156>
 800a2f8:	6a3b      	ldr	r3, [r7, #32]
 800a2fa:	681b      	ldr	r3, [r3, #0]
 800a2fc:	623b      	str	r3, [r7, #32]
 800a2fe:	6a3b      	ldr	r3, [r7, #32]
 800a300:	681b      	ldr	r3, [r3, #0]
 800a302:	2b00      	cmp	r3, #0
 800a304:	d1f8      	bne.n	800a2f8 <tcp_output+0x150>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 800a306:	e112      	b.n	800a52e <tcp_output+0x386>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 800a308:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a30a:	68db      	ldr	r3, [r3, #12]
 800a30c:	899b      	ldrh	r3, [r3, #12]
 800a30e:	b29b      	uxth	r3, r3
 800a310:	4618      	mov	r0, r3
 800a312:	f7f9 ff67 	bl	80041e4 <lwip_htons>
 800a316:	4603      	mov	r3, r0
 800a318:	b2db      	uxtb	r3, r3
 800a31a:	f003 0304 	and.w	r3, r3, #4
 800a31e:	2b00      	cmp	r3, #0
 800a320:	d006      	beq.n	800a330 <tcp_output+0x188>
 800a322:	4b2f      	ldr	r3, [pc, #188]	; (800a3e0 <tcp_output+0x238>)
 800a324:	f240 5236 	movw	r2, #1334	; 0x536
 800a328:	4932      	ldr	r1, [pc, #200]	; (800a3f4 <tcp_output+0x24c>)
 800a32a:	482f      	ldr	r0, [pc, #188]	; (800a3e8 <tcp_output+0x240>)
 800a32c:	f004 f8e2 	bl	800e4f4 <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 800a330:	687b      	ldr	r3, [r7, #4]
 800a332:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a334:	2b00      	cmp	r3, #0
 800a336:	d01f      	beq.n	800a378 <tcp_output+0x1d0>
 800a338:	687b      	ldr	r3, [r7, #4]
 800a33a:	8b5b      	ldrh	r3, [r3, #26]
 800a33c:	f003 0344 	and.w	r3, r3, #68	; 0x44
 800a340:	2b00      	cmp	r3, #0
 800a342:	d119      	bne.n	800a378 <tcp_output+0x1d0>
 800a344:	687b      	ldr	r3, [r7, #4]
 800a346:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a348:	2b00      	cmp	r3, #0
 800a34a:	d00b      	beq.n	800a364 <tcp_output+0x1bc>
 800a34c:	687b      	ldr	r3, [r7, #4]
 800a34e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a350:	681b      	ldr	r3, [r3, #0]
 800a352:	2b00      	cmp	r3, #0
 800a354:	d110      	bne.n	800a378 <tcp_output+0x1d0>
 800a356:	687b      	ldr	r3, [r7, #4]
 800a358:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a35a:	891a      	ldrh	r2, [r3, #8]
 800a35c:	687b      	ldr	r3, [r7, #4]
 800a35e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800a360:	429a      	cmp	r2, r3
 800a362:	d209      	bcs.n	800a378 <tcp_output+0x1d0>
 800a364:	687b      	ldr	r3, [r7, #4]
 800a366:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800a36a:	2b00      	cmp	r3, #0
 800a36c:	d004      	beq.n	800a378 <tcp_output+0x1d0>
 800a36e:	687b      	ldr	r3, [r7, #4]
 800a370:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800a374:	2b08      	cmp	r3, #8
 800a376:	d901      	bls.n	800a37c <tcp_output+0x1d4>
 800a378:	2301      	movs	r3, #1
 800a37a:	e000      	b.n	800a37e <tcp_output+0x1d6>
 800a37c:	2300      	movs	r3, #0
 800a37e:	2b00      	cmp	r3, #0
 800a380:	d106      	bne.n	800a390 <tcp_output+0x1e8>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 800a382:	687b      	ldr	r3, [r7, #4]
 800a384:	8b5b      	ldrh	r3, [r3, #26]
 800a386:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 800a38a:	2b00      	cmp	r3, #0
 800a38c:	f000 80e4 	beq.w	800a558 <tcp_output+0x3b0>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 800a390:	687b      	ldr	r3, [r7, #4]
 800a392:	7d1b      	ldrb	r3, [r3, #20]
 800a394:	2b02      	cmp	r3, #2
 800a396:	d00d      	beq.n	800a3b4 <tcp_output+0x20c>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 800a398:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a39a:	68db      	ldr	r3, [r3, #12]
 800a39c:	899b      	ldrh	r3, [r3, #12]
 800a39e:	b29c      	uxth	r4, r3
 800a3a0:	2010      	movs	r0, #16
 800a3a2:	f7f9 ff1f 	bl	80041e4 <lwip_htons>
 800a3a6:	4603      	mov	r3, r0
 800a3a8:	461a      	mov	r2, r3
 800a3aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a3ac:	68db      	ldr	r3, [r3, #12]
 800a3ae:	4322      	orrs	r2, r4
 800a3b0:	b292      	uxth	r2, r2
 800a3b2:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 800a3b4:	697a      	ldr	r2, [r7, #20]
 800a3b6:	6879      	ldr	r1, [r7, #4]
 800a3b8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800a3ba:	f000 f909 	bl	800a5d0 <tcp_output_segment>
 800a3be:	4603      	mov	r3, r0
 800a3c0:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 800a3c2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a3c6:	2b00      	cmp	r3, #0
 800a3c8:	d016      	beq.n	800a3f8 <tcp_output+0x250>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800a3ca:	687b      	ldr	r3, [r7, #4]
 800a3cc:	8b5b      	ldrh	r3, [r3, #26]
 800a3ce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a3d2:	b29a      	uxth	r2, r3
 800a3d4:	687b      	ldr	r3, [r7, #4]
 800a3d6:	835a      	strh	r2, [r3, #26]
      return err;
 800a3d8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a3dc:	e0d3      	b.n	800a586 <tcp_output+0x3de>
 800a3de:	bf00      	nop
 800a3e0:	08010a9c 	.word	0x08010a9c
 800a3e4:	08010fe0 	.word	0x08010fe0
 800a3e8:	08010af0 	.word	0x08010af0
 800a3ec:	08010ff8 	.word	0x08010ff8
 800a3f0:	200082cc 	.word	0x200082cc
 800a3f4:	08011020 	.word	0x08011020
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 800a3f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a3fa:	681a      	ldr	r2, [r3, #0]
 800a3fc:	687b      	ldr	r3, [r7, #4]
 800a3fe:	66da      	str	r2, [r3, #108]	; 0x6c
    if (pcb->state != SYN_SENT) {
 800a400:	687b      	ldr	r3, [r7, #4]
 800a402:	7d1b      	ldrb	r3, [r3, #20]
 800a404:	2b02      	cmp	r3, #2
 800a406:	d006      	beq.n	800a416 <tcp_output+0x26e>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800a408:	687b      	ldr	r3, [r7, #4]
 800a40a:	8b5b      	ldrh	r3, [r3, #26]
 800a40c:	f023 0303 	bic.w	r3, r3, #3
 800a410:	b29a      	uxth	r2, r3
 800a412:	687b      	ldr	r3, [r7, #4]
 800a414:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 800a416:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a418:	68db      	ldr	r3, [r3, #12]
 800a41a:	685b      	ldr	r3, [r3, #4]
 800a41c:	4618      	mov	r0, r3
 800a41e:	f7f9 fef6 	bl	800420e <lwip_htonl>
 800a422:	4604      	mov	r4, r0
 800a424:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a426:	891b      	ldrh	r3, [r3, #8]
 800a428:	461d      	mov	r5, r3
 800a42a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a42c:	68db      	ldr	r3, [r3, #12]
 800a42e:	899b      	ldrh	r3, [r3, #12]
 800a430:	b29b      	uxth	r3, r3
 800a432:	4618      	mov	r0, r3
 800a434:	f7f9 fed6 	bl	80041e4 <lwip_htons>
 800a438:	4603      	mov	r3, r0
 800a43a:	b2db      	uxtb	r3, r3
 800a43c:	f003 0303 	and.w	r3, r3, #3
 800a440:	2b00      	cmp	r3, #0
 800a442:	d001      	beq.n	800a448 <tcp_output+0x2a0>
 800a444:	2301      	movs	r3, #1
 800a446:	e000      	b.n	800a44a <tcp_output+0x2a2>
 800a448:	2300      	movs	r3, #0
 800a44a:	442b      	add	r3, r5
 800a44c:	4423      	add	r3, r4
 800a44e:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 800a450:	687b      	ldr	r3, [r7, #4]
 800a452:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800a454:	68bb      	ldr	r3, [r7, #8]
 800a456:	1ad3      	subs	r3, r2, r3
 800a458:	2b00      	cmp	r3, #0
 800a45a:	da02      	bge.n	800a462 <tcp_output+0x2ba>
      pcb->snd_nxt = snd_nxt;
 800a45c:	687b      	ldr	r3, [r7, #4]
 800a45e:	68ba      	ldr	r2, [r7, #8]
 800a460:	651a      	str	r2, [r3, #80]	; 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 800a462:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a464:	891b      	ldrh	r3, [r3, #8]
 800a466:	461c      	mov	r4, r3
 800a468:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a46a:	68db      	ldr	r3, [r3, #12]
 800a46c:	899b      	ldrh	r3, [r3, #12]
 800a46e:	b29b      	uxth	r3, r3
 800a470:	4618      	mov	r0, r3
 800a472:	f7f9 feb7 	bl	80041e4 <lwip_htons>
 800a476:	4603      	mov	r3, r0
 800a478:	b2db      	uxtb	r3, r3
 800a47a:	f003 0303 	and.w	r3, r3, #3
 800a47e:	2b00      	cmp	r3, #0
 800a480:	d001      	beq.n	800a486 <tcp_output+0x2de>
 800a482:	2301      	movs	r3, #1
 800a484:	e000      	b.n	800a488 <tcp_output+0x2e0>
 800a486:	2300      	movs	r3, #0
 800a488:	4423      	add	r3, r4
 800a48a:	2b00      	cmp	r3, #0
 800a48c:	d049      	beq.n	800a522 <tcp_output+0x37a>
      seg->next = NULL;
 800a48e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a490:	2200      	movs	r2, #0
 800a492:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 800a494:	687b      	ldr	r3, [r7, #4]
 800a496:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a498:	2b00      	cmp	r3, #0
 800a49a:	d105      	bne.n	800a4a8 <tcp_output+0x300>
        pcb->unacked = seg;
 800a49c:	687b      	ldr	r3, [r7, #4]
 800a49e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a4a0:	671a      	str	r2, [r3, #112]	; 0x70
        useg = seg;
 800a4a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a4a4:	623b      	str	r3, [r7, #32]
 800a4a6:	e03f      	b.n	800a528 <tcp_output+0x380>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 800a4a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a4aa:	68db      	ldr	r3, [r3, #12]
 800a4ac:	685b      	ldr	r3, [r3, #4]
 800a4ae:	4618      	mov	r0, r3
 800a4b0:	f7f9 fead 	bl	800420e <lwip_htonl>
 800a4b4:	4604      	mov	r4, r0
 800a4b6:	6a3b      	ldr	r3, [r7, #32]
 800a4b8:	68db      	ldr	r3, [r3, #12]
 800a4ba:	685b      	ldr	r3, [r3, #4]
 800a4bc:	4618      	mov	r0, r3
 800a4be:	f7f9 fea6 	bl	800420e <lwip_htonl>
 800a4c2:	4603      	mov	r3, r0
 800a4c4:	1ae3      	subs	r3, r4, r3
 800a4c6:	2b00      	cmp	r3, #0
 800a4c8:	da24      	bge.n	800a514 <tcp_output+0x36c>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 800a4ca:	687b      	ldr	r3, [r7, #4]
 800a4cc:	3370      	adds	r3, #112	; 0x70
 800a4ce:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 800a4d0:	e002      	b.n	800a4d8 <tcp_output+0x330>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 800a4d2:	69fb      	ldr	r3, [r7, #28]
 800a4d4:	681b      	ldr	r3, [r3, #0]
 800a4d6:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 800a4d8:	69fb      	ldr	r3, [r7, #28]
 800a4da:	681b      	ldr	r3, [r3, #0]
 800a4dc:	2b00      	cmp	r3, #0
 800a4de:	d011      	beq.n	800a504 <tcp_output+0x35c>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 800a4e0:	69fb      	ldr	r3, [r7, #28]
 800a4e2:	681b      	ldr	r3, [r3, #0]
 800a4e4:	68db      	ldr	r3, [r3, #12]
 800a4e6:	685b      	ldr	r3, [r3, #4]
 800a4e8:	4618      	mov	r0, r3
 800a4ea:	f7f9 fe90 	bl	800420e <lwip_htonl>
 800a4ee:	4604      	mov	r4, r0
 800a4f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a4f2:	68db      	ldr	r3, [r3, #12]
 800a4f4:	685b      	ldr	r3, [r3, #4]
 800a4f6:	4618      	mov	r0, r3
 800a4f8:	f7f9 fe89 	bl	800420e <lwip_htonl>
 800a4fc:	4603      	mov	r3, r0
 800a4fe:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 800a500:	2b00      	cmp	r3, #0
 800a502:	dbe6      	blt.n	800a4d2 <tcp_output+0x32a>
          }
          seg->next = (*cur_seg);
 800a504:	69fb      	ldr	r3, [r7, #28]
 800a506:	681a      	ldr	r2, [r3, #0]
 800a508:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a50a:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 800a50c:	69fb      	ldr	r3, [r7, #28]
 800a50e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a510:	601a      	str	r2, [r3, #0]
 800a512:	e009      	b.n	800a528 <tcp_output+0x380>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 800a514:	6a3b      	ldr	r3, [r7, #32]
 800a516:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a518:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 800a51a:	6a3b      	ldr	r3, [r7, #32]
 800a51c:	681b      	ldr	r3, [r3, #0]
 800a51e:	623b      	str	r3, [r7, #32]
 800a520:	e002      	b.n	800a528 <tcp_output+0x380>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 800a522:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800a524:	f7fc fc3f 	bl	8006da6 <tcp_seg_free>
    }
    seg = pcb->unsent;
 800a528:	687b      	ldr	r3, [r7, #4]
 800a52a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a52c:	627b      	str	r3, [r7, #36]	; 0x24
  while (seg != NULL &&
 800a52e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a530:	2b00      	cmp	r3, #0
 800a532:	d012      	beq.n	800a55a <tcp_output+0x3b2>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 800a534:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a536:	68db      	ldr	r3, [r3, #12]
 800a538:	685b      	ldr	r3, [r3, #4]
 800a53a:	4618      	mov	r0, r3
 800a53c:	f7f9 fe67 	bl	800420e <lwip_htonl>
 800a540:	4602      	mov	r2, r0
 800a542:	687b      	ldr	r3, [r7, #4]
 800a544:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a546:	1ad3      	subs	r3, r2, r3
 800a548:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a54a:	8912      	ldrh	r2, [r2, #8]
 800a54c:	4413      	add	r3, r2
  while (seg != NULL &&
 800a54e:	69ba      	ldr	r2, [r7, #24]
 800a550:	429a      	cmp	r2, r3
 800a552:	f4bf aed9 	bcs.w	800a308 <tcp_output+0x160>
 800a556:	e000      	b.n	800a55a <tcp_output+0x3b2>
      break;
 800a558:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 800a55a:	687b      	ldr	r3, [r7, #4]
 800a55c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a55e:	2b00      	cmp	r3, #0
 800a560:	d108      	bne.n	800a574 <tcp_output+0x3cc>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 800a562:	687b      	ldr	r3, [r7, #4]
 800a564:	2200      	movs	r2, #0
 800a566:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
 800a56a:	e004      	b.n	800a576 <tcp_output+0x3ce>
    goto output_done;
 800a56c:	bf00      	nop
 800a56e:	e002      	b.n	800a576 <tcp_output+0x3ce>
    goto output_done;
 800a570:	bf00      	nop
 800a572:	e000      	b.n	800a576 <tcp_output+0x3ce>
  }
#endif /* TCP_OVERSIZE */

output_done:
 800a574:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 800a576:	687b      	ldr	r3, [r7, #4]
 800a578:	8b5b      	ldrh	r3, [r3, #26]
 800a57a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a57e:	b29a      	uxth	r2, r3
 800a580:	687b      	ldr	r3, [r7, #4]
 800a582:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 800a584:	2300      	movs	r3, #0
}
 800a586:	4618      	mov	r0, r3
 800a588:	3728      	adds	r7, #40	; 0x28
 800a58a:	46bd      	mov	sp, r7
 800a58c:	bdb0      	pop	{r4, r5, r7, pc}
 800a58e:	bf00      	nop

0800a590 <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 800a590:	b580      	push	{r7, lr}
 800a592:	b082      	sub	sp, #8
 800a594:	af00      	add	r7, sp, #0
 800a596:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 800a598:	687b      	ldr	r3, [r7, #4]
 800a59a:	2b00      	cmp	r3, #0
 800a59c:	d106      	bne.n	800a5ac <tcp_output_segment_busy+0x1c>
 800a59e:	4b09      	ldr	r3, [pc, #36]	; (800a5c4 <tcp_output_segment_busy+0x34>)
 800a5a0:	f240 529a 	movw	r2, #1434	; 0x59a
 800a5a4:	4908      	ldr	r1, [pc, #32]	; (800a5c8 <tcp_output_segment_busy+0x38>)
 800a5a6:	4809      	ldr	r0, [pc, #36]	; (800a5cc <tcp_output_segment_busy+0x3c>)
 800a5a8:	f003 ffa4 	bl	800e4f4 <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 800a5ac:	687b      	ldr	r3, [r7, #4]
 800a5ae:	685b      	ldr	r3, [r3, #4]
 800a5b0:	7b9b      	ldrb	r3, [r3, #14]
 800a5b2:	2b01      	cmp	r3, #1
 800a5b4:	d001      	beq.n	800a5ba <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 800a5b6:	2301      	movs	r3, #1
 800a5b8:	e000      	b.n	800a5bc <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 800a5ba:	2300      	movs	r3, #0
}
 800a5bc:	4618      	mov	r0, r3
 800a5be:	3708      	adds	r7, #8
 800a5c0:	46bd      	mov	sp, r7
 800a5c2:	bd80      	pop	{r7, pc}
 800a5c4:	08010a9c 	.word	0x08010a9c
 800a5c8:	08011038 	.word	0x08011038
 800a5cc:	08010af0 	.word	0x08010af0

0800a5d0 <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 800a5d0:	b5b0      	push	{r4, r5, r7, lr}
 800a5d2:	b08c      	sub	sp, #48	; 0x30
 800a5d4:	af04      	add	r7, sp, #16
 800a5d6:	60f8      	str	r0, [r7, #12]
 800a5d8:	60b9      	str	r1, [r7, #8]
 800a5da:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 800a5dc:	68fb      	ldr	r3, [r7, #12]
 800a5de:	2b00      	cmp	r3, #0
 800a5e0:	d106      	bne.n	800a5f0 <tcp_output_segment+0x20>
 800a5e2:	4b64      	ldr	r3, [pc, #400]	; (800a774 <tcp_output_segment+0x1a4>)
 800a5e4:	f44f 62b7 	mov.w	r2, #1464	; 0x5b8
 800a5e8:	4963      	ldr	r1, [pc, #396]	; (800a778 <tcp_output_segment+0x1a8>)
 800a5ea:	4864      	ldr	r0, [pc, #400]	; (800a77c <tcp_output_segment+0x1ac>)
 800a5ec:	f003 ff82 	bl	800e4f4 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 800a5f0:	68bb      	ldr	r3, [r7, #8]
 800a5f2:	2b00      	cmp	r3, #0
 800a5f4:	d106      	bne.n	800a604 <tcp_output_segment+0x34>
 800a5f6:	4b5f      	ldr	r3, [pc, #380]	; (800a774 <tcp_output_segment+0x1a4>)
 800a5f8:	f240 52b9 	movw	r2, #1465	; 0x5b9
 800a5fc:	4960      	ldr	r1, [pc, #384]	; (800a780 <tcp_output_segment+0x1b0>)
 800a5fe:	485f      	ldr	r0, [pc, #380]	; (800a77c <tcp_output_segment+0x1ac>)
 800a600:	f003 ff78 	bl	800e4f4 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 800a604:	687b      	ldr	r3, [r7, #4]
 800a606:	2b00      	cmp	r3, #0
 800a608:	d106      	bne.n	800a618 <tcp_output_segment+0x48>
 800a60a:	4b5a      	ldr	r3, [pc, #360]	; (800a774 <tcp_output_segment+0x1a4>)
 800a60c:	f240 52ba 	movw	r2, #1466	; 0x5ba
 800a610:	495c      	ldr	r1, [pc, #368]	; (800a784 <tcp_output_segment+0x1b4>)
 800a612:	485a      	ldr	r0, [pc, #360]	; (800a77c <tcp_output_segment+0x1ac>)
 800a614:	f003 ff6e 	bl	800e4f4 <iprintf>

  if (tcp_output_segment_busy(seg)) {
 800a618:	68f8      	ldr	r0, [r7, #12]
 800a61a:	f7ff ffb9 	bl	800a590 <tcp_output_segment_busy>
 800a61e:	4603      	mov	r3, r0
 800a620:	2b00      	cmp	r3, #0
 800a622:	d001      	beq.n	800a628 <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 800a624:	2300      	movs	r3, #0
 800a626:	e0a1      	b.n	800a76c <tcp_output_segment+0x19c>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 800a628:	68bb      	ldr	r3, [r7, #8]
 800a62a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a62c:	68fb      	ldr	r3, [r7, #12]
 800a62e:	68dc      	ldr	r4, [r3, #12]
 800a630:	4610      	mov	r0, r2
 800a632:	f7f9 fdec 	bl	800420e <lwip_htonl>
 800a636:	4603      	mov	r3, r0
 800a638:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 800a63a:	68bb      	ldr	r3, [r7, #8]
 800a63c:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 800a63e:	68fb      	ldr	r3, [r7, #12]
 800a640:	68dc      	ldr	r4, [r3, #12]
 800a642:	4610      	mov	r0, r2
 800a644:	f7f9 fdce 	bl	80041e4 <lwip_htons>
 800a648:	4603      	mov	r3, r0
 800a64a:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800a64c:	68bb      	ldr	r3, [r7, #8]
 800a64e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a650:	68ba      	ldr	r2, [r7, #8]
 800a652:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 800a654:	441a      	add	r2, r3
 800a656:	68bb      	ldr	r3, [r7, #8]
 800a658:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 800a65a:	68fb      	ldr	r3, [r7, #12]
 800a65c:	68db      	ldr	r3, [r3, #12]
 800a65e:	3314      	adds	r3, #20
 800a660:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 800a662:	68fb      	ldr	r3, [r7, #12]
 800a664:	7a9b      	ldrb	r3, [r3, #10]
 800a666:	f003 0301 	and.w	r3, r3, #1
 800a66a:	2b00      	cmp	r3, #0
 800a66c:	d015      	beq.n	800a69a <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 800a66e:	68bb      	ldr	r3, [r7, #8]
 800a670:	3304      	adds	r3, #4
 800a672:	461a      	mov	r2, r3
 800a674:	6879      	ldr	r1, [r7, #4]
 800a676:	f44f 7006 	mov.w	r0, #536	; 0x218
 800a67a:	f7fc fe8b 	bl	8007394 <tcp_eff_send_mss_netif>
 800a67e:	4603      	mov	r3, r0
 800a680:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 800a682:	8b7b      	ldrh	r3, [r7, #26]
 800a684:	f043 7301 	orr.w	r3, r3, #33816576	; 0x2040000
 800a688:	4618      	mov	r0, r3
 800a68a:	f7f9 fdc0 	bl	800420e <lwip_htonl>
 800a68e:	4602      	mov	r2, r0
 800a690:	69fb      	ldr	r3, [r7, #28]
 800a692:	601a      	str	r2, [r3, #0]
    opts += 1;
 800a694:	69fb      	ldr	r3, [r7, #28]
 800a696:	3304      	adds	r3, #4
 800a698:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 800a69a:	68bb      	ldr	r3, [r7, #8]
 800a69c:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800a6a0:	2b00      	cmp	r3, #0
 800a6a2:	da02      	bge.n	800a6aa <tcp_output_segment+0xda>
    pcb->rtime = 0;
 800a6a4:	68bb      	ldr	r3, [r7, #8]
 800a6a6:	2200      	movs	r2, #0
 800a6a8:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  if (pcb->rttest == 0) {
 800a6aa:	68bb      	ldr	r3, [r7, #8]
 800a6ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a6ae:	2b00      	cmp	r3, #0
 800a6b0:	d10c      	bne.n	800a6cc <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 800a6b2:	4b35      	ldr	r3, [pc, #212]	; (800a788 <tcp_output_segment+0x1b8>)
 800a6b4:	681a      	ldr	r2, [r3, #0]
 800a6b6:	68bb      	ldr	r3, [r7, #8]
 800a6b8:	635a      	str	r2, [r3, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 800a6ba:	68fb      	ldr	r3, [r7, #12]
 800a6bc:	68db      	ldr	r3, [r3, #12]
 800a6be:	685b      	ldr	r3, [r3, #4]
 800a6c0:	4618      	mov	r0, r3
 800a6c2:	f7f9 fda4 	bl	800420e <lwip_htonl>
 800a6c6:	4602      	mov	r2, r0
 800a6c8:	68bb      	ldr	r3, [r7, #8]
 800a6ca:	639a      	str	r2, [r3, #56]	; 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 800a6cc:	68fb      	ldr	r3, [r7, #12]
 800a6ce:	68da      	ldr	r2, [r3, #12]
 800a6d0:	68fb      	ldr	r3, [r7, #12]
 800a6d2:	685b      	ldr	r3, [r3, #4]
 800a6d4:	685b      	ldr	r3, [r3, #4]
 800a6d6:	1ad3      	subs	r3, r2, r3
 800a6d8:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 800a6da:	68fb      	ldr	r3, [r7, #12]
 800a6dc:	685b      	ldr	r3, [r3, #4]
 800a6de:	8959      	ldrh	r1, [r3, #10]
 800a6e0:	68fb      	ldr	r3, [r7, #12]
 800a6e2:	685b      	ldr	r3, [r3, #4]
 800a6e4:	8b3a      	ldrh	r2, [r7, #24]
 800a6e6:	1a8a      	subs	r2, r1, r2
 800a6e8:	b292      	uxth	r2, r2
 800a6ea:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 800a6ec:	68fb      	ldr	r3, [r7, #12]
 800a6ee:	685b      	ldr	r3, [r3, #4]
 800a6f0:	8919      	ldrh	r1, [r3, #8]
 800a6f2:	68fb      	ldr	r3, [r7, #12]
 800a6f4:	685b      	ldr	r3, [r3, #4]
 800a6f6:	8b3a      	ldrh	r2, [r7, #24]
 800a6f8:	1a8a      	subs	r2, r1, r2
 800a6fa:	b292      	uxth	r2, r2
 800a6fc:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 800a6fe:	68fb      	ldr	r3, [r7, #12]
 800a700:	685b      	ldr	r3, [r3, #4]
 800a702:	68fa      	ldr	r2, [r7, #12]
 800a704:	68d2      	ldr	r2, [r2, #12]
 800a706:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 800a708:	68fb      	ldr	r3, [r7, #12]
 800a70a:	68db      	ldr	r3, [r3, #12]
 800a70c:	2200      	movs	r2, #0
 800a70e:	741a      	strb	r2, [r3, #16]
 800a710:	2200      	movs	r2, #0
 800a712:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 800a714:	68fb      	ldr	r3, [r7, #12]
 800a716:	68da      	ldr	r2, [r3, #12]
 800a718:	68fb      	ldr	r3, [r7, #12]
 800a71a:	7a9b      	ldrb	r3, [r3, #10]
 800a71c:	f003 0301 	and.w	r3, r3, #1
 800a720:	2b00      	cmp	r3, #0
 800a722:	d001      	beq.n	800a728 <tcp_output_segment+0x158>
 800a724:	2318      	movs	r3, #24
 800a726:	e000      	b.n	800a72a <tcp_output_segment+0x15a>
 800a728:	2314      	movs	r3, #20
 800a72a:	4413      	add	r3, r2
 800a72c:	69fa      	ldr	r2, [r7, #28]
 800a72e:	429a      	cmp	r2, r3
 800a730:	d006      	beq.n	800a740 <tcp_output_segment+0x170>
 800a732:	4b10      	ldr	r3, [pc, #64]	; (800a774 <tcp_output_segment+0x1a4>)
 800a734:	f240 621c 	movw	r2, #1564	; 0x61c
 800a738:	4914      	ldr	r1, [pc, #80]	; (800a78c <tcp_output_segment+0x1bc>)
 800a73a:	4810      	ldr	r0, [pc, #64]	; (800a77c <tcp_output_segment+0x1ac>)
 800a73c:	f003 feda 	bl	800e4f4 <iprintf>
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 800a740:	68fb      	ldr	r3, [r7, #12]
 800a742:	6858      	ldr	r0, [r3, #4]
 800a744:	68b9      	ldr	r1, [r7, #8]
 800a746:	68bb      	ldr	r3, [r7, #8]
 800a748:	1d1c      	adds	r4, r3, #4
 800a74a:	68bb      	ldr	r3, [r7, #8]
 800a74c:	7add      	ldrb	r5, [r3, #11]
 800a74e:	68bb      	ldr	r3, [r7, #8]
 800a750:	7a9b      	ldrb	r3, [r3, #10]
 800a752:	687a      	ldr	r2, [r7, #4]
 800a754:	9202      	str	r2, [sp, #8]
 800a756:	2206      	movs	r2, #6
 800a758:	9201      	str	r2, [sp, #4]
 800a75a:	9300      	str	r3, [sp, #0]
 800a75c:	462b      	mov	r3, r5
 800a75e:	4622      	mov	r2, r4
 800a760:	f002 fdac 	bl	800d2bc <ip4_output_if>
 800a764:	4603      	mov	r3, r0
 800a766:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 800a768:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800a76c:	4618      	mov	r0, r3
 800a76e:	3720      	adds	r7, #32
 800a770:	46bd      	mov	sp, r7
 800a772:	bdb0      	pop	{r4, r5, r7, pc}
 800a774:	08010a9c 	.word	0x08010a9c
 800a778:	08011060 	.word	0x08011060
 800a77c:	08010af0 	.word	0x08010af0
 800a780:	08011080 	.word	0x08011080
 800a784:	080110a0 	.word	0x080110a0
 800a788:	20008280 	.word	0x20008280
 800a78c:	080110c4 	.word	0x080110c4

0800a790 <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 800a790:	b5b0      	push	{r4, r5, r7, lr}
 800a792:	b084      	sub	sp, #16
 800a794:	af00      	add	r7, sp, #0
 800a796:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 800a798:	687b      	ldr	r3, [r7, #4]
 800a79a:	2b00      	cmp	r3, #0
 800a79c:	d106      	bne.n	800a7ac <tcp_rexmit_rto_prepare+0x1c>
 800a79e:	4b31      	ldr	r3, [pc, #196]	; (800a864 <tcp_rexmit_rto_prepare+0xd4>)
 800a7a0:	f240 6263 	movw	r2, #1635	; 0x663
 800a7a4:	4930      	ldr	r1, [pc, #192]	; (800a868 <tcp_rexmit_rto_prepare+0xd8>)
 800a7a6:	4831      	ldr	r0, [pc, #196]	; (800a86c <tcp_rexmit_rto_prepare+0xdc>)
 800a7a8:	f003 fea4 	bl	800e4f4 <iprintf>

  if (pcb->unacked == NULL) {
 800a7ac:	687b      	ldr	r3, [r7, #4]
 800a7ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a7b0:	2b00      	cmp	r3, #0
 800a7b2:	d102      	bne.n	800a7ba <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 800a7b4:	f06f 0305 	mvn.w	r3, #5
 800a7b8:	e050      	b.n	800a85c <tcp_rexmit_rto_prepare+0xcc>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 800a7ba:	687b      	ldr	r3, [r7, #4]
 800a7bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a7be:	60fb      	str	r3, [r7, #12]
 800a7c0:	e00b      	b.n	800a7da <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 800a7c2:	68f8      	ldr	r0, [r7, #12]
 800a7c4:	f7ff fee4 	bl	800a590 <tcp_output_segment_busy>
 800a7c8:	4603      	mov	r3, r0
 800a7ca:	2b00      	cmp	r3, #0
 800a7cc:	d002      	beq.n	800a7d4 <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 800a7ce:	f06f 0305 	mvn.w	r3, #5
 800a7d2:	e043      	b.n	800a85c <tcp_rexmit_rto_prepare+0xcc>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 800a7d4:	68fb      	ldr	r3, [r7, #12]
 800a7d6:	681b      	ldr	r3, [r3, #0]
 800a7d8:	60fb      	str	r3, [r7, #12]
 800a7da:	68fb      	ldr	r3, [r7, #12]
 800a7dc:	681b      	ldr	r3, [r3, #0]
 800a7de:	2b00      	cmp	r3, #0
 800a7e0:	d1ef      	bne.n	800a7c2 <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 800a7e2:	68f8      	ldr	r0, [r7, #12]
 800a7e4:	f7ff fed4 	bl	800a590 <tcp_output_segment_busy>
 800a7e8:	4603      	mov	r3, r0
 800a7ea:	2b00      	cmp	r3, #0
 800a7ec:	d002      	beq.n	800a7f4 <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 800a7ee:	f06f 0305 	mvn.w	r3, #5
 800a7f2:	e033      	b.n	800a85c <tcp_rexmit_rto_prepare+0xcc>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 800a7f4:	687b      	ldr	r3, [r7, #4]
 800a7f6:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800a7f8:	68fb      	ldr	r3, [r7, #12]
 800a7fa:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 800a7fc:	687b      	ldr	r3, [r7, #4]
 800a7fe:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800a800:	687b      	ldr	r3, [r7, #4]
 800a802:	66da      	str	r2, [r3, #108]	; 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 800a804:	687b      	ldr	r3, [r7, #4]
 800a806:	2200      	movs	r2, #0
 800a808:	671a      	str	r2, [r3, #112]	; 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 800a80a:	687b      	ldr	r3, [r7, #4]
 800a80c:	8b5b      	ldrh	r3, [r3, #26]
 800a80e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800a812:	b29a      	uxth	r2, r3
 800a814:	687b      	ldr	r3, [r7, #4]
 800a816:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 800a818:	68fb      	ldr	r3, [r7, #12]
 800a81a:	68db      	ldr	r3, [r3, #12]
 800a81c:	685b      	ldr	r3, [r3, #4]
 800a81e:	4618      	mov	r0, r3
 800a820:	f7f9 fcf5 	bl	800420e <lwip_htonl>
 800a824:	4604      	mov	r4, r0
 800a826:	68fb      	ldr	r3, [r7, #12]
 800a828:	891b      	ldrh	r3, [r3, #8]
 800a82a:	461d      	mov	r5, r3
 800a82c:	68fb      	ldr	r3, [r7, #12]
 800a82e:	68db      	ldr	r3, [r3, #12]
 800a830:	899b      	ldrh	r3, [r3, #12]
 800a832:	b29b      	uxth	r3, r3
 800a834:	4618      	mov	r0, r3
 800a836:	f7f9 fcd5 	bl	80041e4 <lwip_htons>
 800a83a:	4603      	mov	r3, r0
 800a83c:	b2db      	uxtb	r3, r3
 800a83e:	f003 0303 	and.w	r3, r3, #3
 800a842:	2b00      	cmp	r3, #0
 800a844:	d001      	beq.n	800a84a <tcp_rexmit_rto_prepare+0xba>
 800a846:	2301      	movs	r3, #1
 800a848:	e000      	b.n	800a84c <tcp_rexmit_rto_prepare+0xbc>
 800a84a:	2300      	movs	r3, #0
 800a84c:	442b      	add	r3, r5
 800a84e:	18e2      	adds	r2, r4, r3
 800a850:	687b      	ldr	r3, [r7, #4]
 800a852:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 800a854:	687b      	ldr	r3, [r7, #4]
 800a856:	2200      	movs	r2, #0
 800a858:	635a      	str	r2, [r3, #52]	; 0x34

  return ERR_OK;
 800a85a:	2300      	movs	r3, #0
}
 800a85c:	4618      	mov	r0, r3
 800a85e:	3710      	adds	r7, #16
 800a860:	46bd      	mov	sp, r7
 800a862:	bdb0      	pop	{r4, r5, r7, pc}
 800a864:	08010a9c 	.word	0x08010a9c
 800a868:	080110d8 	.word	0x080110d8
 800a86c:	08010af0 	.word	0x08010af0

0800a870 <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 800a870:	b580      	push	{r7, lr}
 800a872:	b082      	sub	sp, #8
 800a874:	af00      	add	r7, sp, #0
 800a876:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 800a878:	687b      	ldr	r3, [r7, #4]
 800a87a:	2b00      	cmp	r3, #0
 800a87c:	d106      	bne.n	800a88c <tcp_rexmit_rto_commit+0x1c>
 800a87e:	4b0d      	ldr	r3, [pc, #52]	; (800a8b4 <tcp_rexmit_rto_commit+0x44>)
 800a880:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 800a884:	490c      	ldr	r1, [pc, #48]	; (800a8b8 <tcp_rexmit_rto_commit+0x48>)
 800a886:	480d      	ldr	r0, [pc, #52]	; (800a8bc <tcp_rexmit_rto_commit+0x4c>)
 800a888:	f003 fe34 	bl	800e4f4 <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 800a88c:	687b      	ldr	r3, [r7, #4]
 800a88e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800a892:	2bff      	cmp	r3, #255	; 0xff
 800a894:	d007      	beq.n	800a8a6 <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 800a896:	687b      	ldr	r3, [r7, #4]
 800a898:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800a89c:	3301      	adds	r3, #1
 800a89e:	b2da      	uxtb	r2, r3
 800a8a0:	687b      	ldr	r3, [r7, #4]
 800a8a2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 800a8a6:	6878      	ldr	r0, [r7, #4]
 800a8a8:	f7ff fc7e 	bl	800a1a8 <tcp_output>
}
 800a8ac:	bf00      	nop
 800a8ae:	3708      	adds	r7, #8
 800a8b0:	46bd      	mov	sp, r7
 800a8b2:	bd80      	pop	{r7, pc}
 800a8b4:	08010a9c 	.word	0x08010a9c
 800a8b8:	080110fc 	.word	0x080110fc
 800a8bc:	08010af0 	.word	0x08010af0

0800a8c0 <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 800a8c0:	b580      	push	{r7, lr}
 800a8c2:	b082      	sub	sp, #8
 800a8c4:	af00      	add	r7, sp, #0
 800a8c6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 800a8c8:	687b      	ldr	r3, [r7, #4]
 800a8ca:	2b00      	cmp	r3, #0
 800a8cc:	d106      	bne.n	800a8dc <tcp_rexmit_rto+0x1c>
 800a8ce:	4b0a      	ldr	r3, [pc, #40]	; (800a8f8 <tcp_rexmit_rto+0x38>)
 800a8d0:	f240 62ad 	movw	r2, #1709	; 0x6ad
 800a8d4:	4909      	ldr	r1, [pc, #36]	; (800a8fc <tcp_rexmit_rto+0x3c>)
 800a8d6:	480a      	ldr	r0, [pc, #40]	; (800a900 <tcp_rexmit_rto+0x40>)
 800a8d8:	f003 fe0c 	bl	800e4f4 <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 800a8dc:	6878      	ldr	r0, [r7, #4]
 800a8de:	f7ff ff57 	bl	800a790 <tcp_rexmit_rto_prepare>
 800a8e2:	4603      	mov	r3, r0
 800a8e4:	2b00      	cmp	r3, #0
 800a8e6:	d102      	bne.n	800a8ee <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 800a8e8:	6878      	ldr	r0, [r7, #4]
 800a8ea:	f7ff ffc1 	bl	800a870 <tcp_rexmit_rto_commit>
  }
}
 800a8ee:	bf00      	nop
 800a8f0:	3708      	adds	r7, #8
 800a8f2:	46bd      	mov	sp, r7
 800a8f4:	bd80      	pop	{r7, pc}
 800a8f6:	bf00      	nop
 800a8f8:	08010a9c 	.word	0x08010a9c
 800a8fc:	08011120 	.word	0x08011120
 800a900:	08010af0 	.word	0x08010af0

0800a904 <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 800a904:	b590      	push	{r4, r7, lr}
 800a906:	b085      	sub	sp, #20
 800a908:	af00      	add	r7, sp, #0
 800a90a:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 800a90c:	687b      	ldr	r3, [r7, #4]
 800a90e:	2b00      	cmp	r3, #0
 800a910:	d106      	bne.n	800a920 <tcp_rexmit+0x1c>
 800a912:	4b2f      	ldr	r3, [pc, #188]	; (800a9d0 <tcp_rexmit+0xcc>)
 800a914:	f240 62c1 	movw	r2, #1729	; 0x6c1
 800a918:	492e      	ldr	r1, [pc, #184]	; (800a9d4 <tcp_rexmit+0xd0>)
 800a91a:	482f      	ldr	r0, [pc, #188]	; (800a9d8 <tcp_rexmit+0xd4>)
 800a91c:	f003 fdea 	bl	800e4f4 <iprintf>

  if (pcb->unacked == NULL) {
 800a920:	687b      	ldr	r3, [r7, #4]
 800a922:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a924:	2b00      	cmp	r3, #0
 800a926:	d102      	bne.n	800a92e <tcp_rexmit+0x2a>
    return ERR_VAL;
 800a928:	f06f 0305 	mvn.w	r3, #5
 800a92c:	e04c      	b.n	800a9c8 <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 800a92e:	687b      	ldr	r3, [r7, #4]
 800a930:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a932:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 800a934:	68b8      	ldr	r0, [r7, #8]
 800a936:	f7ff fe2b 	bl	800a590 <tcp_output_segment_busy>
 800a93a:	4603      	mov	r3, r0
 800a93c:	2b00      	cmp	r3, #0
 800a93e:	d002      	beq.n	800a946 <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 800a940:	f06f 0305 	mvn.w	r3, #5
 800a944:	e040      	b.n	800a9c8 <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 800a946:	68bb      	ldr	r3, [r7, #8]
 800a948:	681a      	ldr	r2, [r3, #0]
 800a94a:	687b      	ldr	r3, [r7, #4]
 800a94c:	671a      	str	r2, [r3, #112]	; 0x70

  cur_seg = &(pcb->unsent);
 800a94e:	687b      	ldr	r3, [r7, #4]
 800a950:	336c      	adds	r3, #108	; 0x6c
 800a952:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 800a954:	e002      	b.n	800a95c <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 800a956:	68fb      	ldr	r3, [r7, #12]
 800a958:	681b      	ldr	r3, [r3, #0]
 800a95a:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 800a95c:	68fb      	ldr	r3, [r7, #12]
 800a95e:	681b      	ldr	r3, [r3, #0]
 800a960:	2b00      	cmp	r3, #0
 800a962:	d011      	beq.n	800a988 <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 800a964:	68fb      	ldr	r3, [r7, #12]
 800a966:	681b      	ldr	r3, [r3, #0]
 800a968:	68db      	ldr	r3, [r3, #12]
 800a96a:	685b      	ldr	r3, [r3, #4]
 800a96c:	4618      	mov	r0, r3
 800a96e:	f7f9 fc4e 	bl	800420e <lwip_htonl>
 800a972:	4604      	mov	r4, r0
 800a974:	68bb      	ldr	r3, [r7, #8]
 800a976:	68db      	ldr	r3, [r3, #12]
 800a978:	685b      	ldr	r3, [r3, #4]
 800a97a:	4618      	mov	r0, r3
 800a97c:	f7f9 fc47 	bl	800420e <lwip_htonl>
 800a980:	4603      	mov	r3, r0
 800a982:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 800a984:	2b00      	cmp	r3, #0
 800a986:	dbe6      	blt.n	800a956 <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 800a988:	68fb      	ldr	r3, [r7, #12]
 800a98a:	681a      	ldr	r2, [r3, #0]
 800a98c:	68bb      	ldr	r3, [r7, #8]
 800a98e:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 800a990:	68fb      	ldr	r3, [r7, #12]
 800a992:	68ba      	ldr	r2, [r7, #8]
 800a994:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 800a996:	68bb      	ldr	r3, [r7, #8]
 800a998:	681b      	ldr	r3, [r3, #0]
 800a99a:	2b00      	cmp	r3, #0
 800a99c:	d103      	bne.n	800a9a6 <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 800a99e:	687b      	ldr	r3, [r7, #4]
 800a9a0:	2200      	movs	r2, #0
 800a9a2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 800a9a6:	687b      	ldr	r3, [r7, #4]
 800a9a8:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800a9ac:	2bff      	cmp	r3, #255	; 0xff
 800a9ae:	d007      	beq.n	800a9c0 <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 800a9b0:	687b      	ldr	r3, [r7, #4]
 800a9b2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800a9b6:	3301      	adds	r3, #1
 800a9b8:	b2da      	uxtb	r2, r3
 800a9ba:	687b      	ldr	r3, [r7, #4]
 800a9bc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 800a9c0:	687b      	ldr	r3, [r7, #4]
 800a9c2:	2200      	movs	r2, #0
 800a9c4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 800a9c6:	2300      	movs	r3, #0
}
 800a9c8:	4618      	mov	r0, r3
 800a9ca:	3714      	adds	r7, #20
 800a9cc:	46bd      	mov	sp, r7
 800a9ce:	bd90      	pop	{r4, r7, pc}
 800a9d0:	08010a9c 	.word	0x08010a9c
 800a9d4:	0801113c 	.word	0x0801113c
 800a9d8:	08010af0 	.word	0x08010af0

0800a9dc <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 800a9dc:	b580      	push	{r7, lr}
 800a9de:	b082      	sub	sp, #8
 800a9e0:	af00      	add	r7, sp, #0
 800a9e2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 800a9e4:	687b      	ldr	r3, [r7, #4]
 800a9e6:	2b00      	cmp	r3, #0
 800a9e8:	d106      	bne.n	800a9f8 <tcp_rexmit_fast+0x1c>
 800a9ea:	4b2a      	ldr	r3, [pc, #168]	; (800aa94 <tcp_rexmit_fast+0xb8>)
 800a9ec:	f240 62f9 	movw	r2, #1785	; 0x6f9
 800a9f0:	4929      	ldr	r1, [pc, #164]	; (800aa98 <tcp_rexmit_fast+0xbc>)
 800a9f2:	482a      	ldr	r0, [pc, #168]	; (800aa9c <tcp_rexmit_fast+0xc0>)
 800a9f4:	f003 fd7e 	bl	800e4f4 <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 800a9f8:	687b      	ldr	r3, [r7, #4]
 800a9fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a9fc:	2b00      	cmp	r3, #0
 800a9fe:	d044      	beq.n	800aa8a <tcp_rexmit_fast+0xae>
 800aa00:	687b      	ldr	r3, [r7, #4]
 800aa02:	8b5b      	ldrh	r3, [r3, #26]
 800aa04:	f003 0304 	and.w	r3, r3, #4
 800aa08:	2b00      	cmp	r3, #0
 800aa0a:	d13e      	bne.n	800aa8a <tcp_rexmit_fast+0xae>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 800aa0c:	6878      	ldr	r0, [r7, #4]
 800aa0e:	f7ff ff79 	bl	800a904 <tcp_rexmit>
 800aa12:	4603      	mov	r3, r0
 800aa14:	2b00      	cmp	r3, #0
 800aa16:	d138      	bne.n	800aa8a <tcp_rexmit_fast+0xae>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 800aa18:	687b      	ldr	r3, [r7, #4]
 800aa1a:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800aa1e:	687b      	ldr	r3, [r7, #4]
 800aa20:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800aa24:	4293      	cmp	r3, r2
 800aa26:	bf28      	it	cs
 800aa28:	4613      	movcs	r3, r2
 800aa2a:	b29b      	uxth	r3, r3
 800aa2c:	0fda      	lsrs	r2, r3, #31
 800aa2e:	4413      	add	r3, r2
 800aa30:	105b      	asrs	r3, r3, #1
 800aa32:	b29a      	uxth	r2, r3
 800aa34:	687b      	ldr	r3, [r7, #4]
 800aa36:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 800aa3a:	687b      	ldr	r3, [r7, #4]
 800aa3c:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 800aa40:	461a      	mov	r2, r3
 800aa42:	687b      	ldr	r3, [r7, #4]
 800aa44:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800aa46:	005b      	lsls	r3, r3, #1
 800aa48:	429a      	cmp	r2, r3
 800aa4a:	d206      	bcs.n	800aa5a <tcp_rexmit_fast+0x7e>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 800aa4c:	687b      	ldr	r3, [r7, #4]
 800aa4e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800aa50:	005b      	lsls	r3, r3, #1
 800aa52:	b29a      	uxth	r2, r3
 800aa54:	687b      	ldr	r3, [r7, #4]
 800aa56:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 800aa5a:	687b      	ldr	r3, [r7, #4]
 800aa5c:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800aa60:	687b      	ldr	r3, [r7, #4]
 800aa62:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800aa64:	4619      	mov	r1, r3
 800aa66:	0049      	lsls	r1, r1, #1
 800aa68:	440b      	add	r3, r1
 800aa6a:	b29b      	uxth	r3, r3
 800aa6c:	4413      	add	r3, r2
 800aa6e:	b29a      	uxth	r2, r3
 800aa70:	687b      	ldr	r3, [r7, #4]
 800aa72:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
      tcp_set_flags(pcb, TF_INFR);
 800aa76:	687b      	ldr	r3, [r7, #4]
 800aa78:	8b5b      	ldrh	r3, [r3, #26]
 800aa7a:	f043 0304 	orr.w	r3, r3, #4
 800aa7e:	b29a      	uxth	r2, r3
 800aa80:	687b      	ldr	r3, [r7, #4]
 800aa82:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 800aa84:	687b      	ldr	r3, [r7, #4]
 800aa86:	2200      	movs	r2, #0
 800aa88:	861a      	strh	r2, [r3, #48]	; 0x30
    }
  }
}
 800aa8a:	bf00      	nop
 800aa8c:	3708      	adds	r7, #8
 800aa8e:	46bd      	mov	sp, r7
 800aa90:	bd80      	pop	{r7, pc}
 800aa92:	bf00      	nop
 800aa94:	08010a9c 	.word	0x08010a9c
 800aa98:	08011154 	.word	0x08011154
 800aa9c:	08010af0 	.word	0x08010af0

0800aaa0 <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 800aaa0:	b580      	push	{r7, lr}
 800aaa2:	b086      	sub	sp, #24
 800aaa4:	af00      	add	r7, sp, #0
 800aaa6:	60f8      	str	r0, [r7, #12]
 800aaa8:	607b      	str	r3, [r7, #4]
 800aaaa:	460b      	mov	r3, r1
 800aaac:	817b      	strh	r3, [r7, #10]
 800aaae:	4613      	mov	r3, r2
 800aab0:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 800aab2:	897a      	ldrh	r2, [r7, #10]
 800aab4:	893b      	ldrh	r3, [r7, #8]
 800aab6:	4413      	add	r3, r2
 800aab8:	b29b      	uxth	r3, r3
 800aaba:	3314      	adds	r3, #20
 800aabc:	b29b      	uxth	r3, r3
 800aabe:	f44f 7220 	mov.w	r2, #640	; 0x280
 800aac2:	4619      	mov	r1, r3
 800aac4:	2022      	movs	r0, #34	; 0x22
 800aac6:	f7fa fc07 	bl	80052d8 <pbuf_alloc>
 800aaca:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 800aacc:	697b      	ldr	r3, [r7, #20]
 800aace:	2b00      	cmp	r3, #0
 800aad0:	d04d      	beq.n	800ab6e <tcp_output_alloc_header_common+0xce>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 800aad2:	897b      	ldrh	r3, [r7, #10]
 800aad4:	3313      	adds	r3, #19
 800aad6:	697a      	ldr	r2, [r7, #20]
 800aad8:	8952      	ldrh	r2, [r2, #10]
 800aada:	4293      	cmp	r3, r2
 800aadc:	db06      	blt.n	800aaec <tcp_output_alloc_header_common+0x4c>
 800aade:	4b26      	ldr	r3, [pc, #152]	; (800ab78 <tcp_output_alloc_header_common+0xd8>)
 800aae0:	f240 7223 	movw	r2, #1827	; 0x723
 800aae4:	4925      	ldr	r1, [pc, #148]	; (800ab7c <tcp_output_alloc_header_common+0xdc>)
 800aae6:	4826      	ldr	r0, [pc, #152]	; (800ab80 <tcp_output_alloc_header_common+0xe0>)
 800aae8:	f003 fd04 	bl	800e4f4 <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 800aaec:	697b      	ldr	r3, [r7, #20]
 800aaee:	685b      	ldr	r3, [r3, #4]
 800aaf0:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 800aaf2:	8c3b      	ldrh	r3, [r7, #32]
 800aaf4:	4618      	mov	r0, r3
 800aaf6:	f7f9 fb75 	bl	80041e4 <lwip_htons>
 800aafa:	4603      	mov	r3, r0
 800aafc:	461a      	mov	r2, r3
 800aafe:	693b      	ldr	r3, [r7, #16]
 800ab00:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 800ab02:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ab04:	4618      	mov	r0, r3
 800ab06:	f7f9 fb6d 	bl	80041e4 <lwip_htons>
 800ab0a:	4603      	mov	r3, r0
 800ab0c:	461a      	mov	r2, r3
 800ab0e:	693b      	ldr	r3, [r7, #16]
 800ab10:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 800ab12:	693b      	ldr	r3, [r7, #16]
 800ab14:	687a      	ldr	r2, [r7, #4]
 800ab16:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 800ab18:	68f8      	ldr	r0, [r7, #12]
 800ab1a:	f7f9 fb78 	bl	800420e <lwip_htonl>
 800ab1e:	4602      	mov	r2, r0
 800ab20:	693b      	ldr	r3, [r7, #16]
 800ab22:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 800ab24:	897b      	ldrh	r3, [r7, #10]
 800ab26:	089b      	lsrs	r3, r3, #2
 800ab28:	b29b      	uxth	r3, r3
 800ab2a:	3305      	adds	r3, #5
 800ab2c:	b29b      	uxth	r3, r3
 800ab2e:	031b      	lsls	r3, r3, #12
 800ab30:	b29a      	uxth	r2, r3
 800ab32:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800ab36:	b29b      	uxth	r3, r3
 800ab38:	4313      	orrs	r3, r2
 800ab3a:	b29b      	uxth	r3, r3
 800ab3c:	4618      	mov	r0, r3
 800ab3e:	f7f9 fb51 	bl	80041e4 <lwip_htons>
 800ab42:	4603      	mov	r3, r0
 800ab44:	461a      	mov	r2, r3
 800ab46:	693b      	ldr	r3, [r7, #16]
 800ab48:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 800ab4a:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800ab4c:	4618      	mov	r0, r3
 800ab4e:	f7f9 fb49 	bl	80041e4 <lwip_htons>
 800ab52:	4603      	mov	r3, r0
 800ab54:	461a      	mov	r2, r3
 800ab56:	693b      	ldr	r3, [r7, #16]
 800ab58:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 800ab5a:	693b      	ldr	r3, [r7, #16]
 800ab5c:	2200      	movs	r2, #0
 800ab5e:	741a      	strb	r2, [r3, #16]
 800ab60:	2200      	movs	r2, #0
 800ab62:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 800ab64:	693b      	ldr	r3, [r7, #16]
 800ab66:	2200      	movs	r2, #0
 800ab68:	749a      	strb	r2, [r3, #18]
 800ab6a:	2200      	movs	r2, #0
 800ab6c:	74da      	strb	r2, [r3, #19]
  }
  return p;
 800ab6e:	697b      	ldr	r3, [r7, #20]
}
 800ab70:	4618      	mov	r0, r3
 800ab72:	3718      	adds	r7, #24
 800ab74:	46bd      	mov	sp, r7
 800ab76:	bd80      	pop	{r7, pc}
 800ab78:	08010a9c 	.word	0x08010a9c
 800ab7c:	08011174 	.word	0x08011174
 800ab80:	08010af0 	.word	0x08010af0

0800ab84 <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 800ab84:	b5b0      	push	{r4, r5, r7, lr}
 800ab86:	b08a      	sub	sp, #40	; 0x28
 800ab88:	af04      	add	r7, sp, #16
 800ab8a:	60f8      	str	r0, [r7, #12]
 800ab8c:	607b      	str	r3, [r7, #4]
 800ab8e:	460b      	mov	r3, r1
 800ab90:	817b      	strh	r3, [r7, #10]
 800ab92:	4613      	mov	r3, r2
 800ab94:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 800ab96:	68fb      	ldr	r3, [r7, #12]
 800ab98:	2b00      	cmp	r3, #0
 800ab9a:	d106      	bne.n	800abaa <tcp_output_alloc_header+0x26>
 800ab9c:	4b15      	ldr	r3, [pc, #84]	; (800abf4 <tcp_output_alloc_header+0x70>)
 800ab9e:	f240 7242 	movw	r2, #1858	; 0x742
 800aba2:	4915      	ldr	r1, [pc, #84]	; (800abf8 <tcp_output_alloc_header+0x74>)
 800aba4:	4815      	ldr	r0, [pc, #84]	; (800abfc <tcp_output_alloc_header+0x78>)
 800aba6:	f003 fca5 	bl	800e4f4 <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 800abaa:	68fb      	ldr	r3, [r7, #12]
 800abac:	6a58      	ldr	r0, [r3, #36]	; 0x24
 800abae:	68fb      	ldr	r3, [r7, #12]
 800abb0:	8adb      	ldrh	r3, [r3, #22]
 800abb2:	68fa      	ldr	r2, [r7, #12]
 800abb4:	8b12      	ldrh	r2, [r2, #24]
 800abb6:	68f9      	ldr	r1, [r7, #12]
 800abb8:	8d49      	ldrh	r1, [r1, #42]	; 0x2a
 800abba:	893d      	ldrh	r5, [r7, #8]
 800abbc:	897c      	ldrh	r4, [r7, #10]
 800abbe:	9103      	str	r1, [sp, #12]
 800abc0:	2110      	movs	r1, #16
 800abc2:	9102      	str	r1, [sp, #8]
 800abc4:	9201      	str	r2, [sp, #4]
 800abc6:	9300      	str	r3, [sp, #0]
 800abc8:	687b      	ldr	r3, [r7, #4]
 800abca:	462a      	mov	r2, r5
 800abcc:	4621      	mov	r1, r4
 800abce:	f7ff ff67 	bl	800aaa0 <tcp_output_alloc_header_common>
 800abd2:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 800abd4:	697b      	ldr	r3, [r7, #20]
 800abd6:	2b00      	cmp	r3, #0
 800abd8:	d006      	beq.n	800abe8 <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800abda:	68fb      	ldr	r3, [r7, #12]
 800abdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800abde:	68fa      	ldr	r2, [r7, #12]
 800abe0:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 800abe2:	441a      	add	r2, r3
 800abe4:	68fb      	ldr	r3, [r7, #12]
 800abe6:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  return p;
 800abe8:	697b      	ldr	r3, [r7, #20]
}
 800abea:	4618      	mov	r0, r3
 800abec:	3718      	adds	r7, #24
 800abee:	46bd      	mov	sp, r7
 800abf0:	bdb0      	pop	{r4, r5, r7, pc}
 800abf2:	bf00      	nop
 800abf4:	08010a9c 	.word	0x08010a9c
 800abf8:	080111a4 	.word	0x080111a4
 800abfc:	08010af0 	.word	0x08010af0

0800ac00 <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 800ac00:	b580      	push	{r7, lr}
 800ac02:	b088      	sub	sp, #32
 800ac04:	af00      	add	r7, sp, #0
 800ac06:	60f8      	str	r0, [r7, #12]
 800ac08:	60b9      	str	r1, [r7, #8]
 800ac0a:	4611      	mov	r1, r2
 800ac0c:	461a      	mov	r2, r3
 800ac0e:	460b      	mov	r3, r1
 800ac10:	71fb      	strb	r3, [r7, #7]
 800ac12:	4613      	mov	r3, r2
 800ac14:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 800ac16:	2300      	movs	r3, #0
 800ac18:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 800ac1a:	68bb      	ldr	r3, [r7, #8]
 800ac1c:	2b00      	cmp	r3, #0
 800ac1e:	d106      	bne.n	800ac2e <tcp_output_fill_options+0x2e>
 800ac20:	4b12      	ldr	r3, [pc, #72]	; (800ac6c <tcp_output_fill_options+0x6c>)
 800ac22:	f240 7256 	movw	r2, #1878	; 0x756
 800ac26:	4912      	ldr	r1, [pc, #72]	; (800ac70 <tcp_output_fill_options+0x70>)
 800ac28:	4812      	ldr	r0, [pc, #72]	; (800ac74 <tcp_output_fill_options+0x74>)
 800ac2a:	f003 fc63 	bl	800e4f4 <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 800ac2e:	68bb      	ldr	r3, [r7, #8]
 800ac30:	685b      	ldr	r3, [r3, #4]
 800ac32:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 800ac34:	69bb      	ldr	r3, [r7, #24]
 800ac36:	3314      	adds	r3, #20
 800ac38:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 800ac3a:	8bfb      	ldrh	r3, [r7, #30]
 800ac3c:	009b      	lsls	r3, r3, #2
 800ac3e:	461a      	mov	r2, r3
 800ac40:	79fb      	ldrb	r3, [r7, #7]
 800ac42:	009b      	lsls	r3, r3, #2
 800ac44:	f003 0304 	and.w	r3, r3, #4
 800ac48:	4413      	add	r3, r2
 800ac4a:	3314      	adds	r3, #20
 800ac4c:	69ba      	ldr	r2, [r7, #24]
 800ac4e:	4413      	add	r3, r2
 800ac50:	697a      	ldr	r2, [r7, #20]
 800ac52:	429a      	cmp	r2, r3
 800ac54:	d006      	beq.n	800ac64 <tcp_output_fill_options+0x64>
 800ac56:	4b05      	ldr	r3, [pc, #20]	; (800ac6c <tcp_output_fill_options+0x6c>)
 800ac58:	f240 7275 	movw	r2, #1909	; 0x775
 800ac5c:	4906      	ldr	r1, [pc, #24]	; (800ac78 <tcp_output_fill_options+0x78>)
 800ac5e:	4805      	ldr	r0, [pc, #20]	; (800ac74 <tcp_output_fill_options+0x74>)
 800ac60:	f003 fc48 	bl	800e4f4 <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 800ac64:	bf00      	nop
 800ac66:	3720      	adds	r7, #32
 800ac68:	46bd      	mov	sp, r7
 800ac6a:	bd80      	pop	{r7, pc}
 800ac6c:	08010a9c 	.word	0x08010a9c
 800ac70:	080111cc 	.word	0x080111cc
 800ac74:	08010af0 	.word	0x08010af0
 800ac78:	080110c4 	.word	0x080110c4

0800ac7c <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 800ac7c:	b580      	push	{r7, lr}
 800ac7e:	b08a      	sub	sp, #40	; 0x28
 800ac80:	af04      	add	r7, sp, #16
 800ac82:	60f8      	str	r0, [r7, #12]
 800ac84:	60b9      	str	r1, [r7, #8]
 800ac86:	607a      	str	r2, [r7, #4]
 800ac88:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 800ac8a:	68bb      	ldr	r3, [r7, #8]
 800ac8c:	2b00      	cmp	r3, #0
 800ac8e:	d106      	bne.n	800ac9e <tcp_output_control_segment+0x22>
 800ac90:	4b1c      	ldr	r3, [pc, #112]	; (800ad04 <tcp_output_control_segment+0x88>)
 800ac92:	f240 7287 	movw	r2, #1927	; 0x787
 800ac96:	491c      	ldr	r1, [pc, #112]	; (800ad08 <tcp_output_control_segment+0x8c>)
 800ac98:	481c      	ldr	r0, [pc, #112]	; (800ad0c <tcp_output_control_segment+0x90>)
 800ac9a:	f003 fc2b 	bl	800e4f4 <iprintf>

  netif = tcp_route(pcb, src, dst);
 800ac9e:	683a      	ldr	r2, [r7, #0]
 800aca0:	6879      	ldr	r1, [r7, #4]
 800aca2:	68f8      	ldr	r0, [r7, #12]
 800aca4:	f7fe ff40 	bl	8009b28 <tcp_route>
 800aca8:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 800acaa:	693b      	ldr	r3, [r7, #16]
 800acac:	2b00      	cmp	r3, #0
 800acae:	d102      	bne.n	800acb6 <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 800acb0:	23fc      	movs	r3, #252	; 0xfc
 800acb2:	75fb      	strb	r3, [r7, #23]
 800acb4:	e01c      	b.n	800acf0 <tcp_output_control_segment+0x74>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 800acb6:	68fb      	ldr	r3, [r7, #12]
 800acb8:	2b00      	cmp	r3, #0
 800acba:	d006      	beq.n	800acca <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 800acbc:	68fb      	ldr	r3, [r7, #12]
 800acbe:	7adb      	ldrb	r3, [r3, #11]
 800acc0:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 800acc2:	68fb      	ldr	r3, [r7, #12]
 800acc4:	7a9b      	ldrb	r3, [r3, #10]
 800acc6:	757b      	strb	r3, [r7, #21]
 800acc8:	e003      	b.n	800acd2 <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 800acca:	23ff      	movs	r3, #255	; 0xff
 800accc:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 800acce:	2300      	movs	r3, #0
 800acd0:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 800acd2:	7dba      	ldrb	r2, [r7, #22]
 800acd4:	693b      	ldr	r3, [r7, #16]
 800acd6:	9302      	str	r3, [sp, #8]
 800acd8:	2306      	movs	r3, #6
 800acda:	9301      	str	r3, [sp, #4]
 800acdc:	7d7b      	ldrb	r3, [r7, #21]
 800acde:	9300      	str	r3, [sp, #0]
 800ace0:	4613      	mov	r3, r2
 800ace2:	683a      	ldr	r2, [r7, #0]
 800ace4:	6879      	ldr	r1, [r7, #4]
 800ace6:	68b8      	ldr	r0, [r7, #8]
 800ace8:	f002 fae8 	bl	800d2bc <ip4_output_if>
 800acec:	4603      	mov	r3, r0
 800acee:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 800acf0:	68b8      	ldr	r0, [r7, #8]
 800acf2:	f7fa fdd5 	bl	80058a0 <pbuf_free>
  return err;
 800acf6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800acfa:	4618      	mov	r0, r3
 800acfc:	3718      	adds	r7, #24
 800acfe:	46bd      	mov	sp, r7
 800ad00:	bd80      	pop	{r7, pc}
 800ad02:	bf00      	nop
 800ad04:	08010a9c 	.word	0x08010a9c
 800ad08:	080111f4 	.word	0x080111f4
 800ad0c:	08010af0 	.word	0x08010af0

0800ad10 <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 800ad10:	b590      	push	{r4, r7, lr}
 800ad12:	b08b      	sub	sp, #44	; 0x2c
 800ad14:	af04      	add	r7, sp, #16
 800ad16:	60f8      	str	r0, [r7, #12]
 800ad18:	60b9      	str	r1, [r7, #8]
 800ad1a:	607a      	str	r2, [r7, #4]
 800ad1c:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 800ad1e:	683b      	ldr	r3, [r7, #0]
 800ad20:	2b00      	cmp	r3, #0
 800ad22:	d106      	bne.n	800ad32 <tcp_rst+0x22>
 800ad24:	4b1f      	ldr	r3, [pc, #124]	; (800ada4 <tcp_rst+0x94>)
 800ad26:	f240 72c4 	movw	r2, #1988	; 0x7c4
 800ad2a:	491f      	ldr	r1, [pc, #124]	; (800ada8 <tcp_rst+0x98>)
 800ad2c:	481f      	ldr	r0, [pc, #124]	; (800adac <tcp_rst+0x9c>)
 800ad2e:	f003 fbe1 	bl	800e4f4 <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 800ad32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ad34:	2b00      	cmp	r3, #0
 800ad36:	d106      	bne.n	800ad46 <tcp_rst+0x36>
 800ad38:	4b1a      	ldr	r3, [pc, #104]	; (800ada4 <tcp_rst+0x94>)
 800ad3a:	f240 72c5 	movw	r2, #1989	; 0x7c5
 800ad3e:	491c      	ldr	r1, [pc, #112]	; (800adb0 <tcp_rst+0xa0>)
 800ad40:	481a      	ldr	r0, [pc, #104]	; (800adac <tcp_rst+0x9c>)
 800ad42:	f003 fbd7 	bl	800e4f4 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800ad46:	2300      	movs	r3, #0
 800ad48:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 800ad4a:	f246 0308 	movw	r3, #24584	; 0x6008
 800ad4e:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 800ad50:	7dfb      	ldrb	r3, [r7, #23]
 800ad52:	b29c      	uxth	r4, r3
 800ad54:	68b8      	ldr	r0, [r7, #8]
 800ad56:	f7f9 fa5a 	bl	800420e <lwip_htonl>
 800ad5a:	4602      	mov	r2, r0
 800ad5c:	8abb      	ldrh	r3, [r7, #20]
 800ad5e:	9303      	str	r3, [sp, #12]
 800ad60:	2314      	movs	r3, #20
 800ad62:	9302      	str	r3, [sp, #8]
 800ad64:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800ad66:	9301      	str	r3, [sp, #4]
 800ad68:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800ad6a:	9300      	str	r3, [sp, #0]
 800ad6c:	4613      	mov	r3, r2
 800ad6e:	2200      	movs	r2, #0
 800ad70:	4621      	mov	r1, r4
 800ad72:	6878      	ldr	r0, [r7, #4]
 800ad74:	f7ff fe94 	bl	800aaa0 <tcp_output_alloc_header_common>
 800ad78:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 800ad7a:	693b      	ldr	r3, [r7, #16]
 800ad7c:	2b00      	cmp	r3, #0
 800ad7e:	d00c      	beq.n	800ad9a <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800ad80:	7dfb      	ldrb	r3, [r7, #23]
 800ad82:	2200      	movs	r2, #0
 800ad84:	6939      	ldr	r1, [r7, #16]
 800ad86:	68f8      	ldr	r0, [r7, #12]
 800ad88:	f7ff ff3a 	bl	800ac00 <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 800ad8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ad8e:	683a      	ldr	r2, [r7, #0]
 800ad90:	6939      	ldr	r1, [r7, #16]
 800ad92:	68f8      	ldr	r0, [r7, #12]
 800ad94:	f7ff ff72 	bl	800ac7c <tcp_output_control_segment>
 800ad98:	e000      	b.n	800ad9c <tcp_rst+0x8c>
    return;
 800ad9a:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 800ad9c:	371c      	adds	r7, #28
 800ad9e:	46bd      	mov	sp, r7
 800ada0:	bd90      	pop	{r4, r7, pc}
 800ada2:	bf00      	nop
 800ada4:	08010a9c 	.word	0x08010a9c
 800ada8:	08011220 	.word	0x08011220
 800adac:	08010af0 	.word	0x08010af0
 800adb0:	0801123c 	.word	0x0801123c

0800adb4 <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 800adb4:	b590      	push	{r4, r7, lr}
 800adb6:	b087      	sub	sp, #28
 800adb8:	af00      	add	r7, sp, #0
 800adba:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 800adbc:	2300      	movs	r3, #0
 800adbe:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 800adc0:	2300      	movs	r3, #0
 800adc2:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 800adc4:	687b      	ldr	r3, [r7, #4]
 800adc6:	2b00      	cmp	r3, #0
 800adc8:	d106      	bne.n	800add8 <tcp_send_empty_ack+0x24>
 800adca:	4b28      	ldr	r3, [pc, #160]	; (800ae6c <tcp_send_empty_ack+0xb8>)
 800adcc:	f240 72ea 	movw	r2, #2026	; 0x7ea
 800add0:	4927      	ldr	r1, [pc, #156]	; (800ae70 <tcp_send_empty_ack+0xbc>)
 800add2:	4828      	ldr	r0, [pc, #160]	; (800ae74 <tcp_send_empty_ack+0xc0>)
 800add4:	f003 fb8e 	bl	800e4f4 <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800add8:	7dfb      	ldrb	r3, [r7, #23]
 800adda:	009b      	lsls	r3, r3, #2
 800addc:	b2db      	uxtb	r3, r3
 800adde:	f003 0304 	and.w	r3, r3, #4
 800ade2:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 800ade4:	7d7b      	ldrb	r3, [r7, #21]
 800ade6:	b29c      	uxth	r4, r3
 800ade8:	687b      	ldr	r3, [r7, #4]
 800adea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800adec:	4618      	mov	r0, r3
 800adee:	f7f9 fa0e 	bl	800420e <lwip_htonl>
 800adf2:	4603      	mov	r3, r0
 800adf4:	2200      	movs	r2, #0
 800adf6:	4621      	mov	r1, r4
 800adf8:	6878      	ldr	r0, [r7, #4]
 800adfa:	f7ff fec3 	bl	800ab84 <tcp_output_alloc_header>
 800adfe:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800ae00:	693b      	ldr	r3, [r7, #16]
 800ae02:	2b00      	cmp	r3, #0
 800ae04:	d109      	bne.n	800ae1a <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800ae06:	687b      	ldr	r3, [r7, #4]
 800ae08:	8b5b      	ldrh	r3, [r3, #26]
 800ae0a:	f043 0303 	orr.w	r3, r3, #3
 800ae0e:	b29a      	uxth	r2, r3
 800ae10:	687b      	ldr	r3, [r7, #4]
 800ae12:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 800ae14:	f06f 0301 	mvn.w	r3, #1
 800ae18:	e023      	b.n	800ae62 <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 800ae1a:	7dbb      	ldrb	r3, [r7, #22]
 800ae1c:	7dfa      	ldrb	r2, [r7, #23]
 800ae1e:	6939      	ldr	r1, [r7, #16]
 800ae20:	6878      	ldr	r0, [r7, #4]
 800ae22:	f7ff feed 	bl	800ac00 <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800ae26:	687a      	ldr	r2, [r7, #4]
 800ae28:	687b      	ldr	r3, [r7, #4]
 800ae2a:	3304      	adds	r3, #4
 800ae2c:	6939      	ldr	r1, [r7, #16]
 800ae2e:	6878      	ldr	r0, [r7, #4]
 800ae30:	f7ff ff24 	bl	800ac7c <tcp_output_control_segment>
 800ae34:	4603      	mov	r3, r0
 800ae36:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 800ae38:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ae3c:	2b00      	cmp	r3, #0
 800ae3e:	d007      	beq.n	800ae50 <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800ae40:	687b      	ldr	r3, [r7, #4]
 800ae42:	8b5b      	ldrh	r3, [r3, #26]
 800ae44:	f043 0303 	orr.w	r3, r3, #3
 800ae48:	b29a      	uxth	r2, r3
 800ae4a:	687b      	ldr	r3, [r7, #4]
 800ae4c:	835a      	strh	r2, [r3, #26]
 800ae4e:	e006      	b.n	800ae5e <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800ae50:	687b      	ldr	r3, [r7, #4]
 800ae52:	8b5b      	ldrh	r3, [r3, #26]
 800ae54:	f023 0303 	bic.w	r3, r3, #3
 800ae58:	b29a      	uxth	r2, r3
 800ae5a:	687b      	ldr	r3, [r7, #4]
 800ae5c:	835a      	strh	r2, [r3, #26]
  }

  return err;
 800ae5e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800ae62:	4618      	mov	r0, r3
 800ae64:	371c      	adds	r7, #28
 800ae66:	46bd      	mov	sp, r7
 800ae68:	bd90      	pop	{r4, r7, pc}
 800ae6a:	bf00      	nop
 800ae6c:	08010a9c 	.word	0x08010a9c
 800ae70:	08011258 	.word	0x08011258
 800ae74:	08010af0 	.word	0x08010af0

0800ae78 <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 800ae78:	b590      	push	{r4, r7, lr}
 800ae7a:	b087      	sub	sp, #28
 800ae7c:	af00      	add	r7, sp, #0
 800ae7e:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800ae80:	2300      	movs	r3, #0
 800ae82:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 800ae84:	687b      	ldr	r3, [r7, #4]
 800ae86:	2b00      	cmp	r3, #0
 800ae88:	d106      	bne.n	800ae98 <tcp_keepalive+0x20>
 800ae8a:	4b18      	ldr	r3, [pc, #96]	; (800aeec <tcp_keepalive+0x74>)
 800ae8c:	f640 0224 	movw	r2, #2084	; 0x824
 800ae90:	4917      	ldr	r1, [pc, #92]	; (800aef0 <tcp_keepalive+0x78>)
 800ae92:	4818      	ldr	r0, [pc, #96]	; (800aef4 <tcp_keepalive+0x7c>)
 800ae94:	f003 fb2e 	bl	800e4f4 <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 800ae98:	7dfb      	ldrb	r3, [r7, #23]
 800ae9a:	b29c      	uxth	r4, r3
 800ae9c:	687b      	ldr	r3, [r7, #4]
 800ae9e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800aea0:	3b01      	subs	r3, #1
 800aea2:	4618      	mov	r0, r3
 800aea4:	f7f9 f9b3 	bl	800420e <lwip_htonl>
 800aea8:	4603      	mov	r3, r0
 800aeaa:	2200      	movs	r2, #0
 800aeac:	4621      	mov	r1, r4
 800aeae:	6878      	ldr	r0, [r7, #4]
 800aeb0:	f7ff fe68 	bl	800ab84 <tcp_output_alloc_header>
 800aeb4:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800aeb6:	693b      	ldr	r3, [r7, #16]
 800aeb8:	2b00      	cmp	r3, #0
 800aeba:	d102      	bne.n	800aec2 <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 800aebc:	f04f 33ff 	mov.w	r3, #4294967295
 800aec0:	e010      	b.n	800aee4 <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800aec2:	7dfb      	ldrb	r3, [r7, #23]
 800aec4:	2200      	movs	r2, #0
 800aec6:	6939      	ldr	r1, [r7, #16]
 800aec8:	6878      	ldr	r0, [r7, #4]
 800aeca:	f7ff fe99 	bl	800ac00 <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800aece:	687a      	ldr	r2, [r7, #4]
 800aed0:	687b      	ldr	r3, [r7, #4]
 800aed2:	3304      	adds	r3, #4
 800aed4:	6939      	ldr	r1, [r7, #16]
 800aed6:	6878      	ldr	r0, [r7, #4]
 800aed8:	f7ff fed0 	bl	800ac7c <tcp_output_control_segment>
 800aedc:	4603      	mov	r3, r0
 800aede:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 800aee0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800aee4:	4618      	mov	r0, r3
 800aee6:	371c      	adds	r7, #28
 800aee8:	46bd      	mov	sp, r7
 800aeea:	bd90      	pop	{r4, r7, pc}
 800aeec:	08010a9c 	.word	0x08010a9c
 800aef0:	08011278 	.word	0x08011278
 800aef4:	08010af0 	.word	0x08010af0

0800aef8 <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 800aef8:	b590      	push	{r4, r7, lr}
 800aefa:	b08b      	sub	sp, #44	; 0x2c
 800aefc:	af00      	add	r7, sp, #0
 800aefe:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800af00:	2300      	movs	r3, #0
 800af02:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 800af06:	687b      	ldr	r3, [r7, #4]
 800af08:	2b00      	cmp	r3, #0
 800af0a:	d106      	bne.n	800af1a <tcp_zero_window_probe+0x22>
 800af0c:	4b4c      	ldr	r3, [pc, #304]	; (800b040 <tcp_zero_window_probe+0x148>)
 800af0e:	f640 024f 	movw	r2, #2127	; 0x84f
 800af12:	494c      	ldr	r1, [pc, #304]	; (800b044 <tcp_zero_window_probe+0x14c>)
 800af14:	484c      	ldr	r0, [pc, #304]	; (800b048 <tcp_zero_window_probe+0x150>)
 800af16:	f003 faed 	bl	800e4f4 <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 800af1a:	687b      	ldr	r3, [r7, #4]
 800af1c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800af1e:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 800af20:	6a3b      	ldr	r3, [r7, #32]
 800af22:	2b00      	cmp	r3, #0
 800af24:	d101      	bne.n	800af2a <tcp_zero_window_probe+0x32>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 800af26:	2300      	movs	r3, #0
 800af28:	e086      	b.n	800b038 <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 800af2a:	687b      	ldr	r3, [r7, #4]
 800af2c:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 800af30:	2bff      	cmp	r3, #255	; 0xff
 800af32:	d007      	beq.n	800af44 <tcp_zero_window_probe+0x4c>
    ++pcb->persist_probe;
 800af34:	687b      	ldr	r3, [r7, #4]
 800af36:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 800af3a:	3301      	adds	r3, #1
 800af3c:	b2da      	uxtb	r2, r3
 800af3e:	687b      	ldr	r3, [r7, #4]
 800af40:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 800af44:	6a3b      	ldr	r3, [r7, #32]
 800af46:	68db      	ldr	r3, [r3, #12]
 800af48:	899b      	ldrh	r3, [r3, #12]
 800af4a:	b29b      	uxth	r3, r3
 800af4c:	4618      	mov	r0, r3
 800af4e:	f7f9 f949 	bl	80041e4 <lwip_htons>
 800af52:	4603      	mov	r3, r0
 800af54:	b2db      	uxtb	r3, r3
 800af56:	f003 0301 	and.w	r3, r3, #1
 800af5a:	2b00      	cmp	r3, #0
 800af5c:	d005      	beq.n	800af6a <tcp_zero_window_probe+0x72>
 800af5e:	6a3b      	ldr	r3, [r7, #32]
 800af60:	891b      	ldrh	r3, [r3, #8]
 800af62:	2b00      	cmp	r3, #0
 800af64:	d101      	bne.n	800af6a <tcp_zero_window_probe+0x72>
 800af66:	2301      	movs	r3, #1
 800af68:	e000      	b.n	800af6c <tcp_zero_window_probe+0x74>
 800af6a:	2300      	movs	r3, #0
 800af6c:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 800af6e:	7ffb      	ldrb	r3, [r7, #31]
 800af70:	2b00      	cmp	r3, #0
 800af72:	bf0c      	ite	eq
 800af74:	2301      	moveq	r3, #1
 800af76:	2300      	movne	r3, #0
 800af78:	b2db      	uxtb	r3, r3
 800af7a:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 800af7c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800af80:	b299      	uxth	r1, r3
 800af82:	6a3b      	ldr	r3, [r7, #32]
 800af84:	68db      	ldr	r3, [r3, #12]
 800af86:	685b      	ldr	r3, [r3, #4]
 800af88:	8bba      	ldrh	r2, [r7, #28]
 800af8a:	6878      	ldr	r0, [r7, #4]
 800af8c:	f7ff fdfa 	bl	800ab84 <tcp_output_alloc_header>
 800af90:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 800af92:	69bb      	ldr	r3, [r7, #24]
 800af94:	2b00      	cmp	r3, #0
 800af96:	d102      	bne.n	800af9e <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 800af98:	f04f 33ff 	mov.w	r3, #4294967295
 800af9c:	e04c      	b.n	800b038 <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 800af9e:	69bb      	ldr	r3, [r7, #24]
 800afa0:	685b      	ldr	r3, [r3, #4]
 800afa2:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 800afa4:	7ffb      	ldrb	r3, [r7, #31]
 800afa6:	2b00      	cmp	r3, #0
 800afa8:	d011      	beq.n	800afce <tcp_zero_window_probe+0xd6>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 800afaa:	697b      	ldr	r3, [r7, #20]
 800afac:	899b      	ldrh	r3, [r3, #12]
 800afae:	b29b      	uxth	r3, r3
 800afb0:	b21b      	sxth	r3, r3
 800afb2:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800afb6:	b21c      	sxth	r4, r3
 800afb8:	2011      	movs	r0, #17
 800afba:	f7f9 f913 	bl	80041e4 <lwip_htons>
 800afbe:	4603      	mov	r3, r0
 800afc0:	b21b      	sxth	r3, r3
 800afc2:	4323      	orrs	r3, r4
 800afc4:	b21b      	sxth	r3, r3
 800afc6:	b29a      	uxth	r2, r3
 800afc8:	697b      	ldr	r3, [r7, #20]
 800afca:	819a      	strh	r2, [r3, #12]
 800afcc:	e010      	b.n	800aff0 <tcp_zero_window_probe+0xf8>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 800afce:	69bb      	ldr	r3, [r7, #24]
 800afd0:	685b      	ldr	r3, [r3, #4]
 800afd2:	3314      	adds	r3, #20
 800afd4:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 800afd6:	6a3b      	ldr	r3, [r7, #32]
 800afd8:	6858      	ldr	r0, [r3, #4]
 800afda:	6a3b      	ldr	r3, [r7, #32]
 800afdc:	685b      	ldr	r3, [r3, #4]
 800afde:	891a      	ldrh	r2, [r3, #8]
 800afe0:	6a3b      	ldr	r3, [r7, #32]
 800afe2:	891b      	ldrh	r3, [r3, #8]
 800afe4:	1ad3      	subs	r3, r2, r3
 800afe6:	b29b      	uxth	r3, r3
 800afe8:	2201      	movs	r2, #1
 800afea:	6939      	ldr	r1, [r7, #16]
 800afec:	f7fa fe52 	bl	8005c94 <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 800aff0:	6a3b      	ldr	r3, [r7, #32]
 800aff2:	68db      	ldr	r3, [r3, #12]
 800aff4:	685b      	ldr	r3, [r3, #4]
 800aff6:	4618      	mov	r0, r3
 800aff8:	f7f9 f909 	bl	800420e <lwip_htonl>
 800affc:	4603      	mov	r3, r0
 800affe:	3301      	adds	r3, #1
 800b000:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 800b002:	687b      	ldr	r3, [r7, #4]
 800b004:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800b006:	68fb      	ldr	r3, [r7, #12]
 800b008:	1ad3      	subs	r3, r2, r3
 800b00a:	2b00      	cmp	r3, #0
 800b00c:	da02      	bge.n	800b014 <tcp_zero_window_probe+0x11c>
    pcb->snd_nxt = snd_nxt;
 800b00e:	687b      	ldr	r3, [r7, #4]
 800b010:	68fa      	ldr	r2, [r7, #12]
 800b012:	651a      	str	r2, [r3, #80]	; 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800b014:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b018:	2200      	movs	r2, #0
 800b01a:	69b9      	ldr	r1, [r7, #24]
 800b01c:	6878      	ldr	r0, [r7, #4]
 800b01e:	f7ff fdef 	bl	800ac00 <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800b022:	687a      	ldr	r2, [r7, #4]
 800b024:	687b      	ldr	r3, [r7, #4]
 800b026:	3304      	adds	r3, #4
 800b028:	69b9      	ldr	r1, [r7, #24]
 800b02a:	6878      	ldr	r0, [r7, #4]
 800b02c:	f7ff fe26 	bl	800ac7c <tcp_output_control_segment>
 800b030:	4603      	mov	r3, r0
 800b032:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 800b034:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 800b038:	4618      	mov	r0, r3
 800b03a:	372c      	adds	r7, #44	; 0x2c
 800b03c:	46bd      	mov	sp, r7
 800b03e:	bd90      	pop	{r4, r7, pc}
 800b040:	08010a9c 	.word	0x08010a9c
 800b044:	08011294 	.word	0x08011294
 800b048:	08010af0 	.word	0x08010af0

0800b04c <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 800b04c:	b580      	push	{r7, lr}
 800b04e:	b082      	sub	sp, #8
 800b050:	af00      	add	r7, sp, #0
 800b052:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 800b054:	f7fa ff0c 	bl	8005e70 <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 800b058:	4b0a      	ldr	r3, [pc, #40]	; (800b084 <tcpip_tcp_timer+0x38>)
 800b05a:	681b      	ldr	r3, [r3, #0]
 800b05c:	2b00      	cmp	r3, #0
 800b05e:	d103      	bne.n	800b068 <tcpip_tcp_timer+0x1c>
 800b060:	4b09      	ldr	r3, [pc, #36]	; (800b088 <tcpip_tcp_timer+0x3c>)
 800b062:	681b      	ldr	r3, [r3, #0]
 800b064:	2b00      	cmp	r3, #0
 800b066:	d005      	beq.n	800b074 <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 800b068:	2200      	movs	r2, #0
 800b06a:	4908      	ldr	r1, [pc, #32]	; (800b08c <tcpip_tcp_timer+0x40>)
 800b06c:	20fa      	movs	r0, #250	; 0xfa
 800b06e:	f000 f8f3 	bl	800b258 <sys_timeout>
 800b072:	e003      	b.n	800b07c <tcpip_tcp_timer+0x30>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 800b074:	4b06      	ldr	r3, [pc, #24]	; (800b090 <tcpip_tcp_timer+0x44>)
 800b076:	2200      	movs	r2, #0
 800b078:	601a      	str	r2, [r3, #0]
  }
}
 800b07a:	bf00      	nop
 800b07c:	bf00      	nop
 800b07e:	3708      	adds	r7, #8
 800b080:	46bd      	mov	sp, r7
 800b082:	bd80      	pop	{r7, pc}
 800b084:	2000828c 	.word	0x2000828c
 800b088:	20008290 	.word	0x20008290
 800b08c:	0800b04d 	.word	0x0800b04d
 800b090:	200082d8 	.word	0x200082d8

0800b094 <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 800b094:	b580      	push	{r7, lr}
 800b096:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 800b098:	4b0a      	ldr	r3, [pc, #40]	; (800b0c4 <tcp_timer_needed+0x30>)
 800b09a:	681b      	ldr	r3, [r3, #0]
 800b09c:	2b00      	cmp	r3, #0
 800b09e:	d10f      	bne.n	800b0c0 <tcp_timer_needed+0x2c>
 800b0a0:	4b09      	ldr	r3, [pc, #36]	; (800b0c8 <tcp_timer_needed+0x34>)
 800b0a2:	681b      	ldr	r3, [r3, #0]
 800b0a4:	2b00      	cmp	r3, #0
 800b0a6:	d103      	bne.n	800b0b0 <tcp_timer_needed+0x1c>
 800b0a8:	4b08      	ldr	r3, [pc, #32]	; (800b0cc <tcp_timer_needed+0x38>)
 800b0aa:	681b      	ldr	r3, [r3, #0]
 800b0ac:	2b00      	cmp	r3, #0
 800b0ae:	d007      	beq.n	800b0c0 <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 800b0b0:	4b04      	ldr	r3, [pc, #16]	; (800b0c4 <tcp_timer_needed+0x30>)
 800b0b2:	2201      	movs	r2, #1
 800b0b4:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 800b0b6:	2200      	movs	r2, #0
 800b0b8:	4905      	ldr	r1, [pc, #20]	; (800b0d0 <tcp_timer_needed+0x3c>)
 800b0ba:	20fa      	movs	r0, #250	; 0xfa
 800b0bc:	f000 f8cc 	bl	800b258 <sys_timeout>
  }
}
 800b0c0:	bf00      	nop
 800b0c2:	bd80      	pop	{r7, pc}
 800b0c4:	200082d8 	.word	0x200082d8
 800b0c8:	2000828c 	.word	0x2000828c
 800b0cc:	20008290 	.word	0x20008290
 800b0d0:	0800b04d 	.word	0x0800b04d

0800b0d4 <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 800b0d4:	b580      	push	{r7, lr}
 800b0d6:	b086      	sub	sp, #24
 800b0d8:	af00      	add	r7, sp, #0
 800b0da:	60f8      	str	r0, [r7, #12]
 800b0dc:	60b9      	str	r1, [r7, #8]
 800b0de:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 800b0e0:	2006      	movs	r0, #6
 800b0e2:	f7f9 fcf7 	bl	8004ad4 <memp_malloc>
 800b0e6:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 800b0e8:	693b      	ldr	r3, [r7, #16]
 800b0ea:	2b00      	cmp	r3, #0
 800b0ec:	d109      	bne.n	800b102 <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 800b0ee:	693b      	ldr	r3, [r7, #16]
 800b0f0:	2b00      	cmp	r3, #0
 800b0f2:	d151      	bne.n	800b198 <sys_timeout_abs+0xc4>
 800b0f4:	4b2a      	ldr	r3, [pc, #168]	; (800b1a0 <sys_timeout_abs+0xcc>)
 800b0f6:	22be      	movs	r2, #190	; 0xbe
 800b0f8:	492a      	ldr	r1, [pc, #168]	; (800b1a4 <sys_timeout_abs+0xd0>)
 800b0fa:	482b      	ldr	r0, [pc, #172]	; (800b1a8 <sys_timeout_abs+0xd4>)
 800b0fc:	f003 f9fa 	bl	800e4f4 <iprintf>
    return;
 800b100:	e04a      	b.n	800b198 <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 800b102:	693b      	ldr	r3, [r7, #16]
 800b104:	2200      	movs	r2, #0
 800b106:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 800b108:	693b      	ldr	r3, [r7, #16]
 800b10a:	68ba      	ldr	r2, [r7, #8]
 800b10c:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 800b10e:	693b      	ldr	r3, [r7, #16]
 800b110:	687a      	ldr	r2, [r7, #4]
 800b112:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 800b114:	693b      	ldr	r3, [r7, #16]
 800b116:	68fa      	ldr	r2, [r7, #12]
 800b118:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 800b11a:	4b24      	ldr	r3, [pc, #144]	; (800b1ac <sys_timeout_abs+0xd8>)
 800b11c:	681b      	ldr	r3, [r3, #0]
 800b11e:	2b00      	cmp	r3, #0
 800b120:	d103      	bne.n	800b12a <sys_timeout_abs+0x56>
    next_timeout = timeout;
 800b122:	4a22      	ldr	r2, [pc, #136]	; (800b1ac <sys_timeout_abs+0xd8>)
 800b124:	693b      	ldr	r3, [r7, #16]
 800b126:	6013      	str	r3, [r2, #0]
    return;
 800b128:	e037      	b.n	800b19a <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 800b12a:	693b      	ldr	r3, [r7, #16]
 800b12c:	685a      	ldr	r2, [r3, #4]
 800b12e:	4b1f      	ldr	r3, [pc, #124]	; (800b1ac <sys_timeout_abs+0xd8>)
 800b130:	681b      	ldr	r3, [r3, #0]
 800b132:	685b      	ldr	r3, [r3, #4]
 800b134:	1ad3      	subs	r3, r2, r3
 800b136:	0fdb      	lsrs	r3, r3, #31
 800b138:	f003 0301 	and.w	r3, r3, #1
 800b13c:	b2db      	uxtb	r3, r3
 800b13e:	2b00      	cmp	r3, #0
 800b140:	d007      	beq.n	800b152 <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 800b142:	4b1a      	ldr	r3, [pc, #104]	; (800b1ac <sys_timeout_abs+0xd8>)
 800b144:	681a      	ldr	r2, [r3, #0]
 800b146:	693b      	ldr	r3, [r7, #16]
 800b148:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 800b14a:	4a18      	ldr	r2, [pc, #96]	; (800b1ac <sys_timeout_abs+0xd8>)
 800b14c:	693b      	ldr	r3, [r7, #16]
 800b14e:	6013      	str	r3, [r2, #0]
 800b150:	e023      	b.n	800b19a <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 800b152:	4b16      	ldr	r3, [pc, #88]	; (800b1ac <sys_timeout_abs+0xd8>)
 800b154:	681b      	ldr	r3, [r3, #0]
 800b156:	617b      	str	r3, [r7, #20]
 800b158:	e01a      	b.n	800b190 <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 800b15a:	697b      	ldr	r3, [r7, #20]
 800b15c:	681b      	ldr	r3, [r3, #0]
 800b15e:	2b00      	cmp	r3, #0
 800b160:	d00b      	beq.n	800b17a <sys_timeout_abs+0xa6>
 800b162:	693b      	ldr	r3, [r7, #16]
 800b164:	685a      	ldr	r2, [r3, #4]
 800b166:	697b      	ldr	r3, [r7, #20]
 800b168:	681b      	ldr	r3, [r3, #0]
 800b16a:	685b      	ldr	r3, [r3, #4]
 800b16c:	1ad3      	subs	r3, r2, r3
 800b16e:	0fdb      	lsrs	r3, r3, #31
 800b170:	f003 0301 	and.w	r3, r3, #1
 800b174:	b2db      	uxtb	r3, r3
 800b176:	2b00      	cmp	r3, #0
 800b178:	d007      	beq.n	800b18a <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 800b17a:	697b      	ldr	r3, [r7, #20]
 800b17c:	681a      	ldr	r2, [r3, #0]
 800b17e:	693b      	ldr	r3, [r7, #16]
 800b180:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 800b182:	697b      	ldr	r3, [r7, #20]
 800b184:	693a      	ldr	r2, [r7, #16]
 800b186:	601a      	str	r2, [r3, #0]
        break;
 800b188:	e007      	b.n	800b19a <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 800b18a:	697b      	ldr	r3, [r7, #20]
 800b18c:	681b      	ldr	r3, [r3, #0]
 800b18e:	617b      	str	r3, [r7, #20]
 800b190:	697b      	ldr	r3, [r7, #20]
 800b192:	2b00      	cmp	r3, #0
 800b194:	d1e1      	bne.n	800b15a <sys_timeout_abs+0x86>
 800b196:	e000      	b.n	800b19a <sys_timeout_abs+0xc6>
    return;
 800b198:	bf00      	nop
      }
    }
  }
}
 800b19a:	3718      	adds	r7, #24
 800b19c:	46bd      	mov	sp, r7
 800b19e:	bd80      	pop	{r7, pc}
 800b1a0:	080112b8 	.word	0x080112b8
 800b1a4:	080112ec 	.word	0x080112ec
 800b1a8:	0801132c 	.word	0x0801132c
 800b1ac:	200082d0 	.word	0x200082d0

0800b1b0 <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 800b1b0:	b580      	push	{r7, lr}
 800b1b2:	b086      	sub	sp, #24
 800b1b4:	af00      	add	r7, sp, #0
 800b1b6:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 800b1b8:	687b      	ldr	r3, [r7, #4]
 800b1ba:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 800b1bc:	697b      	ldr	r3, [r7, #20]
 800b1be:	685b      	ldr	r3, [r3, #4]
 800b1c0:	4798      	blx	r3

  now = sys_now();
 800b1c2:	f7f8 fdf7 	bl	8003db4 <sys_now>
 800b1c6:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 800b1c8:	697b      	ldr	r3, [r7, #20]
 800b1ca:	681a      	ldr	r2, [r3, #0]
 800b1cc:	4b0f      	ldr	r3, [pc, #60]	; (800b20c <lwip_cyclic_timer+0x5c>)
 800b1ce:	681b      	ldr	r3, [r3, #0]
 800b1d0:	4413      	add	r3, r2
 800b1d2:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 800b1d4:	68fa      	ldr	r2, [r7, #12]
 800b1d6:	693b      	ldr	r3, [r7, #16]
 800b1d8:	1ad3      	subs	r3, r2, r3
 800b1da:	0fdb      	lsrs	r3, r3, #31
 800b1dc:	f003 0301 	and.w	r3, r3, #1
 800b1e0:	b2db      	uxtb	r3, r3
 800b1e2:	2b00      	cmp	r3, #0
 800b1e4:	d009      	beq.n	800b1fa <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 800b1e6:	697b      	ldr	r3, [r7, #20]
 800b1e8:	681a      	ldr	r2, [r3, #0]
 800b1ea:	693b      	ldr	r3, [r7, #16]
 800b1ec:	4413      	add	r3, r2
 800b1ee:	687a      	ldr	r2, [r7, #4]
 800b1f0:	4907      	ldr	r1, [pc, #28]	; (800b210 <lwip_cyclic_timer+0x60>)
 800b1f2:	4618      	mov	r0, r3
 800b1f4:	f7ff ff6e 	bl	800b0d4 <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 800b1f8:	e004      	b.n	800b204 <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 800b1fa:	687a      	ldr	r2, [r7, #4]
 800b1fc:	4904      	ldr	r1, [pc, #16]	; (800b210 <lwip_cyclic_timer+0x60>)
 800b1fe:	68f8      	ldr	r0, [r7, #12]
 800b200:	f7ff ff68 	bl	800b0d4 <sys_timeout_abs>
}
 800b204:	bf00      	nop
 800b206:	3718      	adds	r7, #24
 800b208:	46bd      	mov	sp, r7
 800b20a:	bd80      	pop	{r7, pc}
 800b20c:	200082d4 	.word	0x200082d4
 800b210:	0800b1b1 	.word	0x0800b1b1

0800b214 <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 800b214:	b580      	push	{r7, lr}
 800b216:	b082      	sub	sp, #8
 800b218:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 800b21a:	2301      	movs	r3, #1
 800b21c:	607b      	str	r3, [r7, #4]
 800b21e:	e00e      	b.n	800b23e <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 800b220:	4a0b      	ldr	r2, [pc, #44]	; (800b250 <sys_timeouts_init+0x3c>)
 800b222:	687b      	ldr	r3, [r7, #4]
 800b224:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 800b228:	687b      	ldr	r3, [r7, #4]
 800b22a:	00db      	lsls	r3, r3, #3
 800b22c:	4a08      	ldr	r2, [pc, #32]	; (800b250 <sys_timeouts_init+0x3c>)
 800b22e:	4413      	add	r3, r2
 800b230:	461a      	mov	r2, r3
 800b232:	4908      	ldr	r1, [pc, #32]	; (800b254 <sys_timeouts_init+0x40>)
 800b234:	f000 f810 	bl	800b258 <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 800b238:	687b      	ldr	r3, [r7, #4]
 800b23a:	3301      	adds	r3, #1
 800b23c:	607b      	str	r3, [r7, #4]
 800b23e:	687b      	ldr	r3, [r7, #4]
 800b240:	2b02      	cmp	r3, #2
 800b242:	d9ed      	bls.n	800b220 <sys_timeouts_init+0xc>
  }
}
 800b244:	bf00      	nop
 800b246:	bf00      	nop
 800b248:	3708      	adds	r7, #8
 800b24a:	46bd      	mov	sp, r7
 800b24c:	bd80      	pop	{r7, pc}
 800b24e:	bf00      	nop
 800b250:	08011ea4 	.word	0x08011ea4
 800b254:	0800b1b1 	.word	0x0800b1b1

0800b258 <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 800b258:	b580      	push	{r7, lr}
 800b25a:	b086      	sub	sp, #24
 800b25c:	af00      	add	r7, sp, #0
 800b25e:	60f8      	str	r0, [r7, #12]
 800b260:	60b9      	str	r1, [r7, #8]
 800b262:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 800b264:	68fb      	ldr	r3, [r7, #12]
 800b266:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b26a:	d306      	bcc.n	800b27a <sys_timeout+0x22>
 800b26c:	4b0a      	ldr	r3, [pc, #40]	; (800b298 <sys_timeout+0x40>)
 800b26e:	f240 1229 	movw	r2, #297	; 0x129
 800b272:	490a      	ldr	r1, [pc, #40]	; (800b29c <sys_timeout+0x44>)
 800b274:	480a      	ldr	r0, [pc, #40]	; (800b2a0 <sys_timeout+0x48>)
 800b276:	f003 f93d 	bl	800e4f4 <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 800b27a:	f7f8 fd9b 	bl	8003db4 <sys_now>
 800b27e:	4602      	mov	r2, r0
 800b280:	68fb      	ldr	r3, [r7, #12]
 800b282:	4413      	add	r3, r2
 800b284:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 800b286:	687a      	ldr	r2, [r7, #4]
 800b288:	68b9      	ldr	r1, [r7, #8]
 800b28a:	6978      	ldr	r0, [r7, #20]
 800b28c:	f7ff ff22 	bl	800b0d4 <sys_timeout_abs>
#endif
}
 800b290:	bf00      	nop
 800b292:	3718      	adds	r7, #24
 800b294:	46bd      	mov	sp, r7
 800b296:	bd80      	pop	{r7, pc}
 800b298:	080112b8 	.word	0x080112b8
 800b29c:	08011354 	.word	0x08011354
 800b2a0:	0801132c 	.word	0x0801132c

0800b2a4 <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 800b2a4:	b580      	push	{r7, lr}
 800b2a6:	b084      	sub	sp, #16
 800b2a8:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 800b2aa:	f7f8 fd83 	bl	8003db4 <sys_now>
 800b2ae:	60f8      	str	r0, [r7, #12]
  do {
    struct sys_timeo *tmptimeout;
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();
 800b2b0:	4b1a      	ldr	r3, [pc, #104]	; (800b31c <sys_check_timeouts+0x78>)
 800b2b2:	781b      	ldrb	r3, [r3, #0]
 800b2b4:	b2db      	uxtb	r3, r3
 800b2b6:	2b00      	cmp	r3, #0
 800b2b8:	d001      	beq.n	800b2be <sys_check_timeouts+0x1a>
 800b2ba:	f7f9 ffb7 	bl	800522c <pbuf_free_ooseq>

    tmptimeout = next_timeout;
 800b2be:	4b18      	ldr	r3, [pc, #96]	; (800b320 <sys_check_timeouts+0x7c>)
 800b2c0:	681b      	ldr	r3, [r3, #0]
 800b2c2:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 800b2c4:	68bb      	ldr	r3, [r7, #8]
 800b2c6:	2b00      	cmp	r3, #0
 800b2c8:	d022      	beq.n	800b310 <sys_check_timeouts+0x6c>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 800b2ca:	68bb      	ldr	r3, [r7, #8]
 800b2cc:	685b      	ldr	r3, [r3, #4]
 800b2ce:	68fa      	ldr	r2, [r7, #12]
 800b2d0:	1ad3      	subs	r3, r2, r3
 800b2d2:	0fdb      	lsrs	r3, r3, #31
 800b2d4:	f003 0301 	and.w	r3, r3, #1
 800b2d8:	b2db      	uxtb	r3, r3
 800b2da:	2b00      	cmp	r3, #0
 800b2dc:	d11a      	bne.n	800b314 <sys_check_timeouts+0x70>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 800b2de:	68bb      	ldr	r3, [r7, #8]
 800b2e0:	681b      	ldr	r3, [r3, #0]
 800b2e2:	4a0f      	ldr	r2, [pc, #60]	; (800b320 <sys_check_timeouts+0x7c>)
 800b2e4:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 800b2e6:	68bb      	ldr	r3, [r7, #8]
 800b2e8:	689b      	ldr	r3, [r3, #8]
 800b2ea:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 800b2ec:	68bb      	ldr	r3, [r7, #8]
 800b2ee:	68db      	ldr	r3, [r3, #12]
 800b2f0:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 800b2f2:	68bb      	ldr	r3, [r7, #8]
 800b2f4:	685b      	ldr	r3, [r3, #4]
 800b2f6:	4a0b      	ldr	r2, [pc, #44]	; (800b324 <sys_check_timeouts+0x80>)
 800b2f8:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 800b2fa:	68b9      	ldr	r1, [r7, #8]
 800b2fc:	2006      	movs	r0, #6
 800b2fe:	f7f9 fc59 	bl	8004bb4 <memp_free>
    if (handler != NULL) {
 800b302:	687b      	ldr	r3, [r7, #4]
 800b304:	2b00      	cmp	r3, #0
 800b306:	d0d3      	beq.n	800b2b0 <sys_check_timeouts+0xc>
      handler(arg);
 800b308:	687b      	ldr	r3, [r7, #4]
 800b30a:	6838      	ldr	r0, [r7, #0]
 800b30c:	4798      	blx	r3
  do {
 800b30e:	e7cf      	b.n	800b2b0 <sys_check_timeouts+0xc>
      return;
 800b310:	bf00      	nop
 800b312:	e000      	b.n	800b316 <sys_check_timeouts+0x72>
      return;
 800b314:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 800b316:	3710      	adds	r7, #16
 800b318:	46bd      	mov	sp, r7
 800b31a:	bd80      	pop	{r7, pc}
 800b31c:	2000827d 	.word	0x2000827d
 800b320:	200082d0 	.word	0x200082d0
 800b324:	200082d4 	.word	0x200082d4

0800b328 <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 800b328:	b580      	push	{r7, lr}
 800b32a:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 800b32c:	f002 fff4 	bl	800e318 <rand>
 800b330:	4603      	mov	r3, r0
 800b332:	b29b      	uxth	r3, r3
 800b334:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800b338:	b29b      	uxth	r3, r3
 800b33a:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 800b33e:	b29a      	uxth	r2, r3
 800b340:	4b01      	ldr	r3, [pc, #4]	; (800b348 <udp_init+0x20>)
 800b342:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 800b344:	bf00      	nop
 800b346:	bd80      	pop	{r7, pc}
 800b348:	20000028 	.word	0x20000028

0800b34c <udp_new_port>:
 *
 * @return a new (free) local UDP port number
 */
static u16_t
udp_new_port(void)
{
 800b34c:	b480      	push	{r7}
 800b34e:	b083      	sub	sp, #12
 800b350:	af00      	add	r7, sp, #0
  u16_t n = 0;
 800b352:	2300      	movs	r3, #0
 800b354:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *pcb;

again:
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 800b356:	4b17      	ldr	r3, [pc, #92]	; (800b3b4 <udp_new_port+0x68>)
 800b358:	881b      	ldrh	r3, [r3, #0]
 800b35a:	1c5a      	adds	r2, r3, #1
 800b35c:	b291      	uxth	r1, r2
 800b35e:	4a15      	ldr	r2, [pc, #84]	; (800b3b4 <udp_new_port+0x68>)
 800b360:	8011      	strh	r1, [r2, #0]
 800b362:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800b366:	4293      	cmp	r3, r2
 800b368:	d103      	bne.n	800b372 <udp_new_port+0x26>
    udp_port = UDP_LOCAL_PORT_RANGE_START;
 800b36a:	4b12      	ldr	r3, [pc, #72]	; (800b3b4 <udp_new_port+0x68>)
 800b36c:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 800b370:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCBs. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800b372:	4b11      	ldr	r3, [pc, #68]	; (800b3b8 <udp_new_port+0x6c>)
 800b374:	681b      	ldr	r3, [r3, #0]
 800b376:	603b      	str	r3, [r7, #0]
 800b378:	e011      	b.n	800b39e <udp_new_port+0x52>
    if (pcb->local_port == udp_port) {
 800b37a:	683b      	ldr	r3, [r7, #0]
 800b37c:	8a5a      	ldrh	r2, [r3, #18]
 800b37e:	4b0d      	ldr	r3, [pc, #52]	; (800b3b4 <udp_new_port+0x68>)
 800b380:	881b      	ldrh	r3, [r3, #0]
 800b382:	429a      	cmp	r2, r3
 800b384:	d108      	bne.n	800b398 <udp_new_port+0x4c>
      if (++n > (UDP_LOCAL_PORT_RANGE_END - UDP_LOCAL_PORT_RANGE_START)) {
 800b386:	88fb      	ldrh	r3, [r7, #6]
 800b388:	3301      	adds	r3, #1
 800b38a:	80fb      	strh	r3, [r7, #6]
 800b38c:	88fb      	ldrh	r3, [r7, #6]
 800b38e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b392:	d3e0      	bcc.n	800b356 <udp_new_port+0xa>
        return 0;
 800b394:	2300      	movs	r3, #0
 800b396:	e007      	b.n	800b3a8 <udp_new_port+0x5c>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800b398:	683b      	ldr	r3, [r7, #0]
 800b39a:	68db      	ldr	r3, [r3, #12]
 800b39c:	603b      	str	r3, [r7, #0]
 800b39e:	683b      	ldr	r3, [r7, #0]
 800b3a0:	2b00      	cmp	r3, #0
 800b3a2:	d1ea      	bne.n	800b37a <udp_new_port+0x2e>
      }
      goto again;
    }
  }
  return udp_port;
 800b3a4:	4b03      	ldr	r3, [pc, #12]	; (800b3b4 <udp_new_port+0x68>)
 800b3a6:	881b      	ldrh	r3, [r3, #0]
}
 800b3a8:	4618      	mov	r0, r3
 800b3aa:	370c      	adds	r7, #12
 800b3ac:	46bd      	mov	sp, r7
 800b3ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3b2:	4770      	bx	lr
 800b3b4:	20000028 	.word	0x20000028
 800b3b8:	200082dc 	.word	0x200082dc

0800b3bc <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 800b3bc:	b580      	push	{r7, lr}
 800b3be:	b084      	sub	sp, #16
 800b3c0:	af00      	add	r7, sp, #0
 800b3c2:	60f8      	str	r0, [r7, #12]
 800b3c4:	60b9      	str	r1, [r7, #8]
 800b3c6:	4613      	mov	r3, r2
 800b3c8:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 800b3ca:	68fb      	ldr	r3, [r7, #12]
 800b3cc:	2b00      	cmp	r3, #0
 800b3ce:	d105      	bne.n	800b3dc <udp_input_local_match+0x20>
 800b3d0:	4b27      	ldr	r3, [pc, #156]	; (800b470 <udp_input_local_match+0xb4>)
 800b3d2:	2287      	movs	r2, #135	; 0x87
 800b3d4:	4927      	ldr	r1, [pc, #156]	; (800b474 <udp_input_local_match+0xb8>)
 800b3d6:	4828      	ldr	r0, [pc, #160]	; (800b478 <udp_input_local_match+0xbc>)
 800b3d8:	f003 f88c 	bl	800e4f4 <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 800b3dc:	68bb      	ldr	r3, [r7, #8]
 800b3de:	2b00      	cmp	r3, #0
 800b3e0:	d105      	bne.n	800b3ee <udp_input_local_match+0x32>
 800b3e2:	4b23      	ldr	r3, [pc, #140]	; (800b470 <udp_input_local_match+0xb4>)
 800b3e4:	2288      	movs	r2, #136	; 0x88
 800b3e6:	4925      	ldr	r1, [pc, #148]	; (800b47c <udp_input_local_match+0xc0>)
 800b3e8:	4823      	ldr	r0, [pc, #140]	; (800b478 <udp_input_local_match+0xbc>)
 800b3ea:	f003 f883 	bl	800e4f4 <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800b3ee:	68fb      	ldr	r3, [r7, #12]
 800b3f0:	7a1b      	ldrb	r3, [r3, #8]
 800b3f2:	2b00      	cmp	r3, #0
 800b3f4:	d00b      	beq.n	800b40e <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800b3f6:	68fb      	ldr	r3, [r7, #12]
 800b3f8:	7a1a      	ldrb	r2, [r3, #8]
 800b3fa:	4b21      	ldr	r3, [pc, #132]	; (800b480 <udp_input_local_match+0xc4>)
 800b3fc:	685b      	ldr	r3, [r3, #4]
 800b3fe:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800b402:	3301      	adds	r3, #1
 800b404:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800b406:	429a      	cmp	r2, r3
 800b408:	d001      	beq.n	800b40e <udp_input_local_match+0x52>
    return 0;
 800b40a:	2300      	movs	r3, #0
 800b40c:	e02b      	b.n	800b466 <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 800b40e:	79fb      	ldrb	r3, [r7, #7]
 800b410:	2b00      	cmp	r3, #0
 800b412:	d018      	beq.n	800b446 <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800b414:	68fb      	ldr	r3, [r7, #12]
 800b416:	2b00      	cmp	r3, #0
 800b418:	d013      	beq.n	800b442 <udp_input_local_match+0x86>
 800b41a:	68fb      	ldr	r3, [r7, #12]
 800b41c:	681b      	ldr	r3, [r3, #0]
 800b41e:	2b00      	cmp	r3, #0
 800b420:	d00f      	beq.n	800b442 <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 800b422:	4b17      	ldr	r3, [pc, #92]	; (800b480 <udp_input_local_match+0xc4>)
 800b424:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800b426:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b42a:	d00a      	beq.n	800b442 <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 800b42c:	68fb      	ldr	r3, [r7, #12]
 800b42e:	681a      	ldr	r2, [r3, #0]
 800b430:	4b13      	ldr	r3, [pc, #76]	; (800b480 <udp_input_local_match+0xc4>)
 800b432:	695b      	ldr	r3, [r3, #20]
 800b434:	405a      	eors	r2, r3
 800b436:	68bb      	ldr	r3, [r7, #8]
 800b438:	3308      	adds	r3, #8
 800b43a:	681b      	ldr	r3, [r3, #0]
 800b43c:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 800b43e:	2b00      	cmp	r3, #0
 800b440:	d110      	bne.n	800b464 <udp_input_local_match+0xa8>
          return 1;
 800b442:	2301      	movs	r3, #1
 800b444:	e00f      	b.n	800b466 <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800b446:	68fb      	ldr	r3, [r7, #12]
 800b448:	2b00      	cmp	r3, #0
 800b44a:	d009      	beq.n	800b460 <udp_input_local_match+0xa4>
 800b44c:	68fb      	ldr	r3, [r7, #12]
 800b44e:	681b      	ldr	r3, [r3, #0]
 800b450:	2b00      	cmp	r3, #0
 800b452:	d005      	beq.n	800b460 <udp_input_local_match+0xa4>
 800b454:	68fb      	ldr	r3, [r7, #12]
 800b456:	681a      	ldr	r2, [r3, #0]
 800b458:	4b09      	ldr	r3, [pc, #36]	; (800b480 <udp_input_local_match+0xc4>)
 800b45a:	695b      	ldr	r3, [r3, #20]
 800b45c:	429a      	cmp	r2, r3
 800b45e:	d101      	bne.n	800b464 <udp_input_local_match+0xa8>
        return 1;
 800b460:	2301      	movs	r3, #1
 800b462:	e000      	b.n	800b466 <udp_input_local_match+0xaa>
      }
  }

  return 0;
 800b464:	2300      	movs	r3, #0
}
 800b466:	4618      	mov	r0, r3
 800b468:	3710      	adds	r7, #16
 800b46a:	46bd      	mov	sp, r7
 800b46c:	bd80      	pop	{r7, pc}
 800b46e:	bf00      	nop
 800b470:	080113a0 	.word	0x080113a0
 800b474:	080113d0 	.word	0x080113d0
 800b478:	080113f4 	.word	0x080113f4
 800b47c:	0801141c 	.word	0x0801141c
 800b480:	20004d10 	.word	0x20004d10

0800b484 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 800b484:	b590      	push	{r4, r7, lr}
 800b486:	b08d      	sub	sp, #52	; 0x34
 800b488:	af02      	add	r7, sp, #8
 800b48a:	6078      	str	r0, [r7, #4]
 800b48c:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 800b48e:	2300      	movs	r3, #0
 800b490:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 800b492:	687b      	ldr	r3, [r7, #4]
 800b494:	2b00      	cmp	r3, #0
 800b496:	d105      	bne.n	800b4a4 <udp_input+0x20>
 800b498:	4b7c      	ldr	r3, [pc, #496]	; (800b68c <udp_input+0x208>)
 800b49a:	22cf      	movs	r2, #207	; 0xcf
 800b49c:	497c      	ldr	r1, [pc, #496]	; (800b690 <udp_input+0x20c>)
 800b49e:	487d      	ldr	r0, [pc, #500]	; (800b694 <udp_input+0x210>)
 800b4a0:	f003 f828 	bl	800e4f4 <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 800b4a4:	683b      	ldr	r3, [r7, #0]
 800b4a6:	2b00      	cmp	r3, #0
 800b4a8:	d105      	bne.n	800b4b6 <udp_input+0x32>
 800b4aa:	4b78      	ldr	r3, [pc, #480]	; (800b68c <udp_input+0x208>)
 800b4ac:	22d0      	movs	r2, #208	; 0xd0
 800b4ae:	497a      	ldr	r1, [pc, #488]	; (800b698 <udp_input+0x214>)
 800b4b0:	4878      	ldr	r0, [pc, #480]	; (800b694 <udp_input+0x210>)
 800b4b2:	f003 f81f 	bl	800e4f4 <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 800b4b6:	687b      	ldr	r3, [r7, #4]
 800b4b8:	895b      	ldrh	r3, [r3, #10]
 800b4ba:	2b07      	cmp	r3, #7
 800b4bc:	d803      	bhi.n	800b4c6 <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 800b4be:	6878      	ldr	r0, [r7, #4]
 800b4c0:	f7fa f9ee 	bl	80058a0 <pbuf_free>
    goto end;
 800b4c4:	e0de      	b.n	800b684 <udp_input+0x200>
  }

  udphdr = (struct udp_hdr *)p->payload;
 800b4c6:	687b      	ldr	r3, [r7, #4]
 800b4c8:	685b      	ldr	r3, [r3, #4]
 800b4ca:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 800b4cc:	4b73      	ldr	r3, [pc, #460]	; (800b69c <udp_input+0x218>)
 800b4ce:	695b      	ldr	r3, [r3, #20]
 800b4d0:	4a72      	ldr	r2, [pc, #456]	; (800b69c <udp_input+0x218>)
 800b4d2:	6812      	ldr	r2, [r2, #0]
 800b4d4:	4611      	mov	r1, r2
 800b4d6:	4618      	mov	r0, r3
 800b4d8:	f001 ffc8 	bl	800d46c <ip4_addr_isbroadcast_u32>
 800b4dc:	4603      	mov	r3, r0
 800b4de:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 800b4e0:	697b      	ldr	r3, [r7, #20]
 800b4e2:	881b      	ldrh	r3, [r3, #0]
 800b4e4:	b29b      	uxth	r3, r3
 800b4e6:	4618      	mov	r0, r3
 800b4e8:	f7f8 fe7c 	bl	80041e4 <lwip_htons>
 800b4ec:	4603      	mov	r3, r0
 800b4ee:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 800b4f0:	697b      	ldr	r3, [r7, #20]
 800b4f2:	885b      	ldrh	r3, [r3, #2]
 800b4f4:	b29b      	uxth	r3, r3
 800b4f6:	4618      	mov	r0, r3
 800b4f8:	f7f8 fe74 	bl	80041e4 <lwip_htons>
 800b4fc:	4603      	mov	r3, r0
 800b4fe:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 800b500:	2300      	movs	r3, #0
 800b502:	627b      	str	r3, [r7, #36]	; 0x24
  prev = NULL;
 800b504:	2300      	movs	r3, #0
 800b506:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 800b508:	2300      	movs	r3, #0
 800b50a:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800b50c:	4b64      	ldr	r3, [pc, #400]	; (800b6a0 <udp_input+0x21c>)
 800b50e:	681b      	ldr	r3, [r3, #0]
 800b510:	627b      	str	r3, [r7, #36]	; 0x24
 800b512:	e054      	b.n	800b5be <udp_input+0x13a>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 800b514:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b516:	8a5b      	ldrh	r3, [r3, #18]
 800b518:	89fa      	ldrh	r2, [r7, #14]
 800b51a:	429a      	cmp	r2, r3
 800b51c:	d14a      	bne.n	800b5b4 <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 800b51e:	7cfb      	ldrb	r3, [r7, #19]
 800b520:	461a      	mov	r2, r3
 800b522:	6839      	ldr	r1, [r7, #0]
 800b524:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800b526:	f7ff ff49 	bl	800b3bc <udp_input_local_match>
 800b52a:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 800b52c:	2b00      	cmp	r3, #0
 800b52e:	d041      	beq.n	800b5b4 <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 800b530:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b532:	7c1b      	ldrb	r3, [r3, #16]
 800b534:	f003 0304 	and.w	r3, r3, #4
 800b538:	2b00      	cmp	r3, #0
 800b53a:	d11d      	bne.n	800b578 <udp_input+0xf4>
        if (uncon_pcb == NULL) {
 800b53c:	69fb      	ldr	r3, [r7, #28]
 800b53e:	2b00      	cmp	r3, #0
 800b540:	d102      	bne.n	800b548 <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 800b542:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b544:	61fb      	str	r3, [r7, #28]
 800b546:	e017      	b.n	800b578 <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 800b548:	7cfb      	ldrb	r3, [r7, #19]
 800b54a:	2b00      	cmp	r3, #0
 800b54c:	d014      	beq.n	800b578 <udp_input+0xf4>
 800b54e:	4b53      	ldr	r3, [pc, #332]	; (800b69c <udp_input+0x218>)
 800b550:	695b      	ldr	r3, [r3, #20]
 800b552:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b556:	d10f      	bne.n	800b578 <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 800b558:	69fb      	ldr	r3, [r7, #28]
 800b55a:	681a      	ldr	r2, [r3, #0]
 800b55c:	683b      	ldr	r3, [r7, #0]
 800b55e:	3304      	adds	r3, #4
 800b560:	681b      	ldr	r3, [r3, #0]
 800b562:	429a      	cmp	r2, r3
 800b564:	d008      	beq.n	800b578 <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 800b566:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b568:	681a      	ldr	r2, [r3, #0]
 800b56a:	683b      	ldr	r3, [r7, #0]
 800b56c:	3304      	adds	r3, #4
 800b56e:	681b      	ldr	r3, [r3, #0]
 800b570:	429a      	cmp	r2, r3
 800b572:	d101      	bne.n	800b578 <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
 800b574:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b576:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 800b578:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b57a:	8a9b      	ldrh	r3, [r3, #20]
 800b57c:	8a3a      	ldrh	r2, [r7, #16]
 800b57e:	429a      	cmp	r2, r3
 800b580:	d118      	bne.n	800b5b4 <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
 800b582:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b584:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 800b586:	2b00      	cmp	r3, #0
 800b588:	d005      	beq.n	800b596 <udp_input+0x112>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 800b58a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b58c:	685a      	ldr	r2, [r3, #4]
 800b58e:	4b43      	ldr	r3, [pc, #268]	; (800b69c <udp_input+0x218>)
 800b590:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 800b592:	429a      	cmp	r2, r3
 800b594:	d10e      	bne.n	800b5b4 <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
 800b596:	6a3b      	ldr	r3, [r7, #32]
 800b598:	2b00      	cmp	r3, #0
 800b59a:	d014      	beq.n	800b5c6 <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 800b59c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b59e:	68da      	ldr	r2, [r3, #12]
 800b5a0:	6a3b      	ldr	r3, [r7, #32]
 800b5a2:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 800b5a4:	4b3e      	ldr	r3, [pc, #248]	; (800b6a0 <udp_input+0x21c>)
 800b5a6:	681a      	ldr	r2, [r3, #0]
 800b5a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b5aa:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 800b5ac:	4a3c      	ldr	r2, [pc, #240]	; (800b6a0 <udp_input+0x21c>)
 800b5ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b5b0:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 800b5b2:	e008      	b.n	800b5c6 <udp_input+0x142>
      }
    }

    prev = pcb;
 800b5b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b5b6:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800b5b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b5ba:	68db      	ldr	r3, [r3, #12]
 800b5bc:	627b      	str	r3, [r7, #36]	; 0x24
 800b5be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b5c0:	2b00      	cmp	r3, #0
 800b5c2:	d1a7      	bne.n	800b514 <udp_input+0x90>
 800b5c4:	e000      	b.n	800b5c8 <udp_input+0x144>
        break;
 800b5c6:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 800b5c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b5ca:	2b00      	cmp	r3, #0
 800b5cc:	d101      	bne.n	800b5d2 <udp_input+0x14e>
    pcb = uncon_pcb;
 800b5ce:	69fb      	ldr	r3, [r7, #28]
 800b5d0:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 800b5d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b5d4:	2b00      	cmp	r3, #0
 800b5d6:	d002      	beq.n	800b5de <udp_input+0x15a>
    for_us = 1;
 800b5d8:	2301      	movs	r3, #1
 800b5da:	76fb      	strb	r3, [r7, #27]
 800b5dc:	e00a      	b.n	800b5f4 <udp_input+0x170>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 800b5de:	683b      	ldr	r3, [r7, #0]
 800b5e0:	3304      	adds	r3, #4
 800b5e2:	681a      	ldr	r2, [r3, #0]
 800b5e4:	4b2d      	ldr	r3, [pc, #180]	; (800b69c <udp_input+0x218>)
 800b5e6:	695b      	ldr	r3, [r3, #20]
 800b5e8:	429a      	cmp	r2, r3
 800b5ea:	bf0c      	ite	eq
 800b5ec:	2301      	moveq	r3, #1
 800b5ee:	2300      	movne	r3, #0
 800b5f0:	b2db      	uxtb	r3, r3
 800b5f2:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 800b5f4:	7efb      	ldrb	r3, [r7, #27]
 800b5f6:	2b00      	cmp	r3, #0
 800b5f8:	d041      	beq.n	800b67e <udp_input+0x1fa>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 800b5fa:	2108      	movs	r1, #8
 800b5fc:	6878      	ldr	r0, [r7, #4]
 800b5fe:	f7fa f8c9 	bl	8005794 <pbuf_remove_header>
 800b602:	4603      	mov	r3, r0
 800b604:	2b00      	cmp	r3, #0
 800b606:	d00a      	beq.n	800b61e <udp_input+0x19a>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 800b608:	4b20      	ldr	r3, [pc, #128]	; (800b68c <udp_input+0x208>)
 800b60a:	f44f 72b8 	mov.w	r2, #368	; 0x170
 800b60e:	4925      	ldr	r1, [pc, #148]	; (800b6a4 <udp_input+0x220>)
 800b610:	4820      	ldr	r0, [pc, #128]	; (800b694 <udp_input+0x210>)
 800b612:	f002 ff6f 	bl	800e4f4 <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 800b616:	6878      	ldr	r0, [r7, #4]
 800b618:	f7fa f942 	bl	80058a0 <pbuf_free>
      goto end;
 800b61c:	e032      	b.n	800b684 <udp_input+0x200>
    }

    if (pcb != NULL) {
 800b61e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b620:	2b00      	cmp	r3, #0
 800b622:	d012      	beq.n	800b64a <udp_input+0x1c6>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 800b624:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b626:	699b      	ldr	r3, [r3, #24]
 800b628:	2b00      	cmp	r3, #0
 800b62a:	d00a      	beq.n	800b642 <udp_input+0x1be>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 800b62c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b62e:	699c      	ldr	r4, [r3, #24]
 800b630:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b632:	69d8      	ldr	r0, [r3, #28]
 800b634:	8a3b      	ldrh	r3, [r7, #16]
 800b636:	9300      	str	r3, [sp, #0]
 800b638:	4b1b      	ldr	r3, [pc, #108]	; (800b6a8 <udp_input+0x224>)
 800b63a:	687a      	ldr	r2, [r7, #4]
 800b63c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800b63e:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 800b640:	e021      	b.n	800b686 <udp_input+0x202>
        pbuf_free(p);
 800b642:	6878      	ldr	r0, [r7, #4]
 800b644:	f7fa f92c 	bl	80058a0 <pbuf_free>
        goto end;
 800b648:	e01c      	b.n	800b684 <udp_input+0x200>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 800b64a:	7cfb      	ldrb	r3, [r7, #19]
 800b64c:	2b00      	cmp	r3, #0
 800b64e:	d112      	bne.n	800b676 <udp_input+0x1f2>
 800b650:	4b12      	ldr	r3, [pc, #72]	; (800b69c <udp_input+0x218>)
 800b652:	695b      	ldr	r3, [r3, #20]
 800b654:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800b658:	2be0      	cmp	r3, #224	; 0xe0
 800b65a:	d00c      	beq.n	800b676 <udp_input+0x1f2>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 800b65c:	4b0f      	ldr	r3, [pc, #60]	; (800b69c <udp_input+0x218>)
 800b65e:	899b      	ldrh	r3, [r3, #12]
 800b660:	3308      	adds	r3, #8
 800b662:	b29b      	uxth	r3, r3
 800b664:	b21b      	sxth	r3, r3
 800b666:	4619      	mov	r1, r3
 800b668:	6878      	ldr	r0, [r7, #4]
 800b66a:	f7fa f906 	bl	800587a <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 800b66e:	2103      	movs	r1, #3
 800b670:	6878      	ldr	r0, [r7, #4]
 800b672:	f001 fbdb 	bl	800ce2c <icmp_dest_unreach>
      pbuf_free(p);
 800b676:	6878      	ldr	r0, [r7, #4]
 800b678:	f7fa f912 	bl	80058a0 <pbuf_free>
  return;
 800b67c:	e003      	b.n	800b686 <udp_input+0x202>
    pbuf_free(p);
 800b67e:	6878      	ldr	r0, [r7, #4]
 800b680:	f7fa f90e 	bl	80058a0 <pbuf_free>
  return;
 800b684:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 800b686:	372c      	adds	r7, #44	; 0x2c
 800b688:	46bd      	mov	sp, r7
 800b68a:	bd90      	pop	{r4, r7, pc}
 800b68c:	080113a0 	.word	0x080113a0
 800b690:	08011444 	.word	0x08011444
 800b694:	080113f4 	.word	0x080113f4
 800b698:	0801145c 	.word	0x0801145c
 800b69c:	20004d10 	.word	0x20004d10
 800b6a0:	200082dc 	.word	0x200082dc
 800b6a4:	08011478 	.word	0x08011478
 800b6a8:	20004d20 	.word	0x20004d20

0800b6ac <udp_send>:
 *
 * @see udp_disconnect() udp_sendto()
 */
err_t
udp_send(struct udp_pcb *pcb, struct pbuf *p)
{
 800b6ac:	b580      	push	{r7, lr}
 800b6ae:	b082      	sub	sp, #8
 800b6b0:	af00      	add	r7, sp, #0
 800b6b2:	6078      	str	r0, [r7, #4]
 800b6b4:	6039      	str	r1, [r7, #0]
  LWIP_ERROR("udp_send: invalid pcb", pcb != NULL, return ERR_ARG);
 800b6b6:	687b      	ldr	r3, [r7, #4]
 800b6b8:	2b00      	cmp	r3, #0
 800b6ba:	d109      	bne.n	800b6d0 <udp_send+0x24>
 800b6bc:	4b11      	ldr	r3, [pc, #68]	; (800b704 <udp_send+0x58>)
 800b6be:	f240 12d5 	movw	r2, #469	; 0x1d5
 800b6c2:	4911      	ldr	r1, [pc, #68]	; (800b708 <udp_send+0x5c>)
 800b6c4:	4811      	ldr	r0, [pc, #68]	; (800b70c <udp_send+0x60>)
 800b6c6:	f002 ff15 	bl	800e4f4 <iprintf>
 800b6ca:	f06f 030f 	mvn.w	r3, #15
 800b6ce:	e015      	b.n	800b6fc <udp_send+0x50>
  LWIP_ERROR("udp_send: invalid pbuf", p != NULL, return ERR_ARG);
 800b6d0:	683b      	ldr	r3, [r7, #0]
 800b6d2:	2b00      	cmp	r3, #0
 800b6d4:	d109      	bne.n	800b6ea <udp_send+0x3e>
 800b6d6:	4b0b      	ldr	r3, [pc, #44]	; (800b704 <udp_send+0x58>)
 800b6d8:	f44f 72eb 	mov.w	r2, #470	; 0x1d6
 800b6dc:	490c      	ldr	r1, [pc, #48]	; (800b710 <udp_send+0x64>)
 800b6de:	480b      	ldr	r0, [pc, #44]	; (800b70c <udp_send+0x60>)
 800b6e0:	f002 ff08 	bl	800e4f4 <iprintf>
 800b6e4:	f06f 030f 	mvn.w	r3, #15
 800b6e8:	e008      	b.n	800b6fc <udp_send+0x50>
  if (IP_IS_ANY_TYPE_VAL(pcb->remote_ip)) {
    return ERR_VAL;
  }

  /* send to the packet using remote ip and port stored in the pcb */
  return udp_sendto(pcb, p, &pcb->remote_ip, pcb->remote_port);
 800b6ea:	687b      	ldr	r3, [r7, #4]
 800b6ec:	1d1a      	adds	r2, r3, #4
 800b6ee:	687b      	ldr	r3, [r7, #4]
 800b6f0:	8a9b      	ldrh	r3, [r3, #20]
 800b6f2:	6839      	ldr	r1, [r7, #0]
 800b6f4:	6878      	ldr	r0, [r7, #4]
 800b6f6:	f000 f80d 	bl	800b714 <udp_sendto>
 800b6fa:	4603      	mov	r3, r0
}
 800b6fc:	4618      	mov	r0, r3
 800b6fe:	3708      	adds	r7, #8
 800b700:	46bd      	mov	sp, r7
 800b702:	bd80      	pop	{r7, pc}
 800b704:	080113a0 	.word	0x080113a0
 800b708:	08011494 	.word	0x08011494
 800b70c:	080113f4 	.word	0x080113f4
 800b710:	080114ac 	.word	0x080114ac

0800b714 <udp_sendto>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto(struct udp_pcb *pcb, struct pbuf *p,
           const ip_addr_t *dst_ip, u16_t dst_port)
{
 800b714:	b580      	push	{r7, lr}
 800b716:	b088      	sub	sp, #32
 800b718:	af02      	add	r7, sp, #8
 800b71a:	60f8      	str	r0, [r7, #12]
 800b71c:	60b9      	str	r1, [r7, #8]
 800b71e:	607a      	str	r2, [r7, #4]
 800b720:	807b      	strh	r3, [r7, #2]
                  u16_t dst_port, u8_t have_chksum, u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  struct netif *netif;

  LWIP_ERROR("udp_sendto: invalid pcb", pcb != NULL, return ERR_ARG);
 800b722:	68fb      	ldr	r3, [r7, #12]
 800b724:	2b00      	cmp	r3, #0
 800b726:	d109      	bne.n	800b73c <udp_sendto+0x28>
 800b728:	4b23      	ldr	r3, [pc, #140]	; (800b7b8 <udp_sendto+0xa4>)
 800b72a:	f44f 7206 	mov.w	r2, #536	; 0x218
 800b72e:	4923      	ldr	r1, [pc, #140]	; (800b7bc <udp_sendto+0xa8>)
 800b730:	4823      	ldr	r0, [pc, #140]	; (800b7c0 <udp_sendto+0xac>)
 800b732:	f002 fedf 	bl	800e4f4 <iprintf>
 800b736:	f06f 030f 	mvn.w	r3, #15
 800b73a:	e038      	b.n	800b7ae <udp_sendto+0x9a>
  LWIP_ERROR("udp_sendto: invalid pbuf", p != NULL, return ERR_ARG);
 800b73c:	68bb      	ldr	r3, [r7, #8]
 800b73e:	2b00      	cmp	r3, #0
 800b740:	d109      	bne.n	800b756 <udp_sendto+0x42>
 800b742:	4b1d      	ldr	r3, [pc, #116]	; (800b7b8 <udp_sendto+0xa4>)
 800b744:	f240 2219 	movw	r2, #537	; 0x219
 800b748:	491e      	ldr	r1, [pc, #120]	; (800b7c4 <udp_sendto+0xb0>)
 800b74a:	481d      	ldr	r0, [pc, #116]	; (800b7c0 <udp_sendto+0xac>)
 800b74c:	f002 fed2 	bl	800e4f4 <iprintf>
 800b750:	f06f 030f 	mvn.w	r3, #15
 800b754:	e02b      	b.n	800b7ae <udp_sendto+0x9a>
  LWIP_ERROR("udp_sendto: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 800b756:	687b      	ldr	r3, [r7, #4]
 800b758:	2b00      	cmp	r3, #0
 800b75a:	d109      	bne.n	800b770 <udp_sendto+0x5c>
 800b75c:	4b16      	ldr	r3, [pc, #88]	; (800b7b8 <udp_sendto+0xa4>)
 800b75e:	f240 221a 	movw	r2, #538	; 0x21a
 800b762:	4919      	ldr	r1, [pc, #100]	; (800b7c8 <udp_sendto+0xb4>)
 800b764:	4816      	ldr	r0, [pc, #88]	; (800b7c0 <udp_sendto+0xac>)
 800b766:	f002 fec5 	bl	800e4f4 <iprintf>
 800b76a:	f06f 030f 	mvn.w	r3, #15
 800b76e:	e01e      	b.n	800b7ae <udp_sendto+0x9a>
    return ERR_VAL;
  }

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send\n"));

  if (pcb->netif_idx != NETIF_NO_INDEX) {
 800b770:	68fb      	ldr	r3, [r7, #12]
 800b772:	7a1b      	ldrb	r3, [r3, #8]
 800b774:	2b00      	cmp	r3, #0
 800b776:	d006      	beq.n	800b786 <udp_sendto+0x72>
    netif = netif_get_by_index(pcb->netif_idx);
 800b778:	68fb      	ldr	r3, [r7, #12]
 800b77a:	7a1b      	ldrb	r3, [r3, #8]
 800b77c:	4618      	mov	r0, r3
 800b77e:	f7f9 fd2f 	bl	80051e0 <netif_get_by_index>
 800b782:	6178      	str	r0, [r7, #20]
 800b784:	e003      	b.n	800b78e <udp_sendto+0x7a>

    if (netif == NULL)
#endif /* LWIP_MULTICAST_TX_OPTIONS */
    {
      /* find the outgoing network interface for this packet */
      netif = ip_route(&pcb->local_ip, dst_ip);
 800b786:	6878      	ldr	r0, [r7, #4]
 800b788:	f001 fbda 	bl	800cf40 <ip4_route>
 800b78c:	6178      	str	r0, [r7, #20]
    }
  }

  /* no outgoing network interface could be found? */
  if (netif == NULL) {
 800b78e:	697b      	ldr	r3, [r7, #20]
 800b790:	2b00      	cmp	r3, #0
 800b792:	d102      	bne.n	800b79a <udp_sendto+0x86>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: No route to "));
    ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, dst_ip);
    LWIP_DEBUGF(UDP_DEBUG, ("\n"));
    UDP_STATS_INC(udp.rterr);
    return ERR_RTE;
 800b794:	f06f 0303 	mvn.w	r3, #3
 800b798:	e009      	b.n	800b7ae <udp_sendto+0x9a>
  }
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if(pcb, p, dst_ip, dst_port, netif);
 800b79a:	887a      	ldrh	r2, [r7, #2]
 800b79c:	697b      	ldr	r3, [r7, #20]
 800b79e:	9300      	str	r3, [sp, #0]
 800b7a0:	4613      	mov	r3, r2
 800b7a2:	687a      	ldr	r2, [r7, #4]
 800b7a4:	68b9      	ldr	r1, [r7, #8]
 800b7a6:	68f8      	ldr	r0, [r7, #12]
 800b7a8:	f000 f810 	bl	800b7cc <udp_sendto_if>
 800b7ac:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 800b7ae:	4618      	mov	r0, r3
 800b7b0:	3718      	adds	r7, #24
 800b7b2:	46bd      	mov	sp, r7
 800b7b4:	bd80      	pop	{r7, pc}
 800b7b6:	bf00      	nop
 800b7b8:	080113a0 	.word	0x080113a0
 800b7bc:	080114c4 	.word	0x080114c4
 800b7c0:	080113f4 	.word	0x080113f4
 800b7c4:	080114dc 	.word	0x080114dc
 800b7c8:	080114f8 	.word	0x080114f8

0800b7cc <udp_sendto_if>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto_if(struct udp_pcb *pcb, struct pbuf *p,
              const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif)
{
 800b7cc:	b580      	push	{r7, lr}
 800b7ce:	b088      	sub	sp, #32
 800b7d0:	af02      	add	r7, sp, #8
 800b7d2:	60f8      	str	r0, [r7, #12]
 800b7d4:	60b9      	str	r1, [r7, #8]
 800b7d6:	607a      	str	r2, [r7, #4]
 800b7d8:	807b      	strh	r3, [r7, #2]
                     u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  const ip_addr_t *src_ip;

  LWIP_ERROR("udp_sendto_if: invalid pcb", pcb != NULL, return ERR_ARG);
 800b7da:	68fb      	ldr	r3, [r7, #12]
 800b7dc:	2b00      	cmp	r3, #0
 800b7de:	d109      	bne.n	800b7f4 <udp_sendto_if+0x28>
 800b7e0:	4b2e      	ldr	r3, [pc, #184]	; (800b89c <udp_sendto_if+0xd0>)
 800b7e2:	f44f 7220 	mov.w	r2, #640	; 0x280
 800b7e6:	492e      	ldr	r1, [pc, #184]	; (800b8a0 <udp_sendto_if+0xd4>)
 800b7e8:	482e      	ldr	r0, [pc, #184]	; (800b8a4 <udp_sendto_if+0xd8>)
 800b7ea:	f002 fe83 	bl	800e4f4 <iprintf>
 800b7ee:	f06f 030f 	mvn.w	r3, #15
 800b7f2:	e04f      	b.n	800b894 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid pbuf", p != NULL, return ERR_ARG);
 800b7f4:	68bb      	ldr	r3, [r7, #8]
 800b7f6:	2b00      	cmp	r3, #0
 800b7f8:	d109      	bne.n	800b80e <udp_sendto_if+0x42>
 800b7fa:	4b28      	ldr	r3, [pc, #160]	; (800b89c <udp_sendto_if+0xd0>)
 800b7fc:	f240 2281 	movw	r2, #641	; 0x281
 800b800:	4929      	ldr	r1, [pc, #164]	; (800b8a8 <udp_sendto_if+0xdc>)
 800b802:	4828      	ldr	r0, [pc, #160]	; (800b8a4 <udp_sendto_if+0xd8>)
 800b804:	f002 fe76 	bl	800e4f4 <iprintf>
 800b808:	f06f 030f 	mvn.w	r3, #15
 800b80c:	e042      	b.n	800b894 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 800b80e:	687b      	ldr	r3, [r7, #4]
 800b810:	2b00      	cmp	r3, #0
 800b812:	d109      	bne.n	800b828 <udp_sendto_if+0x5c>
 800b814:	4b21      	ldr	r3, [pc, #132]	; (800b89c <udp_sendto_if+0xd0>)
 800b816:	f240 2282 	movw	r2, #642	; 0x282
 800b81a:	4924      	ldr	r1, [pc, #144]	; (800b8ac <udp_sendto_if+0xe0>)
 800b81c:	4821      	ldr	r0, [pc, #132]	; (800b8a4 <udp_sendto_if+0xd8>)
 800b81e:	f002 fe69 	bl	800e4f4 <iprintf>
 800b822:	f06f 030f 	mvn.w	r3, #15
 800b826:	e035      	b.n	800b894 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid netif", netif != NULL, return ERR_ARG);
 800b828:	6a3b      	ldr	r3, [r7, #32]
 800b82a:	2b00      	cmp	r3, #0
 800b82c:	d109      	bne.n	800b842 <udp_sendto_if+0x76>
 800b82e:	4b1b      	ldr	r3, [pc, #108]	; (800b89c <udp_sendto_if+0xd0>)
 800b830:	f240 2283 	movw	r2, #643	; 0x283
 800b834:	491e      	ldr	r1, [pc, #120]	; (800b8b0 <udp_sendto_if+0xe4>)
 800b836:	481b      	ldr	r0, [pc, #108]	; (800b8a4 <udp_sendto_if+0xd8>)
 800b838:	f002 fe5c 	bl	800e4f4 <iprintf>
 800b83c:	f06f 030f 	mvn.w	r3, #15
 800b840:	e028      	b.n	800b894 <udp_sendto_if+0xc8>
#endif /* LWIP_IPV6 */
#if LWIP_IPV4 && LWIP_IPV6
  else
#endif /* LWIP_IPV4 && LWIP_IPV6 */
#if LWIP_IPV4
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800b842:	68fb      	ldr	r3, [r7, #12]
 800b844:	2b00      	cmp	r3, #0
 800b846:	d009      	beq.n	800b85c <udp_sendto_if+0x90>
 800b848:	68fb      	ldr	r3, [r7, #12]
 800b84a:	681b      	ldr	r3, [r3, #0]
 800b84c:	2b00      	cmp	r3, #0
 800b84e:	d005      	beq.n	800b85c <udp_sendto_if+0x90>
        ip4_addr_ismulticast(ip_2_ip4(&pcb->local_ip))) {
 800b850:	68fb      	ldr	r3, [r7, #12]
 800b852:	681b      	ldr	r3, [r3, #0]
 800b854:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800b858:	2be0      	cmp	r3, #224	; 0xe0
 800b85a:	d103      	bne.n	800b864 <udp_sendto_if+0x98>
      /* if the local_ip is any or multicast
       * use the outgoing network interface IP address as source address */
      src_ip = netif_ip_addr4(netif);
 800b85c:	6a3b      	ldr	r3, [r7, #32]
 800b85e:	3304      	adds	r3, #4
 800b860:	617b      	str	r3, [r7, #20]
 800b862:	e00b      	b.n	800b87c <udp_sendto_if+0xb0>
    } else {
      /* check if UDP PCB local IP address is correct
       * this could be an old address if netif->ip_addr has changed */
      if (!ip4_addr_cmp(ip_2_ip4(&(pcb->local_ip)), netif_ip4_addr(netif))) {
 800b864:	68fb      	ldr	r3, [r7, #12]
 800b866:	681a      	ldr	r2, [r3, #0]
 800b868:	6a3b      	ldr	r3, [r7, #32]
 800b86a:	3304      	adds	r3, #4
 800b86c:	681b      	ldr	r3, [r3, #0]
 800b86e:	429a      	cmp	r2, r3
 800b870:	d002      	beq.n	800b878 <udp_sendto_if+0xac>
        /* local_ip doesn't match, drop the packet */
        return ERR_RTE;
 800b872:	f06f 0303 	mvn.w	r3, #3
 800b876:	e00d      	b.n	800b894 <udp_sendto_if+0xc8>
      }
      /* use UDP PCB local IP address as source address */
      src_ip = &pcb->local_ip;
 800b878:	68fb      	ldr	r3, [r7, #12]
 800b87a:	617b      	str	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_src_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum, src_ip);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if_src(pcb, p, dst_ip, dst_port, netif, src_ip);
 800b87c:	887a      	ldrh	r2, [r7, #2]
 800b87e:	697b      	ldr	r3, [r7, #20]
 800b880:	9301      	str	r3, [sp, #4]
 800b882:	6a3b      	ldr	r3, [r7, #32]
 800b884:	9300      	str	r3, [sp, #0]
 800b886:	4613      	mov	r3, r2
 800b888:	687a      	ldr	r2, [r7, #4]
 800b88a:	68b9      	ldr	r1, [r7, #8]
 800b88c:	68f8      	ldr	r0, [r7, #12]
 800b88e:	f000 f811 	bl	800b8b4 <udp_sendto_if_src>
 800b892:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 800b894:	4618      	mov	r0, r3
 800b896:	3718      	adds	r7, #24
 800b898:	46bd      	mov	sp, r7
 800b89a:	bd80      	pop	{r7, pc}
 800b89c:	080113a0 	.word	0x080113a0
 800b8a0:	08011514 	.word	0x08011514
 800b8a4:	080113f4 	.word	0x080113f4
 800b8a8:	08011530 	.word	0x08011530
 800b8ac:	0801154c 	.word	0x0801154c
 800b8b0:	0801156c 	.word	0x0801156c

0800b8b4 <udp_sendto_if_src>:
/** @ingroup udp_raw
 * Same as @ref udp_sendto_if, but with source address */
err_t
udp_sendto_if_src(struct udp_pcb *pcb, struct pbuf *p,
                  const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif, const ip_addr_t *src_ip)
{
 800b8b4:	b580      	push	{r7, lr}
 800b8b6:	b08c      	sub	sp, #48	; 0x30
 800b8b8:	af04      	add	r7, sp, #16
 800b8ba:	60f8      	str	r0, [r7, #12]
 800b8bc:	60b9      	str	r1, [r7, #8]
 800b8be:	607a      	str	r2, [r7, #4]
 800b8c0:	807b      	strh	r3, [r7, #2]
  u8_t ip_proto;
  u8_t ttl;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_sendto_if_src: invalid pcb", pcb != NULL, return ERR_ARG);
 800b8c2:	68fb      	ldr	r3, [r7, #12]
 800b8c4:	2b00      	cmp	r3, #0
 800b8c6:	d109      	bne.n	800b8dc <udp_sendto_if_src+0x28>
 800b8c8:	4b65      	ldr	r3, [pc, #404]	; (800ba60 <udp_sendto_if_src+0x1ac>)
 800b8ca:	f240 22d1 	movw	r2, #721	; 0x2d1
 800b8ce:	4965      	ldr	r1, [pc, #404]	; (800ba64 <udp_sendto_if_src+0x1b0>)
 800b8d0:	4865      	ldr	r0, [pc, #404]	; (800ba68 <udp_sendto_if_src+0x1b4>)
 800b8d2:	f002 fe0f 	bl	800e4f4 <iprintf>
 800b8d6:	f06f 030f 	mvn.w	r3, #15
 800b8da:	e0bc      	b.n	800ba56 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid pbuf", p != NULL, return ERR_ARG);
 800b8dc:	68bb      	ldr	r3, [r7, #8]
 800b8de:	2b00      	cmp	r3, #0
 800b8e0:	d109      	bne.n	800b8f6 <udp_sendto_if_src+0x42>
 800b8e2:	4b5f      	ldr	r3, [pc, #380]	; (800ba60 <udp_sendto_if_src+0x1ac>)
 800b8e4:	f240 22d2 	movw	r2, #722	; 0x2d2
 800b8e8:	4960      	ldr	r1, [pc, #384]	; (800ba6c <udp_sendto_if_src+0x1b8>)
 800b8ea:	485f      	ldr	r0, [pc, #380]	; (800ba68 <udp_sendto_if_src+0x1b4>)
 800b8ec:	f002 fe02 	bl	800e4f4 <iprintf>
 800b8f0:	f06f 030f 	mvn.w	r3, #15
 800b8f4:	e0af      	b.n	800ba56 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 800b8f6:	687b      	ldr	r3, [r7, #4]
 800b8f8:	2b00      	cmp	r3, #0
 800b8fa:	d109      	bne.n	800b910 <udp_sendto_if_src+0x5c>
 800b8fc:	4b58      	ldr	r3, [pc, #352]	; (800ba60 <udp_sendto_if_src+0x1ac>)
 800b8fe:	f240 22d3 	movw	r2, #723	; 0x2d3
 800b902:	495b      	ldr	r1, [pc, #364]	; (800ba70 <udp_sendto_if_src+0x1bc>)
 800b904:	4858      	ldr	r0, [pc, #352]	; (800ba68 <udp_sendto_if_src+0x1b4>)
 800b906:	f002 fdf5 	bl	800e4f4 <iprintf>
 800b90a:	f06f 030f 	mvn.w	r3, #15
 800b90e:	e0a2      	b.n	800ba56 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid src_ip", src_ip != NULL, return ERR_ARG);
 800b910:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b912:	2b00      	cmp	r3, #0
 800b914:	d109      	bne.n	800b92a <udp_sendto_if_src+0x76>
 800b916:	4b52      	ldr	r3, [pc, #328]	; (800ba60 <udp_sendto_if_src+0x1ac>)
 800b918:	f44f 7235 	mov.w	r2, #724	; 0x2d4
 800b91c:	4955      	ldr	r1, [pc, #340]	; (800ba74 <udp_sendto_if_src+0x1c0>)
 800b91e:	4852      	ldr	r0, [pc, #328]	; (800ba68 <udp_sendto_if_src+0x1b4>)
 800b920:	f002 fde8 	bl	800e4f4 <iprintf>
 800b924:	f06f 030f 	mvn.w	r3, #15
 800b928:	e095      	b.n	800ba56 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid netif", netif != NULL, return ERR_ARG);
 800b92a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b92c:	2b00      	cmp	r3, #0
 800b92e:	d109      	bne.n	800b944 <udp_sendto_if_src+0x90>
 800b930:	4b4b      	ldr	r3, [pc, #300]	; (800ba60 <udp_sendto_if_src+0x1ac>)
 800b932:	f240 22d5 	movw	r2, #725	; 0x2d5
 800b936:	4950      	ldr	r1, [pc, #320]	; (800ba78 <udp_sendto_if_src+0x1c4>)
 800b938:	484b      	ldr	r0, [pc, #300]	; (800ba68 <udp_sendto_if_src+0x1b4>)
 800b93a:	f002 fddb 	bl	800e4f4 <iprintf>
 800b93e:	f06f 030f 	mvn.w	r3, #15
 800b942:	e088      	b.n	800ba56 <udp_sendto_if_src+0x1a2>
    return ERR_VAL;
  }
#endif /* LWIP_IPV4 && IP_SOF_BROADCAST */

  /* if the PCB is not yet bound to a port, bind it here */
  if (pcb->local_port == 0) {
 800b944:	68fb      	ldr	r3, [r7, #12]
 800b946:	8a5b      	ldrh	r3, [r3, #18]
 800b948:	2b00      	cmp	r3, #0
 800b94a:	d10f      	bne.n	800b96c <udp_sendto_if_src+0xb8>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send: not yet bound to a port, binding now\n"));
    err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 800b94c:	68f9      	ldr	r1, [r7, #12]
 800b94e:	68fb      	ldr	r3, [r7, #12]
 800b950:	8a5b      	ldrh	r3, [r3, #18]
 800b952:	461a      	mov	r2, r3
 800b954:	68f8      	ldr	r0, [r7, #12]
 800b956:	f000 f893 	bl	800ba80 <udp_bind>
 800b95a:	4603      	mov	r3, r0
 800b95c:	76fb      	strb	r3, [r7, #27]
    if (err != ERR_OK) {
 800b95e:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800b962:	2b00      	cmp	r3, #0
 800b964:	d002      	beq.n	800b96c <udp_sendto_if_src+0xb8>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: forced port bind failed\n"));
      return err;
 800b966:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800b96a:	e074      	b.n	800ba56 <udp_sendto_if_src+0x1a2>
    }
  }

  /* packet too large to add a UDP header without causing an overflow? */
  if ((u16_t)(p->tot_len + UDP_HLEN) < p->tot_len) {
 800b96c:	68bb      	ldr	r3, [r7, #8]
 800b96e:	891b      	ldrh	r3, [r3, #8]
 800b970:	f64f 72f7 	movw	r2, #65527	; 0xfff7
 800b974:	4293      	cmp	r3, r2
 800b976:	d902      	bls.n	800b97e <udp_sendto_if_src+0xca>
    return ERR_MEM;
 800b978:	f04f 33ff 	mov.w	r3, #4294967295
 800b97c:	e06b      	b.n	800ba56 <udp_sendto_if_src+0x1a2>
  }
  /* not enough space to add an UDP header to first pbuf in given p chain? */
  if (pbuf_add_header(p, UDP_HLEN)) {
 800b97e:	2108      	movs	r1, #8
 800b980:	68b8      	ldr	r0, [r7, #8]
 800b982:	f7f9 fef7 	bl	8005774 <pbuf_add_header>
 800b986:	4603      	mov	r3, r0
 800b988:	2b00      	cmp	r3, #0
 800b98a:	d015      	beq.n	800b9b8 <udp_sendto_if_src+0x104>
    /* allocate header in a separate new pbuf */
    q = pbuf_alloc(PBUF_IP, UDP_HLEN, PBUF_RAM);
 800b98c:	f44f 7220 	mov.w	r2, #640	; 0x280
 800b990:	2108      	movs	r1, #8
 800b992:	2022      	movs	r0, #34	; 0x22
 800b994:	f7f9 fca0 	bl	80052d8 <pbuf_alloc>
 800b998:	61f8      	str	r0, [r7, #28]
    /* new header pbuf could not be allocated? */
    if (q == NULL) {
 800b99a:	69fb      	ldr	r3, [r7, #28]
 800b99c:	2b00      	cmp	r3, #0
 800b99e:	d102      	bne.n	800b9a6 <udp_sendto_if_src+0xf2>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: could not allocate header\n"));
      return ERR_MEM;
 800b9a0:	f04f 33ff 	mov.w	r3, #4294967295
 800b9a4:	e057      	b.n	800ba56 <udp_sendto_if_src+0x1a2>
    }
    if (p->tot_len != 0) {
 800b9a6:	68bb      	ldr	r3, [r7, #8]
 800b9a8:	891b      	ldrh	r3, [r3, #8]
 800b9aa:	2b00      	cmp	r3, #0
 800b9ac:	d006      	beq.n	800b9bc <udp_sendto_if_src+0x108>
      /* chain header q in front of given pbuf p (only if p contains data) */
      pbuf_chain(q, p);
 800b9ae:	68b9      	ldr	r1, [r7, #8]
 800b9b0:	69f8      	ldr	r0, [r7, #28]
 800b9b2:	f7fa f88d 	bl	8005ad0 <pbuf_chain>
 800b9b6:	e001      	b.n	800b9bc <udp_sendto_if_src+0x108>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_send: added header pbuf %p before given pbuf %p\n", (void *)q, (void *)p));
  } else {
    /* adding space for header within p succeeded */
    /* first pbuf q equals given pbuf */
    q = p;
 800b9b8:	68bb      	ldr	r3, [r7, #8]
 800b9ba:	61fb      	str	r3, [r7, #28]
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: added header in given pbuf %p\n", (void *)p));
  }
  LWIP_ASSERT("check that first pbuf can hold struct udp_hdr",
 800b9bc:	69fb      	ldr	r3, [r7, #28]
 800b9be:	895b      	ldrh	r3, [r3, #10]
 800b9c0:	2b07      	cmp	r3, #7
 800b9c2:	d806      	bhi.n	800b9d2 <udp_sendto_if_src+0x11e>
 800b9c4:	4b26      	ldr	r3, [pc, #152]	; (800ba60 <udp_sendto_if_src+0x1ac>)
 800b9c6:	f240 320d 	movw	r2, #781	; 0x30d
 800b9ca:	492c      	ldr	r1, [pc, #176]	; (800ba7c <udp_sendto_if_src+0x1c8>)
 800b9cc:	4826      	ldr	r0, [pc, #152]	; (800ba68 <udp_sendto_if_src+0x1b4>)
 800b9ce:	f002 fd91 	bl	800e4f4 <iprintf>
              (q->len >= sizeof(struct udp_hdr)));
  /* q now represents the packet to be sent */
  udphdr = (struct udp_hdr *)q->payload;
 800b9d2:	69fb      	ldr	r3, [r7, #28]
 800b9d4:	685b      	ldr	r3, [r3, #4]
 800b9d6:	617b      	str	r3, [r7, #20]
  udphdr->src = lwip_htons(pcb->local_port);
 800b9d8:	68fb      	ldr	r3, [r7, #12]
 800b9da:	8a5b      	ldrh	r3, [r3, #18]
 800b9dc:	4618      	mov	r0, r3
 800b9de:	f7f8 fc01 	bl	80041e4 <lwip_htons>
 800b9e2:	4603      	mov	r3, r0
 800b9e4:	461a      	mov	r2, r3
 800b9e6:	697b      	ldr	r3, [r7, #20]
 800b9e8:	801a      	strh	r2, [r3, #0]
  udphdr->dest = lwip_htons(dst_port);
 800b9ea:	887b      	ldrh	r3, [r7, #2]
 800b9ec:	4618      	mov	r0, r3
 800b9ee:	f7f8 fbf9 	bl	80041e4 <lwip_htons>
 800b9f2:	4603      	mov	r3, r0
 800b9f4:	461a      	mov	r2, r3
 800b9f6:	697b      	ldr	r3, [r7, #20]
 800b9f8:	805a      	strh	r2, [r3, #2]
  /* in UDP, 0 checksum means 'no checksum' */
  udphdr->chksum = 0x0000;
 800b9fa:	697b      	ldr	r3, [r7, #20]
 800b9fc:	2200      	movs	r2, #0
 800b9fe:	719a      	strb	r2, [r3, #6]
 800ba00:	2200      	movs	r2, #0
 800ba02:	71da      	strb	r2, [r3, #7]
    ip_proto = IP_PROTO_UDPLITE;
  } else
#endif /* LWIP_UDPLITE */
  {      /* UDP */
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP packet length %"U16_F"\n", q->tot_len));
    udphdr->len = lwip_htons(q->tot_len);
 800ba04:	69fb      	ldr	r3, [r7, #28]
 800ba06:	891b      	ldrh	r3, [r3, #8]
 800ba08:	4618      	mov	r0, r3
 800ba0a:	f7f8 fbeb 	bl	80041e4 <lwip_htons>
 800ba0e:	4603      	mov	r3, r0
 800ba10:	461a      	mov	r2, r3
 800ba12:	697b      	ldr	r3, [r7, #20]
 800ba14:	809a      	strh	r2, [r3, #4]
        }
        udphdr->chksum = udpchksum;
      }
    }
#endif /* CHECKSUM_GEN_UDP */
    ip_proto = IP_PROTO_UDP;
 800ba16:	2311      	movs	r3, #17
 800ba18:	74fb      	strb	r3, [r7, #19]

  /* Determine TTL to use */
#if LWIP_MULTICAST_TX_OPTIONS
  ttl = (ip_addr_ismulticast(dst_ip) ? udp_get_multicast_ttl(pcb) : pcb->ttl);
#else /* LWIP_MULTICAST_TX_OPTIONS */
  ttl = pcb->ttl;
 800ba1a:	68fb      	ldr	r3, [r7, #12]
 800ba1c:	7adb      	ldrb	r3, [r3, #11]
 800ba1e:	74bb      	strb	r3, [r7, #18]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP checksum 0x%04"X16_F"\n", udphdr->chksum));
  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: ip_output_if (,,,,0x%02"X16_F",)\n", (u16_t)ip_proto));
  /* output to IP */
  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if_src(q, src_ip, dst_ip, ttl, pcb->tos, ip_proto, netif);
 800ba20:	68fb      	ldr	r3, [r7, #12]
 800ba22:	7a9b      	ldrb	r3, [r3, #10]
 800ba24:	7cb9      	ldrb	r1, [r7, #18]
 800ba26:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ba28:	9202      	str	r2, [sp, #8]
 800ba2a:	7cfa      	ldrb	r2, [r7, #19]
 800ba2c:	9201      	str	r2, [sp, #4]
 800ba2e:	9300      	str	r3, [sp, #0]
 800ba30:	460b      	mov	r3, r1
 800ba32:	687a      	ldr	r2, [r7, #4]
 800ba34:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800ba36:	69f8      	ldr	r0, [r7, #28]
 800ba38:	f001 fc6a 	bl	800d310 <ip4_output_if_src>
 800ba3c:	4603      	mov	r3, r0
 800ba3e:	76fb      	strb	r3, [r7, #27]

  /* @todo: must this be increased even if error occurred? */
  MIB2_STATS_INC(mib2.udpoutdatagrams);

  /* did we chain a separate header pbuf earlier? */
  if (q != p) {
 800ba40:	69fa      	ldr	r2, [r7, #28]
 800ba42:	68bb      	ldr	r3, [r7, #8]
 800ba44:	429a      	cmp	r2, r3
 800ba46:	d004      	beq.n	800ba52 <udp_sendto_if_src+0x19e>
    /* free the header pbuf */
    pbuf_free(q);
 800ba48:	69f8      	ldr	r0, [r7, #28]
 800ba4a:	f7f9 ff29 	bl	80058a0 <pbuf_free>
    q = NULL;
 800ba4e:	2300      	movs	r3, #0
 800ba50:	61fb      	str	r3, [r7, #28]
    /* p is still referenced by the caller, and will live on */
  }

  UDP_STATS_INC(udp.xmit);
  return err;
 800ba52:	f997 301b 	ldrsb.w	r3, [r7, #27]
}
 800ba56:	4618      	mov	r0, r3
 800ba58:	3720      	adds	r7, #32
 800ba5a:	46bd      	mov	sp, r7
 800ba5c:	bd80      	pop	{r7, pc}
 800ba5e:	bf00      	nop
 800ba60:	080113a0 	.word	0x080113a0
 800ba64:	0801158c 	.word	0x0801158c
 800ba68:	080113f4 	.word	0x080113f4
 800ba6c:	080115ac 	.word	0x080115ac
 800ba70:	080115cc 	.word	0x080115cc
 800ba74:	080115f0 	.word	0x080115f0
 800ba78:	08011614 	.word	0x08011614
 800ba7c:	08011638 	.word	0x08011638

0800ba80 <udp_bind>:
 *
 * @see udp_disconnect()
 */
err_t
udp_bind(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 800ba80:	b580      	push	{r7, lr}
 800ba82:	b086      	sub	sp, #24
 800ba84:	af00      	add	r7, sp, #0
 800ba86:	60f8      	str	r0, [r7, #12]
 800ba88:	60b9      	str	r1, [r7, #8]
 800ba8a:	4613      	mov	r3, r2
 800ba8c:	80fb      	strh	r3, [r7, #6]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 800ba8e:	68bb      	ldr	r3, [r7, #8]
 800ba90:	2b00      	cmp	r3, #0
 800ba92:	d101      	bne.n	800ba98 <udp_bind+0x18>
    ipaddr = IP4_ADDR_ANY;
 800ba94:	4b39      	ldr	r3, [pc, #228]	; (800bb7c <udp_bind+0xfc>)
 800ba96:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("udp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("udp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 800ba98:	68fb      	ldr	r3, [r7, #12]
 800ba9a:	2b00      	cmp	r3, #0
 800ba9c:	d109      	bne.n	800bab2 <udp_bind+0x32>
 800ba9e:	4b38      	ldr	r3, [pc, #224]	; (800bb80 <udp_bind+0x100>)
 800baa0:	f240 32b7 	movw	r2, #951	; 0x3b7
 800baa4:	4937      	ldr	r1, [pc, #220]	; (800bb84 <udp_bind+0x104>)
 800baa6:	4838      	ldr	r0, [pc, #224]	; (800bb88 <udp_bind+0x108>)
 800baa8:	f002 fd24 	bl	800e4f4 <iprintf>
 800baac:	f06f 030f 	mvn.w	r3, #15
 800bab0:	e060      	b.n	800bb74 <udp_bind+0xf4>

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_bind(ipaddr = "));
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE, ipaddr);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, (", port = %"U16_F")\n", port));

  rebind = 0;
 800bab2:	2300      	movs	r3, #0
 800bab4:	74fb      	strb	r3, [r7, #19]
  /* Check for double bind and rebind of the same pcb */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800bab6:	4b35      	ldr	r3, [pc, #212]	; (800bb8c <udp_bind+0x10c>)
 800bab8:	681b      	ldr	r3, [r3, #0]
 800baba:	617b      	str	r3, [r7, #20]
 800babc:	e009      	b.n	800bad2 <udp_bind+0x52>
    /* is this UDP PCB already on active list? */
    if (pcb == ipcb) {
 800babe:	68fa      	ldr	r2, [r7, #12]
 800bac0:	697b      	ldr	r3, [r7, #20]
 800bac2:	429a      	cmp	r2, r3
 800bac4:	d102      	bne.n	800bacc <udp_bind+0x4c>
      rebind = 1;
 800bac6:	2301      	movs	r3, #1
 800bac8:	74fb      	strb	r3, [r7, #19]
      break;
 800baca:	e005      	b.n	800bad8 <udp_bind+0x58>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800bacc:	697b      	ldr	r3, [r7, #20]
 800bace:	68db      	ldr	r3, [r3, #12]
 800bad0:	617b      	str	r3, [r7, #20]
 800bad2:	697b      	ldr	r3, [r7, #20]
 800bad4:	2b00      	cmp	r3, #0
 800bad6:	d1f2      	bne.n	800babe <udp_bind+0x3e>
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  /* no port specified? */
  if (port == 0) {
 800bad8:	88fb      	ldrh	r3, [r7, #6]
 800bada:	2b00      	cmp	r3, #0
 800badc:	d109      	bne.n	800baf2 <udp_bind+0x72>
    port = udp_new_port();
 800bade:	f7ff fc35 	bl	800b34c <udp_new_port>
 800bae2:	4603      	mov	r3, r0
 800bae4:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 800bae6:	88fb      	ldrh	r3, [r7, #6]
 800bae8:	2b00      	cmp	r3, #0
 800baea:	d12c      	bne.n	800bb46 <udp_bind+0xc6>
      /* no more ports available in local range */
      LWIP_DEBUGF(UDP_DEBUG, ("udp_bind: out of free UDP ports\n"));
      return ERR_USE;
 800baec:	f06f 0307 	mvn.w	r3, #7
 800baf0:	e040      	b.n	800bb74 <udp_bind+0xf4>
    }
  } else {
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800baf2:	4b26      	ldr	r3, [pc, #152]	; (800bb8c <udp_bind+0x10c>)
 800baf4:	681b      	ldr	r3, [r3, #0]
 800baf6:	617b      	str	r3, [r7, #20]
 800baf8:	e022      	b.n	800bb40 <udp_bind+0xc0>
      if (pcb != ipcb) {
 800bafa:	68fa      	ldr	r2, [r7, #12]
 800bafc:	697b      	ldr	r3, [r7, #20]
 800bafe:	429a      	cmp	r2, r3
 800bb00:	d01b      	beq.n	800bb3a <udp_bind+0xba>
        if (!ip_get_option(pcb, SOF_REUSEADDR) ||
            !ip_get_option(ipcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
        {
          /* port matches that of PCB in list and REUSEADDR not set -> reject */
          if ((ipcb->local_port == port) &&
 800bb02:	697b      	ldr	r3, [r7, #20]
 800bb04:	8a5b      	ldrh	r3, [r3, #18]
 800bb06:	88fa      	ldrh	r2, [r7, #6]
 800bb08:	429a      	cmp	r2, r3
 800bb0a:	d116      	bne.n	800bb3a <udp_bind+0xba>
              /* IP address matches or any IP used? */
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 800bb0c:	697b      	ldr	r3, [r7, #20]
 800bb0e:	681a      	ldr	r2, [r3, #0]
 800bb10:	68bb      	ldr	r3, [r7, #8]
 800bb12:	681b      	ldr	r3, [r3, #0]
          if ((ipcb->local_port == port) &&
 800bb14:	429a      	cmp	r2, r3
 800bb16:	d00d      	beq.n	800bb34 <udp_bind+0xb4>
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 800bb18:	68bb      	ldr	r3, [r7, #8]
 800bb1a:	2b00      	cmp	r3, #0
 800bb1c:	d00a      	beq.n	800bb34 <udp_bind+0xb4>
 800bb1e:	68bb      	ldr	r3, [r7, #8]
 800bb20:	681b      	ldr	r3, [r3, #0]
 800bb22:	2b00      	cmp	r3, #0
 800bb24:	d006      	beq.n	800bb34 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 800bb26:	697b      	ldr	r3, [r7, #20]
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 800bb28:	2b00      	cmp	r3, #0
 800bb2a:	d003      	beq.n	800bb34 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 800bb2c:	697b      	ldr	r3, [r7, #20]
 800bb2e:	681b      	ldr	r3, [r3, #0]
 800bb30:	2b00      	cmp	r3, #0
 800bb32:	d102      	bne.n	800bb3a <udp_bind+0xba>
            /* other PCB already binds to this local IP and port */
            LWIP_DEBUGF(UDP_DEBUG,
                        ("udp_bind: local port %"U16_F" already bound by another pcb\n", port));
            return ERR_USE;
 800bb34:	f06f 0307 	mvn.w	r3, #7
 800bb38:	e01c      	b.n	800bb74 <udp_bind+0xf4>
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800bb3a:	697b      	ldr	r3, [r7, #20]
 800bb3c:	68db      	ldr	r3, [r3, #12]
 800bb3e:	617b      	str	r3, [r7, #20]
 800bb40:	697b      	ldr	r3, [r7, #20]
 800bb42:	2b00      	cmp	r3, #0
 800bb44:	d1d9      	bne.n	800bafa <udp_bind+0x7a>
        }
      }
    }
  }

  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 800bb46:	68bb      	ldr	r3, [r7, #8]
 800bb48:	2b00      	cmp	r3, #0
 800bb4a:	d002      	beq.n	800bb52 <udp_bind+0xd2>
 800bb4c:	68bb      	ldr	r3, [r7, #8]
 800bb4e:	681b      	ldr	r3, [r3, #0]
 800bb50:	e000      	b.n	800bb54 <udp_bind+0xd4>
 800bb52:	2300      	movs	r3, #0
 800bb54:	68fa      	ldr	r2, [r7, #12]
 800bb56:	6013      	str	r3, [r2, #0]

  pcb->local_port = port;
 800bb58:	68fb      	ldr	r3, [r7, #12]
 800bb5a:	88fa      	ldrh	r2, [r7, #6]
 800bb5c:	825a      	strh	r2, [r3, #18]
  mib2_udp_bind(pcb);
  /* pcb not active yet? */
  if (rebind == 0) {
 800bb5e:	7cfb      	ldrb	r3, [r7, #19]
 800bb60:	2b00      	cmp	r3, #0
 800bb62:	d106      	bne.n	800bb72 <udp_bind+0xf2>
    /* place the PCB on the active list if not already there */
    pcb->next = udp_pcbs;
 800bb64:	4b09      	ldr	r3, [pc, #36]	; (800bb8c <udp_bind+0x10c>)
 800bb66:	681a      	ldr	r2, [r3, #0]
 800bb68:	68fb      	ldr	r3, [r7, #12]
 800bb6a:	60da      	str	r2, [r3, #12]
    udp_pcbs = pcb;
 800bb6c:	4a07      	ldr	r2, [pc, #28]	; (800bb8c <udp_bind+0x10c>)
 800bb6e:	68fb      	ldr	r3, [r7, #12]
 800bb70:	6013      	str	r3, [r2, #0]
  }
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("udp_bind: bound to "));
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, pcb->local_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->local_port));
  return ERR_OK;
 800bb72:	2300      	movs	r3, #0
}
 800bb74:	4618      	mov	r0, r3
 800bb76:	3718      	adds	r7, #24
 800bb78:	46bd      	mov	sp, r7
 800bb7a:	bd80      	pop	{r7, pc}
 800bb7c:	08011ebc 	.word	0x08011ebc
 800bb80:	080113a0 	.word	0x080113a0
 800bb84:	08011668 	.word	0x08011668
 800bb88:	080113f4 	.word	0x080113f4
 800bb8c:	200082dc 	.word	0x200082dc

0800bb90 <udp_connect>:
 *
 * @see udp_disconnect()
 */
err_t
udp_connect(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 800bb90:	b580      	push	{r7, lr}
 800bb92:	b086      	sub	sp, #24
 800bb94:	af00      	add	r7, sp, #0
 800bb96:	60f8      	str	r0, [r7, #12]
 800bb98:	60b9      	str	r1, [r7, #8]
 800bb9a:	4613      	mov	r3, r2
 800bb9c:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *ipcb;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_connect: invalid pcb", pcb != NULL, return ERR_ARG);
 800bb9e:	68fb      	ldr	r3, [r7, #12]
 800bba0:	2b00      	cmp	r3, #0
 800bba2:	d109      	bne.n	800bbb8 <udp_connect+0x28>
 800bba4:	4b2c      	ldr	r3, [pc, #176]	; (800bc58 <udp_connect+0xc8>)
 800bba6:	f240 4235 	movw	r2, #1077	; 0x435
 800bbaa:	492c      	ldr	r1, [pc, #176]	; (800bc5c <udp_connect+0xcc>)
 800bbac:	482c      	ldr	r0, [pc, #176]	; (800bc60 <udp_connect+0xd0>)
 800bbae:	f002 fca1 	bl	800e4f4 <iprintf>
 800bbb2:	f06f 030f 	mvn.w	r3, #15
 800bbb6:	e04b      	b.n	800bc50 <udp_connect+0xc0>
  LWIP_ERROR("udp_connect: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
 800bbb8:	68bb      	ldr	r3, [r7, #8]
 800bbba:	2b00      	cmp	r3, #0
 800bbbc:	d109      	bne.n	800bbd2 <udp_connect+0x42>
 800bbbe:	4b26      	ldr	r3, [pc, #152]	; (800bc58 <udp_connect+0xc8>)
 800bbc0:	f240 4236 	movw	r2, #1078	; 0x436
 800bbc4:	4927      	ldr	r1, [pc, #156]	; (800bc64 <udp_connect+0xd4>)
 800bbc6:	4826      	ldr	r0, [pc, #152]	; (800bc60 <udp_connect+0xd0>)
 800bbc8:	f002 fc94 	bl	800e4f4 <iprintf>
 800bbcc:	f06f 030f 	mvn.w	r3, #15
 800bbd0:	e03e      	b.n	800bc50 <udp_connect+0xc0>

  if (pcb->local_port == 0) {
 800bbd2:	68fb      	ldr	r3, [r7, #12]
 800bbd4:	8a5b      	ldrh	r3, [r3, #18]
 800bbd6:	2b00      	cmp	r3, #0
 800bbd8:	d10f      	bne.n	800bbfa <udp_connect+0x6a>
    err_t err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 800bbda:	68f9      	ldr	r1, [r7, #12]
 800bbdc:	68fb      	ldr	r3, [r7, #12]
 800bbde:	8a5b      	ldrh	r3, [r3, #18]
 800bbe0:	461a      	mov	r2, r3
 800bbe2:	68f8      	ldr	r0, [r7, #12]
 800bbe4:	f7ff ff4c 	bl	800ba80 <udp_bind>
 800bbe8:	4603      	mov	r3, r0
 800bbea:	74fb      	strb	r3, [r7, #19]
    if (err != ERR_OK) {
 800bbec:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800bbf0:	2b00      	cmp	r3, #0
 800bbf2:	d002      	beq.n	800bbfa <udp_connect+0x6a>
      return err;
 800bbf4:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800bbf8:	e02a      	b.n	800bc50 <udp_connect+0xc0>
    }
  }

  ip_addr_set_ipaddr(&pcb->remote_ip, ipaddr);
 800bbfa:	68bb      	ldr	r3, [r7, #8]
 800bbfc:	2b00      	cmp	r3, #0
 800bbfe:	d002      	beq.n	800bc06 <udp_connect+0x76>
 800bc00:	68bb      	ldr	r3, [r7, #8]
 800bc02:	681b      	ldr	r3, [r3, #0]
 800bc04:	e000      	b.n	800bc08 <udp_connect+0x78>
 800bc06:	2300      	movs	r3, #0
 800bc08:	68fa      	ldr	r2, [r7, #12]
 800bc0a:	6053      	str	r3, [r2, #4]
      ip6_addr_lacks_zone(ip_2_ip6(&pcb->remote_ip), IP6_UNKNOWN)) {
    ip6_addr_select_zone(ip_2_ip6(&pcb->remote_ip), ip_2_ip6(&pcb->local_ip));
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  pcb->remote_port = port;
 800bc0c:	68fb      	ldr	r3, [r7, #12]
 800bc0e:	88fa      	ldrh	r2, [r7, #6]
 800bc10:	829a      	strh	r2, [r3, #20]
  pcb->flags |= UDP_FLAGS_CONNECTED;
 800bc12:	68fb      	ldr	r3, [r7, #12]
 800bc14:	7c1b      	ldrb	r3, [r3, #16]
 800bc16:	f043 0304 	orr.w	r3, r3, #4
 800bc1a:	b2da      	uxtb	r2, r3
 800bc1c:	68fb      	ldr	r3, [r7, #12]
 800bc1e:	741a      	strb	r2, [r3, #16]
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                          pcb->remote_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->remote_port));

  /* Insert UDP PCB into the list of active UDP PCBs. */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800bc20:	4b11      	ldr	r3, [pc, #68]	; (800bc68 <udp_connect+0xd8>)
 800bc22:	681b      	ldr	r3, [r3, #0]
 800bc24:	617b      	str	r3, [r7, #20]
 800bc26:	e008      	b.n	800bc3a <udp_connect+0xaa>
    if (pcb == ipcb) {
 800bc28:	68fa      	ldr	r2, [r7, #12]
 800bc2a:	697b      	ldr	r3, [r7, #20]
 800bc2c:	429a      	cmp	r2, r3
 800bc2e:	d101      	bne.n	800bc34 <udp_connect+0xa4>
      /* already on the list, just return */
      return ERR_OK;
 800bc30:	2300      	movs	r3, #0
 800bc32:	e00d      	b.n	800bc50 <udp_connect+0xc0>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800bc34:	697b      	ldr	r3, [r7, #20]
 800bc36:	68db      	ldr	r3, [r3, #12]
 800bc38:	617b      	str	r3, [r7, #20]
 800bc3a:	697b      	ldr	r3, [r7, #20]
 800bc3c:	2b00      	cmp	r3, #0
 800bc3e:	d1f3      	bne.n	800bc28 <udp_connect+0x98>
    }
  }
  /* PCB not yet on the list, add PCB now */
  pcb->next = udp_pcbs;
 800bc40:	4b09      	ldr	r3, [pc, #36]	; (800bc68 <udp_connect+0xd8>)
 800bc42:	681a      	ldr	r2, [r3, #0]
 800bc44:	68fb      	ldr	r3, [r7, #12]
 800bc46:	60da      	str	r2, [r3, #12]
  udp_pcbs = pcb;
 800bc48:	4a07      	ldr	r2, [pc, #28]	; (800bc68 <udp_connect+0xd8>)
 800bc4a:	68fb      	ldr	r3, [r7, #12]
 800bc4c:	6013      	str	r3, [r2, #0]
  return ERR_OK;
 800bc4e:	2300      	movs	r3, #0
}
 800bc50:	4618      	mov	r0, r3
 800bc52:	3718      	adds	r7, #24
 800bc54:	46bd      	mov	sp, r7
 800bc56:	bd80      	pop	{r7, pc}
 800bc58:	080113a0 	.word	0x080113a0
 800bc5c:	08011680 	.word	0x08011680
 800bc60:	080113f4 	.word	0x080113f4
 800bc64:	0801169c 	.word	0x0801169c
 800bc68:	200082dc 	.word	0x200082dc

0800bc6c <udp_disconnect>:
 *
 * @param pcb the udp pcb to disconnect.
 */
void
udp_disconnect(struct udp_pcb *pcb)
{
 800bc6c:	b580      	push	{r7, lr}
 800bc6e:	b082      	sub	sp, #8
 800bc70:	af00      	add	r7, sp, #0
 800bc72:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_disconnect: invalid pcb", pcb != NULL, return);
 800bc74:	687b      	ldr	r3, [r7, #4]
 800bc76:	2b00      	cmp	r3, #0
 800bc78:	d107      	bne.n	800bc8a <udp_disconnect+0x1e>
 800bc7a:	4b0d      	ldr	r3, [pc, #52]	; (800bcb0 <udp_disconnect+0x44>)
 800bc7c:	f240 426a 	movw	r2, #1130	; 0x46a
 800bc80:	490c      	ldr	r1, [pc, #48]	; (800bcb4 <udp_disconnect+0x48>)
 800bc82:	480d      	ldr	r0, [pc, #52]	; (800bcb8 <udp_disconnect+0x4c>)
 800bc84:	f002 fc36 	bl	800e4f4 <iprintf>
 800bc88:	e00f      	b.n	800bcaa <udp_disconnect+0x3e>
#if LWIP_IPV4 && LWIP_IPV6
  if (IP_IS_ANY_TYPE_VAL(pcb->local_ip)) {
    ip_addr_copy(pcb->remote_ip, *IP_ANY_TYPE);
  } else {
#endif
    ip_addr_set_any(IP_IS_V6_VAL(pcb->remote_ip), &pcb->remote_ip);
 800bc8a:	687b      	ldr	r3, [r7, #4]
 800bc8c:	2200      	movs	r2, #0
 800bc8e:	605a      	str	r2, [r3, #4]
#if LWIP_IPV4 && LWIP_IPV6
  }
#endif
  pcb->remote_port = 0;
 800bc90:	687b      	ldr	r3, [r7, #4]
 800bc92:	2200      	movs	r2, #0
 800bc94:	829a      	strh	r2, [r3, #20]
  pcb->netif_idx = NETIF_NO_INDEX;
 800bc96:	687b      	ldr	r3, [r7, #4]
 800bc98:	2200      	movs	r2, #0
 800bc9a:	721a      	strb	r2, [r3, #8]
  /* mark PCB as unconnected */
  udp_clear_flags(pcb, UDP_FLAGS_CONNECTED);
 800bc9c:	687b      	ldr	r3, [r7, #4]
 800bc9e:	7c1b      	ldrb	r3, [r3, #16]
 800bca0:	f023 0304 	bic.w	r3, r3, #4
 800bca4:	b2da      	uxtb	r2, r3
 800bca6:	687b      	ldr	r3, [r7, #4]
 800bca8:	741a      	strb	r2, [r3, #16]
}
 800bcaa:	3708      	adds	r7, #8
 800bcac:	46bd      	mov	sp, r7
 800bcae:	bd80      	pop	{r7, pc}
 800bcb0:	080113a0 	.word	0x080113a0
 800bcb4:	080116b8 	.word	0x080116b8
 800bcb8:	080113f4 	.word	0x080113f4

0800bcbc <udp_recv>:
 * @param recv function pointer of the callback function
 * @param recv_arg additional argument to pass to the callback function
 */
void
udp_recv(struct udp_pcb *pcb, udp_recv_fn recv, void *recv_arg)
{
 800bcbc:	b580      	push	{r7, lr}
 800bcbe:	b084      	sub	sp, #16
 800bcc0:	af00      	add	r7, sp, #0
 800bcc2:	60f8      	str	r0, [r7, #12]
 800bcc4:	60b9      	str	r1, [r7, #8]
 800bcc6:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_recv: invalid pcb", pcb != NULL, return);
 800bcc8:	68fb      	ldr	r3, [r7, #12]
 800bcca:	2b00      	cmp	r3, #0
 800bccc:	d107      	bne.n	800bcde <udp_recv+0x22>
 800bcce:	4b08      	ldr	r3, [pc, #32]	; (800bcf0 <udp_recv+0x34>)
 800bcd0:	f240 428a 	movw	r2, #1162	; 0x48a
 800bcd4:	4907      	ldr	r1, [pc, #28]	; (800bcf4 <udp_recv+0x38>)
 800bcd6:	4808      	ldr	r0, [pc, #32]	; (800bcf8 <udp_recv+0x3c>)
 800bcd8:	f002 fc0c 	bl	800e4f4 <iprintf>
 800bcdc:	e005      	b.n	800bcea <udp_recv+0x2e>

  /* remember recv() callback and user data */
  pcb->recv = recv;
 800bcde:	68fb      	ldr	r3, [r7, #12]
 800bce0:	68ba      	ldr	r2, [r7, #8]
 800bce2:	619a      	str	r2, [r3, #24]
  pcb->recv_arg = recv_arg;
 800bce4:	68fb      	ldr	r3, [r7, #12]
 800bce6:	687a      	ldr	r2, [r7, #4]
 800bce8:	61da      	str	r2, [r3, #28]
}
 800bcea:	3710      	adds	r7, #16
 800bcec:	46bd      	mov	sp, r7
 800bcee:	bd80      	pop	{r7, pc}
 800bcf0:	080113a0 	.word	0x080113a0
 800bcf4:	080116d4 	.word	0x080116d4
 800bcf8:	080113f4 	.word	0x080113f4

0800bcfc <udp_new>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new(void)
{
 800bcfc:	b580      	push	{r7, lr}
 800bcfe:	b082      	sub	sp, #8
 800bd00:	af00      	add	r7, sp, #0
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct udp_pcb *)memp_malloc(MEMP_UDP_PCB);
 800bd02:	2000      	movs	r0, #0
 800bd04:	f7f8 fee6 	bl	8004ad4 <memp_malloc>
 800bd08:	6078      	str	r0, [r7, #4]
  /* could allocate UDP PCB? */
  if (pcb != NULL) {
 800bd0a:	687b      	ldr	r3, [r7, #4]
 800bd0c:	2b00      	cmp	r3, #0
 800bd0e:	d007      	beq.n	800bd20 <udp_new+0x24>
    /* UDP Lite: by initializing to all zeroes, chksum_len is set to 0
     * which means checksum is generated over the whole datagram per default
     * (recommended as default by RFC 3828). */
    /* initialize PCB to all zeroes */
    memset(pcb, 0, sizeof(struct udp_pcb));
 800bd10:	2220      	movs	r2, #32
 800bd12:	2100      	movs	r1, #0
 800bd14:	6878      	ldr	r0, [r7, #4]
 800bd16:	f002 fd43 	bl	800e7a0 <memset>
    pcb->ttl = UDP_TTL;
 800bd1a:	687b      	ldr	r3, [r7, #4]
 800bd1c:	22ff      	movs	r2, #255	; 0xff
 800bd1e:	72da      	strb	r2, [r3, #11]
#if LWIP_MULTICAST_TX_OPTIONS
    udp_set_multicast_ttl(pcb, UDP_TTL);
#endif /* LWIP_MULTICAST_TX_OPTIONS */
  }
  return pcb;
 800bd20:	687b      	ldr	r3, [r7, #4]
}
 800bd22:	4618      	mov	r0, r3
 800bd24:	3708      	adds	r7, #8
 800bd26:	46bd      	mov	sp, r7
 800bd28:	bd80      	pop	{r7, pc}
	...

0800bd2c <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800bd2c:	b480      	push	{r7}
 800bd2e:	b085      	sub	sp, #20
 800bd30:	af00      	add	r7, sp, #0
 800bd32:	6078      	str	r0, [r7, #4]
 800bd34:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 800bd36:	687b      	ldr	r3, [r7, #4]
 800bd38:	2b00      	cmp	r3, #0
 800bd3a:	d01e      	beq.n	800bd7a <udp_netif_ip_addr_changed+0x4e>
 800bd3c:	687b      	ldr	r3, [r7, #4]
 800bd3e:	681b      	ldr	r3, [r3, #0]
 800bd40:	2b00      	cmp	r3, #0
 800bd42:	d01a      	beq.n	800bd7a <udp_netif_ip_addr_changed+0x4e>
 800bd44:	683b      	ldr	r3, [r7, #0]
 800bd46:	2b00      	cmp	r3, #0
 800bd48:	d017      	beq.n	800bd7a <udp_netif_ip_addr_changed+0x4e>
 800bd4a:	683b      	ldr	r3, [r7, #0]
 800bd4c:	681b      	ldr	r3, [r3, #0]
 800bd4e:	2b00      	cmp	r3, #0
 800bd50:	d013      	beq.n	800bd7a <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 800bd52:	4b0d      	ldr	r3, [pc, #52]	; (800bd88 <udp_netif_ip_addr_changed+0x5c>)
 800bd54:	681b      	ldr	r3, [r3, #0]
 800bd56:	60fb      	str	r3, [r7, #12]
 800bd58:	e00c      	b.n	800bd74 <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 800bd5a:	68fb      	ldr	r3, [r7, #12]
 800bd5c:	681a      	ldr	r2, [r3, #0]
 800bd5e:	687b      	ldr	r3, [r7, #4]
 800bd60:	681b      	ldr	r3, [r3, #0]
 800bd62:	429a      	cmp	r2, r3
 800bd64:	d103      	bne.n	800bd6e <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 800bd66:	683b      	ldr	r3, [r7, #0]
 800bd68:	681a      	ldr	r2, [r3, #0]
 800bd6a:	68fb      	ldr	r3, [r7, #12]
 800bd6c:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 800bd6e:	68fb      	ldr	r3, [r7, #12]
 800bd70:	68db      	ldr	r3, [r3, #12]
 800bd72:	60fb      	str	r3, [r7, #12]
 800bd74:	68fb      	ldr	r3, [r7, #12]
 800bd76:	2b00      	cmp	r3, #0
 800bd78:	d1ef      	bne.n	800bd5a <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 800bd7a:	bf00      	nop
 800bd7c:	3714      	adds	r7, #20
 800bd7e:	46bd      	mov	sp, r7
 800bd80:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd84:	4770      	bx	lr
 800bd86:	bf00      	nop
 800bd88:	200082dc 	.word	0x200082dc

0800bd8c <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 800bd8c:	b580      	push	{r7, lr}
 800bd8e:	b082      	sub	sp, #8
 800bd90:	af00      	add	r7, sp, #0
 800bd92:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 800bd94:	4915      	ldr	r1, [pc, #84]	; (800bdec <etharp_free_entry+0x60>)
 800bd96:	687a      	ldr	r2, [r7, #4]
 800bd98:	4613      	mov	r3, r2
 800bd9a:	005b      	lsls	r3, r3, #1
 800bd9c:	4413      	add	r3, r2
 800bd9e:	00db      	lsls	r3, r3, #3
 800bda0:	440b      	add	r3, r1
 800bda2:	681b      	ldr	r3, [r3, #0]
 800bda4:	2b00      	cmp	r3, #0
 800bda6:	d013      	beq.n	800bdd0 <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 800bda8:	4910      	ldr	r1, [pc, #64]	; (800bdec <etharp_free_entry+0x60>)
 800bdaa:	687a      	ldr	r2, [r7, #4]
 800bdac:	4613      	mov	r3, r2
 800bdae:	005b      	lsls	r3, r3, #1
 800bdb0:	4413      	add	r3, r2
 800bdb2:	00db      	lsls	r3, r3, #3
 800bdb4:	440b      	add	r3, r1
 800bdb6:	681b      	ldr	r3, [r3, #0]
 800bdb8:	4618      	mov	r0, r3
 800bdba:	f7f9 fd71 	bl	80058a0 <pbuf_free>
    arp_table[i].q = NULL;
 800bdbe:	490b      	ldr	r1, [pc, #44]	; (800bdec <etharp_free_entry+0x60>)
 800bdc0:	687a      	ldr	r2, [r7, #4]
 800bdc2:	4613      	mov	r3, r2
 800bdc4:	005b      	lsls	r3, r3, #1
 800bdc6:	4413      	add	r3, r2
 800bdc8:	00db      	lsls	r3, r3, #3
 800bdca:	440b      	add	r3, r1
 800bdcc:	2200      	movs	r2, #0
 800bdce:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 800bdd0:	4906      	ldr	r1, [pc, #24]	; (800bdec <etharp_free_entry+0x60>)
 800bdd2:	687a      	ldr	r2, [r7, #4]
 800bdd4:	4613      	mov	r3, r2
 800bdd6:	005b      	lsls	r3, r3, #1
 800bdd8:	4413      	add	r3, r2
 800bdda:	00db      	lsls	r3, r3, #3
 800bddc:	440b      	add	r3, r1
 800bdde:	3314      	adds	r3, #20
 800bde0:	2200      	movs	r2, #0
 800bde2:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 800bde4:	bf00      	nop
 800bde6:	3708      	adds	r7, #8
 800bde8:	46bd      	mov	sp, r7
 800bdea:	bd80      	pop	{r7, pc}
 800bdec:	200082e0 	.word	0x200082e0

0800bdf0 <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 800bdf0:	b580      	push	{r7, lr}
 800bdf2:	b082      	sub	sp, #8
 800bdf4:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800bdf6:	2300      	movs	r3, #0
 800bdf8:	607b      	str	r3, [r7, #4]
 800bdfa:	e096      	b.n	800bf2a <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 800bdfc:	494f      	ldr	r1, [pc, #316]	; (800bf3c <etharp_tmr+0x14c>)
 800bdfe:	687a      	ldr	r2, [r7, #4]
 800be00:	4613      	mov	r3, r2
 800be02:	005b      	lsls	r3, r3, #1
 800be04:	4413      	add	r3, r2
 800be06:	00db      	lsls	r3, r3, #3
 800be08:	440b      	add	r3, r1
 800be0a:	3314      	adds	r3, #20
 800be0c:	781b      	ldrb	r3, [r3, #0]
 800be0e:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 800be10:	78fb      	ldrb	r3, [r7, #3]
 800be12:	2b00      	cmp	r3, #0
 800be14:	f000 8086 	beq.w	800bf24 <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 800be18:	4948      	ldr	r1, [pc, #288]	; (800bf3c <etharp_tmr+0x14c>)
 800be1a:	687a      	ldr	r2, [r7, #4]
 800be1c:	4613      	mov	r3, r2
 800be1e:	005b      	lsls	r3, r3, #1
 800be20:	4413      	add	r3, r2
 800be22:	00db      	lsls	r3, r3, #3
 800be24:	440b      	add	r3, r1
 800be26:	3312      	adds	r3, #18
 800be28:	881b      	ldrh	r3, [r3, #0]
 800be2a:	3301      	adds	r3, #1
 800be2c:	b298      	uxth	r0, r3
 800be2e:	4943      	ldr	r1, [pc, #268]	; (800bf3c <etharp_tmr+0x14c>)
 800be30:	687a      	ldr	r2, [r7, #4]
 800be32:	4613      	mov	r3, r2
 800be34:	005b      	lsls	r3, r3, #1
 800be36:	4413      	add	r3, r2
 800be38:	00db      	lsls	r3, r3, #3
 800be3a:	440b      	add	r3, r1
 800be3c:	3312      	adds	r3, #18
 800be3e:	4602      	mov	r2, r0
 800be40:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 800be42:	493e      	ldr	r1, [pc, #248]	; (800bf3c <etharp_tmr+0x14c>)
 800be44:	687a      	ldr	r2, [r7, #4]
 800be46:	4613      	mov	r3, r2
 800be48:	005b      	lsls	r3, r3, #1
 800be4a:	4413      	add	r3, r2
 800be4c:	00db      	lsls	r3, r3, #3
 800be4e:	440b      	add	r3, r1
 800be50:	3312      	adds	r3, #18
 800be52:	881b      	ldrh	r3, [r3, #0]
 800be54:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 800be58:	d215      	bcs.n	800be86 <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 800be5a:	4938      	ldr	r1, [pc, #224]	; (800bf3c <etharp_tmr+0x14c>)
 800be5c:	687a      	ldr	r2, [r7, #4]
 800be5e:	4613      	mov	r3, r2
 800be60:	005b      	lsls	r3, r3, #1
 800be62:	4413      	add	r3, r2
 800be64:	00db      	lsls	r3, r3, #3
 800be66:	440b      	add	r3, r1
 800be68:	3314      	adds	r3, #20
 800be6a:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 800be6c:	2b01      	cmp	r3, #1
 800be6e:	d10e      	bne.n	800be8e <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 800be70:	4932      	ldr	r1, [pc, #200]	; (800bf3c <etharp_tmr+0x14c>)
 800be72:	687a      	ldr	r2, [r7, #4]
 800be74:	4613      	mov	r3, r2
 800be76:	005b      	lsls	r3, r3, #1
 800be78:	4413      	add	r3, r2
 800be7a:	00db      	lsls	r3, r3, #3
 800be7c:	440b      	add	r3, r1
 800be7e:	3312      	adds	r3, #18
 800be80:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 800be82:	2b04      	cmp	r3, #4
 800be84:	d903      	bls.n	800be8e <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 800be86:	6878      	ldr	r0, [r7, #4]
 800be88:	f7ff ff80 	bl	800bd8c <etharp_free_entry>
 800be8c:	e04a      	b.n	800bf24 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 800be8e:	492b      	ldr	r1, [pc, #172]	; (800bf3c <etharp_tmr+0x14c>)
 800be90:	687a      	ldr	r2, [r7, #4]
 800be92:	4613      	mov	r3, r2
 800be94:	005b      	lsls	r3, r3, #1
 800be96:	4413      	add	r3, r2
 800be98:	00db      	lsls	r3, r3, #3
 800be9a:	440b      	add	r3, r1
 800be9c:	3314      	adds	r3, #20
 800be9e:	781b      	ldrb	r3, [r3, #0]
 800bea0:	2b03      	cmp	r3, #3
 800bea2:	d10a      	bne.n	800beba <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 800bea4:	4925      	ldr	r1, [pc, #148]	; (800bf3c <etharp_tmr+0x14c>)
 800bea6:	687a      	ldr	r2, [r7, #4]
 800bea8:	4613      	mov	r3, r2
 800beaa:	005b      	lsls	r3, r3, #1
 800beac:	4413      	add	r3, r2
 800beae:	00db      	lsls	r3, r3, #3
 800beb0:	440b      	add	r3, r1
 800beb2:	3314      	adds	r3, #20
 800beb4:	2204      	movs	r2, #4
 800beb6:	701a      	strb	r2, [r3, #0]
 800beb8:	e034      	b.n	800bf24 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 800beba:	4920      	ldr	r1, [pc, #128]	; (800bf3c <etharp_tmr+0x14c>)
 800bebc:	687a      	ldr	r2, [r7, #4]
 800bebe:	4613      	mov	r3, r2
 800bec0:	005b      	lsls	r3, r3, #1
 800bec2:	4413      	add	r3, r2
 800bec4:	00db      	lsls	r3, r3, #3
 800bec6:	440b      	add	r3, r1
 800bec8:	3314      	adds	r3, #20
 800beca:	781b      	ldrb	r3, [r3, #0]
 800becc:	2b04      	cmp	r3, #4
 800bece:	d10a      	bne.n	800bee6 <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 800bed0:	491a      	ldr	r1, [pc, #104]	; (800bf3c <etharp_tmr+0x14c>)
 800bed2:	687a      	ldr	r2, [r7, #4]
 800bed4:	4613      	mov	r3, r2
 800bed6:	005b      	lsls	r3, r3, #1
 800bed8:	4413      	add	r3, r2
 800beda:	00db      	lsls	r3, r3, #3
 800bedc:	440b      	add	r3, r1
 800bede:	3314      	adds	r3, #20
 800bee0:	2202      	movs	r2, #2
 800bee2:	701a      	strb	r2, [r3, #0]
 800bee4:	e01e      	b.n	800bf24 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 800bee6:	4915      	ldr	r1, [pc, #84]	; (800bf3c <etharp_tmr+0x14c>)
 800bee8:	687a      	ldr	r2, [r7, #4]
 800beea:	4613      	mov	r3, r2
 800beec:	005b      	lsls	r3, r3, #1
 800beee:	4413      	add	r3, r2
 800bef0:	00db      	lsls	r3, r3, #3
 800bef2:	440b      	add	r3, r1
 800bef4:	3314      	adds	r3, #20
 800bef6:	781b      	ldrb	r3, [r3, #0]
 800bef8:	2b01      	cmp	r3, #1
 800befa:	d113      	bne.n	800bf24 <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 800befc:	490f      	ldr	r1, [pc, #60]	; (800bf3c <etharp_tmr+0x14c>)
 800befe:	687a      	ldr	r2, [r7, #4]
 800bf00:	4613      	mov	r3, r2
 800bf02:	005b      	lsls	r3, r3, #1
 800bf04:	4413      	add	r3, r2
 800bf06:	00db      	lsls	r3, r3, #3
 800bf08:	440b      	add	r3, r1
 800bf0a:	3308      	adds	r3, #8
 800bf0c:	6818      	ldr	r0, [r3, #0]
 800bf0e:	687a      	ldr	r2, [r7, #4]
 800bf10:	4613      	mov	r3, r2
 800bf12:	005b      	lsls	r3, r3, #1
 800bf14:	4413      	add	r3, r2
 800bf16:	00db      	lsls	r3, r3, #3
 800bf18:	4a08      	ldr	r2, [pc, #32]	; (800bf3c <etharp_tmr+0x14c>)
 800bf1a:	4413      	add	r3, r2
 800bf1c:	3304      	adds	r3, #4
 800bf1e:	4619      	mov	r1, r3
 800bf20:	f000 fe6e 	bl	800cc00 <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800bf24:	687b      	ldr	r3, [r7, #4]
 800bf26:	3301      	adds	r3, #1
 800bf28:	607b      	str	r3, [r7, #4]
 800bf2a:	687b      	ldr	r3, [r7, #4]
 800bf2c:	2b09      	cmp	r3, #9
 800bf2e:	f77f af65 	ble.w	800bdfc <etharp_tmr+0xc>
      }
    }
  }
}
 800bf32:	bf00      	nop
 800bf34:	bf00      	nop
 800bf36:	3708      	adds	r7, #8
 800bf38:	46bd      	mov	sp, r7
 800bf3a:	bd80      	pop	{r7, pc}
 800bf3c:	200082e0 	.word	0x200082e0

0800bf40 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 800bf40:	b580      	push	{r7, lr}
 800bf42:	b08a      	sub	sp, #40	; 0x28
 800bf44:	af00      	add	r7, sp, #0
 800bf46:	60f8      	str	r0, [r7, #12]
 800bf48:	460b      	mov	r3, r1
 800bf4a:	607a      	str	r2, [r7, #4]
 800bf4c:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 800bf4e:	230a      	movs	r3, #10
 800bf50:	84fb      	strh	r3, [r7, #38]	; 0x26
 800bf52:	230a      	movs	r3, #10
 800bf54:	84bb      	strh	r3, [r7, #36]	; 0x24
  s16_t empty = ARP_TABLE_SIZE;
 800bf56:	230a      	movs	r3, #10
 800bf58:	847b      	strh	r3, [r7, #34]	; 0x22
  s16_t i = 0;
 800bf5a:	2300      	movs	r3, #0
 800bf5c:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 800bf5e:	230a      	movs	r3, #10
 800bf60:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 800bf62:	2300      	movs	r3, #0
 800bf64:	83bb      	strh	r3, [r7, #28]
 800bf66:	2300      	movs	r3, #0
 800bf68:	837b      	strh	r3, [r7, #26]
 800bf6a:	2300      	movs	r3, #0
 800bf6c:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800bf6e:	2300      	movs	r3, #0
 800bf70:	843b      	strh	r3, [r7, #32]
 800bf72:	e0ae      	b.n	800c0d2 <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 800bf74:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800bf78:	49a6      	ldr	r1, [pc, #664]	; (800c214 <etharp_find_entry+0x2d4>)
 800bf7a:	4613      	mov	r3, r2
 800bf7c:	005b      	lsls	r3, r3, #1
 800bf7e:	4413      	add	r3, r2
 800bf80:	00db      	lsls	r3, r3, #3
 800bf82:	440b      	add	r3, r1
 800bf84:	3314      	adds	r3, #20
 800bf86:	781b      	ldrb	r3, [r3, #0]
 800bf88:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 800bf8a:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 800bf8e:	2b0a      	cmp	r3, #10
 800bf90:	d105      	bne.n	800bf9e <etharp_find_entry+0x5e>
 800bf92:	7dfb      	ldrb	r3, [r7, #23]
 800bf94:	2b00      	cmp	r3, #0
 800bf96:	d102      	bne.n	800bf9e <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 800bf98:	8c3b      	ldrh	r3, [r7, #32]
 800bf9a:	847b      	strh	r3, [r7, #34]	; 0x22
 800bf9c:	e095      	b.n	800c0ca <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 800bf9e:	7dfb      	ldrb	r3, [r7, #23]
 800bfa0:	2b00      	cmp	r3, #0
 800bfa2:	f000 8092 	beq.w	800c0ca <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 800bfa6:	7dfb      	ldrb	r3, [r7, #23]
 800bfa8:	2b01      	cmp	r3, #1
 800bfaa:	d009      	beq.n	800bfc0 <etharp_find_entry+0x80>
 800bfac:	7dfb      	ldrb	r3, [r7, #23]
 800bfae:	2b01      	cmp	r3, #1
 800bfb0:	d806      	bhi.n	800bfc0 <etharp_find_entry+0x80>
 800bfb2:	4b99      	ldr	r3, [pc, #612]	; (800c218 <etharp_find_entry+0x2d8>)
 800bfb4:	f240 1223 	movw	r2, #291	; 0x123
 800bfb8:	4998      	ldr	r1, [pc, #608]	; (800c21c <etharp_find_entry+0x2dc>)
 800bfba:	4899      	ldr	r0, [pc, #612]	; (800c220 <etharp_find_entry+0x2e0>)
 800bfbc:	f002 fa9a 	bl	800e4f4 <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 800bfc0:	68fb      	ldr	r3, [r7, #12]
 800bfc2:	2b00      	cmp	r3, #0
 800bfc4:	d020      	beq.n	800c008 <etharp_find_entry+0xc8>
 800bfc6:	68fb      	ldr	r3, [r7, #12]
 800bfc8:	6819      	ldr	r1, [r3, #0]
 800bfca:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800bfce:	4891      	ldr	r0, [pc, #580]	; (800c214 <etharp_find_entry+0x2d4>)
 800bfd0:	4613      	mov	r3, r2
 800bfd2:	005b      	lsls	r3, r3, #1
 800bfd4:	4413      	add	r3, r2
 800bfd6:	00db      	lsls	r3, r3, #3
 800bfd8:	4403      	add	r3, r0
 800bfda:	3304      	adds	r3, #4
 800bfdc:	681b      	ldr	r3, [r3, #0]
 800bfde:	4299      	cmp	r1, r3
 800bfe0:	d112      	bne.n	800c008 <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 800bfe2:	687b      	ldr	r3, [r7, #4]
 800bfe4:	2b00      	cmp	r3, #0
 800bfe6:	d00c      	beq.n	800c002 <etharp_find_entry+0xc2>
 800bfe8:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800bfec:	4989      	ldr	r1, [pc, #548]	; (800c214 <etharp_find_entry+0x2d4>)
 800bfee:	4613      	mov	r3, r2
 800bff0:	005b      	lsls	r3, r3, #1
 800bff2:	4413      	add	r3, r2
 800bff4:	00db      	lsls	r3, r3, #3
 800bff6:	440b      	add	r3, r1
 800bff8:	3308      	adds	r3, #8
 800bffa:	681b      	ldr	r3, [r3, #0]
 800bffc:	687a      	ldr	r2, [r7, #4]
 800bffe:	429a      	cmp	r2, r3
 800c000:	d102      	bne.n	800c008 <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 800c002:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800c006:	e100      	b.n	800c20a <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 800c008:	7dfb      	ldrb	r3, [r7, #23]
 800c00a:	2b01      	cmp	r3, #1
 800c00c:	d140      	bne.n	800c090 <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 800c00e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800c012:	4980      	ldr	r1, [pc, #512]	; (800c214 <etharp_find_entry+0x2d4>)
 800c014:	4613      	mov	r3, r2
 800c016:	005b      	lsls	r3, r3, #1
 800c018:	4413      	add	r3, r2
 800c01a:	00db      	lsls	r3, r3, #3
 800c01c:	440b      	add	r3, r1
 800c01e:	681b      	ldr	r3, [r3, #0]
 800c020:	2b00      	cmp	r3, #0
 800c022:	d01a      	beq.n	800c05a <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 800c024:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800c028:	497a      	ldr	r1, [pc, #488]	; (800c214 <etharp_find_entry+0x2d4>)
 800c02a:	4613      	mov	r3, r2
 800c02c:	005b      	lsls	r3, r3, #1
 800c02e:	4413      	add	r3, r2
 800c030:	00db      	lsls	r3, r3, #3
 800c032:	440b      	add	r3, r1
 800c034:	3312      	adds	r3, #18
 800c036:	881b      	ldrh	r3, [r3, #0]
 800c038:	8bba      	ldrh	r2, [r7, #28]
 800c03a:	429a      	cmp	r2, r3
 800c03c:	d845      	bhi.n	800c0ca <etharp_find_entry+0x18a>
            old_queue = i;
 800c03e:	8c3b      	ldrh	r3, [r7, #32]
 800c040:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 800c042:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800c046:	4973      	ldr	r1, [pc, #460]	; (800c214 <etharp_find_entry+0x2d4>)
 800c048:	4613      	mov	r3, r2
 800c04a:	005b      	lsls	r3, r3, #1
 800c04c:	4413      	add	r3, r2
 800c04e:	00db      	lsls	r3, r3, #3
 800c050:	440b      	add	r3, r1
 800c052:	3312      	adds	r3, #18
 800c054:	881b      	ldrh	r3, [r3, #0]
 800c056:	83bb      	strh	r3, [r7, #28]
 800c058:	e037      	b.n	800c0ca <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 800c05a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800c05e:	496d      	ldr	r1, [pc, #436]	; (800c214 <etharp_find_entry+0x2d4>)
 800c060:	4613      	mov	r3, r2
 800c062:	005b      	lsls	r3, r3, #1
 800c064:	4413      	add	r3, r2
 800c066:	00db      	lsls	r3, r3, #3
 800c068:	440b      	add	r3, r1
 800c06a:	3312      	adds	r3, #18
 800c06c:	881b      	ldrh	r3, [r3, #0]
 800c06e:	8b7a      	ldrh	r2, [r7, #26]
 800c070:	429a      	cmp	r2, r3
 800c072:	d82a      	bhi.n	800c0ca <etharp_find_entry+0x18a>
            old_pending = i;
 800c074:	8c3b      	ldrh	r3, [r7, #32]
 800c076:	84fb      	strh	r3, [r7, #38]	; 0x26
            age_pending = arp_table[i].ctime;
 800c078:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800c07c:	4965      	ldr	r1, [pc, #404]	; (800c214 <etharp_find_entry+0x2d4>)
 800c07e:	4613      	mov	r3, r2
 800c080:	005b      	lsls	r3, r3, #1
 800c082:	4413      	add	r3, r2
 800c084:	00db      	lsls	r3, r3, #3
 800c086:	440b      	add	r3, r1
 800c088:	3312      	adds	r3, #18
 800c08a:	881b      	ldrh	r3, [r3, #0]
 800c08c:	837b      	strh	r3, [r7, #26]
 800c08e:	e01c      	b.n	800c0ca <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 800c090:	7dfb      	ldrb	r3, [r7, #23]
 800c092:	2b01      	cmp	r3, #1
 800c094:	d919      	bls.n	800c0ca <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 800c096:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800c09a:	495e      	ldr	r1, [pc, #376]	; (800c214 <etharp_find_entry+0x2d4>)
 800c09c:	4613      	mov	r3, r2
 800c09e:	005b      	lsls	r3, r3, #1
 800c0a0:	4413      	add	r3, r2
 800c0a2:	00db      	lsls	r3, r3, #3
 800c0a4:	440b      	add	r3, r1
 800c0a6:	3312      	adds	r3, #18
 800c0a8:	881b      	ldrh	r3, [r3, #0]
 800c0aa:	8b3a      	ldrh	r2, [r7, #24]
 800c0ac:	429a      	cmp	r2, r3
 800c0ae:	d80c      	bhi.n	800c0ca <etharp_find_entry+0x18a>
            old_stable = i;
 800c0b0:	8c3b      	ldrh	r3, [r7, #32]
 800c0b2:	84bb      	strh	r3, [r7, #36]	; 0x24
            age_stable = arp_table[i].ctime;
 800c0b4:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800c0b8:	4956      	ldr	r1, [pc, #344]	; (800c214 <etharp_find_entry+0x2d4>)
 800c0ba:	4613      	mov	r3, r2
 800c0bc:	005b      	lsls	r3, r3, #1
 800c0be:	4413      	add	r3, r2
 800c0c0:	00db      	lsls	r3, r3, #3
 800c0c2:	440b      	add	r3, r1
 800c0c4:	3312      	adds	r3, #18
 800c0c6:	881b      	ldrh	r3, [r3, #0]
 800c0c8:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800c0ca:	8c3b      	ldrh	r3, [r7, #32]
 800c0cc:	3301      	adds	r3, #1
 800c0ce:	b29b      	uxth	r3, r3
 800c0d0:	843b      	strh	r3, [r7, #32]
 800c0d2:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800c0d6:	2b09      	cmp	r3, #9
 800c0d8:	f77f af4c 	ble.w	800bf74 <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 800c0dc:	7afb      	ldrb	r3, [r7, #11]
 800c0de:	f003 0302 	and.w	r3, r3, #2
 800c0e2:	2b00      	cmp	r3, #0
 800c0e4:	d108      	bne.n	800c0f8 <etharp_find_entry+0x1b8>
 800c0e6:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 800c0ea:	2b0a      	cmp	r3, #10
 800c0ec:	d107      	bne.n	800c0fe <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 800c0ee:	7afb      	ldrb	r3, [r7, #11]
 800c0f0:	f003 0301 	and.w	r3, r3, #1
 800c0f4:	2b00      	cmp	r3, #0
 800c0f6:	d102      	bne.n	800c0fe <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 800c0f8:	f04f 33ff 	mov.w	r3, #4294967295
 800c0fc:	e085      	b.n	800c20a <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 800c0fe:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 800c102:	2b09      	cmp	r3, #9
 800c104:	dc02      	bgt.n	800c10c <etharp_find_entry+0x1cc>
    i = empty;
 800c106:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800c108:	843b      	strh	r3, [r7, #32]
 800c10a:	e039      	b.n	800c180 <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 800c10c:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 800c110:	2b09      	cmp	r3, #9
 800c112:	dc14      	bgt.n	800c13e <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 800c114:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c116:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 800c118:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800c11c:	493d      	ldr	r1, [pc, #244]	; (800c214 <etharp_find_entry+0x2d4>)
 800c11e:	4613      	mov	r3, r2
 800c120:	005b      	lsls	r3, r3, #1
 800c122:	4413      	add	r3, r2
 800c124:	00db      	lsls	r3, r3, #3
 800c126:	440b      	add	r3, r1
 800c128:	681b      	ldr	r3, [r3, #0]
 800c12a:	2b00      	cmp	r3, #0
 800c12c:	d018      	beq.n	800c160 <etharp_find_entry+0x220>
 800c12e:	4b3a      	ldr	r3, [pc, #232]	; (800c218 <etharp_find_entry+0x2d8>)
 800c130:	f240 126d 	movw	r2, #365	; 0x16d
 800c134:	493b      	ldr	r1, [pc, #236]	; (800c224 <etharp_find_entry+0x2e4>)
 800c136:	483a      	ldr	r0, [pc, #232]	; (800c220 <etharp_find_entry+0x2e0>)
 800c138:	f002 f9dc 	bl	800e4f4 <iprintf>
 800c13c:	e010      	b.n	800c160 <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 800c13e:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 800c142:	2b09      	cmp	r3, #9
 800c144:	dc02      	bgt.n	800c14c <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 800c146:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800c148:	843b      	strh	r3, [r7, #32]
 800c14a:	e009      	b.n	800c160 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 800c14c:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800c150:	2b09      	cmp	r3, #9
 800c152:	dc02      	bgt.n	800c15a <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 800c154:	8bfb      	ldrh	r3, [r7, #30]
 800c156:	843b      	strh	r3, [r7, #32]
 800c158:	e002      	b.n	800c160 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 800c15a:	f04f 33ff 	mov.w	r3, #4294967295
 800c15e:	e054      	b.n	800c20a <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 800c160:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800c164:	2b09      	cmp	r3, #9
 800c166:	dd06      	ble.n	800c176 <etharp_find_entry+0x236>
 800c168:	4b2b      	ldr	r3, [pc, #172]	; (800c218 <etharp_find_entry+0x2d8>)
 800c16a:	f240 127f 	movw	r2, #383	; 0x17f
 800c16e:	492e      	ldr	r1, [pc, #184]	; (800c228 <etharp_find_entry+0x2e8>)
 800c170:	482b      	ldr	r0, [pc, #172]	; (800c220 <etharp_find_entry+0x2e0>)
 800c172:	f002 f9bf 	bl	800e4f4 <iprintf>
    etharp_free_entry(i);
 800c176:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800c17a:	4618      	mov	r0, r3
 800c17c:	f7ff fe06 	bl	800bd8c <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 800c180:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800c184:	2b09      	cmp	r3, #9
 800c186:	dd06      	ble.n	800c196 <etharp_find_entry+0x256>
 800c188:	4b23      	ldr	r3, [pc, #140]	; (800c218 <etharp_find_entry+0x2d8>)
 800c18a:	f240 1283 	movw	r2, #387	; 0x183
 800c18e:	4926      	ldr	r1, [pc, #152]	; (800c228 <etharp_find_entry+0x2e8>)
 800c190:	4823      	ldr	r0, [pc, #140]	; (800c220 <etharp_find_entry+0x2e0>)
 800c192:	f002 f9af 	bl	800e4f4 <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 800c196:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800c19a:	491e      	ldr	r1, [pc, #120]	; (800c214 <etharp_find_entry+0x2d4>)
 800c19c:	4613      	mov	r3, r2
 800c19e:	005b      	lsls	r3, r3, #1
 800c1a0:	4413      	add	r3, r2
 800c1a2:	00db      	lsls	r3, r3, #3
 800c1a4:	440b      	add	r3, r1
 800c1a6:	3314      	adds	r3, #20
 800c1a8:	781b      	ldrb	r3, [r3, #0]
 800c1aa:	2b00      	cmp	r3, #0
 800c1ac:	d006      	beq.n	800c1bc <etharp_find_entry+0x27c>
 800c1ae:	4b1a      	ldr	r3, [pc, #104]	; (800c218 <etharp_find_entry+0x2d8>)
 800c1b0:	f44f 72c2 	mov.w	r2, #388	; 0x184
 800c1b4:	491d      	ldr	r1, [pc, #116]	; (800c22c <etharp_find_entry+0x2ec>)
 800c1b6:	481a      	ldr	r0, [pc, #104]	; (800c220 <etharp_find_entry+0x2e0>)
 800c1b8:	f002 f99c 	bl	800e4f4 <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 800c1bc:	68fb      	ldr	r3, [r7, #12]
 800c1be:	2b00      	cmp	r3, #0
 800c1c0:	d00b      	beq.n	800c1da <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 800c1c2:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800c1c6:	68fb      	ldr	r3, [r7, #12]
 800c1c8:	6819      	ldr	r1, [r3, #0]
 800c1ca:	4812      	ldr	r0, [pc, #72]	; (800c214 <etharp_find_entry+0x2d4>)
 800c1cc:	4613      	mov	r3, r2
 800c1ce:	005b      	lsls	r3, r3, #1
 800c1d0:	4413      	add	r3, r2
 800c1d2:	00db      	lsls	r3, r3, #3
 800c1d4:	4403      	add	r3, r0
 800c1d6:	3304      	adds	r3, #4
 800c1d8:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 800c1da:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800c1de:	490d      	ldr	r1, [pc, #52]	; (800c214 <etharp_find_entry+0x2d4>)
 800c1e0:	4613      	mov	r3, r2
 800c1e2:	005b      	lsls	r3, r3, #1
 800c1e4:	4413      	add	r3, r2
 800c1e6:	00db      	lsls	r3, r3, #3
 800c1e8:	440b      	add	r3, r1
 800c1ea:	3312      	adds	r3, #18
 800c1ec:	2200      	movs	r2, #0
 800c1ee:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 800c1f0:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800c1f4:	4907      	ldr	r1, [pc, #28]	; (800c214 <etharp_find_entry+0x2d4>)
 800c1f6:	4613      	mov	r3, r2
 800c1f8:	005b      	lsls	r3, r3, #1
 800c1fa:	4413      	add	r3, r2
 800c1fc:	00db      	lsls	r3, r3, #3
 800c1fe:	440b      	add	r3, r1
 800c200:	3308      	adds	r3, #8
 800c202:	687a      	ldr	r2, [r7, #4]
 800c204:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 800c206:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 800c20a:	4618      	mov	r0, r3
 800c20c:	3728      	adds	r7, #40	; 0x28
 800c20e:	46bd      	mov	sp, r7
 800c210:	bd80      	pop	{r7, pc}
 800c212:	bf00      	nop
 800c214:	200082e0 	.word	0x200082e0
 800c218:	08011704 	.word	0x08011704
 800c21c:	0801173c 	.word	0x0801173c
 800c220:	0801177c 	.word	0x0801177c
 800c224:	080117a4 	.word	0x080117a4
 800c228:	080117bc 	.word	0x080117bc
 800c22c:	080117d0 	.word	0x080117d0

0800c230 <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 800c230:	b580      	push	{r7, lr}
 800c232:	b088      	sub	sp, #32
 800c234:	af02      	add	r7, sp, #8
 800c236:	60f8      	str	r0, [r7, #12]
 800c238:	60b9      	str	r1, [r7, #8]
 800c23a:	607a      	str	r2, [r7, #4]
 800c23c:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 800c23e:	68fb      	ldr	r3, [r7, #12]
 800c240:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800c244:	2b06      	cmp	r3, #6
 800c246:	d006      	beq.n	800c256 <etharp_update_arp_entry+0x26>
 800c248:	4b48      	ldr	r3, [pc, #288]	; (800c36c <etharp_update_arp_entry+0x13c>)
 800c24a:	f240 12a9 	movw	r2, #425	; 0x1a9
 800c24e:	4948      	ldr	r1, [pc, #288]	; (800c370 <etharp_update_arp_entry+0x140>)
 800c250:	4848      	ldr	r0, [pc, #288]	; (800c374 <etharp_update_arp_entry+0x144>)
 800c252:	f002 f94f 	bl	800e4f4 <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 800c256:	68bb      	ldr	r3, [r7, #8]
 800c258:	2b00      	cmp	r3, #0
 800c25a:	d012      	beq.n	800c282 <etharp_update_arp_entry+0x52>
 800c25c:	68bb      	ldr	r3, [r7, #8]
 800c25e:	681b      	ldr	r3, [r3, #0]
 800c260:	2b00      	cmp	r3, #0
 800c262:	d00e      	beq.n	800c282 <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 800c264:	68bb      	ldr	r3, [r7, #8]
 800c266:	681b      	ldr	r3, [r3, #0]
 800c268:	68f9      	ldr	r1, [r7, #12]
 800c26a:	4618      	mov	r0, r3
 800c26c:	f001 f8fe 	bl	800d46c <ip4_addr_isbroadcast_u32>
 800c270:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 800c272:	2b00      	cmp	r3, #0
 800c274:	d105      	bne.n	800c282 <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 800c276:	68bb      	ldr	r3, [r7, #8]
 800c278:	681b      	ldr	r3, [r3, #0]
 800c27a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 800c27e:	2be0      	cmp	r3, #224	; 0xe0
 800c280:	d102      	bne.n	800c288 <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 800c282:	f06f 030f 	mvn.w	r3, #15
 800c286:	e06c      	b.n	800c362 <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 800c288:	78fb      	ldrb	r3, [r7, #3]
 800c28a:	68fa      	ldr	r2, [r7, #12]
 800c28c:	4619      	mov	r1, r3
 800c28e:	68b8      	ldr	r0, [r7, #8]
 800c290:	f7ff fe56 	bl	800bf40 <etharp_find_entry>
 800c294:	4603      	mov	r3, r0
 800c296:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 800c298:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800c29c:	2b00      	cmp	r3, #0
 800c29e:	da02      	bge.n	800c2a6 <etharp_update_arp_entry+0x76>
    return (err_t)i;
 800c2a0:	8afb      	ldrh	r3, [r7, #22]
 800c2a2:	b25b      	sxtb	r3, r3
 800c2a4:	e05d      	b.n	800c362 <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 800c2a6:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800c2aa:	4933      	ldr	r1, [pc, #204]	; (800c378 <etharp_update_arp_entry+0x148>)
 800c2ac:	4613      	mov	r3, r2
 800c2ae:	005b      	lsls	r3, r3, #1
 800c2b0:	4413      	add	r3, r2
 800c2b2:	00db      	lsls	r3, r3, #3
 800c2b4:	440b      	add	r3, r1
 800c2b6:	3314      	adds	r3, #20
 800c2b8:	2202      	movs	r2, #2
 800c2ba:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 800c2bc:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800c2c0:	492d      	ldr	r1, [pc, #180]	; (800c378 <etharp_update_arp_entry+0x148>)
 800c2c2:	4613      	mov	r3, r2
 800c2c4:	005b      	lsls	r3, r3, #1
 800c2c6:	4413      	add	r3, r2
 800c2c8:	00db      	lsls	r3, r3, #3
 800c2ca:	440b      	add	r3, r1
 800c2cc:	3308      	adds	r3, #8
 800c2ce:	68fa      	ldr	r2, [r7, #12]
 800c2d0:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 800c2d2:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800c2d6:	4613      	mov	r3, r2
 800c2d8:	005b      	lsls	r3, r3, #1
 800c2da:	4413      	add	r3, r2
 800c2dc:	00db      	lsls	r3, r3, #3
 800c2de:	3308      	adds	r3, #8
 800c2e0:	4a25      	ldr	r2, [pc, #148]	; (800c378 <etharp_update_arp_entry+0x148>)
 800c2e2:	4413      	add	r3, r2
 800c2e4:	3304      	adds	r3, #4
 800c2e6:	2206      	movs	r2, #6
 800c2e8:	6879      	ldr	r1, [r7, #4]
 800c2ea:	4618      	mov	r0, r3
 800c2ec:	f002 facc 	bl	800e888 <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 800c2f0:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800c2f4:	4920      	ldr	r1, [pc, #128]	; (800c378 <etharp_update_arp_entry+0x148>)
 800c2f6:	4613      	mov	r3, r2
 800c2f8:	005b      	lsls	r3, r3, #1
 800c2fa:	4413      	add	r3, r2
 800c2fc:	00db      	lsls	r3, r3, #3
 800c2fe:	440b      	add	r3, r1
 800c300:	3312      	adds	r3, #18
 800c302:	2200      	movs	r2, #0
 800c304:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 800c306:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800c30a:	491b      	ldr	r1, [pc, #108]	; (800c378 <etharp_update_arp_entry+0x148>)
 800c30c:	4613      	mov	r3, r2
 800c30e:	005b      	lsls	r3, r3, #1
 800c310:	4413      	add	r3, r2
 800c312:	00db      	lsls	r3, r3, #3
 800c314:	440b      	add	r3, r1
 800c316:	681b      	ldr	r3, [r3, #0]
 800c318:	2b00      	cmp	r3, #0
 800c31a:	d021      	beq.n	800c360 <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 800c31c:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800c320:	4915      	ldr	r1, [pc, #84]	; (800c378 <etharp_update_arp_entry+0x148>)
 800c322:	4613      	mov	r3, r2
 800c324:	005b      	lsls	r3, r3, #1
 800c326:	4413      	add	r3, r2
 800c328:	00db      	lsls	r3, r3, #3
 800c32a:	440b      	add	r3, r1
 800c32c:	681b      	ldr	r3, [r3, #0]
 800c32e:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 800c330:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800c334:	4910      	ldr	r1, [pc, #64]	; (800c378 <etharp_update_arp_entry+0x148>)
 800c336:	4613      	mov	r3, r2
 800c338:	005b      	lsls	r3, r3, #1
 800c33a:	4413      	add	r3, r2
 800c33c:	00db      	lsls	r3, r3, #3
 800c33e:	440b      	add	r3, r1
 800c340:	2200      	movs	r2, #0
 800c342:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 800c344:	68fb      	ldr	r3, [r7, #12]
 800c346:	f103 0226 	add.w	r2, r3, #38	; 0x26
 800c34a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800c34e:	9300      	str	r3, [sp, #0]
 800c350:	687b      	ldr	r3, [r7, #4]
 800c352:	6939      	ldr	r1, [r7, #16]
 800c354:	68f8      	ldr	r0, [r7, #12]
 800c356:	f001 ff97 	bl	800e288 <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 800c35a:	6938      	ldr	r0, [r7, #16]
 800c35c:	f7f9 faa0 	bl	80058a0 <pbuf_free>
  }
  return ERR_OK;
 800c360:	2300      	movs	r3, #0
}
 800c362:	4618      	mov	r0, r3
 800c364:	3718      	adds	r7, #24
 800c366:	46bd      	mov	sp, r7
 800c368:	bd80      	pop	{r7, pc}
 800c36a:	bf00      	nop
 800c36c:	08011704 	.word	0x08011704
 800c370:	080117fc 	.word	0x080117fc
 800c374:	0801177c 	.word	0x0801177c
 800c378:	200082e0 	.word	0x200082e0

0800c37c <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 800c37c:	b580      	push	{r7, lr}
 800c37e:	b084      	sub	sp, #16
 800c380:	af00      	add	r7, sp, #0
 800c382:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800c384:	2300      	movs	r3, #0
 800c386:	60fb      	str	r3, [r7, #12]
 800c388:	e01e      	b.n	800c3c8 <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 800c38a:	4913      	ldr	r1, [pc, #76]	; (800c3d8 <etharp_cleanup_netif+0x5c>)
 800c38c:	68fa      	ldr	r2, [r7, #12]
 800c38e:	4613      	mov	r3, r2
 800c390:	005b      	lsls	r3, r3, #1
 800c392:	4413      	add	r3, r2
 800c394:	00db      	lsls	r3, r3, #3
 800c396:	440b      	add	r3, r1
 800c398:	3314      	adds	r3, #20
 800c39a:	781b      	ldrb	r3, [r3, #0]
 800c39c:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 800c39e:	7afb      	ldrb	r3, [r7, #11]
 800c3a0:	2b00      	cmp	r3, #0
 800c3a2:	d00e      	beq.n	800c3c2 <etharp_cleanup_netif+0x46>
 800c3a4:	490c      	ldr	r1, [pc, #48]	; (800c3d8 <etharp_cleanup_netif+0x5c>)
 800c3a6:	68fa      	ldr	r2, [r7, #12]
 800c3a8:	4613      	mov	r3, r2
 800c3aa:	005b      	lsls	r3, r3, #1
 800c3ac:	4413      	add	r3, r2
 800c3ae:	00db      	lsls	r3, r3, #3
 800c3b0:	440b      	add	r3, r1
 800c3b2:	3308      	adds	r3, #8
 800c3b4:	681b      	ldr	r3, [r3, #0]
 800c3b6:	687a      	ldr	r2, [r7, #4]
 800c3b8:	429a      	cmp	r2, r3
 800c3ba:	d102      	bne.n	800c3c2 <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 800c3bc:	68f8      	ldr	r0, [r7, #12]
 800c3be:	f7ff fce5 	bl	800bd8c <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800c3c2:	68fb      	ldr	r3, [r7, #12]
 800c3c4:	3301      	adds	r3, #1
 800c3c6:	60fb      	str	r3, [r7, #12]
 800c3c8:	68fb      	ldr	r3, [r7, #12]
 800c3ca:	2b09      	cmp	r3, #9
 800c3cc:	dddd      	ble.n	800c38a <etharp_cleanup_netif+0xe>
    }
  }
}
 800c3ce:	bf00      	nop
 800c3d0:	bf00      	nop
 800c3d2:	3710      	adds	r7, #16
 800c3d4:	46bd      	mov	sp, r7
 800c3d6:	bd80      	pop	{r7, pc}
 800c3d8:	200082e0 	.word	0x200082e0

0800c3dc <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 800c3dc:	b5b0      	push	{r4, r5, r7, lr}
 800c3de:	b08a      	sub	sp, #40	; 0x28
 800c3e0:	af04      	add	r7, sp, #16
 800c3e2:	6078      	str	r0, [r7, #4]
 800c3e4:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 800c3e6:	683b      	ldr	r3, [r7, #0]
 800c3e8:	2b00      	cmp	r3, #0
 800c3ea:	d107      	bne.n	800c3fc <etharp_input+0x20>
 800c3ec:	4b3d      	ldr	r3, [pc, #244]	; (800c4e4 <etharp_input+0x108>)
 800c3ee:	f240 228a 	movw	r2, #650	; 0x28a
 800c3f2:	493d      	ldr	r1, [pc, #244]	; (800c4e8 <etharp_input+0x10c>)
 800c3f4:	483d      	ldr	r0, [pc, #244]	; (800c4ec <etharp_input+0x110>)
 800c3f6:	f002 f87d 	bl	800e4f4 <iprintf>
 800c3fa:	e06f      	b.n	800c4dc <etharp_input+0x100>

  hdr = (struct etharp_hdr *)p->payload;
 800c3fc:	687b      	ldr	r3, [r7, #4]
 800c3fe:	685b      	ldr	r3, [r3, #4]
 800c400:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 800c402:	693b      	ldr	r3, [r7, #16]
 800c404:	881b      	ldrh	r3, [r3, #0]
 800c406:	b29b      	uxth	r3, r3
 800c408:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c40c:	d10c      	bne.n	800c428 <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 800c40e:	693b      	ldr	r3, [r7, #16]
 800c410:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 800c412:	2b06      	cmp	r3, #6
 800c414:	d108      	bne.n	800c428 <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 800c416:	693b      	ldr	r3, [r7, #16]
 800c418:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 800c41a:	2b04      	cmp	r3, #4
 800c41c:	d104      	bne.n	800c428 <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 800c41e:	693b      	ldr	r3, [r7, #16]
 800c420:	885b      	ldrh	r3, [r3, #2]
 800c422:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 800c424:	2b08      	cmp	r3, #8
 800c426:	d003      	beq.n	800c430 <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 800c428:	6878      	ldr	r0, [r7, #4]
 800c42a:	f7f9 fa39 	bl	80058a0 <pbuf_free>
    return;
 800c42e:	e055      	b.n	800c4dc <etharp_input+0x100>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 800c430:	693b      	ldr	r3, [r7, #16]
 800c432:	330e      	adds	r3, #14
 800c434:	681b      	ldr	r3, [r3, #0]
 800c436:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 800c438:	693b      	ldr	r3, [r7, #16]
 800c43a:	3318      	adds	r3, #24
 800c43c:	681b      	ldr	r3, [r3, #0]
 800c43e:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800c440:	683b      	ldr	r3, [r7, #0]
 800c442:	3304      	adds	r3, #4
 800c444:	681b      	ldr	r3, [r3, #0]
 800c446:	2b00      	cmp	r3, #0
 800c448:	d102      	bne.n	800c450 <etharp_input+0x74>
    for_us = 0;
 800c44a:	2300      	movs	r3, #0
 800c44c:	75fb      	strb	r3, [r7, #23]
 800c44e:	e009      	b.n	800c464 <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 800c450:	68ba      	ldr	r2, [r7, #8]
 800c452:	683b      	ldr	r3, [r7, #0]
 800c454:	3304      	adds	r3, #4
 800c456:	681b      	ldr	r3, [r3, #0]
 800c458:	429a      	cmp	r2, r3
 800c45a:	bf0c      	ite	eq
 800c45c:	2301      	moveq	r3, #1
 800c45e:	2300      	movne	r3, #0
 800c460:	b2db      	uxtb	r3, r3
 800c462:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 800c464:	693b      	ldr	r3, [r7, #16]
 800c466:	f103 0208 	add.w	r2, r3, #8
 800c46a:	7dfb      	ldrb	r3, [r7, #23]
 800c46c:	2b00      	cmp	r3, #0
 800c46e:	d001      	beq.n	800c474 <etharp_input+0x98>
 800c470:	2301      	movs	r3, #1
 800c472:	e000      	b.n	800c476 <etharp_input+0x9a>
 800c474:	2302      	movs	r3, #2
 800c476:	f107 010c 	add.w	r1, r7, #12
 800c47a:	6838      	ldr	r0, [r7, #0]
 800c47c:	f7ff fed8 	bl	800c230 <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 800c480:	693b      	ldr	r3, [r7, #16]
 800c482:	88db      	ldrh	r3, [r3, #6]
 800c484:	b29b      	uxth	r3, r3
 800c486:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c48a:	d003      	beq.n	800c494 <etharp_input+0xb8>
 800c48c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c490:	d01e      	beq.n	800c4d0 <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 800c492:	e020      	b.n	800c4d6 <etharp_input+0xfa>
      if (for_us) {
 800c494:	7dfb      	ldrb	r3, [r7, #23]
 800c496:	2b00      	cmp	r3, #0
 800c498:	d01c      	beq.n	800c4d4 <etharp_input+0xf8>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 800c49a:	683b      	ldr	r3, [r7, #0]
 800c49c:	f103 0026 	add.w	r0, r3, #38	; 0x26
 800c4a0:	693b      	ldr	r3, [r7, #16]
 800c4a2:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 800c4a6:	683b      	ldr	r3, [r7, #0]
 800c4a8:	f103 0526 	add.w	r5, r3, #38	; 0x26
 800c4ac:	683b      	ldr	r3, [r7, #0]
 800c4ae:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 800c4b0:	693a      	ldr	r2, [r7, #16]
 800c4b2:	3208      	adds	r2, #8
        etharp_raw(netif,
 800c4b4:	2102      	movs	r1, #2
 800c4b6:	9103      	str	r1, [sp, #12]
 800c4b8:	f107 010c 	add.w	r1, r7, #12
 800c4bc:	9102      	str	r1, [sp, #8]
 800c4be:	9201      	str	r2, [sp, #4]
 800c4c0:	9300      	str	r3, [sp, #0]
 800c4c2:	462b      	mov	r3, r5
 800c4c4:	4622      	mov	r2, r4
 800c4c6:	4601      	mov	r1, r0
 800c4c8:	6838      	ldr	r0, [r7, #0]
 800c4ca:	f000 faeb 	bl	800caa4 <etharp_raw>
      break;
 800c4ce:	e001      	b.n	800c4d4 <etharp_input+0xf8>
      break;
 800c4d0:	bf00      	nop
 800c4d2:	e000      	b.n	800c4d6 <etharp_input+0xfa>
      break;
 800c4d4:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 800c4d6:	6878      	ldr	r0, [r7, #4]
 800c4d8:	f7f9 f9e2 	bl	80058a0 <pbuf_free>
}
 800c4dc:	3718      	adds	r7, #24
 800c4de:	46bd      	mov	sp, r7
 800c4e0:	bdb0      	pop	{r4, r5, r7, pc}
 800c4e2:	bf00      	nop
 800c4e4:	08011704 	.word	0x08011704
 800c4e8:	08011854 	.word	0x08011854
 800c4ec:	0801177c 	.word	0x0801177c

0800c4f0 <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 800c4f0:	b580      	push	{r7, lr}
 800c4f2:	b086      	sub	sp, #24
 800c4f4:	af02      	add	r7, sp, #8
 800c4f6:	60f8      	str	r0, [r7, #12]
 800c4f8:	60b9      	str	r1, [r7, #8]
 800c4fa:	4613      	mov	r3, r2
 800c4fc:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 800c4fe:	79fa      	ldrb	r2, [r7, #7]
 800c500:	4944      	ldr	r1, [pc, #272]	; (800c614 <etharp_output_to_arp_index+0x124>)
 800c502:	4613      	mov	r3, r2
 800c504:	005b      	lsls	r3, r3, #1
 800c506:	4413      	add	r3, r2
 800c508:	00db      	lsls	r3, r3, #3
 800c50a:	440b      	add	r3, r1
 800c50c:	3314      	adds	r3, #20
 800c50e:	781b      	ldrb	r3, [r3, #0]
 800c510:	2b01      	cmp	r3, #1
 800c512:	d806      	bhi.n	800c522 <etharp_output_to_arp_index+0x32>
 800c514:	4b40      	ldr	r3, [pc, #256]	; (800c618 <etharp_output_to_arp_index+0x128>)
 800c516:	f240 22ee 	movw	r2, #750	; 0x2ee
 800c51a:	4940      	ldr	r1, [pc, #256]	; (800c61c <etharp_output_to_arp_index+0x12c>)
 800c51c:	4840      	ldr	r0, [pc, #256]	; (800c620 <etharp_output_to_arp_index+0x130>)
 800c51e:	f001 ffe9 	bl	800e4f4 <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 800c522:	79fa      	ldrb	r2, [r7, #7]
 800c524:	493b      	ldr	r1, [pc, #236]	; (800c614 <etharp_output_to_arp_index+0x124>)
 800c526:	4613      	mov	r3, r2
 800c528:	005b      	lsls	r3, r3, #1
 800c52a:	4413      	add	r3, r2
 800c52c:	00db      	lsls	r3, r3, #3
 800c52e:	440b      	add	r3, r1
 800c530:	3314      	adds	r3, #20
 800c532:	781b      	ldrb	r3, [r3, #0]
 800c534:	2b02      	cmp	r3, #2
 800c536:	d153      	bne.n	800c5e0 <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 800c538:	79fa      	ldrb	r2, [r7, #7]
 800c53a:	4936      	ldr	r1, [pc, #216]	; (800c614 <etharp_output_to_arp_index+0x124>)
 800c53c:	4613      	mov	r3, r2
 800c53e:	005b      	lsls	r3, r3, #1
 800c540:	4413      	add	r3, r2
 800c542:	00db      	lsls	r3, r3, #3
 800c544:	440b      	add	r3, r1
 800c546:	3312      	adds	r3, #18
 800c548:	881b      	ldrh	r3, [r3, #0]
 800c54a:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 800c54e:	d919      	bls.n	800c584 <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 800c550:	79fa      	ldrb	r2, [r7, #7]
 800c552:	4613      	mov	r3, r2
 800c554:	005b      	lsls	r3, r3, #1
 800c556:	4413      	add	r3, r2
 800c558:	00db      	lsls	r3, r3, #3
 800c55a:	4a2e      	ldr	r2, [pc, #184]	; (800c614 <etharp_output_to_arp_index+0x124>)
 800c55c:	4413      	add	r3, r2
 800c55e:	3304      	adds	r3, #4
 800c560:	4619      	mov	r1, r3
 800c562:	68f8      	ldr	r0, [r7, #12]
 800c564:	f000 fb4c 	bl	800cc00 <etharp_request>
 800c568:	4603      	mov	r3, r0
 800c56a:	2b00      	cmp	r3, #0
 800c56c:	d138      	bne.n	800c5e0 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 800c56e:	79fa      	ldrb	r2, [r7, #7]
 800c570:	4928      	ldr	r1, [pc, #160]	; (800c614 <etharp_output_to_arp_index+0x124>)
 800c572:	4613      	mov	r3, r2
 800c574:	005b      	lsls	r3, r3, #1
 800c576:	4413      	add	r3, r2
 800c578:	00db      	lsls	r3, r3, #3
 800c57a:	440b      	add	r3, r1
 800c57c:	3314      	adds	r3, #20
 800c57e:	2203      	movs	r2, #3
 800c580:	701a      	strb	r2, [r3, #0]
 800c582:	e02d      	b.n	800c5e0 <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 800c584:	79fa      	ldrb	r2, [r7, #7]
 800c586:	4923      	ldr	r1, [pc, #140]	; (800c614 <etharp_output_to_arp_index+0x124>)
 800c588:	4613      	mov	r3, r2
 800c58a:	005b      	lsls	r3, r3, #1
 800c58c:	4413      	add	r3, r2
 800c58e:	00db      	lsls	r3, r3, #3
 800c590:	440b      	add	r3, r1
 800c592:	3312      	adds	r3, #18
 800c594:	881b      	ldrh	r3, [r3, #0]
 800c596:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 800c59a:	d321      	bcc.n	800c5e0 <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 800c59c:	79fa      	ldrb	r2, [r7, #7]
 800c59e:	4613      	mov	r3, r2
 800c5a0:	005b      	lsls	r3, r3, #1
 800c5a2:	4413      	add	r3, r2
 800c5a4:	00db      	lsls	r3, r3, #3
 800c5a6:	4a1b      	ldr	r2, [pc, #108]	; (800c614 <etharp_output_to_arp_index+0x124>)
 800c5a8:	4413      	add	r3, r2
 800c5aa:	1d19      	adds	r1, r3, #4
 800c5ac:	79fa      	ldrb	r2, [r7, #7]
 800c5ae:	4613      	mov	r3, r2
 800c5b0:	005b      	lsls	r3, r3, #1
 800c5b2:	4413      	add	r3, r2
 800c5b4:	00db      	lsls	r3, r3, #3
 800c5b6:	3308      	adds	r3, #8
 800c5b8:	4a16      	ldr	r2, [pc, #88]	; (800c614 <etharp_output_to_arp_index+0x124>)
 800c5ba:	4413      	add	r3, r2
 800c5bc:	3304      	adds	r3, #4
 800c5be:	461a      	mov	r2, r3
 800c5c0:	68f8      	ldr	r0, [r7, #12]
 800c5c2:	f000 fafb 	bl	800cbbc <etharp_request_dst>
 800c5c6:	4603      	mov	r3, r0
 800c5c8:	2b00      	cmp	r3, #0
 800c5ca:	d109      	bne.n	800c5e0 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 800c5cc:	79fa      	ldrb	r2, [r7, #7]
 800c5ce:	4911      	ldr	r1, [pc, #68]	; (800c614 <etharp_output_to_arp_index+0x124>)
 800c5d0:	4613      	mov	r3, r2
 800c5d2:	005b      	lsls	r3, r3, #1
 800c5d4:	4413      	add	r3, r2
 800c5d6:	00db      	lsls	r3, r3, #3
 800c5d8:	440b      	add	r3, r1
 800c5da:	3314      	adds	r3, #20
 800c5dc:	2203      	movs	r2, #3
 800c5de:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 800c5e0:	68fb      	ldr	r3, [r7, #12]
 800c5e2:	f103 0126 	add.w	r1, r3, #38	; 0x26
 800c5e6:	79fa      	ldrb	r2, [r7, #7]
 800c5e8:	4613      	mov	r3, r2
 800c5ea:	005b      	lsls	r3, r3, #1
 800c5ec:	4413      	add	r3, r2
 800c5ee:	00db      	lsls	r3, r3, #3
 800c5f0:	3308      	adds	r3, #8
 800c5f2:	4a08      	ldr	r2, [pc, #32]	; (800c614 <etharp_output_to_arp_index+0x124>)
 800c5f4:	4413      	add	r3, r2
 800c5f6:	3304      	adds	r3, #4
 800c5f8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800c5fc:	9200      	str	r2, [sp, #0]
 800c5fe:	460a      	mov	r2, r1
 800c600:	68b9      	ldr	r1, [r7, #8]
 800c602:	68f8      	ldr	r0, [r7, #12]
 800c604:	f001 fe40 	bl	800e288 <ethernet_output>
 800c608:	4603      	mov	r3, r0
}
 800c60a:	4618      	mov	r0, r3
 800c60c:	3710      	adds	r7, #16
 800c60e:	46bd      	mov	sp, r7
 800c610:	bd80      	pop	{r7, pc}
 800c612:	bf00      	nop
 800c614:	200082e0 	.word	0x200082e0
 800c618:	08011704 	.word	0x08011704
 800c61c:	08011874 	.word	0x08011874
 800c620:	0801177c 	.word	0x0801177c

0800c624 <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 800c624:	b580      	push	{r7, lr}
 800c626:	b08a      	sub	sp, #40	; 0x28
 800c628:	af02      	add	r7, sp, #8
 800c62a:	60f8      	str	r0, [r7, #12]
 800c62c:	60b9      	str	r1, [r7, #8]
 800c62e:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 800c630:	687b      	ldr	r3, [r7, #4]
 800c632:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 800c634:	68fb      	ldr	r3, [r7, #12]
 800c636:	2b00      	cmp	r3, #0
 800c638:	d106      	bne.n	800c648 <etharp_output+0x24>
 800c63a:	4b73      	ldr	r3, [pc, #460]	; (800c808 <etharp_output+0x1e4>)
 800c63c:	f240 321e 	movw	r2, #798	; 0x31e
 800c640:	4972      	ldr	r1, [pc, #456]	; (800c80c <etharp_output+0x1e8>)
 800c642:	4873      	ldr	r0, [pc, #460]	; (800c810 <etharp_output+0x1ec>)
 800c644:	f001 ff56 	bl	800e4f4 <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 800c648:	68bb      	ldr	r3, [r7, #8]
 800c64a:	2b00      	cmp	r3, #0
 800c64c:	d106      	bne.n	800c65c <etharp_output+0x38>
 800c64e:	4b6e      	ldr	r3, [pc, #440]	; (800c808 <etharp_output+0x1e4>)
 800c650:	f240 321f 	movw	r2, #799	; 0x31f
 800c654:	496f      	ldr	r1, [pc, #444]	; (800c814 <etharp_output+0x1f0>)
 800c656:	486e      	ldr	r0, [pc, #440]	; (800c810 <etharp_output+0x1ec>)
 800c658:	f001 ff4c 	bl	800e4f4 <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 800c65c:	687b      	ldr	r3, [r7, #4]
 800c65e:	2b00      	cmp	r3, #0
 800c660:	d106      	bne.n	800c670 <etharp_output+0x4c>
 800c662:	4b69      	ldr	r3, [pc, #420]	; (800c808 <etharp_output+0x1e4>)
 800c664:	f44f 7248 	mov.w	r2, #800	; 0x320
 800c668:	496b      	ldr	r1, [pc, #428]	; (800c818 <etharp_output+0x1f4>)
 800c66a:	4869      	ldr	r0, [pc, #420]	; (800c810 <etharp_output+0x1ec>)
 800c66c:	f001 ff42 	bl	800e4f4 <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 800c670:	687b      	ldr	r3, [r7, #4]
 800c672:	681b      	ldr	r3, [r3, #0]
 800c674:	68f9      	ldr	r1, [r7, #12]
 800c676:	4618      	mov	r0, r3
 800c678:	f000 fef8 	bl	800d46c <ip4_addr_isbroadcast_u32>
 800c67c:	4603      	mov	r3, r0
 800c67e:	2b00      	cmp	r3, #0
 800c680:	d002      	beq.n	800c688 <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 800c682:	4b66      	ldr	r3, [pc, #408]	; (800c81c <etharp_output+0x1f8>)
 800c684:	61fb      	str	r3, [r7, #28]
 800c686:	e0af      	b.n	800c7e8 <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 800c688:	687b      	ldr	r3, [r7, #4]
 800c68a:	681b      	ldr	r3, [r3, #0]
 800c68c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800c690:	2be0      	cmp	r3, #224	; 0xe0
 800c692:	d118      	bne.n	800c6c6 <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 800c694:	2301      	movs	r3, #1
 800c696:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 800c698:	2300      	movs	r3, #0
 800c69a:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 800c69c:	235e      	movs	r3, #94	; 0x5e
 800c69e:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 800c6a0:	687b      	ldr	r3, [r7, #4]
 800c6a2:	3301      	adds	r3, #1
 800c6a4:	781b      	ldrb	r3, [r3, #0]
 800c6a6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c6aa:	b2db      	uxtb	r3, r3
 800c6ac:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 800c6ae:	687b      	ldr	r3, [r7, #4]
 800c6b0:	3302      	adds	r3, #2
 800c6b2:	781b      	ldrb	r3, [r3, #0]
 800c6b4:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 800c6b6:	687b      	ldr	r3, [r7, #4]
 800c6b8:	3303      	adds	r3, #3
 800c6ba:	781b      	ldrb	r3, [r3, #0]
 800c6bc:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 800c6be:	f107 0310 	add.w	r3, r7, #16
 800c6c2:	61fb      	str	r3, [r7, #28]
 800c6c4:	e090      	b.n	800c7e8 <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 800c6c6:	687b      	ldr	r3, [r7, #4]
 800c6c8:	681a      	ldr	r2, [r3, #0]
 800c6ca:	68fb      	ldr	r3, [r7, #12]
 800c6cc:	3304      	adds	r3, #4
 800c6ce:	681b      	ldr	r3, [r3, #0]
 800c6d0:	405a      	eors	r2, r3
 800c6d2:	68fb      	ldr	r3, [r7, #12]
 800c6d4:	3308      	adds	r3, #8
 800c6d6:	681b      	ldr	r3, [r3, #0]
 800c6d8:	4013      	ands	r3, r2
 800c6da:	2b00      	cmp	r3, #0
 800c6dc:	d012      	beq.n	800c704 <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 800c6de:	687b      	ldr	r3, [r7, #4]
 800c6e0:	681b      	ldr	r3, [r3, #0]
 800c6e2:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 800c6e4:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 800c6e8:	4293      	cmp	r3, r2
 800c6ea:	d00b      	beq.n	800c704 <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 800c6ec:	68fb      	ldr	r3, [r7, #12]
 800c6ee:	330c      	adds	r3, #12
 800c6f0:	681b      	ldr	r3, [r3, #0]
 800c6f2:	2b00      	cmp	r3, #0
 800c6f4:	d003      	beq.n	800c6fe <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 800c6f6:	68fb      	ldr	r3, [r7, #12]
 800c6f8:	330c      	adds	r3, #12
 800c6fa:	61bb      	str	r3, [r7, #24]
 800c6fc:	e002      	b.n	800c704 <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 800c6fe:	f06f 0303 	mvn.w	r3, #3
 800c702:	e07d      	b.n	800c800 <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 800c704:	4b46      	ldr	r3, [pc, #280]	; (800c820 <etharp_output+0x1fc>)
 800c706:	781b      	ldrb	r3, [r3, #0]
 800c708:	4619      	mov	r1, r3
 800c70a:	4a46      	ldr	r2, [pc, #280]	; (800c824 <etharp_output+0x200>)
 800c70c:	460b      	mov	r3, r1
 800c70e:	005b      	lsls	r3, r3, #1
 800c710:	440b      	add	r3, r1
 800c712:	00db      	lsls	r3, r3, #3
 800c714:	4413      	add	r3, r2
 800c716:	3314      	adds	r3, #20
 800c718:	781b      	ldrb	r3, [r3, #0]
 800c71a:	2b01      	cmp	r3, #1
 800c71c:	d925      	bls.n	800c76a <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 800c71e:	4b40      	ldr	r3, [pc, #256]	; (800c820 <etharp_output+0x1fc>)
 800c720:	781b      	ldrb	r3, [r3, #0]
 800c722:	4619      	mov	r1, r3
 800c724:	4a3f      	ldr	r2, [pc, #252]	; (800c824 <etharp_output+0x200>)
 800c726:	460b      	mov	r3, r1
 800c728:	005b      	lsls	r3, r3, #1
 800c72a:	440b      	add	r3, r1
 800c72c:	00db      	lsls	r3, r3, #3
 800c72e:	4413      	add	r3, r2
 800c730:	3308      	adds	r3, #8
 800c732:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 800c734:	68fa      	ldr	r2, [r7, #12]
 800c736:	429a      	cmp	r2, r3
 800c738:	d117      	bne.n	800c76a <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 800c73a:	69bb      	ldr	r3, [r7, #24]
 800c73c:	681a      	ldr	r2, [r3, #0]
 800c73e:	4b38      	ldr	r3, [pc, #224]	; (800c820 <etharp_output+0x1fc>)
 800c740:	781b      	ldrb	r3, [r3, #0]
 800c742:	4618      	mov	r0, r3
 800c744:	4937      	ldr	r1, [pc, #220]	; (800c824 <etharp_output+0x200>)
 800c746:	4603      	mov	r3, r0
 800c748:	005b      	lsls	r3, r3, #1
 800c74a:	4403      	add	r3, r0
 800c74c:	00db      	lsls	r3, r3, #3
 800c74e:	440b      	add	r3, r1
 800c750:	3304      	adds	r3, #4
 800c752:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 800c754:	429a      	cmp	r2, r3
 800c756:	d108      	bne.n	800c76a <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 800c758:	4b31      	ldr	r3, [pc, #196]	; (800c820 <etharp_output+0x1fc>)
 800c75a:	781b      	ldrb	r3, [r3, #0]
 800c75c:	461a      	mov	r2, r3
 800c75e:	68b9      	ldr	r1, [r7, #8]
 800c760:	68f8      	ldr	r0, [r7, #12]
 800c762:	f7ff fec5 	bl	800c4f0 <etharp_output_to_arp_index>
 800c766:	4603      	mov	r3, r0
 800c768:	e04a      	b.n	800c800 <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 800c76a:	2300      	movs	r3, #0
 800c76c:	75fb      	strb	r3, [r7, #23]
 800c76e:	e031      	b.n	800c7d4 <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 800c770:	7dfa      	ldrb	r2, [r7, #23]
 800c772:	492c      	ldr	r1, [pc, #176]	; (800c824 <etharp_output+0x200>)
 800c774:	4613      	mov	r3, r2
 800c776:	005b      	lsls	r3, r3, #1
 800c778:	4413      	add	r3, r2
 800c77a:	00db      	lsls	r3, r3, #3
 800c77c:	440b      	add	r3, r1
 800c77e:	3314      	adds	r3, #20
 800c780:	781b      	ldrb	r3, [r3, #0]
 800c782:	2b01      	cmp	r3, #1
 800c784:	d923      	bls.n	800c7ce <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 800c786:	7dfa      	ldrb	r2, [r7, #23]
 800c788:	4926      	ldr	r1, [pc, #152]	; (800c824 <etharp_output+0x200>)
 800c78a:	4613      	mov	r3, r2
 800c78c:	005b      	lsls	r3, r3, #1
 800c78e:	4413      	add	r3, r2
 800c790:	00db      	lsls	r3, r3, #3
 800c792:	440b      	add	r3, r1
 800c794:	3308      	adds	r3, #8
 800c796:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 800c798:	68fa      	ldr	r2, [r7, #12]
 800c79a:	429a      	cmp	r2, r3
 800c79c:	d117      	bne.n	800c7ce <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 800c79e:	69bb      	ldr	r3, [r7, #24]
 800c7a0:	6819      	ldr	r1, [r3, #0]
 800c7a2:	7dfa      	ldrb	r2, [r7, #23]
 800c7a4:	481f      	ldr	r0, [pc, #124]	; (800c824 <etharp_output+0x200>)
 800c7a6:	4613      	mov	r3, r2
 800c7a8:	005b      	lsls	r3, r3, #1
 800c7aa:	4413      	add	r3, r2
 800c7ac:	00db      	lsls	r3, r3, #3
 800c7ae:	4403      	add	r3, r0
 800c7b0:	3304      	adds	r3, #4
 800c7b2:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 800c7b4:	4299      	cmp	r1, r3
 800c7b6:	d10a      	bne.n	800c7ce <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 800c7b8:	4a19      	ldr	r2, [pc, #100]	; (800c820 <etharp_output+0x1fc>)
 800c7ba:	7dfb      	ldrb	r3, [r7, #23]
 800c7bc:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 800c7be:	7dfb      	ldrb	r3, [r7, #23]
 800c7c0:	461a      	mov	r2, r3
 800c7c2:	68b9      	ldr	r1, [r7, #8]
 800c7c4:	68f8      	ldr	r0, [r7, #12]
 800c7c6:	f7ff fe93 	bl	800c4f0 <etharp_output_to_arp_index>
 800c7ca:	4603      	mov	r3, r0
 800c7cc:	e018      	b.n	800c800 <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 800c7ce:	7dfb      	ldrb	r3, [r7, #23]
 800c7d0:	3301      	adds	r3, #1
 800c7d2:	75fb      	strb	r3, [r7, #23]
 800c7d4:	7dfb      	ldrb	r3, [r7, #23]
 800c7d6:	2b09      	cmp	r3, #9
 800c7d8:	d9ca      	bls.n	800c770 <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 800c7da:	68ba      	ldr	r2, [r7, #8]
 800c7dc:	69b9      	ldr	r1, [r7, #24]
 800c7de:	68f8      	ldr	r0, [r7, #12]
 800c7e0:	f000 f822 	bl	800c828 <etharp_query>
 800c7e4:	4603      	mov	r3, r0
 800c7e6:	e00b      	b.n	800c800 <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 800c7e8:	68fb      	ldr	r3, [r7, #12]
 800c7ea:	f103 0226 	add.w	r2, r3, #38	; 0x26
 800c7ee:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800c7f2:	9300      	str	r3, [sp, #0]
 800c7f4:	69fb      	ldr	r3, [r7, #28]
 800c7f6:	68b9      	ldr	r1, [r7, #8]
 800c7f8:	68f8      	ldr	r0, [r7, #12]
 800c7fa:	f001 fd45 	bl	800e288 <ethernet_output>
 800c7fe:	4603      	mov	r3, r0
}
 800c800:	4618      	mov	r0, r3
 800c802:	3720      	adds	r7, #32
 800c804:	46bd      	mov	sp, r7
 800c806:	bd80      	pop	{r7, pc}
 800c808:	08011704 	.word	0x08011704
 800c80c:	08011854 	.word	0x08011854
 800c810:	0801177c 	.word	0x0801177c
 800c814:	080118a4 	.word	0x080118a4
 800c818:	08011844 	.word	0x08011844
 800c81c:	08011ec0 	.word	0x08011ec0
 800c820:	200083d0 	.word	0x200083d0
 800c824:	200082e0 	.word	0x200082e0

0800c828 <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 800c828:	b580      	push	{r7, lr}
 800c82a:	b08c      	sub	sp, #48	; 0x30
 800c82c:	af02      	add	r7, sp, #8
 800c82e:	60f8      	str	r0, [r7, #12]
 800c830:	60b9      	str	r1, [r7, #8]
 800c832:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 800c834:	68fb      	ldr	r3, [r7, #12]
 800c836:	3326      	adds	r3, #38	; 0x26
 800c838:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 800c83a:	23ff      	movs	r3, #255	; 0xff
 800c83c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  int is_new_entry = 0;
 800c840:	2300      	movs	r3, #0
 800c842:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 800c844:	68bb      	ldr	r3, [r7, #8]
 800c846:	681b      	ldr	r3, [r3, #0]
 800c848:	68f9      	ldr	r1, [r7, #12]
 800c84a:	4618      	mov	r0, r3
 800c84c:	f000 fe0e 	bl	800d46c <ip4_addr_isbroadcast_u32>
 800c850:	4603      	mov	r3, r0
 800c852:	2b00      	cmp	r3, #0
 800c854:	d10c      	bne.n	800c870 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 800c856:	68bb      	ldr	r3, [r7, #8]
 800c858:	681b      	ldr	r3, [r3, #0]
 800c85a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 800c85e:	2be0      	cmp	r3, #224	; 0xe0
 800c860:	d006      	beq.n	800c870 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 800c862:	68bb      	ldr	r3, [r7, #8]
 800c864:	2b00      	cmp	r3, #0
 800c866:	d003      	beq.n	800c870 <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 800c868:	68bb      	ldr	r3, [r7, #8]
 800c86a:	681b      	ldr	r3, [r3, #0]
 800c86c:	2b00      	cmp	r3, #0
 800c86e:	d102      	bne.n	800c876 <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 800c870:	f06f 030f 	mvn.w	r3, #15
 800c874:	e101      	b.n	800ca7a <etharp_query+0x252>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 800c876:	68fa      	ldr	r2, [r7, #12]
 800c878:	2101      	movs	r1, #1
 800c87a:	68b8      	ldr	r0, [r7, #8]
 800c87c:	f7ff fb60 	bl	800bf40 <etharp_find_entry>
 800c880:	4603      	mov	r3, r0
 800c882:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 800c884:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800c888:	2b00      	cmp	r3, #0
 800c88a:	da02      	bge.n	800c892 <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 800c88c:	8a7b      	ldrh	r3, [r7, #18]
 800c88e:	b25b      	sxtb	r3, r3
 800c890:	e0f3      	b.n	800ca7a <etharp_query+0x252>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 800c892:	8a7b      	ldrh	r3, [r7, #18]
 800c894:	2b7e      	cmp	r3, #126	; 0x7e
 800c896:	d906      	bls.n	800c8a6 <etharp_query+0x7e>
 800c898:	4b7a      	ldr	r3, [pc, #488]	; (800ca84 <etharp_query+0x25c>)
 800c89a:	f240 32c1 	movw	r2, #961	; 0x3c1
 800c89e:	497a      	ldr	r1, [pc, #488]	; (800ca88 <etharp_query+0x260>)
 800c8a0:	487a      	ldr	r0, [pc, #488]	; (800ca8c <etharp_query+0x264>)
 800c8a2:	f001 fe27 	bl	800e4f4 <iprintf>
  i = (netif_addr_idx_t)i_err;
 800c8a6:	8a7b      	ldrh	r3, [r7, #18]
 800c8a8:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 800c8aa:	7c7a      	ldrb	r2, [r7, #17]
 800c8ac:	4978      	ldr	r1, [pc, #480]	; (800ca90 <etharp_query+0x268>)
 800c8ae:	4613      	mov	r3, r2
 800c8b0:	005b      	lsls	r3, r3, #1
 800c8b2:	4413      	add	r3, r2
 800c8b4:	00db      	lsls	r3, r3, #3
 800c8b6:	440b      	add	r3, r1
 800c8b8:	3314      	adds	r3, #20
 800c8ba:	781b      	ldrb	r3, [r3, #0]
 800c8bc:	2b00      	cmp	r3, #0
 800c8be:	d115      	bne.n	800c8ec <etharp_query+0xc4>
    is_new_entry = 1;
 800c8c0:	2301      	movs	r3, #1
 800c8c2:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 800c8c4:	7c7a      	ldrb	r2, [r7, #17]
 800c8c6:	4972      	ldr	r1, [pc, #456]	; (800ca90 <etharp_query+0x268>)
 800c8c8:	4613      	mov	r3, r2
 800c8ca:	005b      	lsls	r3, r3, #1
 800c8cc:	4413      	add	r3, r2
 800c8ce:	00db      	lsls	r3, r3, #3
 800c8d0:	440b      	add	r3, r1
 800c8d2:	3314      	adds	r3, #20
 800c8d4:	2201      	movs	r2, #1
 800c8d6:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 800c8d8:	7c7a      	ldrb	r2, [r7, #17]
 800c8da:	496d      	ldr	r1, [pc, #436]	; (800ca90 <etharp_query+0x268>)
 800c8dc:	4613      	mov	r3, r2
 800c8de:	005b      	lsls	r3, r3, #1
 800c8e0:	4413      	add	r3, r2
 800c8e2:	00db      	lsls	r3, r3, #3
 800c8e4:	440b      	add	r3, r1
 800c8e6:	3308      	adds	r3, #8
 800c8e8:	68fa      	ldr	r2, [r7, #12]
 800c8ea:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 800c8ec:	7c7a      	ldrb	r2, [r7, #17]
 800c8ee:	4968      	ldr	r1, [pc, #416]	; (800ca90 <etharp_query+0x268>)
 800c8f0:	4613      	mov	r3, r2
 800c8f2:	005b      	lsls	r3, r3, #1
 800c8f4:	4413      	add	r3, r2
 800c8f6:	00db      	lsls	r3, r3, #3
 800c8f8:	440b      	add	r3, r1
 800c8fa:	3314      	adds	r3, #20
 800c8fc:	781b      	ldrb	r3, [r3, #0]
 800c8fe:	2b01      	cmp	r3, #1
 800c900:	d011      	beq.n	800c926 <etharp_query+0xfe>
 800c902:	7c7a      	ldrb	r2, [r7, #17]
 800c904:	4962      	ldr	r1, [pc, #392]	; (800ca90 <etharp_query+0x268>)
 800c906:	4613      	mov	r3, r2
 800c908:	005b      	lsls	r3, r3, #1
 800c90a:	4413      	add	r3, r2
 800c90c:	00db      	lsls	r3, r3, #3
 800c90e:	440b      	add	r3, r1
 800c910:	3314      	adds	r3, #20
 800c912:	781b      	ldrb	r3, [r3, #0]
 800c914:	2b01      	cmp	r3, #1
 800c916:	d806      	bhi.n	800c926 <etharp_query+0xfe>
 800c918:	4b5a      	ldr	r3, [pc, #360]	; (800ca84 <etharp_query+0x25c>)
 800c91a:	f240 32cd 	movw	r2, #973	; 0x3cd
 800c91e:	495d      	ldr	r1, [pc, #372]	; (800ca94 <etharp_query+0x26c>)
 800c920:	485a      	ldr	r0, [pc, #360]	; (800ca8c <etharp_query+0x264>)
 800c922:	f001 fde7 	bl	800e4f4 <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 800c926:	6a3b      	ldr	r3, [r7, #32]
 800c928:	2b00      	cmp	r3, #0
 800c92a:	d102      	bne.n	800c932 <etharp_query+0x10a>
 800c92c:	687b      	ldr	r3, [r7, #4]
 800c92e:	2b00      	cmp	r3, #0
 800c930:	d10c      	bne.n	800c94c <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 800c932:	68b9      	ldr	r1, [r7, #8]
 800c934:	68f8      	ldr	r0, [r7, #12]
 800c936:	f000 f963 	bl	800cc00 <etharp_request>
 800c93a:	4603      	mov	r3, r0
 800c93c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 800c940:	687b      	ldr	r3, [r7, #4]
 800c942:	2b00      	cmp	r3, #0
 800c944:	d102      	bne.n	800c94c <etharp_query+0x124>
      return result;
 800c946:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800c94a:	e096      	b.n	800ca7a <etharp_query+0x252>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 800c94c:	687b      	ldr	r3, [r7, #4]
 800c94e:	2b00      	cmp	r3, #0
 800c950:	d106      	bne.n	800c960 <etharp_query+0x138>
 800c952:	4b4c      	ldr	r3, [pc, #304]	; (800ca84 <etharp_query+0x25c>)
 800c954:	f240 32e1 	movw	r2, #993	; 0x3e1
 800c958:	494f      	ldr	r1, [pc, #316]	; (800ca98 <etharp_query+0x270>)
 800c95a:	484c      	ldr	r0, [pc, #304]	; (800ca8c <etharp_query+0x264>)
 800c95c:	f001 fdca 	bl	800e4f4 <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 800c960:	7c7a      	ldrb	r2, [r7, #17]
 800c962:	494b      	ldr	r1, [pc, #300]	; (800ca90 <etharp_query+0x268>)
 800c964:	4613      	mov	r3, r2
 800c966:	005b      	lsls	r3, r3, #1
 800c968:	4413      	add	r3, r2
 800c96a:	00db      	lsls	r3, r3, #3
 800c96c:	440b      	add	r3, r1
 800c96e:	3314      	adds	r3, #20
 800c970:	781b      	ldrb	r3, [r3, #0]
 800c972:	2b01      	cmp	r3, #1
 800c974:	d917      	bls.n	800c9a6 <etharp_query+0x17e>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 800c976:	4a49      	ldr	r2, [pc, #292]	; (800ca9c <etharp_query+0x274>)
 800c978:	7c7b      	ldrb	r3, [r7, #17]
 800c97a:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 800c97c:	7c7a      	ldrb	r2, [r7, #17]
 800c97e:	4613      	mov	r3, r2
 800c980:	005b      	lsls	r3, r3, #1
 800c982:	4413      	add	r3, r2
 800c984:	00db      	lsls	r3, r3, #3
 800c986:	3308      	adds	r3, #8
 800c988:	4a41      	ldr	r2, [pc, #260]	; (800ca90 <etharp_query+0x268>)
 800c98a:	4413      	add	r3, r2
 800c98c:	3304      	adds	r3, #4
 800c98e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800c992:	9200      	str	r2, [sp, #0]
 800c994:	697a      	ldr	r2, [r7, #20]
 800c996:	6879      	ldr	r1, [r7, #4]
 800c998:	68f8      	ldr	r0, [r7, #12]
 800c99a:	f001 fc75 	bl	800e288 <ethernet_output>
 800c99e:	4603      	mov	r3, r0
 800c9a0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800c9a4:	e067      	b.n	800ca76 <etharp_query+0x24e>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 800c9a6:	7c7a      	ldrb	r2, [r7, #17]
 800c9a8:	4939      	ldr	r1, [pc, #228]	; (800ca90 <etharp_query+0x268>)
 800c9aa:	4613      	mov	r3, r2
 800c9ac:	005b      	lsls	r3, r3, #1
 800c9ae:	4413      	add	r3, r2
 800c9b0:	00db      	lsls	r3, r3, #3
 800c9b2:	440b      	add	r3, r1
 800c9b4:	3314      	adds	r3, #20
 800c9b6:	781b      	ldrb	r3, [r3, #0]
 800c9b8:	2b01      	cmp	r3, #1
 800c9ba:	d15c      	bne.n	800ca76 <etharp_query+0x24e>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 800c9bc:	2300      	movs	r3, #0
 800c9be:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 800c9c0:	687b      	ldr	r3, [r7, #4]
 800c9c2:	61fb      	str	r3, [r7, #28]
    while (p) {
 800c9c4:	e01c      	b.n	800ca00 <etharp_query+0x1d8>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 800c9c6:	69fb      	ldr	r3, [r7, #28]
 800c9c8:	895a      	ldrh	r2, [r3, #10]
 800c9ca:	69fb      	ldr	r3, [r7, #28]
 800c9cc:	891b      	ldrh	r3, [r3, #8]
 800c9ce:	429a      	cmp	r2, r3
 800c9d0:	d10a      	bne.n	800c9e8 <etharp_query+0x1c0>
 800c9d2:	69fb      	ldr	r3, [r7, #28]
 800c9d4:	681b      	ldr	r3, [r3, #0]
 800c9d6:	2b00      	cmp	r3, #0
 800c9d8:	d006      	beq.n	800c9e8 <etharp_query+0x1c0>
 800c9da:	4b2a      	ldr	r3, [pc, #168]	; (800ca84 <etharp_query+0x25c>)
 800c9dc:	f240 32f1 	movw	r2, #1009	; 0x3f1
 800c9e0:	492f      	ldr	r1, [pc, #188]	; (800caa0 <etharp_query+0x278>)
 800c9e2:	482a      	ldr	r0, [pc, #168]	; (800ca8c <etharp_query+0x264>)
 800c9e4:	f001 fd86 	bl	800e4f4 <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 800c9e8:	69fb      	ldr	r3, [r7, #28]
 800c9ea:	7b1b      	ldrb	r3, [r3, #12]
 800c9ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c9f0:	2b00      	cmp	r3, #0
 800c9f2:	d002      	beq.n	800c9fa <etharp_query+0x1d2>
        copy_needed = 1;
 800c9f4:	2301      	movs	r3, #1
 800c9f6:	61bb      	str	r3, [r7, #24]
        break;
 800c9f8:	e005      	b.n	800ca06 <etharp_query+0x1de>
      }
      p = p->next;
 800c9fa:	69fb      	ldr	r3, [r7, #28]
 800c9fc:	681b      	ldr	r3, [r3, #0]
 800c9fe:	61fb      	str	r3, [r7, #28]
    while (p) {
 800ca00:	69fb      	ldr	r3, [r7, #28]
 800ca02:	2b00      	cmp	r3, #0
 800ca04:	d1df      	bne.n	800c9c6 <etharp_query+0x19e>
    }
    if (copy_needed) {
 800ca06:	69bb      	ldr	r3, [r7, #24]
 800ca08:	2b00      	cmp	r3, #0
 800ca0a:	d007      	beq.n	800ca1c <etharp_query+0x1f4>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 800ca0c:	687a      	ldr	r2, [r7, #4]
 800ca0e:	f44f 7120 	mov.w	r1, #640	; 0x280
 800ca12:	200e      	movs	r0, #14
 800ca14:	f7f9 f9b0 	bl	8005d78 <pbuf_clone>
 800ca18:	61f8      	str	r0, [r7, #28]
 800ca1a:	e004      	b.n	800ca26 <etharp_query+0x1fe>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 800ca1c:	687b      	ldr	r3, [r7, #4]
 800ca1e:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 800ca20:	69f8      	ldr	r0, [r7, #28]
 800ca22:	f7f8 ffdd 	bl	80059e0 <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 800ca26:	69fb      	ldr	r3, [r7, #28]
 800ca28:	2b00      	cmp	r3, #0
 800ca2a:	d021      	beq.n	800ca70 <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 800ca2c:	7c7a      	ldrb	r2, [r7, #17]
 800ca2e:	4918      	ldr	r1, [pc, #96]	; (800ca90 <etharp_query+0x268>)
 800ca30:	4613      	mov	r3, r2
 800ca32:	005b      	lsls	r3, r3, #1
 800ca34:	4413      	add	r3, r2
 800ca36:	00db      	lsls	r3, r3, #3
 800ca38:	440b      	add	r3, r1
 800ca3a:	681b      	ldr	r3, [r3, #0]
 800ca3c:	2b00      	cmp	r3, #0
 800ca3e:	d00a      	beq.n	800ca56 <etharp_query+0x22e>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 800ca40:	7c7a      	ldrb	r2, [r7, #17]
 800ca42:	4913      	ldr	r1, [pc, #76]	; (800ca90 <etharp_query+0x268>)
 800ca44:	4613      	mov	r3, r2
 800ca46:	005b      	lsls	r3, r3, #1
 800ca48:	4413      	add	r3, r2
 800ca4a:	00db      	lsls	r3, r3, #3
 800ca4c:	440b      	add	r3, r1
 800ca4e:	681b      	ldr	r3, [r3, #0]
 800ca50:	4618      	mov	r0, r3
 800ca52:	f7f8 ff25 	bl	80058a0 <pbuf_free>
      }
      arp_table[i].q = p;
 800ca56:	7c7a      	ldrb	r2, [r7, #17]
 800ca58:	490d      	ldr	r1, [pc, #52]	; (800ca90 <etharp_query+0x268>)
 800ca5a:	4613      	mov	r3, r2
 800ca5c:	005b      	lsls	r3, r3, #1
 800ca5e:	4413      	add	r3, r2
 800ca60:	00db      	lsls	r3, r3, #3
 800ca62:	440b      	add	r3, r1
 800ca64:	69fa      	ldr	r2, [r7, #28]
 800ca66:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 800ca68:	2300      	movs	r3, #0
 800ca6a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800ca6e:	e002      	b.n	800ca76 <etharp_query+0x24e>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 800ca70:	23ff      	movs	r3, #255	; 0xff
 800ca72:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }
  return result;
 800ca76:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 800ca7a:	4618      	mov	r0, r3
 800ca7c:	3728      	adds	r7, #40	; 0x28
 800ca7e:	46bd      	mov	sp, r7
 800ca80:	bd80      	pop	{r7, pc}
 800ca82:	bf00      	nop
 800ca84:	08011704 	.word	0x08011704
 800ca88:	080118b0 	.word	0x080118b0
 800ca8c:	0801177c 	.word	0x0801177c
 800ca90:	200082e0 	.word	0x200082e0
 800ca94:	080118c0 	.word	0x080118c0
 800ca98:	080118a4 	.word	0x080118a4
 800ca9c:	200083d0 	.word	0x200083d0
 800caa0:	080118e8 	.word	0x080118e8

0800caa4 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 800caa4:	b580      	push	{r7, lr}
 800caa6:	b08a      	sub	sp, #40	; 0x28
 800caa8:	af02      	add	r7, sp, #8
 800caaa:	60f8      	str	r0, [r7, #12]
 800caac:	60b9      	str	r1, [r7, #8]
 800caae:	607a      	str	r2, [r7, #4]
 800cab0:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 800cab2:	2300      	movs	r3, #0
 800cab4:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 800cab6:	68fb      	ldr	r3, [r7, #12]
 800cab8:	2b00      	cmp	r3, #0
 800caba:	d106      	bne.n	800caca <etharp_raw+0x26>
 800cabc:	4b3a      	ldr	r3, [pc, #232]	; (800cba8 <etharp_raw+0x104>)
 800cabe:	f240 4257 	movw	r2, #1111	; 0x457
 800cac2:	493a      	ldr	r1, [pc, #232]	; (800cbac <etharp_raw+0x108>)
 800cac4:	483a      	ldr	r0, [pc, #232]	; (800cbb0 <etharp_raw+0x10c>)
 800cac6:	f001 fd15 	bl	800e4f4 <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 800caca:	f44f 7220 	mov.w	r2, #640	; 0x280
 800cace:	211c      	movs	r1, #28
 800cad0:	200e      	movs	r0, #14
 800cad2:	f7f8 fc01 	bl	80052d8 <pbuf_alloc>
 800cad6:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 800cad8:	69bb      	ldr	r3, [r7, #24]
 800cada:	2b00      	cmp	r3, #0
 800cadc:	d102      	bne.n	800cae4 <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 800cade:	f04f 33ff 	mov.w	r3, #4294967295
 800cae2:	e05d      	b.n	800cba0 <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 800cae4:	69bb      	ldr	r3, [r7, #24]
 800cae6:	895b      	ldrh	r3, [r3, #10]
 800cae8:	2b1b      	cmp	r3, #27
 800caea:	d806      	bhi.n	800cafa <etharp_raw+0x56>
 800caec:	4b2e      	ldr	r3, [pc, #184]	; (800cba8 <etharp_raw+0x104>)
 800caee:	f240 4262 	movw	r2, #1122	; 0x462
 800caf2:	4930      	ldr	r1, [pc, #192]	; (800cbb4 <etharp_raw+0x110>)
 800caf4:	482e      	ldr	r0, [pc, #184]	; (800cbb0 <etharp_raw+0x10c>)
 800caf6:	f001 fcfd 	bl	800e4f4 <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 800cafa:	69bb      	ldr	r3, [r7, #24]
 800cafc:	685b      	ldr	r3, [r3, #4]
 800cafe:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 800cb00:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800cb02:	4618      	mov	r0, r3
 800cb04:	f7f7 fb6e 	bl	80041e4 <lwip_htons>
 800cb08:	4603      	mov	r3, r0
 800cb0a:	461a      	mov	r2, r3
 800cb0c:	697b      	ldr	r3, [r7, #20]
 800cb0e:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 800cb10:	68fb      	ldr	r3, [r7, #12]
 800cb12:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800cb16:	2b06      	cmp	r3, #6
 800cb18:	d006      	beq.n	800cb28 <etharp_raw+0x84>
 800cb1a:	4b23      	ldr	r3, [pc, #140]	; (800cba8 <etharp_raw+0x104>)
 800cb1c:	f240 4269 	movw	r2, #1129	; 0x469
 800cb20:	4925      	ldr	r1, [pc, #148]	; (800cbb8 <etharp_raw+0x114>)
 800cb22:	4823      	ldr	r0, [pc, #140]	; (800cbb0 <etharp_raw+0x10c>)
 800cb24:	f001 fce6 	bl	800e4f4 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 800cb28:	697b      	ldr	r3, [r7, #20]
 800cb2a:	3308      	adds	r3, #8
 800cb2c:	2206      	movs	r2, #6
 800cb2e:	6839      	ldr	r1, [r7, #0]
 800cb30:	4618      	mov	r0, r3
 800cb32:	f001 fea9 	bl	800e888 <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 800cb36:	697b      	ldr	r3, [r7, #20]
 800cb38:	3312      	adds	r3, #18
 800cb3a:	2206      	movs	r2, #6
 800cb3c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800cb3e:	4618      	mov	r0, r3
 800cb40:	f001 fea2 	bl	800e888 <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 800cb44:	697b      	ldr	r3, [r7, #20]
 800cb46:	330e      	adds	r3, #14
 800cb48:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800cb4a:	6812      	ldr	r2, [r2, #0]
 800cb4c:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 800cb4e:	697b      	ldr	r3, [r7, #20]
 800cb50:	3318      	adds	r3, #24
 800cb52:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800cb54:	6812      	ldr	r2, [r2, #0]
 800cb56:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 800cb58:	697b      	ldr	r3, [r7, #20]
 800cb5a:	2200      	movs	r2, #0
 800cb5c:	701a      	strb	r2, [r3, #0]
 800cb5e:	2200      	movs	r2, #0
 800cb60:	f042 0201 	orr.w	r2, r2, #1
 800cb64:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 800cb66:	697b      	ldr	r3, [r7, #20]
 800cb68:	2200      	movs	r2, #0
 800cb6a:	f042 0208 	orr.w	r2, r2, #8
 800cb6e:	709a      	strb	r2, [r3, #2]
 800cb70:	2200      	movs	r2, #0
 800cb72:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 800cb74:	697b      	ldr	r3, [r7, #20]
 800cb76:	2206      	movs	r2, #6
 800cb78:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 800cb7a:	697b      	ldr	r3, [r7, #20]
 800cb7c:	2204      	movs	r2, #4
 800cb7e:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 800cb80:	f640 0306 	movw	r3, #2054	; 0x806
 800cb84:	9300      	str	r3, [sp, #0]
 800cb86:	687b      	ldr	r3, [r7, #4]
 800cb88:	68ba      	ldr	r2, [r7, #8]
 800cb8a:	69b9      	ldr	r1, [r7, #24]
 800cb8c:	68f8      	ldr	r0, [r7, #12]
 800cb8e:	f001 fb7b 	bl	800e288 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 800cb92:	69b8      	ldr	r0, [r7, #24]
 800cb94:	f7f8 fe84 	bl	80058a0 <pbuf_free>
  p = NULL;
 800cb98:	2300      	movs	r3, #0
 800cb9a:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 800cb9c:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800cba0:	4618      	mov	r0, r3
 800cba2:	3720      	adds	r7, #32
 800cba4:	46bd      	mov	sp, r7
 800cba6:	bd80      	pop	{r7, pc}
 800cba8:	08011704 	.word	0x08011704
 800cbac:	08011854 	.word	0x08011854
 800cbb0:	0801177c 	.word	0x0801177c
 800cbb4:	08011904 	.word	0x08011904
 800cbb8:	08011938 	.word	0x08011938

0800cbbc <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 800cbbc:	b580      	push	{r7, lr}
 800cbbe:	b088      	sub	sp, #32
 800cbc0:	af04      	add	r7, sp, #16
 800cbc2:	60f8      	str	r0, [r7, #12]
 800cbc4:	60b9      	str	r1, [r7, #8]
 800cbc6:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800cbc8:	68fb      	ldr	r3, [r7, #12]
 800cbca:	f103 0126 	add.w	r1, r3, #38	; 0x26
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 800cbce:	68fb      	ldr	r3, [r7, #12]
 800cbd0:	f103 0026 	add.w	r0, r3, #38	; 0x26
 800cbd4:	68fb      	ldr	r3, [r7, #12]
 800cbd6:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800cbd8:	2201      	movs	r2, #1
 800cbda:	9203      	str	r2, [sp, #12]
 800cbdc:	68ba      	ldr	r2, [r7, #8]
 800cbde:	9202      	str	r2, [sp, #8]
 800cbe0:	4a06      	ldr	r2, [pc, #24]	; (800cbfc <etharp_request_dst+0x40>)
 800cbe2:	9201      	str	r2, [sp, #4]
 800cbe4:	9300      	str	r3, [sp, #0]
 800cbe6:	4603      	mov	r3, r0
 800cbe8:	687a      	ldr	r2, [r7, #4]
 800cbea:	68f8      	ldr	r0, [r7, #12]
 800cbec:	f7ff ff5a 	bl	800caa4 <etharp_raw>
 800cbf0:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 800cbf2:	4618      	mov	r0, r3
 800cbf4:	3710      	adds	r7, #16
 800cbf6:	46bd      	mov	sp, r7
 800cbf8:	bd80      	pop	{r7, pc}
 800cbfa:	bf00      	nop
 800cbfc:	08011ec8 	.word	0x08011ec8

0800cc00 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 800cc00:	b580      	push	{r7, lr}
 800cc02:	b082      	sub	sp, #8
 800cc04:	af00      	add	r7, sp, #0
 800cc06:	6078      	str	r0, [r7, #4]
 800cc08:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 800cc0a:	4a05      	ldr	r2, [pc, #20]	; (800cc20 <etharp_request+0x20>)
 800cc0c:	6839      	ldr	r1, [r7, #0]
 800cc0e:	6878      	ldr	r0, [r7, #4]
 800cc10:	f7ff ffd4 	bl	800cbbc <etharp_request_dst>
 800cc14:	4603      	mov	r3, r0
}
 800cc16:	4618      	mov	r0, r3
 800cc18:	3708      	adds	r7, #8
 800cc1a:	46bd      	mov	sp, r7
 800cc1c:	bd80      	pop	{r7, pc}
 800cc1e:	bf00      	nop
 800cc20:	08011ec0 	.word	0x08011ec0

0800cc24 <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 800cc24:	b580      	push	{r7, lr}
 800cc26:	b08e      	sub	sp, #56	; 0x38
 800cc28:	af04      	add	r7, sp, #16
 800cc2a:	6078      	str	r0, [r7, #4]
 800cc2c:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 800cc2e:	4b79      	ldr	r3, [pc, #484]	; (800ce14 <icmp_input+0x1f0>)
 800cc30:	689b      	ldr	r3, [r3, #8]
 800cc32:	627b      	str	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 800cc34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cc36:	781b      	ldrb	r3, [r3, #0]
 800cc38:	f003 030f 	and.w	r3, r3, #15
 800cc3c:	b2db      	uxtb	r3, r3
 800cc3e:	009b      	lsls	r3, r3, #2
 800cc40:	b2db      	uxtb	r3, r3
 800cc42:	847b      	strh	r3, [r7, #34]	; 0x22
  if (hlen < IP_HLEN) {
 800cc44:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800cc46:	2b13      	cmp	r3, #19
 800cc48:	f240 80cd 	bls.w	800cde6 <icmp_input+0x1c2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 800cc4c:	687b      	ldr	r3, [r7, #4]
 800cc4e:	895b      	ldrh	r3, [r3, #10]
 800cc50:	2b03      	cmp	r3, #3
 800cc52:	f240 80ca 	bls.w	800cdea <icmp_input+0x1c6>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 800cc56:	687b      	ldr	r3, [r7, #4]
 800cc58:	685b      	ldr	r3, [r3, #4]
 800cc5a:	781b      	ldrb	r3, [r3, #0]
 800cc5c:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 800cc60:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 800cc64:	2b00      	cmp	r3, #0
 800cc66:	f000 80b7 	beq.w	800cdd8 <icmp_input+0x1b4>
 800cc6a:	2b08      	cmp	r3, #8
 800cc6c:	f040 80b7 	bne.w	800cdde <icmp_input+0x1ba>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 800cc70:	4b69      	ldr	r3, [pc, #420]	; (800ce18 <icmp_input+0x1f4>)
 800cc72:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800cc74:	4b67      	ldr	r3, [pc, #412]	; (800ce14 <icmp_input+0x1f0>)
 800cc76:	695b      	ldr	r3, [r3, #20]
 800cc78:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800cc7c:	2be0      	cmp	r3, #224	; 0xe0
 800cc7e:	f000 80bb 	beq.w	800cdf8 <icmp_input+0x1d4>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 800cc82:	4b64      	ldr	r3, [pc, #400]	; (800ce14 <icmp_input+0x1f0>)
 800cc84:	695b      	ldr	r3, [r3, #20]
 800cc86:	4a63      	ldr	r2, [pc, #396]	; (800ce14 <icmp_input+0x1f0>)
 800cc88:	6812      	ldr	r2, [r2, #0]
 800cc8a:	4611      	mov	r1, r2
 800cc8c:	4618      	mov	r0, r3
 800cc8e:	f000 fbed 	bl	800d46c <ip4_addr_isbroadcast_u32>
 800cc92:	4603      	mov	r3, r0
 800cc94:	2b00      	cmp	r3, #0
 800cc96:	f040 80b1 	bne.w	800cdfc <icmp_input+0x1d8>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 800cc9a:	687b      	ldr	r3, [r7, #4]
 800cc9c:	891b      	ldrh	r3, [r3, #8]
 800cc9e:	2b07      	cmp	r3, #7
 800cca0:	f240 80a5 	bls.w	800cdee <icmp_input+0x1ca>
          return;
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 800cca4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800cca6:	330e      	adds	r3, #14
 800cca8:	4619      	mov	r1, r3
 800ccaa:	6878      	ldr	r0, [r7, #4]
 800ccac:	f7f8 fd62 	bl	8005774 <pbuf_add_header>
 800ccb0:	4603      	mov	r3, r0
 800ccb2:	2b00      	cmp	r3, #0
 800ccb4:	d04b      	beq.n	800cd4e <icmp_input+0x12a>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 800ccb6:	687b      	ldr	r3, [r7, #4]
 800ccb8:	891a      	ldrh	r2, [r3, #8]
 800ccba:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800ccbc:	4413      	add	r3, r2
 800ccbe:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 800ccc0:	687b      	ldr	r3, [r7, #4]
 800ccc2:	891b      	ldrh	r3, [r3, #8]
 800ccc4:	8b7a      	ldrh	r2, [r7, #26]
 800ccc6:	429a      	cmp	r2, r3
 800ccc8:	f0c0 809a 	bcc.w	800ce00 <icmp_input+0x1dc>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 800cccc:	8b7b      	ldrh	r3, [r7, #26]
 800ccce:	f44f 7220 	mov.w	r2, #640	; 0x280
 800ccd2:	4619      	mov	r1, r3
 800ccd4:	200e      	movs	r0, #14
 800ccd6:	f7f8 faff 	bl	80052d8 <pbuf_alloc>
 800ccda:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 800ccdc:	697b      	ldr	r3, [r7, #20]
 800ccde:	2b00      	cmp	r3, #0
 800cce0:	f000 8090 	beq.w	800ce04 <icmp_input+0x1e0>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 800cce4:	697b      	ldr	r3, [r7, #20]
 800cce6:	895b      	ldrh	r3, [r3, #10]
 800cce8:	461a      	mov	r2, r3
 800ccea:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800ccec:	3308      	adds	r3, #8
 800ccee:	429a      	cmp	r2, r3
 800ccf0:	d203      	bcs.n	800ccfa <icmp_input+0xd6>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 800ccf2:	6978      	ldr	r0, [r7, #20]
 800ccf4:	f7f8 fdd4 	bl	80058a0 <pbuf_free>
          goto icmperr;
 800ccf8:	e085      	b.n	800ce06 <icmp_input+0x1e2>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 800ccfa:	697b      	ldr	r3, [r7, #20]
 800ccfc:	685b      	ldr	r3, [r3, #4]
 800ccfe:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800cd00:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800cd02:	4618      	mov	r0, r3
 800cd04:	f001 fdc0 	bl	800e888 <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 800cd08:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800cd0a:	4619      	mov	r1, r3
 800cd0c:	6978      	ldr	r0, [r7, #20]
 800cd0e:	f7f8 fd41 	bl	8005794 <pbuf_remove_header>
 800cd12:	4603      	mov	r3, r0
 800cd14:	2b00      	cmp	r3, #0
 800cd16:	d009      	beq.n	800cd2c <icmp_input+0x108>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 800cd18:	4b40      	ldr	r3, [pc, #256]	; (800ce1c <icmp_input+0x1f8>)
 800cd1a:	22b6      	movs	r2, #182	; 0xb6
 800cd1c:	4940      	ldr	r1, [pc, #256]	; (800ce20 <icmp_input+0x1fc>)
 800cd1e:	4841      	ldr	r0, [pc, #260]	; (800ce24 <icmp_input+0x200>)
 800cd20:	f001 fbe8 	bl	800e4f4 <iprintf>
          pbuf_free(r);
 800cd24:	6978      	ldr	r0, [r7, #20]
 800cd26:	f7f8 fdbb 	bl	80058a0 <pbuf_free>
          goto icmperr;
 800cd2a:	e06c      	b.n	800ce06 <icmp_input+0x1e2>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 800cd2c:	6879      	ldr	r1, [r7, #4]
 800cd2e:	6978      	ldr	r0, [r7, #20]
 800cd30:	f7f8 fede 	bl	8005af0 <pbuf_copy>
 800cd34:	4603      	mov	r3, r0
 800cd36:	2b00      	cmp	r3, #0
 800cd38:	d003      	beq.n	800cd42 <icmp_input+0x11e>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 800cd3a:	6978      	ldr	r0, [r7, #20]
 800cd3c:	f7f8 fdb0 	bl	80058a0 <pbuf_free>
          goto icmperr;
 800cd40:	e061      	b.n	800ce06 <icmp_input+0x1e2>
        }
        /* free the original p */
        pbuf_free(p);
 800cd42:	6878      	ldr	r0, [r7, #4]
 800cd44:	f7f8 fdac 	bl	80058a0 <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 800cd48:	697b      	ldr	r3, [r7, #20]
 800cd4a:	607b      	str	r3, [r7, #4]
 800cd4c:	e00f      	b.n	800cd6e <icmp_input+0x14a>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 800cd4e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800cd50:	330e      	adds	r3, #14
 800cd52:	4619      	mov	r1, r3
 800cd54:	6878      	ldr	r0, [r7, #4]
 800cd56:	f7f8 fd1d 	bl	8005794 <pbuf_remove_header>
 800cd5a:	4603      	mov	r3, r0
 800cd5c:	2b00      	cmp	r3, #0
 800cd5e:	d006      	beq.n	800cd6e <icmp_input+0x14a>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 800cd60:	4b2e      	ldr	r3, [pc, #184]	; (800ce1c <icmp_input+0x1f8>)
 800cd62:	22c7      	movs	r2, #199	; 0xc7
 800cd64:	4930      	ldr	r1, [pc, #192]	; (800ce28 <icmp_input+0x204>)
 800cd66:	482f      	ldr	r0, [pc, #188]	; (800ce24 <icmp_input+0x200>)
 800cd68:	f001 fbc4 	bl	800e4f4 <iprintf>
          goto icmperr;
 800cd6c:	e04b      	b.n	800ce06 <icmp_input+0x1e2>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 800cd6e:	687b      	ldr	r3, [r7, #4]
 800cd70:	685b      	ldr	r3, [r3, #4]
 800cd72:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 800cd74:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800cd76:	4619      	mov	r1, r3
 800cd78:	6878      	ldr	r0, [r7, #4]
 800cd7a:	f7f8 fcfb 	bl	8005774 <pbuf_add_header>
 800cd7e:	4603      	mov	r3, r0
 800cd80:	2b00      	cmp	r3, #0
 800cd82:	d12b      	bne.n	800cddc <icmp_input+0x1b8>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 800cd84:	687b      	ldr	r3, [r7, #4]
 800cd86:	685b      	ldr	r3, [r3, #4]
 800cd88:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 800cd8a:	69fb      	ldr	r3, [r7, #28]
 800cd8c:	681a      	ldr	r2, [r3, #0]
 800cd8e:	68fb      	ldr	r3, [r7, #12]
 800cd90:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 800cd92:	4b20      	ldr	r3, [pc, #128]	; (800ce14 <icmp_input+0x1f0>)
 800cd94:	691a      	ldr	r2, [r3, #16]
 800cd96:	68fb      	ldr	r3, [r7, #12]
 800cd98:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 800cd9a:	693b      	ldr	r3, [r7, #16]
 800cd9c:	2200      	movs	r2, #0
 800cd9e:	701a      	strb	r2, [r3, #0]
        else {
          iecho->chksum = 0;
        }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF */
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
 800cda0:	693b      	ldr	r3, [r7, #16]
 800cda2:	2200      	movs	r2, #0
 800cda4:	709a      	strb	r2, [r3, #2]
 800cda6:	2200      	movs	r2, #0
 800cda8:	70da      	strb	r2, [r3, #3]
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 800cdaa:	68fb      	ldr	r3, [r7, #12]
 800cdac:	22ff      	movs	r2, #255	; 0xff
 800cdae:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 800cdb0:	68fb      	ldr	r3, [r7, #12]
 800cdb2:	2200      	movs	r2, #0
 800cdb4:	729a      	strb	r2, [r3, #10]
 800cdb6:	2200      	movs	r2, #0
 800cdb8:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 800cdba:	683b      	ldr	r3, [r7, #0]
 800cdbc:	9302      	str	r3, [sp, #8]
 800cdbe:	2301      	movs	r3, #1
 800cdc0:	9301      	str	r3, [sp, #4]
 800cdc2:	2300      	movs	r3, #0
 800cdc4:	9300      	str	r3, [sp, #0]
 800cdc6:	23ff      	movs	r3, #255	; 0xff
 800cdc8:	2200      	movs	r2, #0
 800cdca:	69f9      	ldr	r1, [r7, #28]
 800cdcc:	6878      	ldr	r0, [r7, #4]
 800cdce:	f000 fa75 	bl	800d2bc <ip4_output_if>
 800cdd2:	4603      	mov	r3, r0
 800cdd4:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 800cdd6:	e001      	b.n	800cddc <icmp_input+0x1b8>
      break;
 800cdd8:	bf00      	nop
 800cdda:	e000      	b.n	800cdde <icmp_input+0x1ba>
      break;
 800cddc:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 800cdde:	6878      	ldr	r0, [r7, #4]
 800cde0:	f7f8 fd5e 	bl	80058a0 <pbuf_free>
  return;
 800cde4:	e013      	b.n	800ce0e <icmp_input+0x1ea>
    goto lenerr;
 800cde6:	bf00      	nop
 800cde8:	e002      	b.n	800cdf0 <icmp_input+0x1cc>
    goto lenerr;
 800cdea:	bf00      	nop
 800cdec:	e000      	b.n	800cdf0 <icmp_input+0x1cc>
        goto lenerr;
 800cdee:	bf00      	nop
lenerr:
  pbuf_free(p);
 800cdf0:	6878      	ldr	r0, [r7, #4]
 800cdf2:	f7f8 fd55 	bl	80058a0 <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 800cdf6:	e00a      	b.n	800ce0e <icmp_input+0x1ea>
        goto icmperr;
 800cdf8:	bf00      	nop
 800cdfa:	e004      	b.n	800ce06 <icmp_input+0x1e2>
        goto icmperr;
 800cdfc:	bf00      	nop
 800cdfe:	e002      	b.n	800ce06 <icmp_input+0x1e2>
          goto icmperr;
 800ce00:	bf00      	nop
 800ce02:	e000      	b.n	800ce06 <icmp_input+0x1e2>
          goto icmperr;
 800ce04:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 800ce06:	6878      	ldr	r0, [r7, #4]
 800ce08:	f7f8 fd4a 	bl	80058a0 <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 800ce0c:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 800ce0e:	3728      	adds	r7, #40	; 0x28
 800ce10:	46bd      	mov	sp, r7
 800ce12:	bd80      	pop	{r7, pc}
 800ce14:	20004d10 	.word	0x20004d10
 800ce18:	20004d24 	.word	0x20004d24
 800ce1c:	0801197c 	.word	0x0801197c
 800ce20:	080119b4 	.word	0x080119b4
 800ce24:	080119ec 	.word	0x080119ec
 800ce28:	08011a14 	.word	0x08011a14

0800ce2c <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 800ce2c:	b580      	push	{r7, lr}
 800ce2e:	b082      	sub	sp, #8
 800ce30:	af00      	add	r7, sp, #0
 800ce32:	6078      	str	r0, [r7, #4]
 800ce34:	460b      	mov	r3, r1
 800ce36:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 800ce38:	78fb      	ldrb	r3, [r7, #3]
 800ce3a:	461a      	mov	r2, r3
 800ce3c:	2103      	movs	r1, #3
 800ce3e:	6878      	ldr	r0, [r7, #4]
 800ce40:	f000 f814 	bl	800ce6c <icmp_send_response>
}
 800ce44:	bf00      	nop
 800ce46:	3708      	adds	r7, #8
 800ce48:	46bd      	mov	sp, r7
 800ce4a:	bd80      	pop	{r7, pc}

0800ce4c <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 800ce4c:	b580      	push	{r7, lr}
 800ce4e:	b082      	sub	sp, #8
 800ce50:	af00      	add	r7, sp, #0
 800ce52:	6078      	str	r0, [r7, #4]
 800ce54:	460b      	mov	r3, r1
 800ce56:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 800ce58:	78fb      	ldrb	r3, [r7, #3]
 800ce5a:	461a      	mov	r2, r3
 800ce5c:	210b      	movs	r1, #11
 800ce5e:	6878      	ldr	r0, [r7, #4]
 800ce60:	f000 f804 	bl	800ce6c <icmp_send_response>
}
 800ce64:	bf00      	nop
 800ce66:	3708      	adds	r7, #8
 800ce68:	46bd      	mov	sp, r7
 800ce6a:	bd80      	pop	{r7, pc}

0800ce6c <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 800ce6c:	b580      	push	{r7, lr}
 800ce6e:	b08c      	sub	sp, #48	; 0x30
 800ce70:	af04      	add	r7, sp, #16
 800ce72:	6078      	str	r0, [r7, #4]
 800ce74:	460b      	mov	r3, r1
 800ce76:	70fb      	strb	r3, [r7, #3]
 800ce78:	4613      	mov	r3, r2
 800ce7a:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 800ce7c:	f44f 7220 	mov.w	r2, #640	; 0x280
 800ce80:	2124      	movs	r1, #36	; 0x24
 800ce82:	2022      	movs	r0, #34	; 0x22
 800ce84:	f7f8 fa28 	bl	80052d8 <pbuf_alloc>
 800ce88:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 800ce8a:	69fb      	ldr	r3, [r7, #28]
 800ce8c:	2b00      	cmp	r3, #0
 800ce8e:	d04c      	beq.n	800cf2a <icmp_send_response+0xbe>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 800ce90:	69fb      	ldr	r3, [r7, #28]
 800ce92:	895b      	ldrh	r3, [r3, #10]
 800ce94:	2b23      	cmp	r3, #35	; 0x23
 800ce96:	d806      	bhi.n	800cea6 <icmp_send_response+0x3a>
 800ce98:	4b26      	ldr	r3, [pc, #152]	; (800cf34 <icmp_send_response+0xc8>)
 800ce9a:	f44f 72b4 	mov.w	r2, #360	; 0x168
 800ce9e:	4926      	ldr	r1, [pc, #152]	; (800cf38 <icmp_send_response+0xcc>)
 800cea0:	4826      	ldr	r0, [pc, #152]	; (800cf3c <icmp_send_response+0xd0>)
 800cea2:	f001 fb27 	bl	800e4f4 <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 800cea6:	687b      	ldr	r3, [r7, #4]
 800cea8:	685b      	ldr	r3, [r3, #4]
 800ceaa:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 800ceac:	69fb      	ldr	r3, [r7, #28]
 800ceae:	685b      	ldr	r3, [r3, #4]
 800ceb0:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 800ceb2:	697b      	ldr	r3, [r7, #20]
 800ceb4:	78fa      	ldrb	r2, [r7, #3]
 800ceb6:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 800ceb8:	697b      	ldr	r3, [r7, #20]
 800ceba:	78ba      	ldrb	r2, [r7, #2]
 800cebc:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 800cebe:	697b      	ldr	r3, [r7, #20]
 800cec0:	2200      	movs	r2, #0
 800cec2:	711a      	strb	r2, [r3, #4]
 800cec4:	2200      	movs	r2, #0
 800cec6:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 800cec8:	697b      	ldr	r3, [r7, #20]
 800ceca:	2200      	movs	r2, #0
 800cecc:	719a      	strb	r2, [r3, #6]
 800cece:	2200      	movs	r2, #0
 800ced0:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 800ced2:	69fb      	ldr	r3, [r7, #28]
 800ced4:	685b      	ldr	r3, [r3, #4]
 800ced6:	f103 0008 	add.w	r0, r3, #8
 800ceda:	687b      	ldr	r3, [r7, #4]
 800cedc:	685b      	ldr	r3, [r3, #4]
 800cede:	221c      	movs	r2, #28
 800cee0:	4619      	mov	r1, r3
 800cee2:	f001 fcd1 	bl	800e888 <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 800cee6:	69bb      	ldr	r3, [r7, #24]
 800cee8:	68db      	ldr	r3, [r3, #12]
 800ceea:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 800ceec:	f107 030c 	add.w	r3, r7, #12
 800cef0:	4618      	mov	r0, r3
 800cef2:	f000 f825 	bl	800cf40 <ip4_route>
 800cef6:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 800cef8:	693b      	ldr	r3, [r7, #16]
 800cefa:	2b00      	cmp	r3, #0
 800cefc:	d011      	beq.n	800cf22 <icmp_send_response+0xb6>
    /* calculate checksum */
    icmphdr->chksum = 0;
 800cefe:	697b      	ldr	r3, [r7, #20]
 800cf00:	2200      	movs	r2, #0
 800cf02:	709a      	strb	r2, [r3, #2]
 800cf04:	2200      	movs	r2, #0
 800cf06:	70da      	strb	r2, [r3, #3]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 800cf08:	f107 020c 	add.w	r2, r7, #12
 800cf0c:	693b      	ldr	r3, [r7, #16]
 800cf0e:	9302      	str	r3, [sp, #8]
 800cf10:	2301      	movs	r3, #1
 800cf12:	9301      	str	r3, [sp, #4]
 800cf14:	2300      	movs	r3, #0
 800cf16:	9300      	str	r3, [sp, #0]
 800cf18:	23ff      	movs	r3, #255	; 0xff
 800cf1a:	2100      	movs	r1, #0
 800cf1c:	69f8      	ldr	r0, [r7, #28]
 800cf1e:	f000 f9cd 	bl	800d2bc <ip4_output_if>
  }
  pbuf_free(q);
 800cf22:	69f8      	ldr	r0, [r7, #28]
 800cf24:	f7f8 fcbc 	bl	80058a0 <pbuf_free>
 800cf28:	e000      	b.n	800cf2c <icmp_send_response+0xc0>
    return;
 800cf2a:	bf00      	nop
}
 800cf2c:	3720      	adds	r7, #32
 800cf2e:	46bd      	mov	sp, r7
 800cf30:	bd80      	pop	{r7, pc}
 800cf32:	bf00      	nop
 800cf34:	0801197c 	.word	0x0801197c
 800cf38:	08011a48 	.word	0x08011a48
 800cf3c:	080119ec 	.word	0x080119ec

0800cf40 <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 800cf40:	b480      	push	{r7}
 800cf42:	b085      	sub	sp, #20
 800cf44:	af00      	add	r7, sp, #0
 800cf46:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 800cf48:	4b33      	ldr	r3, [pc, #204]	; (800d018 <ip4_route+0xd8>)
 800cf4a:	681b      	ldr	r3, [r3, #0]
 800cf4c:	60fb      	str	r3, [r7, #12]
 800cf4e:	e036      	b.n	800cfbe <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800cf50:	68fb      	ldr	r3, [r7, #12]
 800cf52:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800cf56:	f003 0301 	and.w	r3, r3, #1
 800cf5a:	b2db      	uxtb	r3, r3
 800cf5c:	2b00      	cmp	r3, #0
 800cf5e:	d02b      	beq.n	800cfb8 <ip4_route+0x78>
 800cf60:	68fb      	ldr	r3, [r7, #12]
 800cf62:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800cf66:	089b      	lsrs	r3, r3, #2
 800cf68:	f003 0301 	and.w	r3, r3, #1
 800cf6c:	b2db      	uxtb	r3, r3
 800cf6e:	2b00      	cmp	r3, #0
 800cf70:	d022      	beq.n	800cfb8 <ip4_route+0x78>
 800cf72:	68fb      	ldr	r3, [r7, #12]
 800cf74:	3304      	adds	r3, #4
 800cf76:	681b      	ldr	r3, [r3, #0]
 800cf78:	2b00      	cmp	r3, #0
 800cf7a:	d01d      	beq.n	800cfb8 <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 800cf7c:	687b      	ldr	r3, [r7, #4]
 800cf7e:	681a      	ldr	r2, [r3, #0]
 800cf80:	68fb      	ldr	r3, [r7, #12]
 800cf82:	3304      	adds	r3, #4
 800cf84:	681b      	ldr	r3, [r3, #0]
 800cf86:	405a      	eors	r2, r3
 800cf88:	68fb      	ldr	r3, [r7, #12]
 800cf8a:	3308      	adds	r3, #8
 800cf8c:	681b      	ldr	r3, [r3, #0]
 800cf8e:	4013      	ands	r3, r2
 800cf90:	2b00      	cmp	r3, #0
 800cf92:	d101      	bne.n	800cf98 <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 800cf94:	68fb      	ldr	r3, [r7, #12]
 800cf96:	e038      	b.n	800d00a <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 800cf98:	68fb      	ldr	r3, [r7, #12]
 800cf9a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800cf9e:	f003 0302 	and.w	r3, r3, #2
 800cfa2:	2b00      	cmp	r3, #0
 800cfa4:	d108      	bne.n	800cfb8 <ip4_route+0x78>
 800cfa6:	687b      	ldr	r3, [r7, #4]
 800cfa8:	681a      	ldr	r2, [r3, #0]
 800cfaa:	68fb      	ldr	r3, [r7, #12]
 800cfac:	330c      	adds	r3, #12
 800cfae:	681b      	ldr	r3, [r3, #0]
 800cfb0:	429a      	cmp	r2, r3
 800cfb2:	d101      	bne.n	800cfb8 <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 800cfb4:	68fb      	ldr	r3, [r7, #12]
 800cfb6:	e028      	b.n	800d00a <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 800cfb8:	68fb      	ldr	r3, [r7, #12]
 800cfba:	681b      	ldr	r3, [r3, #0]
 800cfbc:	60fb      	str	r3, [r7, #12]
 800cfbe:	68fb      	ldr	r3, [r7, #12]
 800cfc0:	2b00      	cmp	r3, #0
 800cfc2:	d1c5      	bne.n	800cf50 <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 800cfc4:	4b15      	ldr	r3, [pc, #84]	; (800d01c <ip4_route+0xdc>)
 800cfc6:	681b      	ldr	r3, [r3, #0]
 800cfc8:	2b00      	cmp	r3, #0
 800cfca:	d01a      	beq.n	800d002 <ip4_route+0xc2>
 800cfcc:	4b13      	ldr	r3, [pc, #76]	; (800d01c <ip4_route+0xdc>)
 800cfce:	681b      	ldr	r3, [r3, #0]
 800cfd0:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800cfd4:	f003 0301 	and.w	r3, r3, #1
 800cfd8:	2b00      	cmp	r3, #0
 800cfda:	d012      	beq.n	800d002 <ip4_route+0xc2>
 800cfdc:	4b0f      	ldr	r3, [pc, #60]	; (800d01c <ip4_route+0xdc>)
 800cfde:	681b      	ldr	r3, [r3, #0]
 800cfe0:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800cfe4:	f003 0304 	and.w	r3, r3, #4
 800cfe8:	2b00      	cmp	r3, #0
 800cfea:	d00a      	beq.n	800d002 <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 800cfec:	4b0b      	ldr	r3, [pc, #44]	; (800d01c <ip4_route+0xdc>)
 800cfee:	681b      	ldr	r3, [r3, #0]
 800cff0:	3304      	adds	r3, #4
 800cff2:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 800cff4:	2b00      	cmp	r3, #0
 800cff6:	d004      	beq.n	800d002 <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 800cff8:	687b      	ldr	r3, [r7, #4]
 800cffa:	681b      	ldr	r3, [r3, #0]
 800cffc:	b2db      	uxtb	r3, r3
 800cffe:	2b7f      	cmp	r3, #127	; 0x7f
 800d000:	d101      	bne.n	800d006 <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 800d002:	2300      	movs	r3, #0
 800d004:	e001      	b.n	800d00a <ip4_route+0xca>
  }

  return netif_default;
 800d006:	4b05      	ldr	r3, [pc, #20]	; (800d01c <ip4_route+0xdc>)
 800d008:	681b      	ldr	r3, [r3, #0]
}
 800d00a:	4618      	mov	r0, r3
 800d00c:	3714      	adds	r7, #20
 800d00e:	46bd      	mov	sp, r7
 800d010:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d014:	4770      	bx	lr
 800d016:	bf00      	nop
 800d018:	20008274 	.word	0x20008274
 800d01c:	20008278 	.word	0x20008278

0800d020 <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 800d020:	b580      	push	{r7, lr}
 800d022:	b082      	sub	sp, #8
 800d024:	af00      	add	r7, sp, #0
 800d026:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 800d028:	687b      	ldr	r3, [r7, #4]
 800d02a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800d02e:	f003 0301 	and.w	r3, r3, #1
 800d032:	b2db      	uxtb	r3, r3
 800d034:	2b00      	cmp	r3, #0
 800d036:	d016      	beq.n	800d066 <ip4_input_accept+0x46>
 800d038:	687b      	ldr	r3, [r7, #4]
 800d03a:	3304      	adds	r3, #4
 800d03c:	681b      	ldr	r3, [r3, #0]
 800d03e:	2b00      	cmp	r3, #0
 800d040:	d011      	beq.n	800d066 <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 800d042:	4b0b      	ldr	r3, [pc, #44]	; (800d070 <ip4_input_accept+0x50>)
 800d044:	695a      	ldr	r2, [r3, #20]
 800d046:	687b      	ldr	r3, [r7, #4]
 800d048:	3304      	adds	r3, #4
 800d04a:	681b      	ldr	r3, [r3, #0]
 800d04c:	429a      	cmp	r2, r3
 800d04e:	d008      	beq.n	800d062 <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 800d050:	4b07      	ldr	r3, [pc, #28]	; (800d070 <ip4_input_accept+0x50>)
 800d052:	695b      	ldr	r3, [r3, #20]
 800d054:	6879      	ldr	r1, [r7, #4]
 800d056:	4618      	mov	r0, r3
 800d058:	f000 fa08 	bl	800d46c <ip4_addr_isbroadcast_u32>
 800d05c:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 800d05e:	2b00      	cmp	r3, #0
 800d060:	d001      	beq.n	800d066 <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 800d062:	2301      	movs	r3, #1
 800d064:	e000      	b.n	800d068 <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 800d066:	2300      	movs	r3, #0
}
 800d068:	4618      	mov	r0, r3
 800d06a:	3708      	adds	r7, #8
 800d06c:	46bd      	mov	sp, r7
 800d06e:	bd80      	pop	{r7, pc}
 800d070:	20004d10 	.word	0x20004d10

0800d074 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 800d074:	b580      	push	{r7, lr}
 800d076:	b086      	sub	sp, #24
 800d078:	af00      	add	r7, sp, #0
 800d07a:	6078      	str	r0, [r7, #4]
 800d07c:	6039      	str	r1, [r7, #0]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 800d07e:	687b      	ldr	r3, [r7, #4]
 800d080:	685b      	ldr	r3, [r3, #4]
 800d082:	617b      	str	r3, [r7, #20]
  if (IPH_V(iphdr) != 4) {
 800d084:	697b      	ldr	r3, [r7, #20]
 800d086:	781b      	ldrb	r3, [r3, #0]
 800d088:	091b      	lsrs	r3, r3, #4
 800d08a:	b2db      	uxtb	r3, r3
 800d08c:	2b04      	cmp	r3, #4
 800d08e:	d004      	beq.n	800d09a <ip4_input+0x26>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 800d090:	6878      	ldr	r0, [r7, #4]
 800d092:	f7f8 fc05 	bl	80058a0 <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 800d096:	2300      	movs	r3, #0
 800d098:	e107      	b.n	800d2aa <ip4_input+0x236>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 800d09a:	697b      	ldr	r3, [r7, #20]
 800d09c:	781b      	ldrb	r3, [r3, #0]
 800d09e:	f003 030f 	and.w	r3, r3, #15
 800d0a2:	b2db      	uxtb	r3, r3
 800d0a4:	009b      	lsls	r3, r3, #2
 800d0a6:	b2db      	uxtb	r3, r3
 800d0a8:	81fb      	strh	r3, [r7, #14]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 800d0aa:	697b      	ldr	r3, [r7, #20]
 800d0ac:	885b      	ldrh	r3, [r3, #2]
 800d0ae:	b29b      	uxth	r3, r3
 800d0b0:	4618      	mov	r0, r3
 800d0b2:	f7f7 f897 	bl	80041e4 <lwip_htons>
 800d0b6:	4603      	mov	r3, r0
 800d0b8:	81bb      	strh	r3, [r7, #12]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 800d0ba:	687b      	ldr	r3, [r7, #4]
 800d0bc:	891b      	ldrh	r3, [r3, #8]
 800d0be:	89ba      	ldrh	r2, [r7, #12]
 800d0c0:	429a      	cmp	r2, r3
 800d0c2:	d204      	bcs.n	800d0ce <ip4_input+0x5a>
    pbuf_realloc(p, iphdr_len);
 800d0c4:	89bb      	ldrh	r3, [r7, #12]
 800d0c6:	4619      	mov	r1, r3
 800d0c8:	6878      	ldr	r0, [r7, #4]
 800d0ca:	f7f8 fa63 	bl	8005594 <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 800d0ce:	687b      	ldr	r3, [r7, #4]
 800d0d0:	895b      	ldrh	r3, [r3, #10]
 800d0d2:	89fa      	ldrh	r2, [r7, #14]
 800d0d4:	429a      	cmp	r2, r3
 800d0d6:	d807      	bhi.n	800d0e8 <ip4_input+0x74>
 800d0d8:	687b      	ldr	r3, [r7, #4]
 800d0da:	891b      	ldrh	r3, [r3, #8]
 800d0dc:	89ba      	ldrh	r2, [r7, #12]
 800d0de:	429a      	cmp	r2, r3
 800d0e0:	d802      	bhi.n	800d0e8 <ip4_input+0x74>
 800d0e2:	89fb      	ldrh	r3, [r7, #14]
 800d0e4:	2b13      	cmp	r3, #19
 800d0e6:	d804      	bhi.n	800d0f2 <ip4_input+0x7e>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 800d0e8:	6878      	ldr	r0, [r7, #4]
 800d0ea:	f7f8 fbd9 	bl	80058a0 <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 800d0ee:	2300      	movs	r3, #0
 800d0f0:	e0db      	b.n	800d2aa <ip4_input+0x236>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 800d0f2:	697b      	ldr	r3, [r7, #20]
 800d0f4:	691b      	ldr	r3, [r3, #16]
 800d0f6:	4a6f      	ldr	r2, [pc, #444]	; (800d2b4 <ip4_input+0x240>)
 800d0f8:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 800d0fa:	697b      	ldr	r3, [r7, #20]
 800d0fc:	68db      	ldr	r3, [r3, #12]
 800d0fe:	4a6d      	ldr	r2, [pc, #436]	; (800d2b4 <ip4_input+0x240>)
 800d100:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800d102:	4b6c      	ldr	r3, [pc, #432]	; (800d2b4 <ip4_input+0x240>)
 800d104:	695b      	ldr	r3, [r3, #20]
 800d106:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800d10a:	2be0      	cmp	r3, #224	; 0xe0
 800d10c:	d112      	bne.n	800d134 <ip4_input+0xc0>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 800d10e:	683b      	ldr	r3, [r7, #0]
 800d110:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800d114:	f003 0301 	and.w	r3, r3, #1
 800d118:	b2db      	uxtb	r3, r3
 800d11a:	2b00      	cmp	r3, #0
 800d11c:	d007      	beq.n	800d12e <ip4_input+0xba>
 800d11e:	683b      	ldr	r3, [r7, #0]
 800d120:	3304      	adds	r3, #4
 800d122:	681b      	ldr	r3, [r3, #0]
 800d124:	2b00      	cmp	r3, #0
 800d126:	d002      	beq.n	800d12e <ip4_input+0xba>
      netif = inp;
 800d128:	683b      	ldr	r3, [r7, #0]
 800d12a:	613b      	str	r3, [r7, #16]
 800d12c:	e02a      	b.n	800d184 <ip4_input+0x110>
    } else {
      netif = NULL;
 800d12e:	2300      	movs	r3, #0
 800d130:	613b      	str	r3, [r7, #16]
 800d132:	e027      	b.n	800d184 <ip4_input+0x110>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 800d134:	6838      	ldr	r0, [r7, #0]
 800d136:	f7ff ff73 	bl	800d020 <ip4_input_accept>
 800d13a:	4603      	mov	r3, r0
 800d13c:	2b00      	cmp	r3, #0
 800d13e:	d002      	beq.n	800d146 <ip4_input+0xd2>
      netif = inp;
 800d140:	683b      	ldr	r3, [r7, #0]
 800d142:	613b      	str	r3, [r7, #16]
 800d144:	e01e      	b.n	800d184 <ip4_input+0x110>
    } else {
      netif = NULL;
 800d146:	2300      	movs	r3, #0
 800d148:	613b      	str	r3, [r7, #16]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 800d14a:	4b5a      	ldr	r3, [pc, #360]	; (800d2b4 <ip4_input+0x240>)
 800d14c:	695b      	ldr	r3, [r3, #20]
 800d14e:	b2db      	uxtb	r3, r3
 800d150:	2b7f      	cmp	r3, #127	; 0x7f
 800d152:	d017      	beq.n	800d184 <ip4_input+0x110>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 800d154:	4b58      	ldr	r3, [pc, #352]	; (800d2b8 <ip4_input+0x244>)
 800d156:	681b      	ldr	r3, [r3, #0]
 800d158:	613b      	str	r3, [r7, #16]
 800d15a:	e00e      	b.n	800d17a <ip4_input+0x106>
          if (netif == inp) {
 800d15c:	693a      	ldr	r2, [r7, #16]
 800d15e:	683b      	ldr	r3, [r7, #0]
 800d160:	429a      	cmp	r2, r3
 800d162:	d006      	beq.n	800d172 <ip4_input+0xfe>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 800d164:	6938      	ldr	r0, [r7, #16]
 800d166:	f7ff ff5b 	bl	800d020 <ip4_input_accept>
 800d16a:	4603      	mov	r3, r0
 800d16c:	2b00      	cmp	r3, #0
 800d16e:	d108      	bne.n	800d182 <ip4_input+0x10e>
 800d170:	e000      	b.n	800d174 <ip4_input+0x100>
            continue;
 800d172:	bf00      	nop
        NETIF_FOREACH(netif) {
 800d174:	693b      	ldr	r3, [r7, #16]
 800d176:	681b      	ldr	r3, [r3, #0]
 800d178:	613b      	str	r3, [r7, #16]
 800d17a:	693b      	ldr	r3, [r7, #16]
 800d17c:	2b00      	cmp	r3, #0
 800d17e:	d1ed      	bne.n	800d15c <ip4_input+0xe8>
 800d180:	e000      	b.n	800d184 <ip4_input+0x110>
            break;
 800d182:	bf00      	nop
      && !ip4_addr_isany_val(*ip4_current_src_addr())
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 800d184:	4b4b      	ldr	r3, [pc, #300]	; (800d2b4 <ip4_input+0x240>)
 800d186:	691b      	ldr	r3, [r3, #16]
 800d188:	6839      	ldr	r1, [r7, #0]
 800d18a:	4618      	mov	r0, r3
 800d18c:	f000 f96e 	bl	800d46c <ip4_addr_isbroadcast_u32>
 800d190:	4603      	mov	r3, r0
 800d192:	2b00      	cmp	r3, #0
 800d194:	d105      	bne.n	800d1a2 <ip4_input+0x12e>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 800d196:	4b47      	ldr	r3, [pc, #284]	; (800d2b4 <ip4_input+0x240>)
 800d198:	691b      	ldr	r3, [r3, #16]
 800d19a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 800d19e:	2be0      	cmp	r3, #224	; 0xe0
 800d1a0:	d104      	bne.n	800d1ac <ip4_input+0x138>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 800d1a2:	6878      	ldr	r0, [r7, #4]
 800d1a4:	f7f8 fb7c 	bl	80058a0 <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 800d1a8:	2300      	movs	r3, #0
 800d1aa:	e07e      	b.n	800d2aa <ip4_input+0x236>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 800d1ac:	693b      	ldr	r3, [r7, #16]
 800d1ae:	2b00      	cmp	r3, #0
 800d1b0:	d104      	bne.n	800d1bc <ip4_input+0x148>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 800d1b2:	6878      	ldr	r0, [r7, #4]
 800d1b4:	f7f8 fb74 	bl	80058a0 <pbuf_free>
    return ERR_OK;
 800d1b8:	2300      	movs	r3, #0
 800d1ba:	e076      	b.n	800d2aa <ip4_input+0x236>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 800d1bc:	697b      	ldr	r3, [r7, #20]
 800d1be:	88db      	ldrh	r3, [r3, #6]
 800d1c0:	b29b      	uxth	r3, r3
 800d1c2:	461a      	mov	r2, r3
 800d1c4:	f64f 733f 	movw	r3, #65343	; 0xff3f
 800d1c8:	4013      	ands	r3, r2
 800d1ca:	2b00      	cmp	r3, #0
 800d1cc:	d00b      	beq.n	800d1e6 <ip4_input+0x172>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 800d1ce:	6878      	ldr	r0, [r7, #4]
 800d1d0:	f000 fc92 	bl	800daf8 <ip4_reass>
 800d1d4:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 800d1d6:	687b      	ldr	r3, [r7, #4]
 800d1d8:	2b00      	cmp	r3, #0
 800d1da:	d101      	bne.n	800d1e0 <ip4_input+0x16c>
      return ERR_OK;
 800d1dc:	2300      	movs	r3, #0
 800d1de:	e064      	b.n	800d2aa <ip4_input+0x236>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 800d1e0:	687b      	ldr	r3, [r7, #4]
 800d1e2:	685b      	ldr	r3, [r3, #4]
 800d1e4:	617b      	str	r3, [r7, #20]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 800d1e6:	4a33      	ldr	r2, [pc, #204]	; (800d2b4 <ip4_input+0x240>)
 800d1e8:	693b      	ldr	r3, [r7, #16]
 800d1ea:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 800d1ec:	4a31      	ldr	r2, [pc, #196]	; (800d2b4 <ip4_input+0x240>)
 800d1ee:	683b      	ldr	r3, [r7, #0]
 800d1f0:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 800d1f2:	4a30      	ldr	r2, [pc, #192]	; (800d2b4 <ip4_input+0x240>)
 800d1f4:	697b      	ldr	r3, [r7, #20]
 800d1f6:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 800d1f8:	697b      	ldr	r3, [r7, #20]
 800d1fa:	781b      	ldrb	r3, [r3, #0]
 800d1fc:	f003 030f 	and.w	r3, r3, #15
 800d200:	b2db      	uxtb	r3, r3
 800d202:	009b      	lsls	r3, r3, #2
 800d204:	b2db      	uxtb	r3, r3
 800d206:	b29a      	uxth	r2, r3
 800d208:	4b2a      	ldr	r3, [pc, #168]	; (800d2b4 <ip4_input+0x240>)
 800d20a:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 800d20c:	89fb      	ldrh	r3, [r7, #14]
 800d20e:	4619      	mov	r1, r3
 800d210:	6878      	ldr	r0, [r7, #4]
 800d212:	f7f8 fabf 	bl	8005794 <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 800d216:	697b      	ldr	r3, [r7, #20]
 800d218:	7a5b      	ldrb	r3, [r3, #9]
 800d21a:	2b11      	cmp	r3, #17
 800d21c:	d006      	beq.n	800d22c <ip4_input+0x1b8>
 800d21e:	2b11      	cmp	r3, #17
 800d220:	dc13      	bgt.n	800d24a <ip4_input+0x1d6>
 800d222:	2b01      	cmp	r3, #1
 800d224:	d00c      	beq.n	800d240 <ip4_input+0x1cc>
 800d226:	2b06      	cmp	r3, #6
 800d228:	d005      	beq.n	800d236 <ip4_input+0x1c2>
 800d22a:	e00e      	b.n	800d24a <ip4_input+0x1d6>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 800d22c:	6839      	ldr	r1, [r7, #0]
 800d22e:	6878      	ldr	r0, [r7, #4]
 800d230:	f7fe f928 	bl	800b484 <udp_input>
        break;
 800d234:	e026      	b.n	800d284 <ip4_input+0x210>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 800d236:	6839      	ldr	r1, [r7, #0]
 800d238:	6878      	ldr	r0, [r7, #4]
 800d23a:	f7fa f969 	bl	8007510 <tcp_input>
        break;
 800d23e:	e021      	b.n	800d284 <ip4_input+0x210>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 800d240:	6839      	ldr	r1, [r7, #0]
 800d242:	6878      	ldr	r0, [r7, #4]
 800d244:	f7ff fcee 	bl	800cc24 <icmp_input>
        break;
 800d248:	e01c      	b.n	800d284 <ip4_input+0x210>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 800d24a:	4b1a      	ldr	r3, [pc, #104]	; (800d2b4 <ip4_input+0x240>)
 800d24c:	695b      	ldr	r3, [r3, #20]
 800d24e:	6939      	ldr	r1, [r7, #16]
 800d250:	4618      	mov	r0, r3
 800d252:	f000 f90b 	bl	800d46c <ip4_addr_isbroadcast_u32>
 800d256:	4603      	mov	r3, r0
 800d258:	2b00      	cmp	r3, #0
 800d25a:	d10f      	bne.n	800d27c <ip4_input+0x208>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800d25c:	4b15      	ldr	r3, [pc, #84]	; (800d2b4 <ip4_input+0x240>)
 800d25e:	695b      	ldr	r3, [r3, #20]
 800d260:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 800d264:	2be0      	cmp	r3, #224	; 0xe0
 800d266:	d009      	beq.n	800d27c <ip4_input+0x208>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 800d268:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800d26c:	4619      	mov	r1, r3
 800d26e:	6878      	ldr	r0, [r7, #4]
 800d270:	f7f8 fb03 	bl	800587a <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 800d274:	2102      	movs	r1, #2
 800d276:	6878      	ldr	r0, [r7, #4]
 800d278:	f7ff fdd8 	bl	800ce2c <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 800d27c:	6878      	ldr	r0, [r7, #4]
 800d27e:	f7f8 fb0f 	bl	80058a0 <pbuf_free>
        break;
 800d282:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 800d284:	4b0b      	ldr	r3, [pc, #44]	; (800d2b4 <ip4_input+0x240>)
 800d286:	2200      	movs	r2, #0
 800d288:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 800d28a:	4b0a      	ldr	r3, [pc, #40]	; (800d2b4 <ip4_input+0x240>)
 800d28c:	2200      	movs	r2, #0
 800d28e:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 800d290:	4b08      	ldr	r3, [pc, #32]	; (800d2b4 <ip4_input+0x240>)
 800d292:	2200      	movs	r2, #0
 800d294:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 800d296:	4b07      	ldr	r3, [pc, #28]	; (800d2b4 <ip4_input+0x240>)
 800d298:	2200      	movs	r2, #0
 800d29a:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 800d29c:	4b05      	ldr	r3, [pc, #20]	; (800d2b4 <ip4_input+0x240>)
 800d29e:	2200      	movs	r2, #0
 800d2a0:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 800d2a2:	4b04      	ldr	r3, [pc, #16]	; (800d2b4 <ip4_input+0x240>)
 800d2a4:	2200      	movs	r2, #0
 800d2a6:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 800d2a8:	2300      	movs	r3, #0
}
 800d2aa:	4618      	mov	r0, r3
 800d2ac:	3718      	adds	r7, #24
 800d2ae:	46bd      	mov	sp, r7
 800d2b0:	bd80      	pop	{r7, pc}
 800d2b2:	bf00      	nop
 800d2b4:	20004d10 	.word	0x20004d10
 800d2b8:	20008274 	.word	0x20008274

0800d2bc <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 800d2bc:	b580      	push	{r7, lr}
 800d2be:	b08a      	sub	sp, #40	; 0x28
 800d2c0:	af04      	add	r7, sp, #16
 800d2c2:	60f8      	str	r0, [r7, #12]
 800d2c4:	60b9      	str	r1, [r7, #8]
 800d2c6:	607a      	str	r2, [r7, #4]
 800d2c8:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 800d2ca:	68bb      	ldr	r3, [r7, #8]
 800d2cc:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 800d2ce:	687b      	ldr	r3, [r7, #4]
 800d2d0:	2b00      	cmp	r3, #0
 800d2d2:	d009      	beq.n	800d2e8 <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 800d2d4:	68bb      	ldr	r3, [r7, #8]
 800d2d6:	2b00      	cmp	r3, #0
 800d2d8:	d003      	beq.n	800d2e2 <ip4_output_if+0x26>
 800d2da:	68bb      	ldr	r3, [r7, #8]
 800d2dc:	681b      	ldr	r3, [r3, #0]
 800d2de:	2b00      	cmp	r3, #0
 800d2e0:	d102      	bne.n	800d2e8 <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 800d2e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d2e4:	3304      	adds	r3, #4
 800d2e6:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 800d2e8:	78fa      	ldrb	r2, [r7, #3]
 800d2ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d2ec:	9302      	str	r3, [sp, #8]
 800d2ee:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800d2f2:	9301      	str	r3, [sp, #4]
 800d2f4:	f897 3020 	ldrb.w	r3, [r7, #32]
 800d2f8:	9300      	str	r3, [sp, #0]
 800d2fa:	4613      	mov	r3, r2
 800d2fc:	687a      	ldr	r2, [r7, #4]
 800d2fe:	6979      	ldr	r1, [r7, #20]
 800d300:	68f8      	ldr	r0, [r7, #12]
 800d302:	f000 f805 	bl	800d310 <ip4_output_if_src>
 800d306:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 800d308:	4618      	mov	r0, r3
 800d30a:	3718      	adds	r7, #24
 800d30c:	46bd      	mov	sp, r7
 800d30e:	bd80      	pop	{r7, pc}

0800d310 <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 800d310:	b580      	push	{r7, lr}
 800d312:	b088      	sub	sp, #32
 800d314:	af00      	add	r7, sp, #0
 800d316:	60f8      	str	r0, [r7, #12]
 800d318:	60b9      	str	r1, [r7, #8]
 800d31a:	607a      	str	r2, [r7, #4]
 800d31c:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 800d31e:	68fb      	ldr	r3, [r7, #12]
 800d320:	7b9b      	ldrb	r3, [r3, #14]
 800d322:	2b01      	cmp	r3, #1
 800d324:	d006      	beq.n	800d334 <ip4_output_if_src+0x24>
 800d326:	4b4b      	ldr	r3, [pc, #300]	; (800d454 <ip4_output_if_src+0x144>)
 800d328:	f44f 7255 	mov.w	r2, #852	; 0x354
 800d32c:	494a      	ldr	r1, [pc, #296]	; (800d458 <ip4_output_if_src+0x148>)
 800d32e:	484b      	ldr	r0, [pc, #300]	; (800d45c <ip4_output_if_src+0x14c>)
 800d330:	f001 f8e0 	bl	800e4f4 <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 800d334:	687b      	ldr	r3, [r7, #4]
 800d336:	2b00      	cmp	r3, #0
 800d338:	d060      	beq.n	800d3fc <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 800d33a:	2314      	movs	r3, #20
 800d33c:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 800d33e:	2114      	movs	r1, #20
 800d340:	68f8      	ldr	r0, [r7, #12]
 800d342:	f7f8 fa17 	bl	8005774 <pbuf_add_header>
 800d346:	4603      	mov	r3, r0
 800d348:	2b00      	cmp	r3, #0
 800d34a:	d002      	beq.n	800d352 <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 800d34c:	f06f 0301 	mvn.w	r3, #1
 800d350:	e07c      	b.n	800d44c <ip4_output_if_src+0x13c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 800d352:	68fb      	ldr	r3, [r7, #12]
 800d354:	685b      	ldr	r3, [r3, #4]
 800d356:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 800d358:	68fb      	ldr	r3, [r7, #12]
 800d35a:	895b      	ldrh	r3, [r3, #10]
 800d35c:	2b13      	cmp	r3, #19
 800d35e:	d806      	bhi.n	800d36e <ip4_output_if_src+0x5e>
 800d360:	4b3c      	ldr	r3, [pc, #240]	; (800d454 <ip4_output_if_src+0x144>)
 800d362:	f44f 7262 	mov.w	r2, #904	; 0x388
 800d366:	493e      	ldr	r1, [pc, #248]	; (800d460 <ip4_output_if_src+0x150>)
 800d368:	483c      	ldr	r0, [pc, #240]	; (800d45c <ip4_output_if_src+0x14c>)
 800d36a:	f001 f8c3 	bl	800e4f4 <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 800d36e:	69fb      	ldr	r3, [r7, #28]
 800d370:	78fa      	ldrb	r2, [r7, #3]
 800d372:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 800d374:	69fb      	ldr	r3, [r7, #28]
 800d376:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 800d37a:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 800d37c:	687b      	ldr	r3, [r7, #4]
 800d37e:	681a      	ldr	r2, [r3, #0]
 800d380:	69fb      	ldr	r3, [r7, #28]
 800d382:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 800d384:	8b7b      	ldrh	r3, [r7, #26]
 800d386:	089b      	lsrs	r3, r3, #2
 800d388:	b29b      	uxth	r3, r3
 800d38a:	b2db      	uxtb	r3, r3
 800d38c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d390:	b2da      	uxtb	r2, r3
 800d392:	69fb      	ldr	r3, [r7, #28]
 800d394:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 800d396:	69fb      	ldr	r3, [r7, #28]
 800d398:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 800d39c:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 800d39e:	68fb      	ldr	r3, [r7, #12]
 800d3a0:	891b      	ldrh	r3, [r3, #8]
 800d3a2:	4618      	mov	r0, r3
 800d3a4:	f7f6 ff1e 	bl	80041e4 <lwip_htons>
 800d3a8:	4603      	mov	r3, r0
 800d3aa:	461a      	mov	r2, r3
 800d3ac:	69fb      	ldr	r3, [r7, #28]
 800d3ae:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 800d3b0:	69fb      	ldr	r3, [r7, #28]
 800d3b2:	2200      	movs	r2, #0
 800d3b4:	719a      	strb	r2, [r3, #6]
 800d3b6:	2200      	movs	r2, #0
 800d3b8:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 800d3ba:	4b2a      	ldr	r3, [pc, #168]	; (800d464 <ip4_output_if_src+0x154>)
 800d3bc:	881b      	ldrh	r3, [r3, #0]
 800d3be:	4618      	mov	r0, r3
 800d3c0:	f7f6 ff10 	bl	80041e4 <lwip_htons>
 800d3c4:	4603      	mov	r3, r0
 800d3c6:	461a      	mov	r2, r3
 800d3c8:	69fb      	ldr	r3, [r7, #28]
 800d3ca:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 800d3cc:	4b25      	ldr	r3, [pc, #148]	; (800d464 <ip4_output_if_src+0x154>)
 800d3ce:	881b      	ldrh	r3, [r3, #0]
 800d3d0:	3301      	adds	r3, #1
 800d3d2:	b29a      	uxth	r2, r3
 800d3d4:	4b23      	ldr	r3, [pc, #140]	; (800d464 <ip4_output_if_src+0x154>)
 800d3d6:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 800d3d8:	68bb      	ldr	r3, [r7, #8]
 800d3da:	2b00      	cmp	r3, #0
 800d3dc:	d104      	bne.n	800d3e8 <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 800d3de:	4b22      	ldr	r3, [pc, #136]	; (800d468 <ip4_output_if_src+0x158>)
 800d3e0:	681a      	ldr	r2, [r3, #0]
 800d3e2:	69fb      	ldr	r3, [r7, #28]
 800d3e4:	60da      	str	r2, [r3, #12]
 800d3e6:	e003      	b.n	800d3f0 <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 800d3e8:	68bb      	ldr	r3, [r7, #8]
 800d3ea:	681a      	ldr	r2, [r3, #0]
 800d3ec:	69fb      	ldr	r3, [r7, #28]
 800d3ee:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 800d3f0:	69fb      	ldr	r3, [r7, #28]
 800d3f2:	2200      	movs	r2, #0
 800d3f4:	729a      	strb	r2, [r3, #10]
 800d3f6:	2200      	movs	r2, #0
 800d3f8:	72da      	strb	r2, [r3, #11]
 800d3fa:	e00f      	b.n	800d41c <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 800d3fc:	68fb      	ldr	r3, [r7, #12]
 800d3fe:	895b      	ldrh	r3, [r3, #10]
 800d400:	2b13      	cmp	r3, #19
 800d402:	d802      	bhi.n	800d40a <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 800d404:	f06f 0301 	mvn.w	r3, #1
 800d408:	e020      	b.n	800d44c <ip4_output_if_src+0x13c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 800d40a:	68fb      	ldr	r3, [r7, #12]
 800d40c:	685b      	ldr	r3, [r3, #4]
 800d40e:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 800d410:	69fb      	ldr	r3, [r7, #28]
 800d412:	691b      	ldr	r3, [r3, #16]
 800d414:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 800d416:	f107 0314 	add.w	r3, r7, #20
 800d41a:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 800d41c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d41e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800d420:	2b00      	cmp	r3, #0
 800d422:	d00c      	beq.n	800d43e <ip4_output_if_src+0x12e>
 800d424:	68fb      	ldr	r3, [r7, #12]
 800d426:	891a      	ldrh	r2, [r3, #8]
 800d428:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d42a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800d42c:	429a      	cmp	r2, r3
 800d42e:	d906      	bls.n	800d43e <ip4_output_if_src+0x12e>
    return ip4_frag(p, netif, dest);
 800d430:	687a      	ldr	r2, [r7, #4]
 800d432:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800d434:	68f8      	ldr	r0, [r7, #12]
 800d436:	f000 fd53 	bl	800dee0 <ip4_frag>
 800d43a:	4603      	mov	r3, r0
 800d43c:	e006      	b.n	800d44c <ip4_output_if_src+0x13c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 800d43e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d440:	695b      	ldr	r3, [r3, #20]
 800d442:	687a      	ldr	r2, [r7, #4]
 800d444:	68f9      	ldr	r1, [r7, #12]
 800d446:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d448:	4798      	blx	r3
 800d44a:	4603      	mov	r3, r0
}
 800d44c:	4618      	mov	r0, r3
 800d44e:	3720      	adds	r7, #32
 800d450:	46bd      	mov	sp, r7
 800d452:	bd80      	pop	{r7, pc}
 800d454:	08011a74 	.word	0x08011a74
 800d458:	08011aa8 	.word	0x08011aa8
 800d45c:	08011ab4 	.word	0x08011ab4
 800d460:	08011adc 	.word	0x08011adc
 800d464:	200083d2 	.word	0x200083d2
 800d468:	08011ebc 	.word	0x08011ebc

0800d46c <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 800d46c:	b480      	push	{r7}
 800d46e:	b085      	sub	sp, #20
 800d470:	af00      	add	r7, sp, #0
 800d472:	6078      	str	r0, [r7, #4]
 800d474:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 800d476:	687b      	ldr	r3, [r7, #4]
 800d478:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 800d47a:	687b      	ldr	r3, [r7, #4]
 800d47c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d480:	d002      	beq.n	800d488 <ip4_addr_isbroadcast_u32+0x1c>
 800d482:	687b      	ldr	r3, [r7, #4]
 800d484:	2b00      	cmp	r3, #0
 800d486:	d101      	bne.n	800d48c <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 800d488:	2301      	movs	r3, #1
 800d48a:	e02a      	b.n	800d4e2 <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 800d48c:	683b      	ldr	r3, [r7, #0]
 800d48e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800d492:	f003 0302 	and.w	r3, r3, #2
 800d496:	2b00      	cmp	r3, #0
 800d498:	d101      	bne.n	800d49e <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 800d49a:	2300      	movs	r3, #0
 800d49c:	e021      	b.n	800d4e2 <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 800d49e:	683b      	ldr	r3, [r7, #0]
 800d4a0:	3304      	adds	r3, #4
 800d4a2:	681b      	ldr	r3, [r3, #0]
 800d4a4:	687a      	ldr	r2, [r7, #4]
 800d4a6:	429a      	cmp	r2, r3
 800d4a8:	d101      	bne.n	800d4ae <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 800d4aa:	2300      	movs	r3, #0
 800d4ac:	e019      	b.n	800d4e2 <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 800d4ae:	68fa      	ldr	r2, [r7, #12]
 800d4b0:	683b      	ldr	r3, [r7, #0]
 800d4b2:	3304      	adds	r3, #4
 800d4b4:	681b      	ldr	r3, [r3, #0]
 800d4b6:	405a      	eors	r2, r3
 800d4b8:	683b      	ldr	r3, [r7, #0]
 800d4ba:	3308      	adds	r3, #8
 800d4bc:	681b      	ldr	r3, [r3, #0]
 800d4be:	4013      	ands	r3, r2
 800d4c0:	2b00      	cmp	r3, #0
 800d4c2:	d10d      	bne.n	800d4e0 <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 800d4c4:	683b      	ldr	r3, [r7, #0]
 800d4c6:	3308      	adds	r3, #8
 800d4c8:	681b      	ldr	r3, [r3, #0]
 800d4ca:	43da      	mvns	r2, r3
 800d4cc:	687b      	ldr	r3, [r7, #4]
 800d4ce:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 800d4d0:	683b      	ldr	r3, [r7, #0]
 800d4d2:	3308      	adds	r3, #8
 800d4d4:	681b      	ldr	r3, [r3, #0]
 800d4d6:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 800d4d8:	429a      	cmp	r2, r3
 800d4da:	d101      	bne.n	800d4e0 <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 800d4dc:	2301      	movs	r3, #1
 800d4de:	e000      	b.n	800d4e2 <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 800d4e0:	2300      	movs	r3, #0
  }
}
 800d4e2:	4618      	mov	r0, r3
 800d4e4:	3714      	adds	r7, #20
 800d4e6:	46bd      	mov	sp, r7
 800d4e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4ec:	4770      	bx	lr
	...

0800d4f0 <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 800d4f0:	b580      	push	{r7, lr}
 800d4f2:	b084      	sub	sp, #16
 800d4f4:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 800d4f6:	2300      	movs	r3, #0
 800d4f8:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 800d4fa:	4b12      	ldr	r3, [pc, #72]	; (800d544 <ip_reass_tmr+0x54>)
 800d4fc:	681b      	ldr	r3, [r3, #0]
 800d4fe:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 800d500:	e018      	b.n	800d534 <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 800d502:	68fb      	ldr	r3, [r7, #12]
 800d504:	7fdb      	ldrb	r3, [r3, #31]
 800d506:	2b00      	cmp	r3, #0
 800d508:	d00b      	beq.n	800d522 <ip_reass_tmr+0x32>
      r->timer--;
 800d50a:	68fb      	ldr	r3, [r7, #12]
 800d50c:	7fdb      	ldrb	r3, [r3, #31]
 800d50e:	3b01      	subs	r3, #1
 800d510:	b2da      	uxtb	r2, r3
 800d512:	68fb      	ldr	r3, [r7, #12]
 800d514:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 800d516:	68fb      	ldr	r3, [r7, #12]
 800d518:	60bb      	str	r3, [r7, #8]
      r = r->next;
 800d51a:	68fb      	ldr	r3, [r7, #12]
 800d51c:	681b      	ldr	r3, [r3, #0]
 800d51e:	60fb      	str	r3, [r7, #12]
 800d520:	e008      	b.n	800d534 <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 800d522:	68fb      	ldr	r3, [r7, #12]
 800d524:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 800d526:	68fb      	ldr	r3, [r7, #12]
 800d528:	681b      	ldr	r3, [r3, #0]
 800d52a:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 800d52c:	68b9      	ldr	r1, [r7, #8]
 800d52e:	6878      	ldr	r0, [r7, #4]
 800d530:	f000 f80a 	bl	800d548 <ip_reass_free_complete_datagram>
  while (r != NULL) {
 800d534:	68fb      	ldr	r3, [r7, #12]
 800d536:	2b00      	cmp	r3, #0
 800d538:	d1e3      	bne.n	800d502 <ip_reass_tmr+0x12>
    }
  }
}
 800d53a:	bf00      	nop
 800d53c:	bf00      	nop
 800d53e:	3710      	adds	r7, #16
 800d540:	46bd      	mov	sp, r7
 800d542:	bd80      	pop	{r7, pc}
 800d544:	200083d4 	.word	0x200083d4

0800d548 <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 800d548:	b580      	push	{r7, lr}
 800d54a:	b088      	sub	sp, #32
 800d54c:	af00      	add	r7, sp, #0
 800d54e:	6078      	str	r0, [r7, #4]
 800d550:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 800d552:	2300      	movs	r3, #0
 800d554:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 800d556:	683a      	ldr	r2, [r7, #0]
 800d558:	687b      	ldr	r3, [r7, #4]
 800d55a:	429a      	cmp	r2, r3
 800d55c:	d105      	bne.n	800d56a <ip_reass_free_complete_datagram+0x22>
 800d55e:	4b45      	ldr	r3, [pc, #276]	; (800d674 <ip_reass_free_complete_datagram+0x12c>)
 800d560:	22ab      	movs	r2, #171	; 0xab
 800d562:	4945      	ldr	r1, [pc, #276]	; (800d678 <ip_reass_free_complete_datagram+0x130>)
 800d564:	4845      	ldr	r0, [pc, #276]	; (800d67c <ip_reass_free_complete_datagram+0x134>)
 800d566:	f000 ffc5 	bl	800e4f4 <iprintf>
  if (prev != NULL) {
 800d56a:	683b      	ldr	r3, [r7, #0]
 800d56c:	2b00      	cmp	r3, #0
 800d56e:	d00a      	beq.n	800d586 <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 800d570:	683b      	ldr	r3, [r7, #0]
 800d572:	681b      	ldr	r3, [r3, #0]
 800d574:	687a      	ldr	r2, [r7, #4]
 800d576:	429a      	cmp	r2, r3
 800d578:	d005      	beq.n	800d586 <ip_reass_free_complete_datagram+0x3e>
 800d57a:	4b3e      	ldr	r3, [pc, #248]	; (800d674 <ip_reass_free_complete_datagram+0x12c>)
 800d57c:	22ad      	movs	r2, #173	; 0xad
 800d57e:	4940      	ldr	r1, [pc, #256]	; (800d680 <ip_reass_free_complete_datagram+0x138>)
 800d580:	483e      	ldr	r0, [pc, #248]	; (800d67c <ip_reass_free_complete_datagram+0x134>)
 800d582:	f000 ffb7 	bl	800e4f4 <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 800d586:	687b      	ldr	r3, [r7, #4]
 800d588:	685b      	ldr	r3, [r3, #4]
 800d58a:	685b      	ldr	r3, [r3, #4]
 800d58c:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 800d58e:	697b      	ldr	r3, [r7, #20]
 800d590:	889b      	ldrh	r3, [r3, #4]
 800d592:	b29b      	uxth	r3, r3
 800d594:	2b00      	cmp	r3, #0
 800d596:	d12a      	bne.n	800d5ee <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 800d598:	687b      	ldr	r3, [r7, #4]
 800d59a:	685b      	ldr	r3, [r3, #4]
 800d59c:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 800d59e:	697b      	ldr	r3, [r7, #20]
 800d5a0:	681a      	ldr	r2, [r3, #0]
 800d5a2:	687b      	ldr	r3, [r7, #4]
 800d5a4:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 800d5a6:	69bb      	ldr	r3, [r7, #24]
 800d5a8:	6858      	ldr	r0, [r3, #4]
 800d5aa:	687b      	ldr	r3, [r7, #4]
 800d5ac:	3308      	adds	r3, #8
 800d5ae:	2214      	movs	r2, #20
 800d5b0:	4619      	mov	r1, r3
 800d5b2:	f001 f969 	bl	800e888 <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 800d5b6:	2101      	movs	r1, #1
 800d5b8:	69b8      	ldr	r0, [r7, #24]
 800d5ba:	f7ff fc47 	bl	800ce4c <icmp_time_exceeded>
    clen = pbuf_clen(p);
 800d5be:	69b8      	ldr	r0, [r7, #24]
 800d5c0:	f7f8 f9f6 	bl	80059b0 <pbuf_clen>
 800d5c4:	4603      	mov	r3, r0
 800d5c6:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 800d5c8:	8bfa      	ldrh	r2, [r7, #30]
 800d5ca:	8a7b      	ldrh	r3, [r7, #18]
 800d5cc:	4413      	add	r3, r2
 800d5ce:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d5d2:	db05      	blt.n	800d5e0 <ip_reass_free_complete_datagram+0x98>
 800d5d4:	4b27      	ldr	r3, [pc, #156]	; (800d674 <ip_reass_free_complete_datagram+0x12c>)
 800d5d6:	22bc      	movs	r2, #188	; 0xbc
 800d5d8:	492a      	ldr	r1, [pc, #168]	; (800d684 <ip_reass_free_complete_datagram+0x13c>)
 800d5da:	4828      	ldr	r0, [pc, #160]	; (800d67c <ip_reass_free_complete_datagram+0x134>)
 800d5dc:	f000 ff8a 	bl	800e4f4 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 800d5e0:	8bfa      	ldrh	r2, [r7, #30]
 800d5e2:	8a7b      	ldrh	r3, [r7, #18]
 800d5e4:	4413      	add	r3, r2
 800d5e6:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 800d5e8:	69b8      	ldr	r0, [r7, #24]
 800d5ea:	f7f8 f959 	bl	80058a0 <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 800d5ee:	687b      	ldr	r3, [r7, #4]
 800d5f0:	685b      	ldr	r3, [r3, #4]
 800d5f2:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 800d5f4:	e01f      	b.n	800d636 <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 800d5f6:	69bb      	ldr	r3, [r7, #24]
 800d5f8:	685b      	ldr	r3, [r3, #4]
 800d5fa:	617b      	str	r3, [r7, #20]
    pcur = p;
 800d5fc:	69bb      	ldr	r3, [r7, #24]
 800d5fe:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 800d600:	697b      	ldr	r3, [r7, #20]
 800d602:	681b      	ldr	r3, [r3, #0]
 800d604:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 800d606:	68f8      	ldr	r0, [r7, #12]
 800d608:	f7f8 f9d2 	bl	80059b0 <pbuf_clen>
 800d60c:	4603      	mov	r3, r0
 800d60e:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 800d610:	8bfa      	ldrh	r2, [r7, #30]
 800d612:	8a7b      	ldrh	r3, [r7, #18]
 800d614:	4413      	add	r3, r2
 800d616:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d61a:	db05      	blt.n	800d628 <ip_reass_free_complete_datagram+0xe0>
 800d61c:	4b15      	ldr	r3, [pc, #84]	; (800d674 <ip_reass_free_complete_datagram+0x12c>)
 800d61e:	22cc      	movs	r2, #204	; 0xcc
 800d620:	4918      	ldr	r1, [pc, #96]	; (800d684 <ip_reass_free_complete_datagram+0x13c>)
 800d622:	4816      	ldr	r0, [pc, #88]	; (800d67c <ip_reass_free_complete_datagram+0x134>)
 800d624:	f000 ff66 	bl	800e4f4 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 800d628:	8bfa      	ldrh	r2, [r7, #30]
 800d62a:	8a7b      	ldrh	r3, [r7, #18]
 800d62c:	4413      	add	r3, r2
 800d62e:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 800d630:	68f8      	ldr	r0, [r7, #12]
 800d632:	f7f8 f935 	bl	80058a0 <pbuf_free>
  while (p != NULL) {
 800d636:	69bb      	ldr	r3, [r7, #24]
 800d638:	2b00      	cmp	r3, #0
 800d63a:	d1dc      	bne.n	800d5f6 <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 800d63c:	6839      	ldr	r1, [r7, #0]
 800d63e:	6878      	ldr	r0, [r7, #4]
 800d640:	f000 f8c2 	bl	800d7c8 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 800d644:	4b10      	ldr	r3, [pc, #64]	; (800d688 <ip_reass_free_complete_datagram+0x140>)
 800d646:	881b      	ldrh	r3, [r3, #0]
 800d648:	8bfa      	ldrh	r2, [r7, #30]
 800d64a:	429a      	cmp	r2, r3
 800d64c:	d905      	bls.n	800d65a <ip_reass_free_complete_datagram+0x112>
 800d64e:	4b09      	ldr	r3, [pc, #36]	; (800d674 <ip_reass_free_complete_datagram+0x12c>)
 800d650:	22d2      	movs	r2, #210	; 0xd2
 800d652:	490e      	ldr	r1, [pc, #56]	; (800d68c <ip_reass_free_complete_datagram+0x144>)
 800d654:	4809      	ldr	r0, [pc, #36]	; (800d67c <ip_reass_free_complete_datagram+0x134>)
 800d656:	f000 ff4d 	bl	800e4f4 <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 800d65a:	4b0b      	ldr	r3, [pc, #44]	; (800d688 <ip_reass_free_complete_datagram+0x140>)
 800d65c:	881a      	ldrh	r2, [r3, #0]
 800d65e:	8bfb      	ldrh	r3, [r7, #30]
 800d660:	1ad3      	subs	r3, r2, r3
 800d662:	b29a      	uxth	r2, r3
 800d664:	4b08      	ldr	r3, [pc, #32]	; (800d688 <ip_reass_free_complete_datagram+0x140>)
 800d666:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 800d668:	8bfb      	ldrh	r3, [r7, #30]
}
 800d66a:	4618      	mov	r0, r3
 800d66c:	3720      	adds	r7, #32
 800d66e:	46bd      	mov	sp, r7
 800d670:	bd80      	pop	{r7, pc}
 800d672:	bf00      	nop
 800d674:	08011b0c 	.word	0x08011b0c
 800d678:	08011b48 	.word	0x08011b48
 800d67c:	08011b54 	.word	0x08011b54
 800d680:	08011b7c 	.word	0x08011b7c
 800d684:	08011b90 	.word	0x08011b90
 800d688:	200083d8 	.word	0x200083d8
 800d68c:	08011bb0 	.word	0x08011bb0

0800d690 <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 800d690:	b580      	push	{r7, lr}
 800d692:	b08a      	sub	sp, #40	; 0x28
 800d694:	af00      	add	r7, sp, #0
 800d696:	6078      	str	r0, [r7, #4]
 800d698:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 800d69a:	2300      	movs	r3, #0
 800d69c:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 800d69e:	2300      	movs	r3, #0
 800d6a0:	623b      	str	r3, [r7, #32]
    prev = NULL;
 800d6a2:	2300      	movs	r3, #0
 800d6a4:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 800d6a6:	2300      	movs	r3, #0
 800d6a8:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 800d6aa:	2300      	movs	r3, #0
 800d6ac:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 800d6ae:	4b28      	ldr	r3, [pc, #160]	; (800d750 <ip_reass_remove_oldest_datagram+0xc0>)
 800d6b0:	681b      	ldr	r3, [r3, #0]
 800d6b2:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 800d6b4:	e030      	b.n	800d718 <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 800d6b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d6b8:	695a      	ldr	r2, [r3, #20]
 800d6ba:	687b      	ldr	r3, [r7, #4]
 800d6bc:	68db      	ldr	r3, [r3, #12]
 800d6be:	429a      	cmp	r2, r3
 800d6c0:	d10c      	bne.n	800d6dc <ip_reass_remove_oldest_datagram+0x4c>
 800d6c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d6c4:	699a      	ldr	r2, [r3, #24]
 800d6c6:	687b      	ldr	r3, [r7, #4]
 800d6c8:	691b      	ldr	r3, [r3, #16]
 800d6ca:	429a      	cmp	r2, r3
 800d6cc:	d106      	bne.n	800d6dc <ip_reass_remove_oldest_datagram+0x4c>
 800d6ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d6d0:	899a      	ldrh	r2, [r3, #12]
 800d6d2:	687b      	ldr	r3, [r7, #4]
 800d6d4:	889b      	ldrh	r3, [r3, #4]
 800d6d6:	b29b      	uxth	r3, r3
 800d6d8:	429a      	cmp	r2, r3
 800d6da:	d014      	beq.n	800d706 <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 800d6dc:	693b      	ldr	r3, [r7, #16]
 800d6de:	3301      	adds	r3, #1
 800d6e0:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 800d6e2:	6a3b      	ldr	r3, [r7, #32]
 800d6e4:	2b00      	cmp	r3, #0
 800d6e6:	d104      	bne.n	800d6f2 <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 800d6e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d6ea:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 800d6ec:	69fb      	ldr	r3, [r7, #28]
 800d6ee:	61bb      	str	r3, [r7, #24]
 800d6f0:	e009      	b.n	800d706 <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 800d6f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d6f4:	7fda      	ldrb	r2, [r3, #31]
 800d6f6:	6a3b      	ldr	r3, [r7, #32]
 800d6f8:	7fdb      	ldrb	r3, [r3, #31]
 800d6fa:	429a      	cmp	r2, r3
 800d6fc:	d803      	bhi.n	800d706 <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 800d6fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d700:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 800d702:	69fb      	ldr	r3, [r7, #28]
 800d704:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 800d706:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d708:	681b      	ldr	r3, [r3, #0]
 800d70a:	2b00      	cmp	r3, #0
 800d70c:	d001      	beq.n	800d712 <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 800d70e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d710:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 800d712:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d714:	681b      	ldr	r3, [r3, #0]
 800d716:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 800d718:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d71a:	2b00      	cmp	r3, #0
 800d71c:	d1cb      	bne.n	800d6b6 <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 800d71e:	6a3b      	ldr	r3, [r7, #32]
 800d720:	2b00      	cmp	r3, #0
 800d722:	d008      	beq.n	800d736 <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 800d724:	69b9      	ldr	r1, [r7, #24]
 800d726:	6a38      	ldr	r0, [r7, #32]
 800d728:	f7ff ff0e 	bl	800d548 <ip_reass_free_complete_datagram>
 800d72c:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 800d72e:	697a      	ldr	r2, [r7, #20]
 800d730:	68fb      	ldr	r3, [r7, #12]
 800d732:	4413      	add	r3, r2
 800d734:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 800d736:	697a      	ldr	r2, [r7, #20]
 800d738:	683b      	ldr	r3, [r7, #0]
 800d73a:	429a      	cmp	r2, r3
 800d73c:	da02      	bge.n	800d744 <ip_reass_remove_oldest_datagram+0xb4>
 800d73e:	693b      	ldr	r3, [r7, #16]
 800d740:	2b01      	cmp	r3, #1
 800d742:	dcac      	bgt.n	800d69e <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 800d744:	697b      	ldr	r3, [r7, #20]
}
 800d746:	4618      	mov	r0, r3
 800d748:	3728      	adds	r7, #40	; 0x28
 800d74a:	46bd      	mov	sp, r7
 800d74c:	bd80      	pop	{r7, pc}
 800d74e:	bf00      	nop
 800d750:	200083d4 	.word	0x200083d4

0800d754 <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 800d754:	b580      	push	{r7, lr}
 800d756:	b084      	sub	sp, #16
 800d758:	af00      	add	r7, sp, #0
 800d75a:	6078      	str	r0, [r7, #4]
 800d75c:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 800d75e:	2004      	movs	r0, #4
 800d760:	f7f7 f9b8 	bl	8004ad4 <memp_malloc>
 800d764:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 800d766:	68fb      	ldr	r3, [r7, #12]
 800d768:	2b00      	cmp	r3, #0
 800d76a:	d110      	bne.n	800d78e <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 800d76c:	6839      	ldr	r1, [r7, #0]
 800d76e:	6878      	ldr	r0, [r7, #4]
 800d770:	f7ff ff8e 	bl	800d690 <ip_reass_remove_oldest_datagram>
 800d774:	4602      	mov	r2, r0
 800d776:	683b      	ldr	r3, [r7, #0]
 800d778:	4293      	cmp	r3, r2
 800d77a:	dc03      	bgt.n	800d784 <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 800d77c:	2004      	movs	r0, #4
 800d77e:	f7f7 f9a9 	bl	8004ad4 <memp_malloc>
 800d782:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 800d784:	68fb      	ldr	r3, [r7, #12]
 800d786:	2b00      	cmp	r3, #0
 800d788:	d101      	bne.n	800d78e <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 800d78a:	2300      	movs	r3, #0
 800d78c:	e016      	b.n	800d7bc <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 800d78e:	2220      	movs	r2, #32
 800d790:	2100      	movs	r1, #0
 800d792:	68f8      	ldr	r0, [r7, #12]
 800d794:	f001 f804 	bl	800e7a0 <memset>
  ipr->timer = IP_REASS_MAXAGE;
 800d798:	68fb      	ldr	r3, [r7, #12]
 800d79a:	220f      	movs	r2, #15
 800d79c:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 800d79e:	4b09      	ldr	r3, [pc, #36]	; (800d7c4 <ip_reass_enqueue_new_datagram+0x70>)
 800d7a0:	681a      	ldr	r2, [r3, #0]
 800d7a2:	68fb      	ldr	r3, [r7, #12]
 800d7a4:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 800d7a6:	4a07      	ldr	r2, [pc, #28]	; (800d7c4 <ip_reass_enqueue_new_datagram+0x70>)
 800d7a8:	68fb      	ldr	r3, [r7, #12]
 800d7aa:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 800d7ac:	68fb      	ldr	r3, [r7, #12]
 800d7ae:	3308      	adds	r3, #8
 800d7b0:	2214      	movs	r2, #20
 800d7b2:	6879      	ldr	r1, [r7, #4]
 800d7b4:	4618      	mov	r0, r3
 800d7b6:	f001 f867 	bl	800e888 <memcpy>
  return ipr;
 800d7ba:	68fb      	ldr	r3, [r7, #12]
}
 800d7bc:	4618      	mov	r0, r3
 800d7be:	3710      	adds	r7, #16
 800d7c0:	46bd      	mov	sp, r7
 800d7c2:	bd80      	pop	{r7, pc}
 800d7c4:	200083d4 	.word	0x200083d4

0800d7c8 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 800d7c8:	b580      	push	{r7, lr}
 800d7ca:	b082      	sub	sp, #8
 800d7cc:	af00      	add	r7, sp, #0
 800d7ce:	6078      	str	r0, [r7, #4]
 800d7d0:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 800d7d2:	4b10      	ldr	r3, [pc, #64]	; (800d814 <ip_reass_dequeue_datagram+0x4c>)
 800d7d4:	681b      	ldr	r3, [r3, #0]
 800d7d6:	687a      	ldr	r2, [r7, #4]
 800d7d8:	429a      	cmp	r2, r3
 800d7da:	d104      	bne.n	800d7e6 <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 800d7dc:	687b      	ldr	r3, [r7, #4]
 800d7de:	681b      	ldr	r3, [r3, #0]
 800d7e0:	4a0c      	ldr	r2, [pc, #48]	; (800d814 <ip_reass_dequeue_datagram+0x4c>)
 800d7e2:	6013      	str	r3, [r2, #0]
 800d7e4:	e00d      	b.n	800d802 <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 800d7e6:	683b      	ldr	r3, [r7, #0]
 800d7e8:	2b00      	cmp	r3, #0
 800d7ea:	d106      	bne.n	800d7fa <ip_reass_dequeue_datagram+0x32>
 800d7ec:	4b0a      	ldr	r3, [pc, #40]	; (800d818 <ip_reass_dequeue_datagram+0x50>)
 800d7ee:	f240 1245 	movw	r2, #325	; 0x145
 800d7f2:	490a      	ldr	r1, [pc, #40]	; (800d81c <ip_reass_dequeue_datagram+0x54>)
 800d7f4:	480a      	ldr	r0, [pc, #40]	; (800d820 <ip_reass_dequeue_datagram+0x58>)
 800d7f6:	f000 fe7d 	bl	800e4f4 <iprintf>
    prev->next = ipr->next;
 800d7fa:	687b      	ldr	r3, [r7, #4]
 800d7fc:	681a      	ldr	r2, [r3, #0]
 800d7fe:	683b      	ldr	r3, [r7, #0]
 800d800:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 800d802:	6879      	ldr	r1, [r7, #4]
 800d804:	2004      	movs	r0, #4
 800d806:	f7f7 f9d5 	bl	8004bb4 <memp_free>
}
 800d80a:	bf00      	nop
 800d80c:	3708      	adds	r7, #8
 800d80e:	46bd      	mov	sp, r7
 800d810:	bd80      	pop	{r7, pc}
 800d812:	bf00      	nop
 800d814:	200083d4 	.word	0x200083d4
 800d818:	08011b0c 	.word	0x08011b0c
 800d81c:	08011bd4 	.word	0x08011bd4
 800d820:	08011b54 	.word	0x08011b54

0800d824 <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 800d824:	b580      	push	{r7, lr}
 800d826:	b08c      	sub	sp, #48	; 0x30
 800d828:	af00      	add	r7, sp, #0
 800d82a:	60f8      	str	r0, [r7, #12]
 800d82c:	60b9      	str	r1, [r7, #8]
 800d82e:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 800d830:	2300      	movs	r3, #0
 800d832:	62bb      	str	r3, [r7, #40]	; 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 800d834:	2301      	movs	r3, #1
 800d836:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 800d838:	68bb      	ldr	r3, [r7, #8]
 800d83a:	685b      	ldr	r3, [r3, #4]
 800d83c:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 800d83e:	69fb      	ldr	r3, [r7, #28]
 800d840:	885b      	ldrh	r3, [r3, #2]
 800d842:	b29b      	uxth	r3, r3
 800d844:	4618      	mov	r0, r3
 800d846:	f7f6 fccd 	bl	80041e4 <lwip_htons>
 800d84a:	4603      	mov	r3, r0
 800d84c:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 800d84e:	69fb      	ldr	r3, [r7, #28]
 800d850:	781b      	ldrb	r3, [r3, #0]
 800d852:	f003 030f 	and.w	r3, r3, #15
 800d856:	b2db      	uxtb	r3, r3
 800d858:	009b      	lsls	r3, r3, #2
 800d85a:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 800d85c:	7e7b      	ldrb	r3, [r7, #25]
 800d85e:	b29b      	uxth	r3, r3
 800d860:	8b7a      	ldrh	r2, [r7, #26]
 800d862:	429a      	cmp	r2, r3
 800d864:	d202      	bcs.n	800d86c <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 800d866:	f04f 33ff 	mov.w	r3, #4294967295
 800d86a:	e135      	b.n	800dad8 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 800d86c:	7e7b      	ldrb	r3, [r7, #25]
 800d86e:	b29b      	uxth	r3, r3
 800d870:	8b7a      	ldrh	r2, [r7, #26]
 800d872:	1ad3      	subs	r3, r2, r3
 800d874:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 800d876:	69fb      	ldr	r3, [r7, #28]
 800d878:	88db      	ldrh	r3, [r3, #6]
 800d87a:	b29b      	uxth	r3, r3
 800d87c:	4618      	mov	r0, r3
 800d87e:	f7f6 fcb1 	bl	80041e4 <lwip_htons>
 800d882:	4603      	mov	r3, r0
 800d884:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800d888:	b29b      	uxth	r3, r3
 800d88a:	00db      	lsls	r3, r3, #3
 800d88c:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 800d88e:	68bb      	ldr	r3, [r7, #8]
 800d890:	685b      	ldr	r3, [r3, #4]
 800d892:	62fb      	str	r3, [r7, #44]	; 0x2c
  iprh->next_pbuf = NULL;
 800d894:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d896:	2200      	movs	r2, #0
 800d898:	701a      	strb	r2, [r3, #0]
 800d89a:	2200      	movs	r2, #0
 800d89c:	705a      	strb	r2, [r3, #1]
 800d89e:	2200      	movs	r2, #0
 800d8a0:	709a      	strb	r2, [r3, #2]
 800d8a2:	2200      	movs	r2, #0
 800d8a4:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 800d8a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d8a8:	8afa      	ldrh	r2, [r7, #22]
 800d8aa:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 800d8ac:	8afa      	ldrh	r2, [r7, #22]
 800d8ae:	8b7b      	ldrh	r3, [r7, #26]
 800d8b0:	4413      	add	r3, r2
 800d8b2:	b29a      	uxth	r2, r3
 800d8b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d8b6:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 800d8b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d8ba:	88db      	ldrh	r3, [r3, #6]
 800d8bc:	b29b      	uxth	r3, r3
 800d8be:	8afa      	ldrh	r2, [r7, #22]
 800d8c0:	429a      	cmp	r2, r3
 800d8c2:	d902      	bls.n	800d8ca <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 800d8c4:	f04f 33ff 	mov.w	r3, #4294967295
 800d8c8:	e106      	b.n	800dad8 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 800d8ca:	68fb      	ldr	r3, [r7, #12]
 800d8cc:	685b      	ldr	r3, [r3, #4]
 800d8ce:	627b      	str	r3, [r7, #36]	; 0x24
 800d8d0:	e068      	b.n	800d9a4 <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 800d8d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d8d4:	685b      	ldr	r3, [r3, #4]
 800d8d6:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 800d8d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d8da:	889b      	ldrh	r3, [r3, #4]
 800d8dc:	b29a      	uxth	r2, r3
 800d8de:	693b      	ldr	r3, [r7, #16]
 800d8e0:	889b      	ldrh	r3, [r3, #4]
 800d8e2:	b29b      	uxth	r3, r3
 800d8e4:	429a      	cmp	r2, r3
 800d8e6:	d235      	bcs.n	800d954 <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 800d8e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d8ea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d8ec:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 800d8ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d8f0:	2b00      	cmp	r3, #0
 800d8f2:	d020      	beq.n	800d936 <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 800d8f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d8f6:	889b      	ldrh	r3, [r3, #4]
 800d8f8:	b29a      	uxth	r2, r3
 800d8fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d8fc:	88db      	ldrh	r3, [r3, #6]
 800d8fe:	b29b      	uxth	r3, r3
 800d900:	429a      	cmp	r2, r3
 800d902:	d307      	bcc.n	800d914 <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 800d904:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d906:	88db      	ldrh	r3, [r3, #6]
 800d908:	b29a      	uxth	r2, r3
 800d90a:	693b      	ldr	r3, [r7, #16]
 800d90c:	889b      	ldrh	r3, [r3, #4]
 800d90e:	b29b      	uxth	r3, r3
 800d910:	429a      	cmp	r2, r3
 800d912:	d902      	bls.n	800d91a <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 800d914:	f04f 33ff 	mov.w	r3, #4294967295
 800d918:	e0de      	b.n	800dad8 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 800d91a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d91c:	68ba      	ldr	r2, [r7, #8]
 800d91e:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 800d920:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d922:	88db      	ldrh	r3, [r3, #6]
 800d924:	b29a      	uxth	r2, r3
 800d926:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d928:	889b      	ldrh	r3, [r3, #4]
 800d92a:	b29b      	uxth	r3, r3
 800d92c:	429a      	cmp	r2, r3
 800d92e:	d03d      	beq.n	800d9ac <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 800d930:	2300      	movs	r3, #0
 800d932:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 800d934:	e03a      	b.n	800d9ac <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 800d936:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d938:	88db      	ldrh	r3, [r3, #6]
 800d93a:	b29a      	uxth	r2, r3
 800d93c:	693b      	ldr	r3, [r7, #16]
 800d93e:	889b      	ldrh	r3, [r3, #4]
 800d940:	b29b      	uxth	r3, r3
 800d942:	429a      	cmp	r2, r3
 800d944:	d902      	bls.n	800d94c <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 800d946:	f04f 33ff 	mov.w	r3, #4294967295
 800d94a:	e0c5      	b.n	800dad8 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 800d94c:	68fb      	ldr	r3, [r7, #12]
 800d94e:	68ba      	ldr	r2, [r7, #8]
 800d950:	605a      	str	r2, [r3, #4]
      break;
 800d952:	e02b      	b.n	800d9ac <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 800d954:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d956:	889b      	ldrh	r3, [r3, #4]
 800d958:	b29a      	uxth	r2, r3
 800d95a:	693b      	ldr	r3, [r7, #16]
 800d95c:	889b      	ldrh	r3, [r3, #4]
 800d95e:	b29b      	uxth	r3, r3
 800d960:	429a      	cmp	r2, r3
 800d962:	d102      	bne.n	800d96a <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 800d964:	f04f 33ff 	mov.w	r3, #4294967295
 800d968:	e0b6      	b.n	800dad8 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 800d96a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d96c:	889b      	ldrh	r3, [r3, #4]
 800d96e:	b29a      	uxth	r2, r3
 800d970:	693b      	ldr	r3, [r7, #16]
 800d972:	88db      	ldrh	r3, [r3, #6]
 800d974:	b29b      	uxth	r3, r3
 800d976:	429a      	cmp	r2, r3
 800d978:	d202      	bcs.n	800d980 <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 800d97a:	f04f 33ff 	mov.w	r3, #4294967295
 800d97e:	e0ab      	b.n	800dad8 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 800d980:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d982:	2b00      	cmp	r3, #0
 800d984:	d009      	beq.n	800d99a <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 800d986:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d988:	88db      	ldrh	r3, [r3, #6]
 800d98a:	b29a      	uxth	r2, r3
 800d98c:	693b      	ldr	r3, [r7, #16]
 800d98e:	889b      	ldrh	r3, [r3, #4]
 800d990:	b29b      	uxth	r3, r3
 800d992:	429a      	cmp	r2, r3
 800d994:	d001      	beq.n	800d99a <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 800d996:	2300      	movs	r3, #0
 800d998:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 800d99a:	693b      	ldr	r3, [r7, #16]
 800d99c:	681b      	ldr	r3, [r3, #0]
 800d99e:	627b      	str	r3, [r7, #36]	; 0x24
    iprh_prev = iprh_tmp;
 800d9a0:	693b      	ldr	r3, [r7, #16]
 800d9a2:	62bb      	str	r3, [r7, #40]	; 0x28
  for (q = ipr->p; q != NULL;) {
 800d9a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d9a6:	2b00      	cmp	r3, #0
 800d9a8:	d193      	bne.n	800d8d2 <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 800d9aa:	e000      	b.n	800d9ae <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 800d9ac:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 800d9ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d9b0:	2b00      	cmp	r3, #0
 800d9b2:	d12d      	bne.n	800da10 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 800d9b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d9b6:	2b00      	cmp	r3, #0
 800d9b8:	d01c      	beq.n	800d9f4 <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 800d9ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d9bc:	88db      	ldrh	r3, [r3, #6]
 800d9be:	b29a      	uxth	r2, r3
 800d9c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d9c2:	889b      	ldrh	r3, [r3, #4]
 800d9c4:	b29b      	uxth	r3, r3
 800d9c6:	429a      	cmp	r2, r3
 800d9c8:	d906      	bls.n	800d9d8 <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 800d9ca:	4b45      	ldr	r3, [pc, #276]	; (800dae0 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800d9cc:	f44f 72db 	mov.w	r2, #438	; 0x1b6
 800d9d0:	4944      	ldr	r1, [pc, #272]	; (800dae4 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 800d9d2:	4845      	ldr	r0, [pc, #276]	; (800dae8 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800d9d4:	f000 fd8e 	bl	800e4f4 <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 800d9d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d9da:	68ba      	ldr	r2, [r7, #8]
 800d9dc:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 800d9de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d9e0:	88db      	ldrh	r3, [r3, #6]
 800d9e2:	b29a      	uxth	r2, r3
 800d9e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d9e6:	889b      	ldrh	r3, [r3, #4]
 800d9e8:	b29b      	uxth	r3, r3
 800d9ea:	429a      	cmp	r2, r3
 800d9ec:	d010      	beq.n	800da10 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 800d9ee:	2300      	movs	r3, #0
 800d9f0:	623b      	str	r3, [r7, #32]
 800d9f2:	e00d      	b.n	800da10 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 800d9f4:	68fb      	ldr	r3, [r7, #12]
 800d9f6:	685b      	ldr	r3, [r3, #4]
 800d9f8:	2b00      	cmp	r3, #0
 800d9fa:	d006      	beq.n	800da0a <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 800d9fc:	4b38      	ldr	r3, [pc, #224]	; (800dae0 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800d9fe:	f44f 72df 	mov.w	r2, #446	; 0x1be
 800da02:	493a      	ldr	r1, [pc, #232]	; (800daec <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 800da04:	4838      	ldr	r0, [pc, #224]	; (800dae8 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800da06:	f000 fd75 	bl	800e4f4 <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 800da0a:	68fb      	ldr	r3, [r7, #12]
 800da0c:	68ba      	ldr	r2, [r7, #8]
 800da0e:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 800da10:	687b      	ldr	r3, [r7, #4]
 800da12:	2b00      	cmp	r3, #0
 800da14:	d105      	bne.n	800da22 <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 800da16:	68fb      	ldr	r3, [r7, #12]
 800da18:	7f9b      	ldrb	r3, [r3, #30]
 800da1a:	f003 0301 	and.w	r3, r3, #1
 800da1e:	2b00      	cmp	r3, #0
 800da20:	d059      	beq.n	800dad6 <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 800da22:	6a3b      	ldr	r3, [r7, #32]
 800da24:	2b00      	cmp	r3, #0
 800da26:	d04f      	beq.n	800dac8 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 800da28:	68fb      	ldr	r3, [r7, #12]
 800da2a:	685b      	ldr	r3, [r3, #4]
 800da2c:	2b00      	cmp	r3, #0
 800da2e:	d006      	beq.n	800da3e <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 800da30:	68fb      	ldr	r3, [r7, #12]
 800da32:	685b      	ldr	r3, [r3, #4]
 800da34:	685b      	ldr	r3, [r3, #4]
 800da36:	889b      	ldrh	r3, [r3, #4]
 800da38:	b29b      	uxth	r3, r3
 800da3a:	2b00      	cmp	r3, #0
 800da3c:	d002      	beq.n	800da44 <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 800da3e:	2300      	movs	r3, #0
 800da40:	623b      	str	r3, [r7, #32]
 800da42:	e041      	b.n	800dac8 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 800da44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800da46:	62bb      	str	r3, [r7, #40]	; 0x28
        q = iprh->next_pbuf;
 800da48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800da4a:	681b      	ldr	r3, [r3, #0]
 800da4c:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 800da4e:	e012      	b.n	800da76 <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 800da50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800da52:	685b      	ldr	r3, [r3, #4]
 800da54:	62fb      	str	r3, [r7, #44]	; 0x2c
          if (iprh_prev->end != iprh->start) {
 800da56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800da58:	88db      	ldrh	r3, [r3, #6]
 800da5a:	b29a      	uxth	r2, r3
 800da5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800da5e:	889b      	ldrh	r3, [r3, #4]
 800da60:	b29b      	uxth	r3, r3
 800da62:	429a      	cmp	r2, r3
 800da64:	d002      	beq.n	800da6c <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 800da66:	2300      	movs	r3, #0
 800da68:	623b      	str	r3, [r7, #32]
            break;
 800da6a:	e007      	b.n	800da7c <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 800da6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800da6e:	62bb      	str	r3, [r7, #40]	; 0x28
          q = iprh->next_pbuf;
 800da70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800da72:	681b      	ldr	r3, [r3, #0]
 800da74:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 800da76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800da78:	2b00      	cmp	r3, #0
 800da7a:	d1e9      	bne.n	800da50 <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 800da7c:	6a3b      	ldr	r3, [r7, #32]
 800da7e:	2b00      	cmp	r3, #0
 800da80:	d022      	beq.n	800dac8 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 800da82:	68fb      	ldr	r3, [r7, #12]
 800da84:	685b      	ldr	r3, [r3, #4]
 800da86:	2b00      	cmp	r3, #0
 800da88:	d106      	bne.n	800da98 <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 800da8a:	4b15      	ldr	r3, [pc, #84]	; (800dae0 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800da8c:	f240 12df 	movw	r2, #479	; 0x1df
 800da90:	4917      	ldr	r1, [pc, #92]	; (800daf0 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 800da92:	4815      	ldr	r0, [pc, #84]	; (800dae8 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800da94:	f000 fd2e 	bl	800e4f4 <iprintf>
          LWIP_ASSERT("sanity check",
 800da98:	68fb      	ldr	r3, [r7, #12]
 800da9a:	685b      	ldr	r3, [r3, #4]
 800da9c:	685b      	ldr	r3, [r3, #4]
 800da9e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800daa0:	429a      	cmp	r2, r3
 800daa2:	d106      	bne.n	800dab2 <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 800daa4:	4b0e      	ldr	r3, [pc, #56]	; (800dae0 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800daa6:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800daaa:	4911      	ldr	r1, [pc, #68]	; (800daf0 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 800daac:	480e      	ldr	r0, [pc, #56]	; (800dae8 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800daae:	f000 fd21 	bl	800e4f4 <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 800dab2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dab4:	681b      	ldr	r3, [r3, #0]
 800dab6:	2b00      	cmp	r3, #0
 800dab8:	d006      	beq.n	800dac8 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 800daba:	4b09      	ldr	r3, [pc, #36]	; (800dae0 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800dabc:	f44f 72f1 	mov.w	r2, #482	; 0x1e2
 800dac0:	490c      	ldr	r1, [pc, #48]	; (800daf4 <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 800dac2:	4809      	ldr	r0, [pc, #36]	; (800dae8 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800dac4:	f000 fd16 	bl	800e4f4 <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 800dac8:	6a3b      	ldr	r3, [r7, #32]
 800daca:	2b00      	cmp	r3, #0
 800dacc:	bf14      	ite	ne
 800dace:	2301      	movne	r3, #1
 800dad0:	2300      	moveq	r3, #0
 800dad2:	b2db      	uxtb	r3, r3
 800dad4:	e000      	b.n	800dad8 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 800dad6:	2300      	movs	r3, #0
}
 800dad8:	4618      	mov	r0, r3
 800dada:	3730      	adds	r7, #48	; 0x30
 800dadc:	46bd      	mov	sp, r7
 800dade:	bd80      	pop	{r7, pc}
 800dae0:	08011b0c 	.word	0x08011b0c
 800dae4:	08011bf0 	.word	0x08011bf0
 800dae8:	08011b54 	.word	0x08011b54
 800daec:	08011c10 	.word	0x08011c10
 800daf0:	08011c48 	.word	0x08011c48
 800daf4:	08011c58 	.word	0x08011c58

0800daf8 <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 800daf8:	b580      	push	{r7, lr}
 800dafa:	b08e      	sub	sp, #56	; 0x38
 800dafc:	af00      	add	r7, sp, #0
 800dafe:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 800db00:	687b      	ldr	r3, [r7, #4]
 800db02:	685b      	ldr	r3, [r3, #4]
 800db04:	62bb      	str	r3, [r7, #40]	; 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 800db06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800db08:	781b      	ldrb	r3, [r3, #0]
 800db0a:	f003 030f 	and.w	r3, r3, #15
 800db0e:	b2db      	uxtb	r3, r3
 800db10:	009b      	lsls	r3, r3, #2
 800db12:	b2db      	uxtb	r3, r3
 800db14:	2b14      	cmp	r3, #20
 800db16:	f040 8171 	bne.w	800ddfc <ip4_reass+0x304>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 800db1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800db1c:	88db      	ldrh	r3, [r3, #6]
 800db1e:	b29b      	uxth	r3, r3
 800db20:	4618      	mov	r0, r3
 800db22:	f7f6 fb5f 	bl	80041e4 <lwip_htons>
 800db26:	4603      	mov	r3, r0
 800db28:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800db2c:	b29b      	uxth	r3, r3
 800db2e:	00db      	lsls	r3, r3, #3
 800db30:	84fb      	strh	r3, [r7, #38]	; 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 800db32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800db34:	885b      	ldrh	r3, [r3, #2]
 800db36:	b29b      	uxth	r3, r3
 800db38:	4618      	mov	r0, r3
 800db3a:	f7f6 fb53 	bl	80041e4 <lwip_htons>
 800db3e:	4603      	mov	r3, r0
 800db40:	84bb      	strh	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 800db42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800db44:	781b      	ldrb	r3, [r3, #0]
 800db46:	f003 030f 	and.w	r3, r3, #15
 800db4a:	b2db      	uxtb	r3, r3
 800db4c:	009b      	lsls	r3, r3, #2
 800db4e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (hlen > len) {
 800db52:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800db56:	b29b      	uxth	r3, r3
 800db58:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800db5a:	429a      	cmp	r2, r3
 800db5c:	f0c0 8150 	bcc.w	800de00 <ip4_reass+0x308>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 800db60:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800db64:	b29b      	uxth	r3, r3
 800db66:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800db68:	1ad3      	subs	r3, r2, r3
 800db6a:	84bb      	strh	r3, [r7, #36]	; 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 800db6c:	6878      	ldr	r0, [r7, #4]
 800db6e:	f7f7 ff1f 	bl	80059b0 <pbuf_clen>
 800db72:	4603      	mov	r3, r0
 800db74:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 800db76:	4b8c      	ldr	r3, [pc, #560]	; (800dda8 <ip4_reass+0x2b0>)
 800db78:	881b      	ldrh	r3, [r3, #0]
 800db7a:	461a      	mov	r2, r3
 800db7c:	8c3b      	ldrh	r3, [r7, #32]
 800db7e:	4413      	add	r3, r2
 800db80:	2b0a      	cmp	r3, #10
 800db82:	dd10      	ble.n	800dba6 <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 800db84:	8c3b      	ldrh	r3, [r7, #32]
 800db86:	4619      	mov	r1, r3
 800db88:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800db8a:	f7ff fd81 	bl	800d690 <ip_reass_remove_oldest_datagram>
 800db8e:	4603      	mov	r3, r0
 800db90:	2b00      	cmp	r3, #0
 800db92:	f000 8137 	beq.w	800de04 <ip4_reass+0x30c>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 800db96:	4b84      	ldr	r3, [pc, #528]	; (800dda8 <ip4_reass+0x2b0>)
 800db98:	881b      	ldrh	r3, [r3, #0]
 800db9a:	461a      	mov	r2, r3
 800db9c:	8c3b      	ldrh	r3, [r7, #32]
 800db9e:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 800dba0:	2b0a      	cmp	r3, #10
 800dba2:	f300 812f 	bgt.w	800de04 <ip4_reass+0x30c>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 800dba6:	4b81      	ldr	r3, [pc, #516]	; (800ddac <ip4_reass+0x2b4>)
 800dba8:	681b      	ldr	r3, [r3, #0]
 800dbaa:	633b      	str	r3, [r7, #48]	; 0x30
 800dbac:	e015      	b.n	800dbda <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 800dbae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dbb0:	695a      	ldr	r2, [r3, #20]
 800dbb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dbb4:	68db      	ldr	r3, [r3, #12]
 800dbb6:	429a      	cmp	r2, r3
 800dbb8:	d10c      	bne.n	800dbd4 <ip4_reass+0xdc>
 800dbba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dbbc:	699a      	ldr	r2, [r3, #24]
 800dbbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dbc0:	691b      	ldr	r3, [r3, #16]
 800dbc2:	429a      	cmp	r2, r3
 800dbc4:	d106      	bne.n	800dbd4 <ip4_reass+0xdc>
 800dbc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dbc8:	899a      	ldrh	r2, [r3, #12]
 800dbca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dbcc:	889b      	ldrh	r3, [r3, #4]
 800dbce:	b29b      	uxth	r3, r3
 800dbd0:	429a      	cmp	r2, r3
 800dbd2:	d006      	beq.n	800dbe2 <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 800dbd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dbd6:	681b      	ldr	r3, [r3, #0]
 800dbd8:	633b      	str	r3, [r7, #48]	; 0x30
 800dbda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dbdc:	2b00      	cmp	r3, #0
 800dbde:	d1e6      	bne.n	800dbae <ip4_reass+0xb6>
 800dbe0:	e000      	b.n	800dbe4 <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 800dbe2:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 800dbe4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dbe6:	2b00      	cmp	r3, #0
 800dbe8:	d109      	bne.n	800dbfe <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 800dbea:	8c3b      	ldrh	r3, [r7, #32]
 800dbec:	4619      	mov	r1, r3
 800dbee:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800dbf0:	f7ff fdb0 	bl	800d754 <ip_reass_enqueue_new_datagram>
 800dbf4:	6338      	str	r0, [r7, #48]	; 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 800dbf6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dbf8:	2b00      	cmp	r3, #0
 800dbfa:	d11c      	bne.n	800dc36 <ip4_reass+0x13e>
      goto nullreturn;
 800dbfc:	e105      	b.n	800de0a <ip4_reass+0x312>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 800dbfe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dc00:	88db      	ldrh	r3, [r3, #6]
 800dc02:	b29b      	uxth	r3, r3
 800dc04:	4618      	mov	r0, r3
 800dc06:	f7f6 faed 	bl	80041e4 <lwip_htons>
 800dc0a:	4603      	mov	r3, r0
 800dc0c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800dc10:	2b00      	cmp	r3, #0
 800dc12:	d110      	bne.n	800dc36 <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 800dc14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dc16:	89db      	ldrh	r3, [r3, #14]
 800dc18:	4618      	mov	r0, r3
 800dc1a:	f7f6 fae3 	bl	80041e4 <lwip_htons>
 800dc1e:	4603      	mov	r3, r0
 800dc20:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 800dc24:	2b00      	cmp	r3, #0
 800dc26:	d006      	beq.n	800dc36 <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 800dc28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dc2a:	3308      	adds	r3, #8
 800dc2c:	2214      	movs	r2, #20
 800dc2e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800dc30:	4618      	mov	r0, r3
 800dc32:	f000 fe29 	bl	800e888 <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 800dc36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dc38:	88db      	ldrh	r3, [r3, #6]
 800dc3a:	b29b      	uxth	r3, r3
 800dc3c:	f003 0320 	and.w	r3, r3, #32
 800dc40:	2b00      	cmp	r3, #0
 800dc42:	bf0c      	ite	eq
 800dc44:	2301      	moveq	r3, #1
 800dc46:	2300      	movne	r3, #0
 800dc48:	b2db      	uxtb	r3, r3
 800dc4a:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 800dc4c:	69fb      	ldr	r3, [r7, #28]
 800dc4e:	2b00      	cmp	r3, #0
 800dc50:	d00e      	beq.n	800dc70 <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 800dc52:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800dc54:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800dc56:	4413      	add	r3, r2
 800dc58:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 800dc5a:	8b7a      	ldrh	r2, [r7, #26]
 800dc5c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800dc5e:	429a      	cmp	r2, r3
 800dc60:	f0c0 80a0 	bcc.w	800dda4 <ip4_reass+0x2ac>
 800dc64:	8b7b      	ldrh	r3, [r7, #26]
 800dc66:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 800dc6a:	4293      	cmp	r3, r2
 800dc6c:	f200 809a 	bhi.w	800dda4 <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 800dc70:	69fa      	ldr	r2, [r7, #28]
 800dc72:	6879      	ldr	r1, [r7, #4]
 800dc74:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800dc76:	f7ff fdd5 	bl	800d824 <ip_reass_chain_frag_into_datagram_and_validate>
 800dc7a:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 800dc7c:	697b      	ldr	r3, [r7, #20]
 800dc7e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dc82:	f000 809b 	beq.w	800ddbc <ip4_reass+0x2c4>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 800dc86:	4b48      	ldr	r3, [pc, #288]	; (800dda8 <ip4_reass+0x2b0>)
 800dc88:	881a      	ldrh	r2, [r3, #0]
 800dc8a:	8c3b      	ldrh	r3, [r7, #32]
 800dc8c:	4413      	add	r3, r2
 800dc8e:	b29a      	uxth	r2, r3
 800dc90:	4b45      	ldr	r3, [pc, #276]	; (800dda8 <ip4_reass+0x2b0>)
 800dc92:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 800dc94:	69fb      	ldr	r3, [r7, #28]
 800dc96:	2b00      	cmp	r3, #0
 800dc98:	d00d      	beq.n	800dcb6 <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 800dc9a:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800dc9c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800dc9e:	4413      	add	r3, r2
 800dca0:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 800dca2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dca4:	8a7a      	ldrh	r2, [r7, #18]
 800dca6:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 800dca8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dcaa:	7f9b      	ldrb	r3, [r3, #30]
 800dcac:	f043 0301 	orr.w	r3, r3, #1
 800dcb0:	b2da      	uxtb	r2, r3
 800dcb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dcb4:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 800dcb6:	697b      	ldr	r3, [r7, #20]
 800dcb8:	2b01      	cmp	r3, #1
 800dcba:	d171      	bne.n	800dda0 <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 800dcbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dcbe:	8b9b      	ldrh	r3, [r3, #28]
 800dcc0:	3314      	adds	r3, #20
 800dcc2:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 800dcc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dcc6:	685b      	ldr	r3, [r3, #4]
 800dcc8:	685b      	ldr	r3, [r3, #4]
 800dcca:	681b      	ldr	r3, [r3, #0]
 800dccc:	637b      	str	r3, [r7, #52]	; 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 800dcce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dcd0:	685b      	ldr	r3, [r3, #4]
 800dcd2:	685b      	ldr	r3, [r3, #4]
 800dcd4:	62bb      	str	r3, [r7, #40]	; 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 800dcd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dcd8:	3308      	adds	r3, #8
 800dcda:	2214      	movs	r2, #20
 800dcdc:	4619      	mov	r1, r3
 800dcde:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800dce0:	f000 fdd2 	bl	800e888 <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 800dce4:	8a3b      	ldrh	r3, [r7, #16]
 800dce6:	4618      	mov	r0, r3
 800dce8:	f7f6 fa7c 	bl	80041e4 <lwip_htons>
 800dcec:	4603      	mov	r3, r0
 800dcee:	461a      	mov	r2, r3
 800dcf0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dcf2:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 800dcf4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dcf6:	2200      	movs	r2, #0
 800dcf8:	719a      	strb	r2, [r3, #6]
 800dcfa:	2200      	movs	r2, #0
 800dcfc:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 800dcfe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dd00:	2200      	movs	r2, #0
 800dd02:	729a      	strb	r2, [r3, #10]
 800dd04:	2200      	movs	r2, #0
 800dd06:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 800dd08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dd0a:	685b      	ldr	r3, [r3, #4]
 800dd0c:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 800dd0e:	e00d      	b.n	800dd2c <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 800dd10:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800dd12:	685b      	ldr	r3, [r3, #4]
 800dd14:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 800dd16:	2114      	movs	r1, #20
 800dd18:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800dd1a:	f7f7 fd3b 	bl	8005794 <pbuf_remove_header>
      pbuf_cat(p, r);
 800dd1e:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800dd20:	6878      	ldr	r0, [r7, #4]
 800dd22:	f7f7 fe7f 	bl	8005a24 <pbuf_cat>
      r = iprh->next_pbuf;
 800dd26:	68fb      	ldr	r3, [r7, #12]
 800dd28:	681b      	ldr	r3, [r3, #0]
 800dd2a:	637b      	str	r3, [r7, #52]	; 0x34
    while (r != NULL) {
 800dd2c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800dd2e:	2b00      	cmp	r3, #0
 800dd30:	d1ee      	bne.n	800dd10 <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 800dd32:	4b1e      	ldr	r3, [pc, #120]	; (800ddac <ip4_reass+0x2b4>)
 800dd34:	681b      	ldr	r3, [r3, #0]
 800dd36:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800dd38:	429a      	cmp	r2, r3
 800dd3a:	d102      	bne.n	800dd42 <ip4_reass+0x24a>
      ipr_prev = NULL;
 800dd3c:	2300      	movs	r3, #0
 800dd3e:	62fb      	str	r3, [r7, #44]	; 0x2c
 800dd40:	e010      	b.n	800dd64 <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 800dd42:	4b1a      	ldr	r3, [pc, #104]	; (800ddac <ip4_reass+0x2b4>)
 800dd44:	681b      	ldr	r3, [r3, #0]
 800dd46:	62fb      	str	r3, [r7, #44]	; 0x2c
 800dd48:	e007      	b.n	800dd5a <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 800dd4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dd4c:	681b      	ldr	r3, [r3, #0]
 800dd4e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800dd50:	429a      	cmp	r2, r3
 800dd52:	d006      	beq.n	800dd62 <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 800dd54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dd56:	681b      	ldr	r3, [r3, #0]
 800dd58:	62fb      	str	r3, [r7, #44]	; 0x2c
 800dd5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dd5c:	2b00      	cmp	r3, #0
 800dd5e:	d1f4      	bne.n	800dd4a <ip4_reass+0x252>
 800dd60:	e000      	b.n	800dd64 <ip4_reass+0x26c>
          break;
 800dd62:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 800dd64:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800dd66:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800dd68:	f7ff fd2e 	bl	800d7c8 <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 800dd6c:	6878      	ldr	r0, [r7, #4]
 800dd6e:	f7f7 fe1f 	bl	80059b0 <pbuf_clen>
 800dd72:	4603      	mov	r3, r0
 800dd74:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 800dd76:	4b0c      	ldr	r3, [pc, #48]	; (800dda8 <ip4_reass+0x2b0>)
 800dd78:	881b      	ldrh	r3, [r3, #0]
 800dd7a:	8c3a      	ldrh	r2, [r7, #32]
 800dd7c:	429a      	cmp	r2, r3
 800dd7e:	d906      	bls.n	800dd8e <ip4_reass+0x296>
 800dd80:	4b0b      	ldr	r3, [pc, #44]	; (800ddb0 <ip4_reass+0x2b8>)
 800dd82:	f240 229b 	movw	r2, #667	; 0x29b
 800dd86:	490b      	ldr	r1, [pc, #44]	; (800ddb4 <ip4_reass+0x2bc>)
 800dd88:	480b      	ldr	r0, [pc, #44]	; (800ddb8 <ip4_reass+0x2c0>)
 800dd8a:	f000 fbb3 	bl	800e4f4 <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 800dd8e:	4b06      	ldr	r3, [pc, #24]	; (800dda8 <ip4_reass+0x2b0>)
 800dd90:	881a      	ldrh	r2, [r3, #0]
 800dd92:	8c3b      	ldrh	r3, [r7, #32]
 800dd94:	1ad3      	subs	r3, r2, r3
 800dd96:	b29a      	uxth	r2, r3
 800dd98:	4b03      	ldr	r3, [pc, #12]	; (800dda8 <ip4_reass+0x2b0>)
 800dd9a:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 800dd9c:	687b      	ldr	r3, [r7, #4]
 800dd9e:	e038      	b.n	800de12 <ip4_reass+0x31a>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 800dda0:	2300      	movs	r3, #0
 800dda2:	e036      	b.n	800de12 <ip4_reass+0x31a>
      goto nullreturn_ipr;
 800dda4:	bf00      	nop
 800dda6:	e00a      	b.n	800ddbe <ip4_reass+0x2c6>
 800dda8:	200083d8 	.word	0x200083d8
 800ddac:	200083d4 	.word	0x200083d4
 800ddb0:	08011b0c 	.word	0x08011b0c
 800ddb4:	08011c7c 	.word	0x08011c7c
 800ddb8:	08011b54 	.word	0x08011b54
    goto nullreturn_ipr;
 800ddbc:	bf00      	nop

nullreturn_ipr:
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 800ddbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ddc0:	2b00      	cmp	r3, #0
 800ddc2:	d106      	bne.n	800ddd2 <ip4_reass+0x2da>
 800ddc4:	4b15      	ldr	r3, [pc, #84]	; (800de1c <ip4_reass+0x324>)
 800ddc6:	f44f 722a 	mov.w	r2, #680	; 0x2a8
 800ddca:	4915      	ldr	r1, [pc, #84]	; (800de20 <ip4_reass+0x328>)
 800ddcc:	4815      	ldr	r0, [pc, #84]	; (800de24 <ip4_reass+0x32c>)
 800ddce:	f000 fb91 	bl	800e4f4 <iprintf>
  if (ipr->p == NULL) {
 800ddd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ddd4:	685b      	ldr	r3, [r3, #4]
 800ddd6:	2b00      	cmp	r3, #0
 800ddd8:	d116      	bne.n	800de08 <ip4_reass+0x310>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 800ddda:	4b13      	ldr	r3, [pc, #76]	; (800de28 <ip4_reass+0x330>)
 800dddc:	681b      	ldr	r3, [r3, #0]
 800ddde:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800dde0:	429a      	cmp	r2, r3
 800dde2:	d006      	beq.n	800ddf2 <ip4_reass+0x2fa>
 800dde4:	4b0d      	ldr	r3, [pc, #52]	; (800de1c <ip4_reass+0x324>)
 800dde6:	f240 22ab 	movw	r2, #683	; 0x2ab
 800ddea:	4910      	ldr	r1, [pc, #64]	; (800de2c <ip4_reass+0x334>)
 800ddec:	480d      	ldr	r0, [pc, #52]	; (800de24 <ip4_reass+0x32c>)
 800ddee:	f000 fb81 	bl	800e4f4 <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 800ddf2:	2100      	movs	r1, #0
 800ddf4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ddf6:	f7ff fce7 	bl	800d7c8 <ip_reass_dequeue_datagram>
 800ddfa:	e006      	b.n	800de0a <ip4_reass+0x312>
    goto nullreturn;
 800ddfc:	bf00      	nop
 800ddfe:	e004      	b.n	800de0a <ip4_reass+0x312>
    goto nullreturn;
 800de00:	bf00      	nop
 800de02:	e002      	b.n	800de0a <ip4_reass+0x312>
      goto nullreturn;
 800de04:	bf00      	nop
 800de06:	e000      	b.n	800de0a <ip4_reass+0x312>
  }

nullreturn:
 800de08:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 800de0a:	6878      	ldr	r0, [r7, #4]
 800de0c:	f7f7 fd48 	bl	80058a0 <pbuf_free>
  return NULL;
 800de10:	2300      	movs	r3, #0
}
 800de12:	4618      	mov	r0, r3
 800de14:	3738      	adds	r7, #56	; 0x38
 800de16:	46bd      	mov	sp, r7
 800de18:	bd80      	pop	{r7, pc}
 800de1a:	bf00      	nop
 800de1c:	08011b0c 	.word	0x08011b0c
 800de20:	08011c98 	.word	0x08011c98
 800de24:	08011b54 	.word	0x08011b54
 800de28:	200083d4 	.word	0x200083d4
 800de2c:	08011ca4 	.word	0x08011ca4

0800de30 <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 800de30:	b580      	push	{r7, lr}
 800de32:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 800de34:	2005      	movs	r0, #5
 800de36:	f7f6 fe4d 	bl	8004ad4 <memp_malloc>
 800de3a:	4603      	mov	r3, r0
}
 800de3c:	4618      	mov	r0, r3
 800de3e:	bd80      	pop	{r7, pc}

0800de40 <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 800de40:	b580      	push	{r7, lr}
 800de42:	b082      	sub	sp, #8
 800de44:	af00      	add	r7, sp, #0
 800de46:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 800de48:	687b      	ldr	r3, [r7, #4]
 800de4a:	2b00      	cmp	r3, #0
 800de4c:	d106      	bne.n	800de5c <ip_frag_free_pbuf_custom_ref+0x1c>
 800de4e:	4b07      	ldr	r3, [pc, #28]	; (800de6c <ip_frag_free_pbuf_custom_ref+0x2c>)
 800de50:	f44f 7231 	mov.w	r2, #708	; 0x2c4
 800de54:	4906      	ldr	r1, [pc, #24]	; (800de70 <ip_frag_free_pbuf_custom_ref+0x30>)
 800de56:	4807      	ldr	r0, [pc, #28]	; (800de74 <ip_frag_free_pbuf_custom_ref+0x34>)
 800de58:	f000 fb4c 	bl	800e4f4 <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 800de5c:	6879      	ldr	r1, [r7, #4]
 800de5e:	2005      	movs	r0, #5
 800de60:	f7f6 fea8 	bl	8004bb4 <memp_free>
}
 800de64:	bf00      	nop
 800de66:	3708      	adds	r7, #8
 800de68:	46bd      	mov	sp, r7
 800de6a:	bd80      	pop	{r7, pc}
 800de6c:	08011b0c 	.word	0x08011b0c
 800de70:	08011cc4 	.word	0x08011cc4
 800de74:	08011b54 	.word	0x08011b54

0800de78 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 800de78:	b580      	push	{r7, lr}
 800de7a:	b084      	sub	sp, #16
 800de7c:	af00      	add	r7, sp, #0
 800de7e:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 800de80:	687b      	ldr	r3, [r7, #4]
 800de82:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 800de84:	68fb      	ldr	r3, [r7, #12]
 800de86:	2b00      	cmp	r3, #0
 800de88:	d106      	bne.n	800de98 <ipfrag_free_pbuf_custom+0x20>
 800de8a:	4b11      	ldr	r3, [pc, #68]	; (800ded0 <ipfrag_free_pbuf_custom+0x58>)
 800de8c:	f240 22ce 	movw	r2, #718	; 0x2ce
 800de90:	4910      	ldr	r1, [pc, #64]	; (800ded4 <ipfrag_free_pbuf_custom+0x5c>)
 800de92:	4811      	ldr	r0, [pc, #68]	; (800ded8 <ipfrag_free_pbuf_custom+0x60>)
 800de94:	f000 fb2e 	bl	800e4f4 <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 800de98:	68fa      	ldr	r2, [r7, #12]
 800de9a:	687b      	ldr	r3, [r7, #4]
 800de9c:	429a      	cmp	r2, r3
 800de9e:	d006      	beq.n	800deae <ipfrag_free_pbuf_custom+0x36>
 800dea0:	4b0b      	ldr	r3, [pc, #44]	; (800ded0 <ipfrag_free_pbuf_custom+0x58>)
 800dea2:	f240 22cf 	movw	r2, #719	; 0x2cf
 800dea6:	490d      	ldr	r1, [pc, #52]	; (800dedc <ipfrag_free_pbuf_custom+0x64>)
 800dea8:	480b      	ldr	r0, [pc, #44]	; (800ded8 <ipfrag_free_pbuf_custom+0x60>)
 800deaa:	f000 fb23 	bl	800e4f4 <iprintf>
  if (pcr->original != NULL) {
 800deae:	68fb      	ldr	r3, [r7, #12]
 800deb0:	695b      	ldr	r3, [r3, #20]
 800deb2:	2b00      	cmp	r3, #0
 800deb4:	d004      	beq.n	800dec0 <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 800deb6:	68fb      	ldr	r3, [r7, #12]
 800deb8:	695b      	ldr	r3, [r3, #20]
 800deba:	4618      	mov	r0, r3
 800debc:	f7f7 fcf0 	bl	80058a0 <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 800dec0:	68f8      	ldr	r0, [r7, #12]
 800dec2:	f7ff ffbd 	bl	800de40 <ip_frag_free_pbuf_custom_ref>
}
 800dec6:	bf00      	nop
 800dec8:	3710      	adds	r7, #16
 800deca:	46bd      	mov	sp, r7
 800decc:	bd80      	pop	{r7, pc}
 800dece:	bf00      	nop
 800ded0:	08011b0c 	.word	0x08011b0c
 800ded4:	08011cd0 	.word	0x08011cd0
 800ded8:	08011b54 	.word	0x08011b54
 800dedc:	08011cdc 	.word	0x08011cdc

0800dee0 <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 800dee0:	b580      	push	{r7, lr}
 800dee2:	b094      	sub	sp, #80	; 0x50
 800dee4:	af02      	add	r7, sp, #8
 800dee6:	60f8      	str	r0, [r7, #12]
 800dee8:	60b9      	str	r1, [r7, #8]
 800deea:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 800deec:	2300      	movs	r3, #0
 800deee:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 800def2:	68bb      	ldr	r3, [r7, #8]
 800def4:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800def6:	3b14      	subs	r3, #20
 800def8:	2b00      	cmp	r3, #0
 800defa:	da00      	bge.n	800defe <ip4_frag+0x1e>
 800defc:	3307      	adds	r3, #7
 800defe:	10db      	asrs	r3, r3, #3
 800df00:	877b      	strh	r3, [r7, #58]	; 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 800df02:	2314      	movs	r3, #20
 800df04:	87fb      	strh	r3, [r7, #62]	; 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 800df06:	68fb      	ldr	r3, [r7, #12]
 800df08:	685b      	ldr	r3, [r3, #4]
 800df0a:	637b      	str	r3, [r7, #52]	; 0x34
  iphdr = original_iphdr;
 800df0c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800df0e:	633b      	str	r3, [r7, #48]	; 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 800df10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800df12:	781b      	ldrb	r3, [r3, #0]
 800df14:	f003 030f 	and.w	r3, r3, #15
 800df18:	b2db      	uxtb	r3, r3
 800df1a:	009b      	lsls	r3, r3, #2
 800df1c:	b2db      	uxtb	r3, r3
 800df1e:	2b14      	cmp	r3, #20
 800df20:	d002      	beq.n	800df28 <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 800df22:	f06f 0305 	mvn.w	r3, #5
 800df26:	e110      	b.n	800e14a <ip4_frag+0x26a>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 800df28:	68fb      	ldr	r3, [r7, #12]
 800df2a:	895b      	ldrh	r3, [r3, #10]
 800df2c:	2b13      	cmp	r3, #19
 800df2e:	d809      	bhi.n	800df44 <ip4_frag+0x64>
 800df30:	4b88      	ldr	r3, [pc, #544]	; (800e154 <ip4_frag+0x274>)
 800df32:	f44f 723f 	mov.w	r2, #764	; 0x2fc
 800df36:	4988      	ldr	r1, [pc, #544]	; (800e158 <ip4_frag+0x278>)
 800df38:	4888      	ldr	r0, [pc, #544]	; (800e15c <ip4_frag+0x27c>)
 800df3a:	f000 fadb 	bl	800e4f4 <iprintf>
 800df3e:	f06f 0305 	mvn.w	r3, #5
 800df42:	e102      	b.n	800e14a <ip4_frag+0x26a>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 800df44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800df46:	88db      	ldrh	r3, [r3, #6]
 800df48:	b29b      	uxth	r3, r3
 800df4a:	4618      	mov	r0, r3
 800df4c:	f7f6 f94a 	bl	80041e4 <lwip_htons>
 800df50:	4603      	mov	r3, r0
 800df52:	87bb      	strh	r3, [r7, #60]	; 0x3c
  ofo = tmp & IP_OFFMASK;
 800df54:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800df56:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800df5a:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 800df5e:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800df60:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800df64:	62fb      	str	r3, [r7, #44]	; 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 800df66:	68fb      	ldr	r3, [r7, #12]
 800df68:	891b      	ldrh	r3, [r3, #8]
 800df6a:	3b14      	subs	r3, #20
 800df6c:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

  while (left) {
 800df70:	e0e1      	b.n	800e136 <ip4_frag+0x256>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 800df72:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800df74:	00db      	lsls	r3, r3, #3
 800df76:	b29b      	uxth	r3, r3
 800df78:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800df7c:	4293      	cmp	r3, r2
 800df7e:	bf28      	it	cs
 800df80:	4613      	movcs	r3, r2
 800df82:	857b      	strh	r3, [r7, #42]	; 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 800df84:	f44f 7220 	mov.w	r2, #640	; 0x280
 800df88:	2114      	movs	r1, #20
 800df8a:	200e      	movs	r0, #14
 800df8c:	f7f7 f9a4 	bl	80052d8 <pbuf_alloc>
 800df90:	6278      	str	r0, [r7, #36]	; 0x24
    if (rambuf == NULL) {
 800df92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800df94:	2b00      	cmp	r3, #0
 800df96:	f000 80d5 	beq.w	800e144 <ip4_frag+0x264>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 800df9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800df9c:	895b      	ldrh	r3, [r3, #10]
 800df9e:	2b13      	cmp	r3, #19
 800dfa0:	d806      	bhi.n	800dfb0 <ip4_frag+0xd0>
 800dfa2:	4b6c      	ldr	r3, [pc, #432]	; (800e154 <ip4_frag+0x274>)
 800dfa4:	f44f 7249 	mov.w	r2, #804	; 0x324
 800dfa8:	496d      	ldr	r1, [pc, #436]	; (800e160 <ip4_frag+0x280>)
 800dfaa:	486c      	ldr	r0, [pc, #432]	; (800e15c <ip4_frag+0x27c>)
 800dfac:	f000 faa2 	bl	800e4f4 <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 800dfb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dfb2:	685b      	ldr	r3, [r3, #4]
 800dfb4:	2214      	movs	r2, #20
 800dfb6:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800dfb8:	4618      	mov	r0, r3
 800dfba:	f000 fc65 	bl	800e888 <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 800dfbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dfc0:	685b      	ldr	r3, [r3, #4]
 800dfc2:	633b      	str	r3, [r7, #48]	; 0x30

    left_to_copy = fragsize;
 800dfc4:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800dfc6:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
    while (left_to_copy) {
 800dfca:	e064      	b.n	800e096 <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 800dfcc:	68fb      	ldr	r3, [r7, #12]
 800dfce:	895a      	ldrh	r2, [r3, #10]
 800dfd0:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800dfd2:	1ad3      	subs	r3, r2, r3
 800dfd4:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 800dfd6:	68fb      	ldr	r3, [r7, #12]
 800dfd8:	895b      	ldrh	r3, [r3, #10]
 800dfda:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 800dfdc:	429a      	cmp	r2, r3
 800dfde:	d906      	bls.n	800dfee <ip4_frag+0x10e>
 800dfe0:	4b5c      	ldr	r3, [pc, #368]	; (800e154 <ip4_frag+0x274>)
 800dfe2:	f240 322d 	movw	r2, #813	; 0x32d
 800dfe6:	495f      	ldr	r1, [pc, #380]	; (800e164 <ip4_frag+0x284>)
 800dfe8:	485c      	ldr	r0, [pc, #368]	; (800e15c <ip4_frag+0x27c>)
 800dfea:	f000 fa83 	bl	800e4f4 <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 800dfee:	8bfa      	ldrh	r2, [r7, #30]
 800dff0:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800dff4:	4293      	cmp	r3, r2
 800dff6:	bf28      	it	cs
 800dff8:	4613      	movcs	r3, r2
 800dffa:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 800dffe:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800e002:	2b00      	cmp	r3, #0
 800e004:	d105      	bne.n	800e012 <ip4_frag+0x132>
        poff = 0;
 800e006:	2300      	movs	r3, #0
 800e008:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 800e00a:	68fb      	ldr	r3, [r7, #12]
 800e00c:	681b      	ldr	r3, [r3, #0]
 800e00e:	60fb      	str	r3, [r7, #12]
        continue;
 800e010:	e041      	b.n	800e096 <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 800e012:	f7ff ff0d 	bl	800de30 <ip_frag_alloc_pbuf_custom_ref>
 800e016:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 800e018:	69bb      	ldr	r3, [r7, #24]
 800e01a:	2b00      	cmp	r3, #0
 800e01c:	d103      	bne.n	800e026 <ip4_frag+0x146>
        pbuf_free(rambuf);
 800e01e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800e020:	f7f7 fc3e 	bl	80058a0 <pbuf_free>
        goto memerr;
 800e024:	e08f      	b.n	800e146 <ip4_frag+0x266>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 800e026:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 800e028:	68fb      	ldr	r3, [r7, #12]
 800e02a:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 800e02c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800e02e:	4413      	add	r3, r2
 800e030:	f8b7 1046 	ldrh.w	r1, [r7, #70]	; 0x46
 800e034:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 800e038:	9201      	str	r2, [sp, #4]
 800e03a:	9300      	str	r3, [sp, #0]
 800e03c:	4603      	mov	r3, r0
 800e03e:	2241      	movs	r2, #65	; 0x41
 800e040:	2000      	movs	r0, #0
 800e042:	f7f7 fa73 	bl	800552c <pbuf_alloced_custom>
 800e046:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 800e048:	697b      	ldr	r3, [r7, #20]
 800e04a:	2b00      	cmp	r3, #0
 800e04c:	d106      	bne.n	800e05c <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 800e04e:	69b8      	ldr	r0, [r7, #24]
 800e050:	f7ff fef6 	bl	800de40 <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 800e054:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800e056:	f7f7 fc23 	bl	80058a0 <pbuf_free>
        goto memerr;
 800e05a:	e074      	b.n	800e146 <ip4_frag+0x266>
      }
      pbuf_ref(p);
 800e05c:	68f8      	ldr	r0, [r7, #12]
 800e05e:	f7f7 fcbf 	bl	80059e0 <pbuf_ref>
      pcr->original = p;
 800e062:	69bb      	ldr	r3, [r7, #24]
 800e064:	68fa      	ldr	r2, [r7, #12]
 800e066:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 800e068:	69bb      	ldr	r3, [r7, #24]
 800e06a:	4a3f      	ldr	r2, [pc, #252]	; (800e168 <ip4_frag+0x288>)
 800e06c:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 800e06e:	6979      	ldr	r1, [r7, #20]
 800e070:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800e072:	f7f7 fcd7 	bl	8005a24 <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 800e076:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 800e07a:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800e07e:	1ad3      	subs	r3, r2, r3
 800e080:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
      if (left_to_copy) {
 800e084:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800e088:	2b00      	cmp	r3, #0
 800e08a:	d004      	beq.n	800e096 <ip4_frag+0x1b6>
        poff = 0;
 800e08c:	2300      	movs	r3, #0
 800e08e:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 800e090:	68fb      	ldr	r3, [r7, #12]
 800e092:	681b      	ldr	r3, [r3, #0]
 800e094:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 800e096:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800e09a:	2b00      	cmp	r3, #0
 800e09c:	d196      	bne.n	800dfcc <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 800e09e:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 800e0a0:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800e0a4:	4413      	add	r3, r2
 800e0a6:	87fb      	strh	r3, [r7, #62]	; 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 800e0a8:	68bb      	ldr	r3, [r7, #8]
 800e0aa:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800e0ac:	f1a3 0213 	sub.w	r2, r3, #19
 800e0b0:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800e0b4:	429a      	cmp	r2, r3
 800e0b6:	bfcc      	ite	gt
 800e0b8:	2301      	movgt	r3, #1
 800e0ba:	2300      	movle	r3, #0
 800e0bc:	b2db      	uxtb	r3, r3
 800e0be:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 800e0c0:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800e0c4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800e0c8:	87bb      	strh	r3, [r7, #60]	; 0x3c
    if (!last || mf_set) {
 800e0ca:	6a3b      	ldr	r3, [r7, #32]
 800e0cc:	2b00      	cmp	r3, #0
 800e0ce:	d002      	beq.n	800e0d6 <ip4_frag+0x1f6>
 800e0d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e0d2:	2b00      	cmp	r3, #0
 800e0d4:	d003      	beq.n	800e0de <ip4_frag+0x1fe>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 800e0d6:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800e0d8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800e0dc:	87bb      	strh	r3, [r7, #60]	; 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 800e0de:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800e0e0:	4618      	mov	r0, r3
 800e0e2:	f7f6 f87f 	bl	80041e4 <lwip_htons>
 800e0e6:	4603      	mov	r3, r0
 800e0e8:	461a      	mov	r2, r3
 800e0ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e0ec:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 800e0ee:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800e0f0:	3314      	adds	r3, #20
 800e0f2:	b29b      	uxth	r3, r3
 800e0f4:	4618      	mov	r0, r3
 800e0f6:	f7f6 f875 	bl	80041e4 <lwip_htons>
 800e0fa:	4603      	mov	r3, r0
 800e0fc:	461a      	mov	r2, r3
 800e0fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e100:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 800e102:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e104:	2200      	movs	r2, #0
 800e106:	729a      	strb	r2, [r3, #10]
 800e108:	2200      	movs	r2, #0
 800e10a:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 800e10c:	68bb      	ldr	r3, [r7, #8]
 800e10e:	695b      	ldr	r3, [r3, #20]
 800e110:	687a      	ldr	r2, [r7, #4]
 800e112:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800e114:	68b8      	ldr	r0, [r7, #8]
 800e116:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 800e118:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800e11a:	f7f7 fbc1 	bl	80058a0 <pbuf_free>
    left = (u16_t)(left - fragsize);
 800e11e:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800e122:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800e124:	1ad3      	subs	r3, r2, r3
 800e126:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
    ofo = (u16_t)(ofo + nfb);
 800e12a:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 800e12e:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800e130:	4413      	add	r3, r2
 800e132:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  while (left) {
 800e136:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800e13a:	2b00      	cmp	r3, #0
 800e13c:	f47f af19 	bne.w	800df72 <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 800e140:	2300      	movs	r3, #0
 800e142:	e002      	b.n	800e14a <ip4_frag+0x26a>
      goto memerr;
 800e144:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 800e146:	f04f 33ff 	mov.w	r3, #4294967295
}
 800e14a:	4618      	mov	r0, r3
 800e14c:	3748      	adds	r7, #72	; 0x48
 800e14e:	46bd      	mov	sp, r7
 800e150:	bd80      	pop	{r7, pc}
 800e152:	bf00      	nop
 800e154:	08011b0c 	.word	0x08011b0c
 800e158:	08011ce8 	.word	0x08011ce8
 800e15c:	08011b54 	.word	0x08011b54
 800e160:	08011d04 	.word	0x08011d04
 800e164:	08011d24 	.word	0x08011d24
 800e168:	0800de79 	.word	0x0800de79

0800e16c <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 800e16c:	b580      	push	{r7, lr}
 800e16e:	b086      	sub	sp, #24
 800e170:	af00      	add	r7, sp, #0
 800e172:	6078      	str	r0, [r7, #4]
 800e174:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 800e176:	230e      	movs	r3, #14
 800e178:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 800e17a:	687b      	ldr	r3, [r7, #4]
 800e17c:	895b      	ldrh	r3, [r3, #10]
 800e17e:	2b0e      	cmp	r3, #14
 800e180:	d96e      	bls.n	800e260 <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 800e182:	687b      	ldr	r3, [r7, #4]
 800e184:	7bdb      	ldrb	r3, [r3, #15]
 800e186:	2b00      	cmp	r3, #0
 800e188:	d106      	bne.n	800e198 <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 800e18a:	683b      	ldr	r3, [r7, #0]
 800e18c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800e190:	3301      	adds	r3, #1
 800e192:	b2da      	uxtb	r2, r3
 800e194:	687b      	ldr	r3, [r7, #4]
 800e196:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 800e198:	687b      	ldr	r3, [r7, #4]
 800e19a:	685b      	ldr	r3, [r3, #4]
 800e19c:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 800e19e:	693b      	ldr	r3, [r7, #16]
 800e1a0:	7b1a      	ldrb	r2, [r3, #12]
 800e1a2:	7b5b      	ldrb	r3, [r3, #13]
 800e1a4:	021b      	lsls	r3, r3, #8
 800e1a6:	4313      	orrs	r3, r2
 800e1a8:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 800e1aa:	693b      	ldr	r3, [r7, #16]
 800e1ac:	781b      	ldrb	r3, [r3, #0]
 800e1ae:	f003 0301 	and.w	r3, r3, #1
 800e1b2:	2b00      	cmp	r3, #0
 800e1b4:	d023      	beq.n	800e1fe <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 800e1b6:	693b      	ldr	r3, [r7, #16]
 800e1b8:	781b      	ldrb	r3, [r3, #0]
 800e1ba:	2b01      	cmp	r3, #1
 800e1bc:	d10f      	bne.n	800e1de <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 800e1be:	693b      	ldr	r3, [r7, #16]
 800e1c0:	785b      	ldrb	r3, [r3, #1]
 800e1c2:	2b00      	cmp	r3, #0
 800e1c4:	d11b      	bne.n	800e1fe <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 800e1c6:	693b      	ldr	r3, [r7, #16]
 800e1c8:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 800e1ca:	2b5e      	cmp	r3, #94	; 0x5e
 800e1cc:	d117      	bne.n	800e1fe <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 800e1ce:	687b      	ldr	r3, [r7, #4]
 800e1d0:	7b5b      	ldrb	r3, [r3, #13]
 800e1d2:	f043 0310 	orr.w	r3, r3, #16
 800e1d6:	b2da      	uxtb	r2, r3
 800e1d8:	687b      	ldr	r3, [r7, #4]
 800e1da:	735a      	strb	r2, [r3, #13]
 800e1dc:	e00f      	b.n	800e1fe <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 800e1de:	693b      	ldr	r3, [r7, #16]
 800e1e0:	2206      	movs	r2, #6
 800e1e2:	4928      	ldr	r1, [pc, #160]	; (800e284 <ethernet_input+0x118>)
 800e1e4:	4618      	mov	r0, r3
 800e1e6:	f000 facb 	bl	800e780 <memcmp>
 800e1ea:	4603      	mov	r3, r0
 800e1ec:	2b00      	cmp	r3, #0
 800e1ee:	d106      	bne.n	800e1fe <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 800e1f0:	687b      	ldr	r3, [r7, #4]
 800e1f2:	7b5b      	ldrb	r3, [r3, #13]
 800e1f4:	f043 0308 	orr.w	r3, r3, #8
 800e1f8:	b2da      	uxtb	r2, r3
 800e1fa:	687b      	ldr	r3, [r7, #4]
 800e1fc:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 800e1fe:	89fb      	ldrh	r3, [r7, #14]
 800e200:	2b08      	cmp	r3, #8
 800e202:	d003      	beq.n	800e20c <ethernet_input+0xa0>
 800e204:	f5b3 6fc1 	cmp.w	r3, #1544	; 0x608
 800e208:	d014      	beq.n	800e234 <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 800e20a:	e032      	b.n	800e272 <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 800e20c:	683b      	ldr	r3, [r7, #0]
 800e20e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800e212:	f003 0308 	and.w	r3, r3, #8
 800e216:	2b00      	cmp	r3, #0
 800e218:	d024      	beq.n	800e264 <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 800e21a:	8afb      	ldrh	r3, [r7, #22]
 800e21c:	4619      	mov	r1, r3
 800e21e:	6878      	ldr	r0, [r7, #4]
 800e220:	f7f7 fab8 	bl	8005794 <pbuf_remove_header>
 800e224:	4603      	mov	r3, r0
 800e226:	2b00      	cmp	r3, #0
 800e228:	d11e      	bne.n	800e268 <ethernet_input+0xfc>
        ip4_input(p, netif);
 800e22a:	6839      	ldr	r1, [r7, #0]
 800e22c:	6878      	ldr	r0, [r7, #4]
 800e22e:	f7fe ff21 	bl	800d074 <ip4_input>
      break;
 800e232:	e013      	b.n	800e25c <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 800e234:	683b      	ldr	r3, [r7, #0]
 800e236:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800e23a:	f003 0308 	and.w	r3, r3, #8
 800e23e:	2b00      	cmp	r3, #0
 800e240:	d014      	beq.n	800e26c <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 800e242:	8afb      	ldrh	r3, [r7, #22]
 800e244:	4619      	mov	r1, r3
 800e246:	6878      	ldr	r0, [r7, #4]
 800e248:	f7f7 faa4 	bl	8005794 <pbuf_remove_header>
 800e24c:	4603      	mov	r3, r0
 800e24e:	2b00      	cmp	r3, #0
 800e250:	d10e      	bne.n	800e270 <ethernet_input+0x104>
        etharp_input(p, netif);
 800e252:	6839      	ldr	r1, [r7, #0]
 800e254:	6878      	ldr	r0, [r7, #4]
 800e256:	f7fe f8c1 	bl	800c3dc <etharp_input>
      break;
 800e25a:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 800e25c:	2300      	movs	r3, #0
 800e25e:	e00c      	b.n	800e27a <ethernet_input+0x10e>
    goto free_and_return;
 800e260:	bf00      	nop
 800e262:	e006      	b.n	800e272 <ethernet_input+0x106>
        goto free_and_return;
 800e264:	bf00      	nop
 800e266:	e004      	b.n	800e272 <ethernet_input+0x106>
        goto free_and_return;
 800e268:	bf00      	nop
 800e26a:	e002      	b.n	800e272 <ethernet_input+0x106>
        goto free_and_return;
 800e26c:	bf00      	nop
 800e26e:	e000      	b.n	800e272 <ethernet_input+0x106>
        goto free_and_return;
 800e270:	bf00      	nop

free_and_return:
  pbuf_free(p);
 800e272:	6878      	ldr	r0, [r7, #4]
 800e274:	f7f7 fb14 	bl	80058a0 <pbuf_free>
  return ERR_OK;
 800e278:	2300      	movs	r3, #0
}
 800e27a:	4618      	mov	r0, r3
 800e27c:	3718      	adds	r7, #24
 800e27e:	46bd      	mov	sp, r7
 800e280:	bd80      	pop	{r7, pc}
 800e282:	bf00      	nop
 800e284:	08011ec0 	.word	0x08011ec0

0800e288 <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 800e288:	b580      	push	{r7, lr}
 800e28a:	b086      	sub	sp, #24
 800e28c:	af00      	add	r7, sp, #0
 800e28e:	60f8      	str	r0, [r7, #12]
 800e290:	60b9      	str	r1, [r7, #8]
 800e292:	607a      	str	r2, [r7, #4]
 800e294:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 800e296:	8c3b      	ldrh	r3, [r7, #32]
 800e298:	4618      	mov	r0, r3
 800e29a:	f7f5 ffa3 	bl	80041e4 <lwip_htons>
 800e29e:	4603      	mov	r3, r0
 800e2a0:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 800e2a2:	210e      	movs	r1, #14
 800e2a4:	68b8      	ldr	r0, [r7, #8]
 800e2a6:	f7f7 fa65 	bl	8005774 <pbuf_add_header>
 800e2aa:	4603      	mov	r3, r0
 800e2ac:	2b00      	cmp	r3, #0
 800e2ae:	d125      	bne.n	800e2fc <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 800e2b0:	68bb      	ldr	r3, [r7, #8]
 800e2b2:	685b      	ldr	r3, [r3, #4]
 800e2b4:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 800e2b6:	693b      	ldr	r3, [r7, #16]
 800e2b8:	8afa      	ldrh	r2, [r7, #22]
 800e2ba:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 800e2bc:	693b      	ldr	r3, [r7, #16]
 800e2be:	2206      	movs	r2, #6
 800e2c0:	6839      	ldr	r1, [r7, #0]
 800e2c2:	4618      	mov	r0, r3
 800e2c4:	f000 fae0 	bl	800e888 <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 800e2c8:	693b      	ldr	r3, [r7, #16]
 800e2ca:	3306      	adds	r3, #6
 800e2cc:	2206      	movs	r2, #6
 800e2ce:	6879      	ldr	r1, [r7, #4]
 800e2d0:	4618      	mov	r0, r3
 800e2d2:	f000 fad9 	bl	800e888 <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 800e2d6:	68fb      	ldr	r3, [r7, #12]
 800e2d8:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800e2dc:	2b06      	cmp	r3, #6
 800e2de:	d006      	beq.n	800e2ee <ethernet_output+0x66>
 800e2e0:	4b0a      	ldr	r3, [pc, #40]	; (800e30c <ethernet_output+0x84>)
 800e2e2:	f44f 7299 	mov.w	r2, #306	; 0x132
 800e2e6:	490a      	ldr	r1, [pc, #40]	; (800e310 <ethernet_output+0x88>)
 800e2e8:	480a      	ldr	r0, [pc, #40]	; (800e314 <ethernet_output+0x8c>)
 800e2ea:	f000 f903 	bl	800e4f4 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 800e2ee:	68fb      	ldr	r3, [r7, #12]
 800e2f0:	699b      	ldr	r3, [r3, #24]
 800e2f2:	68b9      	ldr	r1, [r7, #8]
 800e2f4:	68f8      	ldr	r0, [r7, #12]
 800e2f6:	4798      	blx	r3
 800e2f8:	4603      	mov	r3, r0
 800e2fa:	e002      	b.n	800e302 <ethernet_output+0x7a>
      goto pbuf_header_failed;
 800e2fc:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 800e2fe:	f06f 0301 	mvn.w	r3, #1
}
 800e302:	4618      	mov	r0, r3
 800e304:	3718      	adds	r7, #24
 800e306:	46bd      	mov	sp, r7
 800e308:	bd80      	pop	{r7, pc}
 800e30a:	bf00      	nop
 800e30c:	08011d34 	.word	0x08011d34
 800e310:	08011d6c 	.word	0x08011d6c
 800e314:	08011da0 	.word	0x08011da0

0800e318 <rand>:
 800e318:	4b16      	ldr	r3, [pc, #88]	; (800e374 <rand+0x5c>)
 800e31a:	b510      	push	{r4, lr}
 800e31c:	681c      	ldr	r4, [r3, #0]
 800e31e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800e320:	b9b3      	cbnz	r3, 800e350 <rand+0x38>
 800e322:	2018      	movs	r0, #24
 800e324:	f000 fb28 	bl	800e978 <malloc>
 800e328:	4602      	mov	r2, r0
 800e32a:	6320      	str	r0, [r4, #48]	; 0x30
 800e32c:	b920      	cbnz	r0, 800e338 <rand+0x20>
 800e32e:	4b12      	ldr	r3, [pc, #72]	; (800e378 <rand+0x60>)
 800e330:	4812      	ldr	r0, [pc, #72]	; (800e37c <rand+0x64>)
 800e332:	2152      	movs	r1, #82	; 0x52
 800e334:	f000 fab6 	bl	800e8a4 <__assert_func>
 800e338:	4911      	ldr	r1, [pc, #68]	; (800e380 <rand+0x68>)
 800e33a:	4b12      	ldr	r3, [pc, #72]	; (800e384 <rand+0x6c>)
 800e33c:	e9c0 1300 	strd	r1, r3, [r0]
 800e340:	4b11      	ldr	r3, [pc, #68]	; (800e388 <rand+0x70>)
 800e342:	6083      	str	r3, [r0, #8]
 800e344:	230b      	movs	r3, #11
 800e346:	8183      	strh	r3, [r0, #12]
 800e348:	2100      	movs	r1, #0
 800e34a:	2001      	movs	r0, #1
 800e34c:	e9c2 0104 	strd	r0, r1, [r2, #16]
 800e350:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800e352:	480e      	ldr	r0, [pc, #56]	; (800e38c <rand+0x74>)
 800e354:	690b      	ldr	r3, [r1, #16]
 800e356:	694c      	ldr	r4, [r1, #20]
 800e358:	4a0d      	ldr	r2, [pc, #52]	; (800e390 <rand+0x78>)
 800e35a:	4358      	muls	r0, r3
 800e35c:	fb02 0004 	mla	r0, r2, r4, r0
 800e360:	fba3 3202 	umull	r3, r2, r3, r2
 800e364:	3301      	adds	r3, #1
 800e366:	eb40 0002 	adc.w	r0, r0, r2
 800e36a:	e9c1 3004 	strd	r3, r0, [r1, #16]
 800e36e:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 800e372:	bd10      	pop	{r4, pc}
 800e374:	20000084 	.word	0x20000084
 800e378:	08011ece 	.word	0x08011ece
 800e37c:	08011ee5 	.word	0x08011ee5
 800e380:	abcd330e 	.word	0xabcd330e
 800e384:	e66d1234 	.word	0xe66d1234
 800e388:	0005deec 	.word	0x0005deec
 800e38c:	5851f42d 	.word	0x5851f42d
 800e390:	4c957f2d 	.word	0x4c957f2d

0800e394 <std>:
 800e394:	2300      	movs	r3, #0
 800e396:	b510      	push	{r4, lr}
 800e398:	4604      	mov	r4, r0
 800e39a:	e9c0 3300 	strd	r3, r3, [r0]
 800e39e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800e3a2:	6083      	str	r3, [r0, #8]
 800e3a4:	8181      	strh	r1, [r0, #12]
 800e3a6:	6643      	str	r3, [r0, #100]	; 0x64
 800e3a8:	81c2      	strh	r2, [r0, #14]
 800e3aa:	6183      	str	r3, [r0, #24]
 800e3ac:	4619      	mov	r1, r3
 800e3ae:	2208      	movs	r2, #8
 800e3b0:	305c      	adds	r0, #92	; 0x5c
 800e3b2:	f000 f9f5 	bl	800e7a0 <memset>
 800e3b6:	4b05      	ldr	r3, [pc, #20]	; (800e3cc <std+0x38>)
 800e3b8:	6263      	str	r3, [r4, #36]	; 0x24
 800e3ba:	4b05      	ldr	r3, [pc, #20]	; (800e3d0 <std+0x3c>)
 800e3bc:	62a3      	str	r3, [r4, #40]	; 0x28
 800e3be:	4b05      	ldr	r3, [pc, #20]	; (800e3d4 <std+0x40>)
 800e3c0:	62e3      	str	r3, [r4, #44]	; 0x2c
 800e3c2:	4b05      	ldr	r3, [pc, #20]	; (800e3d8 <std+0x44>)
 800e3c4:	6224      	str	r4, [r4, #32]
 800e3c6:	6323      	str	r3, [r4, #48]	; 0x30
 800e3c8:	bd10      	pop	{r4, pc}
 800e3ca:	bf00      	nop
 800e3cc:	0800e5d1 	.word	0x0800e5d1
 800e3d0:	0800e5f3 	.word	0x0800e5f3
 800e3d4:	0800e62b 	.word	0x0800e62b
 800e3d8:	0800e64f 	.word	0x0800e64f

0800e3dc <stdio_exit_handler>:
 800e3dc:	4a02      	ldr	r2, [pc, #8]	; (800e3e8 <stdio_exit_handler+0xc>)
 800e3de:	4903      	ldr	r1, [pc, #12]	; (800e3ec <stdio_exit_handler+0x10>)
 800e3e0:	4803      	ldr	r0, [pc, #12]	; (800e3f0 <stdio_exit_handler+0x14>)
 800e3e2:	f000 b869 	b.w	800e4b8 <_fwalk_sglue>
 800e3e6:	bf00      	nop
 800e3e8:	2000002c 	.word	0x2000002c
 800e3ec:	0800f195 	.word	0x0800f195
 800e3f0:	20000038 	.word	0x20000038

0800e3f4 <cleanup_stdio>:
 800e3f4:	6841      	ldr	r1, [r0, #4]
 800e3f6:	4b0c      	ldr	r3, [pc, #48]	; (800e428 <cleanup_stdio+0x34>)
 800e3f8:	4299      	cmp	r1, r3
 800e3fa:	b510      	push	{r4, lr}
 800e3fc:	4604      	mov	r4, r0
 800e3fe:	d001      	beq.n	800e404 <cleanup_stdio+0x10>
 800e400:	f000 fec8 	bl	800f194 <_fflush_r>
 800e404:	68a1      	ldr	r1, [r4, #8]
 800e406:	4b09      	ldr	r3, [pc, #36]	; (800e42c <cleanup_stdio+0x38>)
 800e408:	4299      	cmp	r1, r3
 800e40a:	d002      	beq.n	800e412 <cleanup_stdio+0x1e>
 800e40c:	4620      	mov	r0, r4
 800e40e:	f000 fec1 	bl	800f194 <_fflush_r>
 800e412:	68e1      	ldr	r1, [r4, #12]
 800e414:	4b06      	ldr	r3, [pc, #24]	; (800e430 <cleanup_stdio+0x3c>)
 800e416:	4299      	cmp	r1, r3
 800e418:	d004      	beq.n	800e424 <cleanup_stdio+0x30>
 800e41a:	4620      	mov	r0, r4
 800e41c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e420:	f000 beb8 	b.w	800f194 <_fflush_r>
 800e424:	bd10      	pop	{r4, pc}
 800e426:	bf00      	nop
 800e428:	200083dc 	.word	0x200083dc
 800e42c:	20008444 	.word	0x20008444
 800e430:	200084ac 	.word	0x200084ac

0800e434 <global_stdio_init.part.0>:
 800e434:	b510      	push	{r4, lr}
 800e436:	4b0b      	ldr	r3, [pc, #44]	; (800e464 <global_stdio_init.part.0+0x30>)
 800e438:	4c0b      	ldr	r4, [pc, #44]	; (800e468 <global_stdio_init.part.0+0x34>)
 800e43a:	4a0c      	ldr	r2, [pc, #48]	; (800e46c <global_stdio_init.part.0+0x38>)
 800e43c:	601a      	str	r2, [r3, #0]
 800e43e:	4620      	mov	r0, r4
 800e440:	2200      	movs	r2, #0
 800e442:	2104      	movs	r1, #4
 800e444:	f7ff ffa6 	bl	800e394 <std>
 800e448:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800e44c:	2201      	movs	r2, #1
 800e44e:	2109      	movs	r1, #9
 800e450:	f7ff ffa0 	bl	800e394 <std>
 800e454:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800e458:	2202      	movs	r2, #2
 800e45a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e45e:	2112      	movs	r1, #18
 800e460:	f7ff bf98 	b.w	800e394 <std>
 800e464:	20008514 	.word	0x20008514
 800e468:	200083dc 	.word	0x200083dc
 800e46c:	0800e3dd 	.word	0x0800e3dd

0800e470 <__sfp_lock_acquire>:
 800e470:	4801      	ldr	r0, [pc, #4]	; (800e478 <__sfp_lock_acquire+0x8>)
 800e472:	f000 ba07 	b.w	800e884 <__retarget_lock_acquire_recursive>
 800e476:	bf00      	nop
 800e478:	2000851d 	.word	0x2000851d

0800e47c <__sfp_lock_release>:
 800e47c:	4801      	ldr	r0, [pc, #4]	; (800e484 <__sfp_lock_release+0x8>)
 800e47e:	f000 ba02 	b.w	800e886 <__retarget_lock_release_recursive>
 800e482:	bf00      	nop
 800e484:	2000851d 	.word	0x2000851d

0800e488 <__sinit>:
 800e488:	b510      	push	{r4, lr}
 800e48a:	4604      	mov	r4, r0
 800e48c:	f7ff fff0 	bl	800e470 <__sfp_lock_acquire>
 800e490:	6a23      	ldr	r3, [r4, #32]
 800e492:	b11b      	cbz	r3, 800e49c <__sinit+0x14>
 800e494:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e498:	f7ff bff0 	b.w	800e47c <__sfp_lock_release>
 800e49c:	4b04      	ldr	r3, [pc, #16]	; (800e4b0 <__sinit+0x28>)
 800e49e:	6223      	str	r3, [r4, #32]
 800e4a0:	4b04      	ldr	r3, [pc, #16]	; (800e4b4 <__sinit+0x2c>)
 800e4a2:	681b      	ldr	r3, [r3, #0]
 800e4a4:	2b00      	cmp	r3, #0
 800e4a6:	d1f5      	bne.n	800e494 <__sinit+0xc>
 800e4a8:	f7ff ffc4 	bl	800e434 <global_stdio_init.part.0>
 800e4ac:	e7f2      	b.n	800e494 <__sinit+0xc>
 800e4ae:	bf00      	nop
 800e4b0:	0800e3f5 	.word	0x0800e3f5
 800e4b4:	20008514 	.word	0x20008514

0800e4b8 <_fwalk_sglue>:
 800e4b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e4bc:	4607      	mov	r7, r0
 800e4be:	4688      	mov	r8, r1
 800e4c0:	4614      	mov	r4, r2
 800e4c2:	2600      	movs	r6, #0
 800e4c4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800e4c8:	f1b9 0901 	subs.w	r9, r9, #1
 800e4cc:	d505      	bpl.n	800e4da <_fwalk_sglue+0x22>
 800e4ce:	6824      	ldr	r4, [r4, #0]
 800e4d0:	2c00      	cmp	r4, #0
 800e4d2:	d1f7      	bne.n	800e4c4 <_fwalk_sglue+0xc>
 800e4d4:	4630      	mov	r0, r6
 800e4d6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e4da:	89ab      	ldrh	r3, [r5, #12]
 800e4dc:	2b01      	cmp	r3, #1
 800e4de:	d907      	bls.n	800e4f0 <_fwalk_sglue+0x38>
 800e4e0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800e4e4:	3301      	adds	r3, #1
 800e4e6:	d003      	beq.n	800e4f0 <_fwalk_sglue+0x38>
 800e4e8:	4629      	mov	r1, r5
 800e4ea:	4638      	mov	r0, r7
 800e4ec:	47c0      	blx	r8
 800e4ee:	4306      	orrs	r6, r0
 800e4f0:	3568      	adds	r5, #104	; 0x68
 800e4f2:	e7e9      	b.n	800e4c8 <_fwalk_sglue+0x10>

0800e4f4 <iprintf>:
 800e4f4:	b40f      	push	{r0, r1, r2, r3}
 800e4f6:	b507      	push	{r0, r1, r2, lr}
 800e4f8:	4906      	ldr	r1, [pc, #24]	; (800e514 <iprintf+0x20>)
 800e4fa:	ab04      	add	r3, sp, #16
 800e4fc:	6808      	ldr	r0, [r1, #0]
 800e4fe:	f853 2b04 	ldr.w	r2, [r3], #4
 800e502:	6881      	ldr	r1, [r0, #8]
 800e504:	9301      	str	r3, [sp, #4]
 800e506:	f000 fb15 	bl	800eb34 <_vfiprintf_r>
 800e50a:	b003      	add	sp, #12
 800e50c:	f85d eb04 	ldr.w	lr, [sp], #4
 800e510:	b004      	add	sp, #16
 800e512:	4770      	bx	lr
 800e514:	20000084 	.word	0x20000084

0800e518 <_puts_r>:
 800e518:	6a03      	ldr	r3, [r0, #32]
 800e51a:	b570      	push	{r4, r5, r6, lr}
 800e51c:	6884      	ldr	r4, [r0, #8]
 800e51e:	4605      	mov	r5, r0
 800e520:	460e      	mov	r6, r1
 800e522:	b90b      	cbnz	r3, 800e528 <_puts_r+0x10>
 800e524:	f7ff ffb0 	bl	800e488 <__sinit>
 800e528:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800e52a:	07db      	lsls	r3, r3, #31
 800e52c:	d405      	bmi.n	800e53a <_puts_r+0x22>
 800e52e:	89a3      	ldrh	r3, [r4, #12]
 800e530:	0598      	lsls	r0, r3, #22
 800e532:	d402      	bmi.n	800e53a <_puts_r+0x22>
 800e534:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e536:	f000 f9a5 	bl	800e884 <__retarget_lock_acquire_recursive>
 800e53a:	89a3      	ldrh	r3, [r4, #12]
 800e53c:	0719      	lsls	r1, r3, #28
 800e53e:	d513      	bpl.n	800e568 <_puts_r+0x50>
 800e540:	6923      	ldr	r3, [r4, #16]
 800e542:	b18b      	cbz	r3, 800e568 <_puts_r+0x50>
 800e544:	3e01      	subs	r6, #1
 800e546:	68a3      	ldr	r3, [r4, #8]
 800e548:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800e54c:	3b01      	subs	r3, #1
 800e54e:	60a3      	str	r3, [r4, #8]
 800e550:	b9e9      	cbnz	r1, 800e58e <_puts_r+0x76>
 800e552:	2b00      	cmp	r3, #0
 800e554:	da2e      	bge.n	800e5b4 <_puts_r+0x9c>
 800e556:	4622      	mov	r2, r4
 800e558:	210a      	movs	r1, #10
 800e55a:	4628      	mov	r0, r5
 800e55c:	f000 f87b 	bl	800e656 <__swbuf_r>
 800e560:	3001      	adds	r0, #1
 800e562:	d007      	beq.n	800e574 <_puts_r+0x5c>
 800e564:	250a      	movs	r5, #10
 800e566:	e007      	b.n	800e578 <_puts_r+0x60>
 800e568:	4621      	mov	r1, r4
 800e56a:	4628      	mov	r0, r5
 800e56c:	f000 f8b0 	bl	800e6d0 <__swsetup_r>
 800e570:	2800      	cmp	r0, #0
 800e572:	d0e7      	beq.n	800e544 <_puts_r+0x2c>
 800e574:	f04f 35ff 	mov.w	r5, #4294967295
 800e578:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800e57a:	07da      	lsls	r2, r3, #31
 800e57c:	d405      	bmi.n	800e58a <_puts_r+0x72>
 800e57e:	89a3      	ldrh	r3, [r4, #12]
 800e580:	059b      	lsls	r3, r3, #22
 800e582:	d402      	bmi.n	800e58a <_puts_r+0x72>
 800e584:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e586:	f000 f97e 	bl	800e886 <__retarget_lock_release_recursive>
 800e58a:	4628      	mov	r0, r5
 800e58c:	bd70      	pop	{r4, r5, r6, pc}
 800e58e:	2b00      	cmp	r3, #0
 800e590:	da04      	bge.n	800e59c <_puts_r+0x84>
 800e592:	69a2      	ldr	r2, [r4, #24]
 800e594:	429a      	cmp	r2, r3
 800e596:	dc06      	bgt.n	800e5a6 <_puts_r+0x8e>
 800e598:	290a      	cmp	r1, #10
 800e59a:	d004      	beq.n	800e5a6 <_puts_r+0x8e>
 800e59c:	6823      	ldr	r3, [r4, #0]
 800e59e:	1c5a      	adds	r2, r3, #1
 800e5a0:	6022      	str	r2, [r4, #0]
 800e5a2:	7019      	strb	r1, [r3, #0]
 800e5a4:	e7cf      	b.n	800e546 <_puts_r+0x2e>
 800e5a6:	4622      	mov	r2, r4
 800e5a8:	4628      	mov	r0, r5
 800e5aa:	f000 f854 	bl	800e656 <__swbuf_r>
 800e5ae:	3001      	adds	r0, #1
 800e5b0:	d1c9      	bne.n	800e546 <_puts_r+0x2e>
 800e5b2:	e7df      	b.n	800e574 <_puts_r+0x5c>
 800e5b4:	6823      	ldr	r3, [r4, #0]
 800e5b6:	250a      	movs	r5, #10
 800e5b8:	1c5a      	adds	r2, r3, #1
 800e5ba:	6022      	str	r2, [r4, #0]
 800e5bc:	701d      	strb	r5, [r3, #0]
 800e5be:	e7db      	b.n	800e578 <_puts_r+0x60>

0800e5c0 <puts>:
 800e5c0:	4b02      	ldr	r3, [pc, #8]	; (800e5cc <puts+0xc>)
 800e5c2:	4601      	mov	r1, r0
 800e5c4:	6818      	ldr	r0, [r3, #0]
 800e5c6:	f7ff bfa7 	b.w	800e518 <_puts_r>
 800e5ca:	bf00      	nop
 800e5cc:	20000084 	.word	0x20000084

0800e5d0 <__sread>:
 800e5d0:	b510      	push	{r4, lr}
 800e5d2:	460c      	mov	r4, r1
 800e5d4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e5d8:	f000 f90c 	bl	800e7f4 <_read_r>
 800e5dc:	2800      	cmp	r0, #0
 800e5de:	bfab      	itete	ge
 800e5e0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800e5e2:	89a3      	ldrhlt	r3, [r4, #12]
 800e5e4:	181b      	addge	r3, r3, r0
 800e5e6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800e5ea:	bfac      	ite	ge
 800e5ec:	6563      	strge	r3, [r4, #84]	; 0x54
 800e5ee:	81a3      	strhlt	r3, [r4, #12]
 800e5f0:	bd10      	pop	{r4, pc}

0800e5f2 <__swrite>:
 800e5f2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e5f6:	461f      	mov	r7, r3
 800e5f8:	898b      	ldrh	r3, [r1, #12]
 800e5fa:	05db      	lsls	r3, r3, #23
 800e5fc:	4605      	mov	r5, r0
 800e5fe:	460c      	mov	r4, r1
 800e600:	4616      	mov	r6, r2
 800e602:	d505      	bpl.n	800e610 <__swrite+0x1e>
 800e604:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e608:	2302      	movs	r3, #2
 800e60a:	2200      	movs	r2, #0
 800e60c:	f000 f8e0 	bl	800e7d0 <_lseek_r>
 800e610:	89a3      	ldrh	r3, [r4, #12]
 800e612:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e616:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800e61a:	81a3      	strh	r3, [r4, #12]
 800e61c:	4632      	mov	r2, r6
 800e61e:	463b      	mov	r3, r7
 800e620:	4628      	mov	r0, r5
 800e622:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e626:	f000 b8f7 	b.w	800e818 <_write_r>

0800e62a <__sseek>:
 800e62a:	b510      	push	{r4, lr}
 800e62c:	460c      	mov	r4, r1
 800e62e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e632:	f000 f8cd 	bl	800e7d0 <_lseek_r>
 800e636:	1c43      	adds	r3, r0, #1
 800e638:	89a3      	ldrh	r3, [r4, #12]
 800e63a:	bf15      	itete	ne
 800e63c:	6560      	strne	r0, [r4, #84]	; 0x54
 800e63e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800e642:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800e646:	81a3      	strheq	r3, [r4, #12]
 800e648:	bf18      	it	ne
 800e64a:	81a3      	strhne	r3, [r4, #12]
 800e64c:	bd10      	pop	{r4, pc}

0800e64e <__sclose>:
 800e64e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e652:	f000 b8ad 	b.w	800e7b0 <_close_r>

0800e656 <__swbuf_r>:
 800e656:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e658:	460e      	mov	r6, r1
 800e65a:	4614      	mov	r4, r2
 800e65c:	4605      	mov	r5, r0
 800e65e:	b118      	cbz	r0, 800e668 <__swbuf_r+0x12>
 800e660:	6a03      	ldr	r3, [r0, #32]
 800e662:	b90b      	cbnz	r3, 800e668 <__swbuf_r+0x12>
 800e664:	f7ff ff10 	bl	800e488 <__sinit>
 800e668:	69a3      	ldr	r3, [r4, #24]
 800e66a:	60a3      	str	r3, [r4, #8]
 800e66c:	89a3      	ldrh	r3, [r4, #12]
 800e66e:	071a      	lsls	r2, r3, #28
 800e670:	d525      	bpl.n	800e6be <__swbuf_r+0x68>
 800e672:	6923      	ldr	r3, [r4, #16]
 800e674:	b31b      	cbz	r3, 800e6be <__swbuf_r+0x68>
 800e676:	6823      	ldr	r3, [r4, #0]
 800e678:	6922      	ldr	r2, [r4, #16]
 800e67a:	1a98      	subs	r0, r3, r2
 800e67c:	6963      	ldr	r3, [r4, #20]
 800e67e:	b2f6      	uxtb	r6, r6
 800e680:	4283      	cmp	r3, r0
 800e682:	4637      	mov	r7, r6
 800e684:	dc04      	bgt.n	800e690 <__swbuf_r+0x3a>
 800e686:	4621      	mov	r1, r4
 800e688:	4628      	mov	r0, r5
 800e68a:	f000 fd83 	bl	800f194 <_fflush_r>
 800e68e:	b9e0      	cbnz	r0, 800e6ca <__swbuf_r+0x74>
 800e690:	68a3      	ldr	r3, [r4, #8]
 800e692:	3b01      	subs	r3, #1
 800e694:	60a3      	str	r3, [r4, #8]
 800e696:	6823      	ldr	r3, [r4, #0]
 800e698:	1c5a      	adds	r2, r3, #1
 800e69a:	6022      	str	r2, [r4, #0]
 800e69c:	701e      	strb	r6, [r3, #0]
 800e69e:	6962      	ldr	r2, [r4, #20]
 800e6a0:	1c43      	adds	r3, r0, #1
 800e6a2:	429a      	cmp	r2, r3
 800e6a4:	d004      	beq.n	800e6b0 <__swbuf_r+0x5a>
 800e6a6:	89a3      	ldrh	r3, [r4, #12]
 800e6a8:	07db      	lsls	r3, r3, #31
 800e6aa:	d506      	bpl.n	800e6ba <__swbuf_r+0x64>
 800e6ac:	2e0a      	cmp	r6, #10
 800e6ae:	d104      	bne.n	800e6ba <__swbuf_r+0x64>
 800e6b0:	4621      	mov	r1, r4
 800e6b2:	4628      	mov	r0, r5
 800e6b4:	f000 fd6e 	bl	800f194 <_fflush_r>
 800e6b8:	b938      	cbnz	r0, 800e6ca <__swbuf_r+0x74>
 800e6ba:	4638      	mov	r0, r7
 800e6bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e6be:	4621      	mov	r1, r4
 800e6c0:	4628      	mov	r0, r5
 800e6c2:	f000 f805 	bl	800e6d0 <__swsetup_r>
 800e6c6:	2800      	cmp	r0, #0
 800e6c8:	d0d5      	beq.n	800e676 <__swbuf_r+0x20>
 800e6ca:	f04f 37ff 	mov.w	r7, #4294967295
 800e6ce:	e7f4      	b.n	800e6ba <__swbuf_r+0x64>

0800e6d0 <__swsetup_r>:
 800e6d0:	b538      	push	{r3, r4, r5, lr}
 800e6d2:	4b2a      	ldr	r3, [pc, #168]	; (800e77c <__swsetup_r+0xac>)
 800e6d4:	4605      	mov	r5, r0
 800e6d6:	6818      	ldr	r0, [r3, #0]
 800e6d8:	460c      	mov	r4, r1
 800e6da:	b118      	cbz	r0, 800e6e4 <__swsetup_r+0x14>
 800e6dc:	6a03      	ldr	r3, [r0, #32]
 800e6de:	b90b      	cbnz	r3, 800e6e4 <__swsetup_r+0x14>
 800e6e0:	f7ff fed2 	bl	800e488 <__sinit>
 800e6e4:	89a3      	ldrh	r3, [r4, #12]
 800e6e6:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800e6ea:	0718      	lsls	r0, r3, #28
 800e6ec:	d422      	bmi.n	800e734 <__swsetup_r+0x64>
 800e6ee:	06d9      	lsls	r1, r3, #27
 800e6f0:	d407      	bmi.n	800e702 <__swsetup_r+0x32>
 800e6f2:	2309      	movs	r3, #9
 800e6f4:	602b      	str	r3, [r5, #0]
 800e6f6:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800e6fa:	81a3      	strh	r3, [r4, #12]
 800e6fc:	f04f 30ff 	mov.w	r0, #4294967295
 800e700:	e034      	b.n	800e76c <__swsetup_r+0x9c>
 800e702:	0758      	lsls	r0, r3, #29
 800e704:	d512      	bpl.n	800e72c <__swsetup_r+0x5c>
 800e706:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800e708:	b141      	cbz	r1, 800e71c <__swsetup_r+0x4c>
 800e70a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800e70e:	4299      	cmp	r1, r3
 800e710:	d002      	beq.n	800e718 <__swsetup_r+0x48>
 800e712:	4628      	mov	r0, r5
 800e714:	f000 f8e4 	bl	800e8e0 <_free_r>
 800e718:	2300      	movs	r3, #0
 800e71a:	6363      	str	r3, [r4, #52]	; 0x34
 800e71c:	89a3      	ldrh	r3, [r4, #12]
 800e71e:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800e722:	81a3      	strh	r3, [r4, #12]
 800e724:	2300      	movs	r3, #0
 800e726:	6063      	str	r3, [r4, #4]
 800e728:	6923      	ldr	r3, [r4, #16]
 800e72a:	6023      	str	r3, [r4, #0]
 800e72c:	89a3      	ldrh	r3, [r4, #12]
 800e72e:	f043 0308 	orr.w	r3, r3, #8
 800e732:	81a3      	strh	r3, [r4, #12]
 800e734:	6923      	ldr	r3, [r4, #16]
 800e736:	b94b      	cbnz	r3, 800e74c <__swsetup_r+0x7c>
 800e738:	89a3      	ldrh	r3, [r4, #12]
 800e73a:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800e73e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800e742:	d003      	beq.n	800e74c <__swsetup_r+0x7c>
 800e744:	4621      	mov	r1, r4
 800e746:	4628      	mov	r0, r5
 800e748:	f000 fd84 	bl	800f254 <__smakebuf_r>
 800e74c:	89a0      	ldrh	r0, [r4, #12]
 800e74e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800e752:	f010 0301 	ands.w	r3, r0, #1
 800e756:	d00a      	beq.n	800e76e <__swsetup_r+0x9e>
 800e758:	2300      	movs	r3, #0
 800e75a:	60a3      	str	r3, [r4, #8]
 800e75c:	6963      	ldr	r3, [r4, #20]
 800e75e:	425b      	negs	r3, r3
 800e760:	61a3      	str	r3, [r4, #24]
 800e762:	6923      	ldr	r3, [r4, #16]
 800e764:	b943      	cbnz	r3, 800e778 <__swsetup_r+0xa8>
 800e766:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800e76a:	d1c4      	bne.n	800e6f6 <__swsetup_r+0x26>
 800e76c:	bd38      	pop	{r3, r4, r5, pc}
 800e76e:	0781      	lsls	r1, r0, #30
 800e770:	bf58      	it	pl
 800e772:	6963      	ldrpl	r3, [r4, #20]
 800e774:	60a3      	str	r3, [r4, #8]
 800e776:	e7f4      	b.n	800e762 <__swsetup_r+0x92>
 800e778:	2000      	movs	r0, #0
 800e77a:	e7f7      	b.n	800e76c <__swsetup_r+0x9c>
 800e77c:	20000084 	.word	0x20000084

0800e780 <memcmp>:
 800e780:	b510      	push	{r4, lr}
 800e782:	3901      	subs	r1, #1
 800e784:	4402      	add	r2, r0
 800e786:	4290      	cmp	r0, r2
 800e788:	d101      	bne.n	800e78e <memcmp+0xe>
 800e78a:	2000      	movs	r0, #0
 800e78c:	e005      	b.n	800e79a <memcmp+0x1a>
 800e78e:	7803      	ldrb	r3, [r0, #0]
 800e790:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800e794:	42a3      	cmp	r3, r4
 800e796:	d001      	beq.n	800e79c <memcmp+0x1c>
 800e798:	1b18      	subs	r0, r3, r4
 800e79a:	bd10      	pop	{r4, pc}
 800e79c:	3001      	adds	r0, #1
 800e79e:	e7f2      	b.n	800e786 <memcmp+0x6>

0800e7a0 <memset>:
 800e7a0:	4402      	add	r2, r0
 800e7a2:	4603      	mov	r3, r0
 800e7a4:	4293      	cmp	r3, r2
 800e7a6:	d100      	bne.n	800e7aa <memset+0xa>
 800e7a8:	4770      	bx	lr
 800e7aa:	f803 1b01 	strb.w	r1, [r3], #1
 800e7ae:	e7f9      	b.n	800e7a4 <memset+0x4>

0800e7b0 <_close_r>:
 800e7b0:	b538      	push	{r3, r4, r5, lr}
 800e7b2:	4d06      	ldr	r5, [pc, #24]	; (800e7cc <_close_r+0x1c>)
 800e7b4:	2300      	movs	r3, #0
 800e7b6:	4604      	mov	r4, r0
 800e7b8:	4608      	mov	r0, r1
 800e7ba:	602b      	str	r3, [r5, #0]
 800e7bc:	f7f2 f941 	bl	8000a42 <_close>
 800e7c0:	1c43      	adds	r3, r0, #1
 800e7c2:	d102      	bne.n	800e7ca <_close_r+0x1a>
 800e7c4:	682b      	ldr	r3, [r5, #0]
 800e7c6:	b103      	cbz	r3, 800e7ca <_close_r+0x1a>
 800e7c8:	6023      	str	r3, [r4, #0]
 800e7ca:	bd38      	pop	{r3, r4, r5, pc}
 800e7cc:	20008518 	.word	0x20008518

0800e7d0 <_lseek_r>:
 800e7d0:	b538      	push	{r3, r4, r5, lr}
 800e7d2:	4d07      	ldr	r5, [pc, #28]	; (800e7f0 <_lseek_r+0x20>)
 800e7d4:	4604      	mov	r4, r0
 800e7d6:	4608      	mov	r0, r1
 800e7d8:	4611      	mov	r1, r2
 800e7da:	2200      	movs	r2, #0
 800e7dc:	602a      	str	r2, [r5, #0]
 800e7de:	461a      	mov	r2, r3
 800e7e0:	f7f2 f956 	bl	8000a90 <_lseek>
 800e7e4:	1c43      	adds	r3, r0, #1
 800e7e6:	d102      	bne.n	800e7ee <_lseek_r+0x1e>
 800e7e8:	682b      	ldr	r3, [r5, #0]
 800e7ea:	b103      	cbz	r3, 800e7ee <_lseek_r+0x1e>
 800e7ec:	6023      	str	r3, [r4, #0]
 800e7ee:	bd38      	pop	{r3, r4, r5, pc}
 800e7f0:	20008518 	.word	0x20008518

0800e7f4 <_read_r>:
 800e7f4:	b538      	push	{r3, r4, r5, lr}
 800e7f6:	4d07      	ldr	r5, [pc, #28]	; (800e814 <_read_r+0x20>)
 800e7f8:	4604      	mov	r4, r0
 800e7fa:	4608      	mov	r0, r1
 800e7fc:	4611      	mov	r1, r2
 800e7fe:	2200      	movs	r2, #0
 800e800:	602a      	str	r2, [r5, #0]
 800e802:	461a      	mov	r2, r3
 800e804:	f7f2 f900 	bl	8000a08 <_read>
 800e808:	1c43      	adds	r3, r0, #1
 800e80a:	d102      	bne.n	800e812 <_read_r+0x1e>
 800e80c:	682b      	ldr	r3, [r5, #0]
 800e80e:	b103      	cbz	r3, 800e812 <_read_r+0x1e>
 800e810:	6023      	str	r3, [r4, #0]
 800e812:	bd38      	pop	{r3, r4, r5, pc}
 800e814:	20008518 	.word	0x20008518

0800e818 <_write_r>:
 800e818:	b538      	push	{r3, r4, r5, lr}
 800e81a:	4d07      	ldr	r5, [pc, #28]	; (800e838 <_write_r+0x20>)
 800e81c:	4604      	mov	r4, r0
 800e81e:	4608      	mov	r0, r1
 800e820:	4611      	mov	r1, r2
 800e822:	2200      	movs	r2, #0
 800e824:	602a      	str	r2, [r5, #0]
 800e826:	461a      	mov	r2, r3
 800e828:	f7f1 feb0 	bl	800058c <_write>
 800e82c:	1c43      	adds	r3, r0, #1
 800e82e:	d102      	bne.n	800e836 <_write_r+0x1e>
 800e830:	682b      	ldr	r3, [r5, #0]
 800e832:	b103      	cbz	r3, 800e836 <_write_r+0x1e>
 800e834:	6023      	str	r3, [r4, #0]
 800e836:	bd38      	pop	{r3, r4, r5, pc}
 800e838:	20008518 	.word	0x20008518

0800e83c <__libc_init_array>:
 800e83c:	b570      	push	{r4, r5, r6, lr}
 800e83e:	4d0d      	ldr	r5, [pc, #52]	; (800e874 <__libc_init_array+0x38>)
 800e840:	4c0d      	ldr	r4, [pc, #52]	; (800e878 <__libc_init_array+0x3c>)
 800e842:	1b64      	subs	r4, r4, r5
 800e844:	10a4      	asrs	r4, r4, #2
 800e846:	2600      	movs	r6, #0
 800e848:	42a6      	cmp	r6, r4
 800e84a:	d109      	bne.n	800e860 <__libc_init_array+0x24>
 800e84c:	4d0b      	ldr	r5, [pc, #44]	; (800e87c <__libc_init_array+0x40>)
 800e84e:	4c0c      	ldr	r4, [pc, #48]	; (800e880 <__libc_init_array+0x44>)
 800e850:	f000 fdba 	bl	800f3c8 <_init>
 800e854:	1b64      	subs	r4, r4, r5
 800e856:	10a4      	asrs	r4, r4, #2
 800e858:	2600      	movs	r6, #0
 800e85a:	42a6      	cmp	r6, r4
 800e85c:	d105      	bne.n	800e86a <__libc_init_array+0x2e>
 800e85e:	bd70      	pop	{r4, r5, r6, pc}
 800e860:	f855 3b04 	ldr.w	r3, [r5], #4
 800e864:	4798      	blx	r3
 800e866:	3601      	adds	r6, #1
 800e868:	e7ee      	b.n	800e848 <__libc_init_array+0xc>
 800e86a:	f855 3b04 	ldr.w	r3, [r5], #4
 800e86e:	4798      	blx	r3
 800e870:	3601      	adds	r6, #1
 800e872:	e7f2      	b.n	800e85a <__libc_init_array+0x1e>
 800e874:	08011fb4 	.word	0x08011fb4
 800e878:	08011fb4 	.word	0x08011fb4
 800e87c:	08011fb4 	.word	0x08011fb4
 800e880:	08011fb8 	.word	0x08011fb8

0800e884 <__retarget_lock_acquire_recursive>:
 800e884:	4770      	bx	lr

0800e886 <__retarget_lock_release_recursive>:
 800e886:	4770      	bx	lr

0800e888 <memcpy>:
 800e888:	440a      	add	r2, r1
 800e88a:	4291      	cmp	r1, r2
 800e88c:	f100 33ff 	add.w	r3, r0, #4294967295
 800e890:	d100      	bne.n	800e894 <memcpy+0xc>
 800e892:	4770      	bx	lr
 800e894:	b510      	push	{r4, lr}
 800e896:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e89a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800e89e:	4291      	cmp	r1, r2
 800e8a0:	d1f9      	bne.n	800e896 <memcpy+0xe>
 800e8a2:	bd10      	pop	{r4, pc}

0800e8a4 <__assert_func>:
 800e8a4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800e8a6:	4614      	mov	r4, r2
 800e8a8:	461a      	mov	r2, r3
 800e8aa:	4b09      	ldr	r3, [pc, #36]	; (800e8d0 <__assert_func+0x2c>)
 800e8ac:	681b      	ldr	r3, [r3, #0]
 800e8ae:	4605      	mov	r5, r0
 800e8b0:	68d8      	ldr	r0, [r3, #12]
 800e8b2:	b14c      	cbz	r4, 800e8c8 <__assert_func+0x24>
 800e8b4:	4b07      	ldr	r3, [pc, #28]	; (800e8d4 <__assert_func+0x30>)
 800e8b6:	9100      	str	r1, [sp, #0]
 800e8b8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800e8bc:	4906      	ldr	r1, [pc, #24]	; (800e8d8 <__assert_func+0x34>)
 800e8be:	462b      	mov	r3, r5
 800e8c0:	f000 fc90 	bl	800f1e4 <fiprintf>
 800e8c4:	f000 fd34 	bl	800f330 <abort>
 800e8c8:	4b04      	ldr	r3, [pc, #16]	; (800e8dc <__assert_func+0x38>)
 800e8ca:	461c      	mov	r4, r3
 800e8cc:	e7f3      	b.n	800e8b6 <__assert_func+0x12>
 800e8ce:	bf00      	nop
 800e8d0:	20000084 	.word	0x20000084
 800e8d4:	08011f3d 	.word	0x08011f3d
 800e8d8:	08011f4a 	.word	0x08011f4a
 800e8dc:	08011f78 	.word	0x08011f78

0800e8e0 <_free_r>:
 800e8e0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800e8e2:	2900      	cmp	r1, #0
 800e8e4:	d044      	beq.n	800e970 <_free_r+0x90>
 800e8e6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e8ea:	9001      	str	r0, [sp, #4]
 800e8ec:	2b00      	cmp	r3, #0
 800e8ee:	f1a1 0404 	sub.w	r4, r1, #4
 800e8f2:	bfb8      	it	lt
 800e8f4:	18e4      	addlt	r4, r4, r3
 800e8f6:	f000 f8e7 	bl	800eac8 <__malloc_lock>
 800e8fa:	4a1e      	ldr	r2, [pc, #120]	; (800e974 <_free_r+0x94>)
 800e8fc:	9801      	ldr	r0, [sp, #4]
 800e8fe:	6813      	ldr	r3, [r2, #0]
 800e900:	b933      	cbnz	r3, 800e910 <_free_r+0x30>
 800e902:	6063      	str	r3, [r4, #4]
 800e904:	6014      	str	r4, [r2, #0]
 800e906:	b003      	add	sp, #12
 800e908:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800e90c:	f000 b8e2 	b.w	800ead4 <__malloc_unlock>
 800e910:	42a3      	cmp	r3, r4
 800e912:	d908      	bls.n	800e926 <_free_r+0x46>
 800e914:	6825      	ldr	r5, [r4, #0]
 800e916:	1961      	adds	r1, r4, r5
 800e918:	428b      	cmp	r3, r1
 800e91a:	bf01      	itttt	eq
 800e91c:	6819      	ldreq	r1, [r3, #0]
 800e91e:	685b      	ldreq	r3, [r3, #4]
 800e920:	1949      	addeq	r1, r1, r5
 800e922:	6021      	streq	r1, [r4, #0]
 800e924:	e7ed      	b.n	800e902 <_free_r+0x22>
 800e926:	461a      	mov	r2, r3
 800e928:	685b      	ldr	r3, [r3, #4]
 800e92a:	b10b      	cbz	r3, 800e930 <_free_r+0x50>
 800e92c:	42a3      	cmp	r3, r4
 800e92e:	d9fa      	bls.n	800e926 <_free_r+0x46>
 800e930:	6811      	ldr	r1, [r2, #0]
 800e932:	1855      	adds	r5, r2, r1
 800e934:	42a5      	cmp	r5, r4
 800e936:	d10b      	bne.n	800e950 <_free_r+0x70>
 800e938:	6824      	ldr	r4, [r4, #0]
 800e93a:	4421      	add	r1, r4
 800e93c:	1854      	adds	r4, r2, r1
 800e93e:	42a3      	cmp	r3, r4
 800e940:	6011      	str	r1, [r2, #0]
 800e942:	d1e0      	bne.n	800e906 <_free_r+0x26>
 800e944:	681c      	ldr	r4, [r3, #0]
 800e946:	685b      	ldr	r3, [r3, #4]
 800e948:	6053      	str	r3, [r2, #4]
 800e94a:	440c      	add	r4, r1
 800e94c:	6014      	str	r4, [r2, #0]
 800e94e:	e7da      	b.n	800e906 <_free_r+0x26>
 800e950:	d902      	bls.n	800e958 <_free_r+0x78>
 800e952:	230c      	movs	r3, #12
 800e954:	6003      	str	r3, [r0, #0]
 800e956:	e7d6      	b.n	800e906 <_free_r+0x26>
 800e958:	6825      	ldr	r5, [r4, #0]
 800e95a:	1961      	adds	r1, r4, r5
 800e95c:	428b      	cmp	r3, r1
 800e95e:	bf04      	itt	eq
 800e960:	6819      	ldreq	r1, [r3, #0]
 800e962:	685b      	ldreq	r3, [r3, #4]
 800e964:	6063      	str	r3, [r4, #4]
 800e966:	bf04      	itt	eq
 800e968:	1949      	addeq	r1, r1, r5
 800e96a:	6021      	streq	r1, [r4, #0]
 800e96c:	6054      	str	r4, [r2, #4]
 800e96e:	e7ca      	b.n	800e906 <_free_r+0x26>
 800e970:	b003      	add	sp, #12
 800e972:	bd30      	pop	{r4, r5, pc}
 800e974:	20008520 	.word	0x20008520

0800e978 <malloc>:
 800e978:	4b02      	ldr	r3, [pc, #8]	; (800e984 <malloc+0xc>)
 800e97a:	4601      	mov	r1, r0
 800e97c:	6818      	ldr	r0, [r3, #0]
 800e97e:	f000 b823 	b.w	800e9c8 <_malloc_r>
 800e982:	bf00      	nop
 800e984:	20000084 	.word	0x20000084

0800e988 <sbrk_aligned>:
 800e988:	b570      	push	{r4, r5, r6, lr}
 800e98a:	4e0e      	ldr	r6, [pc, #56]	; (800e9c4 <sbrk_aligned+0x3c>)
 800e98c:	460c      	mov	r4, r1
 800e98e:	6831      	ldr	r1, [r6, #0]
 800e990:	4605      	mov	r5, r0
 800e992:	b911      	cbnz	r1, 800e99a <sbrk_aligned+0x12>
 800e994:	f000 fcbc 	bl	800f310 <_sbrk_r>
 800e998:	6030      	str	r0, [r6, #0]
 800e99a:	4621      	mov	r1, r4
 800e99c:	4628      	mov	r0, r5
 800e99e:	f000 fcb7 	bl	800f310 <_sbrk_r>
 800e9a2:	1c43      	adds	r3, r0, #1
 800e9a4:	d00a      	beq.n	800e9bc <sbrk_aligned+0x34>
 800e9a6:	1cc4      	adds	r4, r0, #3
 800e9a8:	f024 0403 	bic.w	r4, r4, #3
 800e9ac:	42a0      	cmp	r0, r4
 800e9ae:	d007      	beq.n	800e9c0 <sbrk_aligned+0x38>
 800e9b0:	1a21      	subs	r1, r4, r0
 800e9b2:	4628      	mov	r0, r5
 800e9b4:	f000 fcac 	bl	800f310 <_sbrk_r>
 800e9b8:	3001      	adds	r0, #1
 800e9ba:	d101      	bne.n	800e9c0 <sbrk_aligned+0x38>
 800e9bc:	f04f 34ff 	mov.w	r4, #4294967295
 800e9c0:	4620      	mov	r0, r4
 800e9c2:	bd70      	pop	{r4, r5, r6, pc}
 800e9c4:	20008524 	.word	0x20008524

0800e9c8 <_malloc_r>:
 800e9c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e9cc:	1ccd      	adds	r5, r1, #3
 800e9ce:	f025 0503 	bic.w	r5, r5, #3
 800e9d2:	3508      	adds	r5, #8
 800e9d4:	2d0c      	cmp	r5, #12
 800e9d6:	bf38      	it	cc
 800e9d8:	250c      	movcc	r5, #12
 800e9da:	2d00      	cmp	r5, #0
 800e9dc:	4607      	mov	r7, r0
 800e9de:	db01      	blt.n	800e9e4 <_malloc_r+0x1c>
 800e9e0:	42a9      	cmp	r1, r5
 800e9e2:	d905      	bls.n	800e9f0 <_malloc_r+0x28>
 800e9e4:	230c      	movs	r3, #12
 800e9e6:	603b      	str	r3, [r7, #0]
 800e9e8:	2600      	movs	r6, #0
 800e9ea:	4630      	mov	r0, r6
 800e9ec:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e9f0:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800eac4 <_malloc_r+0xfc>
 800e9f4:	f000 f868 	bl	800eac8 <__malloc_lock>
 800e9f8:	f8d8 3000 	ldr.w	r3, [r8]
 800e9fc:	461c      	mov	r4, r3
 800e9fe:	bb5c      	cbnz	r4, 800ea58 <_malloc_r+0x90>
 800ea00:	4629      	mov	r1, r5
 800ea02:	4638      	mov	r0, r7
 800ea04:	f7ff ffc0 	bl	800e988 <sbrk_aligned>
 800ea08:	1c43      	adds	r3, r0, #1
 800ea0a:	4604      	mov	r4, r0
 800ea0c:	d155      	bne.n	800eaba <_malloc_r+0xf2>
 800ea0e:	f8d8 4000 	ldr.w	r4, [r8]
 800ea12:	4626      	mov	r6, r4
 800ea14:	2e00      	cmp	r6, #0
 800ea16:	d145      	bne.n	800eaa4 <_malloc_r+0xdc>
 800ea18:	2c00      	cmp	r4, #0
 800ea1a:	d048      	beq.n	800eaae <_malloc_r+0xe6>
 800ea1c:	6823      	ldr	r3, [r4, #0]
 800ea1e:	4631      	mov	r1, r6
 800ea20:	4638      	mov	r0, r7
 800ea22:	eb04 0903 	add.w	r9, r4, r3
 800ea26:	f000 fc73 	bl	800f310 <_sbrk_r>
 800ea2a:	4581      	cmp	r9, r0
 800ea2c:	d13f      	bne.n	800eaae <_malloc_r+0xe6>
 800ea2e:	6821      	ldr	r1, [r4, #0]
 800ea30:	1a6d      	subs	r5, r5, r1
 800ea32:	4629      	mov	r1, r5
 800ea34:	4638      	mov	r0, r7
 800ea36:	f7ff ffa7 	bl	800e988 <sbrk_aligned>
 800ea3a:	3001      	adds	r0, #1
 800ea3c:	d037      	beq.n	800eaae <_malloc_r+0xe6>
 800ea3e:	6823      	ldr	r3, [r4, #0]
 800ea40:	442b      	add	r3, r5
 800ea42:	6023      	str	r3, [r4, #0]
 800ea44:	f8d8 3000 	ldr.w	r3, [r8]
 800ea48:	2b00      	cmp	r3, #0
 800ea4a:	d038      	beq.n	800eabe <_malloc_r+0xf6>
 800ea4c:	685a      	ldr	r2, [r3, #4]
 800ea4e:	42a2      	cmp	r2, r4
 800ea50:	d12b      	bne.n	800eaaa <_malloc_r+0xe2>
 800ea52:	2200      	movs	r2, #0
 800ea54:	605a      	str	r2, [r3, #4]
 800ea56:	e00f      	b.n	800ea78 <_malloc_r+0xb0>
 800ea58:	6822      	ldr	r2, [r4, #0]
 800ea5a:	1b52      	subs	r2, r2, r5
 800ea5c:	d41f      	bmi.n	800ea9e <_malloc_r+0xd6>
 800ea5e:	2a0b      	cmp	r2, #11
 800ea60:	d917      	bls.n	800ea92 <_malloc_r+0xca>
 800ea62:	1961      	adds	r1, r4, r5
 800ea64:	42a3      	cmp	r3, r4
 800ea66:	6025      	str	r5, [r4, #0]
 800ea68:	bf18      	it	ne
 800ea6a:	6059      	strne	r1, [r3, #4]
 800ea6c:	6863      	ldr	r3, [r4, #4]
 800ea6e:	bf08      	it	eq
 800ea70:	f8c8 1000 	streq.w	r1, [r8]
 800ea74:	5162      	str	r2, [r4, r5]
 800ea76:	604b      	str	r3, [r1, #4]
 800ea78:	4638      	mov	r0, r7
 800ea7a:	f104 060b 	add.w	r6, r4, #11
 800ea7e:	f000 f829 	bl	800ead4 <__malloc_unlock>
 800ea82:	f026 0607 	bic.w	r6, r6, #7
 800ea86:	1d23      	adds	r3, r4, #4
 800ea88:	1af2      	subs	r2, r6, r3
 800ea8a:	d0ae      	beq.n	800e9ea <_malloc_r+0x22>
 800ea8c:	1b9b      	subs	r3, r3, r6
 800ea8e:	50a3      	str	r3, [r4, r2]
 800ea90:	e7ab      	b.n	800e9ea <_malloc_r+0x22>
 800ea92:	42a3      	cmp	r3, r4
 800ea94:	6862      	ldr	r2, [r4, #4]
 800ea96:	d1dd      	bne.n	800ea54 <_malloc_r+0x8c>
 800ea98:	f8c8 2000 	str.w	r2, [r8]
 800ea9c:	e7ec      	b.n	800ea78 <_malloc_r+0xb0>
 800ea9e:	4623      	mov	r3, r4
 800eaa0:	6864      	ldr	r4, [r4, #4]
 800eaa2:	e7ac      	b.n	800e9fe <_malloc_r+0x36>
 800eaa4:	4634      	mov	r4, r6
 800eaa6:	6876      	ldr	r6, [r6, #4]
 800eaa8:	e7b4      	b.n	800ea14 <_malloc_r+0x4c>
 800eaaa:	4613      	mov	r3, r2
 800eaac:	e7cc      	b.n	800ea48 <_malloc_r+0x80>
 800eaae:	230c      	movs	r3, #12
 800eab0:	603b      	str	r3, [r7, #0]
 800eab2:	4638      	mov	r0, r7
 800eab4:	f000 f80e 	bl	800ead4 <__malloc_unlock>
 800eab8:	e797      	b.n	800e9ea <_malloc_r+0x22>
 800eaba:	6025      	str	r5, [r4, #0]
 800eabc:	e7dc      	b.n	800ea78 <_malloc_r+0xb0>
 800eabe:	605b      	str	r3, [r3, #4]
 800eac0:	deff      	udf	#255	; 0xff
 800eac2:	bf00      	nop
 800eac4:	20008520 	.word	0x20008520

0800eac8 <__malloc_lock>:
 800eac8:	4801      	ldr	r0, [pc, #4]	; (800ead0 <__malloc_lock+0x8>)
 800eaca:	f7ff bedb 	b.w	800e884 <__retarget_lock_acquire_recursive>
 800eace:	bf00      	nop
 800ead0:	2000851c 	.word	0x2000851c

0800ead4 <__malloc_unlock>:
 800ead4:	4801      	ldr	r0, [pc, #4]	; (800eadc <__malloc_unlock+0x8>)
 800ead6:	f7ff bed6 	b.w	800e886 <__retarget_lock_release_recursive>
 800eada:	bf00      	nop
 800eadc:	2000851c 	.word	0x2000851c

0800eae0 <__sfputc_r>:
 800eae0:	6893      	ldr	r3, [r2, #8]
 800eae2:	3b01      	subs	r3, #1
 800eae4:	2b00      	cmp	r3, #0
 800eae6:	b410      	push	{r4}
 800eae8:	6093      	str	r3, [r2, #8]
 800eaea:	da08      	bge.n	800eafe <__sfputc_r+0x1e>
 800eaec:	6994      	ldr	r4, [r2, #24]
 800eaee:	42a3      	cmp	r3, r4
 800eaf0:	db01      	blt.n	800eaf6 <__sfputc_r+0x16>
 800eaf2:	290a      	cmp	r1, #10
 800eaf4:	d103      	bne.n	800eafe <__sfputc_r+0x1e>
 800eaf6:	f85d 4b04 	ldr.w	r4, [sp], #4
 800eafa:	f7ff bdac 	b.w	800e656 <__swbuf_r>
 800eafe:	6813      	ldr	r3, [r2, #0]
 800eb00:	1c58      	adds	r0, r3, #1
 800eb02:	6010      	str	r0, [r2, #0]
 800eb04:	7019      	strb	r1, [r3, #0]
 800eb06:	4608      	mov	r0, r1
 800eb08:	f85d 4b04 	ldr.w	r4, [sp], #4
 800eb0c:	4770      	bx	lr

0800eb0e <__sfputs_r>:
 800eb0e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800eb10:	4606      	mov	r6, r0
 800eb12:	460f      	mov	r7, r1
 800eb14:	4614      	mov	r4, r2
 800eb16:	18d5      	adds	r5, r2, r3
 800eb18:	42ac      	cmp	r4, r5
 800eb1a:	d101      	bne.n	800eb20 <__sfputs_r+0x12>
 800eb1c:	2000      	movs	r0, #0
 800eb1e:	e007      	b.n	800eb30 <__sfputs_r+0x22>
 800eb20:	f814 1b01 	ldrb.w	r1, [r4], #1
 800eb24:	463a      	mov	r2, r7
 800eb26:	4630      	mov	r0, r6
 800eb28:	f7ff ffda 	bl	800eae0 <__sfputc_r>
 800eb2c:	1c43      	adds	r3, r0, #1
 800eb2e:	d1f3      	bne.n	800eb18 <__sfputs_r+0xa>
 800eb30:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800eb34 <_vfiprintf_r>:
 800eb34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800eb38:	460d      	mov	r5, r1
 800eb3a:	b09d      	sub	sp, #116	; 0x74
 800eb3c:	4614      	mov	r4, r2
 800eb3e:	4698      	mov	r8, r3
 800eb40:	4606      	mov	r6, r0
 800eb42:	b118      	cbz	r0, 800eb4c <_vfiprintf_r+0x18>
 800eb44:	6a03      	ldr	r3, [r0, #32]
 800eb46:	b90b      	cbnz	r3, 800eb4c <_vfiprintf_r+0x18>
 800eb48:	f7ff fc9e 	bl	800e488 <__sinit>
 800eb4c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800eb4e:	07d9      	lsls	r1, r3, #31
 800eb50:	d405      	bmi.n	800eb5e <_vfiprintf_r+0x2a>
 800eb52:	89ab      	ldrh	r3, [r5, #12]
 800eb54:	059a      	lsls	r2, r3, #22
 800eb56:	d402      	bmi.n	800eb5e <_vfiprintf_r+0x2a>
 800eb58:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800eb5a:	f7ff fe93 	bl	800e884 <__retarget_lock_acquire_recursive>
 800eb5e:	89ab      	ldrh	r3, [r5, #12]
 800eb60:	071b      	lsls	r3, r3, #28
 800eb62:	d501      	bpl.n	800eb68 <_vfiprintf_r+0x34>
 800eb64:	692b      	ldr	r3, [r5, #16]
 800eb66:	b99b      	cbnz	r3, 800eb90 <_vfiprintf_r+0x5c>
 800eb68:	4629      	mov	r1, r5
 800eb6a:	4630      	mov	r0, r6
 800eb6c:	f7ff fdb0 	bl	800e6d0 <__swsetup_r>
 800eb70:	b170      	cbz	r0, 800eb90 <_vfiprintf_r+0x5c>
 800eb72:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800eb74:	07dc      	lsls	r4, r3, #31
 800eb76:	d504      	bpl.n	800eb82 <_vfiprintf_r+0x4e>
 800eb78:	f04f 30ff 	mov.w	r0, #4294967295
 800eb7c:	b01d      	add	sp, #116	; 0x74
 800eb7e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800eb82:	89ab      	ldrh	r3, [r5, #12]
 800eb84:	0598      	lsls	r0, r3, #22
 800eb86:	d4f7      	bmi.n	800eb78 <_vfiprintf_r+0x44>
 800eb88:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800eb8a:	f7ff fe7c 	bl	800e886 <__retarget_lock_release_recursive>
 800eb8e:	e7f3      	b.n	800eb78 <_vfiprintf_r+0x44>
 800eb90:	2300      	movs	r3, #0
 800eb92:	9309      	str	r3, [sp, #36]	; 0x24
 800eb94:	2320      	movs	r3, #32
 800eb96:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800eb9a:	f8cd 800c 	str.w	r8, [sp, #12]
 800eb9e:	2330      	movs	r3, #48	; 0x30
 800eba0:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800ed54 <_vfiprintf_r+0x220>
 800eba4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800eba8:	f04f 0901 	mov.w	r9, #1
 800ebac:	4623      	mov	r3, r4
 800ebae:	469a      	mov	sl, r3
 800ebb0:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ebb4:	b10a      	cbz	r2, 800ebba <_vfiprintf_r+0x86>
 800ebb6:	2a25      	cmp	r2, #37	; 0x25
 800ebb8:	d1f9      	bne.n	800ebae <_vfiprintf_r+0x7a>
 800ebba:	ebba 0b04 	subs.w	fp, sl, r4
 800ebbe:	d00b      	beq.n	800ebd8 <_vfiprintf_r+0xa4>
 800ebc0:	465b      	mov	r3, fp
 800ebc2:	4622      	mov	r2, r4
 800ebc4:	4629      	mov	r1, r5
 800ebc6:	4630      	mov	r0, r6
 800ebc8:	f7ff ffa1 	bl	800eb0e <__sfputs_r>
 800ebcc:	3001      	adds	r0, #1
 800ebce:	f000 80a9 	beq.w	800ed24 <_vfiprintf_r+0x1f0>
 800ebd2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ebd4:	445a      	add	r2, fp
 800ebd6:	9209      	str	r2, [sp, #36]	; 0x24
 800ebd8:	f89a 3000 	ldrb.w	r3, [sl]
 800ebdc:	2b00      	cmp	r3, #0
 800ebde:	f000 80a1 	beq.w	800ed24 <_vfiprintf_r+0x1f0>
 800ebe2:	2300      	movs	r3, #0
 800ebe4:	f04f 32ff 	mov.w	r2, #4294967295
 800ebe8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ebec:	f10a 0a01 	add.w	sl, sl, #1
 800ebf0:	9304      	str	r3, [sp, #16]
 800ebf2:	9307      	str	r3, [sp, #28]
 800ebf4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800ebf8:	931a      	str	r3, [sp, #104]	; 0x68
 800ebfa:	4654      	mov	r4, sl
 800ebfc:	2205      	movs	r2, #5
 800ebfe:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ec02:	4854      	ldr	r0, [pc, #336]	; (800ed54 <_vfiprintf_r+0x220>)
 800ec04:	f7f1 faf4 	bl	80001f0 <memchr>
 800ec08:	9a04      	ldr	r2, [sp, #16]
 800ec0a:	b9d8      	cbnz	r0, 800ec44 <_vfiprintf_r+0x110>
 800ec0c:	06d1      	lsls	r1, r2, #27
 800ec0e:	bf44      	itt	mi
 800ec10:	2320      	movmi	r3, #32
 800ec12:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ec16:	0713      	lsls	r3, r2, #28
 800ec18:	bf44      	itt	mi
 800ec1a:	232b      	movmi	r3, #43	; 0x2b
 800ec1c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ec20:	f89a 3000 	ldrb.w	r3, [sl]
 800ec24:	2b2a      	cmp	r3, #42	; 0x2a
 800ec26:	d015      	beq.n	800ec54 <_vfiprintf_r+0x120>
 800ec28:	9a07      	ldr	r2, [sp, #28]
 800ec2a:	4654      	mov	r4, sl
 800ec2c:	2000      	movs	r0, #0
 800ec2e:	f04f 0c0a 	mov.w	ip, #10
 800ec32:	4621      	mov	r1, r4
 800ec34:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ec38:	3b30      	subs	r3, #48	; 0x30
 800ec3a:	2b09      	cmp	r3, #9
 800ec3c:	d94d      	bls.n	800ecda <_vfiprintf_r+0x1a6>
 800ec3e:	b1b0      	cbz	r0, 800ec6e <_vfiprintf_r+0x13a>
 800ec40:	9207      	str	r2, [sp, #28]
 800ec42:	e014      	b.n	800ec6e <_vfiprintf_r+0x13a>
 800ec44:	eba0 0308 	sub.w	r3, r0, r8
 800ec48:	fa09 f303 	lsl.w	r3, r9, r3
 800ec4c:	4313      	orrs	r3, r2
 800ec4e:	9304      	str	r3, [sp, #16]
 800ec50:	46a2      	mov	sl, r4
 800ec52:	e7d2      	b.n	800ebfa <_vfiprintf_r+0xc6>
 800ec54:	9b03      	ldr	r3, [sp, #12]
 800ec56:	1d19      	adds	r1, r3, #4
 800ec58:	681b      	ldr	r3, [r3, #0]
 800ec5a:	9103      	str	r1, [sp, #12]
 800ec5c:	2b00      	cmp	r3, #0
 800ec5e:	bfbb      	ittet	lt
 800ec60:	425b      	neglt	r3, r3
 800ec62:	f042 0202 	orrlt.w	r2, r2, #2
 800ec66:	9307      	strge	r3, [sp, #28]
 800ec68:	9307      	strlt	r3, [sp, #28]
 800ec6a:	bfb8      	it	lt
 800ec6c:	9204      	strlt	r2, [sp, #16]
 800ec6e:	7823      	ldrb	r3, [r4, #0]
 800ec70:	2b2e      	cmp	r3, #46	; 0x2e
 800ec72:	d10c      	bne.n	800ec8e <_vfiprintf_r+0x15a>
 800ec74:	7863      	ldrb	r3, [r4, #1]
 800ec76:	2b2a      	cmp	r3, #42	; 0x2a
 800ec78:	d134      	bne.n	800ece4 <_vfiprintf_r+0x1b0>
 800ec7a:	9b03      	ldr	r3, [sp, #12]
 800ec7c:	1d1a      	adds	r2, r3, #4
 800ec7e:	681b      	ldr	r3, [r3, #0]
 800ec80:	9203      	str	r2, [sp, #12]
 800ec82:	2b00      	cmp	r3, #0
 800ec84:	bfb8      	it	lt
 800ec86:	f04f 33ff 	movlt.w	r3, #4294967295
 800ec8a:	3402      	adds	r4, #2
 800ec8c:	9305      	str	r3, [sp, #20]
 800ec8e:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800ed64 <_vfiprintf_r+0x230>
 800ec92:	7821      	ldrb	r1, [r4, #0]
 800ec94:	2203      	movs	r2, #3
 800ec96:	4650      	mov	r0, sl
 800ec98:	f7f1 faaa 	bl	80001f0 <memchr>
 800ec9c:	b138      	cbz	r0, 800ecae <_vfiprintf_r+0x17a>
 800ec9e:	9b04      	ldr	r3, [sp, #16]
 800eca0:	eba0 000a 	sub.w	r0, r0, sl
 800eca4:	2240      	movs	r2, #64	; 0x40
 800eca6:	4082      	lsls	r2, r0
 800eca8:	4313      	orrs	r3, r2
 800ecaa:	3401      	adds	r4, #1
 800ecac:	9304      	str	r3, [sp, #16]
 800ecae:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ecb2:	4829      	ldr	r0, [pc, #164]	; (800ed58 <_vfiprintf_r+0x224>)
 800ecb4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800ecb8:	2206      	movs	r2, #6
 800ecba:	f7f1 fa99 	bl	80001f0 <memchr>
 800ecbe:	2800      	cmp	r0, #0
 800ecc0:	d03f      	beq.n	800ed42 <_vfiprintf_r+0x20e>
 800ecc2:	4b26      	ldr	r3, [pc, #152]	; (800ed5c <_vfiprintf_r+0x228>)
 800ecc4:	bb1b      	cbnz	r3, 800ed0e <_vfiprintf_r+0x1da>
 800ecc6:	9b03      	ldr	r3, [sp, #12]
 800ecc8:	3307      	adds	r3, #7
 800ecca:	f023 0307 	bic.w	r3, r3, #7
 800ecce:	3308      	adds	r3, #8
 800ecd0:	9303      	str	r3, [sp, #12]
 800ecd2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ecd4:	443b      	add	r3, r7
 800ecd6:	9309      	str	r3, [sp, #36]	; 0x24
 800ecd8:	e768      	b.n	800ebac <_vfiprintf_r+0x78>
 800ecda:	fb0c 3202 	mla	r2, ip, r2, r3
 800ecde:	460c      	mov	r4, r1
 800ece0:	2001      	movs	r0, #1
 800ece2:	e7a6      	b.n	800ec32 <_vfiprintf_r+0xfe>
 800ece4:	2300      	movs	r3, #0
 800ece6:	3401      	adds	r4, #1
 800ece8:	9305      	str	r3, [sp, #20]
 800ecea:	4619      	mov	r1, r3
 800ecec:	f04f 0c0a 	mov.w	ip, #10
 800ecf0:	4620      	mov	r0, r4
 800ecf2:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ecf6:	3a30      	subs	r2, #48	; 0x30
 800ecf8:	2a09      	cmp	r2, #9
 800ecfa:	d903      	bls.n	800ed04 <_vfiprintf_r+0x1d0>
 800ecfc:	2b00      	cmp	r3, #0
 800ecfe:	d0c6      	beq.n	800ec8e <_vfiprintf_r+0x15a>
 800ed00:	9105      	str	r1, [sp, #20]
 800ed02:	e7c4      	b.n	800ec8e <_vfiprintf_r+0x15a>
 800ed04:	fb0c 2101 	mla	r1, ip, r1, r2
 800ed08:	4604      	mov	r4, r0
 800ed0a:	2301      	movs	r3, #1
 800ed0c:	e7f0      	b.n	800ecf0 <_vfiprintf_r+0x1bc>
 800ed0e:	ab03      	add	r3, sp, #12
 800ed10:	9300      	str	r3, [sp, #0]
 800ed12:	462a      	mov	r2, r5
 800ed14:	4b12      	ldr	r3, [pc, #72]	; (800ed60 <_vfiprintf_r+0x22c>)
 800ed16:	a904      	add	r1, sp, #16
 800ed18:	4630      	mov	r0, r6
 800ed1a:	f3af 8000 	nop.w
 800ed1e:	4607      	mov	r7, r0
 800ed20:	1c78      	adds	r0, r7, #1
 800ed22:	d1d6      	bne.n	800ecd2 <_vfiprintf_r+0x19e>
 800ed24:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ed26:	07d9      	lsls	r1, r3, #31
 800ed28:	d405      	bmi.n	800ed36 <_vfiprintf_r+0x202>
 800ed2a:	89ab      	ldrh	r3, [r5, #12]
 800ed2c:	059a      	lsls	r2, r3, #22
 800ed2e:	d402      	bmi.n	800ed36 <_vfiprintf_r+0x202>
 800ed30:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ed32:	f7ff fda8 	bl	800e886 <__retarget_lock_release_recursive>
 800ed36:	89ab      	ldrh	r3, [r5, #12]
 800ed38:	065b      	lsls	r3, r3, #25
 800ed3a:	f53f af1d 	bmi.w	800eb78 <_vfiprintf_r+0x44>
 800ed3e:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ed40:	e71c      	b.n	800eb7c <_vfiprintf_r+0x48>
 800ed42:	ab03      	add	r3, sp, #12
 800ed44:	9300      	str	r3, [sp, #0]
 800ed46:	462a      	mov	r2, r5
 800ed48:	4b05      	ldr	r3, [pc, #20]	; (800ed60 <_vfiprintf_r+0x22c>)
 800ed4a:	a904      	add	r1, sp, #16
 800ed4c:	4630      	mov	r0, r6
 800ed4e:	f000 f879 	bl	800ee44 <_printf_i>
 800ed52:	e7e4      	b.n	800ed1e <_vfiprintf_r+0x1ea>
 800ed54:	08011f79 	.word	0x08011f79
 800ed58:	08011f83 	.word	0x08011f83
 800ed5c:	00000000 	.word	0x00000000
 800ed60:	0800eb0f 	.word	0x0800eb0f
 800ed64:	08011f7f 	.word	0x08011f7f

0800ed68 <_printf_common>:
 800ed68:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ed6c:	4616      	mov	r6, r2
 800ed6e:	4699      	mov	r9, r3
 800ed70:	688a      	ldr	r2, [r1, #8]
 800ed72:	690b      	ldr	r3, [r1, #16]
 800ed74:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800ed78:	4293      	cmp	r3, r2
 800ed7a:	bfb8      	it	lt
 800ed7c:	4613      	movlt	r3, r2
 800ed7e:	6033      	str	r3, [r6, #0]
 800ed80:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800ed84:	4607      	mov	r7, r0
 800ed86:	460c      	mov	r4, r1
 800ed88:	b10a      	cbz	r2, 800ed8e <_printf_common+0x26>
 800ed8a:	3301      	adds	r3, #1
 800ed8c:	6033      	str	r3, [r6, #0]
 800ed8e:	6823      	ldr	r3, [r4, #0]
 800ed90:	0699      	lsls	r1, r3, #26
 800ed92:	bf42      	ittt	mi
 800ed94:	6833      	ldrmi	r3, [r6, #0]
 800ed96:	3302      	addmi	r3, #2
 800ed98:	6033      	strmi	r3, [r6, #0]
 800ed9a:	6825      	ldr	r5, [r4, #0]
 800ed9c:	f015 0506 	ands.w	r5, r5, #6
 800eda0:	d106      	bne.n	800edb0 <_printf_common+0x48>
 800eda2:	f104 0a19 	add.w	sl, r4, #25
 800eda6:	68e3      	ldr	r3, [r4, #12]
 800eda8:	6832      	ldr	r2, [r6, #0]
 800edaa:	1a9b      	subs	r3, r3, r2
 800edac:	42ab      	cmp	r3, r5
 800edae:	dc26      	bgt.n	800edfe <_printf_common+0x96>
 800edb0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800edb4:	1e13      	subs	r3, r2, #0
 800edb6:	6822      	ldr	r2, [r4, #0]
 800edb8:	bf18      	it	ne
 800edba:	2301      	movne	r3, #1
 800edbc:	0692      	lsls	r2, r2, #26
 800edbe:	d42b      	bmi.n	800ee18 <_printf_common+0xb0>
 800edc0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800edc4:	4649      	mov	r1, r9
 800edc6:	4638      	mov	r0, r7
 800edc8:	47c0      	blx	r8
 800edca:	3001      	adds	r0, #1
 800edcc:	d01e      	beq.n	800ee0c <_printf_common+0xa4>
 800edce:	6823      	ldr	r3, [r4, #0]
 800edd0:	6922      	ldr	r2, [r4, #16]
 800edd2:	f003 0306 	and.w	r3, r3, #6
 800edd6:	2b04      	cmp	r3, #4
 800edd8:	bf02      	ittt	eq
 800edda:	68e5      	ldreq	r5, [r4, #12]
 800eddc:	6833      	ldreq	r3, [r6, #0]
 800edde:	1aed      	subeq	r5, r5, r3
 800ede0:	68a3      	ldr	r3, [r4, #8]
 800ede2:	bf0c      	ite	eq
 800ede4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800ede8:	2500      	movne	r5, #0
 800edea:	4293      	cmp	r3, r2
 800edec:	bfc4      	itt	gt
 800edee:	1a9b      	subgt	r3, r3, r2
 800edf0:	18ed      	addgt	r5, r5, r3
 800edf2:	2600      	movs	r6, #0
 800edf4:	341a      	adds	r4, #26
 800edf6:	42b5      	cmp	r5, r6
 800edf8:	d11a      	bne.n	800ee30 <_printf_common+0xc8>
 800edfa:	2000      	movs	r0, #0
 800edfc:	e008      	b.n	800ee10 <_printf_common+0xa8>
 800edfe:	2301      	movs	r3, #1
 800ee00:	4652      	mov	r2, sl
 800ee02:	4649      	mov	r1, r9
 800ee04:	4638      	mov	r0, r7
 800ee06:	47c0      	blx	r8
 800ee08:	3001      	adds	r0, #1
 800ee0a:	d103      	bne.n	800ee14 <_printf_common+0xac>
 800ee0c:	f04f 30ff 	mov.w	r0, #4294967295
 800ee10:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ee14:	3501      	adds	r5, #1
 800ee16:	e7c6      	b.n	800eda6 <_printf_common+0x3e>
 800ee18:	18e1      	adds	r1, r4, r3
 800ee1a:	1c5a      	adds	r2, r3, #1
 800ee1c:	2030      	movs	r0, #48	; 0x30
 800ee1e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800ee22:	4422      	add	r2, r4
 800ee24:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800ee28:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800ee2c:	3302      	adds	r3, #2
 800ee2e:	e7c7      	b.n	800edc0 <_printf_common+0x58>
 800ee30:	2301      	movs	r3, #1
 800ee32:	4622      	mov	r2, r4
 800ee34:	4649      	mov	r1, r9
 800ee36:	4638      	mov	r0, r7
 800ee38:	47c0      	blx	r8
 800ee3a:	3001      	adds	r0, #1
 800ee3c:	d0e6      	beq.n	800ee0c <_printf_common+0xa4>
 800ee3e:	3601      	adds	r6, #1
 800ee40:	e7d9      	b.n	800edf6 <_printf_common+0x8e>
	...

0800ee44 <_printf_i>:
 800ee44:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800ee48:	7e0f      	ldrb	r7, [r1, #24]
 800ee4a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800ee4c:	2f78      	cmp	r7, #120	; 0x78
 800ee4e:	4691      	mov	r9, r2
 800ee50:	4680      	mov	r8, r0
 800ee52:	460c      	mov	r4, r1
 800ee54:	469a      	mov	sl, r3
 800ee56:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800ee5a:	d807      	bhi.n	800ee6c <_printf_i+0x28>
 800ee5c:	2f62      	cmp	r7, #98	; 0x62
 800ee5e:	d80a      	bhi.n	800ee76 <_printf_i+0x32>
 800ee60:	2f00      	cmp	r7, #0
 800ee62:	f000 80d4 	beq.w	800f00e <_printf_i+0x1ca>
 800ee66:	2f58      	cmp	r7, #88	; 0x58
 800ee68:	f000 80c0 	beq.w	800efec <_printf_i+0x1a8>
 800ee6c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800ee70:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800ee74:	e03a      	b.n	800eeec <_printf_i+0xa8>
 800ee76:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800ee7a:	2b15      	cmp	r3, #21
 800ee7c:	d8f6      	bhi.n	800ee6c <_printf_i+0x28>
 800ee7e:	a101      	add	r1, pc, #4	; (adr r1, 800ee84 <_printf_i+0x40>)
 800ee80:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800ee84:	0800eedd 	.word	0x0800eedd
 800ee88:	0800eef1 	.word	0x0800eef1
 800ee8c:	0800ee6d 	.word	0x0800ee6d
 800ee90:	0800ee6d 	.word	0x0800ee6d
 800ee94:	0800ee6d 	.word	0x0800ee6d
 800ee98:	0800ee6d 	.word	0x0800ee6d
 800ee9c:	0800eef1 	.word	0x0800eef1
 800eea0:	0800ee6d 	.word	0x0800ee6d
 800eea4:	0800ee6d 	.word	0x0800ee6d
 800eea8:	0800ee6d 	.word	0x0800ee6d
 800eeac:	0800ee6d 	.word	0x0800ee6d
 800eeb0:	0800eff5 	.word	0x0800eff5
 800eeb4:	0800ef1d 	.word	0x0800ef1d
 800eeb8:	0800efaf 	.word	0x0800efaf
 800eebc:	0800ee6d 	.word	0x0800ee6d
 800eec0:	0800ee6d 	.word	0x0800ee6d
 800eec4:	0800f017 	.word	0x0800f017
 800eec8:	0800ee6d 	.word	0x0800ee6d
 800eecc:	0800ef1d 	.word	0x0800ef1d
 800eed0:	0800ee6d 	.word	0x0800ee6d
 800eed4:	0800ee6d 	.word	0x0800ee6d
 800eed8:	0800efb7 	.word	0x0800efb7
 800eedc:	682b      	ldr	r3, [r5, #0]
 800eede:	1d1a      	adds	r2, r3, #4
 800eee0:	681b      	ldr	r3, [r3, #0]
 800eee2:	602a      	str	r2, [r5, #0]
 800eee4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800eee8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800eeec:	2301      	movs	r3, #1
 800eeee:	e09f      	b.n	800f030 <_printf_i+0x1ec>
 800eef0:	6820      	ldr	r0, [r4, #0]
 800eef2:	682b      	ldr	r3, [r5, #0]
 800eef4:	0607      	lsls	r7, r0, #24
 800eef6:	f103 0104 	add.w	r1, r3, #4
 800eefa:	6029      	str	r1, [r5, #0]
 800eefc:	d501      	bpl.n	800ef02 <_printf_i+0xbe>
 800eefe:	681e      	ldr	r6, [r3, #0]
 800ef00:	e003      	b.n	800ef0a <_printf_i+0xc6>
 800ef02:	0646      	lsls	r6, r0, #25
 800ef04:	d5fb      	bpl.n	800eefe <_printf_i+0xba>
 800ef06:	f9b3 6000 	ldrsh.w	r6, [r3]
 800ef0a:	2e00      	cmp	r6, #0
 800ef0c:	da03      	bge.n	800ef16 <_printf_i+0xd2>
 800ef0e:	232d      	movs	r3, #45	; 0x2d
 800ef10:	4276      	negs	r6, r6
 800ef12:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ef16:	485a      	ldr	r0, [pc, #360]	; (800f080 <_printf_i+0x23c>)
 800ef18:	230a      	movs	r3, #10
 800ef1a:	e012      	b.n	800ef42 <_printf_i+0xfe>
 800ef1c:	682b      	ldr	r3, [r5, #0]
 800ef1e:	6820      	ldr	r0, [r4, #0]
 800ef20:	1d19      	adds	r1, r3, #4
 800ef22:	6029      	str	r1, [r5, #0]
 800ef24:	0605      	lsls	r5, r0, #24
 800ef26:	d501      	bpl.n	800ef2c <_printf_i+0xe8>
 800ef28:	681e      	ldr	r6, [r3, #0]
 800ef2a:	e002      	b.n	800ef32 <_printf_i+0xee>
 800ef2c:	0641      	lsls	r1, r0, #25
 800ef2e:	d5fb      	bpl.n	800ef28 <_printf_i+0xe4>
 800ef30:	881e      	ldrh	r6, [r3, #0]
 800ef32:	4853      	ldr	r0, [pc, #332]	; (800f080 <_printf_i+0x23c>)
 800ef34:	2f6f      	cmp	r7, #111	; 0x6f
 800ef36:	bf0c      	ite	eq
 800ef38:	2308      	moveq	r3, #8
 800ef3a:	230a      	movne	r3, #10
 800ef3c:	2100      	movs	r1, #0
 800ef3e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800ef42:	6865      	ldr	r5, [r4, #4]
 800ef44:	60a5      	str	r5, [r4, #8]
 800ef46:	2d00      	cmp	r5, #0
 800ef48:	bfa2      	ittt	ge
 800ef4a:	6821      	ldrge	r1, [r4, #0]
 800ef4c:	f021 0104 	bicge.w	r1, r1, #4
 800ef50:	6021      	strge	r1, [r4, #0]
 800ef52:	b90e      	cbnz	r6, 800ef58 <_printf_i+0x114>
 800ef54:	2d00      	cmp	r5, #0
 800ef56:	d04b      	beq.n	800eff0 <_printf_i+0x1ac>
 800ef58:	4615      	mov	r5, r2
 800ef5a:	fbb6 f1f3 	udiv	r1, r6, r3
 800ef5e:	fb03 6711 	mls	r7, r3, r1, r6
 800ef62:	5dc7      	ldrb	r7, [r0, r7]
 800ef64:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800ef68:	4637      	mov	r7, r6
 800ef6a:	42bb      	cmp	r3, r7
 800ef6c:	460e      	mov	r6, r1
 800ef6e:	d9f4      	bls.n	800ef5a <_printf_i+0x116>
 800ef70:	2b08      	cmp	r3, #8
 800ef72:	d10b      	bne.n	800ef8c <_printf_i+0x148>
 800ef74:	6823      	ldr	r3, [r4, #0]
 800ef76:	07de      	lsls	r6, r3, #31
 800ef78:	d508      	bpl.n	800ef8c <_printf_i+0x148>
 800ef7a:	6923      	ldr	r3, [r4, #16]
 800ef7c:	6861      	ldr	r1, [r4, #4]
 800ef7e:	4299      	cmp	r1, r3
 800ef80:	bfde      	ittt	le
 800ef82:	2330      	movle	r3, #48	; 0x30
 800ef84:	f805 3c01 	strble.w	r3, [r5, #-1]
 800ef88:	f105 35ff 	addle.w	r5, r5, #4294967295
 800ef8c:	1b52      	subs	r2, r2, r5
 800ef8e:	6122      	str	r2, [r4, #16]
 800ef90:	f8cd a000 	str.w	sl, [sp]
 800ef94:	464b      	mov	r3, r9
 800ef96:	aa03      	add	r2, sp, #12
 800ef98:	4621      	mov	r1, r4
 800ef9a:	4640      	mov	r0, r8
 800ef9c:	f7ff fee4 	bl	800ed68 <_printf_common>
 800efa0:	3001      	adds	r0, #1
 800efa2:	d14a      	bne.n	800f03a <_printf_i+0x1f6>
 800efa4:	f04f 30ff 	mov.w	r0, #4294967295
 800efa8:	b004      	add	sp, #16
 800efaa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800efae:	6823      	ldr	r3, [r4, #0]
 800efb0:	f043 0320 	orr.w	r3, r3, #32
 800efb4:	6023      	str	r3, [r4, #0]
 800efb6:	4833      	ldr	r0, [pc, #204]	; (800f084 <_printf_i+0x240>)
 800efb8:	2778      	movs	r7, #120	; 0x78
 800efba:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800efbe:	6823      	ldr	r3, [r4, #0]
 800efc0:	6829      	ldr	r1, [r5, #0]
 800efc2:	061f      	lsls	r7, r3, #24
 800efc4:	f851 6b04 	ldr.w	r6, [r1], #4
 800efc8:	d402      	bmi.n	800efd0 <_printf_i+0x18c>
 800efca:	065f      	lsls	r7, r3, #25
 800efcc:	bf48      	it	mi
 800efce:	b2b6      	uxthmi	r6, r6
 800efd0:	07df      	lsls	r7, r3, #31
 800efd2:	bf48      	it	mi
 800efd4:	f043 0320 	orrmi.w	r3, r3, #32
 800efd8:	6029      	str	r1, [r5, #0]
 800efda:	bf48      	it	mi
 800efdc:	6023      	strmi	r3, [r4, #0]
 800efde:	b91e      	cbnz	r6, 800efe8 <_printf_i+0x1a4>
 800efe0:	6823      	ldr	r3, [r4, #0]
 800efe2:	f023 0320 	bic.w	r3, r3, #32
 800efe6:	6023      	str	r3, [r4, #0]
 800efe8:	2310      	movs	r3, #16
 800efea:	e7a7      	b.n	800ef3c <_printf_i+0xf8>
 800efec:	4824      	ldr	r0, [pc, #144]	; (800f080 <_printf_i+0x23c>)
 800efee:	e7e4      	b.n	800efba <_printf_i+0x176>
 800eff0:	4615      	mov	r5, r2
 800eff2:	e7bd      	b.n	800ef70 <_printf_i+0x12c>
 800eff4:	682b      	ldr	r3, [r5, #0]
 800eff6:	6826      	ldr	r6, [r4, #0]
 800eff8:	6961      	ldr	r1, [r4, #20]
 800effa:	1d18      	adds	r0, r3, #4
 800effc:	6028      	str	r0, [r5, #0]
 800effe:	0635      	lsls	r5, r6, #24
 800f000:	681b      	ldr	r3, [r3, #0]
 800f002:	d501      	bpl.n	800f008 <_printf_i+0x1c4>
 800f004:	6019      	str	r1, [r3, #0]
 800f006:	e002      	b.n	800f00e <_printf_i+0x1ca>
 800f008:	0670      	lsls	r0, r6, #25
 800f00a:	d5fb      	bpl.n	800f004 <_printf_i+0x1c0>
 800f00c:	8019      	strh	r1, [r3, #0]
 800f00e:	2300      	movs	r3, #0
 800f010:	6123      	str	r3, [r4, #16]
 800f012:	4615      	mov	r5, r2
 800f014:	e7bc      	b.n	800ef90 <_printf_i+0x14c>
 800f016:	682b      	ldr	r3, [r5, #0]
 800f018:	1d1a      	adds	r2, r3, #4
 800f01a:	602a      	str	r2, [r5, #0]
 800f01c:	681d      	ldr	r5, [r3, #0]
 800f01e:	6862      	ldr	r2, [r4, #4]
 800f020:	2100      	movs	r1, #0
 800f022:	4628      	mov	r0, r5
 800f024:	f7f1 f8e4 	bl	80001f0 <memchr>
 800f028:	b108      	cbz	r0, 800f02e <_printf_i+0x1ea>
 800f02a:	1b40      	subs	r0, r0, r5
 800f02c:	6060      	str	r0, [r4, #4]
 800f02e:	6863      	ldr	r3, [r4, #4]
 800f030:	6123      	str	r3, [r4, #16]
 800f032:	2300      	movs	r3, #0
 800f034:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800f038:	e7aa      	b.n	800ef90 <_printf_i+0x14c>
 800f03a:	6923      	ldr	r3, [r4, #16]
 800f03c:	462a      	mov	r2, r5
 800f03e:	4649      	mov	r1, r9
 800f040:	4640      	mov	r0, r8
 800f042:	47d0      	blx	sl
 800f044:	3001      	adds	r0, #1
 800f046:	d0ad      	beq.n	800efa4 <_printf_i+0x160>
 800f048:	6823      	ldr	r3, [r4, #0]
 800f04a:	079b      	lsls	r3, r3, #30
 800f04c:	d413      	bmi.n	800f076 <_printf_i+0x232>
 800f04e:	68e0      	ldr	r0, [r4, #12]
 800f050:	9b03      	ldr	r3, [sp, #12]
 800f052:	4298      	cmp	r0, r3
 800f054:	bfb8      	it	lt
 800f056:	4618      	movlt	r0, r3
 800f058:	e7a6      	b.n	800efa8 <_printf_i+0x164>
 800f05a:	2301      	movs	r3, #1
 800f05c:	4632      	mov	r2, r6
 800f05e:	4649      	mov	r1, r9
 800f060:	4640      	mov	r0, r8
 800f062:	47d0      	blx	sl
 800f064:	3001      	adds	r0, #1
 800f066:	d09d      	beq.n	800efa4 <_printf_i+0x160>
 800f068:	3501      	adds	r5, #1
 800f06a:	68e3      	ldr	r3, [r4, #12]
 800f06c:	9903      	ldr	r1, [sp, #12]
 800f06e:	1a5b      	subs	r3, r3, r1
 800f070:	42ab      	cmp	r3, r5
 800f072:	dcf2      	bgt.n	800f05a <_printf_i+0x216>
 800f074:	e7eb      	b.n	800f04e <_printf_i+0x20a>
 800f076:	2500      	movs	r5, #0
 800f078:	f104 0619 	add.w	r6, r4, #25
 800f07c:	e7f5      	b.n	800f06a <_printf_i+0x226>
 800f07e:	bf00      	nop
 800f080:	08011f8a 	.word	0x08011f8a
 800f084:	08011f9b 	.word	0x08011f9b

0800f088 <__sflush_r>:
 800f088:	898a      	ldrh	r2, [r1, #12]
 800f08a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f08e:	4605      	mov	r5, r0
 800f090:	0710      	lsls	r0, r2, #28
 800f092:	460c      	mov	r4, r1
 800f094:	d458      	bmi.n	800f148 <__sflush_r+0xc0>
 800f096:	684b      	ldr	r3, [r1, #4]
 800f098:	2b00      	cmp	r3, #0
 800f09a:	dc05      	bgt.n	800f0a8 <__sflush_r+0x20>
 800f09c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800f09e:	2b00      	cmp	r3, #0
 800f0a0:	dc02      	bgt.n	800f0a8 <__sflush_r+0x20>
 800f0a2:	2000      	movs	r0, #0
 800f0a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f0a8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800f0aa:	2e00      	cmp	r6, #0
 800f0ac:	d0f9      	beq.n	800f0a2 <__sflush_r+0x1a>
 800f0ae:	2300      	movs	r3, #0
 800f0b0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800f0b4:	682f      	ldr	r7, [r5, #0]
 800f0b6:	6a21      	ldr	r1, [r4, #32]
 800f0b8:	602b      	str	r3, [r5, #0]
 800f0ba:	d032      	beq.n	800f122 <__sflush_r+0x9a>
 800f0bc:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800f0be:	89a3      	ldrh	r3, [r4, #12]
 800f0c0:	075a      	lsls	r2, r3, #29
 800f0c2:	d505      	bpl.n	800f0d0 <__sflush_r+0x48>
 800f0c4:	6863      	ldr	r3, [r4, #4]
 800f0c6:	1ac0      	subs	r0, r0, r3
 800f0c8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800f0ca:	b10b      	cbz	r3, 800f0d0 <__sflush_r+0x48>
 800f0cc:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800f0ce:	1ac0      	subs	r0, r0, r3
 800f0d0:	2300      	movs	r3, #0
 800f0d2:	4602      	mov	r2, r0
 800f0d4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800f0d6:	6a21      	ldr	r1, [r4, #32]
 800f0d8:	4628      	mov	r0, r5
 800f0da:	47b0      	blx	r6
 800f0dc:	1c43      	adds	r3, r0, #1
 800f0de:	89a3      	ldrh	r3, [r4, #12]
 800f0e0:	d106      	bne.n	800f0f0 <__sflush_r+0x68>
 800f0e2:	6829      	ldr	r1, [r5, #0]
 800f0e4:	291d      	cmp	r1, #29
 800f0e6:	d82b      	bhi.n	800f140 <__sflush_r+0xb8>
 800f0e8:	4a29      	ldr	r2, [pc, #164]	; (800f190 <__sflush_r+0x108>)
 800f0ea:	410a      	asrs	r2, r1
 800f0ec:	07d6      	lsls	r6, r2, #31
 800f0ee:	d427      	bmi.n	800f140 <__sflush_r+0xb8>
 800f0f0:	2200      	movs	r2, #0
 800f0f2:	6062      	str	r2, [r4, #4]
 800f0f4:	04d9      	lsls	r1, r3, #19
 800f0f6:	6922      	ldr	r2, [r4, #16]
 800f0f8:	6022      	str	r2, [r4, #0]
 800f0fa:	d504      	bpl.n	800f106 <__sflush_r+0x7e>
 800f0fc:	1c42      	adds	r2, r0, #1
 800f0fe:	d101      	bne.n	800f104 <__sflush_r+0x7c>
 800f100:	682b      	ldr	r3, [r5, #0]
 800f102:	b903      	cbnz	r3, 800f106 <__sflush_r+0x7e>
 800f104:	6560      	str	r0, [r4, #84]	; 0x54
 800f106:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800f108:	602f      	str	r7, [r5, #0]
 800f10a:	2900      	cmp	r1, #0
 800f10c:	d0c9      	beq.n	800f0a2 <__sflush_r+0x1a>
 800f10e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800f112:	4299      	cmp	r1, r3
 800f114:	d002      	beq.n	800f11c <__sflush_r+0x94>
 800f116:	4628      	mov	r0, r5
 800f118:	f7ff fbe2 	bl	800e8e0 <_free_r>
 800f11c:	2000      	movs	r0, #0
 800f11e:	6360      	str	r0, [r4, #52]	; 0x34
 800f120:	e7c0      	b.n	800f0a4 <__sflush_r+0x1c>
 800f122:	2301      	movs	r3, #1
 800f124:	4628      	mov	r0, r5
 800f126:	47b0      	blx	r6
 800f128:	1c41      	adds	r1, r0, #1
 800f12a:	d1c8      	bne.n	800f0be <__sflush_r+0x36>
 800f12c:	682b      	ldr	r3, [r5, #0]
 800f12e:	2b00      	cmp	r3, #0
 800f130:	d0c5      	beq.n	800f0be <__sflush_r+0x36>
 800f132:	2b1d      	cmp	r3, #29
 800f134:	d001      	beq.n	800f13a <__sflush_r+0xb2>
 800f136:	2b16      	cmp	r3, #22
 800f138:	d101      	bne.n	800f13e <__sflush_r+0xb6>
 800f13a:	602f      	str	r7, [r5, #0]
 800f13c:	e7b1      	b.n	800f0a2 <__sflush_r+0x1a>
 800f13e:	89a3      	ldrh	r3, [r4, #12]
 800f140:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f144:	81a3      	strh	r3, [r4, #12]
 800f146:	e7ad      	b.n	800f0a4 <__sflush_r+0x1c>
 800f148:	690f      	ldr	r7, [r1, #16]
 800f14a:	2f00      	cmp	r7, #0
 800f14c:	d0a9      	beq.n	800f0a2 <__sflush_r+0x1a>
 800f14e:	0793      	lsls	r3, r2, #30
 800f150:	680e      	ldr	r6, [r1, #0]
 800f152:	bf08      	it	eq
 800f154:	694b      	ldreq	r3, [r1, #20]
 800f156:	600f      	str	r7, [r1, #0]
 800f158:	bf18      	it	ne
 800f15a:	2300      	movne	r3, #0
 800f15c:	eba6 0807 	sub.w	r8, r6, r7
 800f160:	608b      	str	r3, [r1, #8]
 800f162:	f1b8 0f00 	cmp.w	r8, #0
 800f166:	dd9c      	ble.n	800f0a2 <__sflush_r+0x1a>
 800f168:	6a21      	ldr	r1, [r4, #32]
 800f16a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800f16c:	4643      	mov	r3, r8
 800f16e:	463a      	mov	r2, r7
 800f170:	4628      	mov	r0, r5
 800f172:	47b0      	blx	r6
 800f174:	2800      	cmp	r0, #0
 800f176:	dc06      	bgt.n	800f186 <__sflush_r+0xfe>
 800f178:	89a3      	ldrh	r3, [r4, #12]
 800f17a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f17e:	81a3      	strh	r3, [r4, #12]
 800f180:	f04f 30ff 	mov.w	r0, #4294967295
 800f184:	e78e      	b.n	800f0a4 <__sflush_r+0x1c>
 800f186:	4407      	add	r7, r0
 800f188:	eba8 0800 	sub.w	r8, r8, r0
 800f18c:	e7e9      	b.n	800f162 <__sflush_r+0xda>
 800f18e:	bf00      	nop
 800f190:	dfbffffe 	.word	0xdfbffffe

0800f194 <_fflush_r>:
 800f194:	b538      	push	{r3, r4, r5, lr}
 800f196:	690b      	ldr	r3, [r1, #16]
 800f198:	4605      	mov	r5, r0
 800f19a:	460c      	mov	r4, r1
 800f19c:	b913      	cbnz	r3, 800f1a4 <_fflush_r+0x10>
 800f19e:	2500      	movs	r5, #0
 800f1a0:	4628      	mov	r0, r5
 800f1a2:	bd38      	pop	{r3, r4, r5, pc}
 800f1a4:	b118      	cbz	r0, 800f1ae <_fflush_r+0x1a>
 800f1a6:	6a03      	ldr	r3, [r0, #32]
 800f1a8:	b90b      	cbnz	r3, 800f1ae <_fflush_r+0x1a>
 800f1aa:	f7ff f96d 	bl	800e488 <__sinit>
 800f1ae:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f1b2:	2b00      	cmp	r3, #0
 800f1b4:	d0f3      	beq.n	800f19e <_fflush_r+0xa>
 800f1b6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800f1b8:	07d0      	lsls	r0, r2, #31
 800f1ba:	d404      	bmi.n	800f1c6 <_fflush_r+0x32>
 800f1bc:	0599      	lsls	r1, r3, #22
 800f1be:	d402      	bmi.n	800f1c6 <_fflush_r+0x32>
 800f1c0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800f1c2:	f7ff fb5f 	bl	800e884 <__retarget_lock_acquire_recursive>
 800f1c6:	4628      	mov	r0, r5
 800f1c8:	4621      	mov	r1, r4
 800f1ca:	f7ff ff5d 	bl	800f088 <__sflush_r>
 800f1ce:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800f1d0:	07da      	lsls	r2, r3, #31
 800f1d2:	4605      	mov	r5, r0
 800f1d4:	d4e4      	bmi.n	800f1a0 <_fflush_r+0xc>
 800f1d6:	89a3      	ldrh	r3, [r4, #12]
 800f1d8:	059b      	lsls	r3, r3, #22
 800f1da:	d4e1      	bmi.n	800f1a0 <_fflush_r+0xc>
 800f1dc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800f1de:	f7ff fb52 	bl	800e886 <__retarget_lock_release_recursive>
 800f1e2:	e7dd      	b.n	800f1a0 <_fflush_r+0xc>

0800f1e4 <fiprintf>:
 800f1e4:	b40e      	push	{r1, r2, r3}
 800f1e6:	b503      	push	{r0, r1, lr}
 800f1e8:	4601      	mov	r1, r0
 800f1ea:	ab03      	add	r3, sp, #12
 800f1ec:	4805      	ldr	r0, [pc, #20]	; (800f204 <fiprintf+0x20>)
 800f1ee:	f853 2b04 	ldr.w	r2, [r3], #4
 800f1f2:	6800      	ldr	r0, [r0, #0]
 800f1f4:	9301      	str	r3, [sp, #4]
 800f1f6:	f7ff fc9d 	bl	800eb34 <_vfiprintf_r>
 800f1fa:	b002      	add	sp, #8
 800f1fc:	f85d eb04 	ldr.w	lr, [sp], #4
 800f200:	b003      	add	sp, #12
 800f202:	4770      	bx	lr
 800f204:	20000084 	.word	0x20000084

0800f208 <__swhatbuf_r>:
 800f208:	b570      	push	{r4, r5, r6, lr}
 800f20a:	460c      	mov	r4, r1
 800f20c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f210:	2900      	cmp	r1, #0
 800f212:	b096      	sub	sp, #88	; 0x58
 800f214:	4615      	mov	r5, r2
 800f216:	461e      	mov	r6, r3
 800f218:	da0d      	bge.n	800f236 <__swhatbuf_r+0x2e>
 800f21a:	89a3      	ldrh	r3, [r4, #12]
 800f21c:	f013 0f80 	tst.w	r3, #128	; 0x80
 800f220:	f04f 0100 	mov.w	r1, #0
 800f224:	bf0c      	ite	eq
 800f226:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800f22a:	2340      	movne	r3, #64	; 0x40
 800f22c:	2000      	movs	r0, #0
 800f22e:	6031      	str	r1, [r6, #0]
 800f230:	602b      	str	r3, [r5, #0]
 800f232:	b016      	add	sp, #88	; 0x58
 800f234:	bd70      	pop	{r4, r5, r6, pc}
 800f236:	466a      	mov	r2, sp
 800f238:	f000 f848 	bl	800f2cc <_fstat_r>
 800f23c:	2800      	cmp	r0, #0
 800f23e:	dbec      	blt.n	800f21a <__swhatbuf_r+0x12>
 800f240:	9901      	ldr	r1, [sp, #4]
 800f242:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800f246:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800f24a:	4259      	negs	r1, r3
 800f24c:	4159      	adcs	r1, r3
 800f24e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800f252:	e7eb      	b.n	800f22c <__swhatbuf_r+0x24>

0800f254 <__smakebuf_r>:
 800f254:	898b      	ldrh	r3, [r1, #12]
 800f256:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800f258:	079d      	lsls	r5, r3, #30
 800f25a:	4606      	mov	r6, r0
 800f25c:	460c      	mov	r4, r1
 800f25e:	d507      	bpl.n	800f270 <__smakebuf_r+0x1c>
 800f260:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800f264:	6023      	str	r3, [r4, #0]
 800f266:	6123      	str	r3, [r4, #16]
 800f268:	2301      	movs	r3, #1
 800f26a:	6163      	str	r3, [r4, #20]
 800f26c:	b002      	add	sp, #8
 800f26e:	bd70      	pop	{r4, r5, r6, pc}
 800f270:	ab01      	add	r3, sp, #4
 800f272:	466a      	mov	r2, sp
 800f274:	f7ff ffc8 	bl	800f208 <__swhatbuf_r>
 800f278:	9900      	ldr	r1, [sp, #0]
 800f27a:	4605      	mov	r5, r0
 800f27c:	4630      	mov	r0, r6
 800f27e:	f7ff fba3 	bl	800e9c8 <_malloc_r>
 800f282:	b948      	cbnz	r0, 800f298 <__smakebuf_r+0x44>
 800f284:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f288:	059a      	lsls	r2, r3, #22
 800f28a:	d4ef      	bmi.n	800f26c <__smakebuf_r+0x18>
 800f28c:	f023 0303 	bic.w	r3, r3, #3
 800f290:	f043 0302 	orr.w	r3, r3, #2
 800f294:	81a3      	strh	r3, [r4, #12]
 800f296:	e7e3      	b.n	800f260 <__smakebuf_r+0xc>
 800f298:	89a3      	ldrh	r3, [r4, #12]
 800f29a:	6020      	str	r0, [r4, #0]
 800f29c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f2a0:	81a3      	strh	r3, [r4, #12]
 800f2a2:	9b00      	ldr	r3, [sp, #0]
 800f2a4:	6163      	str	r3, [r4, #20]
 800f2a6:	9b01      	ldr	r3, [sp, #4]
 800f2a8:	6120      	str	r0, [r4, #16]
 800f2aa:	b15b      	cbz	r3, 800f2c4 <__smakebuf_r+0x70>
 800f2ac:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f2b0:	4630      	mov	r0, r6
 800f2b2:	f000 f81d 	bl	800f2f0 <_isatty_r>
 800f2b6:	b128      	cbz	r0, 800f2c4 <__smakebuf_r+0x70>
 800f2b8:	89a3      	ldrh	r3, [r4, #12]
 800f2ba:	f023 0303 	bic.w	r3, r3, #3
 800f2be:	f043 0301 	orr.w	r3, r3, #1
 800f2c2:	81a3      	strh	r3, [r4, #12]
 800f2c4:	89a3      	ldrh	r3, [r4, #12]
 800f2c6:	431d      	orrs	r5, r3
 800f2c8:	81a5      	strh	r5, [r4, #12]
 800f2ca:	e7cf      	b.n	800f26c <__smakebuf_r+0x18>

0800f2cc <_fstat_r>:
 800f2cc:	b538      	push	{r3, r4, r5, lr}
 800f2ce:	4d07      	ldr	r5, [pc, #28]	; (800f2ec <_fstat_r+0x20>)
 800f2d0:	2300      	movs	r3, #0
 800f2d2:	4604      	mov	r4, r0
 800f2d4:	4608      	mov	r0, r1
 800f2d6:	4611      	mov	r1, r2
 800f2d8:	602b      	str	r3, [r5, #0]
 800f2da:	f7f1 fbbe 	bl	8000a5a <_fstat>
 800f2de:	1c43      	adds	r3, r0, #1
 800f2e0:	d102      	bne.n	800f2e8 <_fstat_r+0x1c>
 800f2e2:	682b      	ldr	r3, [r5, #0]
 800f2e4:	b103      	cbz	r3, 800f2e8 <_fstat_r+0x1c>
 800f2e6:	6023      	str	r3, [r4, #0]
 800f2e8:	bd38      	pop	{r3, r4, r5, pc}
 800f2ea:	bf00      	nop
 800f2ec:	20008518 	.word	0x20008518

0800f2f0 <_isatty_r>:
 800f2f0:	b538      	push	{r3, r4, r5, lr}
 800f2f2:	4d06      	ldr	r5, [pc, #24]	; (800f30c <_isatty_r+0x1c>)
 800f2f4:	2300      	movs	r3, #0
 800f2f6:	4604      	mov	r4, r0
 800f2f8:	4608      	mov	r0, r1
 800f2fa:	602b      	str	r3, [r5, #0]
 800f2fc:	f7f1 fbbd 	bl	8000a7a <_isatty>
 800f300:	1c43      	adds	r3, r0, #1
 800f302:	d102      	bne.n	800f30a <_isatty_r+0x1a>
 800f304:	682b      	ldr	r3, [r5, #0]
 800f306:	b103      	cbz	r3, 800f30a <_isatty_r+0x1a>
 800f308:	6023      	str	r3, [r4, #0]
 800f30a:	bd38      	pop	{r3, r4, r5, pc}
 800f30c:	20008518 	.word	0x20008518

0800f310 <_sbrk_r>:
 800f310:	b538      	push	{r3, r4, r5, lr}
 800f312:	4d06      	ldr	r5, [pc, #24]	; (800f32c <_sbrk_r+0x1c>)
 800f314:	2300      	movs	r3, #0
 800f316:	4604      	mov	r4, r0
 800f318:	4608      	mov	r0, r1
 800f31a:	602b      	str	r3, [r5, #0]
 800f31c:	f7f1 fbc6 	bl	8000aac <_sbrk>
 800f320:	1c43      	adds	r3, r0, #1
 800f322:	d102      	bne.n	800f32a <_sbrk_r+0x1a>
 800f324:	682b      	ldr	r3, [r5, #0]
 800f326:	b103      	cbz	r3, 800f32a <_sbrk_r+0x1a>
 800f328:	6023      	str	r3, [r4, #0]
 800f32a:	bd38      	pop	{r3, r4, r5, pc}
 800f32c:	20008518 	.word	0x20008518

0800f330 <abort>:
 800f330:	b508      	push	{r3, lr}
 800f332:	2006      	movs	r0, #6
 800f334:	f000 f82c 	bl	800f390 <raise>
 800f338:	2001      	movs	r0, #1
 800f33a:	f7f1 fb5b 	bl	80009f4 <_exit>

0800f33e <_raise_r>:
 800f33e:	291f      	cmp	r1, #31
 800f340:	b538      	push	{r3, r4, r5, lr}
 800f342:	4604      	mov	r4, r0
 800f344:	460d      	mov	r5, r1
 800f346:	d904      	bls.n	800f352 <_raise_r+0x14>
 800f348:	2316      	movs	r3, #22
 800f34a:	6003      	str	r3, [r0, #0]
 800f34c:	f04f 30ff 	mov.w	r0, #4294967295
 800f350:	bd38      	pop	{r3, r4, r5, pc}
 800f352:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800f354:	b112      	cbz	r2, 800f35c <_raise_r+0x1e>
 800f356:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800f35a:	b94b      	cbnz	r3, 800f370 <_raise_r+0x32>
 800f35c:	4620      	mov	r0, r4
 800f35e:	f000 f831 	bl	800f3c4 <_getpid_r>
 800f362:	462a      	mov	r2, r5
 800f364:	4601      	mov	r1, r0
 800f366:	4620      	mov	r0, r4
 800f368:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f36c:	f000 b818 	b.w	800f3a0 <_kill_r>
 800f370:	2b01      	cmp	r3, #1
 800f372:	d00a      	beq.n	800f38a <_raise_r+0x4c>
 800f374:	1c59      	adds	r1, r3, #1
 800f376:	d103      	bne.n	800f380 <_raise_r+0x42>
 800f378:	2316      	movs	r3, #22
 800f37a:	6003      	str	r3, [r0, #0]
 800f37c:	2001      	movs	r0, #1
 800f37e:	e7e7      	b.n	800f350 <_raise_r+0x12>
 800f380:	2400      	movs	r4, #0
 800f382:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800f386:	4628      	mov	r0, r5
 800f388:	4798      	blx	r3
 800f38a:	2000      	movs	r0, #0
 800f38c:	e7e0      	b.n	800f350 <_raise_r+0x12>
	...

0800f390 <raise>:
 800f390:	4b02      	ldr	r3, [pc, #8]	; (800f39c <raise+0xc>)
 800f392:	4601      	mov	r1, r0
 800f394:	6818      	ldr	r0, [r3, #0]
 800f396:	f7ff bfd2 	b.w	800f33e <_raise_r>
 800f39a:	bf00      	nop
 800f39c:	20000084 	.word	0x20000084

0800f3a0 <_kill_r>:
 800f3a0:	b538      	push	{r3, r4, r5, lr}
 800f3a2:	4d07      	ldr	r5, [pc, #28]	; (800f3c0 <_kill_r+0x20>)
 800f3a4:	2300      	movs	r3, #0
 800f3a6:	4604      	mov	r4, r0
 800f3a8:	4608      	mov	r0, r1
 800f3aa:	4611      	mov	r1, r2
 800f3ac:	602b      	str	r3, [r5, #0]
 800f3ae:	f7f1 fb0f 	bl	80009d0 <_kill>
 800f3b2:	1c43      	adds	r3, r0, #1
 800f3b4:	d102      	bne.n	800f3bc <_kill_r+0x1c>
 800f3b6:	682b      	ldr	r3, [r5, #0]
 800f3b8:	b103      	cbz	r3, 800f3bc <_kill_r+0x1c>
 800f3ba:	6023      	str	r3, [r4, #0]
 800f3bc:	bd38      	pop	{r3, r4, r5, pc}
 800f3be:	bf00      	nop
 800f3c0:	20008518 	.word	0x20008518

0800f3c4 <_getpid_r>:
 800f3c4:	f7f1 bafc 	b.w	80009c0 <_getpid>

0800f3c8 <_init>:
 800f3c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f3ca:	bf00      	nop
 800f3cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f3ce:	bc08      	pop	{r3}
 800f3d0:	469e      	mov	lr, r3
 800f3d2:	4770      	bx	lr

0800f3d4 <_fini>:
 800f3d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f3d6:	bf00      	nop
 800f3d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f3da:	bc08      	pop	{r3}
 800f3dc:	469e      	mov	lr, r3
 800f3de:	4770      	bx	lr
